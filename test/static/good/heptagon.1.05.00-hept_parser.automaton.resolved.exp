State 0:
## Known stack suffix:
##
## LR(1) items:
interface' -> . interface [ # ]
## Transitions:
-- On OPEN shift to state 1
-- On opens shift to state 6
-- On list(opens) shift to state 8
-- On interface shift to state 389
## Reductions:
-- On VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST
--   reduce production list(opens) ->

State 1:
## Known stack suffix:
## OPEN
## LR(1) items:
opens -> OPEN . modul [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On Constructor shift to state 2
-- On modul shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## Constructor
## LR(1) items:
modul -> Constructor . [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modul -> Constructor

State 3:
## Known stack suffix:
## OPEN modul
## LR(1) items:
modul -> modul . DOT Constructor [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
opens -> OPEN modul . [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On DOT shift to state 4
## Reductions:
-- On VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF CONST
--   reduce production opens -> OPEN modul

State 4:
## Known stack suffix:
## modul DOT
## LR(1) items:
modul -> modul DOT . Constructor [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
## Transitions:
-- On Constructor shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## modul DOT Constructor
## LR(1) items:
modul -> modul DOT Constructor . [ VAL UNSAFE TYPE PRAGMA OPEN NODE FUN EXTERNAL EOF DOT CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modul -> modul DOT Constructor

State 6:
## Known stack suffix:
## opens
## LR(1) items:
list(opens) -> opens . list(opens) [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On OPEN shift to state 1
-- On opens shift to state 6
-- On list(opens) shift to state 7
## Reductions:
-- On VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST
--   reduce production list(opens) ->

State 7:
## Known stack suffix:
## opens list(opens)
## LR(1) items:
list(opens) -> opens list(opens) . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(opens) -> opens list(opens)

State 8:
## Known stack suffix:
## list(opens)
## LR(1) items:
interface -> list(opens) . list(interface_desc) EOF [ # ]
## Transitions:
-- On TYPE shift to state 9
-- On EXTERNAL shift to state 306
-- On CONST shift to state 307
-- On type_dec shift to state 313
-- On list(interface_desc) shift to state 314
-- On interface_desc shift to state 316
-- On extern shift to state 318
-- On const_dec shift to state 388
## Reductions:
-- On VAL UNSAFE NODE FUN
--   reduce production extern ->
-- On EOF
--   reduce production list(interface_desc) ->

State 9:
## Known stack suffix:
## TYPE
## LR(1) items:
type_dec -> TYPE . IDENT [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE . IDENT EQUAL ty_ident [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE . IDENT EQUAL enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE . IDENT EQUAL struct_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On IDENT shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## TYPE IDENT
## LR(1) items:
type_dec -> TYPE IDENT . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT . EQUAL ty_ident [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT . EQUAL enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT . EQUAL struct_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On EQUAL shift to state 11
## Reductions:
-- On VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST
--   reduce production type_dec -> TYPE IDENT

State 11:
## Known stack suffix:
## TYPE IDENT EQUAL
## LR(1) items:
type_dec -> TYPE IDENT EQUAL . ty_ident [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT EQUAL . enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT EQUAL . struct_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On LPAREN shift to state 12
-- On LBRACE shift to state 30
-- On IDENT shift to state 33
-- On Constructor shift to state 296
-- On BOOL shift to state 299
-- On ty_ident shift to state 303
-- On struct_ty_desc shift to state 304
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
-- On enum_ty_desc shift to state 305
## Reductions:

State 12:
## Known stack suffix:
## LPAREN
## LR(1) items:
ident -> LPAREN . infx RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 13
-- On STAR shift to state 14
-- On PREFIX shift to state 15
-- On OR shift to state 16
-- On NOT shift to state 17
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On infx shift to state 28
## Reductions:

State 13:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
infx -> SUBTRACTIVE . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> SUBTRACTIVE

State 14:
## Known stack suffix:
## STAR
## LR(1) items:
infx -> STAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> STAR

State 15:
## Known stack suffix:
## PREFIX
## LR(1) items:
infx -> PREFIX . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> PREFIX

State 16:
## Known stack suffix:
## OR
## LR(1) items:
infx -> OR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> OR

State 17:
## Known stack suffix:
## NOT
## LR(1) items:
infx -> NOT . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> NOT

State 18:
## Known stack suffix:
## INFIX4
## LR(1) items:
infx -> INFIX4 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> INFIX4

State 19:
## Known stack suffix:
## INFIX3
## LR(1) items:
infx -> INFIX3 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> INFIX3

State 20:
## Known stack suffix:
## INFIX2
## LR(1) items:
infx -> INFIX2 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> INFIX2

State 21:
## Known stack suffix:
## INFIX1
## LR(1) items:
infx -> INFIX1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> INFIX1

State 22:
## Known stack suffix:
## INFIX0
## LR(1) items:
infx -> INFIX0 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> INFIX0

State 23:
## Known stack suffix:
## EQUALEQUAL
## LR(1) items:
infx -> EQUALEQUAL . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> EQUALEQUAL

State 24:
## Known stack suffix:
## EQUAL
## LR(1) items:
infx -> EQUAL . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> EQUAL

State 25:
## Known stack suffix:
## BARBAR
## LR(1) items:
infx -> BARBAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> BARBAR

State 26:
## Known stack suffix:
## AMPERSAND
## LR(1) items:
infx -> AMPERSAND . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> AMPERSAND

State 27:
## Known stack suffix:
## AMPERAMPER
## LR(1) items:
infx -> AMPERAMPER . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production infx -> AMPERAMPER

State 28:
## Known stack suffix:
## LPAREN infx
## LR(1) items:
ident -> LPAREN infx . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## LPAREN infx RPAREN
## LR(1) items:
ident -> LPAREN infx RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> LPAREN infx RPAREN

State 30:
## Known stack suffix:
## LBRACE
## LR(1) items:
struct_ty_desc -> LBRACE . label_ty_list RBRACE [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On IDENT shift to state 31
-- On label_ty_list shift to state 291
-- On label_ty shift to state 293
## Reductions:

State 31:
## Known stack suffix:
## IDENT
## LR(1) items:
label_ty -> IDENT . COLON ty_ident [ SEMICOL RBRACE ]
## Transitions:
-- On COLON shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
label_ty -> IDENT COLON . ty_ident [ SEMICOL RBRACE ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 34
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
## Reductions:

State 33:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT

State 34:
## Known stack suffix:
## IDENT COLON ty_ident
## LR(1) items:
label_ty -> IDENT COLON ty_ident . [ SEMICOL RBRACE ]
ty_ident -> ty_ident . POWER simple_exp [ SEMICOL RBRACE POWER ]
## Transitions:
-- On POWER shift to state 35
## Reductions:
-- On SEMICOL RBRACE
--   reduce production label_ty -> IDENT COLON ty_ident

State 35:
## Known stack suffix:
## ty_ident POWER
## LR(1) items:
ty_ident -> ty_ident POWER . simple_exp [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER CONST COLONCOLON BAR AT ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 289
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 36:
## Known stack suffix:
## STRING
## LR(1) items:
_const -> STRING . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _const -> STRING

State 37:
## Known stack suffix:
## LPAREN
## LR(1) items:
_simple_exp -> LPAREN . tuple_exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 38:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
_exp -> SUBTRACTIVE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 268
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 39:
## Known stack suffix:
## SPLIT
## LR(1) items:
_exp -> SPLIT . ident LPAREN exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On ident shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## SPLIT ident
## LR(1) items:
_exp -> SPLIT ident . LPAREN exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## SPLIT ident LPAREN
## LR(1) items:
_exp -> SPLIT ident LPAREN . exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 287
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 42:
## Known stack suffix:
## REINIT
## LR(1) items:
_exp -> REINIT . LPAREN exp COMMA exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## REINIT LPAREN
## LR(1) items:
_exp -> REINIT LPAREN . exp COMMA exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 283
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 44:
## Known stack suffix:
## PREFIX
## LR(1) items:
_exp -> PREFIX . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 222
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 45:
## Known stack suffix:
## PRE
## LR(1) items:
_exp -> PRE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 282
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 46:
## Known stack suffix:
## NOT
## LR(1) items:
_exp -> NOT . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 224
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 47:
## Known stack suffix:
## MERGE
## LR(1) items:
_exp -> MERGE . IDENT merge_handlers [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On IDENT shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## MERGE IDENT
## LR(1) items:
_exp -> MERGE IDENT . merge_handlers [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 49
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 275
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On nonempty_list(merge_handler) shift to state 277
-- On modul shift to state 81
-- On merge_handlers shift to state 278
-- On merge_handler shift to state 279
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 49:
## Known stack suffix:
## LPAREN
## LR(1) items:
_simple_exp -> LPAREN . tuple_exp RPAREN [ STRING LPAREN LBRACKET LBRACE INT IDENT FLOAT DOT Constructor BOOL ]
merge_handler -> LPAREN . constructor_or_bool ARROW exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ STRING LPAREN LBRACKET LBRACE INT IDENT FLOAT DOT Constructor BOOL ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 269
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor_or_bool shift to state 270
-- On constructor shift to state 274
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 50:
## Known stack suffix:
## MAPI
## LR(1) items:
iterator -> MAPI . [ DOUBLE_LESS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iterator -> MAPI

State 51:
## Known stack suffix:
## MAPFOLD
## LR(1) items:
iterator -> MAPFOLD . [ DOUBLE_LESS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iterator -> MAPFOLD

State 52:
## Known stack suffix:
## MAP
## LR(1) items:
iterator -> MAP . [ DOUBLE_LESS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iterator -> MAP

State 53:
## Known stack suffix:
## LPAREN
## LR(1) items:
_simple_exp -> LPAREN . tuple_exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
ident -> LPAREN . infx RPAREN [ LPAREN DOUBLE_LESS ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 54
-- On STRING shift to state 36
-- On STAR shift to state 14
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 58
-- On PRE shift to state 45
-- On OR shift to state 16
-- On NOT shift to state 223
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On infx shift to state 28
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 54:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
_exp -> SUBTRACTIVE . exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
infx -> SUBTRACTIVE . [ RPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 268
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN
--   reduce production infx -> SUBTRACTIVE

State 55:
## Known stack suffix:
## LBRACKET
## LR(1) items:
_exp -> LBRACKET . exp WITH indexes EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> LBRACKET . array_exp_list RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 262
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 158
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 56:
## Known stack suffix:
## LBRACE
## LR(1) items:
_exp -> LBRACE . simple_exp WITH DOT qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> LBRACE . field_exp_list RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 57
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 253
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 254
-- On qualname shift to state 110
-- On qualified(ident) shift to state 261
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On ident shift to state 88
-- On field_exp_list shift to state 143
-- On field_exp shift to state 145
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 57:
## Known stack suffix:
## LPAREN
## LR(1) items:
_simple_exp -> LPAREN . tuple_exp RPAREN [ WITH DOT ]
ident -> LPAREN . infx RPAREN [ EQUAL ]
simple_exp -> LPAREN . exp ct_annot RPAREN [ WITH DOT ]
## Transitions:
-- On SUBTRACTIVE shift to state 54
-- On STRING shift to state 36
-- On STAR shift to state 14
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 58
-- On PRE shift to state 45
-- On OR shift to state 16
-- On NOT shift to state 223
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On tuple_exp shift to state 225
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On infx shift to state 28
-- On ident shift to state 88
-- On exp shift to state 227
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 58:
## Known stack suffix:
## PREFIX
## LR(1) items:
_exp -> PREFIX . exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
infx -> PREFIX . [ RPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 222
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN
--   reduce production infx -> PREFIX

State 59:
## Known stack suffix:
## LAST
## LR(1) items:
_exp -> LAST . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On IDENT shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## LAST IDENT
## LR(1) items:
_exp -> LAST IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> LAST IDENT

State 61:
## Known stack suffix:
## INT
## LR(1) items:
_const -> INT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _const -> INT

State 62:
## Known stack suffix:
## INLINED
## LR(1) items:
node_name -> INLINED . qualname call_params [ LPAREN ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 63
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
## Reductions:

State 63:
## Known stack suffix:
## INLINED qualname
## LR(1) items:
node_name -> INLINED qualname . call_params [ LPAREN ]
## Transitions:
-- On DOUBLE_LESS shift to state 64
-- On call_params shift to state 221
## Reductions:
-- On LPAREN
--   reduce production call_params ->

State 64:
## Known stack suffix:
## DOUBLE_LESS
## LR(1) items:
call_params -> DOUBLE_LESS . array_exp_list DOUBLE_GREATER [ LPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 219
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 65:
## Known stack suffix:
## IF
## LR(1) items:
_exp -> IF . exp THEN exp ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 214
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 66:
## Known stack suffix:
## IDENT
## LR(1) items:
_simple_exp -> IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
ident -> IDENT . [ LPAREN DOUBLE_LESS ]
## Transitions:
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND
--   reduce production _simple_exp -> IDENT
-- On LPAREN DOUBLE_LESS
--   reduce production ident -> IDENT

State 67:
## Known stack suffix:
## FOLDI
## LR(1) items:
iterator -> FOLDI . [ DOUBLE_LESS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iterator -> FOLDI

State 68:
## Known stack suffix:
## FOLD
## LR(1) items:
iterator -> FOLD . [ DOUBLE_LESS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iterator -> FOLD

State 69:
## Known stack suffix:
## FLOAT
## LR(1) items:
_const -> FLOAT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _const -> FLOAT

State 70:
## Known stack suffix:
## Constructor
## LR(1) items:
constructor -> Constructor . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
modul -> Constructor . [ DOT ]
## Transitions:
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND
--   reduce production constructor -> Constructor
-- On DOT
--   reduce production modul -> Constructor

State 71:
## Known stack suffix:
## BOOL
## LR(1) items:
_const -> BOOL . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _const -> BOOL

State 72:
## Known stack suffix:
## simple_exp
## LR(1) items:
_exp -> simple_exp . FBY exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . ARROW exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . DOT indexes DEFAULT exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp . LBRACKET exp DOUBLE_DOT exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> simple_exp . DOT qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
exp -> simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LBRACKETGREATER shift to state 73
-- On LBRACKET shift to state 195
-- On FBY shift to state 204
-- On DOT shift to state 206
-- On ARROW shift to state 210
-- On trunc_indexes shift to state 212
-- On indexes shift to state 213
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production exp -> simple_exp

State 73:
## Known stack suffix:
## LBRACKETGREATER
## LR(1) items:
trunc_indexes -> LBRACKETGREATER . exp LESSRBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER . exp LESSRBRACKET trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 192
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 74:
## Known stack suffix:
## qualname
## LR(1) items:
node_name -> qualname . call_params [ LPAREN ]
## Transitions:
-- On DOUBLE_LESS shift to state 64
-- On call_params shift to state 75
## Reductions:
-- On LPAREN
--   reduce production call_params ->

State 75:
## Known stack suffix:
## qualname call_params
## LR(1) items:
node_name -> qualname call_params . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_name -> qualname call_params

State 76:
## Known stack suffix:
## qualified(ident)
## LR(1) items:
_const -> qualified(ident) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
qualname -> qualified(ident) . [ LPAREN DOUBLE_LESS ]
## Transitions:
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND
--   reduce production _const -> qualified(ident)
-- On LPAREN DOUBLE_LESS
--   reduce production qualname -> qualified(ident)

State 77:
## Known stack suffix:
## qualified(Constructor)
## LR(1) items:
constructor -> qualified(Constructor) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor -> qualified(Constructor)

State 78:
## Known stack suffix:
## node_name
## LR(1) items:
_exp -> node_name . LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## node_name LPAREN
## LR(1) items:
_exp -> node_name LPAREN . exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 80
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exps shift to state 190
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN
--   reduce production exps ->

State 80:
## Known stack suffix:
## nonmtexps
## LR(1) items:
exps -> nonmtexps . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exps -> nonmtexps

State 81:
## Known stack suffix:
## modul
## LR(1) items:
modul -> modul . DOT Constructor [ DOT ]
qualified(Constructor) -> modul . DOT Constructor [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
qualified(ident) -> modul . DOT ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On DOT shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## modul DOT
## LR(1) items:
modul -> modul DOT . Constructor [ DOT ]
qualified(Constructor) -> modul DOT . Constructor [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
qualified(ident) -> modul DOT . ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 83
-- On ident shift to state 84
## Reductions:

State 83:
## Known stack suffix:
## modul DOT Constructor
## LR(1) items:
modul -> modul DOT Constructor . [ DOT ]
qualified(Constructor) -> modul DOT Constructor . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified(Constructor) -> modul DOT Constructor

State 84:
## Known stack suffix:
## modul DOT ident
## LR(1) items:
qualified(ident) -> modul DOT ident . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualified(ident) -> modul DOT ident

State 85:
## Known stack suffix:
## iterator
## LR(1) items:
_exp -> iterator . DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator . DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On DOUBLE_LESS shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## iterator DOUBLE_LESS
## LR(1) items:
_exp -> iterator DOUBLE_LESS . separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator DOUBLE_LESS . separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 160
-- On separated_nonempty_list(COMMA,simple_exp) shift to state 163
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 87:
## Known stack suffix:
## LBRACKET
## LR(1) items:
_simple_exp -> LBRACKET . array_exp_list RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 158
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 88:
## Known stack suffix:
## ident
## LR(1) items:
qualname -> ident . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualname -> ident

State 89:
## Known stack suffix:
## exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER COMMA AROBASE AND AMPERSAND ]
array_exp_list -> exp . [ RBRACKET DOUBLE_GREATER ]
array_exp_list -> exp . COMMA array_exp_list [ RBRACKET DOUBLE_GREATER ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 156
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On RBRACKET DOUBLE_GREATER
--   reduce production array_exp_list -> exp

State 90:
## Known stack suffix:
## exp WHENOT
## LR(1) items:
_exp -> exp WHENOT . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On IDENT shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## exp WHENOT IDENT
## LR(1) items:
_exp -> exp WHENOT IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> exp WHENOT IDENT

State 92:
## Known stack suffix:
## exp WHEN
## LR(1) items:
_exp -> exp WHEN . constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp WHEN . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp WHEN . NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On NOT shift to state 93
-- On IDENT shift to state 95
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 99
-- On constructor shift to state 103
## Reductions:

State 93:
## Known stack suffix:
## exp WHEN NOT
## LR(1) items:
_exp -> exp WHEN NOT . IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On IDENT shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## exp WHEN NOT IDENT
## LR(1) items:
_exp -> exp WHEN NOT IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> exp WHEN NOT IDENT

State 95:
## Known stack suffix:
## exp WHEN IDENT
## LR(1) items:
_exp -> exp WHEN IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> exp WHEN IDENT

State 96:
## Known stack suffix:
## BOOL
## LR(1) items:
constructor_or_bool -> BOOL . [ VAR LPAREN DO ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_or_bool -> BOOL

State 97:
## Known stack suffix:
## modul
## LR(1) items:
modul -> modul . DOT Constructor [ DOT ]
qualified(Constructor) -> modul . DOT Constructor [ VAR LPAREN DO ARROW ]
## Transitions:
-- On DOT shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## modul DOT
## LR(1) items:
modul -> modul DOT . Constructor [ DOT ]
qualified(Constructor) -> modul DOT . Constructor [ VAR LPAREN DO ARROW ]
## Transitions:
-- On Constructor shift to state 83
## Reductions:

State 99:
## Known stack suffix:
## exp WHEN constructor_or_bool
## LR(1) items:
_exp -> exp WHEN constructor_or_bool . LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## exp WHEN constructor_or_bool LPAREN
## LR(1) items:
_exp -> exp WHEN constructor_or_bool LPAREN . IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On IDENT shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## exp WHEN constructor_or_bool LPAREN IDENT
## LR(1) items:
_exp -> exp WHEN constructor_or_bool LPAREN IDENT . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## exp WHEN constructor_or_bool LPAREN IDENT RPAREN
## LR(1) items:
_exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> exp WHEN constructor_or_bool LPAREN IDENT RPAREN

State 103:
## Known stack suffix:
## constructor
## LR(1) items:
constructor_or_bool -> constructor . [ VAR LPAREN DO ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_or_bool -> constructor

State 104:
## Known stack suffix:
## exp SUBTRACTIVE
## LR(1) items:
_exp -> exp SUBTRACTIVE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 105
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 105:
## Known stack suffix:
## exp SUBTRACTIVE exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp SUBTRACTIVE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp SUBTRACTIVE exp

State 106:
## Known stack suffix:
## exp STAR
## LR(1) items:
_exp -> exp STAR . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 107
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 107:
## Known stack suffix:
## exp STAR exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp STAR exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp STAR exp

State 108:
## Known stack suffix:
## exp POWER
## LR(1) items:
_exp -> exp POWER . separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 149
-- On separated_nonempty_list(POWER,simple_exp) shift to state 155
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 109:
## Known stack suffix:
## LBRACE
## LR(1) items:
_simple_exp -> LBRACE . field_exp_list RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 110
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
-- On field_exp_list shift to state 143
-- On field_exp shift to state 145
## Reductions:

State 110:
## Known stack suffix:
## qualname
## LR(1) items:
field_exp -> qualname . EQUAL exp [ SEMICOL RBRACE ]
## Transitions:
-- On EQUAL shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## qualname EQUAL
## LR(1) items:
field_exp -> qualname EQUAL . exp [ SEMICOL RBRACE ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 112
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 112:
## Known stack suffix:
## qualname EQUAL exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
field_exp -> qualname EQUAL exp . [ SEMICOL RBRACE ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On SEMICOL RBRACE
--   reduce production field_exp -> qualname EQUAL exp

State 113:
## Known stack suffix:
## exp OR
## LR(1) items:
_exp -> exp OR . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 114
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 114:
## Known stack suffix:
## exp OR exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp OR exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESSRBRACKET FUN EXTERNAL EVERY EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE
--   reduce production _exp -> exp OR exp

State 115:
## Known stack suffix:
## exp LESS_GREATER
## LR(1) items:
_exp -> exp LESS_GREATER . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 116
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 116:
## Known stack suffix:
## exp LESS_GREATER exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp LESS_GREATER exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp LESS_GREATER exp

State 117:
## Known stack suffix:
## exp INFIX4
## LR(1) items:
_exp -> exp INFIX4 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 118
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 118:
## Known stack suffix:
## exp INFIX4 exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX4 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On POWER shift to state 108
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp INFIX4 exp

State 119:
## Known stack suffix:
## constructor
## LR(1) items:
_const -> constructor . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _const -> constructor

State 120:
## Known stack suffix:
## const
## LR(1) items:
_simple_exp -> const . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _simple_exp -> const

State 121:
## Known stack suffix:
## _simple_exp
## LR(1) items:
simple_exp -> _simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_exp -> _simple_exp

State 122:
## Known stack suffix:
## _exp
## LR(1) items:
exp -> _exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp -> _exp

State 123:
## Known stack suffix:
## _const
## LR(1) items:
const -> _const . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const -> _const

State 124:
## Known stack suffix:
## exp INFIX3
## LR(1) items:
_exp -> exp INFIX3 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 125
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 125:
## Known stack suffix:
## exp INFIX3 exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX3 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp INFIX3 exp

State 126:
## Known stack suffix:
## exp INFIX2
## LR(1) items:
_exp -> exp INFIX2 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 127
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 127:
## Known stack suffix:
## exp INFIX2 exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX2 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp INFIX2 exp

State 128:
## Known stack suffix:
## exp INFIX1
## LR(1) items:
_exp -> exp INFIX1 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 129
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 129:
## Known stack suffix:
## exp INFIX1 exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX1 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp INFIX1 exp

State 130:
## Known stack suffix:
## exp INFIX0
## LR(1) items:
_exp -> exp INFIX0 . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 131
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 131:
## Known stack suffix:
## exp INFIX0 exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp INFIX0 exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp INFIX0 exp

State 132:
## Known stack suffix:
## exp EQUAL
## LR(1) items:
_exp -> exp EQUAL . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 133
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 133:
## Known stack suffix:
## exp EQUAL exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp EQUAL exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp EQUAL exp

State 134:
## Known stack suffix:
## exp AND
## LR(1) items:
_exp -> exp AND . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 135
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 135:
## Known stack suffix:
## exp AND exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp AND exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESSRBRACKET FUN EXTERNAL EVERY EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp AND exp

State 136:
## Known stack suffix:
## exp AMPERSAND
## LR(1) items:
_exp -> exp AMPERSAND . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 137
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 137:
## Known stack suffix:
## exp AMPERSAND exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp AMPERSAND exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESSRBRACKET FUN EXTERNAL EVERY EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> exp AMPERSAND exp

State 138:
## Known stack suffix:
## exp AROBASE
## LR(1) items:
_exp -> exp AROBASE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 139
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 139:
## Known stack suffix:
## exp AROBASE exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp AROBASE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA ON NODE LET LESSRBRACKET FUN EXTERNAL EVERY EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE
--   reduce production _exp -> exp AROBASE exp

State 140:
## Known stack suffix:
## qualified(ident)
## LR(1) items:
qualname -> qualified(ident) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qualname -> qualified(ident)

State 141:
## Known stack suffix:
## modul
## LR(1) items:
modul -> modul . DOT Constructor [ DOT ]
qualified(ident) -> modul . DOT ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On DOT shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## modul DOT
## LR(1) items:
modul -> modul DOT . Constructor [ DOT ]
qualified(ident) -> modul DOT . ident [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_LPAREN LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_LESS DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 5
-- On ident shift to state 84
## Reductions:

State 143:
## Known stack suffix:
## LBRACE field_exp_list
## LR(1) items:
_simple_exp -> LBRACE field_exp_list . RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On RBRACE shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## LBRACE field_exp_list RBRACE
## LR(1) items:
_simple_exp -> LBRACE field_exp_list RBRACE . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _simple_exp -> LBRACE field_exp_list RBRACE

State 145:
## Known stack suffix:
## field_exp
## LR(1) items:
field_exp_list -> field_exp . [ RBRACE ]
field_exp_list -> field_exp . SEMICOL field_exp_list [ RBRACE ]
## Transitions:
-- On SEMICOL shift to state 146
## Reductions:
-- On RBRACE
--   reduce production field_exp_list -> field_exp

State 146:
## Known stack suffix:
## field_exp SEMICOL
## LR(1) items:
field_exp_list -> field_exp SEMICOL . field_exp_list [ RBRACE ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 110
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
-- On field_exp_list shift to state 147
-- On field_exp shift to state 145
## Reductions:

State 147:
## Known stack suffix:
## field_exp SEMICOL field_exp_list
## LR(1) items:
field_exp_list -> field_exp SEMICOL field_exp_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_exp_list -> field_exp SEMICOL field_exp_list

State 148:
## Known stack suffix:
## IDENT
## LR(1) items:
_simple_exp -> IDENT . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _simple_exp -> IDENT

State 149:
## Known stack suffix:
## simple_exp
## LR(1) items:
_simple_exp -> simple_exp . DOT qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
separated_nonempty_list(POWER,simple_exp) -> simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
separated_nonempty_list(POWER,simple_exp) -> simple_exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On POWER shift to state 150
-- On DOT shift to state 153
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp

State 150:
## Known stack suffix:
## simple_exp POWER
## LR(1) items:
separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER . separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 149
-- On separated_nonempty_list(POWER,simple_exp) shift to state 151
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 151:
## Known stack suffix:
## simple_exp POWER separated_nonempty_list(POWER,simple_exp)
## LR(1) items:
separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(POWER,simple_exp) -> simple_exp POWER separated_nonempty_list(POWER,simple_exp)

State 152:
## Known stack suffix:
## qualified(ident)
## LR(1) items:
_const -> qualified(ident) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _const -> qualified(ident)

State 153:
## Known stack suffix:
## simple_exp DOT
## LR(1) items:
_simple_exp -> simple_exp DOT . qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 154
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
## Reductions:

State 154:
## Known stack suffix:
## simple_exp DOT qualname
## LR(1) items:
_simple_exp -> simple_exp DOT qualname . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _simple_exp -> simple_exp DOT qualname

State 155:
## Known stack suffix:
## exp POWER separated_nonempty_list(POWER,simple_exp)
## LR(1) items:
_exp -> exp POWER separated_nonempty_list(POWER,simple_exp) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> exp POWER separated_nonempty_list(POWER,simple_exp)

State 156:
## Known stack suffix:
## exp COMMA
## LR(1) items:
array_exp_list -> exp COMMA . array_exp_list [ RBRACKET DOUBLE_GREATER ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 157
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 157:
## Known stack suffix:
## exp COMMA array_exp_list
## LR(1) items:
array_exp_list -> exp COMMA array_exp_list . [ RBRACKET DOUBLE_GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_exp_list -> exp COMMA array_exp_list

State 158:
## Known stack suffix:
## LBRACKET array_exp_list
## LR(1) items:
_simple_exp -> LBRACKET array_exp_list . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On RBRACKET shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## LBRACKET array_exp_list RBRACKET
## LR(1) items:
_simple_exp -> LBRACKET array_exp_list RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _simple_exp -> LBRACKET array_exp_list RBRACKET

State 160:
## Known stack suffix:
## simple_exp
## LR(1) items:
_simple_exp -> simple_exp . DOT qualname [ DOUBLE_GREATER DOT COMMA ]
separated_nonempty_list(COMMA,simple_exp) -> simple_exp . [ DOUBLE_GREATER ]
separated_nonempty_list(COMMA,simple_exp) -> simple_exp . COMMA separated_nonempty_list(COMMA,simple_exp) [ DOUBLE_GREATER ]
## Transitions:
-- On DOT shift to state 153
-- On COMMA shift to state 161
## Reductions:
-- On DOUBLE_GREATER
--   reduce production separated_nonempty_list(COMMA,simple_exp) -> simple_exp

State 161:
## Known stack suffix:
## simple_exp COMMA
## LR(1) items:
separated_nonempty_list(COMMA,simple_exp) -> simple_exp COMMA . separated_nonempty_list(COMMA,simple_exp) [ DOUBLE_GREATER ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 160
-- On separated_nonempty_list(COMMA,simple_exp) shift to state 162
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 162:
## Known stack suffix:
## simple_exp COMMA separated_nonempty_list(COMMA,simple_exp)
## LR(1) items:
separated_nonempty_list(COMMA,simple_exp) -> simple_exp COMMA separated_nonempty_list(COMMA,simple_exp) . [ DOUBLE_GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production separated_nonempty_list(COMMA,simple_exp) -> simple_exp COMMA separated_nonempty_list(COMMA,simple_exp)

State 163:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp)
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) . DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) . DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On DOUBLE_GREATER shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER . qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER . LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 165
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 185
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
## Reductions:

State 165:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN . qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
ident -> LPAREN . infx RPAREN [ LPAREN LESS_LPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 13
-- On STAR shift to state 14
-- On PREFIX shift to state 15
-- On OR shift to state 16
-- On NOT shift to state 17
-- On LPAREN shift to state 12
-- On INFIX4 shift to state 18
-- On INFIX3 shift to state 19
-- On INFIX2 shift to state 20
-- On INFIX1 shift to state 21
-- On INFIX0 shift to state 22
-- On IDENT shift to state 33
-- On EQUALEQUAL shift to state 23
-- On EQUAL shift to state 24
-- On Constructor shift to state 2
-- On BARBAR shift to state 25
-- On AMPERSAND shift to state 26
-- On AMPERAMPER shift to state 27
-- On qualname shift to state 166
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On infx shift to state 28
-- On ident shift to state 88
## Reductions:

State 166:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname . DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On DOUBLE_LESS shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS . array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 89
-- On constructor shift to state 119
-- On const shift to state 120
-- On array_exp_list shift to state 168
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 168:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list . DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On DOUBLE_GREATER shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER . RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN . delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LESS_LPAREN shift to state 171
-- On delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) shift to state 177
## Reductions:
-- On LPAREN
--   reduce production delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) ->

State 171:
## Known stack suffix:
## LESS_LPAREN
## LR(1) items:
delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN . slist(COMMA,exp) RPAREN_GREATER [ LPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(COMMA,exp) shift to state 172
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 174
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN_GREATER
--   reduce production slist(COMMA,exp) ->

State 172:
## Known stack suffix:
## LESS_LPAREN slist(COMMA,exp)
## LR(1) items:
delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN slist(COMMA,exp) . RPAREN_GREATER [ LPAREN ]
## Transitions:
-- On RPAREN_GREATER shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## LESS_LPAREN slist(COMMA,exp) RPAREN_GREATER
## LR(1) items:
delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN slist(COMMA,exp) RPAREN_GREATER . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) -> LESS_LPAREN slist(COMMA,exp) RPAREN_GREATER

State 174:
## Known stack suffix:
## exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN_GREATER POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
slist(COMMA,exp) -> exp . [ RPAREN_GREATER ]
slist(COMMA,exp) -> exp . COMMA slist(COMMA,exp) [ RPAREN_GREATER ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 175
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On RPAREN_GREATER
--   reduce production slist(COMMA,exp) -> exp

State 175:
## Known stack suffix:
## exp COMMA
## LR(1) items:
slist(COMMA,exp) -> exp COMMA . slist(COMMA,exp) [ RPAREN_GREATER ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(COMMA,exp) shift to state 176
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 174
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN_GREATER
--   reduce production slist(COMMA,exp) ->

State 176:
## Known stack suffix:
## exp COMMA slist(COMMA,exp)
## LR(1) items:
slist(COMMA,exp) -> exp COMMA slist(COMMA,exp) . [ RPAREN_GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production slist(COMMA,exp) -> exp COMMA slist(COMMA,exp)

State 177:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp)
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) . LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN . exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 80
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exps shift to state 179
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN
--   reduce production exps ->

State 179:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER LPAREN qualname DOUBLE_LESS array_exp_list DOUBLE_GREATER RPAREN delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN

State 181:
## Known stack suffix:
## exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
nonmtexps -> exp . opt_comma [ RPAREN ]
nonmtexps -> exp . COMMA nonmtexps [ RPAREN ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 182
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On opt_comma shift to state 184
## Reductions:
-- On RPAREN
--   reduce production opt_comma ->

State 182:
## Known stack suffix:
## exp COMMA
## LR(1) items:
nonmtexps -> exp COMMA . nonmtexps [ RPAREN ]
opt_comma -> COMMA . [ RPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 183
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN
--   reduce production opt_comma -> COMMA

State 183:
## Known stack suffix:
## exp COMMA nonmtexps
## LR(1) items:
nonmtexps -> exp COMMA nonmtexps . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonmtexps -> exp COMMA nonmtexps

State 184:
## Known stack suffix:
## exp opt_comma
## LR(1) items:
nonmtexps -> exp opt_comma . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonmtexps -> exp opt_comma

State 185:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname . delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LESS_LPAREN shift to state 171
-- On delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) shift to state 186
## Reductions:
-- On LPAREN
--   reduce production delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) ->

State 186:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp)
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) . LPAREN exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN . exps RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On nonmtexps shift to state 80
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exps shift to state 188
-- On exp shift to state 181
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN
--   reduce production exps ->

State 188:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN
## LR(1) items:
_exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> iterator DOUBLE_LESS separated_nonempty_list(COMMA,simple_exp) DOUBLE_GREATER qualname delim_slist(COMMA,LESS_LPAREN,RPAREN_GREATER,exp) LPAREN exps RPAREN

State 190:
## Known stack suffix:
## node_name LPAREN exps
## LR(1) items:
_exp -> node_name LPAREN exps . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## node_name LPAREN exps RPAREN
## LR(1) items:
_exp -> node_name LPAREN exps RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> node_name LPAREN exps RPAREN

State 192:
## Known stack suffix:
## LBRACKETGREATER exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER exp . LESSRBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER exp . LESSRBRACKET trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On LESSRBRACKET shift to state 193
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 193:
## Known stack suffix:
## LBRACKETGREATER exp LESSRBRACKET
## LR(1) items:
trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET . trunc_indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LBRACKETGREATER shift to state 73
-- On trunc_indexes shift to state 194
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET

State 194:
## Known stack suffix:
## LBRACKETGREATER exp LESSRBRACKET trunc_indexes
## LR(1) items:
trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production trunc_indexes -> LBRACKETGREATER exp LESSRBRACKET trunc_indexes

State 195:
## Known stack suffix:
## simple_exp LBRACKET
## LR(1) items:
_exp -> simple_exp LBRACKET . exp DOUBLE_DOT exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET . exp RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 196
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 196:
## Known stack suffix:
## simple_exp LBRACKET exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
_exp -> simple_exp LBRACKET exp . DOUBLE_DOT exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_DOT AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 197
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On DOUBLE_DOT shift to state 201
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 197:
## Known stack suffix:
## LBRACKET exp RBRACKET
## LR(1) items:
indexes -> LBRACKET exp RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp RBRACKET . indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LBRACKET shift to state 198
-- On indexes shift to state 200
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production indexes -> LBRACKET exp RBRACKET

State 198:
## Known stack suffix:
## LBRACKET
## LR(1) items:
indexes -> LBRACKET . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET . exp RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 199
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 199:
## Known stack suffix:
## LBRACKET exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
indexes -> LBRACKET exp . RBRACKET indexes [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 197
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 200:
## Known stack suffix:
## LBRACKET exp RBRACKET indexes
## LR(1) items:
indexes -> LBRACKET exp RBRACKET indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production indexes -> LBRACKET exp RBRACKET indexes

State 201:
## Known stack suffix:
## simple_exp LBRACKET exp DOUBLE_DOT
## LR(1) items:
_exp -> simple_exp LBRACKET exp DOUBLE_DOT . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 202
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 202:
## Known stack suffix:
## simple_exp LBRACKET exp DOUBLE_DOT exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> simple_exp LBRACKET exp DOUBLE_DOT exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 203
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 203:
## Known stack suffix:
## simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET
## LR(1) items:
_exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> simple_exp LBRACKET exp DOUBLE_DOT exp RBRACKET

State 204:
## Known stack suffix:
## simple_exp FBY
## LR(1) items:
_exp -> simple_exp FBY . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 205
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 205:
## Known stack suffix:
## simple_exp FBY exp
## LR(1) items:
_exp -> simple_exp FBY exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On POWER shift to state 108
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> simple_exp FBY exp

State 206:
## Known stack suffix:
## simple_exp DOT
## LR(1) items:
_exp -> simple_exp DOT . indexes DEFAULT exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> simple_exp DOT . qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 12
-- On LBRACKET shift to state 198
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 154
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On indexes shift to state 207
-- On ident shift to state 88
## Reductions:

State 207:
## Known stack suffix:
## simple_exp DOT indexes
## LR(1) items:
_exp -> simple_exp DOT indexes . DEFAULT exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On DEFAULT shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## simple_exp DOT indexes DEFAULT
## LR(1) items:
_exp -> simple_exp DOT indexes DEFAULT . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 209
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 209:
## Known stack suffix:
## simple_exp DOT indexes DEFAULT exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp DOT indexes DEFAULT exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA ON NODE LET LESSRBRACKET FUN EXTERNAL EVERY EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE
--   reduce production _exp -> simple_exp DOT indexes DEFAULT exp

State 210:
## Known stack suffix:
## simple_exp ARROW
## LR(1) items:
_exp -> simple_exp ARROW . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 211
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 211:
## Known stack suffix:
## simple_exp ARROW exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> simple_exp ARROW exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA ON NODE LET LESSRBRACKET FUN EXTERNAL EVERY EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE
--   reduce production _exp -> simple_exp ARROW exp

State 212:
## Known stack suffix:
## simple_exp trunc_indexes
## LR(1) items:
_exp -> simple_exp trunc_indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> simple_exp trunc_indexes

State 213:
## Known stack suffix:
## simple_exp indexes
## LR(1) items:
_exp -> simple_exp indexes . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> simple_exp indexes

State 214:
## Known stack suffix:
## IF exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> IF exp . THEN exp ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On THEN shift to state 215
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 215:
## Known stack suffix:
## IF exp THEN
## LR(1) items:
_exp -> IF exp THEN . exp ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 216
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 216:
## Known stack suffix:
## IF exp THEN exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> IF exp THEN exp . ELSE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ELSE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On ELSE shift to state 217
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 217:
## Known stack suffix:
## IF exp THEN exp ELSE
## LR(1) items:
_exp -> IF exp THEN exp ELSE . exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 218
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 218:
## Known stack suffix:
## IF exp THEN exp ELSE exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> IF exp THEN exp ELSE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On WITH VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL STATE SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA ON NODE LET LESSRBRACKET FUN EXTERNAL EVERY EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE
--   reduce production _exp -> IF exp THEN exp ELSE exp

State 219:
## Known stack suffix:
## DOUBLE_LESS array_exp_list
## LR(1) items:
call_params -> DOUBLE_LESS array_exp_list . DOUBLE_GREATER [ LPAREN ]
## Transitions:
-- On DOUBLE_GREATER shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## DOUBLE_LESS array_exp_list DOUBLE_GREATER
## LR(1) items:
call_params -> DOUBLE_LESS array_exp_list DOUBLE_GREATER . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production call_params -> DOUBLE_LESS array_exp_list DOUBLE_GREATER

State 221:
## Known stack suffix:
## INLINED qualname call_params
## LR(1) items:
node_name -> INLINED qualname call_params . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_name -> INLINED qualname call_params

State 222:
## Known stack suffix:
## PREFIX exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> PREFIX exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> PREFIX exp

State 223:
## Known stack suffix:
## NOT
## LR(1) items:
_exp -> NOT . exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
infx -> NOT . [ RPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 224
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On RPAREN
--   reduce production infx -> NOT

State 224:
## Known stack suffix:
## NOT exp
## LR(1) items:
_exp -> NOT exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On POWER shift to state 108
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> NOT exp

State 225:
## Known stack suffix:
## LPAREN tuple_exp
## LR(1) items:
_simple_exp -> LPAREN tuple_exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LPAREN tuple_exp RPAREN
## LR(1) items:
_simple_exp -> LPAREN tuple_exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _simple_exp -> LPAREN tuple_exp RPAREN

State 227:
## Known stack suffix:
## LPAREN exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA COLONCOLON AROBASE AND AMPERSAND ]
simple_exp -> LPAREN exp . ct_annot RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
tuple_exp -> exp . COMMA exp [ RPAREN ]
tuple_exp -> exp . COMMA tuple_exp [ RPAREN ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On ON shift to state 228
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 245
-- On COLONCOLON shift to state 248
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On ct_annot shift to state 251
## Reductions:
-- On RPAREN
--   reduce production ct_annot ->

State 228:
## Known stack suffix:
## ON
## LR(1) items:
ct_annot -> ON . on_ck [ RPAREN ]
## Transitions:
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 231
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 236
## Reductions:

State 229:
## Known stack suffix:
## IDENT
## LR(1) items:
on_ck -> IDENT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production on_ck -> IDENT

State 230:
## Known stack suffix:
## DOT
## LR(1) items:
ck -> DOT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ck -> DOT

State 231:
## Known stack suffix:
## ON on_ck
## LR(1) items:
ck -> on_ck . [ ONOT ON ]
ct_annot -> ON on_ck . [ RPAREN ]
## Transitions:
## Reductions:
-- On ONOT ON
--   reduce production ck -> on_ck
-- On RPAREN
--   reduce production ct_annot -> ON on_ck

State 232:
## Known stack suffix:
## constructor_or_bool
## LR(1) items:
on_ck -> constructor_or_bool . LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On LPAREN shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## constructor_or_bool LPAREN
## LR(1) items:
on_ck -> constructor_or_bool LPAREN . IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## constructor_or_bool LPAREN IDENT
## LR(1) items:
on_ck -> constructor_or_bool LPAREN IDENT . RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On RPAREN shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## constructor_or_bool LPAREN IDENT RPAREN
## LR(1) items:
on_ck -> constructor_or_bool LPAREN IDENT RPAREN . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production on_ck -> constructor_or_bool LPAREN IDENT RPAREN

State 236:
## Known stack suffix:
## ck
## LR(1) items:
on_ck -> ck . ON IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ONOT IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On ONOT shift to state 237
-- On ON shift to state 239
## Reductions:

State 237:
## Known stack suffix:
## ck ONOT
## LR(1) items:
on_ck -> ck ONOT . IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## ck ONOT IDENT
## LR(1) items:
on_ck -> ck ONOT IDENT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production on_ck -> ck ONOT IDENT

State 239:
## Known stack suffix:
## ck ON
## LR(1) items:
on_ck -> ck ON . IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck ON . constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 240
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 241
-- On constructor shift to state 103
## Reductions:

State 240:
## Known stack suffix:
## ck ON IDENT
## LR(1) items:
on_ck -> ck ON IDENT . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production on_ck -> ck ON IDENT

State 241:
## Known stack suffix:
## ck ON constructor_or_bool
## LR(1) items:
on_ck -> ck ON constructor_or_bool . LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On LPAREN shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## ck ON constructor_or_bool LPAREN
## LR(1) items:
on_ck -> ck ON constructor_or_bool LPAREN . IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## ck ON constructor_or_bool LPAREN IDENT
## LR(1) items:
on_ck -> ck ON constructor_or_bool LPAREN IDENT . RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On RPAREN shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## ck ON constructor_or_bool LPAREN IDENT RPAREN
## LR(1) items:
on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production on_ck -> ck ON constructor_or_bool LPAREN IDENT RPAREN

State 245:
## Known stack suffix:
## exp COMMA
## LR(1) items:
tuple_exp -> exp COMMA . exp [ RPAREN ]
tuple_exp -> exp COMMA . tuple_exp [ RPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On tuple_exp shift to state 246
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 247
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 246:
## Known stack suffix:
## exp COMMA tuple_exp
## LR(1) items:
tuple_exp -> exp COMMA tuple_exp . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tuple_exp -> exp COMMA tuple_exp

State 247:
## Known stack suffix:
## exp COMMA exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
tuple_exp -> exp . COMMA exp [ RPAREN ]
tuple_exp -> exp COMMA exp . [ RPAREN ]
tuple_exp -> exp . COMMA tuple_exp [ RPAREN ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 245
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On RPAREN
--   reduce production tuple_exp -> exp COMMA exp

State 248:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
ct_annot -> COLONCOLON . ck [ RPAREN ]
## Transitions:
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 249
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 250
## Reductions:

State 249:
## Known stack suffix:
## on_ck
## LR(1) items:
ck -> on_ck . [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ck -> on_ck

State 250:
## Known stack suffix:
## COLONCOLON ck
## LR(1) items:
ct_annot -> COLONCOLON ck . [ RPAREN ]
on_ck -> ck . ON IDENT [ RPAREN ONOT ON ]
on_ck -> ck . ONOT IDENT [ RPAREN ONOT ON ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ RPAREN ONOT ON ]
## Transitions:
-- On ONOT shift to state 237
-- On ON shift to state 239
## Reductions:
-- On RPAREN
--   reduce production ct_annot -> COLONCOLON ck

State 251:
## Known stack suffix:
## LPAREN exp ct_annot
## LR(1) items:
simple_exp -> LPAREN exp ct_annot . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## LPAREN exp ct_annot RPAREN
## LR(1) items:
simple_exp -> LPAREN exp ct_annot RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STRING STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET LBRACKETGREATER LBRACKET LBRACE INT INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 IDENT FUN FLOAT FBY EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AT ARROW AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_exp -> LPAREN exp ct_annot RPAREN

State 253:
## Known stack suffix:
## IDENT
## LR(1) items:
_simple_exp -> IDENT . [ WITH DOT ]
ident -> IDENT . [ EQUAL ]
## Transitions:
## Reductions:
-- On WITH DOT
--   reduce production _simple_exp -> IDENT
-- On EQUAL
--   reduce production ident -> IDENT

State 254:
## Known stack suffix:
## LBRACE simple_exp
## LR(1) items:
_exp -> LBRACE simple_exp . WITH DOT qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_simple_exp -> simple_exp . DOT qualname [ WITH DOT ]
## Transitions:
-- On WITH shift to state 255
-- On DOT shift to state 153
## Reductions:

State 255:
## Known stack suffix:
## LBRACE simple_exp WITH
## LR(1) items:
_exp -> LBRACE simple_exp WITH . DOT qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On DOT shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## LBRACE simple_exp WITH DOT
## LR(1) items:
_exp -> LBRACE simple_exp WITH DOT . qualname EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On qualname shift to state 257
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
## Reductions:

State 257:
## Known stack suffix:
## LBRACE simple_exp WITH DOT qualname
## LR(1) items:
_exp -> LBRACE simple_exp WITH DOT qualname . EQUAL exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On EQUAL shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## LBRACE simple_exp WITH DOT qualname EQUAL
## LR(1) items:
_exp -> LBRACE simple_exp WITH DOT qualname EQUAL . exp RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 259
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 259:
## Known stack suffix:
## LBRACE simple_exp WITH DOT qualname EQUAL exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp . RBRACE [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACE shift to state 260
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 260:
## Known stack suffix:
## LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE
## LR(1) items:
_exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> LBRACE simple_exp WITH DOT qualname EQUAL exp RBRACE

State 261:
## Known stack suffix:
## qualified(ident)
## LR(1) items:
_const -> qualified(ident) . [ WITH DOT ]
qualname -> qualified(ident) . [ EQUAL ]
## Transitions:
## Reductions:
-- On WITH DOT
--   reduce production _const -> qualified(ident)
-- On EQUAL
--   reduce production qualname -> qualified(ident)

State 262:
## Known stack suffix:
## LBRACKET exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> LBRACKET exp . WITH indexes EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
array_exp_list -> exp . [ RBRACKET ]
array_exp_list -> exp . COMMA array_exp_list [ RBRACKET ]
## Transitions:
-- On WITH shift to state 263
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 156
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On RBRACKET
--   reduce production array_exp_list -> exp

State 263:
## Known stack suffix:
## LBRACKET exp WITH
## LR(1) items:
_exp -> LBRACKET exp WITH . indexes EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LBRACKET shift to state 198
-- On indexes shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## LBRACKET exp WITH indexes
## LR(1) items:
_exp -> LBRACKET exp WITH indexes . EQUAL exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On EQUAL shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## LBRACKET exp WITH indexes EQUAL
## LR(1) items:
_exp -> LBRACKET exp WITH indexes EQUAL . exp RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 266
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 266:
## Known stack suffix:
## LBRACKET exp WITH indexes EQUAL exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> LBRACKET exp WITH indexes EQUAL exp . RBRACKET [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RBRACKET POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RBRACKET shift to state 267
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 267:
## Known stack suffix:
## LBRACKET exp WITH indexes EQUAL exp RBRACKET
## LR(1) items:
_exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> LBRACKET exp WITH indexes EQUAL exp RBRACKET

State 268:
## Known stack suffix:
## SUBTRACTIVE exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> SUBTRACTIVE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> SUBTRACTIVE exp

State 269:
## Known stack suffix:
## BOOL
## LR(1) items:
_const -> BOOL . [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FBY EQUAL DOT COMMA COLONCOLON ARROW AROBASE AND AMPERSAND ]
constructor_or_bool -> BOOL . [ ARROW ]
## Transitions:
## Reductions:
-- On WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FBY EQUAL DOT COMMA COLONCOLON AROBASE AND AMPERSAND
--   reduce production _const -> BOOL
-- On ARROW
--   reduce production constructor_or_bool -> BOOL

State 270:
## Known stack suffix:
## LPAREN constructor_or_bool
## LR(1) items:
merge_handler -> LPAREN constructor_or_bool . ARROW exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On ARROW shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## LPAREN constructor_or_bool ARROW
## LR(1) items:
merge_handler -> LPAREN constructor_or_bool ARROW . exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 272
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 272:
## Known stack suffix:
## LPAREN constructor_or_bool ARROW exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
merge_handler -> LPAREN constructor_or_bool ARROW exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RPAREN shift to state 273
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 273:
## Known stack suffix:
## LPAREN constructor_or_bool ARROW exp RPAREN
## LR(1) items:
merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production merge_handler -> LPAREN constructor_or_bool ARROW exp RPAREN

State 274:
## Known stack suffix:
## constructor
## LR(1) items:
_const -> constructor . [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FBY EQUAL DOT COMMA COLONCOLON ARROW AROBASE AND AMPERSAND ]
constructor_or_bool -> constructor . [ ARROW ]
## Transitions:
## Reductions:
-- On WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR ON LESS_GREATER LBRACKETGREATER LBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FBY EQUAL DOT COMMA COLONCOLON AROBASE AND AMPERSAND
--   reduce production _const -> constructor
-- On ARROW
--   reduce production constructor_or_bool -> constructor

State 275:
## Known stack suffix:
## simple_exp
## LR(1) items:
_simple_exp -> simple_exp . DOT qualname [ STRING LPAREN LBRACKET LBRACE INT IDENT FLOAT DOT Constructor BOOL ]
merge_handlers -> simple_exp . simple_exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On STRING shift to state 36
-- On LPAREN shift to state 37
-- On LBRACKET shift to state 87
-- On LBRACE shift to state 109
-- On INT shift to state 61
-- On IDENT shift to state 148
-- On FLOAT shift to state 69
-- On DOT shift to state 153
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 276
-- On qualified(ident) shift to state 152
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 81
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _const shift to state 123
## Reductions:

State 276:
## Known stack suffix:
## simple_exp simple_exp
## LR(1) items:
_simple_exp -> simple_exp . DOT qualname [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
merge_handlers -> simple_exp simple_exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On DOT shift to state 153
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production merge_handlers -> simple_exp simple_exp

State 277:
## Known stack suffix:
## nonempty_list(merge_handler)
## LR(1) items:
merge_handlers -> nonempty_list(merge_handler) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production merge_handlers -> nonempty_list(merge_handler)

State 278:
## Known stack suffix:
## MERGE IDENT merge_handlers
## LR(1) items:
_exp -> MERGE IDENT merge_handlers . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> MERGE IDENT merge_handlers

State 279:
## Known stack suffix:
## merge_handler
## LR(1) items:
nonempty_list(merge_handler) -> merge_handler . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
nonempty_list(merge_handler) -> merge_handler . nonempty_list(merge_handler) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 280
-- On nonempty_list(merge_handler) shift to state 281
-- On merge_handler shift to state 279
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production nonempty_list(merge_handler) -> merge_handler

State 280:
## Known stack suffix:
## LPAREN
## LR(1) items:
merge_handler -> LPAREN . constructor_or_bool ARROW exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LPAREN LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 270
-- On constructor shift to state 103
## Reductions:

State 281:
## Known stack suffix:
## merge_handler nonempty_list(merge_handler)
## LR(1) items:
nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler) . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(merge_handler) -> merge_handler nonempty_list(merge_handler)

State 282:
## Known stack suffix:
## PRE exp
## LR(1) items:
_exp -> PRE exp . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On POWER shift to state 108
## Reductions:
-- On WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND
--   reduce production _exp -> PRE exp

State 283:
## Known stack suffix:
## REINIT LPAREN exp
## LR(1) items:
_exp -> REINIT LPAREN exp . COMMA exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL COMMA AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On COMMA shift to state 284
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 284:
## Known stack suffix:
## REINIT LPAREN exp COMMA
## LR(1) items:
_exp -> REINIT LPAREN exp COMMA . exp RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 285
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 285:
## Known stack suffix:
## REINIT LPAREN exp COMMA exp
## LR(1) items:
_exp -> REINIT LPAREN exp COMMA exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RPAREN shift to state 286
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 286:
## Known stack suffix:
## REINIT LPAREN exp COMMA exp RPAREN
## LR(1) items:
_exp -> REINIT LPAREN exp COMMA exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> REINIT LPAREN exp COMMA exp RPAREN

State 287:
## Known stack suffix:
## SPLIT ident LPAREN exp
## LR(1) items:
_exp -> SPLIT ident LPAREN exp . RPAREN [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On RPAREN shift to state 288
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 288:
## Known stack suffix:
## SPLIT ident LPAREN exp RPAREN
## LR(1) items:
_exp -> SPLIT ident LPAREN exp RPAREN . [ WITH WHENOT WHEN VAR VAL UNTIL UNSAFE UNLESS TYPE THEN TEL SUBTRACTIVE STATE STAR SEMICOL RPAREN_GREATER RPAREN REACHABLE RBRACKET RBRACE PRAGMA POWER OR ON NODE LET LESS_GREATER LESSRBRACKET INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EVERY EQUAL EOF ENFORCE END ELSE DOUBLE_GREATER DOUBLE_DOT DONE DO DEFAULT Constructor CONTINUE CONST COMMA COLONCOLON BOOL BAR ATTRACTIVE AROBASE AND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _exp -> SPLIT ident LPAREN exp RPAREN

State 289:
## Known stack suffix:
## ty_ident POWER simple_exp
## LR(1) items:
_simple_exp -> simple_exp . DOT qualname [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER DOT CONST COLONCOLON BAR AT ]
ty_ident -> ty_ident POWER simple_exp . [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER CONST COLONCOLON BAR AT ]
## Transitions:
-- On DOT shift to state 153
## Reductions:
-- On WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER CONST COLONCOLON BAR AT
--   reduce production ty_ident -> ty_ident POWER simple_exp

State 290:
## Known stack suffix:
## qualname
## LR(1) items:
ty_ident -> qualname . [ WHEN VAL UNSAFE TYPE SEMICOL RPAREN RBRACE PRAGMA POWER ON NODE FUN EXTERNAL EQUAL EOF DOUBLE_GREATER CONST COLONCOLON BAR AT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ty_ident -> qualname

State 291:
## Known stack suffix:
## LBRACE label_ty_list
## LR(1) items:
struct_ty_desc -> LBRACE label_ty_list . RBRACE [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On RBRACE shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## LBRACE label_ty_list RBRACE
## LR(1) items:
struct_ty_desc -> LBRACE label_ty_list RBRACE . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_ty_desc -> LBRACE label_ty_list RBRACE

State 293:
## Known stack suffix:
## label_ty
## LR(1) items:
label_ty_list -> label_ty . [ RBRACE ]
label_ty_list -> label_ty . SEMICOL label_ty_list [ RBRACE ]
## Transitions:
-- On SEMICOL shift to state 294
## Reductions:
-- On RBRACE
--   reduce production label_ty_list -> label_ty

State 294:
## Known stack suffix:
## label_ty SEMICOL
## LR(1) items:
label_ty_list -> label_ty SEMICOL . label_ty_list [ RBRACE ]
## Transitions:
-- On IDENT shift to state 31
-- On label_ty_list shift to state 295
-- On label_ty shift to state 293
## Reductions:

State 295:
## Known stack suffix:
## label_ty SEMICOL label_ty_list
## LR(1) items:
label_ty_list -> label_ty SEMICOL label_ty_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_ty_list -> label_ty SEMICOL label_ty_list

State 296:
## Known stack suffix:
## Constructor
## LR(1) items:
enum_ty_desc -> Constructor . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
enum_ty_desc -> Constructor . BAR enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
modul -> Constructor . [ DOT ]
## Transitions:
-- On BAR shift to state 297
## Reductions:
-- On VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST
--   reduce production enum_ty_desc -> Constructor
-- On DOT
--   reduce production modul -> Constructor

State 297:
## Known stack suffix:
## Constructor BAR
## LR(1) items:
enum_ty_desc -> Constructor BAR . enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On Constructor shift to state 298
-- On BOOL shift to state 299
-- On enum_ty_desc shift to state 302
## Reductions:

State 298:
## Known stack suffix:
## Constructor
## LR(1) items:
enum_ty_desc -> Constructor . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
enum_ty_desc -> Constructor . BAR enum_ty_desc [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On BAR shift to state 297
## Reductions:
-- On VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST
--   reduce production enum_ty_desc -> Constructor

State 299:
## Known stack suffix:
## BOOL
## LR(1) items:
enum_ty_desc -> BOOL . BAR BOOL [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On BAR shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## BOOL BAR
## LR(1) items:
enum_ty_desc -> BOOL BAR . BOOL [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On BOOL shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## BOOL BAR BOOL
## LR(1) items:
enum_ty_desc -> BOOL BAR BOOL . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_ty_desc -> BOOL BAR BOOL

State 302:
## Known stack suffix:
## Constructor BAR enum_ty_desc
## LR(1) items:
enum_ty_desc -> Constructor BAR enum_ty_desc . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_ty_desc -> Constructor BAR enum_ty_desc

State 303:
## Known stack suffix:
## TYPE IDENT EQUAL ty_ident
## LR(1) items:
ty_ident -> ty_ident . POWER simple_exp [ VAL UNSAFE TYPE PRAGMA POWER NODE FUN EXTERNAL EOF CONST ]
type_dec -> TYPE IDENT EQUAL ty_ident . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On POWER shift to state 35
## Reductions:
-- On VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST
--   reduce production type_dec -> TYPE IDENT EQUAL ty_ident

State 304:
## Known stack suffix:
## TYPE IDENT EQUAL struct_ty_desc
## LR(1) items:
type_dec -> TYPE IDENT EQUAL struct_ty_desc . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_dec -> TYPE IDENT EQUAL struct_ty_desc

State 305:
## Known stack suffix:
## TYPE IDENT EQUAL enum_ty_desc
## LR(1) items:
type_dec -> TYPE IDENT EQUAL enum_ty_desc . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_dec -> TYPE IDENT EQUAL enum_ty_desc

State 306:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
extern -> EXTERNAL . [ VAL UNSAFE NODE FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production extern -> EXTERNAL

State 307:
## Known stack suffix:
## CONST
## LR(1) items:
const_dec -> CONST . IDENT COLON ty_ident EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On IDENT shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## CONST IDENT
## LR(1) items:
const_dec -> CONST IDENT . COLON ty_ident EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On COLON shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## CONST IDENT COLON
## LR(1) items:
const_dec -> CONST IDENT COLON . ty_ident EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 310
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On ident shift to state 88
## Reductions:

State 310:
## Known stack suffix:
## CONST IDENT COLON ty_ident
## LR(1) items:
const_dec -> CONST IDENT COLON ty_ident . EQUAL exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
ty_ident -> ty_ident . POWER simple_exp [ POWER EQUAL ]
## Transitions:
-- On POWER shift to state 35
-- On EQUAL shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## CONST IDENT COLON ty_ident EQUAL
## LR(1) items:
const_dec -> CONST IDENT COLON ty_ident EQUAL . exp [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 312
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 312:
## Known stack suffix:
## CONST IDENT COLON ty_ident EQUAL exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN VAL UNSAFE TYPE SUBTRACTIVE STAR PRAGMA POWER OR NODE LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 FUN EXTERNAL EQUAL EOF CONST AROBASE AND AMPERSAND ]
const_dec -> CONST IDENT COLON ty_ident EQUAL exp . [ VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On VAL UNSAFE TYPE PRAGMA NODE FUN EXTERNAL EOF CONST
--   reduce production const_dec -> CONST IDENT COLON ty_ident EQUAL exp

State 313:
## Known stack suffix:
## type_dec
## LR(1) items:
interface_desc -> type_dec . [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_desc -> type_dec

State 314:
## Known stack suffix:
## list(opens) list(interface_desc)
## LR(1) items:
interface -> list(opens) list(interface_desc) . EOF [ # ]
## Transitions:
-- On EOF shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## list(opens) list(interface_desc) EOF
## LR(1) items:
interface -> list(opens) list(interface_desc) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interface -> list(opens) list(interface_desc) EOF

State 316:
## Known stack suffix:
## interface_desc
## LR(1) items:
list(interface_desc) -> interface_desc . list(interface_desc) [ EOF ]
## Transitions:
-- On TYPE shift to state 9
-- On EXTERNAL shift to state 306
-- On CONST shift to state 307
-- On type_dec shift to state 313
-- On list(interface_desc) shift to state 317
-- On interface_desc shift to state 316
-- On extern shift to state 318
-- On const_dec shift to state 388
## Reductions:
-- On VAL UNSAFE NODE FUN
--   reduce production extern ->
-- On EOF
--   reduce production list(interface_desc) ->

State 317:
## Known stack suffix:
## interface_desc list(interface_desc)
## LR(1) items:
list(interface_desc) -> interface_desc list(interface_desc) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(interface_desc) -> interface_desc list(interface_desc)

State 318:
## Known stack suffix:
## extern
## LR(1) items:
interface_desc -> extern . unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On UNSAFE shift to state 319
-- On unsafe shift to state 320
## Reductions:
-- On VAL NODE FUN
--   reduce production unsafe ->

State 319:
## Known stack suffix:
## UNSAFE
## LR(1) items:
unsafe -> UNSAFE . [ VAL NODE FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unsafe -> UNSAFE

State 320:
## Known stack suffix:
## extern unsafe
## LR(1) items:
interface_desc -> extern unsafe . val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On VAL shift to state 321
-- On val_or_empty shift to state 322
## Reductions:
-- On NODE FUN
--   reduce production val_or_empty ->

State 321:
## Known stack suffix:
## VAL
## LR(1) items:
val_or_empty -> VAL . [ NODE FUN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_or_empty -> VAL

State 322:
## Known stack suffix:
## extern unsafe val_or_empty
## LR(1) items:
interface_desc -> extern unsafe val_or_empty . node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On NODE shift to state 323
-- On FUN shift to state 324
-- On node_or_fun shift to state 325
## Reductions:

State 323:
## Known stack suffix:
## NODE
## LR(1) items:
node_or_fun -> NODE . [ LPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_or_fun -> NODE

State 324:
## Known stack suffix:
## FUN
## LR(1) items:
node_or_fun -> FUN . [ LPAREN IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_or_fun -> FUN

State 325:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun . ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On ident shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident . node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On DOUBLE_LESS shift to state 327
-- On node_params shift to state 362
## Reductions:
-- On LPAREN
--   reduce production node_params ->

State 327:
## Known stack suffix:
## DOUBLE_LESS
## LR(1) items:
node_params -> DOUBLE_LESS . nonmt_params constraints DOUBLE_GREATER [ LPAREN ]
## Transitions:
-- On IDENT shift to state 328
-- On param shift to state 331
-- On nonmt_params shift to state 354
-- On ident_list shift to state 334
## Reductions:

State 328:
## Known stack suffix:
## IDENT
## LR(1) items:
ident_list -> IDENT . [ COLON ]
ident_list -> IDENT . COMMA ident_list [ COLON ]
## Transitions:
-- On COMMA shift to state 329
## Reductions:
-- On COLON
--   reduce production ident_list -> IDENT

State 329:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
ident_list -> IDENT COMMA . ident_list [ COLON ]
## Transitions:
-- On IDENT shift to state 328
-- On ident_list shift to state 330
## Reductions:

State 330:
## Known stack suffix:
## IDENT COMMA ident_list
## LR(1) items:
ident_list -> IDENT COMMA ident_list . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_list -> IDENT COMMA ident_list

State 331:
## Known stack suffix:
## param
## LR(1) items:
nonmt_params -> param . [ RPAREN DOUBLE_GREATER BAR ]
nonmt_params -> param . SEMICOL [ RPAREN DOUBLE_GREATER BAR ]
nonmt_params -> param . SEMICOL nonmt_params [ RPAREN DOUBLE_GREATER BAR ]
## Transitions:
-- On SEMICOL shift to state 332
## Reductions:
-- On RPAREN DOUBLE_GREATER BAR
--   reduce production nonmt_params -> param

State 332:
## Known stack suffix:
## param SEMICOL
## LR(1) items:
nonmt_params -> param SEMICOL . [ RPAREN DOUBLE_GREATER BAR ]
nonmt_params -> param SEMICOL . nonmt_params [ RPAREN DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 328
-- On param shift to state 331
-- On nonmt_params shift to state 333
-- On ident_list shift to state 334
## Reductions:
-- On RPAREN DOUBLE_GREATER BAR
--   reduce production nonmt_params -> param SEMICOL

State 333:
## Known stack suffix:
## param SEMICOL nonmt_params
## LR(1) items:
nonmt_params -> param SEMICOL nonmt_params . [ RPAREN DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonmt_params -> param SEMICOL nonmt_params

State 334:
## Known stack suffix:
## ident_list
## LR(1) items:
param -> ident_list . COLON located_ty_ident ck_annot [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
## Transitions:
-- On COLON shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## ident_list COLON
## LR(1) items:
param -> ident_list COLON . located_ty_ident ck_annot [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 339
-- On ident shift to state 88
## Reductions:

State 336:
## Known stack suffix:
## ty_ident
## LR(1) items:
located_ty_ident -> ty_ident . [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
located_ty_ident -> ty_ident . AT IDENT [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
ty_ident -> ty_ident . POWER simple_exp [ WHEN SEMICOL RPAREN POWER ON EQUAL DOUBLE_GREATER COLONCOLON BAR AT ]
## Transitions:
-- On POWER shift to state 35
-- On AT shift to state 337
## Reductions:
-- On WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR
--   reduce production located_ty_ident -> ty_ident

State 337:
## Known stack suffix:
## ty_ident AT
## LR(1) items:
located_ty_ident -> ty_ident AT . IDENT [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
## Transitions:
-- On IDENT shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## ty_ident AT IDENT
## LR(1) items:
located_ty_ident -> ty_ident AT IDENT . [ WHEN SEMICOL RPAREN ON EQUAL DOUBLE_GREATER COLONCOLON BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production located_ty_ident -> ty_ident AT IDENT

State 339:
## Known stack suffix:
## ident_list COLON located_ty_ident
## LR(1) items:
param -> ident_list COLON located_ty_ident . ck_annot [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
## Transitions:
-- On WHEN shift to state 340
-- On ON shift to state 349
-- On COLONCOLON shift to state 351
-- On ck_annot shift to state 353
## Reductions:
-- On SEMICOL RPAREN DOUBLE_GREATER BAR
--   reduce production ck_annot ->

State 340:
## Known stack suffix:
## WHEN
## LR(1) items:
ck_annot -> WHEN . when_ck [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On NOT shift to state 341
-- On IDENT shift to state 343
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On when_ck shift to state 344
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 345
-- On constructor shift to state 103
## Reductions:

State 341:
## Known stack suffix:
## NOT
## LR(1) items:
when_ck -> NOT . IDENT [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 342
## Reductions:

State 342:
## Known stack suffix:
## NOT IDENT
## LR(1) items:
when_ck -> NOT IDENT . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production when_ck -> NOT IDENT

State 343:
## Known stack suffix:
## IDENT
## LR(1) items:
when_ck -> IDENT . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production when_ck -> IDENT

State 344:
## Known stack suffix:
## WHEN when_ck
## LR(1) items:
ck_annot -> WHEN when_ck . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ck_annot -> WHEN when_ck

State 345:
## Known stack suffix:
## constructor_or_bool
## LR(1) items:
when_ck -> constructor_or_bool . LPAREN IDENT RPAREN [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On LPAREN shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## constructor_or_bool LPAREN
## LR(1) items:
when_ck -> constructor_or_bool LPAREN . IDENT RPAREN [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## constructor_or_bool LPAREN IDENT
## LR(1) items:
when_ck -> constructor_or_bool LPAREN IDENT . RPAREN [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On RPAREN shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## constructor_or_bool LPAREN IDENT RPAREN
## LR(1) items:
when_ck -> constructor_or_bool LPAREN IDENT RPAREN . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production when_ck -> constructor_or_bool LPAREN IDENT RPAREN

State 349:
## Known stack suffix:
## ON
## LR(1) items:
ck_annot -> ON . on_ck [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 350
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 236
## Reductions:

State 350:
## Known stack suffix:
## ON on_ck
## LR(1) items:
ck -> on_ck . [ ONOT ON ]
ck_annot -> ON on_ck . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
## Reductions:
-- On ONOT ON
--   reduce production ck -> on_ck
-- On SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR
--   reduce production ck_annot -> ON on_ck

State 351:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
ck_annot -> COLONCOLON . ck [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 249
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## COLONCOLON ck
## LR(1) items:
ck_annot -> COLONCOLON ck . [ SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ON IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ONOT IDENT [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON EQUAL DOUBLE_GREATER BAR ]
## Transitions:
-- On ONOT shift to state 237
-- On ON shift to state 239
## Reductions:
-- On SEMICOL RPAREN EQUAL DOUBLE_GREATER BAR
--   reduce production ck_annot -> COLONCOLON ck

State 353:
## Known stack suffix:
## ident_list COLON located_ty_ident ck_annot
## LR(1) items:
param -> ident_list COLON located_ty_ident ck_annot . [ SEMICOL RPAREN DOUBLE_GREATER BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> ident_list COLON located_ty_ident ck_annot

State 354:
## Known stack suffix:
## DOUBLE_LESS nonmt_params
## LR(1) items:
node_params -> DOUBLE_LESS nonmt_params . constraints DOUBLE_GREATER [ LPAREN ]
## Transitions:
-- On BAR shift to state 355
-- On constraints shift to state 360
## Reductions:
-- On DOUBLE_GREATER
--   reduce production constraints ->

State 355:
## Known stack suffix:
## BAR
## LR(1) items:
constraints -> BAR . slist(SEMICOL,exp) [ DOUBLE_GREATER ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(SEMICOL,exp) shift to state 356
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 357
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On DOUBLE_GREATER
--   reduce production slist(SEMICOL,exp) ->

State 356:
## Known stack suffix:
## BAR slist(SEMICOL,exp)
## LR(1) items:
constraints -> BAR slist(SEMICOL,exp) . [ DOUBLE_GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constraints -> BAR slist(SEMICOL,exp)

State 357:
## Known stack suffix:
## exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DOUBLE_GREATER AROBASE AND AMPERSAND ]
slist(SEMICOL,exp) -> exp . [ DOUBLE_GREATER ]
slist(SEMICOL,exp) -> exp . SEMICOL slist(SEMICOL,exp) [ DOUBLE_GREATER ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On SEMICOL shift to state 358
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On DOUBLE_GREATER
--   reduce production slist(SEMICOL,exp) -> exp

State 358:
## Known stack suffix:
## exp SEMICOL
## LR(1) items:
slist(SEMICOL,exp) -> exp SEMICOL . slist(SEMICOL,exp) [ DOUBLE_GREATER ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On slist(SEMICOL,exp) shift to state 359
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 357
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:
-- On DOUBLE_GREATER
--   reduce production slist(SEMICOL,exp) ->

State 359:
## Known stack suffix:
## exp SEMICOL slist(SEMICOL,exp)
## LR(1) items:
slist(SEMICOL,exp) -> exp SEMICOL slist(SEMICOL,exp) . [ DOUBLE_GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production slist(SEMICOL,exp) -> exp SEMICOL slist(SEMICOL,exp)

State 360:
## Known stack suffix:
## DOUBLE_LESS nonmt_params constraints
## LR(1) items:
node_params -> DOUBLE_LESS nonmt_params constraints . DOUBLE_GREATER [ LPAREN ]
## Transitions:
-- On DOUBLE_GREATER shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## DOUBLE_LESS nonmt_params constraints DOUBLE_GREATER
## LR(1) items:
node_params -> DOUBLE_LESS nonmt_params constraints DOUBLE_GREATER . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_params -> DOUBLE_LESS nonmt_params constraints DOUBLE_GREATER

State 362:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params . LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On LPAREN shift to state 363
## Reductions:

State 363:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params LPAREN
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN . params_signature RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On THREE_DOTS shift to state 364
-- On LPAREN shift to state 12
-- On IDENT shift to state 370
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On params_signature shift to state 374
-- On param_signature shift to state 382
-- On nonmt_params_signature shift to state 387
-- On modul shift to state 141
-- On located_ty_ident shift to state 385
-- On ident shift to state 88
## Reductions:
-- On RPAREN
--   reduce production params_signature ->

State 364:
## Known stack suffix:
## THREE_DOTS
## LR(1) items:
param_signature -> THREE_DOTS . sig_ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On ON shift to state 365
-- On COLONCOLON shift to state 367
-- On sig_ck_annot shift to state 369
## Reductions:
-- On SEMICOL RPAREN
--   reduce production sig_ck_annot ->

State 365:
## Known stack suffix:
## ON
## LR(1) items:
sig_ck_annot -> ON . on_ck [ SEMICOL RPAREN ]
## Transitions:
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 366
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 236
## Reductions:

State 366:
## Known stack suffix:
## ON on_ck
## LR(1) items:
ck -> on_ck . [ ONOT ON ]
sig_ck_annot -> ON on_ck . [ SEMICOL RPAREN ]
## Transitions:
## Reductions:
-- On ONOT ON
--   reduce production ck -> on_ck
-- On SEMICOL RPAREN
--   reduce production sig_ck_annot -> ON on_ck

State 367:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
sig_ck_annot -> COLONCOLON . ck [ SEMICOL RPAREN ]
## Transitions:
-- On IDENT shift to state 229
-- On DOT shift to state 230
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On qualified(Constructor) shift to state 77
-- On on_ck shift to state 249
-- On modul shift to state 97
-- On constructor_or_bool shift to state 232
-- On constructor shift to state 103
-- On ck shift to state 368
## Reductions:

State 368:
## Known stack suffix:
## COLONCOLON ck
## LR(1) items:
on_ck -> ck . ON IDENT [ SEMICOL RPAREN ONOT ON ]
on_ck -> ck . ONOT IDENT [ SEMICOL RPAREN ONOT ON ]
on_ck -> ck . ON constructor_or_bool LPAREN IDENT RPAREN [ SEMICOL RPAREN ONOT ON ]
sig_ck_annot -> COLONCOLON ck . [ SEMICOL RPAREN ]
## Transitions:
-- On ONOT shift to state 237
-- On ON shift to state 239
## Reductions:
-- On SEMICOL RPAREN
--   reduce production sig_ck_annot -> COLONCOLON ck

State 369:
## Known stack suffix:
## THREE_DOTS sig_ck_annot
## LR(1) items:
param_signature -> THREE_DOTS sig_ck_annot . [ SEMICOL RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_signature -> THREE_DOTS sig_ck_annot

State 370:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ SEMICOL RPAREN POWER ON COLONCOLON AT ]
param_signature -> IDENT . COLON located_ty_ident sig_ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On COLON shift to state 371
## Reductions:
-- On SEMICOL RPAREN POWER ON COLONCOLON AT
--   reduce production ident -> IDENT

State 371:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
param_signature -> IDENT COLON . located_ty_ident sig_ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 372
-- On ident shift to state 88
## Reductions:

State 372:
## Known stack suffix:
## IDENT COLON located_ty_ident
## LR(1) items:
param_signature -> IDENT COLON located_ty_ident . sig_ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On ON shift to state 365
-- On COLONCOLON shift to state 367
-- On sig_ck_annot shift to state 373
## Reductions:
-- On SEMICOL RPAREN
--   reduce production sig_ck_annot ->

State 373:
## Known stack suffix:
## IDENT COLON located_ty_ident sig_ck_annot
## LR(1) items:
param_signature -> IDENT COLON located_ty_ident sig_ck_annot . [ SEMICOL RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_signature -> IDENT COLON located_ty_ident sig_ck_annot

State 374:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature . RPAREN returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On RPAREN shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN . returns LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On RETURNS shift to state 376
-- On EQUAL shift to state 377
-- On returns shift to state 378
## Reductions:

State 376:
## Known stack suffix:
## RETURNS
## LR(1) items:
returns -> RETURNS . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production returns -> RETURNS

State 377:
## Known stack suffix:
## EQUAL
## LR(1) items:
returns -> EQUAL . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production returns -> EQUAL

State 378:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns . LPAREN params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On LPAREN shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN . params_signature RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On THREE_DOTS shift to state 364
-- On LPAREN shift to state 12
-- On IDENT shift to state 370
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On params_signature shift to state 380
-- On param_signature shift to state 382
-- On nonmt_params_signature shift to state 387
-- On modul shift to state 141
-- On located_ty_ident shift to state 385
-- On ident shift to state 88
## Reductions:
-- On RPAREN
--   reduce production params_signature ->

State 380:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature . RPAREN [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
-- On RPAREN shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN
## LR(1) items:
interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN . [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_desc -> extern unsafe val_or_empty node_or_fun ident node_params LPAREN params_signature RPAREN returns LPAREN params_signature RPAREN

State 382:
## Known stack suffix:
## param_signature
## LR(1) items:
nonmt_params_signature -> param_signature . [ RPAREN ]
nonmt_params_signature -> param_signature . SEMICOL nonmt_params_signature [ RPAREN ]
## Transitions:
-- On SEMICOL shift to state 383
## Reductions:
-- On RPAREN
--   reduce production nonmt_params_signature -> param_signature

State 383:
## Known stack suffix:
## param_signature SEMICOL
## LR(1) items:
nonmt_params_signature -> param_signature SEMICOL . nonmt_params_signature [ RPAREN ]
## Transitions:
-- On THREE_DOTS shift to state 364
-- On LPAREN shift to state 12
-- On IDENT shift to state 370
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On param_signature shift to state 382
-- On nonmt_params_signature shift to state 384
-- On modul shift to state 141
-- On located_ty_ident shift to state 385
-- On ident shift to state 88
## Reductions:

State 384:
## Known stack suffix:
## param_signature SEMICOL nonmt_params_signature
## LR(1) items:
nonmt_params_signature -> param_signature SEMICOL nonmt_params_signature . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonmt_params_signature -> param_signature SEMICOL nonmt_params_signature

State 385:
## Known stack suffix:
## located_ty_ident
## LR(1) items:
param_signature -> located_ty_ident . sig_ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On ON shift to state 365
-- On COLONCOLON shift to state 367
-- On sig_ck_annot shift to state 386
## Reductions:
-- On SEMICOL RPAREN
--   reduce production sig_ck_annot ->

State 386:
## Known stack suffix:
## located_ty_ident sig_ck_annot
## LR(1) items:
param_signature -> located_ty_ident sig_ck_annot . [ SEMICOL RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param_signature -> located_ty_ident sig_ck_annot

State 387:
## Known stack suffix:
## nonmt_params_signature
## LR(1) items:
params_signature -> nonmt_params_signature . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production params_signature -> nonmt_params_signature

State 388:
## Known stack suffix:
## const_dec
## LR(1) items:
interface_desc -> const_dec . [ VAL UNSAFE TYPE NODE FUN EXTERNAL EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_desc -> const_dec

State 389:
## Known stack suffix:
## interface
## LR(1) items:
interface' -> interface . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept interface

State 390:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On OPEN shift to state 1
-- On program shift to state 391
-- On opens shift to state 6
-- On list(opens) shift to state 392
## Reductions:
-- On UNSAFE TYPE PRAGMA NODE FUN EOF CONST
--   reduce production list(opens) ->

State 391:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

State 392:
## Known stack suffix:
## list(opens)
## LR(1) items:
program -> list(opens) . list(program_desc) EOF [ # ]
## Transitions:
-- On UNSAFE shift to state 319
-- On TYPE shift to state 9
-- On PRAGMA shift to state 393
-- On CONST shift to state 307
-- On unsafe shift to state 394
-- On type_dec shift to state 552
-- On program_desc shift to state 553
-- On node_dec shift to state 554
-- On list(program_desc) shift to state 557
-- On const_dec shift to state 556
## Reductions:
-- On EOF
--   reduce production list(program_desc) ->
-- On NODE FUN
--   reduce production unsafe ->

State 393:
## Known stack suffix:
## PRAGMA
## LR(1) items:
program_desc -> PRAGMA . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production program_desc -> PRAGMA

State 394:
## Known stack suffix:
## unsafe
## LR(1) items:
node_dec -> unsafe . node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On NODE shift to state 323
-- On FUN shift to state 324
-- On node_or_fun shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## unsafe node_or_fun
## LR(1) items:
node_dec -> unsafe node_or_fun . ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On ident shift to state 396
## Reductions:

State 396:
## Known stack suffix:
## unsafe node_or_fun ident
## LR(1) items:
node_dec -> unsafe node_or_fun ident . node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On DOUBLE_LESS shift to state 327
-- On node_params shift to state 397
## Reductions:
-- On LPAREN
--   reduce production node_params ->

State 397:
## Known stack suffix:
## unsafe node_or_fun ident node_params
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params . LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On LPAREN shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN . in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On IDENT shift to state 328
-- On params shift to state 399
-- On param shift to state 331
-- On nonmt_params shift to state 400
-- On in_params shift to state 401
-- On ident_list shift to state 334
## Reductions:
-- On RPAREN
--   reduce production params ->

State 399:
## Known stack suffix:
## params
## LR(1) items:
in_params -> params . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production in_params -> params

State 400:
## Known stack suffix:
## nonmt_params
## LR(1) items:
params -> nonmt_params . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production params -> nonmt_params

State 401:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params . RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On RPAREN shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN . returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On RETURNS shift to state 376
-- On EQUAL shift to state 377
-- On returns shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns . LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On LPAREN shift to state 404
## Reductions:

State 404:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN . out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 412
-- On out_params shift to state 419
-- On nonmt_out_params shift to state 551
-- On ident_list shift to state 415
## Reductions:
-- On RPAREN
--   reduce production out_params ->

State 405:
## Known stack suffix:
## LAST
## LR(1) items:
var_last -> LAST . IDENT COLON located_ty_ident ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST . IDENT COLON located_ty_ident ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On IDENT shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## LAST IDENT
## LR(1) items:
var_last -> LAST IDENT . COLON located_ty_ident ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT . COLON located_ty_ident ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On COLON shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## LAST IDENT COLON
## LR(1) items:
var_last -> LAST IDENT COLON . located_ty_ident ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT COLON . located_ty_ident ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 408
-- On ident shift to state 88
## Reductions:

State 408:
## Known stack suffix:
## LAST IDENT COLON located_ty_ident
## LR(1) items:
var_last -> LAST IDENT COLON located_ty_ident . ck_annot EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT COLON located_ty_ident . ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On WHEN shift to state 340
-- On ON shift to state 349
-- On COLONCOLON shift to state 351
-- On ck_annot shift to state 409
## Reductions:
-- On SEMICOL RPAREN EQUAL
--   reduce production ck_annot ->

State 409:
## Known stack suffix:
## LAST IDENT COLON located_ty_ident ck_annot
## LR(1) items:
var_last -> LAST IDENT COLON located_ty_ident ck_annot . EQUAL exp [ SEMICOL RPAREN ]
var_last -> LAST IDENT COLON located_ty_ident ck_annot . [ SEMICOL RPAREN ]
## Transitions:
-- On EQUAL shift to state 410
## Reductions:
-- On SEMICOL RPAREN
--   reduce production var_last -> LAST IDENT COLON located_ty_ident ck_annot

State 410:
## Known stack suffix:
## LAST IDENT COLON located_ty_ident ck_annot EQUAL
## LR(1) items:
var_last -> LAST IDENT COLON located_ty_ident ck_annot EQUAL . exp [ SEMICOL RPAREN ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 411
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 411:
## Known stack suffix:
## LAST IDENT COLON located_ty_ident ck_annot EQUAL exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR SEMICOL RPAREN POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
var_last -> LAST IDENT COLON located_ty_ident ck_annot EQUAL exp . [ SEMICOL RPAREN ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On SEMICOL RPAREN
--   reduce production var_last -> LAST IDENT COLON located_ty_ident ck_annot EQUAL exp

State 412:
## Known stack suffix:
## var_last
## LR(1) items:
nonmt_out_params -> var_last . [ RPAREN ]
nonmt_out_params -> var_last . SEMICOL [ RPAREN ]
nonmt_out_params -> var_last . SEMICOL nonmt_out_params [ RPAREN ]
## Transitions:
-- On SEMICOL shift to state 413
## Reductions:
-- On RPAREN
--   reduce production nonmt_out_params -> var_last

State 413:
## Known stack suffix:
## var_last SEMICOL
## LR(1) items:
nonmt_out_params -> var_last SEMICOL . [ RPAREN ]
nonmt_out_params -> var_last SEMICOL . nonmt_out_params [ RPAREN ]
## Transitions:
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 412
-- On nonmt_out_params shift to state 414
-- On ident_list shift to state 415
## Reductions:
-- On RPAREN
--   reduce production nonmt_out_params -> var_last SEMICOL

State 414:
## Known stack suffix:
## var_last SEMICOL nonmt_out_params
## LR(1) items:
nonmt_out_params -> var_last SEMICOL nonmt_out_params . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonmt_out_params -> var_last SEMICOL nonmt_out_params

State 415:
## Known stack suffix:
## ident_list
## LR(1) items:
var_last -> ident_list . COLON located_ty_ident ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On COLON shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## ident_list COLON
## LR(1) items:
var_last -> ident_list COLON . located_ty_ident ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On LPAREN shift to state 12
-- On IDENT shift to state 33
-- On Constructor shift to state 2
-- On ty_ident shift to state 336
-- On qualname shift to state 290
-- On qualified(ident) shift to state 140
-- On modul shift to state 141
-- On located_ty_ident shift to state 417
-- On ident shift to state 88
## Reductions:

State 417:
## Known stack suffix:
## ident_list COLON located_ty_ident
## LR(1) items:
var_last -> ident_list COLON located_ty_ident . ck_annot [ SEMICOL RPAREN ]
## Transitions:
-- On WHEN shift to state 340
-- On ON shift to state 349
-- On COLONCOLON shift to state 351
-- On ck_annot shift to state 418
## Reductions:
-- On SEMICOL RPAREN
--   reduce production ck_annot ->

State 418:
## Known stack suffix:
## ident_list COLON located_ty_ident ck_annot
## LR(1) items:
var_last -> ident_list COLON located_ty_ident ck_annot . [ SEMICOL RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var_last -> ident_list COLON located_ty_ident ck_annot

State 419:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params . RPAREN opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On RPAREN shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN . opt_semicolon contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On SEMICOL shift to state 421
-- On opt_semicolon shift to state 422
## Reductions:
-- On VAR LET CONTRACT
--   reduce production opt_semicolon ->

State 421:
## Known stack suffix:
## SEMICOL
## LR(1) items:
opt_semicolon -> SEMICOL . [ VAR UNSAFE TYPE PRAGMA NODE LET FUN EOF CONTRACT CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_semicolon -> SEMICOL

State 422:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon . contract block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On CONTRACT shift to state 423
-- On contract shift to state 547
## Reductions:
-- On VAR LET
--   reduce production contract ->

State 423:
## Known stack suffix:
## CONTRACT
## LR(1) items:
contract -> CONTRACT . opt_block opt_assume nonempty_list(objective) opt_with [ VAR LET ]
## Transitions:
-- On VAR shift to state 424
-- On LET shift to state 526
-- On opt_block shift to state 528
-- On block(LET) shift to state 545
## Reductions:
-- On REACHABLE ENFORCE ATTRACTIVE ASSUME
--   reduce production opt_block ->

State 424:
## Known stack suffix:
## VAR
## LR(1) items:
block(LET) -> VAR . loc_params LET equs [ TEL ]
## Transitions:
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 428
-- On ident_list shift to state 415
## Reductions:

State 425:
## Known stack suffix:
## var_last
## LR(1) items:
loc_params -> var_last . SEMICOL [ LET IN DO ]
loc_params -> var_last . SEMICOL loc_params [ LET IN DO ]
## Transitions:
-- On SEMICOL shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## var_last SEMICOL
## LR(1) items:
loc_params -> var_last SEMICOL . [ LET IN DO ]
loc_params -> var_last SEMICOL . loc_params [ LET IN DO ]
## Transitions:
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 427
-- On ident_list shift to state 415
## Reductions:
-- On LET IN DO
--   reduce production loc_params -> var_last SEMICOL

State 427:
## Known stack suffix:
## var_last SEMICOL loc_params
## LR(1) items:
loc_params -> var_last SEMICOL loc_params . [ LET IN DO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production loc_params -> var_last SEMICOL loc_params

State 428:
## Known stack suffix:
## VAR loc_params
## LR(1) items:
block(LET) -> VAR loc_params . LET equs [ TEL ]
## Transitions:
-- On LET shift to state 429
## Reductions:

State 429:
## Known stack suffix:
## VAR loc_params LET
## LR(1) items:
block(LET) -> VAR loc_params LET . equs [ TEL ]
## Transitions:
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 525
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On TEL
--   reduce production equs ->

State 430:
## Known stack suffix:
## SWITCH
## LR(1) items:
_equ -> SWITCH . exp opt_bar switch_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 431
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 431:
## Known stack suffix:
## SWITCH exp
## LR(1) items:
_equ -> SWITCH exp . opt_bar switch_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL Constructor BOOL BAR AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On BAR shift to state 432
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On opt_bar shift to state 433
## Reductions:
-- On Constructor BOOL
--   reduce production opt_bar ->

State 432:
## Known stack suffix:
## BAR
## LR(1) items:
opt_bar -> BAR . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_bar -> BAR

State 433:
## Known stack suffix:
## SWITCH exp opt_bar
## LR(1) items:
_equ -> SWITCH exp opt_bar . switch_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On switch_handlers shift to state 434
-- On switch_handler shift to state 524
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 438
-- On constructor shift to state 103
## Reductions:

State 434:
## Known stack suffix:
## SWITCH exp opt_bar switch_handlers
## LR(1) items:
_equ -> SWITCH exp opt_bar switch_handlers . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
switch_handlers -> switch_handlers . BAR switch_handler [ END BAR ]
## Transitions:
-- On END shift to state 435
-- On BAR shift to state 436
## Reductions:

State 435:
## Known stack suffix:
## SWITCH exp opt_bar switch_handlers END
## LR(1) items:
_equ -> SWITCH exp opt_bar switch_handlers END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _equ -> SWITCH exp opt_bar switch_handlers END

State 436:
## Known stack suffix:
## switch_handlers BAR
## LR(1) items:
switch_handlers -> switch_handlers BAR . switch_handler [ END BAR ]
## Transitions:
-- On Constructor shift to state 70
-- On BOOL shift to state 96
-- On switch_handler shift to state 437
-- On qualified(Constructor) shift to state 77
-- On modul shift to state 97
-- On constructor_or_bool shift to state 438
-- On constructor shift to state 103
## Reductions:

State 437:
## Known stack suffix:
## switch_handlers BAR switch_handler
## LR(1) items:
switch_handlers -> switch_handlers BAR switch_handler . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_handlers -> switch_handlers BAR switch_handler

State 438:
## Known stack suffix:
## constructor_or_bool
## LR(1) items:
switch_handler -> constructor_or_bool . block(DO) [ END BAR ]
## Transitions:
-- On VAR shift to state 439
-- On DO shift to state 473
-- On block(DO) shift to state 523
## Reductions:

State 439:
## Known stack suffix:
## VAR
## LR(1) items:
block(DO) -> VAR . loc_params DO equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
## Transitions:
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 440
-- On ident_list shift to state 415
## Reductions:

State 440:
## Known stack suffix:
## VAR loc_params
## LR(1) items:
block(DO) -> VAR loc_params . DO equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
## Transitions:
-- On DO shift to state 441
## Reductions:

State 441:
## Known stack suffix:
## VAR loc_params DO
## LR(1) items:
block(DO) -> VAR loc_params DO . equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
## Transitions:
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 522
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On UNTIL UNLESS STATE END DEFAULT BAR
--   reduce production equs ->

State 442:
## Known stack suffix:
## RESET
## LR(1) items:
_equ -> RESET . sblock(IN) EVERY exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 519
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On EVERY
--   reduce production equs ->

State 443:
## Known stack suffix:
## VAR
## LR(1) items:
sblock(IN) -> VAR . loc_params IN equs [ EVERY END ELSE DONE ]
## Transitions:
-- On LAST shift to state 405
-- On IDENT shift to state 328
-- On var_last shift to state 425
-- On loc_params shift to state 444
-- On ident_list shift to state 415
## Reductions:

State 444:
## Known stack suffix:
## VAR loc_params
## LR(1) items:
sblock(IN) -> VAR loc_params . IN equs [ EVERY END ELSE DONE ]
## Transitions:
-- On IN shift to state 445
## Reductions:

State 445:
## Known stack suffix:
## VAR loc_params IN
## LR(1) items:
sblock(IN) -> VAR loc_params IN . equs [ EVERY END ELSE DONE ]
## Transitions:
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 518
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On EVERY END ELSE DONE
--   reduce production equs ->

State 446:
## Known stack suffix:
## PRESENT
## LR(1) items:
_equ -> PRESENT . opt_bar present_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_equ -> PRESENT . opt_bar present_handlers DEFAULT DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On BAR shift to state 432
-- On opt_bar shift to state 447
## Reductions:
-- On SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL
--   reduce production opt_bar ->

State 447:
## Known stack suffix:
## PRESENT opt_bar
## LR(1) items:
_equ -> PRESENT opt_bar . present_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_equ -> PRESENT opt_bar . present_handlers DEFAULT DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On present_handlers shift to state 448
-- On present_handler shift to state 517
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 515
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 448:
## Known stack suffix:
## PRESENT opt_bar present_handlers
## LR(1) items:
_equ -> PRESENT opt_bar present_handlers . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_equ -> PRESENT opt_bar present_handlers . DEFAULT DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
present_handlers -> present_handlers . BAR present_handler [ END DEFAULT BAR ]
## Transitions:
-- On END shift to state 449
-- On DEFAULT shift to state 450
-- On BAR shift to state 513
## Reductions:

State 449:
## Known stack suffix:
## PRESENT opt_bar present_handlers END
## LR(1) items:
_equ -> PRESENT opt_bar present_handlers END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _equ -> PRESENT opt_bar present_handlers END

State 450:
## Known stack suffix:
## PRESENT opt_bar present_handlers DEFAULT
## LR(1) items:
_equ -> PRESENT opt_bar present_handlers DEFAULT . DO sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On DO shift to state 451
## Reductions:

State 451:
## Known stack suffix:
## PRESENT opt_bar present_handlers DEFAULT DO
## LR(1) items:
_equ -> PRESENT opt_bar present_handlers DEFAULT DO . sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 511
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On END
--   reduce production equs ->

State 452:
## Known stack suffix:
## LPAREN
## LR(1) items:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN . RPAREN [ RPAREN EQUAL COMMA ]
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN . optsnlist(COMMA,pat) RPAREN [ RPAREN EQUAL COMMA ]
## Transitions:
-- On RPAREN shift to state 453
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IDENT shift to state 459
-- On pat shift to state 460
-- On optsnlist(COMMA,pat) shift to state 464
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
## Reductions:

State 453:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN RPAREN . [ RPAREN EQUAL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN RPAREN

State 454:
## Known stack suffix:
## INIT
## LR(1) items:
pat -> INIT . DOUBLE_LESS IDENT DOUBLE_GREATER IDENT [ RPAREN EQUAL COMMA ]
## Transitions:
-- On DOUBLE_LESS shift to state 455
## Reductions:

State 455:
## Known stack suffix:
## INIT DOUBLE_LESS
## LR(1) items:
pat -> INIT DOUBLE_LESS . IDENT DOUBLE_GREATER IDENT [ RPAREN EQUAL COMMA ]
## Transitions:
-- On IDENT shift to state 456
## Reductions:

State 456:
## Known stack suffix:
## INIT DOUBLE_LESS IDENT
## LR(1) items:
pat -> INIT DOUBLE_LESS IDENT . DOUBLE_GREATER IDENT [ RPAREN EQUAL COMMA ]
## Transitions:
-- On DOUBLE_GREATER shift to state 457
## Reductions:

State 457:
## Known stack suffix:
## INIT DOUBLE_LESS IDENT DOUBLE_GREATER
## LR(1) items:
pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER . IDENT [ RPAREN EQUAL COMMA ]
## Transitions:
-- On IDENT shift to state 458
## Reductions:

State 458:
## Known stack suffix:
## INIT DOUBLE_LESS IDENT DOUBLE_GREATER IDENT
## LR(1) items:
pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER IDENT . [ RPAREN EQUAL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pat -> INIT DOUBLE_LESS IDENT DOUBLE_GREATER IDENT

State 459:
## Known stack suffix:
## IDENT
## LR(1) items:
pat -> IDENT . [ RPAREN EQUAL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pat -> IDENT

State 460:
## Known stack suffix:
## pat
## LR(1) items:
optsnlist(COMMA,pat) -> pat . [ RPAREN ]
optsnlist(COMMA,pat) -> pat . COMMA [ RPAREN ]
optsnlist(COMMA,pat) -> pat . COMMA optsnlist(COMMA,pat) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 461
## Reductions:
-- On RPAREN
--   reduce production optsnlist(COMMA,pat) -> pat

State 461:
## Known stack suffix:
## pat COMMA
## LR(1) items:
optsnlist(COMMA,pat) -> pat COMMA . [ RPAREN ]
optsnlist(COMMA,pat) -> pat COMMA . optsnlist(COMMA,pat) [ RPAREN ]
## Transitions:
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IDENT shift to state 459
-- On pat shift to state 460
-- On optsnlist(COMMA,pat) shift to state 462
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
## Reductions:
-- On RPAREN
--   reduce production optsnlist(COMMA,pat) -> pat COMMA

State 462:
## Known stack suffix:
## pat COMMA optsnlist(COMMA,pat)
## LR(1) items:
optsnlist(COMMA,pat) -> pat COMMA optsnlist(COMMA,pat) . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optsnlist(COMMA,pat) -> pat COMMA optsnlist(COMMA,pat)

State 463:
## Known stack suffix:
## adelim_slist(COMMA,LPAREN,RPAREN,pat)
## LR(1) items:
pat -> adelim_slist(COMMA,LPAREN,RPAREN,pat) . [ RPAREN EQUAL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pat -> adelim_slist(COMMA,LPAREN,RPAREN,pat)

State 464:
## Known stack suffix:
## LPAREN optsnlist(COMMA,pat)
## LR(1) items:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) . RPAREN [ RPAREN EQUAL COMMA ]
## Transitions:
-- On RPAREN shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## LPAREN optsnlist(COMMA,pat) RPAREN
## LR(1) items:
adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) RPAREN . [ RPAREN EQUAL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production adelim_slist(COMMA,LPAREN,RPAREN,pat) -> LPAREN optsnlist(COMMA,pat) RPAREN

State 466:
## Known stack suffix:
## IF
## LR(1) items:
_equ -> IF . exp THEN sblock(IN) ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 467
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 467:
## Known stack suffix:
## IF exp
## LR(1) items:
_equ -> IF exp . THEN sblock(IN) ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On THEN shift to state 468
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 468:
## Known stack suffix:
## IF exp THEN
## LR(1) items:
_equ -> IF exp THEN . sblock(IN) ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 507
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On ELSE
--   reduce production equs ->

State 469:
## Known stack suffix:
## DO
## LR(1) items:
_equ -> DO . sblock(IN) DONE [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 504
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On DONE
--   reduce production equs ->

State 470:
## Known stack suffix:
## AUTOMATON
## LR(1) items:
_equ -> AUTOMATON . automaton_handlers END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On STATE shift to state 471
-- On automaton_handlers shift to state 500
-- On automaton_handler shift to state 503
## Reductions:

State 471:
## Known stack suffix:
## STATE
## LR(1) items:
automaton_handler -> STATE . Constructor block(DO) opt_until_escapes opt_unless_escapes [ STATE END ]
## Transitions:
-- On Constructor shift to state 472
## Reductions:

State 472:
## Known stack suffix:
## STATE Constructor
## LR(1) items:
automaton_handler -> STATE Constructor . block(DO) opt_until_escapes opt_unless_escapes [ STATE END ]
## Transitions:
-- On VAR shift to state 439
-- On DO shift to state 473
-- On block(DO) shift to state 483
## Reductions:

State 473:
## Known stack suffix:
## DO
## LR(1) items:
block(DO) -> DO . equs [ UNTIL UNLESS STATE END DEFAULT BAR ]
## Transitions:
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 478
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On UNTIL UNLESS STATE END DEFAULT BAR
--   reduce production equs ->

State 474:
## Known stack suffix:
## pat
## LR(1) items:
_equ -> pat . EQUAL exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On EQUAL shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## pat EQUAL
## LR(1) items:
_equ -> pat EQUAL . exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 476
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 476:
## Known stack suffix:
## pat EQUAL exp
## LR(1) items:
_equ -> pat EQUAL exp . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR
--   reduce production _equ -> pat EQUAL exp

State 477:
## Known stack suffix:
## optsnlist(SEMICOL,equ)
## LR(1) items:
equs -> optsnlist(SEMICOL,equ) . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equs -> optsnlist(SEMICOL,equ)

State 478:
## Known stack suffix:
## DO equs
## LR(1) items:
block(DO) -> DO equs . [ UNTIL UNLESS STATE END DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block(DO) -> DO equs

State 479:
## Known stack suffix:
## equ
## LR(1) items:
optsnlist(SEMICOL,equ) -> equ . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
optsnlist(SEMICOL,equ) -> equ . SEMICOL [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
optsnlist(SEMICOL,equ) -> equ . SEMICOL optsnlist(SEMICOL,equ) [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On SEMICOL shift to state 480
## Reductions:
-- On UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR
--   reduce production optsnlist(SEMICOL,equ) -> equ

State 480:
## Known stack suffix:
## equ SEMICOL
## LR(1) items:
optsnlist(SEMICOL,equ) -> equ SEMICOL . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
optsnlist(SEMICOL,equ) -> equ SEMICOL . optsnlist(SEMICOL,equ) [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 481
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR
--   reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL

State 481:
## Known stack suffix:
## equ SEMICOL optsnlist(SEMICOL,equ)
## LR(1) items:
optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ) . [ UNTIL UNLESS TEL STATE EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optsnlist(SEMICOL,equ) -> equ SEMICOL optsnlist(SEMICOL,equ)

State 482:
## Known stack suffix:
## _equ
## LR(1) items:
equ -> _equ . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equ -> _equ

State 483:
## Known stack suffix:
## STATE Constructor block(DO)
## LR(1) items:
automaton_handler -> STATE Constructor block(DO) . opt_until_escapes opt_unless_escapes [ STATE END ]
## Transitions:
-- On UNTIL shift to state 484
-- On opt_until_escapes shift to state 495
## Reductions:
-- On UNLESS STATE END
--   reduce production opt_until_escapes ->

State 484:
## Known stack suffix:
## UNTIL
## LR(1) items:
opt_until_escapes -> UNTIL . opt_bar escapes [ UNLESS STATE END ]
## Transitions:
-- On BAR shift to state 432
-- On opt_bar shift to state 485
## Reductions:
-- On SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL
--   reduce production opt_bar ->

State 485:
## Known stack suffix:
## UNTIL opt_bar
## LR(1) items:
opt_until_escapes -> UNTIL opt_bar . escapes [ UNLESS STATE END ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 486
-- On escapes shift to state 491
-- On escape shift to state 494
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 486:
## Known stack suffix:
## exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN THEN SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL CONTINUE AROBASE AND AMPERSAND ]
escape -> exp . THEN Constructor [ UNLESS STATE END BAR ]
escape -> exp . CONTINUE Constructor [ UNLESS STATE END BAR ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On THEN shift to state 487
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On CONTINUE shift to state 489
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:

State 487:
## Known stack suffix:
## exp THEN
## LR(1) items:
escape -> exp THEN . Constructor [ UNLESS STATE END BAR ]
## Transitions:
-- On Constructor shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## exp THEN Constructor
## LR(1) items:
escape -> exp THEN Constructor . [ UNLESS STATE END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production escape -> exp THEN Constructor

State 489:
## Known stack suffix:
## exp CONTINUE
## LR(1) items:
escape -> exp CONTINUE . Constructor [ UNLESS STATE END BAR ]
## Transitions:
-- On Constructor shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## exp CONTINUE Constructor
## LR(1) items:
escape -> exp CONTINUE Constructor . [ UNLESS STATE END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production escape -> exp CONTINUE Constructor

State 491:
## Known stack suffix:
## UNTIL opt_bar escapes
## LR(1) items:
escapes -> escapes . BAR escape [ UNLESS STATE END BAR ]
opt_until_escapes -> UNTIL opt_bar escapes . [ UNLESS STATE END ]
## Transitions:
-- On BAR shift to state 492
## Reductions:
-- On UNLESS STATE END
--   reduce production opt_until_escapes -> UNTIL opt_bar escapes

State 492:
## Known stack suffix:
## escapes BAR
## LR(1) items:
escapes -> escapes BAR . escape [ UNLESS STATE END BAR ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 486
-- On escape shift to state 493
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 493:
## Known stack suffix:
## escapes BAR escape
## LR(1) items:
escapes -> escapes BAR escape . [ UNLESS STATE END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production escapes -> escapes BAR escape

State 494:
## Known stack suffix:
## escape
## LR(1) items:
escapes -> escape . [ UNLESS STATE END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production escapes -> escape

State 495:
## Known stack suffix:
## STATE Constructor block(DO) opt_until_escapes
## LR(1) items:
automaton_handler -> STATE Constructor block(DO) opt_until_escapes . opt_unless_escapes [ STATE END ]
## Transitions:
-- On UNLESS shift to state 496
-- On opt_unless_escapes shift to state 499
## Reductions:
-- On STATE END
--   reduce production opt_unless_escapes ->

State 496:
## Known stack suffix:
## UNLESS
## LR(1) items:
opt_unless_escapes -> UNLESS . opt_bar escapes [ STATE END ]
## Transitions:
-- On BAR shift to state 432
-- On opt_bar shift to state 497
## Reductions:
-- On SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL
--   reduce production opt_bar ->

State 497:
## Known stack suffix:
## UNLESS opt_bar
## LR(1) items:
opt_unless_escapes -> UNLESS opt_bar . escapes [ STATE END ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 486
-- On escapes shift to state 498
-- On escape shift to state 494
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 498:
## Known stack suffix:
## UNLESS opt_bar escapes
## LR(1) items:
escapes -> escapes . BAR escape [ STATE END BAR ]
opt_unless_escapes -> UNLESS opt_bar escapes . [ STATE END ]
## Transitions:
-- On BAR shift to state 492
## Reductions:
-- On STATE END
--   reduce production opt_unless_escapes -> UNLESS opt_bar escapes

State 499:
## Known stack suffix:
## STATE Constructor block(DO) opt_until_escapes opt_unless_escapes
## LR(1) items:
automaton_handler -> STATE Constructor block(DO) opt_until_escapes opt_unless_escapes . [ STATE END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production automaton_handler -> STATE Constructor block(DO) opt_until_escapes opt_unless_escapes

State 500:
## Known stack suffix:
## AUTOMATON automaton_handlers
## LR(1) items:
_equ -> AUTOMATON automaton_handlers . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
automaton_handlers -> automaton_handlers . automaton_handler [ STATE END ]
## Transitions:
-- On STATE shift to state 471
-- On END shift to state 501
-- On automaton_handler shift to state 502
## Reductions:

State 501:
## Known stack suffix:
## AUTOMATON automaton_handlers END
## LR(1) items:
_equ -> AUTOMATON automaton_handlers END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _equ -> AUTOMATON automaton_handlers END

State 502:
## Known stack suffix:
## automaton_handlers automaton_handler
## LR(1) items:
automaton_handlers -> automaton_handlers automaton_handler . [ STATE END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production automaton_handlers -> automaton_handlers automaton_handler

State 503:
## Known stack suffix:
## automaton_handler
## LR(1) items:
automaton_handlers -> automaton_handler . [ STATE END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production automaton_handlers -> automaton_handler

State 504:
## Known stack suffix:
## DO sblock(IN)
## LR(1) items:
_equ -> DO sblock(IN) . DONE [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On DONE shift to state 505
## Reductions:

State 505:
## Known stack suffix:
## DO sblock(IN) DONE
## LR(1) items:
_equ -> DO sblock(IN) DONE . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _equ -> DO sblock(IN) DONE

State 506:
## Known stack suffix:
## equs
## LR(1) items:
sblock(IN) -> equs . [ EVERY END ELSE DONE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sblock(IN) -> equs

State 507:
## Known stack suffix:
## IF exp THEN sblock(IN)
## LR(1) items:
_equ -> IF exp THEN sblock(IN) . ELSE sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On ELSE shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## IF exp THEN sblock(IN) ELSE
## LR(1) items:
_equ -> IF exp THEN sblock(IN) ELSE . sblock(IN) END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On VAR shift to state 443
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On sblock(IN) shift to state 509
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 506
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On END
--   reduce production equs ->

State 509:
## Known stack suffix:
## IF exp THEN sblock(IN) ELSE sblock(IN)
## LR(1) items:
_equ -> IF exp THEN sblock(IN) ELSE sblock(IN) . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On END shift to state 510
## Reductions:

State 510:
## Known stack suffix:
## IF exp THEN sblock(IN) ELSE sblock(IN) END
## LR(1) items:
_equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _equ -> IF exp THEN sblock(IN) ELSE sblock(IN) END

State 511:
## Known stack suffix:
## PRESENT opt_bar present_handlers DEFAULT DO sblock(IN)
## LR(1) items:
_equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) . END [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On END shift to state 512
## Reductions:

State 512:
## Known stack suffix:
## PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END
## LR(1) items:
_equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production _equ -> PRESENT opt_bar present_handlers DEFAULT DO sblock(IN) END

State 513:
## Known stack suffix:
## present_handlers BAR
## LR(1) items:
present_handlers -> present_handlers BAR . present_handler [ END DEFAULT BAR ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On present_handler shift to state 514
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 515
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 514:
## Known stack suffix:
## present_handlers BAR present_handler
## LR(1) items:
present_handlers -> present_handlers BAR present_handler . [ END DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production present_handlers -> present_handlers BAR present_handler

State 515:
## Known stack suffix:
## exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN VAR SUBTRACTIVE STAR POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL DO AROBASE AND AMPERSAND ]
present_handler -> exp . block(DO) [ END DEFAULT BAR ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On VAR shift to state 439
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On DO shift to state 473
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
-- On block(DO) shift to state 516
## Reductions:

State 516:
## Known stack suffix:
## exp block(DO)
## LR(1) items:
present_handler -> exp block(DO) . [ END DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production present_handler -> exp block(DO)

State 517:
## Known stack suffix:
## present_handler
## LR(1) items:
present_handlers -> present_handler . [ END DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production present_handlers -> present_handler

State 518:
## Known stack suffix:
## VAR loc_params IN equs
## LR(1) items:
sblock(IN) -> VAR loc_params IN equs . [ EVERY END ELSE DONE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sblock(IN) -> VAR loc_params IN equs

State 519:
## Known stack suffix:
## RESET sblock(IN)
## LR(1) items:
_equ -> RESET sblock(IN) . EVERY exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On EVERY shift to state 520
## Reductions:

State 520:
## Known stack suffix:
## RESET sblock(IN) EVERY
## LR(1) items:
_equ -> RESET sblock(IN) EVERY . exp [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 521
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 521:
## Known stack suffix:
## RESET sblock(IN) EVERY exp
## LR(1) items:
_equ -> RESET sblock(IN) EVERY exp . [ UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR ]
_exp -> exp . INFIX4 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN UNTIL UNLESS TEL SUBTRACTIVE STATE STAR SEMICOL POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EVERY EQUAL END ELSE DONE DEFAULT BAR AROBASE AND AMPERSAND ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On UNTIL UNLESS TEL STATE SEMICOL EVERY END ELSE DONE DEFAULT BAR
--   reduce production _equ -> RESET sblock(IN) EVERY exp

State 522:
## Known stack suffix:
## VAR loc_params DO equs
## LR(1) items:
block(DO) -> VAR loc_params DO equs . [ UNTIL UNLESS STATE END DEFAULT BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block(DO) -> VAR loc_params DO equs

State 523:
## Known stack suffix:
## constructor_or_bool block(DO)
## LR(1) items:
switch_handler -> constructor_or_bool block(DO) . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_handler -> constructor_or_bool block(DO)

State 524:
## Known stack suffix:
## switch_handler
## LR(1) items:
switch_handlers -> switch_handler . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_handlers -> switch_handler

State 525:
## Known stack suffix:
## VAR loc_params LET equs
## LR(1) items:
block(LET) -> VAR loc_params LET equs . [ TEL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block(LET) -> VAR loc_params LET equs

State 526:
## Known stack suffix:
## LET
## LR(1) items:
block(LET) -> LET . equs [ TEL ]
## Transitions:
-- On SWITCH shift to state 430
-- On RESET shift to state 442
-- On PRESENT shift to state 446
-- On LPAREN shift to state 452
-- On INIT shift to state 454
-- On IF shift to state 466
-- On IDENT shift to state 459
-- On DO shift to state 469
-- On AUTOMATON shift to state 470
-- On pat shift to state 474
-- On optsnlist(SEMICOL,equ) shift to state 477
-- On equs shift to state 527
-- On equ shift to state 479
-- On adelim_slist(COMMA,LPAREN,RPAREN,pat) shift to state 463
-- On _equ shift to state 482
## Reductions:
-- On TEL
--   reduce production equs ->

State 527:
## Known stack suffix:
## LET equs
## LR(1) items:
block(LET) -> LET equs . [ TEL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block(LET) -> LET equs

State 528:
## Known stack suffix:
## CONTRACT opt_block
## LR(1) items:
contract -> CONTRACT opt_block . opt_assume nonempty_list(objective) opt_with [ VAR LET ]
## Transitions:
-- On ASSUME shift to state 529
-- On opt_assume shift to state 531
## Reductions:
-- On REACHABLE ENFORCE ATTRACTIVE
--   reduce production opt_assume ->

State 529:
## Known stack suffix:
## ASSUME
## LR(1) items:
opt_assume -> ASSUME . exp [ REACHABLE ENFORCE ATTRACTIVE ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 530
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 530:
## Known stack suffix:
## ASSUME exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WHENOT WHEN SUBTRACTIVE STAR REACHABLE POWER OR LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
opt_assume -> ASSUME exp . [ REACHABLE ENFORCE ATTRACTIVE ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On REACHABLE ENFORCE ATTRACTIVE
--   reduce production opt_assume -> ASSUME exp

State 531:
## Known stack suffix:
## CONTRACT opt_block opt_assume
## LR(1) items:
contract -> CONTRACT opt_block opt_assume . nonempty_list(objective) opt_with [ VAR LET ]
## Transitions:
-- On REACHABLE shift to state 532
-- On ENFORCE shift to state 533
-- On ATTRACTIVE shift to state 534
-- On objective_kind shift to state 535
-- On objective shift to state 537
-- On nonempty_list(objective) shift to state 539
## Reductions:

State 532:
## Known stack suffix:
## REACHABLE
## LR(1) items:
objective_kind -> REACHABLE . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production objective_kind -> REACHABLE

State 533:
## Known stack suffix:
## ENFORCE
## LR(1) items:
objective_kind -> ENFORCE . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production objective_kind -> ENFORCE

State 534:
## Known stack suffix:
## ATTRACTIVE
## LR(1) items:
objective_kind -> ATTRACTIVE . [ SUBTRACTIVE STRING SPLIT REINIT PREFIX PRE NOT MERGE MAPI MAPFOLD MAP LPAREN LBRACKET LBRACE LAST INT INLINED IF IDENT FOLDI FOLD FLOAT Constructor BOOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production objective_kind -> ATTRACTIVE

State 535:
## Known stack suffix:
## objective_kind
## LR(1) items:
objective -> objective_kind . exp [ WITH VAR REACHABLE LET ENFORCE ATTRACTIVE ]
## Transitions:
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 36
-- On SPLIT shift to state 39
-- On REINIT shift to state 42
-- On PREFIX shift to state 44
-- On PRE shift to state 45
-- On NOT shift to state 46
-- On MERGE shift to state 47
-- On MAPI shift to state 50
-- On MAPFOLD shift to state 51
-- On MAP shift to state 52
-- On LPAREN shift to state 53
-- On LBRACKET shift to state 55
-- On LBRACE shift to state 56
-- On LAST shift to state 59
-- On INT shift to state 61
-- On INLINED shift to state 62
-- On IF shift to state 65
-- On IDENT shift to state 66
-- On FOLDI shift to state 67
-- On FOLD shift to state 68
-- On FLOAT shift to state 69
-- On Constructor shift to state 70
-- On BOOL shift to state 71
-- On simple_exp shift to state 72
-- On qualname shift to state 74
-- On qualified(ident) shift to state 76
-- On qualified(Constructor) shift to state 77
-- On node_name shift to state 78
-- On modul shift to state 81
-- On iterator shift to state 85
-- On ident shift to state 88
-- On exp shift to state 536
-- On constructor shift to state 119
-- On const shift to state 120
-- On _simple_exp shift to state 121
-- On _exp shift to state 122
-- On _const shift to state 123
## Reductions:

State 536:
## Known stack suffix:
## objective_kind exp
## LR(1) items:
_exp -> exp . INFIX4 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX3 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX2 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN constructor_or_bool LPAREN IDENT RPAREN [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN IDENT [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHENOT IDENT [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . WHEN NOT IDENT [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX1 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . INFIX0 exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . EQUAL exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . LESS_GREATER exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . OR exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . STAR exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AND exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AMPERSAND exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . SUBTRACTIVE exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . POWER separated_nonempty_list(POWER,simple_exp) [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
_exp -> exp . AROBASE exp [ WITH WHENOT WHEN VAR SUBTRACTIVE STAR REACHABLE POWER OR LET LESS_GREATER INFIX4 INFIX3 INFIX2 INFIX1 INFIX0 EQUAL ENFORCE ATTRACTIVE AROBASE AND AMPERSAND ]
objective -> objective_kind exp . [ WITH VAR REACHABLE LET ENFORCE ATTRACTIVE ]
## Transitions:
-- On WHENOT shift to state 90
-- On WHEN shift to state 92
-- On SUBTRACTIVE shift to state 104
-- On STAR shift to state 106
-- On POWER shift to state 108
-- On OR shift to state 113
-- On LESS_GREATER shift to state 115
-- On INFIX4 shift to state 117
-- On INFIX3 shift to state 124
-- On INFIX2 shift to state 126
-- On INFIX1 shift to state 128
-- On INFIX0 shift to state 130
-- On EQUAL shift to state 132
-- On AROBASE shift to state 138
-- On AND shift to state 134
-- On AMPERSAND shift to state 136
## Reductions:
-- On WITH VAR REACHABLE LET ENFORCE ATTRACTIVE
--   reduce production objective -> objective_kind exp

State 537:
## Known stack suffix:
## objective
## LR(1) items:
nonempty_list(objective) -> objective . [ WITH VAR LET ]
nonempty_list(objective) -> objective . nonempty_list(objective) [ WITH VAR LET ]
## Transitions:
-- On REACHABLE shift to state 532
-- On ENFORCE shift to state 533
-- On ATTRACTIVE shift to state 534
-- On objective_kind shift to state 535
-- On objective shift to state 537
-- On nonempty_list(objective) shift to state 538
## Reductions:
-- On WITH VAR LET
--   reduce production nonempty_list(objective) -> objective

State 538:
## Known stack suffix:
## objective nonempty_list(objective)
## LR(1) items:
nonempty_list(objective) -> objective nonempty_list(objective) . [ WITH VAR LET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonempty_list(objective) -> objective nonempty_list(objective)

State 539:
## Known stack suffix:
## CONTRACT opt_block opt_assume nonempty_list(objective)
## LR(1) items:
contract -> CONTRACT opt_block opt_assume nonempty_list(objective) . opt_with [ VAR LET ]
## Transitions:
-- On WITH shift to state 540
-- On opt_with shift to state 544
## Reductions:
-- On VAR LET
--   reduce production opt_with ->

State 540:
## Known stack suffix:
## WITH
## LR(1) items:
opt_with -> WITH . LPAREN params RPAREN [ VAR LET ]
## Transitions:
-- On LPAREN shift to state 541
## Reductions:

State 541:
## Known stack suffix:
## WITH LPAREN
## LR(1) items:
opt_with -> WITH LPAREN . params RPAREN [ VAR LET ]
## Transitions:
-- On IDENT shift to state 328
-- On params shift to state 542
-- On param shift to state 331
-- On nonmt_params shift to state 400
-- On ident_list shift to state 334
## Reductions:
-- On RPAREN
--   reduce production params ->

State 542:
## Known stack suffix:
## WITH LPAREN params
## LR(1) items:
opt_with -> WITH LPAREN params . RPAREN [ VAR LET ]
## Transitions:
-- On RPAREN shift to state 543
## Reductions:

State 543:
## Known stack suffix:
## WITH LPAREN params RPAREN
## LR(1) items:
opt_with -> WITH LPAREN params RPAREN . [ VAR LET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_with -> WITH LPAREN params RPAREN

State 544:
## Known stack suffix:
## CONTRACT opt_block opt_assume nonempty_list(objective) opt_with
## LR(1) items:
contract -> CONTRACT opt_block opt_assume nonempty_list(objective) opt_with . [ VAR LET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production contract -> CONTRACT opt_block opt_assume nonempty_list(objective) opt_with

State 545:
## Known stack suffix:
## block(LET)
## LR(1) items:
opt_block -> block(LET) . TEL [ REACHABLE ENFORCE ATTRACTIVE ASSUME ]
## Transitions:
-- On TEL shift to state 546
## Reductions:

State 546:
## Known stack suffix:
## block(LET) TEL
## LR(1) items:
opt_block -> block(LET) TEL . [ REACHABLE ENFORCE ATTRACTIVE ASSUME ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_block -> block(LET) TEL

State 547:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract . block(LET) TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On VAR shift to state 424
-- On LET shift to state 526
-- On block(LET) shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET)
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) . TEL opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On TEL shift to state 549
## Reductions:

State 549:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL . opt_semicolon [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
-- On SEMICOL shift to state 421
-- On opt_semicolon shift to state 550
## Reductions:
-- On UNSAFE TYPE PRAGMA NODE FUN EOF CONST
--   reduce production opt_semicolon ->

State 550:
## Known stack suffix:
## unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon
## LR(1) items:
node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production node_dec -> unsafe node_or_fun ident node_params LPAREN in_params RPAREN returns LPAREN out_params RPAREN opt_semicolon contract block(LET) TEL opt_semicolon

State 551:
## Known stack suffix:
## nonmt_out_params
## LR(1) items:
out_params -> nonmt_out_params . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production out_params -> nonmt_out_params

State 552:
## Known stack suffix:
## type_dec
## LR(1) items:
program_desc -> type_dec . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production program_desc -> type_dec

State 553:
## Known stack suffix:
## program_desc
## LR(1) items:
list(program_desc) -> program_desc . list(program_desc) [ EOF ]
## Transitions:
-- On UNSAFE shift to state 319
-- On TYPE shift to state 9
-- On PRAGMA shift to state 393
-- On CONST shift to state 307
-- On unsafe shift to state 394
-- On type_dec shift to state 552
-- On program_desc shift to state 553
-- On node_dec shift to state 554
-- On list(program_desc) shift to state 555
-- On const_dec shift to state 556
## Reductions:
-- On EOF
--   reduce production list(program_desc) ->
-- On NODE FUN
--   reduce production unsafe ->

State 554:
## Known stack suffix:
## node_dec
## LR(1) items:
program_desc -> node_dec . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production program_desc -> node_dec

State 555:
## Known stack suffix:
## program_desc list(program_desc)
## LR(1) items:
list(program_desc) -> program_desc list(program_desc) . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list(program_desc) -> program_desc list(program_desc)

State 556:
## Known stack suffix:
## const_dec
## LR(1) items:
program_desc -> const_dec . [ UNSAFE TYPE PRAGMA NODE FUN EOF CONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production program_desc -> const_dec

State 557:
## Known stack suffix:
## list(opens) list(program_desc)
## LR(1) items:
program -> list(opens) list(program_desc) . EOF [ # ]
## Transitions:
-- On EOF shift to state 558
## Reductions:

State 558:
## Known stack suffix:
## list(opens) list(program_desc) EOF
## LR(1) items:
program -> list(opens) list(program_desc) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> list(opens) list(program_desc) EOF

