%{
(***********************************************************************)
(*                                                                     *)
(*                             Heptagon                                *)
(*                                                                     *)
(* Gwenael Delaval, LIG/INRIA, UJF                                     *)
(* Leonard Gerard, Parkas, ENS                                         *)
(* Adrien Guatto, Parkas, ENS                                          *)
(* Cedric Pasteur, Parkas, ENS                                         *)
(* Marc Pouzet, Parkas, ENS                                            *)
(*                                                                     *)
(* Copyright 2012 ENS, INRIA, UJF                                      *)
(*                                                                     *)
(* This file is part of the Heptagon compiler.                         *)
(*                                                                     *)
(* Heptagon is free software: you can redistribute it and/or modify it *)
(* under the terms of the GNU General Public License as published by   *)
(* the Free Software Foundation, either version 3 of the License, or   *)
(* (at your option) any later version.                                 *)
(*                                                                     *)
(* Heptagon is distributed in the hope that it will be useful,         *)
(* but WITHOUT ANY WARRANTY; without even the implied warranty of      *)
(* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *)
(* GNU General Public License for more details.                        *)
(*                                                                     *)
(* You should have received a copy of the GNU General Public License   *)
(* along with Heptagon.  If not, see <http://www.gnu.org/licenses/>    *)
(*                                                                     *)
(***********************************************************************)

open Location
open Names
open Linearity
open Hept_parsetree


%}
%start interface
%start program
%token AMPERAMPER
%token AMPERSAND
%token AND
%token AROBASE
%token ARROW
%token ASSUME
%token AT
%token ATTRACTIVE
%token AUTOMATON
%token BAR
%token BARBAR
%token <bool> BOOL
%token COLON
%token COLONCOLON
%token COMMA
%token CONST
%token CONTINUE
%token CONTRACT
%token <string> Constructor
%token DEFAULT
%token DO
%token DONE
%token DOT
%token DOUBLE_DOT
%token DOUBLE_GREATER
%token DOUBLE_LESS
%token ELSE
%token END
%token ENFORCE
%token EOF
%token EQUAL
%token EQUALEQUAL
%token EVERY
%token EXTERNAL
%token FBY
%token <float> FLOAT
%token FOLD
%token FOLDI
%token FUN
%token <string> IDENT
%token IF
%token IN
%token <string> INFIX0
%token <string> INFIX1
%token <string> INFIX2
%token <string> INFIX3
%token <string> INFIX4
%token INIT
%token INLINED
%token <int> INT
%token LAST
%token LBRACE
%token LBRACKET
%token LBRACKETGREATER
%token LESSRBRACKET
%token LESS_GREATER
%token LESS_LPAREN
%token LET
%token LPAREN
%token MAP
%token MAPFOLD
%token MAPI
%token MERGE
%token NODE
%token NOT
%token ON
%token ONOT
%token OPEN
%token OR
%token POWER
%token <string * string> PRAGMA
%token PRE
%token <string> PREFIX
%token PRESENT
%token RBRACE
%token RBRACKET
%token REACHABLE
%token REINIT
%token RESET
%token RETURNS
%token RPAREN
%token RPAREN_GREATER
%token SEMICOL
%token SPLIT
%token STAR
%token STATE
%token <string> STRING
%token <string> SUBTRACTIVE
%token SWITCH
%token TEL
%token THEN
%token THREE_DOTS
%token TYPE
%token UNLESS
%token UNSAFE
%token UNTIL
%token VAL
%token VAR
%token WHEN
%token WHENOT
%token WITH
%right AROBASE
%nonassoc DEFAULT
%left ELSE
%right ARROW
%left OR
%left AMPERSAND AND
%left EQUAL INFIX0 LESS_GREATER
%right INFIX1
%right WHEN WHENOT
%left INFIX2 SUBTRACTIVE
%left INFIX3 STAR
%left INFIX4
%right NOT
%right FBY
%right PRE
%left POWER
%nonassoc PREFIX
%type <Hept_parsetree.interface> interface
%type <Hept_parsetree.program> program
%%

list_interface_desc_:
  
    {    ( [] )}
| x = interface_desc xs = list_interface_desc_
    {    ( x :: xs )}

list_opens_:
  
    {    ( [] )}
| x = opens xs = list_opens_
    {    ( x :: xs )}

list_program_desc_:
  
    {    ( [] )}
| x = program_desc xs = list_program_desc_
    {    ( x :: xs )}

nonempty_list_merge_handler_:
  x = merge_handler
    {    ( [ x ] )}
| x = merge_handler xs = nonempty_list_merge_handler_
    {    ( x :: xs )}

nonempty_list_objective_:
  x = objective
    {    ( [ x ] )}
| x = objective xs = nonempty_list_objective_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_simple_exp_:
  x = simple_exp
    {    ( [ x ] )}
| x = simple_exp _2 = COMMA xs = separated_nonempty_list_COMMA_simple_exp_
    {    ( x :: xs )}

separated_nonempty_list_POWER_simple_exp_:
  x = simple_exp
    {    ( [ x ] )}
| x = simple_exp _2 = POWER xs = separated_nonempty_list_POWER_simple_exp_
    {    ( x :: xs )}

slist_COMMA_exp_:
  
    {                           ([])}
| x = exp
    {                           ([x])}
| x = exp _2 = COMMA r = slist_COMMA_exp_
    {                           (x::r)}

slist_SEMICOL_exp_:
  
    {                           ([])}
| x = exp
    {                           ([x])}
| x = exp _2 = SEMICOL r = slist_SEMICOL_exp_
    {                           (x::r)}

delim_slist_COMMA_LESS_LPAREN_RPAREN_GREATER_exp_:
  
    {                           ([])}
| _1 = LESS_LPAREN l = slist_COMMA_exp_ _3 = RPAREN_GREATER
    {                           (l)}

optsnlist_COMMA_pat_:
  x = pat
    {                           ([x])}
| x = pat _2 = COMMA
    {                           ([x])}
| x = pat _2 = COMMA r = optsnlist_COMMA_pat_
    {                           (x::r)}

optsnlist_SEMICOL_equ_:
  x = equ
    {                           ([x])}
| x = equ _2 = SEMICOL
    {                           ([x])}
| x = equ _2 = SEMICOL r = optsnlist_SEMICOL_equ_
    {                           (x::r)}

adelim_slist_COMMA_LPAREN_RPAREN_pat_:
  _1 = LPAREN _2 = RPAREN
    {                           ([])}
| _1 = LPAREN l = optsnlist_COMMA_pat_ _3 = RPAREN
    {                               (l)}

program:
  o = list_opens_ p = list_program_desc_ _3 = EOF
    {                                                ( {p_modname = ""; p_opened = o; p_desc = p} )}

program_desc:
  p = PRAGMA
    {                 ( Ppragma p )}
| c = const_dec
    {                 ( Pconst c )}
| t = type_dec
    {                 ( Ptype t )}
| n = node_dec
    {                 ( Pnode n )}

opens:
  _1 = OPEN m = modul
    {                    ( m )}

const_dec:
  _1 = CONST x = IDENT _3 = COLON t = ty_ident _5 = EQUAL e = exp
    {let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
      ( mk_const_dec x t e (Loc(_startpos,_endpos)) )}

type_dec:
  _1 = TYPE _2 = IDENT
    {let _endpos = _endpos__2_ in
let _startpos = _startpos__1_ in
      ( mk_type_dec _2 Type_abs (Loc(_startpos,_endpos)) )}
| _1 = TYPE _2 = IDENT _3 = EQUAL _4 = ty_ident
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
      ( mk_type_dec _2 (Type_alias _4) (Loc(_startpos,_endpos)) )}
| _1 = TYPE _2 = IDENT _3 = EQUAL _4 = enum_ty_desc
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
      ( mk_type_dec _2 (Type_enum (_4)) (Loc(_startpos,_endpos)) )}
| _1 = TYPE _2 = IDENT _3 = EQUAL _4 = struct_ty_desc
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
      ( mk_type_dec _2 (Type_struct (_4)) (Loc(_startpos,_endpos)) )}

enum_ty_desc:
  _1 = Constructor
    {                                  ([_1])}
| _1 = BOOL _2 = BAR _3 = BOOL
    {                                  ([(if _1 then "true" else "false");
                                    (if _3 then "true" else "false")])}
| _1 = Constructor _2 = BAR _3 = enum_ty_desc
    {                                  (_1 :: _3)}

struct_ty_desc:
  _1 = LBRACE _2 = label_ty_list _3 = RBRACE
    {                                ( _2 )}

label_ty_list:
  _1 = label_ty
    {             ( [_1] )}
| _1 = label_ty _2 = SEMICOL _3 = label_ty_list
    {                                   ( _1 :: _3 )}

label_ty:
  _1 = IDENT _2 = COLON _3 = ty_ident
    {                       ( _1, _3 )}

returns:
  _1 = RETURNS
    {                         ()}
| _1 = EQUAL
    {                         ()}

opt_semicolon:
  
    {                                       ()}
| _1 = SEMICOL
    {                                       ()}

node_dec:
  u = unsafe n = node_or_fun f = ident pc = node_params _5 = LPAREN i = in_params _7 = RPAREN _8 = returns _9 = LPAREN o = out_params _11 = RPAREN _12 = opt_semicolon c = contract b = block_LET_ _15 = TEL _16 = opt_semicolon
    {let _endpos = _endpos__16_ in
let _startpos = _startpos_u_ in
      ({ n_name = f;
         n_stateful = n;
         n_unsafe = u;
         n_input  = i;
         n_output = o;
         n_contract = c;
         n_block = b;
         n_params = fst pc;
         n_constraints = snd pc;
         n_loc = (Loc(_startpos,_endpos)) })}

node_or_fun:
  _1 = NODE
    {         ( true )}
| _1 = FUN
    {        ( false )}

in_params:
  _1 = params
    {           (_1)}

params:
  
    {                 ( [] )}
| _1 = nonmt_params
    {                 ( _1 )}

nonmt_params:
  _1 = param
    {                               ( _1 )}
| _1 = param _2 = SEMICOL
    {                               ( _1 )}
| _1 = param _2 = SEMICOL _3 = nonmt_params
    {                               ( _1 @ _3 )}

param:
  idl = ident_list _2 = COLON ty_lin = located_ty_ident ck = ck_annot
    {let _endpos = _endpos_ck_ in
let _startpos = _startpos_idl_ in
      ( List.map (fun id -> mk_var_dec ~linearity:(snd ty_lin)
        id (fst ty_lin) ck Var (Loc(_startpos,_endpos))) idl )}

out_params:
  
    {                ( [] )}
| _1 = nonmt_out_params
    {                     ( _1 )}

nonmt_out_params:
  _1 = var_last
    {             ( _1 )}
| _1 = var_last _2 = SEMICOL
    {                     ( _1 )}
| _1 = var_last _2 = SEMICOL _3 = nonmt_out_params
    {                                      ( _1 @ _3 )}

constraints:
  
    {              ([])}
| _1 = BAR l = slist_SEMICOL_exp_
    {                              ( l )}

node_params:
  
    {                ( [],[] )}
| _1 = DOUBLE_LESS p = nonmt_params c = constraints _4 = DOUBLE_GREATER
    {                                                            ( p,c )}

contract:
  
    {                (None)}
| _1 = CONTRACT b = opt_block a = opt_assume ol = nonempty_list_objective_ w = opt_with
    {let _endpos = _endpos_w_ in
let _startpos = _startpos__1_ in
      ( Some{ c_block = b;
              c_assume = a;
              c_objectives = ol;
              c_assume_loc = mk_constructor_exp ptrue (Loc(_startpos,_endpos));
              c_enforce_loc = mk_constructor_exp ptrue (Loc(_startpos,_endpos));
              c_controllables = w } )}

opt_block:
  
    {let _endpos = _endpos__0_ in
let _startpos = _endpos__0_ in
                ( mk_block [] [] (Loc(_startpos,_endpos)) )}
| b = block_LET_ _2 = TEL
    {                     ( b )}

opt_assume:
  
    {let _endpos = _endpos__0_ in
let _startpos = _endpos__0_ in
                ( mk_constructor_exp ptrue (Loc(_startpos,_endpos)) )}
| _1 = ASSUME _2 = exp
    {               ( _2 )}

objective:
  _1 = objective_kind _2 = exp
    {                          ( mk_objective _1 _2 )}

objective_kind:
  _1 = ENFORCE
    {            ( Obj_enforce )}
| _1 = REACHABLE
    {              ( Obj_reachable )}
| _1 = ATTRACTIVE
    {               ( Obj_attractive )}

opt_with:
  
    {                ( [] )}
| _1 = WITH _2 = LPAREN _3 = params _4 = RPAREN
    {                              ( _3 )}

loc_params:
  _1 = var_last _2 = SEMICOL
    {                                ( _1 )}
| _1 = var_last _2 = SEMICOL _3 = loc_params
    {                                ( _1 @ _3 )}

var_last:
  idl = ident_list _2 = COLON ty_lin = located_ty_ident ck = ck_annot
    {let _endpos = _endpos_ck_ in
let _startpos = _startpos_idl_ in
      ( List.map (fun id -> mk_var_dec ~linearity:(snd ty_lin) id (fst ty_lin)
        ck Var (Loc(_startpos,_endpos))) idl )}
| _1 = LAST id = IDENT _3 = COLON ty_lin = located_ty_ident ck = ck_annot _6 = EQUAL e = exp
    {let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
      ( [ mk_var_dec ~linearity:(snd ty_lin) id (fst ty_lin)
            ck (Last(Some(e))) (Loc(_startpos,_endpos)) ] )}
| _1 = LAST id = IDENT _3 = COLON ty_lin = located_ty_ident ck = ck_annot
    {let _endpos = _endpos_ck_ in
let _startpos = _startpos__1_ in
      ( [ mk_var_dec ~linearity:(snd ty_lin) id (fst ty_lin)
            ck (Last(None)) (Loc(_startpos,_endpos)) ] )}

ident_list:
  _1 = IDENT
    {           ( [_1] )}
| _1 = IDENT _2 = COMMA _3 = ident_list
    {                           ( _1 :: _3 )}

located_ty_ident:
  _1 = ty_ident
    {      ( _1, Ltop )}
| _1 = ty_ident _2 = AT _3 = IDENT
    {      ( _1, Lat _3 )}

ty_ident:
  _1 = qualname
    {      ( Tid _1 )}
| _1 = ty_ident _2 = POWER _3 = simple_exp
    {      ( Tarray (_1, _3) )}

ct_annot:
  
    {                      ( None )}
| _1 = COLONCOLON ck = ck
    {                      ( Some(Ck ck) )}
| _1 = ON ck = on_ck
    {                      ( Some(Ck ck) )}

ck_annot:
  
    {                      ( None )}
| _1 = COLONCOLON ck = ck
    {                      ( Some ck )}
| _1 = ON ck = on_ck
    {                      ( Some ck )}
| _1 = WHEN ck = when_ck
    {                      ( Some ck )}

sig_ck_annot:
  
    {                      ( None )}
| _1 = COLONCOLON ck = ck
    {                      ( Some ck )}
| _1 = ON ck = on_ck
    {                      ( Some ck )}

ck:
  _1 = DOT
    {                         ( Cbase )}
| ck = on_ck
    {                         ( ck )}

on_ck:
  x = IDENT
    {                                                           ( Con(Cbase,Q Initial.ptrue,x) )}
| c = constructor_or_bool _2 = LPAREN x = IDENT _4 = RPAREN
    {                                                           ( Con(Cbase,c,x) )}
| b = ck _2 = ON x = IDENT
    {                                                           ( Con(b,Q Initial.ptrue,x) )}
| b = ck _2 = ONOT x = IDENT
    {                                                           ( Con(b,Q Initial.pfalse,x) )}
| b = ck _2 = ON c = constructor_or_bool _4 = LPAREN x = IDENT _6 = RPAREN
    {                                                           ( Con(b,c,x) )}

when_ck:
  x = IDENT
    {                                                           ( Cwhen(Q Initial.ptrue,x) )}
| _1 = NOT x = IDENT
    {                                                           ( Cwhen(Q Initial.pfalse,x) )}
| c = constructor_or_bool _2 = LPAREN x = IDENT _4 = RPAREN
    {                                                           ( Cwhen(c,x) )}

equs:
  
    {                                     ( [] )}
| eqs = optsnlist_SEMICOL_equ_
    {                                     ( eqs )}

opt_bar:
  
    {    ()}
| _1 = BAR
    {        ()}

block_DO_:
  _1 = VAR l = loc_params _3 = DO eq = equs
    {let _endpos = _endpos_eq_ in
let _startpos = _startpos__1_ in
                               ( mk_block l eq (Loc(_startpos,_endpos)) )}
| _1 = DO eq = equs
    {let _endpos = _endpos_eq_ in
let _startpos = _startpos__1_ in
                                 ( mk_block [] eq (Loc(_startpos,_endpos)) )}

block_LET_:
  _1 = VAR l = loc_params _3 = LET eq = equs
    {let _endpos = _endpos_eq_ in
let _startpos = _startpos__1_ in
                               ( mk_block l eq (Loc(_startpos,_endpos)) )}
| _1 = LET eq = equs
    {let _endpos = _endpos_eq_ in
let _startpos = _startpos__1_ in
                                 ( mk_block [] eq (Loc(_startpos,_endpos)) )}

sblock_IN_:
  _1 = VAR l = loc_params _3 = IN eq = equs
    {let _endpos = _endpos_eq_ in
let _startpos = _startpos__1_ in
                               ( mk_block l eq (Loc(_startpos,_endpos)) )}
| eq = equs
    {let _endpos = _endpos_eq_ in
let _startpos = _startpos_eq_ in
                             ( mk_block [] eq (Loc(_startpos,_endpos)) )}

equ:
  eq = _equ
    {let _endpos = _endpos_eq_ in
let _startpos = _startpos_eq_ in
            ( mk_equation eq (Loc(_startpos,_endpos)) )}

_equ:
  pat = pat _2 = EQUAL e = exp
    {                        ( Eeq(fst pat, snd pat, e) )}
| _1 = AUTOMATON _2 = automaton_handlers _3 = END
    {      ( Eautomaton(List.rev _2) )}
| _1 = SWITCH _2 = exp _3 = opt_bar _4 = switch_handlers _5 = END
    {      ( Eswitch(_2, List.rev _4) )}
| _1 = PRESENT _2 = opt_bar _3 = present_handlers _4 = END
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
      ( Epresent(List.rev _3, mk_block [] [] (Loc(_startpos,_endpos))) )}
| _1 = PRESENT _2 = opt_bar _3 = present_handlers _4 = DEFAULT _5 = DO b = sblock_IN_ _7 = END
    {      ( Epresent(List.rev _3, b) )}
| _1 = IF _2 = exp _3 = THEN tb = sblock_IN_ _5 = ELSE fb = sblock_IN_ _7 = END
    {      ( Eswitch(_2,
                   [{ w_name = ptrue; w_block = tb };
                    { w_name = pfalse; w_block = fb }]) )}
| _1 = RESET b = sblock_IN_ _3 = EVERY e = exp
    {      ( Ereset(b,e) )}
| _1 = DO b = sblock_IN_ _3 = DONE
    {      ( Eblock b )}

automaton_handler:
  _1 = STATE _2 = Constructor b = block_DO_ ut = opt_until_escapes ul = opt_unless_escapes
    {      ( { s_state = _2; s_block = b; s_until = ut; s_unless = ul } )}

automaton_handlers:
  _1 = automaton_handler
    {      ( [_1] )}
| _1 = automaton_handlers _2 = automaton_handler
    {      ( _2 :: _1 )}

opt_until_escapes:
  
    {    ( [] )}
| _1 = UNTIL _2 = opt_bar _3 = escapes
    {      ( List.rev _3 )}

opt_unless_escapes:
  
    {    ( [] )}
| _1 = UNLESS _2 = opt_bar _3 = escapes
    {      ( List.rev _3 )}

escape:
  _1 = exp _2 = THEN _3 = Constructor
    {      ( { e_cond = _1; e_reset = true; e_next_state = _3 } )}
| _1 = exp _2 = CONTINUE _3 = Constructor
    {      ( { e_cond = _1; e_reset = false; e_next_state = _3 } )}

escapes:
  _1 = escape
    {      ( [_1] )}
| _1 = escapes _2 = BAR _3 = escape
    {      ( _3 :: _1 )}

switch_handler:
  _1 = constructor_or_bool b = block_DO_
    {      ( { w_name = _1; w_block = b } )}

constructor_or_bool:
  _1 = BOOL
    {         ( if _1 then Q Initial.ptrue else Q Initial.pfalse )}
| _1 = constructor
    {                ( _1 )}

switch_handlers:
  _1 = switch_handler
    {      ( [_1] )}
| _1 = switch_handlers _2 = BAR _3 = switch_handler
    {      ( _3 :: _1 )}

present_handler:
  e = exp b = block_DO_
    {      ( { p_cond = e; p_block = b } )}

present_handlers:
  _1 = present_handler
    {      ( [_1] )}
| _1 = present_handlers _2 = BAR _3 = present_handler
    {      ( _3 :: _1 )}

pat:
  id = IDENT
    {                         ( Evarpat id, Lno_init )}
| _1 = INIT _2 = DOUBLE_LESS r = IDENT _4 = DOUBLE_GREATER id = IDENT
    {                                                     ( Evarpat id, Linit_var r )}
| pat_init_list = adelim_slist_COMMA_LPAREN_RPAREN_pat_
    {      ( let pat_list, init_list = List.split pat_init_list in
          Etuplepat pat_list, Linit_tuple init_list
      )}

nonmtexps:
  _1 = exp _2 = opt_comma
    {                        ([_1])}
| _1 = exp _2 = COMMA _3 = nonmtexps
    {                        (_1 :: _3)}

opt_comma:
  
    {    ()}
| _1 = COMMA
    {          ()}

exps:
  
    {                   ([])}
| _1 = nonmtexps
    {                   (_1)}

simple_exp:
  e = _simple_exp
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
                  ( mk_exp e (Loc(_startpos,_endpos)) )}
| _1 = LPAREN e = exp ct = ct_annot _4 = RPAREN
    {                                    ( { e with e_ct_annot = ct} )}

_simple_exp:
  _1 = IDENT
    {                                     ( Evar _1 )}
| _1 = const
    {                                     ( Econst _1 )}
| _1 = LBRACE _2 = field_exp_list _3 = RBRACE
    {                                     ( Estruct _2 )}
| _1 = LBRACKET _2 = array_exp_list _3 = RBRACKET
    {                                     ( mk_call Earray _2 )}
| _1 = LPAREN _2 = tuple_exp _3 = RPAREN
    {                                     ( mk_call Etuple _2 )}
| e = simple_exp _2 = DOT c = qualname
    {      ( mk_call ~params:[mk_field_exp c (Loc(_startpos_c_,_endpos_c_))] Efield [e] )}

node_name:
  q = qualname c = call_params
    {                             ( mk_app (Enode q) c false )}
| _1 = INLINED q = qualname c = call_params
    {                                     ( mk_app (Enode q) c true )}

merge_handlers:
  hs = nonempty_list_merge_handler_
    {                                    ( hs )}
| e1 = simple_exp e2 = simple_exp
    {                                ( [(Q Initial.ptrue, e1);(Q Initial.pfalse, e2)] )}

merge_handler:
  _1 = LPAREN c = constructor_or_bool _3 = ARROW e = exp _5 = RPAREN
    {                                                    ( (c,e) )}

exp:
  e = simple_exp
    {                 ( e )}
| e = _exp
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_e_ in
           ( mk_exp e (Loc(_startpos,_endpos)) )}

_exp:
  _1 = simple_exp _2 = FBY _3 = exp
    {      ( Efby (_1, _3) )}
| _1 = PRE _2 = exp
    {      ( Epre (None, _2) )}
| n = node_name _2 = LPAREN args = exps _4 = RPAREN
    {      ( Eapp(n, args) )}
| _1 = SPLIT n = ident _3 = LPAREN e = exp _5 = RPAREN
    {      ( Esplit(n, e) )}
| _1 = REINIT _2 = LPAREN e1 = exp _4 = COMMA e2 = exp _6 = RPAREN
    {      ( mk_call Ereinit [e1; e2] )}
| _1 = NOT _2 = exp
    {      ( mk_op_call "not" [_2] )}
| _1 = exp _2 = INFIX4 _3 = exp
    {      ( mk_op_call _2 [_1; _3] )}
| _1 = exp _2 = INFIX3 _3 = exp
    {      ( mk_op_call _2 [_1; _3] )}
| _1 = exp _2 = INFIX2 _3 = exp
    {      ( mk_op_call _2 [_1; _3] )}
| e = exp _2 = WHEN c = constructor_or_bool _4 = LPAREN ce = IDENT _6 = RPAREN
    {      ( Ewhen (e, c, ce) )}
| e = exp _2 = WHEN ce = IDENT
    {      ( Ewhen (e, Q Initial.ptrue, ce) )}
| e = exp _2 = WHENOT ce = IDENT
    {      ( Ewhen (e, Q Initial.pfalse, ce) )}
| e = exp _2 = WHEN _3 = NOT ce = IDENT
    {      ( Ewhen (e, Q Initial.pfalse, ce) )}
| _1 = MERGE n = IDENT hs = merge_handlers
    {      ( Emerge (n, hs) )}
| _1 = exp _2 = INFIX1 _3 = exp
    {      ( mk_op_call _2 [_1; _3] )}
| _1 = exp _2 = INFIX0 _3 = exp
    {      ( mk_op_call _2 [_1; _3] )}
| _1 = exp _2 = EQUAL _3 = exp
    {      ( mk_op_call "=" [_1; _3] )}
| _1 = exp _2 = LESS_GREATER _3 = exp
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
      ( let e = mk_exp (mk_op_call "=" [_1; _3]) (Loc(_startpos,_endpos)) in
          mk_op_call "not" [e] )}
| _1 = exp _2 = OR _3 = exp
    {      ( mk_op_call "or" [_1; _3] )}
| _1 = exp _2 = STAR _3 = exp
    {      ( mk_op_call "*" [_1; _3] )}
| _1 = exp _2 = AND _3 = exp
    {      ( mk_op_call "&" [_1; _3] )}
| _1 = exp _2 = AMPERSAND _3 = exp
    {      ( mk_op_call "&" [_1; _3] )}
| _1 = exp _2 = SUBTRACTIVE _3 = exp
    {      ( mk_op_call _2 [_1; _3] )}
| _1 = PREFIX _2 = exp
    {      ( mk_op_call _1 [_2] )}
| _1 = SUBTRACTIVE _2 = exp %prec PREFIX
    {      ( mk_op_call ("~"^_1) [_2] )}
| _1 = IF _2 = exp _3 = THEN _4 = exp _5 = ELSE _6 = exp
    {      ( mk_call Eifthenelse [_2; _4; _6] )}
| _1 = simple_exp _2 = ARROW _3 = exp
    {      ( mk_call Earrow [_1; _3] )}
| _1 = LAST _2 = IDENT
    {      ( Elast _2 )}
| _1 = exp _2 = POWER _3 = separated_nonempty_list_POWER_simple_exp_
    {      ( mk_call ~params:_3 Earray_fill [_1] )}
| _1 = simple_exp _2 = indexes
    {      ( mk_call ~params:_2 Eselect [_1] )}
| _1 = simple_exp _2 = DOT _3 = indexes _4 = DEFAULT _5 = exp
    {      ( mk_call Eselect_dyn ([_1; _5]@_3) )}
| a = simple_exp idx = trunc_indexes
    {      ( mk_call Eselect_trunc (a::idx) )}
| _1 = LBRACKET _2 = exp _3 = WITH _4 = indexes _5 = EQUAL _6 = exp _7 = RBRACKET
    {      ( mk_call Eupdate (_2::_6::_4) )}
| _1 = simple_exp _2 = LBRACKET _3 = exp _4 = DOUBLE_DOT _5 = exp _6 = RBRACKET
    {      ( mk_call ~params:[_3; _5] Eselect_slice [_1] )}
| _1 = exp _2 = AROBASE _3 = exp
    {      ( mk_call Econcat [_1; _3] )}
| it = iterator _2 = DOUBLE_LESS n = separated_nonempty_list_COMMA_simple_exp_ _4 = DOUBLE_GREATER q = qualname pargs = delim_slist_COMMA_LESS_LPAREN_RPAREN_GREATER_exp_ _7 = LPAREN args = exps _9 = RPAREN
    {      ( mk_iterator_call it q [] n pargs args )}
| it = iterator _2 = DOUBLE_LESS n = separated_nonempty_list_COMMA_simple_exp_ _4 = DOUBLE_GREATER _5 = LPAREN q = qualname _7 = DOUBLE_LESS sa = array_exp_list _9 = DOUBLE_GREATER _10 = RPAREN pargs = delim_slist_COMMA_LESS_LPAREN_RPAREN_GREATER_exp_ _12 = LPAREN args = exps _14 = RPAREN
    {      ( mk_iterator_call it q sa n pargs args )}
| _1 = LBRACE _2 = simple_exp _3 = WITH _4 = DOT c = qualname _6 = EQUAL _7 = exp _8 = RBRACE
    {      ( mk_call ~params:[mk_field_exp c (Loc(_startpos_c_,_endpos_c_))]
                Efield_update [_2; _7] )}

call_params:
  
    {                ( [] )}
| _1 = DOUBLE_LESS _2 = array_exp_list _3 = DOUBLE_GREATER
    {                                              ( _2 )}

iterator:
  _1 = MAP
    {        ( Imap )}
| _1 = MAPI
    {         ( Imapi )}
| _1 = FOLD
    {         ( Ifold )}
| _1 = FOLDI
    {          ( Ifoldi )}
| _1 = MAPFOLD
    {            ( Imapfold )}

indexes:
  _1 = LBRACKET _2 = exp _3 = RBRACKET
    {                         ( [_2] )}
| _1 = LBRACKET _2 = exp _3 = RBRACKET _4 = indexes
    {                                  ( _2::_4 )}

trunc_indexes:
  _1 = LBRACKETGREATER _2 = exp _3 = LESSRBRACKET
    {                                    ( [_2] )}
| _1 = LBRACKETGREATER _2 = exp _3 = LESSRBRACKET _4 = trunc_indexes
    {                                                   ( _2::_4 )}

qualified_Constructor_:
  m = modul _2 = DOT x = Constructor
    {                    ( Q { qual = m; name = x } )}

qualified_ident_:
  m = modul _2 = DOT x = ident
    {                    ( Q { qual = m; name = x } )}

modul:
  c = Constructor
    {                  ( Names.Module c )}
| m = modul _2 = DOT c = Constructor
    {                              ( Names.QualModule { Names.qual = m; Names.name = c} )}

constructor:
  _1 = Constructor
    {                ( ToQ _1 )}
| q = qualified_Constructor_
    {                             ( q )}

qualname:
  i = ident
    {            ( ToQ i )}
| q = qualified_ident_
    {                       ( q )}

const:
  c = _const
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
             ( mk_static_exp c (Loc(_startpos,_endpos)) )}

_const:
  _1 = INT
    {                       ( Sint _1 )}
| _1 = FLOAT
    {                       ( Sfloat _1 )}
| _1 = BOOL
    {                       ( Sbool _1 )}
| _1 = STRING
    {                       ( Sstring _1 )}
| _1 = constructor
    {                       ( Sconstructor _1 )}
| q = qualified_ident_
    {                       ( Svar q )}

tuple_exp:
  _1 = exp _2 = COMMA _3 = exp
    {                        ([_1; _3])}
| _1 = exp _2 = COMMA _3 = tuple_exp
    {                        (_1 :: _3)}

field_exp_list:
  _1 = field_exp
    {              ( [_1] )}
| _1 = field_exp _2 = SEMICOL _3 = field_exp_list
    {                                     ( _1 :: _3 )}

array_exp_list:
  _1 = exp
    {        ( [_1] )}
| _1 = exp _2 = COMMA _3 = array_exp_list
    {                             ( _1 :: _3 )}

field_exp:
  _1 = qualname _2 = EQUAL _3 = exp
    {                       ( (_1, _3) )}

ident:
  _1 = IDENT
    {      ( _1 )}
| _1 = LPAREN _2 = infx _3 = RPAREN
    {      ( _2 )}

infx:
  _1 = INFIX0
    {                    ( _1 )}
| _1 = INFIX1
    {                    ( _1 )}
| _1 = INFIX2
    {                                              ( _1 )}
| _1 = INFIX3
    {                    ( _1 )}
| _1 = INFIX4
    {                                              ( _1 )}
| _1 = STAR
    {                    ( "*" )}
| _1 = EQUAL
    {                    ( "=" )}
| _1 = EQUALEQUAL
    {                    ( "==" )}
| _1 = SUBTRACTIVE
    {                    ( _1 )}
| _1 = PREFIX
    {                                              ( _1 )}
| _1 = AMPERSAND
    {                    ( "&" )}
| _1 = AMPERAMPER
    {                                              ( "&&" )}
| _1 = OR
    {                    ( "or" )}
| _1 = BARBAR
    {                                              ( "||" )}
| _1 = NOT
    {                    ( "not" )}

interface:
  o = list_opens_ i = list_interface_desc_ _3 = EOF
    {    ( { i_modname = ""; i_opened = o; i_desc = i } )}

unsafe:
  _1 = UNSAFE
    {              ( true )}
| 
    {              ( false )}

extern:
  _1 = EXTERNAL
    {              ( true )}
| 
    {              ( false )}

val_or_empty:
  _1 = VAL
    {        ( () )}
| 
    {              ( () )}

interface_desc:
  _1 = type_dec
    {                     ( Itypedef _1 )}
| _1 = const_dec
    {                     ( Iconstdef _1 )}
| e = extern u = unsafe _3 = val_or_empty n = node_or_fun f = ident pc = node_params _7 = LPAREN i = params_signature _9 = RPAREN _10 = returns _11 = LPAREN o = params_signature _13 = RPAREN
    {let _endpos = _endpos__13_ in
let _startpos = _startpos_e_ in
    ( Isignature({ sig_name = f;
                   sig_inputs = i;
                   sig_stateful = n;
                   sig_unsafe = u;
                   sig_outputs = o;
                   sig_params = fst pc;
                   sig_param_constraints = snd pc;
                   sig_external = e;
                   sig_loc = (Loc(_startpos,_endpos)) }) )}

params_signature:
  
    {                 ([])}
| _1 = nonmt_params_signature
    {                           (_1)}

nonmt_params_signature:
  _1 = param_signature
    {                               ( [_1] )}
| _1 = param_signature _2 = SEMICOL _3 = nonmt_params_signature
    {                                                   ( _1 :: _3 )}

param_signature:
  _1 = IDENT _2 = COLON _3 = located_ty_ident ck = sig_ck_annot
    {                                                 ( mk_arg (Some _1) _3 ck )}
| _1 = located_ty_ident ck = sig_ck_annot
    {                                     ( mk_arg None _1 ck )}
| _1 = THREE_DOTS ck = sig_ck_annot
    {                               ( mk_arg None (Tinvalid, Linearity.Ltop) ck )}

%%


