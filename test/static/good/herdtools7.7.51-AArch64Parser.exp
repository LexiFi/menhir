Grammar has 19 nonterminal symbols, among which 2 start symbols.
Grammar has 63 terminal symbols.
Grammar has 90 productions.
nullable(xreg) = false
nullable(wreg) = false
nullable(stp_instr) = false
nullable(semi_opt) = true
nullable(reg) = false
nullable(proc_list) = false
nullable(main) = false
nullable(ldp_instr) = false
nullable(kwr) = false
nullable(kr0) = true
nullable(kr) = false
nullable(k) = false
nullable(iol_list) = false
nullable(instr_option_seq) = true
nullable(instr_option_list) = true
nullable(instr_option) = true
nullable(instr) = false
nullable(fenceopt) = false
nullable(cond) = false
first(xreg) = SYMB_XREG ARCH_XREG
first(wreg) = SYMB_WREG ARCH_WREG
first(stp_instr) = STP STNP
first(semi_opt) = SEMI
first(reg) = SYMB_XREG SYMB_WREG ARCH_XREG ARCH_WREG
first(proc_list) = PROC
first(main) = SEMI PROC
first(ldp_instr) = LDP LDNP
first(kwr) = SYMB_WREG NUM META ARCH_WREG
first(kr0) = COMMA
first(kr) = SYMB_XREG SYMB_WREG NUM META ARCH_XREG ARCH_WREG
first(k) = NUM META
first(iol_list) = SXTW STXR STRH STRB STR STP STNP STLXR STLR SEMI PIPE OP NAME MOV LDXR LDRH LDRB LDR LDP LDNP LDAXR LDAR LDAPR ISB DSB DMB CSNEG CSINV CSINC CSEL CODEVAR CMP CBZ CBNZ BNE BEQ B
first(instr_option_seq) = SXTW STXR STRH STRB STR STP STNP STLXR STLR SEMI OP NAME MOV LDXR LDRH LDRB LDR LDP LDNP LDAXR LDAR LDAPR ISB DSB DMB CSNEG CSINV CSINC CSEL CODEVAR CMP CBZ CBNZ BNE BEQ B
first(instr_option_list) = SXTW STXR STRH STRB STR STP STNP STLXR STLR PIPE OP NAME MOV LDXR LDRH LDRB LDR LDP LDNP LDAXR LDAR LDAPR ISB DSB DMB CSNEG CSINV CSINC CSEL CODEVAR CMP CBZ CBNZ BNE BEQ B
first(instr_option) = SXTW STXR STRH STRB STR STP STNP STLXR STLR OP NAME MOV LDXR LDRH LDRB LDR LDP LDNP LDAXR LDAR LDAPR ISB DSB DMB CSNEG CSINV CSINC CSEL CODEVAR CMP CBZ CBNZ BNE BEQ B
first(instr) = SXTW STXR STRH STRB STR STP STNP STLXR STLR OP MOV LDXR LDRH LDRB LDR LDP LDNP LDAXR LDAR LDAPR ISB DSB DMB CSNEG CSINV CSINC CSEL CMP CBZ CBNZ BNE BEQ B
first(fenceopt) = SY ST OSHST OSHLD OSH NSHST NSHLD NSH LD ISHST ISHLD ISH
first(cond) = NE EQ
minimal(xreg) = (* 1 *) SYMB_XREG
minimal(wreg) = (* 1 *) SYMB_WREG
minimal(stp_instr) = (* 1 *) STP
minimal(semi_opt) = (* 0 *) 
minimal(reg) = (* 1 *) SYMB_XREG
minimal(proc_list) = (* 2 *) PROC SEMI
minimal(main) = (* 4 *) PROC SEMI SEMI EOF
minimal(ldp_instr) = (* 1 *) LDP
minimal(kwr) = (* 1 *) NUM
minimal(kr0) = (* 0 *) 
minimal(kr) = (* 1 *) NUM
minimal(k) = (* 1 *) NUM
minimal(iol_list) = (* 1 *) SEMI
minimal(instr_option_seq) = (* 0 *) 
minimal(instr_option_list) = (* 0 *) 
minimal(instr_option) = (* 0 *) 
minimal(instr) = (* 1 *) ISB
minimal(fenceopt) = (* 1 *) SY
minimal(cond) = (* 1 *) EQ
follow(xreg) = SEMI RBRK PIPE COMMA #
follow(wreg) = SEMI PIPE COMMA #
follow(stp_instr) = SYMB_XREG SYMB_WREG ARCH_XREG ARCH_WREG
follow(semi_opt) = PROC
follow(reg) = COMMA
follow(proc_list) = SXTW STXR STRH STRB STR STP STNP STLXR STLR SEMI PIPE OP NAME MOV LDXR LDRH LDRB LDR LDP LDNP LDAXR LDAR LDAPR ISB DSB DMB CSNEG CSINV CSINC CSEL CODEVAR CMP CBZ CBNZ BNE BEQ B
follow(main) = #
follow(ldp_instr) = SYMB_XREG SYMB_WREG ARCH_XREG ARCH_WREG
follow(kwr) = SEMI PIPE #
follow(kr0) = RBRK
follow(kr) = SEMI RBRK PIPE #
follow(k) = SEMI RBRK PIPE #
follow(iol_list) = EOF
follow(instr_option_seq) = #
follow(instr_option_list) = SEMI
follow(instr_option) = SEMI PIPE #
follow(instr) = SEMI PIPE #
follow(fenceopt) = SEMI PIPE #
follow(cond) = SEMI PIPE #
Built an LR(0) automaton with 294 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 294 states.
File "herdtools7.7.51-AArch64Parser.mly", line 52, characters 0-9:
Warning: the precedence level assigned to SEMI is never useful.
Warning: 72 end-of-stream conflicts were arbitrarily resolved.
File "herdtools7.7.51-AArch64Parser.mly", line 79, characters 4-16:
Warning: production instr_option_seq -> instr_option is never reduced.
Warning: in total, 1 production is never reduced.
86 out of 294 states have a default reduction.
102 out of 294 states are represented.
0 out of 86 symbols keep track of their start position.
0 out of 86 symbols keep track of their end position.
80 out of 92 productions exploit shiftreduce optimization.
0 out of 294 states can peek at an error.
705 functions before inlining, 86 functions after inlining.
