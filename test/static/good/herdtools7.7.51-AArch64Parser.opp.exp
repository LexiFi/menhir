%{
(****************************************************************************)
(*                           the diy toolsuite                              *)
(*                                                                          *)
(* Jade Alglave, University College London, UK.                             *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                          *)
(*                                                                          *)
(* Copyright 2015-present Institut National de Recherche en Informatique et *)
(* en Automatique and the authors. All rights reserved.                     *)
(*                                                                          *)
(* This software is governed by the CeCILL-B license under French law and   *)
(* abiding by the rules of distribution of free software. You can use,      *)
(* modify and/ or redistribute the software under the terms of the CeCILL-B *)
(* license as circulated by CEA, CNRS and INRIA at the following URL        *)
(* "http://www.cecill.info". We also give a copy in LICENSE.txt.            *)
(****************************************************************************)


open AArch64Base
%}
%start instr_option_seq
%start main
%token <AArch64Base.reg> ARCH_WREG
%token <AArch64Base.reg> ARCH_XREG
%token B
%token BEQ
%token BNE
%token CBNZ
%token CBZ
%token CMP
%token <string> CODEVAR
%token COLON
%token COMMA
%token CSEL
%token CSINC
%token CSINV
%token CSNEG
%token DMB
%token DSB
%token EOF
%token EQ
%token ISB
%token ISH
%token ISHLD
%token ISHST
%token LBRK
%token LD
%token LDAPR
%token LDAR
%token LDAXR
%token LDNP
%token LDP
%token LDR
%token LDRB
%token LDRH
%token LDXR
%token <string> META
%token MOV
%token <string> NAME
%token NE
%token NSH
%token NSHLD
%token NSHST
%token <int> NUM
%token <AArch64Base.op> OP
%token OSH
%token OSHLD
%token OSHST
%token PIPE
%token <int> PROC
%token RBRK
%token SEMI
%token ST
%token STLR
%token STLXR
%token STNP
%token STP
%token STR
%token STRB
%token STRH
%token STXR
%token SXTW
%token SY
%token <string> SYMB_WREG
%token <string> SYMB_XREG
%nonassoc SEMI
%type <AArch64Base.parsedPseudo list> instr_option_seq
%type <int list * (AArch64Base.parsedPseudo) list list> main
%%

main:
  _1 = semi_opt _2 = proc_list _3 = iol_list _4 = EOF
    {                                  ( _2,_3 )}

semi_opt:
  
    {  ( () )}
| _1 = SEMI
    {       ( () )}

proc_list:
  _1 = PROC _2 = SEMI
    {    ([_1])}
| _1 = PROC _2 = PIPE _3 = proc_list
    {                       ( _1::_3 )}

iol_list:
  _1 = instr_option_list _2 = SEMI
    {    ([_1])}
| _1 = instr_option_list _2 = SEMI _3 = iol_list
    {                                   (_1::_3)}

instr_option_list:
  _1 = instr_option
    {      ([_1])}
| _1 = instr_option _2 = PIPE _3 = instr_option_list
    {      (_1::_3)}

instr_option_seq:
  _1 = instr_option
    {      ([_1])}
| _1 = instr_option _2 = SEMI _3 = instr_option_seq
    {      (_1::_3)}

instr_option:
  
    {             ( Nop )}
| _1 = NAME _2 = COLON _3 = instr_option
    {                          ( Label (_1,_3) )}
| _1 = CODEVAR
    {             ( Symbolic _1 )}
| _1 = instr
    {             ( Instruction _1)}

reg:
  _1 = SYMB_XREG
    {            ( V64,Symbolic_reg _1 )}
| _1 = ARCH_XREG
    {            ( V64,_1 )}
| _1 = SYMB_WREG
    {            ( V32,Symbolic_reg _1 )}
| _1 = ARCH_WREG
    {            ( V32,_1 )}

xreg:
  _1 = SYMB_XREG
    {            ( Symbolic_reg _1 )}
| _1 = ARCH_XREG
    {            ( _1 )}

wreg:
  _1 = SYMB_WREG
    {            ( Symbolic_reg _1 )}
| _1 = ARCH_WREG
    {            ( _1 )}

k:
  _1 = NUM
    {       ( MetaConst.Int _1 )}
| _1 = META
    {       ( MetaConst.Meta _1 )}

kr:
  _1 = k
    {    ( K _1 )}
| _1 = xreg
    {       ( RV (V64,_1) )}
| _1 = wreg _2 = COMMA _3 = SXTW
    {                  ( RV (V32,_1) )}

kr0:
  
    {  ( K (MetaConst.zero) )}
| _1 = COMMA _2 = kr
    {           ( _2 )}

kwr:
  _1 = k
    {    ( K _1 )}
| _1 = wreg
    {       ( RV (V32,_1) )}

ldp_instr:
  _1 = LDP
    {  ( (fun v r1 r2 r3 kr -> I_LDP (TT,v,r1,r2,r3,kr)) )}
| _1 = LDNP
    {  ( (fun v r1 r2 r3 kr -> I_LDP (NT,v,r1,r2,r3,kr)) )}

stp_instr:
  _1 = STP
    {  ( (fun v r1 r2 r3 kr -> I_STP (TT,v,r1,r2,r3,kr)) )}
| _1 = STNP
    {  ( (fun v r1 r2 r3 kr -> I_STP (NT,v,r1,r2,r3,kr)) )}

cond:
  _1 = EQ
    {     ( EQ )}
| _1 = NE
    {     ( NE )}

instr:
  _1 = B _2 = NAME
    {         ( I_B _2 )}
| _1 = BEQ _2 = NAME
    {           ( I_BC (EQ,_2) )}
| _1 = BNE _2 = NAME
    {           ( I_BC (NE,_2) )}
| _1 = CBZ _2 = reg _3 = COMMA _4 = NAME
    {                       ( let v,r = _2 in I_CBZ (v,r,_4) )}
| _1 = CBNZ _2 = reg _3 = COMMA _4 = NAME
    {                       ( let v,r = _2 in I_CBNZ (v,r,_4) )}
| _1 = LDR _2 = reg _3 = COMMA _4 = LBRK _5 = xreg _6 = kr0 _7 = RBRK
    {  ( let v,r = _2 in I_LDR (v,r,_5,_6) )}
| _1 = ldp_instr _2 = wreg _3 = COMMA _4 = wreg _5 = COMMA _6 = LBRK _7 = xreg _8 = kr0 _9 = RBRK
    {  ( _1 V32 _2 _4 _7 _8 )}
| _1 = ldp_instr _2 = xreg _3 = COMMA _4 = xreg _5 = COMMA _6 = LBRK _7 = xreg _8 = kr0 _9 = RBRK
    {  ( _1 V64 _2 _4 _7 _8 )}
| _1 = stp_instr _2 = wreg _3 = COMMA _4 = wreg _5 = COMMA _6 = LBRK _7 = xreg _8 = kr0 _9 = RBRK
    {  ( _1 V32 _2 _4 _7 _8 )}
| _1 = stp_instr _2 = xreg _3 = COMMA _4 = xreg _5 = COMMA _6 = LBRK _7 = xreg _8 = kr0 _9 = RBRK
    {  ( _1 V64 _2 _4 _7 _8 )}
| _1 = LDRB _2 = wreg _3 = COMMA _4 = LBRK _5 = xreg _6 = kr0 _7 = RBRK
    {  ( I_LDRBH (B,_2,_5,_6) )}
| _1 = LDRH _2 = wreg _3 = COMMA _4 = LBRK _5 = xreg _6 = kr0 _7 = RBRK
    {  ( I_LDRBH (H,_2,_5,_6) )}
| _1 = LDAR _2 = reg _3 = COMMA _4 = LBRK _5 = xreg _6 = RBRK
    {  ( let v,r = _2 in I_LDAR (v,AA,r,_5) )}
| _1 = LDXR _2 = reg _3 = COMMA _4 = LBRK _5 = xreg _6 = RBRK
    {  ( let v,r = _2 in I_LDAR (v,XX,r,_5) )}
| _1 = LDAXR _2 = reg _3 = COMMA _4 = LBRK _5 = xreg _6 = RBRK
    {  ( let v,r = _2 in I_LDAR (v,AX,r,_5) )}
| _1 = LDAPR _2 = reg _3 = COMMA _4 = LBRK _5 = xreg _6 = RBRK
    {  ( let v,r = _2 in I_LDAR (v,AQ,r,_5) )}
| _1 = STR _2 = reg _3 = COMMA _4 = LBRK _5 = xreg _6 = kr0 _7 = RBRK
    {  ( let v,r = _2 in I_STR (v,r,_5,_6) )}
| _1 = STRB _2 = wreg _3 = COMMA _4 = LBRK _5 = xreg _6 = kr0 _7 = RBRK
    {  ( I_STRBH (B,_2,_5,_6) )}
| _1 = STRH _2 = wreg _3 = COMMA _4 = LBRK _5 = xreg _6 = kr0 _7 = RBRK
    {  ( I_STRBH (H,_2,_5,_6) )}
| _1 = STLR _2 = reg _3 = COMMA _4 = LBRK _5 = xreg _6 = RBRK
    {  ( let v,r = _2 in I_STLR (v,r,_5) )}
| _1 = STXR _2 = wreg _3 = COMMA _4 = reg _5 = COMMA _6 = LBRK _7 = xreg _8 = RBRK
    {  ( let v,r = _4 in I_STXR (v,YY,_2,r,_7) )}
| _1 = STLXR _2 = wreg _3 = COMMA _4 = reg _5 = COMMA _6 = LBRK _7 = xreg _8 = RBRK
    {  ( let v,r = _4 in I_STXR (v,LY,_2,r,_7) )}
| _1 = MOV _2 = xreg _3 = COMMA _4 = kr
    {  ( I_MOV (V64,_2,_4) )}
| _1 = MOV _2 = wreg _3 = COMMA _4 = kwr
    {  ( I_MOV (V32,_2,_4) )}
| _1 = SXTW _2 = xreg _3 = COMMA _4 = wreg
    {  ( I_SXTW (_2,_4) )}
| _1 = OP _2 = xreg _3 = COMMA _4 = xreg _5 = COMMA _6 = kr
    {  ( I_OP3 (V64,_1,_2,_4,_6) )}
| _1 = OP _2 = wreg _3 = COMMA _4 = wreg _5 = COMMA _6 = kwr
    {    ( I_OP3 (V32,_1,_2,_4,_6) )}
| _1 = CMP _2 = wreg _3 = COMMA _4 = kwr
    {  ( I_OP3 (V32,SUBS,ZR,_2,_4) )}
| _1 = CMP _2 = xreg _3 = COMMA _4 = kr
    {  ( I_OP3 (V64,SUBS,ZR,_2,_4) )}
| _1 = CSEL _2 = xreg _3 = COMMA _4 = xreg _5 = COMMA _6 = xreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V64,_2,_4,_6,_8,Cpy) )}
| _1 = CSEL _2 = wreg _3 = COMMA _4 = wreg _5 = COMMA _6 = wreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V32,_2,_4,_6,_8,Cpy) )}
| _1 = CSINC _2 = xreg _3 = COMMA _4 = xreg _5 = COMMA _6 = xreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V64,_2,_4,_6,_8,Inc) )}
| _1 = CSINC _2 = wreg _3 = COMMA _4 = wreg _5 = COMMA _6 = wreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V32,_2,_4,_6,_8,Inc) )}
| _1 = CSINV _2 = xreg _3 = COMMA _4 = xreg _5 = COMMA _6 = xreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V64,_2,_4,_6,_8,Inv) )}
| _1 = CSINV _2 = wreg _3 = COMMA _4 = wreg _5 = COMMA _6 = wreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V32,_2,_4,_6,_8,Inv) )}
| _1 = CSNEG _2 = xreg _3 = COMMA _4 = xreg _5 = COMMA _6 = xreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V64,_2,_4,_6,_8,Neg) )}
| _1 = CSNEG _2 = wreg _3 = COMMA _4 = wreg _5 = COMMA _6 = wreg _7 = COMMA _8 = cond
    {  ( I_CSEL (V32,_2,_4,_6,_8,Neg) )}
| _1 = DMB _2 = fenceopt
    {  ( let d,t = _2 in I_FENCE (DMB (d,t)) )}
| _1 = DSB _2 = fenceopt
    {  ( let d,t = _2 in I_FENCE (DSB (d,t)) )}
| _1 = ISB
    {  ( I_FENCE ISB )}

fenceopt:
  _1 = SY
    {  ( SY,FULL )}
| _1 = ST
    {  ( SY,ST )}
| _1 = LD
    {  ( SY,LD )}
| _1 = OSH
    {  ( OSH,FULL )}
| _1 = OSHST
    {  ( OSH,ST )}
| _1 = OSHLD
    {  ( OSH,LD )}
| _1 = ISH
    {  ( ISH,FULL )}
| _1 = ISHST
    {  ( ISH,ST )}
| _1 = ISHLD
    {  ( ISH,LD )}
| _1 = NSH
    {  ( NSH,FULL )}
| _1 = NSHST
    {  ( NSH,ST )}
| _1 = NSHLD
    {  ( NSH,LD)}

%%
