State 0:
instr_option_seq' -> . instr_option_seq [ # ]
-- On NAME shift to state 1
-- On I_XORS shift to state 3
-- On I_XOR shift to state 11
-- On I_STRNE shift to state 17
-- On I_STREX shift to state 27
-- On I_STREQ shift to state 35
-- On I_STR shift to state 45
-- On I_MOVNE shift to state 55
-- On I_MOVEQ shift to state 62
-- On I_MOV shift to state 67
-- On I_LDRNE shift to state 72
-- On I_LDREX shift to state 82
-- On I_LDREQ shift to state 89
-- On I_LDR shift to state 99
-- On I_ISB shift to state 109
-- On I_DSB shift to state 110
-- On I_DMB shift to state 120
-- On I_CMP shift to state 122
-- On I_CBZ shift to state 127
-- On I_CBNZ shift to state 131
-- On I_BNE shift to state 135
-- On I_BEQ shift to state 137
-- On I_B shift to state 139
-- On I_ANDS shift to state 141
-- On I_AND shift to state 147
-- On I_ADDS shift to state 153
-- On I_ADD shift to state 160
-- On CODEVAR shift to state 167
-- On instr_option_seq shift to state 170
-- On instr_option shift to state 171
-- On instr shift to state 169
-- On SEMI reduce production instr_option -> 
-- On # reduce production instr_option -> 
** End-of-stream conflict on SEMI NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR
**   There is a tension between
**   (1) reducing production instr_option -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
instr_option -> NAME . COLON instr_option [ SEMI PIPE # ]
-- On COLON shift to state 2

State 2:
instr_option -> NAME COLON . instr_option [ SEMI PIPE # ]
-- On NAME shift to state 1
-- On I_XORS shift to state 3
-- On I_XOR shift to state 11
-- On I_STRNE shift to state 17
-- On I_STREX shift to state 27
-- On I_STREQ shift to state 35
-- On I_STR shift to state 45
-- On I_MOVNE shift to state 55
-- On I_MOVEQ shift to state 62
-- On I_MOV shift to state 67
-- On I_LDRNE shift to state 72
-- On I_LDREX shift to state 82
-- On I_LDREQ shift to state 89
-- On I_LDR shift to state 99
-- On I_ISB shift to state 109
-- On I_DSB shift to state 110
-- On I_DMB shift to state 120
-- On I_CMP shift to state 122
-- On I_CBZ shift to state 127
-- On I_CBNZ shift to state 131
-- On I_BNE shift to state 135
-- On I_BEQ shift to state 137
-- On I_B shift to state 139
-- On I_ANDS shift to state 141
-- On I_AND shift to state 147
-- On I_ADDS shift to state 153
-- On I_ADD shift to state 160
-- On CODEVAR shift to state 167
-- On instr_option shift to state 168
-- On instr shift to state 169
-- On SEMI reduce production instr_option -> 
-- On PIPE reduce production instr_option -> 
-- On # reduce production instr_option -> 
** End-of-stream conflict on SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR
**   There is a tension between
**   (1) reducing production instr_option -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 3:
instr -> I_XORS . reg COMMA reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 6

State 4:
reg -> SYMB_REG . [ SEMI RBRK PIPE COMMA # ]
-- On SEMI reduce production reg -> SYMB_REG
-- On RBRK reduce production reg -> SYMB_REG
-- On PIPE reduce production reg -> SYMB_REG
-- On COMMA reduce production reg -> SYMB_REG
-- On # reduce production reg -> SYMB_REG
** End-of-stream conflict on SEMI RBRK PIPE COMMA
**   There is a tension between
**   (1) reducing production reg -> SYMB_REG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 5:
reg -> ARCH_REG . [ SEMI RBRK PIPE COMMA # ]
-- On SEMI reduce production reg -> ARCH_REG
-- On RBRK reduce production reg -> ARCH_REG
-- On PIPE reduce production reg -> ARCH_REG
-- On COMMA reduce production reg -> ARCH_REG
-- On # reduce production reg -> ARCH_REG
** End-of-stream conflict on SEMI RBRK PIPE COMMA
**   There is a tension between
**   (1) reducing production reg -> ARCH_REG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 6:
instr -> I_XORS reg . COMMA reg COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 7

State 7:
instr -> I_XORS reg COMMA . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 8

State 8:
instr -> I_XORS reg COMMA reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 9

State 9:
instr -> I_XORS reg COMMA reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 10

State 10:
instr -> I_XORS reg COMMA reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_XORS reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> I_XORS reg COMMA reg COMMA reg
-- On # reduce production instr -> I_XORS reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_XORS reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
instr -> I_XOR . reg COMMA reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 12

State 12:
instr -> I_XOR reg . COMMA reg COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 13

State 13:
instr -> I_XOR reg COMMA . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 14

State 14:
instr -> I_XOR reg COMMA reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 15

State 15:
instr -> I_XOR reg COMMA reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 16

State 16:
instr -> I_XOR reg COMMA reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_XOR reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> I_XOR reg COMMA reg COMMA reg
-- On # reduce production instr -> I_XOR reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_XOR reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 17:
instr -> I_STRNE . reg COMMA reg [ SEMI PIPE # ]
instr -> I_STRNE . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STRNE . reg COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 18

State 18:
instr -> I_STRNE reg . COMMA reg [ SEMI PIPE # ]
instr -> I_STRNE reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STRNE reg . COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 19

State 19:
instr -> I_STRNE reg COMMA . reg [ SEMI PIPE # ]
instr -> I_STRNE reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STRNE reg COMMA . LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On LBRK shift to state 20
-- On ARCH_REG shift to state 5
-- On reg shift to state 26

State 20:
instr -> I_STRNE reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
instr -> I_STRNE reg COMMA LBRK . reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 21

State 21:
instr -> I_STRNE reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
instr -> I_STRNE reg COMMA LBRK reg . COMMA reg RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 22
-- On COMMA shift to state 23

State 22:
instr -> I_STRNE reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STRNE reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_STRNE reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_STRNE reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STRNE reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
instr -> I_STRNE reg COMMA LBRK reg COMMA . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 24

State 24:
instr -> I_STRNE reg COMMA LBRK reg COMMA reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 25

State 25:
instr -> I_STRNE reg COMMA LBRK reg COMMA reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STRNE reg COMMA LBRK reg COMMA reg RBRK
-- On PIPE reduce production instr -> I_STRNE reg COMMA LBRK reg COMMA reg RBRK
-- On # reduce production instr -> I_STRNE reg COMMA LBRK reg COMMA reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STRNE reg COMMA LBRK reg COMMA reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
instr -> I_STRNE reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STRNE reg COMMA reg
-- On PIPE reduce production instr -> I_STRNE reg COMMA reg
-- On # reduce production instr -> I_STRNE reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STRNE reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 27:
instr -> I_STREX . reg COMMA reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 28

State 28:
instr -> I_STREX reg . COMMA reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 29

State 29:
instr -> I_STREX reg COMMA . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 30

State 30:
instr -> I_STREX reg COMMA reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 31

State 31:
instr -> I_STREX reg COMMA reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
-- On LBRK shift to state 32

State 32:
instr -> I_STREX reg COMMA reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 33

State 33:
instr -> I_STREX reg COMMA reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 34

State 34:
instr -> I_STREX reg COMMA reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STREX reg COMMA reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_STREX reg COMMA reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_STREX reg COMMA reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STREX reg COMMA reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 35:
instr -> I_STREQ . reg COMMA reg [ SEMI PIPE # ]
instr -> I_STREQ . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STREQ . reg COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 36

State 36:
instr -> I_STREQ reg . COMMA reg [ SEMI PIPE # ]
instr -> I_STREQ reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STREQ reg . COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 37

State 37:
instr -> I_STREQ reg COMMA . reg [ SEMI PIPE # ]
instr -> I_STREQ reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STREQ reg COMMA . LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On LBRK shift to state 38
-- On ARCH_REG shift to state 5
-- On reg shift to state 44

State 38:
instr -> I_STREQ reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
instr -> I_STREQ reg COMMA LBRK . reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 39

State 39:
instr -> I_STREQ reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
instr -> I_STREQ reg COMMA LBRK reg . COMMA reg RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 40
-- On COMMA shift to state 41

State 40:
instr -> I_STREQ reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STREQ reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_STREQ reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_STREQ reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STREQ reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 41:
instr -> I_STREQ reg COMMA LBRK reg COMMA . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 42

State 42:
instr -> I_STREQ reg COMMA LBRK reg COMMA reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 43

State 43:
instr -> I_STREQ reg COMMA LBRK reg COMMA reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STREQ reg COMMA LBRK reg COMMA reg RBRK
-- On PIPE reduce production instr -> I_STREQ reg COMMA LBRK reg COMMA reg RBRK
-- On # reduce production instr -> I_STREQ reg COMMA LBRK reg COMMA reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STREQ reg COMMA LBRK reg COMMA reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 44:
instr -> I_STREQ reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STREQ reg COMMA reg
-- On PIPE reduce production instr -> I_STREQ reg COMMA reg
-- On # reduce production instr -> I_STREQ reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STREQ reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 45:
instr -> I_STR . reg COMMA reg [ SEMI PIPE # ]
instr -> I_STR . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STR . reg COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 46

State 46:
instr -> I_STR reg . COMMA reg [ SEMI PIPE # ]
instr -> I_STR reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STR reg . COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 47

State 47:
instr -> I_STR reg COMMA . reg [ SEMI PIPE # ]
instr -> I_STR reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_STR reg COMMA . LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On LBRK shift to state 48
-- On ARCH_REG shift to state 5
-- On reg shift to state 54

State 48:
instr -> I_STR reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
instr -> I_STR reg COMMA LBRK . reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 49

State 49:
instr -> I_STR reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
instr -> I_STR reg COMMA LBRK reg . COMMA reg RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 50
-- On COMMA shift to state 51

State 50:
instr -> I_STR reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STR reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_STR reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_STR reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STR reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 51:
instr -> I_STR reg COMMA LBRK reg COMMA . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 52

State 52:
instr -> I_STR reg COMMA LBRK reg COMMA reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 53

State 53:
instr -> I_STR reg COMMA LBRK reg COMMA reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STR reg COMMA LBRK reg COMMA reg RBRK
-- On PIPE reduce production instr -> I_STR reg COMMA LBRK reg COMMA reg RBRK
-- On # reduce production instr -> I_STR reg COMMA LBRK reg COMMA reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STR reg COMMA LBRK reg COMMA reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 54:
instr -> I_STR reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_STR reg COMMA reg
-- On PIPE reduce production instr -> I_STR reg COMMA reg
-- On # reduce production instr -> I_STR reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_STR reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 55:
instr -> I_MOVNE . reg COMMA k [ SEMI PIPE # ]
instr -> I_MOVNE . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 56

State 56:
instr -> I_MOVNE reg . COMMA k [ SEMI PIPE # ]
instr -> I_MOVNE reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 57

State 57:
instr -> I_MOVNE reg COMMA . k [ SEMI PIPE # ]
instr -> I_MOVNE reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On NUM shift to state 58
-- On META shift to state 59
-- On ARCH_REG shift to state 5
-- On reg shift to state 60
-- On k shift to state 61

State 58:
k -> NUM . [ SEMI PIPE # ]
-- On SEMI reduce production k -> NUM
-- On PIPE reduce production k -> NUM
-- On # reduce production k -> NUM
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production k -> NUM
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 59:
k -> META . [ SEMI PIPE # ]
-- On SEMI reduce production k -> META
-- On PIPE reduce production k -> META
-- On # reduce production k -> META
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production k -> META
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 60:
instr -> I_MOVNE reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_MOVNE reg COMMA reg
-- On PIPE reduce production instr -> I_MOVNE reg COMMA reg
-- On # reduce production instr -> I_MOVNE reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_MOVNE reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 61:
instr -> I_MOVNE reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_MOVNE reg COMMA k
-- On PIPE reduce production instr -> I_MOVNE reg COMMA k
-- On # reduce production instr -> I_MOVNE reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_MOVNE reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 62:
instr -> I_MOVEQ . reg COMMA k [ SEMI PIPE # ]
instr -> I_MOVEQ . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 63

State 63:
instr -> I_MOVEQ reg . COMMA k [ SEMI PIPE # ]
instr -> I_MOVEQ reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 64

State 64:
instr -> I_MOVEQ reg COMMA . k [ SEMI PIPE # ]
instr -> I_MOVEQ reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On NUM shift to state 58
-- On META shift to state 59
-- On ARCH_REG shift to state 5
-- On reg shift to state 65
-- On k shift to state 66

State 65:
instr -> I_MOVEQ reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_MOVEQ reg COMMA reg
-- On PIPE reduce production instr -> I_MOVEQ reg COMMA reg
-- On # reduce production instr -> I_MOVEQ reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_MOVEQ reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 66:
instr -> I_MOVEQ reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_MOVEQ reg COMMA k
-- On PIPE reduce production instr -> I_MOVEQ reg COMMA k
-- On # reduce production instr -> I_MOVEQ reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_MOVEQ reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 67:
instr -> I_MOV . reg COMMA k [ SEMI PIPE # ]
instr -> I_MOV . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 68

State 68:
instr -> I_MOV reg . COMMA k [ SEMI PIPE # ]
instr -> I_MOV reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 69

State 69:
instr -> I_MOV reg COMMA . k [ SEMI PIPE # ]
instr -> I_MOV reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On NUM shift to state 58
-- On META shift to state 59
-- On ARCH_REG shift to state 5
-- On reg shift to state 70
-- On k shift to state 71

State 70:
instr -> I_MOV reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_MOV reg COMMA reg
-- On PIPE reduce production instr -> I_MOV reg COMMA reg
-- On # reduce production instr -> I_MOV reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_MOV reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 71:
instr -> I_MOV reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_MOV reg COMMA k
-- On PIPE reduce production instr -> I_MOV reg COMMA k
-- On # reduce production instr -> I_MOV reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_MOV reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 72:
instr -> I_LDRNE . reg COMMA reg [ SEMI PIPE # ]
instr -> I_LDRNE . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDRNE . reg COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 73

State 73:
instr -> I_LDRNE reg . COMMA reg [ SEMI PIPE # ]
instr -> I_LDRNE reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDRNE reg . COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 74

State 74:
instr -> I_LDRNE reg COMMA . reg [ SEMI PIPE # ]
instr -> I_LDRNE reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDRNE reg COMMA . LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On LBRK shift to state 75
-- On ARCH_REG shift to state 5
-- On reg shift to state 81

State 75:
instr -> I_LDRNE reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
instr -> I_LDRNE reg COMMA LBRK . reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 76

State 76:
instr -> I_LDRNE reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
instr -> I_LDRNE reg COMMA LBRK reg . COMMA reg RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 77
-- On COMMA shift to state 78

State 77:
instr -> I_LDRNE reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDRNE reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_LDRNE reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_LDRNE reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDRNE reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 78:
instr -> I_LDRNE reg COMMA LBRK reg COMMA . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 79

State 79:
instr -> I_LDRNE reg COMMA LBRK reg COMMA reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 80

State 80:
instr -> I_LDRNE reg COMMA LBRK reg COMMA reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDRNE reg COMMA LBRK reg COMMA reg RBRK
-- On PIPE reduce production instr -> I_LDRNE reg COMMA LBRK reg COMMA reg RBRK
-- On # reduce production instr -> I_LDRNE reg COMMA LBRK reg COMMA reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDRNE reg COMMA LBRK reg COMMA reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 81:
instr -> I_LDRNE reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDRNE reg COMMA reg
-- On PIPE reduce production instr -> I_LDRNE reg COMMA reg
-- On # reduce production instr -> I_LDRNE reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDRNE reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 82:
instr -> I_LDREX . reg COMMA reg [ SEMI PIPE # ]
instr -> I_LDREX . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 83

State 83:
instr -> I_LDREX reg . COMMA reg [ SEMI PIPE # ]
instr -> I_LDREX reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 84

State 84:
instr -> I_LDREX reg COMMA . reg [ SEMI PIPE # ]
instr -> I_LDREX reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On LBRK shift to state 85
-- On ARCH_REG shift to state 5
-- On reg shift to state 88

State 85:
instr -> I_LDREX reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 86

State 86:
instr -> I_LDREX reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 87

State 87:
instr -> I_LDREX reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDREX reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_LDREX reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_LDREX reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDREX reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 88:
instr -> I_LDREX reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDREX reg COMMA reg
-- On PIPE reduce production instr -> I_LDREX reg COMMA reg
-- On # reduce production instr -> I_LDREX reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDREX reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 89:
instr -> I_LDREQ . reg COMMA reg [ SEMI PIPE # ]
instr -> I_LDREQ . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDREQ . reg COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 90

State 90:
instr -> I_LDREQ reg . COMMA reg [ SEMI PIPE # ]
instr -> I_LDREQ reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDREQ reg . COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 91

State 91:
instr -> I_LDREQ reg COMMA . reg [ SEMI PIPE # ]
instr -> I_LDREQ reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDREQ reg COMMA . LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On LBRK shift to state 92
-- On ARCH_REG shift to state 5
-- On reg shift to state 98

State 92:
instr -> I_LDREQ reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
instr -> I_LDREQ reg COMMA LBRK . reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 93

State 93:
instr -> I_LDREQ reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
instr -> I_LDREQ reg COMMA LBRK reg . COMMA reg RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 94
-- On COMMA shift to state 95

State 94:
instr -> I_LDREQ reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDREQ reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_LDREQ reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_LDREQ reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDREQ reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 95:
instr -> I_LDREQ reg COMMA LBRK reg COMMA . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 96

State 96:
instr -> I_LDREQ reg COMMA LBRK reg COMMA reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 97

State 97:
instr -> I_LDREQ reg COMMA LBRK reg COMMA reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDREQ reg COMMA LBRK reg COMMA reg RBRK
-- On PIPE reduce production instr -> I_LDREQ reg COMMA LBRK reg COMMA reg RBRK
-- On # reduce production instr -> I_LDREQ reg COMMA LBRK reg COMMA reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDREQ reg COMMA LBRK reg COMMA reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 98:
instr -> I_LDREQ reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDREQ reg COMMA reg
-- On PIPE reduce production instr -> I_LDREQ reg COMMA reg
-- On # reduce production instr -> I_LDREQ reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDREQ reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 99:
instr -> I_LDR . reg COMMA reg [ SEMI PIPE # ]
instr -> I_LDR . reg COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDR . reg COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 100

State 100:
instr -> I_LDR reg . COMMA reg [ SEMI PIPE # ]
instr -> I_LDR reg . COMMA LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDR reg . COMMA LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On COMMA shift to state 101

State 101:
instr -> I_LDR reg COMMA . reg [ SEMI PIPE # ]
instr -> I_LDR reg COMMA . LBRK reg RBRK [ SEMI PIPE # ]
instr -> I_LDR reg COMMA . LBRK reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On LBRK shift to state 102
-- On ARCH_REG shift to state 5
-- On reg shift to state 108

State 102:
instr -> I_LDR reg COMMA LBRK . reg RBRK [ SEMI PIPE # ]
instr -> I_LDR reg COMMA LBRK . reg COMMA reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 103

State 103:
instr -> I_LDR reg COMMA LBRK reg . RBRK [ SEMI PIPE # ]
instr -> I_LDR reg COMMA LBRK reg . COMMA reg RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 104
-- On COMMA shift to state 105

State 104:
instr -> I_LDR reg COMMA LBRK reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDR reg COMMA LBRK reg RBRK
-- On PIPE reduce production instr -> I_LDR reg COMMA LBRK reg RBRK
-- On # reduce production instr -> I_LDR reg COMMA LBRK reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDR reg COMMA LBRK reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 105:
instr -> I_LDR reg COMMA LBRK reg COMMA . reg RBRK [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 106

State 106:
instr -> I_LDR reg COMMA LBRK reg COMMA reg . RBRK [ SEMI PIPE # ]
-- On RBRK shift to state 107

State 107:
instr -> I_LDR reg COMMA LBRK reg COMMA reg RBRK . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDR reg COMMA LBRK reg COMMA reg RBRK
-- On PIPE reduce production instr -> I_LDR reg COMMA LBRK reg COMMA reg RBRK
-- On # reduce production instr -> I_LDR reg COMMA LBRK reg COMMA reg RBRK
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDR reg COMMA LBRK reg COMMA reg RBRK
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 108:
instr -> I_LDR reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_LDR reg COMMA reg
-- On PIPE reduce production instr -> I_LDR reg COMMA reg
-- On # reduce production instr -> I_LDR reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_LDR reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 109:
instr -> I_ISB . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_ISB
-- On PIPE reduce production instr -> I_ISB
-- On # reduce production instr -> I_ISB
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_ISB
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 110:
instr -> I_DSB . opt [ SEMI PIPE # ]
instr -> I_DSB . [ SEMI PIPE # ]
-- On I_SY shift to state 111
-- On I_ST shift to state 112
-- On I_OSHST shift to state 113
-- On I_OSH shift to state 114
-- On I_NSHST shift to state 115
-- On I_NSH shift to state 116
-- On I_ISHST shift to state 117
-- On I_ISH shift to state 118
-- On opt shift to state 119
-- On SEMI reduce production instr -> I_DSB
-- On PIPE reduce production instr -> I_DSB
-- On # reduce production instr -> I_DSB
** End-of-stream conflict on SEMI PIPE I_SY I_ST I_OSHST I_OSH I_NSHST I_NSH I_ISHST I_ISH
**   There is a tension between
**   (1) reducing production instr -> I_DSB
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 111:
opt -> I_SY . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_SY
-- On PIPE reduce production opt -> I_SY
-- On # reduce production opt -> I_SY
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_SY
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 112:
opt -> I_ST . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_ST
-- On PIPE reduce production opt -> I_ST
-- On # reduce production opt -> I_ST
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_ST
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 113:
opt -> I_OSHST . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_OSHST
-- On PIPE reduce production opt -> I_OSHST
-- On # reduce production opt -> I_OSHST
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_OSHST
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 114:
opt -> I_OSH . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_OSH
-- On PIPE reduce production opt -> I_OSH
-- On # reduce production opt -> I_OSH
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_OSH
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 115:
opt -> I_NSHST . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_NSHST
-- On PIPE reduce production opt -> I_NSHST
-- On # reduce production opt -> I_NSHST
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_NSHST
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 116:
opt -> I_NSH . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_NSH
-- On PIPE reduce production opt -> I_NSH
-- On # reduce production opt -> I_NSH
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_NSH
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 117:
opt -> I_ISHST . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_ISHST
-- On PIPE reduce production opt -> I_ISHST
-- On # reduce production opt -> I_ISHST
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_ISHST
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 118:
opt -> I_ISH . [ SEMI PIPE # ]
-- On SEMI reduce production opt -> I_ISH
-- On PIPE reduce production opt -> I_ISH
-- On # reduce production opt -> I_ISH
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production opt -> I_ISH
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 119:
instr -> I_DSB opt . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_DSB opt
-- On PIPE reduce production instr -> I_DSB opt
-- On # reduce production instr -> I_DSB opt
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_DSB opt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 120:
instr -> I_DMB . [ SEMI PIPE # ]
instr -> I_DMB . opt [ SEMI PIPE # ]
-- On I_SY shift to state 111
-- On I_ST shift to state 112
-- On I_OSHST shift to state 113
-- On I_OSH shift to state 114
-- On I_NSHST shift to state 115
-- On I_NSH shift to state 116
-- On I_ISHST shift to state 117
-- On I_ISH shift to state 118
-- On opt shift to state 121
-- On SEMI reduce production instr -> I_DMB
-- On PIPE reduce production instr -> I_DMB
-- On # reduce production instr -> I_DMB
** End-of-stream conflict on SEMI PIPE I_SY I_ST I_OSHST I_OSH I_NSHST I_NSH I_ISHST I_ISH
**   There is a tension between
**   (1) reducing production instr -> I_DMB
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 121:
instr -> I_DMB opt . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_DMB opt
-- On PIPE reduce production instr -> I_DMB opt
-- On # reduce production instr -> I_DMB opt
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_DMB opt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 122:
instr -> I_CMP . reg COMMA k [ SEMI PIPE # ]
instr -> I_CMP . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 123

State 123:
instr -> I_CMP reg . COMMA k [ SEMI PIPE # ]
instr -> I_CMP reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 124

State 124:
instr -> I_CMP reg COMMA . k [ SEMI PIPE # ]
instr -> I_CMP reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On NUM shift to state 58
-- On META shift to state 59
-- On ARCH_REG shift to state 5
-- On reg shift to state 125
-- On k shift to state 126

State 125:
instr -> I_CMP reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_CMP reg COMMA reg
-- On PIPE reduce production instr -> I_CMP reg COMMA reg
-- On # reduce production instr -> I_CMP reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_CMP reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 126:
instr -> I_CMP reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_CMP reg COMMA k
-- On PIPE reduce production instr -> I_CMP reg COMMA k
-- On # reduce production instr -> I_CMP reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_CMP reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 127:
instr -> I_CBZ . reg COMMA NAME [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 128

State 128:
instr -> I_CBZ reg . COMMA NAME [ SEMI PIPE # ]
-- On COMMA shift to state 129

State 129:
instr -> I_CBZ reg COMMA . NAME [ SEMI PIPE # ]
-- On NAME shift to state 130

State 130:
instr -> I_CBZ reg COMMA NAME . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_CBZ reg COMMA NAME
-- On PIPE reduce production instr -> I_CBZ reg COMMA NAME
-- On # reduce production instr -> I_CBZ reg COMMA NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_CBZ reg COMMA NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 131:
instr -> I_CBNZ . reg COMMA NAME [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 132

State 132:
instr -> I_CBNZ reg . COMMA NAME [ SEMI PIPE # ]
-- On COMMA shift to state 133

State 133:
instr -> I_CBNZ reg COMMA . NAME [ SEMI PIPE # ]
-- On NAME shift to state 134

State 134:
instr -> I_CBNZ reg COMMA NAME . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_CBNZ reg COMMA NAME
-- On PIPE reduce production instr -> I_CBNZ reg COMMA NAME
-- On # reduce production instr -> I_CBNZ reg COMMA NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_CBNZ reg COMMA NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 135:
instr -> I_BNE . NAME [ SEMI PIPE # ]
-- On NAME shift to state 136

State 136:
instr -> I_BNE NAME . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_BNE NAME
-- On PIPE reduce production instr -> I_BNE NAME
-- On # reduce production instr -> I_BNE NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_BNE NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 137:
instr -> I_BEQ . NAME [ SEMI PIPE # ]
-- On NAME shift to state 138

State 138:
instr -> I_BEQ NAME . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_BEQ NAME
-- On PIPE reduce production instr -> I_BEQ NAME
-- On # reduce production instr -> I_BEQ NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_BEQ NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 139:
instr -> I_B . NAME [ SEMI PIPE # ]
-- On NAME shift to state 140

State 140:
instr -> I_B NAME . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_B NAME
-- On PIPE reduce production instr -> I_B NAME
-- On # reduce production instr -> I_B NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_B NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 141:
instr -> I_ANDS . reg COMMA reg COMMA k [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 142

State 142:
instr -> I_ANDS reg . COMMA reg COMMA k [ SEMI PIPE # ]
-- On COMMA shift to state 143

State 143:
instr -> I_ANDS reg COMMA . reg COMMA k [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 144

State 144:
instr -> I_ANDS reg COMMA reg . COMMA k [ SEMI PIPE # ]
-- On COMMA shift to state 145

State 145:
instr -> I_ANDS reg COMMA reg COMMA . k [ SEMI PIPE # ]
-- On NUM shift to state 58
-- On META shift to state 59
-- On k shift to state 146

State 146:
instr -> I_ANDS reg COMMA reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_ANDS reg COMMA reg COMMA k
-- On PIPE reduce production instr -> I_ANDS reg COMMA reg COMMA k
-- On # reduce production instr -> I_ANDS reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_ANDS reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 147:
instr -> I_AND . reg COMMA reg COMMA k [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 148

State 148:
instr -> I_AND reg . COMMA reg COMMA k [ SEMI PIPE # ]
-- On COMMA shift to state 149

State 149:
instr -> I_AND reg COMMA . reg COMMA k [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 150

State 150:
instr -> I_AND reg COMMA reg . COMMA k [ SEMI PIPE # ]
-- On COMMA shift to state 151

State 151:
instr -> I_AND reg COMMA reg COMMA . k [ SEMI PIPE # ]
-- On NUM shift to state 58
-- On META shift to state 59
-- On k shift to state 152

State 152:
instr -> I_AND reg COMMA reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_AND reg COMMA reg COMMA k
-- On PIPE reduce production instr -> I_AND reg COMMA reg COMMA k
-- On # reduce production instr -> I_AND reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_AND reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 153:
instr -> I_ADDS . reg COMMA reg COMMA k [ SEMI PIPE # ]
instr -> I_ADDS . reg COMMA reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 154

State 154:
instr -> I_ADDS reg . COMMA reg COMMA k [ SEMI PIPE # ]
instr -> I_ADDS reg . COMMA reg COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 155

State 155:
instr -> I_ADDS reg COMMA . reg COMMA k [ SEMI PIPE # ]
instr -> I_ADDS reg COMMA . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 156

State 156:
instr -> I_ADDS reg COMMA reg . COMMA k [ SEMI PIPE # ]
instr -> I_ADDS reg COMMA reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 157

State 157:
instr -> I_ADDS reg COMMA reg COMMA . k [ SEMI PIPE # ]
instr -> I_ADDS reg COMMA reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On NUM shift to state 58
-- On META shift to state 59
-- On ARCH_REG shift to state 5
-- On reg shift to state 158
-- On k shift to state 159

State 158:
instr -> I_ADDS reg COMMA reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_ADDS reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> I_ADDS reg COMMA reg COMMA reg
-- On # reduce production instr -> I_ADDS reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_ADDS reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 159:
instr -> I_ADDS reg COMMA reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_ADDS reg COMMA reg COMMA k
-- On PIPE reduce production instr -> I_ADDS reg COMMA reg COMMA k
-- On # reduce production instr -> I_ADDS reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_ADDS reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 160:
instr -> I_ADD . reg COMMA reg COMMA k [ SEMI PIPE # ]
instr -> I_ADD . reg COMMA reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 161

State 161:
instr -> I_ADD reg . COMMA reg COMMA k [ SEMI PIPE # ]
instr -> I_ADD reg . COMMA reg COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 162

State 162:
instr -> I_ADD reg COMMA . reg COMMA k [ SEMI PIPE # ]
instr -> I_ADD reg COMMA . reg COMMA reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On ARCH_REG shift to state 5
-- On reg shift to state 163

State 163:
instr -> I_ADD reg COMMA reg . COMMA k [ SEMI PIPE # ]
instr -> I_ADD reg COMMA reg . COMMA reg [ SEMI PIPE # ]
-- On COMMA shift to state 164

State 164:
instr -> I_ADD reg COMMA reg COMMA . k [ SEMI PIPE # ]
instr -> I_ADD reg COMMA reg COMMA . reg [ SEMI PIPE # ]
-- On SYMB_REG shift to state 4
-- On NUM shift to state 58
-- On META shift to state 59
-- On ARCH_REG shift to state 5
-- On reg shift to state 165
-- On k shift to state 166

State 165:
instr -> I_ADD reg COMMA reg COMMA reg . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_ADD reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> I_ADD reg COMMA reg COMMA reg
-- On # reduce production instr -> I_ADD reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_ADD reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 166:
instr -> I_ADD reg COMMA reg COMMA k . [ SEMI PIPE # ]
-- On SEMI reduce production instr -> I_ADD reg COMMA reg COMMA k
-- On PIPE reduce production instr -> I_ADD reg COMMA reg COMMA k
-- On # reduce production instr -> I_ADD reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> I_ADD reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 167:
instr_option -> CODEVAR . [ SEMI PIPE # ]
-- On SEMI reduce production instr_option -> CODEVAR
-- On PIPE reduce production instr_option -> CODEVAR
-- On # reduce production instr_option -> CODEVAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> CODEVAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 168:
instr_option -> NAME COLON instr_option . [ SEMI PIPE # ]
-- On SEMI reduce production instr_option -> NAME COLON instr_option
-- On PIPE reduce production instr_option -> NAME COLON instr_option
-- On # reduce production instr_option -> NAME COLON instr_option
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> NAME COLON instr_option
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 169:
instr_option -> instr . [ SEMI PIPE # ]
-- On SEMI reduce production instr_option -> instr
-- On PIPE reduce production instr_option -> instr
-- On # reduce production instr_option -> instr
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> instr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 170:
instr_option_seq' -> instr_option_seq . [ # ]
-- On # accept instr_option_seq

State 171:
instr_option_seq -> instr_option . [ # ]
instr_option_seq -> instr_option . SEMI instr_option_seq [ # ]
-- On SEMI shift to state 172
-- On # reduce production instr_option_seq -> instr_option
** End-of-stream conflict on SEMI
**   There is a tension between
**   (1) reducing production instr_option_seq -> instr_option
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 172:
instr_option_seq -> instr_option SEMI . instr_option_seq [ # ]
-- On NAME shift to state 1
-- On I_XORS shift to state 3
-- On I_XOR shift to state 11
-- On I_STRNE shift to state 17
-- On I_STREX shift to state 27
-- On I_STREQ shift to state 35
-- On I_STR shift to state 45
-- On I_MOVNE shift to state 55
-- On I_MOVEQ shift to state 62
-- On I_MOV shift to state 67
-- On I_LDRNE shift to state 72
-- On I_LDREX shift to state 82
-- On I_LDREQ shift to state 89
-- On I_LDR shift to state 99
-- On I_ISB shift to state 109
-- On I_DSB shift to state 110
-- On I_DMB shift to state 120
-- On I_CMP shift to state 122
-- On I_CBZ shift to state 127
-- On I_CBNZ shift to state 131
-- On I_BNE shift to state 135
-- On I_BEQ shift to state 137
-- On I_B shift to state 139
-- On I_ANDS shift to state 141
-- On I_AND shift to state 147
-- On I_ADDS shift to state 153
-- On I_ADD shift to state 160
-- On CODEVAR shift to state 167
-- On instr_option_seq shift to state 173
-- On instr_option shift to state 171
-- On instr shift to state 169
-- On SEMI reduce production instr_option -> 
-- On # reduce production instr_option -> 
** End-of-stream conflict on SEMI NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR
**   There is a tension between
**   (1) reducing production instr_option -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 173:
instr_option_seq -> instr_option SEMI instr_option_seq . [ # ]
-- On # reduce production instr_option_seq -> instr_option SEMI instr_option_seq

State 174:
main' -> . main [ # ]
-- On SEMI shift to state 175
-- On semi_opt shift to state 176
-- On main shift to state 190
-- On PROC reduce production semi_opt -> 

State 175:
semi_opt -> SEMI . [ PROC ]
-- On PROC reduce production semi_opt -> SEMI

State 176:
main -> semi_opt . proc_list iol_list EOF [ # ]
-- On PROC shift to state 177
-- On proc_list shift to state 181

State 177:
proc_list -> PROC . SEMI [ SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR ]
proc_list -> PROC . PIPE proc_list [ SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR ]
-- On SEMI shift to state 178
-- On PIPE shift to state 179

State 178:
proc_list -> PROC SEMI . [ SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR ]
-- On SEMI reduce production proc_list -> PROC SEMI
-- On PIPE reduce production proc_list -> PROC SEMI
-- On NAME reduce production proc_list -> PROC SEMI
-- On I_XORS reduce production proc_list -> PROC SEMI
-- On I_XOR reduce production proc_list -> PROC SEMI
-- On I_STRNE reduce production proc_list -> PROC SEMI
-- On I_STREX reduce production proc_list -> PROC SEMI
-- On I_STREQ reduce production proc_list -> PROC SEMI
-- On I_STR reduce production proc_list -> PROC SEMI
-- On I_MOVNE reduce production proc_list -> PROC SEMI
-- On I_MOVEQ reduce production proc_list -> PROC SEMI
-- On I_MOV reduce production proc_list -> PROC SEMI
-- On I_LDRNE reduce production proc_list -> PROC SEMI
-- On I_LDREX reduce production proc_list -> PROC SEMI
-- On I_LDREQ reduce production proc_list -> PROC SEMI
-- On I_LDR reduce production proc_list -> PROC SEMI
-- On I_ISB reduce production proc_list -> PROC SEMI
-- On I_DSB reduce production proc_list -> PROC SEMI
-- On I_DMB reduce production proc_list -> PROC SEMI
-- On I_CMP reduce production proc_list -> PROC SEMI
-- On I_CBZ reduce production proc_list -> PROC SEMI
-- On I_CBNZ reduce production proc_list -> PROC SEMI
-- On I_BNE reduce production proc_list -> PROC SEMI
-- On I_BEQ reduce production proc_list -> PROC SEMI
-- On I_B reduce production proc_list -> PROC SEMI
-- On I_ANDS reduce production proc_list -> PROC SEMI
-- On I_AND reduce production proc_list -> PROC SEMI
-- On I_ADDS reduce production proc_list -> PROC SEMI
-- On I_ADD reduce production proc_list -> PROC SEMI
-- On CODEVAR reduce production proc_list -> PROC SEMI

State 179:
proc_list -> PROC PIPE . proc_list [ SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR ]
-- On PROC shift to state 177
-- On proc_list shift to state 180

State 180:
proc_list -> PROC PIPE proc_list . [ SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_CBZ I_CBNZ I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD CODEVAR ]
-- On SEMI reduce production proc_list -> PROC PIPE proc_list
-- On PIPE reduce production proc_list -> PROC PIPE proc_list
-- On NAME reduce production proc_list -> PROC PIPE proc_list
-- On I_XORS reduce production proc_list -> PROC PIPE proc_list
-- On I_XOR reduce production proc_list -> PROC PIPE proc_list
-- On I_STRNE reduce production proc_list -> PROC PIPE proc_list
-- On I_STREX reduce production proc_list -> PROC PIPE proc_list
-- On I_STREQ reduce production proc_list -> PROC PIPE proc_list
-- On I_STR reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVNE reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVEQ reduce production proc_list -> PROC PIPE proc_list
-- On I_MOV reduce production proc_list -> PROC PIPE proc_list
-- On I_LDRNE reduce production proc_list -> PROC PIPE proc_list
-- On I_LDREX reduce production proc_list -> PROC PIPE proc_list
-- On I_LDREQ reduce production proc_list -> PROC PIPE proc_list
-- On I_LDR reduce production proc_list -> PROC PIPE proc_list
-- On I_ISB reduce production proc_list -> PROC PIPE proc_list
-- On I_DSB reduce production proc_list -> PROC PIPE proc_list
-- On I_DMB reduce production proc_list -> PROC PIPE proc_list
-- On I_CMP reduce production proc_list -> PROC PIPE proc_list
-- On I_CBZ reduce production proc_list -> PROC PIPE proc_list
-- On I_CBNZ reduce production proc_list -> PROC PIPE proc_list
-- On I_BNE reduce production proc_list -> PROC PIPE proc_list
-- On I_BEQ reduce production proc_list -> PROC PIPE proc_list
-- On I_B reduce production proc_list -> PROC PIPE proc_list
-- On I_ANDS reduce production proc_list -> PROC PIPE proc_list
-- On I_AND reduce production proc_list -> PROC PIPE proc_list
-- On I_ADDS reduce production proc_list -> PROC PIPE proc_list
-- On I_ADD reduce production proc_list -> PROC PIPE proc_list
-- On CODEVAR reduce production proc_list -> PROC PIPE proc_list

State 181:
main -> semi_opt proc_list . iol_list EOF [ # ]
-- On NAME shift to state 1
-- On I_XORS shift to state 3
-- On I_XOR shift to state 11
-- On I_STRNE shift to state 17
-- On I_STREX shift to state 27
-- On I_STREQ shift to state 35
-- On I_STR shift to state 45
-- On I_MOVNE shift to state 55
-- On I_MOVEQ shift to state 62
-- On I_MOV shift to state 67
-- On I_LDRNE shift to state 72
-- On I_LDREX shift to state 82
-- On I_LDREQ shift to state 89
-- On I_LDR shift to state 99
-- On I_ISB shift to state 109
-- On I_DSB shift to state 110
-- On I_DMB shift to state 120
-- On I_CMP shift to state 122
-- On I_CBZ shift to state 127
-- On I_CBNZ shift to state 131
-- On I_BNE shift to state 135
-- On I_BEQ shift to state 137
-- On I_B shift to state 139
-- On I_ANDS shift to state 141
-- On I_AND shift to state 147
-- On I_ADDS shift to state 153
-- On I_ADD shift to state 160
-- On CODEVAR shift to state 167
-- On iol_list shift to state 182
-- On instr_option_list shift to state 184
-- On instr_option shift to state 187
-- On instr shift to state 169
-- On SEMI reduce production instr_option -> 
-- On PIPE reduce production instr_option -> 

State 182:
main -> semi_opt proc_list iol_list . EOF [ # ]
-- On EOF shift to state 183

State 183:
main -> semi_opt proc_list iol_list EOF . [ # ]
-- On # reduce production main -> semi_opt proc_list iol_list EOF

State 184:
iol_list -> instr_option_list . SEMI [ EOF ]
iol_list -> instr_option_list . SEMI iol_list [ EOF ]
-- On SEMI shift to state 185

State 185:
iol_list -> instr_option_list SEMI . [ EOF ]
iol_list -> instr_option_list SEMI . iol_list [ EOF ]
-- On NAME shift to state 1
-- On I_XORS shift to state 3
-- On I_XOR shift to state 11
-- On I_STRNE shift to state 17
-- On I_STREX shift to state 27
-- On I_STREQ shift to state 35
-- On I_STR shift to state 45
-- On I_MOVNE shift to state 55
-- On I_MOVEQ shift to state 62
-- On I_MOV shift to state 67
-- On I_LDRNE shift to state 72
-- On I_LDREX shift to state 82
-- On I_LDREQ shift to state 89
-- On I_LDR shift to state 99
-- On I_ISB shift to state 109
-- On I_DSB shift to state 110
-- On I_DMB shift to state 120
-- On I_CMP shift to state 122
-- On I_CBZ shift to state 127
-- On I_CBNZ shift to state 131
-- On I_BNE shift to state 135
-- On I_BEQ shift to state 137
-- On I_B shift to state 139
-- On I_ANDS shift to state 141
-- On I_AND shift to state 147
-- On I_ADDS shift to state 153
-- On I_ADD shift to state 160
-- On CODEVAR shift to state 167
-- On iol_list shift to state 186
-- On instr_option_list shift to state 184
-- On instr_option shift to state 187
-- On instr shift to state 169
-- On SEMI reduce production instr_option -> 
-- On PIPE reduce production instr_option -> 
-- On EOF reduce production iol_list -> instr_option_list SEMI

State 186:
iol_list -> instr_option_list SEMI iol_list . [ EOF ]
-- On EOF reduce production iol_list -> instr_option_list SEMI iol_list

State 187:
instr_option_list -> instr_option . [ SEMI ]
instr_option_list -> instr_option . PIPE instr_option_list [ SEMI ]
-- On PIPE shift to state 188
-- On SEMI reduce production instr_option_list -> instr_option

State 188:
instr_option_list -> instr_option PIPE . instr_option_list [ SEMI ]
-- On NAME shift to state 1
-- On I_XORS shift to state 3
-- On I_XOR shift to state 11
-- On I_STRNE shift to state 17
-- On I_STREX shift to state 27
-- On I_STREQ shift to state 35
-- On I_STR shift to state 45
-- On I_MOVNE shift to state 55
-- On I_MOVEQ shift to state 62
-- On I_MOV shift to state 67
-- On I_LDRNE shift to state 72
-- On I_LDREX shift to state 82
-- On I_LDREQ shift to state 89
-- On I_LDR shift to state 99
-- On I_ISB shift to state 109
-- On I_DSB shift to state 110
-- On I_DMB shift to state 120
-- On I_CMP shift to state 122
-- On I_CBZ shift to state 127
-- On I_CBNZ shift to state 131
-- On I_BNE shift to state 135
-- On I_BEQ shift to state 137
-- On I_B shift to state 139
-- On I_ANDS shift to state 141
-- On I_AND shift to state 147
-- On I_ADDS shift to state 153
-- On I_ADD shift to state 160
-- On CODEVAR shift to state 167
-- On instr_option_list shift to state 189
-- On instr_option shift to state 187
-- On instr shift to state 169
-- On SEMI reduce production instr_option -> 
-- On PIPE reduce production instr_option -> 

State 189:
instr_option_list -> instr_option PIPE instr_option_list . [ SEMI ]
-- On SEMI reduce production instr_option_list -> instr_option PIPE instr_option_list

State 190:
main' -> main . [ # ]
-- On # accept main

