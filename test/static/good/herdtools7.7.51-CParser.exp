File "herdtools7.7.51-CParser.mly", line 37, characters 29-33:
Warning: the token AUTO is unused.
File "herdtools7.7.51-CParser.mly", line 48, characters 12-17:
Warning: the token COLON is unused.
File "herdtools7.7.51-CParser.mly", line 38, characters 7-12:
Warning: the token CONST is unused.
File "herdtools7.7.51-CParser.mly", line 48, characters 46-49:
Warning: the token DOT is unused.
File "herdtools7.7.51-CParser.mly", line 37, characters 15-21:
Warning: the token EXTERN is unused.
File "herdtools7.7.51-CParser.mly", line 52, characters 7-10:
Warning: the token MUL is unused.
File "herdtools7.7.51-CParser.mly", line 47, characters 7-11:
Warning: the token NULL is unused.
File "herdtools7.7.51-CParser.mly", line 37, characters 34-42:
Warning: the token REGISTER is unused.
File "herdtools7.7.51-CParser.mly", line 37, characters 22-28:
Warning: the token STATIC is unused.
File "herdtools7.7.51-CParser.mly", line 37, characters 7-14:
Warning: the token TYPEDEF is unused.
File "herdtools7.7.51-CParser.mly", line 53, characters 7-12:
Warning: the token WHILE is unused.
Grammar has 31 nonterminal symbols, among which 4 start symbols.
Grammar has 75 terminal symbols.
Grammar has 120 productions.
nullable(voidopt) = true
nullable(typ) = false
nullable(ty_attr) = true
nullable(trans_unit) = false
nullable(toptyp) = false
nullable(shallow_main) = false
nullable(pseudo_seq) = false
nullable(parameter_list) = true
nullable(parameter_declaration) = false
nullable(macros) = true
nullable(macro) = false
nullable(location) = false
nullable(instruction) = false
nullable(ins_seq) = false
nullable(initialisation) = false
nullable(function_def) = false
nullable(formals_ne) = false
nullable(formals) = true
nullable(expr) = false
nullable(deep_main) = false
nullable(declaration) = false
nullable(body) = false
nullable(block_ins) = false
nullable(base0) = false
nullable(base) = false
nullable(atomic_op) = false
nullable(args_ne) = false
nullable(args) = true
nullable(annot_list) = false
nullable(annot_base) = false
nullable(annot) = false
first(voidopt) = VOID
first(typ) = VOLATILE VOID MUTEX LPAR LONG INT CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(ty_attr) = 
first(trans_unit) = VOID PROC
first(toptyp) = VOLATILE VOID MUTEX LPAR LONG INT CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(shallow_main) = VOID PROC EOF BODY
first(pseudo_seq) = VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STORE STAR SPINUNLOCK SPINLOCK MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(parameter_list) = VOLATILE VOID MUTEX LPAR LONG INT CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(parameter_declaration) = VOLATILE VOID MUTEX LPAR LONG INT CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(macros) = IDENTIFIER
first(macro) = IDENTIFIER
first(location) = STAR LPAR IDENTIFIER
first(instruction) = VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STORE STAR SPINUNLOCK SPINLOCK MUTEX LPAR LONG LOCK INT IF IDENTIFIER FENCE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(ins_seq) = VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STORE STAR SPINUNLOCK SPINLOCK MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(initialisation) = VOLATILE VOID MUTEX LPAR LONG INT CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(function_def) = VOID PROC
first(formals_ne) = IDENTIFIER
first(formals) = IDENTIFIER
first(expr) = XCHG WCAS_EXPLICIT WCAS UNDERATOMICOPRETURN UNDERATOMICFETCHOP UNDERATOMICADDUNLESS STAR SPINTRYLOCK SPINISLOCKED SCAS_EXPLICIT SCAS LPAR LOAD LD_EXPLICIT IDENTIFIER EXC_EXPLICIT CONSTVAR CONSTANT CMPXCHG ATOMIC_FETCH_EXPLICIT ATOMICADDUNLESS
first(deep_main) = VOID PROC
first(declaration) = VOLATILE VOID MUTEX LPAR LONG INT CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(body) = LBRACE
first(block_ins) = VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STORE STAR SPINUNLOCK SPINLOCK MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC
first(base0) = VOID MUTEX LONG INT CHAR BASE_TYPE ATOMIC_TYPE
first(base) = VOID MUTEX LPAR LONG INT CHAR BASE_TYPE ATOMIC_TYPE
first(atomic_op) = SUB ADD
first(args_ne) = XCHG WCAS_EXPLICIT WCAS UNDERATOMICOPRETURN UNDERATOMICFETCHOP UNDERATOMICADDUNLESS STAR SPINTRYLOCK SPINISLOCKED SCAS_EXPLICIT SCAS LPAR LOAD LD_EXPLICIT IDENTIFIER EXC_EXPLICIT CONSTVAR CONSTANT CMPXCHG ATOMIC_FETCH_EXPLICIT ATOMICADDUNLESS
first(args) = XCHG WCAS_EXPLICIT WCAS UNDERATOMICOPRETURN UNDERATOMICFETCHOP UNDERATOMICADDUNLESS STAR SPINTRYLOCK SPINISLOCKED SCAS_EXPLICIT SCAS LPAR LOAD LD_EXPLICIT IDENTIFIER EXC_EXPLICIT CONSTVAR CONSTANT CMPXCHG ATOMIC_FETCH_EXPLICIT ATOMICADDUNLESS
first(annot_list) = UNLOCK LOCK IDENTIFIER
first(annot_base) = UNLOCK LOCK IDENTIFIER
first(annot) = UNLOCK LOCK IDENTIFIER
minimal(voidopt) = (* 0 *)
minimal(typ) = (* 1 *) ATOMIC_TYPE
minimal(ty_attr) = (* 0 *)
minimal(trans_unit) = (* 7 *) PROC LPAR RPAR LBRACE CODEVAR SEMI RBRACE
minimal(toptyp) = (* 2 *) ATOMIC_TYPE STAR
minimal(shallow_main) = (* 1 *) EOF
minimal(pseudo_seq) = (* 2 *) CODEVAR SEMI
minimal(parameter_list) = (* 0 *)
minimal(parameter_declaration) = (* 3 *) ATOMIC_TYPE STAR IDENTIFIER
minimal(macros) = (* 0 *)
minimal(macro) = (* 4 *) IDENTIFIER LPAR RPAR CONSTANT
minimal(location) = (* 1 *) IDENTIFIER
minimal(instruction) = (* 2 *) CODEVAR SEMI
minimal(ins_seq) = (* 2 *) CODEVAR SEMI
minimal(initialisation) = (* 4 *) ATOMIC_TYPE IDENTIFIER EQ CONSTANT
minimal(function_def) = (* 7 *) PROC LPAR RPAR LBRACE CODEVAR SEMI RBRACE
minimal(formals_ne) = (* 1 *) IDENTIFIER
minimal(formals) = (* 0 *)
minimal(expr) = (* 1 *) CONSTANT
minimal(deep_main) = (* 8 *) PROC LPAR RPAR LBRACE CODEVAR SEMI RBRACE EOF
minimal(declaration) = (* 3 *) ATOMIC_TYPE IDENTIFIER SEMI
minimal(body) = (* 4 *) LBRACE CODEVAR SEMI RBRACE
minimal(block_ins) = (* 2 *) CODEVAR SEMI
minimal(base0) = (* 1 *) ATOMIC_TYPE
minimal(base) = (* 1 *) ATOMIC_TYPE
minimal(atomic_op) = (* 1 *) ADD
minimal(args_ne) = (* 1 *) CONSTANT
minimal(args) = (* 0 *)
minimal(annot_list) = (* 1 *) LOCK
minimal(annot_base) = (* 1 *) LOCK
minimal(annot) = (* 1 *) LOCK
maximal(voidopt) = 1
maximal(typ) = infinity
maximal(ty_attr) = 0
maximal(trans_unit) = infinity
maximal(toptyp) = infinity
maximal(shallow_main) = infinity
maximal(pseudo_seq) = infinity
maximal(parameter_list) = infinity
maximal(parameter_declaration) = infinity
maximal(macros) = infinity
maximal(macro) = infinity
maximal(location) = infinity
maximal(instruction) = infinity
maximal(ins_seq) = infinity
maximal(initialisation) = infinity
maximal(function_def) = infinity
maximal(formals_ne) = infinity
maximal(formals) = infinity
maximal(expr) = infinity
maximal(deep_main) = infinity
maximal(declaration) = infinity
maximal(body) = infinity
maximal(block_ins) = infinity
maximal(base0) = 1
maximal(base) = infinity
maximal(atomic_op) = 1
maximal(args_ne) = infinity
maximal(args) = infinity
maximal(annot_list) = infinity
maximal(annot_base) = 1
maximal(annot) = infinity
follow(voidopt) = PROC
follow(typ) = VOLATILE STAR RPAR IDENTIFIER
follow(ty_attr) = MUTEX LONG INT CHAR
follow(trans_unit) = VOID PROC EOF
follow(toptyp) = IDENTIFIER
follow(shallow_main) = #
follow(pseudo_seq) = RBRACE #
follow(parameter_list) = RPAR
follow(parameter_declaration) = RPAR COMMA
follow(macros) = #
follow(macro) = IDENTIFIER #
follow(location) = EQ
follow(instruction) = VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STORE STAR SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC #
follow(ins_seq) = RBRACE
follow(initialisation) = SEMI
follow(function_def) = VOID PROC EOF
follow(formals_ne) = RPAR
follow(formals) = RPAR
follow(expr) = XOR SUB STAR SEMI RPAR PIPE NEQ_OP LT LE LAND IDENTIFIER GT GE EQ_OP DIV COMMA ADD #
follow(deep_main) = #
follow(declaration) = VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STORE STAR SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC #
follow(body) = IDENTIFIER #
follow(block_ins) = VOLATILE VOID UNLOCK UNDERFENCE UNDERATOMICOP ST_EXPLICIT STORE STAR SPINUNLOCK SPINLOCK RBRACE MUTEX LPAR LONG LOCK LBRACE INT IF IDENTIFIER FENCE ELSE CODEVAR CHAR BASE_TYPE ATOMIC_TYPE ATOMIC #
follow(base0) = VOLATILE STAR RPAR IDENTIFIER
follow(base) = VOLATILE STAR RPAR IDENTIFIER
follow(atomic_op) = COMMA
follow(args_ne) = RPAR
follow(args) = RPAR
follow(annot_list) = RBRACE
follow(annot_base) = SUB RBRACE COMMA
follow(annot) = RBRACE COMMA
Built an LR(0) automaton with 378 states.
The grammar is not SLR(1) -- 17 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 382 states.
184 shift/reduce conflicts were silently solved.
Warning: 64 end-of-stream conflicts were arbitrarily resolved.
File "herdtools7.7.51-CParser.mly", line 306, characters 1-1:
Warning: production macros -> is never reduced.
Warning: in total, 1 production is never reduced.
95 out of 382 states have a default reduction.
113 out of 382 states are represented.
0 out of 112 symbols keep track of their start position.
0 out of 112 symbols keep track of their end position.
78 out of 124 productions exploit shiftreduce optimization.
0 out of 382 states can peek at an error.
926 functions before inlining, 108 functions after inlining.
