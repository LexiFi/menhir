State 0:
## Known stack suffix:
##
## LR(1) items:
instr_option_seq' -> . instr_option_seq [ # ]
## Transitions:
-- On WRITE shift to state 1
-- On RMW shift to state 28
-- On READ shift to state 57
-- On NAME shift to state 61
-- On MOV shift to state 63
-- On FENCE shift to state 66
-- On CODEVAR shift to state 76
-- On CALL shift to state 77
-- On BRANCH shift to state 81
-- On instr_option_seq shift to state 88
-- On instr_option shift to state 89
-- On instr shift to state 87
## Reductions:
-- On SEMI #
--   reduce production instr_option ->
** End-of-stream conflict on WRITE SEMI RMW READ NAME MOV FENCE CODEVAR CALL BRANCH
**   There is a tension between
**   (1) reducing production instr_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
## Known stack suffix:
## WRITE
## LR(1) items:
instr -> WRITE . annot_list_option addr_op reg_or_imm [ SEMI PIPE # ]
## Transitions:
-- On LBRAC shift to state 2
-- On annot_list_option shift to state 14
## Reductions:
-- On WRITE SYMB_REG REG READ NAME FENCE BRANCH
--   reduce production annot_list_option ->

State 2:
## Known stack suffix:
## LBRAC
## LR(1) items:
annot_list_option -> LBRAC . name_list RBRAC [ WRITE SYMB_REG SEMI REG READ PIPE NAME LBRACE FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On name_list_ne shift to state 8
-- On name_list shift to state 9
-- On name shift to state 11
## Reductions:
-- On RBRAC
--   reduce production name_list ->

State 3:
## Known stack suffix:
## WRITE
## LR(1) items:
name -> WRITE . [ WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH #
--   reduce production name -> WRITE
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH
**   There is a tension between
**   (1) reducing production name -> WRITE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
## Known stack suffix:
## READ
## LR(1) items:
name -> READ . [ WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH #
--   reduce production name -> READ
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH
**   There is a tension between
**   (1) reducing production name -> READ
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 5:
## Known stack suffix:
## NAME
## LR(1) items:
name -> NAME . [ WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH #
--   reduce production name -> NAME
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH
**   There is a tension between
**   (1) reducing production name -> NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 6:
## Known stack suffix:
## FENCE
## LR(1) items:
name -> FENCE . [ WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH #
--   reduce production name -> FENCE
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH
**   There is a tension between
**   (1) reducing production name -> FENCE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 7:
## Known stack suffix:
## BRANCH
## LR(1) items:
name -> BRANCH . [ WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH #
--   reduce production name -> BRANCH
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH
**   There is a tension between
**   (1) reducing production name -> BRANCH
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
## Known stack suffix:
## name_list_ne
## LR(1) items:
name_list -> name_list_ne . [ RBRACE RBRAC ]
## Transitions:
## Reductions:
-- On RBRACE RBRAC
--   reduce production name_list -> name_list_ne

State 9:
## Known stack suffix:
## LBRAC name_list
## LR(1) items:
annot_list_option -> LBRAC name_list . RBRAC [ WRITE SYMB_REG SEMI REG READ PIPE NAME LBRACE FENCE BRANCH # ]
## Transitions:
-- On RBRAC shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LBRAC name_list RBRAC
## LR(1) items:
annot_list_option -> LBRAC name_list RBRAC . [ WRITE SYMB_REG SEMI REG READ PIPE NAME LBRACE FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI REG READ PIPE NAME LBRACE FENCE BRANCH #
--   reduce production annot_list_option -> LBRAC name_list RBRAC
** End-of-stream conflict on WRITE SYMB_REG SEMI REG READ PIPE NAME LBRACE FENCE BRANCH
**   There is a tension between
**   (1) reducing production annot_list_option -> LBRAC name_list RBRAC
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## name
## LR(1) items:
name_list_ne -> name . COMMA name_list_ne [ RBRACE RBRAC ]
name_list_ne -> name . [ RBRACE RBRAC ]
## Transitions:
-- On COMMA shift to state 12
## Reductions:
-- On RBRACE RBRAC
--   reduce production name_list_ne -> name

State 12:
## Known stack suffix:
## name COMMA
## LR(1) items:
name_list_ne -> name COMMA . name_list_ne [ RBRACE RBRAC ]
## Transitions:
-- On WRITE shift to state 3
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On name_list_ne shift to state 13
-- On name shift to state 11
## Reductions:

State 13:
## Known stack suffix:
## name COMMA name_list_ne
## LR(1) items:
name_list_ne -> name COMMA name_list_ne . [ RBRACE RBRAC ]
## Transitions:
## Reductions:
-- On RBRACE RBRAC
--   reduce production name_list_ne -> name COMMA name_list_ne

State 14:
## Known stack suffix:
## WRITE annot_list_option
## LR(1) items:
instr -> WRITE annot_list_option . addr_op reg_or_imm [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 17
-- On reg shift to state 24
-- On name shift to state 25
-- On addr_op shift to state 26
## Reductions:

State 15:
## Known stack suffix:
## SYMB_REG
## LR(1) items:
reg -> SYMB_REG . [ WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META LPAR FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META LPAR FENCE BRANCH #
--   reduce production reg -> SYMB_REG
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META LPAR FENCE BRANCH
**   There is a tension between
**   (1) reducing production reg -> SYMB_REG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 16:
## Known stack suffix:
## REG
## LR(1) items:
reg -> REG . [ WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META LPAR FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META LPAR FENCE BRANCH #
--   reduce production reg -> REG
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META LPAR FENCE BRANCH
**   There is a tension between
**   (1) reducing production reg -> REG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 17:
## Known stack suffix:
## reg_or_addr
## LR(1) items:
addr_op -> reg_or_addr . [ SYMB_REG SEMI REG PIPE NUM META # ]
addr_op -> reg_or_addr . PLUS reg_or_imm [ SYMB_REG SEMI REG PIPE NUM META # ]
## Transitions:
-- On PLUS shift to state 18
## Reductions:
-- On SYMB_REG SEMI REG PIPE NUM META #
--   reduce production addr_op -> reg_or_addr
** End-of-stream conflict on SYMB_REG SEMI REG PLUS PIPE NUM META
**   There is a tension between
**   (1) reducing production addr_op -> reg_or_addr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 18:
## Known stack suffix:
## reg_or_addr PLUS
## LR(1) items:
addr_op -> reg_or_addr PLUS . reg_or_imm [ SYMB_REG SEMI REG PIPE NUM META # ]
## Transitions:
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On NUM shift to state 19
-- On META shift to state 20
-- On reg_or_imm shift to state 21
-- On reg shift to state 22
-- On k shift to state 23
## Reductions:

State 19:
## Known stack suffix:
## NUM
## LR(1) items:
k -> NUM . [ WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH #
--   reduce production k -> NUM
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH
**   There is a tension between
**   (1) reducing production k -> NUM
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 20:
## Known stack suffix:
## META
## LR(1) items:
k -> META . [ WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH #
--   reduce production k -> META
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH
**   There is a tension between
**   (1) reducing production k -> META
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
## Known stack suffix:
## reg_or_addr PLUS reg_or_imm
## LR(1) items:
addr_op -> reg_or_addr PLUS reg_or_imm . [ SYMB_REG SEMI REG PIPE NUM META # ]
## Transitions:
## Reductions:
-- On SYMB_REG SEMI REG PIPE NUM META #
--   reduce production addr_op -> reg_or_addr PLUS reg_or_imm
** End-of-stream conflict on SYMB_REG SEMI REG PIPE NUM META
**   There is a tension between
**   (1) reducing production addr_op -> reg_or_addr PLUS reg_or_imm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 22:
## Known stack suffix:
## reg
## LR(1) items:
reg_or_imm -> reg . [ SYMB_REG SEMI REG PIPE NUM META # ]
## Transitions:
## Reductions:
-- On SYMB_REG SEMI REG PIPE NUM META #
--   reduce production reg_or_imm -> reg
** End-of-stream conflict on SYMB_REG SEMI REG PIPE NUM META
**   There is a tension between
**   (1) reducing production reg_or_imm -> reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
## Known stack suffix:
## k
## LR(1) items:
reg_or_imm -> k . [ SYMB_REG SEMI REG PIPE NUM META # ]
## Transitions:
## Reductions:
-- On SYMB_REG SEMI REG PIPE NUM META #
--   reduce production reg_or_imm -> k
** End-of-stream conflict on SYMB_REG SEMI REG PIPE NUM META
**   There is a tension between
**   (1) reducing production reg_or_imm -> k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 24:
## Known stack suffix:
## reg
## LR(1) items:
reg_or_addr -> reg . [ WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META FENCE BRANCH #
--   reduce production reg_or_addr -> reg
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META FENCE BRANCH
**   There is a tension between
**   (1) reducing production reg_or_addr -> reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 25:
## Known stack suffix:
## name
## LR(1) items:
reg_or_addr -> name . [ WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META FENCE BRANCH #
--   reduce production reg_or_addr -> name
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META FENCE BRANCH
**   There is a tension between
**   (1) reducing production reg_or_addr -> name
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
## Known stack suffix:
## WRITE annot_list_option addr_op
## LR(1) items:
instr -> WRITE annot_list_option addr_op . reg_or_imm [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On NUM shift to state 19
-- On META shift to state 20
-- On reg_or_imm shift to state 27
-- On reg shift to state 22
-- On k shift to state 23
## Reductions:

State 27:
## Known stack suffix:
## WRITE annot_list_option addr_op reg_or_imm
## LR(1) items:
instr -> WRITE annot_list_option addr_op reg_or_imm . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> WRITE annot_list_option addr_op reg_or_imm
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> WRITE annot_list_option addr_op reg_or_imm
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 28:
## Known stack suffix:
## RMW
## LR(1) items:
instr -> RMW . annot_list_option reg operation addr_op [ SEMI PIPE # ]
## Transitions:
-- On LBRAC shift to state 2
-- On annot_list_option shift to state 29
## Reductions:
-- On SYMB_REG REG
--   reduce production annot_list_option ->

State 29:
## Known stack suffix:
## RMW annot_list_option
## LR(1) items:
instr -> RMW annot_list_option . reg operation addr_op [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On reg shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## RMW annot_list_option reg
## LR(1) items:
instr -> RMW annot_list_option reg . operation addr_op [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On LPAR shift to state 31
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On operation shift to state 54
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 56
## Reductions:

State 31:
## Known stack suffix:
## LPAR
## LR(1) items:
operation -> LPAR . ADD any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
operation -> LPAR . XOR any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
operation -> LPAR . AND any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
operation -> LPAR . EQ any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
operation -> LPAR . NEQ any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On XOR shift to state 32
-- On NEQ shift to state 38
-- On EQ shift to state 42
-- On AND shift to state 46
-- On ADD shift to state 50
## Reductions:

State 32:
## Known stack suffix:
## LPAR XOR
## LR(1) items:
operation -> LPAR XOR . any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 35
## Reductions:

State 33:
## Known stack suffix:
## reg_or_addr
## LR(1) items:
any_value -> reg_or_addr . [ WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH #
--   reduce production any_value -> reg_or_addr
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH
**   There is a tension between
**   (1) reducing production any_value -> reg_or_addr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 34:
## Known stack suffix:
## k
## LR(1) items:
any_value -> k . [ WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH #
--   reduce production any_value -> k
** End-of-stream conflict on WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH
**   There is a tension between
**   (1) reducing production any_value -> k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 35:
## Known stack suffix:
## LPAR XOR any_value
## LR(1) items:
operation -> LPAR XOR any_value . any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LPAR XOR any_value any_value
## LR(1) items:
operation -> LPAR XOR any_value any_value . RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On RPAR shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## LPAR XOR any_value any_value RPAR
## LR(1) items:
operation -> LPAR XOR any_value any_value RPAR . [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH #
--   reduce production operation -> LPAR XOR any_value any_value RPAR
** End-of-stream conflict on WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH
**   There is a tension between
**   (1) reducing production operation -> LPAR XOR any_value any_value RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 38:
## Known stack suffix:
## LPAR NEQ
## LR(1) items:
operation -> LPAR NEQ . any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## LPAR NEQ any_value
## LR(1) items:
operation -> LPAR NEQ any_value . any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LPAR NEQ any_value any_value
## LR(1) items:
operation -> LPAR NEQ any_value any_value . RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On RPAR shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## LPAR NEQ any_value any_value RPAR
## LR(1) items:
operation -> LPAR NEQ any_value any_value RPAR . [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH #
--   reduce production operation -> LPAR NEQ any_value any_value RPAR
** End-of-stream conflict on WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH
**   There is a tension between
**   (1) reducing production operation -> LPAR NEQ any_value any_value RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 42:
## Known stack suffix:
## LPAR EQ
## LR(1) items:
operation -> LPAR EQ . any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LPAR EQ any_value
## LR(1) items:
operation -> LPAR EQ any_value . any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## LPAR EQ any_value any_value
## LR(1) items:
operation -> LPAR EQ any_value any_value . RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On RPAR shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## LPAR EQ any_value any_value RPAR
## LR(1) items:
operation -> LPAR EQ any_value any_value RPAR . [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH #
--   reduce production operation -> LPAR EQ any_value any_value RPAR
** End-of-stream conflict on WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH
**   There is a tension between
**   (1) reducing production operation -> LPAR EQ any_value any_value RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 46:
## Known stack suffix:
## LPAR AND
## LR(1) items:
operation -> LPAR AND . any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LPAR AND any_value
## LR(1) items:
operation -> LPAR AND any_value . any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LPAR AND any_value any_value
## LR(1) items:
operation -> LPAR AND any_value any_value . RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On RPAR shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## LPAR AND any_value any_value RPAR
## LR(1) items:
operation -> LPAR AND any_value any_value RPAR . [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH #
--   reduce production operation -> LPAR AND any_value any_value RPAR
** End-of-stream conflict on WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH
**   There is a tension between
**   (1) reducing production operation -> LPAR AND any_value any_value RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 50:
## Known stack suffix:
## LPAR ADD
## LR(1) items:
operation -> LPAR ADD . any_value any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## LPAR ADD any_value
## LR(1) items:
operation -> LPAR ADD any_value . any_value RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LPAR ADD any_value any_value
## LR(1) items:
operation -> LPAR ADD any_value any_value . RPAR [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
-- On RPAR shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LPAR ADD any_value any_value RPAR
## LR(1) items:
operation -> LPAR ADD any_value any_value RPAR . [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH #
--   reduce production operation -> LPAR ADD any_value any_value RPAR
** End-of-stream conflict on WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH
**   There is a tension between
**   (1) reducing production operation -> LPAR ADD any_value any_value RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 54:
## Known stack suffix:
## RMW annot_list_option reg operation
## LR(1) items:
instr -> RMW annot_list_option reg operation . addr_op [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 17
-- On reg shift to state 24
-- On name shift to state 25
-- On addr_op shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## RMW annot_list_option reg operation addr_op
## LR(1) items:
instr -> RMW annot_list_option reg operation addr_op . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> RMW annot_list_option reg operation addr_op
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> RMW annot_list_option reg operation addr_op
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 56:
## Known stack suffix:
## any_value
## LR(1) items:
operation -> any_value . [ WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH # ]
## Transitions:
## Reductions:
-- On WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH #
--   reduce production operation -> any_value
** End-of-stream conflict on WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH
**   There is a tension between
**   (1) reducing production operation -> any_value
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 57:
## Known stack suffix:
## READ
## LR(1) items:
instr -> READ . annot_list_option reg addr_op [ SEMI PIPE # ]
## Transitions:
-- On LBRAC shift to state 2
-- On annot_list_option shift to state 58
## Reductions:
-- On SYMB_REG REG
--   reduce production annot_list_option ->

State 58:
## Known stack suffix:
## READ annot_list_option
## LR(1) items:
instr -> READ annot_list_option . reg addr_op [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On reg shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## READ annot_list_option reg
## LR(1) items:
instr -> READ annot_list_option reg . addr_op [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 17
-- On reg shift to state 24
-- On name shift to state 25
-- On addr_op shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## READ annot_list_option reg addr_op
## LR(1) items:
instr -> READ annot_list_option reg addr_op . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> READ annot_list_option reg addr_op
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> READ annot_list_option reg addr_op
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 61:
## Known stack suffix:
## NAME
## LR(1) items:
instr_option -> NAME . COLON instr_option [ SEMI PIPE # ]
## Transitions:
-- On COLON shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## NAME COLON
## LR(1) items:
instr_option -> NAME COLON . instr_option [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 1
-- On RMW shift to state 28
-- On READ shift to state 57
-- On NAME shift to state 61
-- On MOV shift to state 63
-- On FENCE shift to state 66
-- On CODEVAR shift to state 76
-- On CALL shift to state 77
-- On BRANCH shift to state 81
-- On instr_option shift to state 86
-- On instr shift to state 87
## Reductions:
-- On SEMI PIPE #
--   reduce production instr_option ->
** End-of-stream conflict on WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH
**   There is a tension between
**   (1) reducing production instr_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 63:
## Known stack suffix:
## MOV
## LR(1) items:
instr -> MOV . reg operation [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On reg shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## MOV reg
## LR(1) items:
instr -> MOV reg . operation [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On READ shift to state 4
-- On NUM shift to state 19
-- On NAME shift to state 5
-- On META shift to state 20
-- On LPAR shift to state 31
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On reg_or_addr shift to state 33
-- On reg shift to state 24
-- On operation shift to state 65
-- On name shift to state 25
-- On k shift to state 34
-- On any_value shift to state 56
## Reductions:

State 65:
## Known stack suffix:
## MOV reg operation
## LR(1) items:
instr -> MOV reg operation . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> MOV reg operation
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> MOV reg operation
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 66:
## Known stack suffix:
## FENCE
## LR(1) items:
instr -> FENCE . annot_list_option fence_labels_option [ SEMI PIPE # ]
## Transitions:
-- On LBRAC shift to state 2
-- On annot_list_option shift to state 67
## Reductions:
-- On SEMI PIPE LBRACE #
--   reduce production annot_list_option ->
** End-of-stream conflict on SEMI PIPE LBRACE LBRAC
**   There is a tension between
**   (1) reducing production annot_list_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 67:
## Known stack suffix:
## FENCE annot_list_option
## LR(1) items:
instr -> FENCE annot_list_option . fence_labels_option [ SEMI PIPE # ]
## Transitions:
-- On LBRACE shift to state 68
-- On fence_labels_option shift to state 75
## Reductions:
-- On SEMI PIPE #
--   reduce production fence_labels_option ->
** End-of-stream conflict on SEMI PIPE LBRACE
**   There is a tension between
**   (1) reducing production fence_labels_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 68:
## Known stack suffix:
## LBRACE
## LR(1) items:
fence_labels_option -> LBRACE . name_set RBRACE LBRACE name_set RBRACE [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On name_set shift to state 69
-- On name_list_ne shift to state 8
-- On name_list shift to state 74
-- On name shift to state 11
## Reductions:
-- On RBRACE
--   reduce production name_list ->

State 69:
## Known stack suffix:
## LBRACE name_set
## LR(1) items:
fence_labels_option -> LBRACE name_set . RBRACE LBRACE name_set RBRACE [ SEMI PIPE # ]
## Transitions:
-- On RBRACE shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## LBRACE name_set RBRACE
## LR(1) items:
fence_labels_option -> LBRACE name_set RBRACE . LBRACE name_set RBRACE [ SEMI PIPE # ]
## Transitions:
-- On LBRACE shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## LBRACE name_set RBRACE LBRACE
## LR(1) items:
fence_labels_option -> LBRACE name_set RBRACE LBRACE . name_set RBRACE [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On name_set shift to state 72
-- On name_list_ne shift to state 8
-- On name_list shift to state 74
-- On name shift to state 11
## Reductions:
-- On RBRACE
--   reduce production name_list ->

State 72:
## Known stack suffix:
## LBRACE name_set RBRACE LBRACE name_set
## LR(1) items:
fence_labels_option -> LBRACE name_set RBRACE LBRACE name_set . RBRACE [ SEMI PIPE # ]
## Transitions:
-- On RBRACE shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## LBRACE name_set RBRACE LBRACE name_set RBRACE
## LR(1) items:
fence_labels_option -> LBRACE name_set RBRACE LBRACE name_set RBRACE . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production fence_labels_option -> LBRACE name_set RBRACE LBRACE name_set RBRACE
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production fence_labels_option -> LBRACE name_set RBRACE LBRACE name_set RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 74:
## Known stack suffix:
## name_list
## LR(1) items:
name_set -> name_list . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production name_set -> name_list

State 75:
## Known stack suffix:
## FENCE annot_list_option fence_labels_option
## LR(1) items:
instr -> FENCE annot_list_option fence_labels_option . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> FENCE annot_list_option fence_labels_option
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> FENCE annot_list_option fence_labels_option
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 76:
## Known stack suffix:
## CODEVAR
## LR(1) items:
instr_option -> CODEVAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr_option -> CODEVAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> CODEVAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 77:
## Known stack suffix:
## CALL
## LR(1) items:
instr -> CALL . LBRAC name RBRAC [ SEMI PIPE # ]
## Transitions:
-- On LBRAC shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## CALL LBRAC
## LR(1) items:
instr -> CALL LBRAC . name RBRAC [ SEMI PIPE # ]
## Transitions:
-- On WRITE shift to state 3
-- On READ shift to state 4
-- On NAME shift to state 5
-- On FENCE shift to state 6
-- On BRANCH shift to state 7
-- On name shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## CALL LBRAC name
## LR(1) items:
instr -> CALL LBRAC name . RBRAC [ SEMI PIPE # ]
## Transitions:
-- On RBRAC shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## CALL LBRAC name RBRAC
## LR(1) items:
instr -> CALL LBRAC name RBRAC . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> CALL LBRAC name RBRAC
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> CALL LBRAC name RBRAC
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 81:
## Known stack suffix:
## BRANCH
## LR(1) items:
instr -> BRANCH . annot_list_option reg NAME [ SEMI PIPE # ]
instr -> BRANCH . annot_list_option NAME [ SEMI PIPE # ]
## Transitions:
-- On LBRAC shift to state 2
-- On annot_list_option shift to state 82
## Reductions:
-- On SYMB_REG REG NAME
--   reduce production annot_list_option ->

State 82:
## Known stack suffix:
## BRANCH annot_list_option
## LR(1) items:
instr -> BRANCH annot_list_option . reg NAME [ SEMI PIPE # ]
instr -> BRANCH annot_list_option . NAME [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 15
-- On REG shift to state 16
-- On NAME shift to state 83
-- On reg shift to state 84
## Reductions:

State 83:
## Known stack suffix:
## BRANCH annot_list_option NAME
## LR(1) items:
instr -> BRANCH annot_list_option NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> BRANCH annot_list_option NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BRANCH annot_list_option NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 84:
## Known stack suffix:
## BRANCH annot_list_option reg
## LR(1) items:
instr -> BRANCH annot_list_option reg . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## BRANCH annot_list_option reg NAME
## LR(1) items:
instr -> BRANCH annot_list_option reg NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr -> BRANCH annot_list_option reg NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BRANCH annot_list_option reg NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 86:
## Known stack suffix:
## NAME COLON instr_option
## LR(1) items:
instr_option -> NAME COLON instr_option . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr_option -> NAME COLON instr_option
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> NAME COLON instr_option
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 87:
## Known stack suffix:
## instr
## LR(1) items:
instr_option -> instr . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI PIPE #
--   reduce production instr_option -> instr
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> instr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 88:
## Known stack suffix:
## instr_option_seq
## LR(1) items:
instr_option_seq' -> instr_option_seq . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept instr_option_seq

State 89:
## Known stack suffix:
## instr_option
## LR(1) items:
instr_option_seq -> instr_option . [ # ]
instr_option_seq -> instr_option . SEMI instr_option_seq [ # ]
## Transitions:
-- On SEMI shift to state 90
## Reductions:
-- On #
--   reduce production instr_option_seq -> instr_option
** End-of-stream conflict on SEMI
**   There is a tension between
**   (1) reducing production instr_option_seq -> instr_option
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 90:
## Known stack suffix:
## instr_option SEMI
## LR(1) items:
instr_option_seq -> instr_option SEMI . instr_option_seq [ # ]
## Transitions:
-- On WRITE shift to state 1
-- On RMW shift to state 28
-- On READ shift to state 57
-- On NAME shift to state 61
-- On MOV shift to state 63
-- On FENCE shift to state 66
-- On CODEVAR shift to state 76
-- On CALL shift to state 77
-- On BRANCH shift to state 81
-- On instr_option_seq shift to state 91
-- On instr_option shift to state 89
-- On instr shift to state 87
## Reductions:
-- On SEMI #
--   reduce production instr_option ->
** End-of-stream conflict on WRITE SEMI RMW READ NAME MOV FENCE CODEVAR CALL BRANCH
**   There is a tension between
**   (1) reducing production instr_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 91:
## Known stack suffix:
## instr_option SEMI instr_option_seq
## LR(1) items:
instr_option_seq -> instr_option SEMI instr_option_seq . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production instr_option_seq -> instr_option SEMI instr_option_seq

State 92:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SEMI shift to state 93
-- On semi_opt shift to state 94
-- On main shift to state 136
## Reductions:
-- On PROC
--   reduce production semi_opt ->

State 93:
## Known stack suffix:
## SEMI
## LR(1) items:
semi_opt -> SEMI . [ PROC ]
## Transitions:
## Reductions:
-- On PROC
--   reduce production semi_opt -> SEMI

State 94:
## Known stack suffix:
## semi_opt
## LR(1) items:
main -> semi_opt . proc_list iol_list scopes_and_memory_map EOF [ # ]
## Transitions:
-- On PROC shift to state 95
-- On proc_list shift to state 99
## Reductions:

State 95:
## Known stack suffix:
## PROC
## LR(1) items:
proc_list -> PROC . SEMI [ WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH ]
proc_list -> PROC . PIPE proc_list [ WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH ]
## Transitions:
-- On SEMI shift to state 96
-- On PIPE shift to state 97
## Reductions:

State 96:
## Known stack suffix:
## PROC SEMI
## LR(1) items:
proc_list -> PROC SEMI . [ WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH ]
## Transitions:
## Reductions:
-- On WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH
--   reduce production proc_list -> PROC SEMI

State 97:
## Known stack suffix:
## PROC PIPE
## LR(1) items:
proc_list -> PROC PIPE . proc_list [ WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH ]
## Transitions:
-- On PROC shift to state 95
-- On proc_list shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## PROC PIPE proc_list
## LR(1) items:
proc_list -> PROC PIPE proc_list . [ WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH ]
## Transitions:
## Reductions:
-- On WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH
--   reduce production proc_list -> PROC PIPE proc_list

State 99:
## Known stack suffix:
## semi_opt proc_list
## LR(1) items:
main -> semi_opt proc_list . iol_list scopes_and_memory_map EOF [ # ]
## Transitions:
-- On WRITE shift to state 1
-- On RMW shift to state 28
-- On READ shift to state 57
-- On NAME shift to state 61
-- On MOV shift to state 63
-- On FENCE shift to state 66
-- On CODEVAR shift to state 76
-- On CALL shift to state 77
-- On BRANCH shift to state 81
-- On iol_list shift to state 100
-- On instr_option_list shift to state 130
-- On instr_option shift to state 133
-- On instr shift to state 87
## Reductions:
-- On SEMI PIPE
--   reduce production instr_option ->

State 100:
## Known stack suffix:
## semi_opt proc_list iol_list
## LR(1) items:
main -> semi_opt proc_list iol_list . scopes_and_memory_map EOF [ # ]
## Transitions:
-- On SCOPES shift to state 101
-- On scopes_and_memory_map shift to state 117
-- On scope_option shift to state 119
## Reductions:
-- On REGIONS EOF
--   reduce production scope_option ->

State 101:
## Known stack suffix:
## SCOPES
## LR(1) items:
scope_option -> SCOPES . COLON top_scope_tree [ REGIONS EOF ]
## Transitions:
-- On COLON shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## SCOPES COLON
## LR(1) items:
scope_option -> SCOPES COLON . top_scope_tree [ REGIONS EOF ]
## Transitions:
-- On LPAR shift to state 103
-- On top_scope_tree shift to state 115
-- On scope_tree_list shift to state 116
-- On scope_tree shift to state 109
## Reductions:

State 103:
## Known stack suffix:
## LPAR
## LR(1) items:
scope_tree -> LPAR . NAME scope_tree_list RPAR [ RPAR REGIONS LPAR EOF ]
scope_tree -> LPAR . NAME proc_list_sc RPAR [ RPAR REGIONS LPAR EOF ]
## Transitions:
-- On NAME shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## LPAR NAME
## LR(1) items:
scope_tree -> LPAR NAME . scope_tree_list RPAR [ RPAR REGIONS LPAR EOF ]
scope_tree -> LPAR NAME . proc_list_sc RPAR [ RPAR REGIONS LPAR EOF ]
## Transitions:
-- On PROC shift to state 105
-- On NUM shift to state 106
-- On LPAR shift to state 103
-- On scope_tree_list shift to state 107
-- On scope_tree shift to state 109
-- On proc_list_sc shift to state 111
-- On proc shift to state 113
## Reductions:
-- On RPAR
--   reduce production proc_list_sc ->

State 105:
## Known stack suffix:
## PROC
## LR(1) items:
proc -> PROC . [ RPAR PROC NUM ]
## Transitions:
## Reductions:
-- On RPAR PROC NUM
--   reduce production proc -> PROC

State 106:
## Known stack suffix:
## NUM
## LR(1) items:
proc -> NUM . [ RPAR PROC NUM ]
## Transitions:
## Reductions:
-- On RPAR PROC NUM
--   reduce production proc -> NUM

State 107:
## Known stack suffix:
## LPAR NAME scope_tree_list
## LR(1) items:
scope_tree -> LPAR NAME scope_tree_list . RPAR [ RPAR REGIONS LPAR EOF ]
## Transitions:
-- On RPAR shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## LPAR NAME scope_tree_list RPAR
## LR(1) items:
scope_tree -> LPAR NAME scope_tree_list RPAR . [ RPAR REGIONS LPAR EOF ]
## Transitions:
## Reductions:
-- On RPAR REGIONS LPAR EOF
--   reduce production scope_tree -> LPAR NAME scope_tree_list RPAR

State 109:
## Known stack suffix:
## scope_tree
## LR(1) items:
scope_tree_list -> scope_tree . [ RPAR REGIONS EOF ]
scope_tree_list -> scope_tree . scope_tree_list [ RPAR REGIONS EOF ]
## Transitions:
-- On LPAR shift to state 103
-- On scope_tree_list shift to state 110
-- On scope_tree shift to state 109
## Reductions:
-- On RPAR REGIONS EOF
--   reduce production scope_tree_list -> scope_tree

State 110:
## Known stack suffix:
## scope_tree scope_tree_list
## LR(1) items:
scope_tree_list -> scope_tree scope_tree_list . [ RPAR REGIONS EOF ]
## Transitions:
## Reductions:
-- On RPAR REGIONS EOF
--   reduce production scope_tree_list -> scope_tree scope_tree_list

State 111:
## Known stack suffix:
## LPAR NAME proc_list_sc
## LR(1) items:
scope_tree -> LPAR NAME proc_list_sc . RPAR [ RPAR REGIONS LPAR EOF ]
## Transitions:
-- On RPAR shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## LPAR NAME proc_list_sc RPAR
## LR(1) items:
scope_tree -> LPAR NAME proc_list_sc RPAR . [ RPAR REGIONS LPAR EOF ]
## Transitions:
## Reductions:
-- On RPAR REGIONS LPAR EOF
--   reduce production scope_tree -> LPAR NAME proc_list_sc RPAR

State 113:
## Known stack suffix:
## proc
## LR(1) items:
proc_list_sc -> proc . proc_list_sc [ RPAR ]
## Transitions:
-- On PROC shift to state 105
-- On NUM shift to state 106
-- On proc_list_sc shift to state 114
-- On proc shift to state 113
## Reductions:
-- On RPAR
--   reduce production proc_list_sc ->

State 114:
## Known stack suffix:
## proc proc_list_sc
## LR(1) items:
proc_list_sc -> proc proc_list_sc . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production proc_list_sc -> proc proc_list_sc

State 115:
## Known stack suffix:
## SCOPES COLON top_scope_tree
## LR(1) items:
scope_option -> SCOPES COLON top_scope_tree . [ REGIONS EOF ]
## Transitions:
## Reductions:
-- On REGIONS EOF
--   reduce production scope_option -> SCOPES COLON top_scope_tree

State 116:
## Known stack suffix:
## scope_tree_list
## LR(1) items:
top_scope_tree -> scope_tree_list . [ REGIONS EOF ]
## Transitions:
## Reductions:
-- On REGIONS EOF
--   reduce production top_scope_tree -> scope_tree_list

State 117:
## Known stack suffix:
## semi_opt proc_list iol_list scopes_and_memory_map
## LR(1) items:
main -> semi_opt proc_list iol_list scopes_and_memory_map . EOF [ # ]
## Transitions:
-- On EOF shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## semi_opt proc_list iol_list scopes_and_memory_map EOF
## LR(1) items:
main -> semi_opt proc_list iol_list scopes_and_memory_map EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> semi_opt proc_list iol_list scopes_and_memory_map EOF

State 119:
## Known stack suffix:
## scope_option
## LR(1) items:
scopes_and_memory_map -> scope_option . memory_map_option [ EOF ]
## Transitions:
-- On REGIONS shift to state 120
-- On memory_map_option shift to state 129
## Reductions:
-- On EOF
--   reduce production memory_map_option ->

State 120:
## Known stack suffix:
## REGIONS
## LR(1) items:
memory_map_option -> REGIONS . COLON memory_map [ EOF ]
## Transitions:
-- On COLON shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## REGIONS COLON
## LR(1) items:
memory_map_option -> REGIONS COLON . memory_map [ EOF ]
## Transitions:
-- On NAME shift to state 122
-- On memory_map_atom shift to state 125
-- On memory_map shift to state 128
## Reductions:
-- On EOF
--   reduce production memory_map ->

State 122:
## Known stack suffix:
## NAME
## LR(1) items:
memory_map_atom -> NAME . COLON NAME [ EOF COMMA ]
## Transitions:
-- On COLON shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## NAME COLON
## LR(1) items:
memory_map_atom -> NAME COLON . NAME [ EOF COMMA ]
## Transitions:
-- On NAME shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## NAME COLON NAME
## LR(1) items:
memory_map_atom -> NAME COLON NAME . [ EOF COMMA ]
## Transitions:
## Reductions:
-- On EOF COMMA
--   reduce production memory_map_atom -> NAME COLON NAME

State 125:
## Known stack suffix:
## memory_map_atom
## LR(1) items:
memory_map -> memory_map_atom . COMMA memory_map [ EOF ]
memory_map -> memory_map_atom . [ EOF ]
## Transitions:
-- On COMMA shift to state 126
## Reductions:
-- On EOF
--   reduce production memory_map -> memory_map_atom

State 126:
## Known stack suffix:
## memory_map_atom COMMA
## LR(1) items:
memory_map -> memory_map_atom COMMA . memory_map [ EOF ]
## Transitions:
-- On NAME shift to state 122
-- On memory_map_atom shift to state 125
-- On memory_map shift to state 127
## Reductions:
-- On EOF
--   reduce production memory_map ->

State 127:
## Known stack suffix:
## memory_map_atom COMMA memory_map
## LR(1) items:
memory_map -> memory_map_atom COMMA memory_map . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production memory_map -> memory_map_atom COMMA memory_map

State 128:
## Known stack suffix:
## REGIONS COLON memory_map
## LR(1) items:
memory_map_option -> REGIONS COLON memory_map . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production memory_map_option -> REGIONS COLON memory_map

State 129:
## Known stack suffix:
## scope_option memory_map_option
## LR(1) items:
scopes_and_memory_map -> scope_option memory_map_option . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production scopes_and_memory_map -> scope_option memory_map_option

State 130:
## Known stack suffix:
## instr_option_list
## LR(1) items:
iol_list -> instr_option_list . SEMI [ SCOPES REGIONS EOF ]
iol_list -> instr_option_list . SEMI iol_list [ SCOPES REGIONS EOF ]
## Transitions:
-- On SEMI shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## instr_option_list SEMI
## LR(1) items:
iol_list -> instr_option_list SEMI . [ SCOPES REGIONS EOF ]
iol_list -> instr_option_list SEMI . iol_list [ SCOPES REGIONS EOF ]
## Transitions:
-- On WRITE shift to state 1
-- On RMW shift to state 28
-- On READ shift to state 57
-- On NAME shift to state 61
-- On MOV shift to state 63
-- On FENCE shift to state 66
-- On CODEVAR shift to state 76
-- On CALL shift to state 77
-- On BRANCH shift to state 81
-- On iol_list shift to state 132
-- On instr_option_list shift to state 130
-- On instr_option shift to state 133
-- On instr shift to state 87
## Reductions:
-- On SEMI PIPE
--   reduce production instr_option ->
-- On SCOPES REGIONS EOF
--   reduce production iol_list -> instr_option_list SEMI

State 132:
## Known stack suffix:
## instr_option_list SEMI iol_list
## LR(1) items:
iol_list -> instr_option_list SEMI iol_list . [ SCOPES REGIONS EOF ]
## Transitions:
## Reductions:
-- On SCOPES REGIONS EOF
--   reduce production iol_list -> instr_option_list SEMI iol_list

State 133:
## Known stack suffix:
## instr_option
## LR(1) items:
instr_option_list -> instr_option . [ SEMI ]
instr_option_list -> instr_option . PIPE instr_option_list [ SEMI ]
## Transitions:
-- On PIPE shift to state 134
## Reductions:
-- On SEMI
--   reduce production instr_option_list -> instr_option

State 134:
## Known stack suffix:
## instr_option PIPE
## LR(1) items:
instr_option_list -> instr_option PIPE . instr_option_list [ SEMI ]
## Transitions:
-- On WRITE shift to state 1
-- On RMW shift to state 28
-- On READ shift to state 57
-- On NAME shift to state 61
-- On MOV shift to state 63
-- On FENCE shift to state 66
-- On CODEVAR shift to state 76
-- On CALL shift to state 77
-- On BRANCH shift to state 81
-- On instr_option_list shift to state 135
-- On instr_option shift to state 133
-- On instr shift to state 87
## Reductions:
-- On SEMI PIPE
--   reduce production instr_option ->

State 135:
## Known stack suffix:
## instr_option PIPE instr_option_list
## LR(1) items:
instr_option_list -> instr_option PIPE instr_option_list . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI
--   reduce production instr_option_list -> instr_option PIPE instr_option_list

State 136:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

