File "herdtools7.7.51-LISAParser.mly", line 24, characters 131-134:
Warning: the token CAS is unused.
File "herdtools7.7.51-LISAParser.mly", line 24, characters 140-143:
Warning: the token DOT is unused.
File "herdtools7.7.51-LISAParser.mly", line 24, characters 135-139:
Warning: the token EXCH is unused.
File "herdtools7.7.51-LISAParser.mly", line 31, characters 16-25:
Warning: the token MEM_ANNOT is unused.
File "herdtools7.7.51-LISAParser.mly", line 40, characters 7-16:
Warning: the token SCOPETREE is unused.
File "herdtools7.7.51-LISAParser.mly", line 40, characters 17-23:
Warning: the token THREAD is unused.
Grammar has 31 nonterminal symbols, among which 2 start symbols.
Grammar has 39 terminal symbols.
Grammar has 73 productions.
nullable(top_scope_tree) = false
nullable(semi_opt) = true
nullable(scopes_and_memory_map) = true
nullable(scope_tree_list) = false
nullable(scope_tree) = false
nullable(scope_option) = true
nullable(reg_or_imm) = false
nullable(reg_or_addr) = false
nullable(reg) = false
nullable(proc_list_sc) = true
nullable(proc_list) = false
nullable(proc) = false
nullable(operation) = false
nullable(name_set) = true
nullable(name_list_ne) = false
nullable(name_list) = true
nullable(name) = false
nullable(memory_map_option) = true
nullable(memory_map_atom) = false
nullable(memory_map) = true
nullable(main) = false
nullable(k) = false
nullable(iol_list) = false
nullable(instr_option_seq) = true
nullable(instr_option_list) = true
nullable(instr_option) = true
nullable(instr) = false
nullable(fence_labels_option) = true
nullable(any_value) = false
nullable(annot_list_option) = true
nullable(addr_op) = false
first(top_scope_tree) = LPAR
first(semi_opt) = SEMI
first(scopes_and_memory_map) = SCOPES REGIONS
first(scope_tree_list) = LPAR
first(scope_tree) = LPAR
first(scope_option) = SCOPES
first(reg_or_imm) = SYMB_REG REG NUM META
first(reg_or_addr) = WRITE SYMB_REG REG READ NAME FENCE BRANCH
first(reg) = SYMB_REG REG
first(proc_list_sc) = PROC NUM
first(proc_list) = PROC
first(proc) = PROC NUM
first(operation) = WRITE SYMB_REG REG READ NUM NAME META LPAR FENCE BRANCH
first(name_set) = WRITE READ NAME FENCE BRANCH
first(name_list_ne) = WRITE READ NAME FENCE BRANCH
first(name_list) = WRITE READ NAME FENCE BRANCH
first(name) = WRITE READ NAME FENCE BRANCH
first(memory_map_option) = REGIONS
first(memory_map_atom) = NAME
first(memory_map) = NAME
first(main) = SEMI PROC
first(k) = NUM META
first(iol_list) = WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH
first(instr_option_seq) = WRITE SEMI RMW READ NAME MOV FENCE CODEVAR CALL BRANCH
first(instr_option_list) = WRITE RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH
first(instr_option) = WRITE RMW READ NAME MOV FENCE CODEVAR CALL BRANCH
first(instr) = WRITE RMW READ MOV FENCE CALL BRANCH
first(fence_labels_option) = LBRACE
first(any_value) = WRITE SYMB_REG REG READ NUM NAME META FENCE BRANCH
first(annot_list_option) = LBRAC
first(addr_op) = WRITE SYMB_REG REG READ NAME FENCE BRANCH
minimal(top_scope_tree) = (* 3 *) LPAR NAME RPAR
minimal(semi_opt) = (* 0 *)
minimal(scopes_and_memory_map) = (* 0 *)
minimal(scope_tree_list) = (* 3 *) LPAR NAME RPAR
minimal(scope_tree) = (* 3 *) LPAR NAME RPAR
minimal(scope_option) = (* 0 *)
minimal(reg_or_imm) = (* 1 *) REG
minimal(reg_or_addr) = (* 1 *) REG
minimal(reg) = (* 1 *) REG
minimal(proc_list_sc) = (* 0 *)
minimal(proc_list) = (* 2 *) PROC SEMI
minimal(proc) = (* 1 *) PROC
minimal(operation) = (* 1 *) REG
minimal(name_set) = (* 0 *)
minimal(name_list_ne) = (* 1 *) NAME
minimal(name_list) = (* 0 *)
minimal(name) = (* 1 *) NAME
minimal(memory_map_option) = (* 0 *)
minimal(memory_map_atom) = (* 3 *) NAME COLON NAME
minimal(memory_map) = (* 0 *)
minimal(main) = (* 4 *) PROC SEMI SEMI EOF
minimal(k) = (* 1 *) NUM
minimal(iol_list) = (* 1 *) SEMI
minimal(instr_option_seq) = (* 0 *)
minimal(instr_option_list) = (* 0 *)
minimal(instr_option) = (* 0 *)
minimal(instr) = (* 1 *) FENCE
minimal(fence_labels_option) = (* 0 *)
minimal(any_value) = (* 1 *) REG
minimal(annot_list_option) = (* 0 *)
minimal(addr_op) = (* 1 *) REG
follow(top_scope_tree) = REGIONS EOF
follow(semi_opt) = PROC
follow(scopes_and_memory_map) = EOF
follow(scope_tree_list) = RPAR REGIONS EOF
follow(scope_tree) = RPAR REGIONS LPAR EOF
follow(scope_option) = REGIONS EOF
follow(reg_or_imm) = SYMB_REG SEMI REG PIPE NUM META #
follow(reg_or_addr) = WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META FENCE BRANCH #
follow(reg) = WRITE SYMB_REG SEMI RPAR REG READ PLUS PIPE NUM NAME META LPAR FENCE BRANCH #
follow(proc_list_sc) = RPAR
follow(proc_list) = WRITE SEMI RMW READ PIPE NAME MOV FENCE CODEVAR CALL BRANCH
follow(proc) = RPAR PROC NUM
follow(operation) = WRITE SYMB_REG SEMI REG READ PIPE NAME FENCE BRANCH #
follow(name_set) = RBRACE
follow(name_list_ne) = RBRACE RBRAC
follow(name_list) = RBRACE RBRAC
follow(name) = WRITE SYMB_REG SEMI RPAR REG READ RBRACE RBRAC PLUS PIPE NUM NAME META FENCE COMMA BRANCH #
follow(memory_map_option) = EOF
follow(memory_map_atom) = EOF COMMA
follow(memory_map) = EOF
follow(main) = #
follow(k) = WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH #
follow(iol_list) = SCOPES REGIONS EOF
follow(instr_option_seq) = #
follow(instr_option_list) = SEMI
follow(instr_option) = SEMI PIPE #
follow(instr) = SEMI PIPE #
follow(fence_labels_option) = SEMI PIPE #
follow(any_value) = WRITE SYMB_REG SEMI RPAR REG READ PIPE NUM NAME META FENCE BRANCH #
follow(annot_list_option) = WRITE SYMB_REG SEMI REG READ PIPE NAME LBRACE FENCE BRANCH #
follow(addr_op) = SYMB_REG SEMI REG PIPE NUM META #
Built an LR(0) automaton with 137 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 137 states.
File "herdtools7.7.51-LISAParser.mly", line 38, characters 0-9:
Warning: the precedence level assigned to SEMI is never useful.
Warning: 42 end-of-stream conflicts were arbitrarily resolved.
File "herdtools7.7.51-LISAParser.mly", line 72, characters 4-16:
Warning: production instr_option_seq -> instr_option is never reduced.
Warning: in total, 1 production is never reduced.
59 out of 137 states have a default reduction.
45 out of 137 states are represented.
0 out of 74 symbols keep track of their start position.
0 out of 74 symbols keep track of their end position.
44 out of 75 productions exploit shiftreduce optimization.
0 out of 137 states can peek at an error.
385 functions before inlining, 60 functions after inlining.
