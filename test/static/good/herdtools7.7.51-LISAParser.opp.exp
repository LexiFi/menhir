File "herdtools7.7.51-LISAParser.mly", line 24, characters 131-134:
Warning: the token CAS is unused.
File "herdtools7.7.51-LISAParser.mly", line 24, characters 140-143:
Warning: the token DOT is unused.
File "herdtools7.7.51-LISAParser.mly", line 24, characters 135-139:
Warning: the token EXCH is unused.
File "herdtools7.7.51-LISAParser.mly", line 31, characters 16-25:
Warning: the token MEM_ANNOT is unused.
File "herdtools7.7.51-LISAParser.mly", line 40, characters 7-16:
Warning: the token SCOPETREE is unused.
File "herdtools7.7.51-LISAParser.mly", line 40, characters 17-23:
Warning: the token THREAD is unused.
%{
(****************************************************************************)
(*                           the diy toolsuite                              *)
(*                                                                          *)
(* Jade Alglave, University College London, UK.                             *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                          *)
(*                                                                          *)
(* Copyright 2013-present Institut National de Recherche en Informatique et *)
(* en Automatique and the authors. All rights reserved.                     *)
(*                                                                          *)
(* This software is governed by the CeCILL-B license under French law and   *)
(* abiding by the rules of distribution of free software. You can use,      *)
(* modify and/ or redistribute the software under the terms of the CeCILL-B *)
(* license as circulated by CEA, CNRS and INRIA at the following URL        *)
(* "http://www.cecill.info". We also give a copy in LICENSE.txt.            *)
(****************************************************************************)

module Bell = BellBase
open Bell
let mk_sym s = Constant.Symbolic (s,0)
%}
%start instr_option_seq
%start main
%token ADD
%token AND
%token BRANCH
%token CALL
%token CAS
%token <string> CODEVAR
%token COLON
%token COMMA
%token DOT
%token EOF
%token EQ
%token EXCH
%token FENCE
%token LBRAC
%token LBRACE
%token LPAR
%token <string> MEM_ANNOT
%token <string> META
%token MOV
%token <string> NAME
%token NEQ
%token <int> NUM
%token PIPE
%token PLUS
%token <int> PROC
%token RBRAC
%token RBRACE
%token READ
%token <BellBase.reg> REG
%token REGIONS
%token RMW
%token RPAR
%token SCOPES
%token SCOPETREE
%token SEMI
%token <BellBase.reg> SYMB_REG
%token THREAD
%token WRITE
%token XOR
%nonassoc SEMI
%type <BellBase.parsedPseudo list> instr_option_seq
%type <int list * (BellBase.parsedPseudo) list list * MiscParser.extra_data > main
%type <BellInfo.test> scopes_and_memory_map
%%

main:
  _1 = semi_opt _2 = proc_list _3 = iol_list _4 = scopes_and_memory_map _5 = EOF
    {   ( _2,_3, MiscParser.BellExtra _4 )}

semi_opt:
  
    {  ( () )}
| _1 = SEMI
    {       ( () )}

proc_list:
  _1 = PROC _2 = SEMI
    {    ([_1])}
| _1 = PROC _2 = PIPE _3 = proc_list
    {                       ( _1::_3 )}

instr_option:
  
    {             ( Nop )}
| _1 = NAME _2 = COLON _3 = instr_option
    {                          ( Label (_1,_3) )}
| _1 = instr
    {             ( Instruction _1)}
| _1 = CODEVAR
    {             ( Symbolic _1 )}

instr_option_list:
  _1 = instr_option
    {      ([_1])}
| _1 = instr_option _2 = PIPE _3 = instr_option_list
    {      (_1::_3)}

instr_option_seq:
  _1 = instr_option
    {      ([_1])}
| _1 = instr_option _2 = SEMI _3 = instr_option_seq
    {      (_1::_3)}

iol_list:
  _1 = instr_option_list _2 = SEMI
    {    ([_1])}
| _1 = instr_option_list _2 = SEMI _3 = iol_list
    {                                   (_1::_3)}

name:
  _1 = NAME
    {       ( _1)}
| _1 = READ
    {       ("r")}
| _1 = WRITE
    {        ("w")}
| _1 = BRANCH
    {         ("b")}
| _1 = FENCE
    {        ("f")}

name_list_ne:
  _1 = name _2 = COMMA _3 = name_list_ne
    {  (_1::_3)}
| _1 = name
    {  ([_1])}

name_list:
  _1 = name_list_ne
    {               (_1)}
| 
    {  ([])}

name_set:
  _1 = name_list
    {            ( Label.Set.of_list _1)}

annot_list_option:
  _1 = LBRAC _2 = name_list _3 = RBRAC
    {                        (_2)}
| 
    {  ([])}

reg:
  _1 = REG
    {      ( _1)}
| _1 = SYMB_REG
    {           ( _1 )}

reg_or_addr:
  _1 = reg
    {       (Rega _1)}
| _1 = name
    {       ( Abs (mk_sym _1))}

k:
  _1 = NUM
    {      ( MetaConst.Int _1 )}
| _1 = META
    {       ( MetaConst.Meta _1 )}

reg_or_imm:
  _1 = reg
    {      (Regi _1)}
| _1 = k
    {      ( Imm _1)}

any_value:
  _1 = reg_or_addr
    {              ( IAR_roa _1 )}
| _1 = k
    {    ( IAR_imm _1)}

addr_op:
  _1 = reg_or_addr
    {              (BellBase.Addr_op_atom(_1))}
| _1 = reg_or_addr _2 = PLUS _3 = reg_or_imm
    {                              ( BellBase.Addr_op_add(_1,_3) )}

operation:
  _1 = any_value
    {  ( RAI(_1) )}
| _1 = LPAR _2 = ADD _3 = any_value _4 = any_value _5 = RPAR
    { ( OP (Add,_3,_4) )}
| _1 = LPAR _2 = XOR _3 = any_value _4 = any_value _5 = RPAR
    { ( OP (Xor,_3,_4) )}
| _1 = LPAR _2 = AND _3 = any_value _4 = any_value _5 = RPAR
    { ( OP (And,_3,_4) )}
| _1 = LPAR _2 = EQ _3 = any_value _4 = any_value _5 = RPAR
    {  ( OP (Eq,_3,_4) )}
| _1 = LPAR _2 = NEQ _3 = any_value _4 = any_value _5 = RPAR
    {  ( OP (Neq,_3,_4) )}

fence_labels_option:
  
    {  ( None )}
| _1 = LBRACE _2 = name_set _3 = RBRACE _4 = LBRACE _5 = name_set _6 = RBRACE
    {                                                (Some(_2,_5))}

instr:
  _1 = READ _2 = annot_list_option _3 = reg _4 = addr_op
    {  ( Pld(_3,_4,_2) )}
| _1 = WRITE _2 = annot_list_option _3 = addr_op _4 = reg_or_imm
    {  ( Pst(_3,_4,_2) )}
| _1 = FENCE _2 = annot_list_option _3 = fence_labels_option
    { ( Pfence(Fence (_2,_3)) )}
| _1 = CALL _2 = LBRAC _3 = name _4 = RBRAC
    {  ( Pcall _3 )}
| _1 = RMW _2 = annot_list_option _3 = reg _4 = operation _5 = addr_op
    {  ( Prmw(_3,_4,_5,_2))}
| _1 = BRANCH _2 = annot_list_option _3 = reg _4 = NAME
    {  ( Pbranch (Some _3,_4,_2) )}
| _1 = BRANCH _2 = annot_list_option _3 = NAME
    {  ( Pbranch (None,_3,_2) )}
| _1 = MOV _2 = reg _3 = operation
    {  ( Pmov (_2,_3) )}

proc:
  _1 = PROC
    {        ( _1 )}
| _1 = NUM
    {       ( _1 )}

proc_list_sc:
  _1 = proc _2 = proc_list_sc
    {                    (_1::_2)}
| 
    {  ([])}

scope_tree_list:
  _1 = scope_tree
    {             ([_1])}
| _1 = scope_tree _2 = scope_tree_list
    {                             (_1::_2)}

scope_tree:
  _1 = LPAR _2 = NAME _3 = scope_tree_list _4 = RPAR
    {   (
   BellInfo.Children(_2,_3)
   )}
| _1 = LPAR _2 = NAME _3 = proc_list_sc _4 = RPAR
    {   (
   BellInfo.Leaf(_2,_3)
   )}

top_scope_tree:
  _1 = scope_tree_list
    {    ( let ts = _1 in
      match ts with
      | [t] -> t
      | _ -> BellInfo.Children ("",ts) )}

scope_option:
  _1 = SCOPES _2 = COLON _3 = top_scope_tree
    {                              (Some _3)}
| 
    {  (None)}

memory_map_option:
  _1 = REGIONS _2 = COLON _3 = memory_map
    {                           (Some _3)}
| 
    {  (None)}

memory_map_atom:
  _1 = NAME _2 = COLON _3 = NAME
    {( (_1,_3) )}

memory_map:
  _1 = memory_map_atom _2 = COMMA _3 = memory_map
    {                                    (_1::_3)}
| _1 = memory_map_atom
    {                   ([_1])}
| 
    {   ([]
    (*jade: todo memory map*)
   )}

scopes_and_memory_map:
  _1 = scope_option _2 = memory_map_option
    {( { BellInfo.scopes=_1; BellInfo.regions=_2; })}

%%
