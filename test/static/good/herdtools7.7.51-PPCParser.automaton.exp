State 0:
## Known stack suffix:
##
## LR(1) items:
instr_option_seq' -> . instr_option_seq [ # ]
## Transitions:
-- On XORI shift to state 1
-- On XORDOT shift to state 11
-- On XOR shift to state 17
-- On SYNC shift to state 23
-- On SUBI shift to state 24
-- On SUBFDOT shift to state 30
-- On SUBF shift to state 36
-- On SUBDOT shift to state 42
-- On SUB shift to state 48
-- On STWX shift to state 54
-- On STWU shift to state 60
-- On STWCX shift to state 71
-- On STW shift to state 77
-- On STMW shift to state 86
-- On STHX shift to state 93
-- On STH shift to state 99
-- On STDX shift to state 108
-- On STD shift to state 114
-- On STBX shift to state 123
-- On STB shift to state 129
-- On SRAWI shift to state 138
-- On SRAW shift to state 144
-- On SLW shift to state 150
-- On ORI shift to state 156
-- On ORDOT shift to state 162
-- On OR shift to state 168
-- On NORDOT shift to state 174
-- On NOR shift to state 180
-- On NEGDOT shift to state 186
-- On NEG shift to state 190
-- On NAME shift to state 194
-- On MULLI shift to state 202
-- On MULLDOT shift to state 208
-- On MULL shift to state 214
-- On MTLR shift to state 220
-- On MR shift to state 222
-- On MFLR shift to state 226
-- On LWZX shift to state 228
-- On LWZU shift to state 234
-- On LWZ shift to state 243
-- On LWSYNC shift to state 252
-- On LWARX shift to state 253
-- On LMW shift to state 259
-- On LI shift to state 266
-- On LHZX shift to state 270
-- On LHZ shift to state 276
-- On LDX shift to state 285
-- On LD shift to state 291
-- On LBZX shift to state 300
-- On LBZ shift to state 306
-- On ISYNC shift to state 315
-- On EIEIO shift to state 316
-- On DIVDOT shift to state 317
-- On DIV shift to state 323
-- On DCBF shift to state 329
-- On COMMENT shift to state 333
-- On CMPWI shift to state 335
-- On CMPW shift to state 345
-- On BNL shift to state 354
-- On BNG shift to state 356
-- On BNE shift to state 358
-- On BLT shift to state 360
-- On BLR shift to state 362
-- On BLE shift to state 363
-- On BL shift to state 365
-- On BGT shift to state 367
-- On BGE shift to state 369
-- On BEQ shift to state 371
-- On B shift to state 373
-- On ANDIDOT shift to state 375
-- On ANDDOT shift to state 381
-- On AND shift to state 387
-- On ADDI shift to state 393
-- On ADDDOT shift to state 399
-- On ADD shift to state 405
-- On instr_option_seq shift to state 413
-- On instr_option shift to state 414
-- On instr shift to state 412
## Reductions:
-- On SEMI reduce production instr_option ->
-- On # reduce production instr_option ->
** End-of-stream conflict on XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD
**   There is a tension between
**   (1) reducing production instr_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
## Known stack suffix:
## XORI
## LR(1) items:
instr -> XORI . reg COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 4
## Reductions:

State 2:
## Known stack suffix:
## SYMB_REG
## LR(1) items:
reg -> SYMB_REG . [ SEMI RPAR PIPE COMMA # ]
## Transitions:
## Reductions:
-- On SEMI reduce production reg -> SYMB_REG
-- On RPAR reduce production reg -> SYMB_REG
-- On PIPE reduce production reg -> SYMB_REG
-- On COMMA reduce production reg -> SYMB_REG
-- On # reduce production reg -> SYMB_REG
** End-of-stream conflict on SEMI RPAR PIPE COMMA
**   There is a tension between
**   (1) reducing production reg -> SYMB_REG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 3:
## Known stack suffix:
## ARCH_REG
## LR(1) items:
reg -> ARCH_REG . [ SEMI RPAR PIPE COMMA # ]
## Transitions:
## Reductions:
-- On SEMI reduce production reg -> ARCH_REG
-- On RPAR reduce production reg -> ARCH_REG
-- On PIPE reduce production reg -> ARCH_REG
-- On COMMA reduce production reg -> ARCH_REG
-- On # reduce production reg -> ARCH_REG
** End-of-stream conflict on SEMI RPAR PIPE COMMA
**   There is a tension between
**   (1) reducing production reg -> ARCH_REG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
## Known stack suffix:
## XORI reg
## LR(1) items:
instr -> XORI reg . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## XORI reg COMMA
## LR(1) items:
instr -> XORI reg COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## XORI reg COMMA reg
## LR(1) items:
instr -> XORI reg COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## XORI reg COMMA reg COMMA
## LR(1) items:
instr -> XORI reg COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 10
## Reductions:

State 8:
## Known stack suffix:
## NUM
## LR(1) items:
k -> NUM . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production k -> NUM
-- On PIPE reduce production k -> NUM
-- On # reduce production k -> NUM
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production k -> NUM
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
## Known stack suffix:
## CSTVAR
## LR(1) items:
k -> CSTVAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production k -> CSTVAR
-- On PIPE reduce production k -> CSTVAR
-- On # reduce production k -> CSTVAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production k -> CSTVAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 10:
## Known stack suffix:
## XORI reg COMMA reg COMMA k
## LR(1) items:
instr -> XORI reg COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> XORI reg COMMA reg COMMA k
-- On PIPE reduce production instr -> XORI reg COMMA reg COMMA k
-- On # reduce production instr -> XORI reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> XORI reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## XORDOT
## LR(1) items:
instr -> XORDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## XORDOT reg
## LR(1) items:
instr -> XORDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## XORDOT reg COMMA
## LR(1) items:
instr -> XORDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## XORDOT reg COMMA reg
## LR(1) items:
instr -> XORDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## XORDOT reg COMMA reg COMMA
## LR(1) items:
instr -> XORDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## XORDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> XORDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> XORDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> XORDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> XORDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> XORDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 17:
## Known stack suffix:
## XOR
## LR(1) items:
instr -> XOR . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## XOR reg
## LR(1) items:
instr -> XOR reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## XOR reg COMMA
## LR(1) items:
instr -> XOR reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## XOR reg COMMA reg
## LR(1) items:
instr -> XOR reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## XOR reg COMMA reg COMMA
## LR(1) items:
instr -> XOR reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## XOR reg COMMA reg COMMA reg
## LR(1) items:
instr -> XOR reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> XOR reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> XOR reg COMMA reg COMMA reg
-- On # reduce production instr -> XOR reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> XOR reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
## Known stack suffix:
## SYNC
## LR(1) items:
instr -> SYNC . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SYNC
-- On PIPE reduce production instr -> SYNC
-- On # reduce production instr -> SYNC
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SYNC
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 24:
## Known stack suffix:
## SUBI
## LR(1) items:
instr -> SUBI . reg COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## SUBI reg
## LR(1) items:
instr -> SUBI reg . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## SUBI reg COMMA
## LR(1) items:
instr -> SUBI reg COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## SUBI reg COMMA reg
## LR(1) items:
instr -> SUBI reg COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## SUBI reg COMMA reg COMMA
## LR(1) items:
instr -> SUBI reg COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## SUBI reg COMMA reg COMMA k
## LR(1) items:
instr -> SUBI reg COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SUBI reg COMMA reg COMMA k
-- On PIPE reduce production instr -> SUBI reg COMMA reg COMMA k
-- On # reduce production instr -> SUBI reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SUBI reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 30:
## Known stack suffix:
## SUBFDOT
## LR(1) items:
instr -> SUBFDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## SUBFDOT reg
## LR(1) items:
instr -> SUBFDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## SUBFDOT reg COMMA
## LR(1) items:
instr -> SUBFDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## SUBFDOT reg COMMA reg
## LR(1) items:
instr -> SUBFDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## SUBFDOT reg COMMA reg COMMA
## LR(1) items:
instr -> SUBFDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## SUBFDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> SUBFDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SUBFDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> SUBFDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> SUBFDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SUBFDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 36:
## Known stack suffix:
## SUBF
## LR(1) items:
instr -> SUBF . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## SUBF reg
## LR(1) items:
instr -> SUBF reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## SUBF reg COMMA
## LR(1) items:
instr -> SUBF reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## SUBF reg COMMA reg
## LR(1) items:
instr -> SUBF reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## SUBF reg COMMA reg COMMA
## LR(1) items:
instr -> SUBF reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## SUBF reg COMMA reg COMMA reg
## LR(1) items:
instr -> SUBF reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SUBF reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> SUBF reg COMMA reg COMMA reg
-- On # reduce production instr -> SUBF reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SUBF reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 42:
## Known stack suffix:
## SUBDOT
## LR(1) items:
instr -> SUBDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## SUBDOT reg
## LR(1) items:
instr -> SUBDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## SUBDOT reg COMMA
## LR(1) items:
instr -> SUBDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## SUBDOT reg COMMA reg
## LR(1) items:
instr -> SUBDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## SUBDOT reg COMMA reg COMMA
## LR(1) items:
instr -> SUBDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## SUBDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> SUBDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SUBDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> SUBDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> SUBDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SUBDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 48:
## Known stack suffix:
## SUB
## LR(1) items:
instr -> SUB . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## SUB reg
## LR(1) items:
instr -> SUB reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## SUB reg COMMA
## LR(1) items:
instr -> SUB reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## SUB reg COMMA reg
## LR(1) items:
instr -> SUB reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## SUB reg COMMA reg COMMA
## LR(1) items:
instr -> SUB reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## SUB reg COMMA reg COMMA reg
## LR(1) items:
instr -> SUB reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SUB reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> SUB reg COMMA reg COMMA reg
-- On # reduce production instr -> SUB reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SUB reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 54:
## Known stack suffix:
## STWX
## LR(1) items:
instr -> STWX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## STWX reg
## LR(1) items:
instr -> STWX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## STWX reg COMMA
## LR(1) items:
instr -> STWX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## STWX reg COMMA reg
## LR(1) items:
instr -> STWX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## STWX reg COMMA reg COMMA
## LR(1) items:
instr -> STWX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## STWX reg COMMA reg COMMA reg
## LR(1) items:
instr -> STWX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STWX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> STWX reg COMMA reg COMMA reg
-- On # reduce production instr -> STWX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STWX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 60:
## Known stack suffix:
## STWU
## LR(1) items:
instr -> STWU . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STWU . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## STWU reg
## LR(1) items:
instr -> STWU reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STWU reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## STWU reg COMMA
## LR(1) items:
instr -> STWU reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> STWU reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 65
## Reductions:

State 63:
## Known stack suffix:
## NUM
## LR(1) items:
idx -> NUM . [ LPAR COMMA ]
## Transitions:
## Reductions:
-- On LPAR reduce production idx -> NUM
-- On COMMA reduce production idx -> NUM

State 64:
## Known stack suffix:
## CSTVAR
## LR(1) items:
idx -> CSTVAR . [ LPAR COMMA ]
## Transitions:
## Reductions:
-- On LPAR reduce production idx -> CSTVAR
-- On COMMA reduce production idx -> CSTVAR

State 65:
## Known stack suffix:
## STWU reg COMMA idx
## LR(1) items:
instr -> STWU reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> STWU reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 66
-- On COMMA shift to state 69
## Reductions:

State 66:
## Known stack suffix:
## STWU reg COMMA idx LPAR
## LR(1) items:
instr -> STWU reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## STWU reg COMMA idx LPAR reg
## LR(1) items:
instr -> STWU reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## STWU reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> STWU reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STWU reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> STWU reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> STWU reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STWU reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 69:
## Known stack suffix:
## STWU reg COMMA idx COMMA
## LR(1) items:
instr -> STWU reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## STWU reg COMMA idx COMMA reg
## LR(1) items:
instr -> STWU reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STWU reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> STWU reg COMMA idx COMMA reg
-- On # reduce production instr -> STWU reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STWU reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 71:
## Known stack suffix:
## STWCX
## LR(1) items:
instr -> STWCX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## STWCX reg
## LR(1) items:
instr -> STWCX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## STWCX reg COMMA
## LR(1) items:
instr -> STWCX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## STWCX reg COMMA reg
## LR(1) items:
instr -> STWCX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## STWCX reg COMMA reg COMMA
## LR(1) items:
instr -> STWCX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## STWCX reg COMMA reg COMMA reg
## LR(1) items:
instr -> STWCX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STWCX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> STWCX reg COMMA reg COMMA reg
-- On # reduce production instr -> STWCX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STWCX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 77:
## Known stack suffix:
## STW
## LR(1) items:
instr -> STW . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STW . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## STW reg
## LR(1) items:
instr -> STW reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STW reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## STW reg COMMA
## LR(1) items:
instr -> STW reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> STW reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## STW reg COMMA idx
## LR(1) items:
instr -> STW reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> STW reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 81
-- On COMMA shift to state 84
## Reductions:

State 81:
## Known stack suffix:
## STW reg COMMA idx LPAR
## LR(1) items:
instr -> STW reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## STW reg COMMA idx LPAR reg
## LR(1) items:
instr -> STW reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## STW reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> STW reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STW reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> STW reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> STW reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STW reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 84:
## Known stack suffix:
## STW reg COMMA idx COMMA
## LR(1) items:
instr -> STW reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## STW reg COMMA idx COMMA reg
## LR(1) items:
instr -> STW reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STW reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> STW reg COMMA idx COMMA reg
-- On # reduce production instr -> STW reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STW reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 86:
## Known stack suffix:
## STMW
## LR(1) items:
instr -> STMW . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## STMW reg
## LR(1) items:
instr -> STMW reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## STMW reg COMMA
## LR(1) items:
instr -> STMW reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## STMW reg COMMA idx
## LR(1) items:
instr -> STMW reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## STMW reg COMMA idx LPAR
## LR(1) items:
instr -> STMW reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## STMW reg COMMA idx LPAR reg
## LR(1) items:
instr -> STMW reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## STMW reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> STMW reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STMW reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> STMW reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> STMW reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STMW reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 93:
## Known stack suffix:
## STHX
## LR(1) items:
instr -> STHX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## STHX reg
## LR(1) items:
instr -> STHX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## STHX reg COMMA
## LR(1) items:
instr -> STHX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## STHX reg COMMA reg
## LR(1) items:
instr -> STHX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## STHX reg COMMA reg COMMA
## LR(1) items:
instr -> STHX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## STHX reg COMMA reg COMMA reg
## LR(1) items:
instr -> STHX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STHX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> STHX reg COMMA reg COMMA reg
-- On # reduce production instr -> STHX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STHX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 99:
## Known stack suffix:
## STH
## LR(1) items:
instr -> STH . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STH . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## STH reg
## LR(1) items:
instr -> STH reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STH reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## STH reg COMMA
## LR(1) items:
instr -> STH reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> STH reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## STH reg COMMA idx
## LR(1) items:
instr -> STH reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> STH reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 103
-- On COMMA shift to state 106
## Reductions:

State 103:
## Known stack suffix:
## STH reg COMMA idx LPAR
## LR(1) items:
instr -> STH reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## STH reg COMMA idx LPAR reg
## LR(1) items:
instr -> STH reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## STH reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> STH reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STH reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> STH reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> STH reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STH reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 106:
## Known stack suffix:
## STH reg COMMA idx COMMA
## LR(1) items:
instr -> STH reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## STH reg COMMA idx COMMA reg
## LR(1) items:
instr -> STH reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STH reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> STH reg COMMA idx COMMA reg
-- On # reduce production instr -> STH reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STH reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 108:
## Known stack suffix:
## STDX
## LR(1) items:
instr -> STDX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## STDX reg
## LR(1) items:
instr -> STDX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## STDX reg COMMA
## LR(1) items:
instr -> STDX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## STDX reg COMMA reg
## LR(1) items:
instr -> STDX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## STDX reg COMMA reg COMMA
## LR(1) items:
instr -> STDX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## STDX reg COMMA reg COMMA reg
## LR(1) items:
instr -> STDX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STDX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> STDX reg COMMA reg COMMA reg
-- On # reduce production instr -> STDX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STDX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 114:
## Known stack suffix:
## STD
## LR(1) items:
instr -> STD . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STD . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## STD reg
## LR(1) items:
instr -> STD reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STD reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## STD reg COMMA
## LR(1) items:
instr -> STD reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> STD reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## STD reg COMMA idx
## LR(1) items:
instr -> STD reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> STD reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 118
-- On COMMA shift to state 121
## Reductions:

State 118:
## Known stack suffix:
## STD reg COMMA idx LPAR
## LR(1) items:
instr -> STD reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## STD reg COMMA idx LPAR reg
## LR(1) items:
instr -> STD reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## STD reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> STD reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STD reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> STD reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> STD reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STD reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 121:
## Known stack suffix:
## STD reg COMMA idx COMMA
## LR(1) items:
instr -> STD reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## STD reg COMMA idx COMMA reg
## LR(1) items:
instr -> STD reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STD reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> STD reg COMMA idx COMMA reg
-- On # reduce production instr -> STD reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STD reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 123:
## Known stack suffix:
## STBX
## LR(1) items:
instr -> STBX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## STBX reg
## LR(1) items:
instr -> STBX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## STBX reg COMMA
## LR(1) items:
instr -> STBX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## STBX reg COMMA reg
## LR(1) items:
instr -> STBX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## STBX reg COMMA reg COMMA
## LR(1) items:
instr -> STBX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## STBX reg COMMA reg COMMA reg
## LR(1) items:
instr -> STBX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STBX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> STBX reg COMMA reg COMMA reg
-- On # reduce production instr -> STBX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STBX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 129:
## Known stack suffix:
## STB
## LR(1) items:
instr -> STB . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STB . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## STB reg
## LR(1) items:
instr -> STB reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> STB reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## STB reg COMMA
## LR(1) items:
instr -> STB reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> STB reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## STB reg COMMA idx
## LR(1) items:
instr -> STB reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> STB reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 133
-- On COMMA shift to state 136
## Reductions:

State 133:
## Known stack suffix:
## STB reg COMMA idx LPAR
## LR(1) items:
instr -> STB reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## STB reg COMMA idx LPAR reg
## LR(1) items:
instr -> STB reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## STB reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> STB reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STB reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> STB reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> STB reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STB reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 136:
## Known stack suffix:
## STB reg COMMA idx COMMA
## LR(1) items:
instr -> STB reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## STB reg COMMA idx COMMA reg
## LR(1) items:
instr -> STB reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STB reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> STB reg COMMA idx COMMA reg
-- On # reduce production instr -> STB reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> STB reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 138:
## Known stack suffix:
## SRAWI
## LR(1) items:
instr -> SRAWI . reg COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## SRAWI reg
## LR(1) items:
instr -> SRAWI reg . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## SRAWI reg COMMA
## LR(1) items:
instr -> SRAWI reg COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## SRAWI reg COMMA reg
## LR(1) items:
instr -> SRAWI reg COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## SRAWI reg COMMA reg COMMA
## LR(1) items:
instr -> SRAWI reg COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## SRAWI reg COMMA reg COMMA k
## LR(1) items:
instr -> SRAWI reg COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SRAWI reg COMMA reg COMMA k
-- On PIPE reduce production instr -> SRAWI reg COMMA reg COMMA k
-- On # reduce production instr -> SRAWI reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SRAWI reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 144:
## Known stack suffix:
## SRAW
## LR(1) items:
instr -> SRAW . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## SRAW reg
## LR(1) items:
instr -> SRAW reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## SRAW reg COMMA
## LR(1) items:
instr -> SRAW reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## SRAW reg COMMA reg
## LR(1) items:
instr -> SRAW reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## SRAW reg COMMA reg COMMA
## LR(1) items:
instr -> SRAW reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## SRAW reg COMMA reg COMMA reg
## LR(1) items:
instr -> SRAW reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SRAW reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> SRAW reg COMMA reg COMMA reg
-- On # reduce production instr -> SRAW reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SRAW reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 150:
## Known stack suffix:
## SLW
## LR(1) items:
instr -> SLW . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## SLW reg
## LR(1) items:
instr -> SLW reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## SLW reg COMMA
## LR(1) items:
instr -> SLW reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## SLW reg COMMA reg
## LR(1) items:
instr -> SLW reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## SLW reg COMMA reg COMMA
## LR(1) items:
instr -> SLW reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## SLW reg COMMA reg COMMA reg
## LR(1) items:
instr -> SLW reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SLW reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> SLW reg COMMA reg COMMA reg
-- On # reduce production instr -> SLW reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> SLW reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 156:
## Known stack suffix:
## ORI
## LR(1) items:
instr -> ORI . reg COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## ORI reg
## LR(1) items:
instr -> ORI reg . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## ORI reg COMMA
## LR(1) items:
instr -> ORI reg COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## ORI reg COMMA reg
## LR(1) items:
instr -> ORI reg COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## ORI reg COMMA reg COMMA
## LR(1) items:
instr -> ORI reg COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## ORI reg COMMA reg COMMA k
## LR(1) items:
instr -> ORI reg COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ORI reg COMMA reg COMMA k
-- On PIPE reduce production instr -> ORI reg COMMA reg COMMA k
-- On # reduce production instr -> ORI reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ORI reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 162:
## Known stack suffix:
## ORDOT
## LR(1) items:
instr -> ORDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## ORDOT reg
## LR(1) items:
instr -> ORDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## ORDOT reg COMMA
## LR(1) items:
instr -> ORDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## ORDOT reg COMMA reg
## LR(1) items:
instr -> ORDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## ORDOT reg COMMA reg COMMA
## LR(1) items:
instr -> ORDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## ORDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> ORDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ORDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> ORDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> ORDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ORDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 168:
## Known stack suffix:
## OR
## LR(1) items:
instr -> OR . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## OR reg
## LR(1) items:
instr -> OR reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## OR reg COMMA
## LR(1) items:
instr -> OR reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## OR reg COMMA reg
## LR(1) items:
instr -> OR reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## OR reg COMMA reg COMMA
## LR(1) items:
instr -> OR reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## OR reg COMMA reg COMMA reg
## LR(1) items:
instr -> OR reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> OR reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> OR reg COMMA reg COMMA reg
-- On # reduce production instr -> OR reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> OR reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 174:
## Known stack suffix:
## NORDOT
## LR(1) items:
instr -> NORDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## NORDOT reg
## LR(1) items:
instr -> NORDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## NORDOT reg COMMA
## LR(1) items:
instr -> NORDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## NORDOT reg COMMA reg
## LR(1) items:
instr -> NORDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## NORDOT reg COMMA reg COMMA
## LR(1) items:
instr -> NORDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## NORDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> NORDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> NORDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> NORDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> NORDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> NORDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 180:
## Known stack suffix:
## NOR
## LR(1) items:
instr -> NOR . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## NOR reg
## LR(1) items:
instr -> NOR reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## NOR reg COMMA
## LR(1) items:
instr -> NOR reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## NOR reg COMMA reg
## LR(1) items:
instr -> NOR reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## NOR reg COMMA reg COMMA
## LR(1) items:
instr -> NOR reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## NOR reg COMMA reg COMMA reg
## LR(1) items:
instr -> NOR reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> NOR reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> NOR reg COMMA reg COMMA reg
-- On # reduce production instr -> NOR reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> NOR reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 186:
## Known stack suffix:
## NEGDOT
## LR(1) items:
instr -> NEGDOT . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## NEGDOT reg
## LR(1) items:
instr -> NEGDOT reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## NEGDOT reg COMMA
## LR(1) items:
instr -> NEGDOT reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## NEGDOT reg COMMA reg
## LR(1) items:
instr -> NEGDOT reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> NEGDOT reg COMMA reg
-- On PIPE reduce production instr -> NEGDOT reg COMMA reg
-- On # reduce production instr -> NEGDOT reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> NEGDOT reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 190:
## Known stack suffix:
## NEG
## LR(1) items:
instr -> NEG . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## NEG reg
## LR(1) items:
instr -> NEG reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## NEG reg COMMA
## LR(1) items:
instr -> NEG reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## NEG reg COMMA reg
## LR(1) items:
instr -> NEG reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> NEG reg COMMA reg
-- On PIPE reduce production instr -> NEG reg COMMA reg
-- On # reduce production instr -> NEG reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> NEG reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 194:
## Known stack suffix:
## NAME
## LR(1) items:
instr_option -> NAME . COLON instr_option [ SEMI PIPE # ]
instr_option -> NAME . LPAR reg_list RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 195
-- On COLON shift to state 201
## Reductions:

State 195:
## Known stack suffix:
## NAME LPAR
## LR(1) items:
instr_option -> NAME LPAR . reg_list RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg_list shift to state 196
-- On reg shift to state 198
## Reductions:
-- On RPAR reduce production reg_list ->

State 196:
## Known stack suffix:
## NAME LPAR reg_list
## LR(1) items:
instr_option -> NAME LPAR reg_list . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## NAME LPAR reg_list RPAR
## LR(1) items:
instr_option -> NAME LPAR reg_list RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option -> NAME LPAR reg_list RPAR
-- On PIPE reduce production instr_option -> NAME LPAR reg_list RPAR
-- On # reduce production instr_option -> NAME LPAR reg_list RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> NAME LPAR reg_list RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 198:
## Known stack suffix:
## reg
## LR(1) items:
reg_list -> reg . [ RPAR ]
reg_list -> reg . COMMA reg_list [ RPAR ]
## Transitions:
-- On COMMA shift to state 199
## Reductions:
-- On RPAR reduce production reg_list -> reg

State 199:
## Known stack suffix:
## reg COMMA
## LR(1) items:
reg_list -> reg COMMA . reg_list [ RPAR ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg_list shift to state 200
-- On reg shift to state 198
## Reductions:
-- On RPAR reduce production reg_list ->

State 200:
## Known stack suffix:
## reg COMMA reg_list
## LR(1) items:
reg_list -> reg COMMA reg_list . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR reduce production reg_list -> reg COMMA reg_list

State 201:
## Known stack suffix:
## NAME COLON
## LR(1) items:
instr_option -> NAME COLON . instr_option [ SEMI PIPE # ]
## Transitions:
-- On XORI shift to state 1
-- On XORDOT shift to state 11
-- On XOR shift to state 17
-- On SYNC shift to state 23
-- On SUBI shift to state 24
-- On SUBFDOT shift to state 30
-- On SUBF shift to state 36
-- On SUBDOT shift to state 42
-- On SUB shift to state 48
-- On STWX shift to state 54
-- On STWU shift to state 60
-- On STWCX shift to state 71
-- On STW shift to state 77
-- On STMW shift to state 86
-- On STHX shift to state 93
-- On STH shift to state 99
-- On STDX shift to state 108
-- On STD shift to state 114
-- On STBX shift to state 123
-- On STB shift to state 129
-- On SRAWI shift to state 138
-- On SRAW shift to state 144
-- On SLW shift to state 150
-- On ORI shift to state 156
-- On ORDOT shift to state 162
-- On OR shift to state 168
-- On NORDOT shift to state 174
-- On NOR shift to state 180
-- On NEGDOT shift to state 186
-- On NEG shift to state 190
-- On NAME shift to state 194
-- On MULLI shift to state 202
-- On MULLDOT shift to state 208
-- On MULL shift to state 214
-- On MTLR shift to state 220
-- On MR shift to state 222
-- On MFLR shift to state 226
-- On LWZX shift to state 228
-- On LWZU shift to state 234
-- On LWZ shift to state 243
-- On LWSYNC shift to state 252
-- On LWARX shift to state 253
-- On LMW shift to state 259
-- On LI shift to state 266
-- On LHZX shift to state 270
-- On LHZ shift to state 276
-- On LDX shift to state 285
-- On LD shift to state 291
-- On LBZX shift to state 300
-- On LBZ shift to state 306
-- On ISYNC shift to state 315
-- On EIEIO shift to state 316
-- On DIVDOT shift to state 317
-- On DIV shift to state 323
-- On DCBF shift to state 329
-- On COMMENT shift to state 333
-- On CMPWI shift to state 335
-- On CMPW shift to state 345
-- On BNL shift to state 354
-- On BNG shift to state 356
-- On BNE shift to state 358
-- On BLT shift to state 360
-- On BLR shift to state 362
-- On BLE shift to state 363
-- On BL shift to state 365
-- On BGT shift to state 367
-- On BGE shift to state 369
-- On BEQ shift to state 371
-- On B shift to state 373
-- On ANDIDOT shift to state 375
-- On ANDDOT shift to state 381
-- On AND shift to state 387
-- On ADDI shift to state 393
-- On ADDDOT shift to state 399
-- On ADD shift to state 405
-- On instr_option shift to state 411
-- On instr shift to state 412
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->
-- On # reduce production instr_option ->
** End-of-stream conflict on XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI PIPE ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD
**   There is a tension between
**   (1) reducing production instr_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 202:
## Known stack suffix:
## MULLI
## LR(1) items:
instr -> MULLI . reg COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## MULLI reg
## LR(1) items:
instr -> MULLI reg . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## MULLI reg COMMA
## LR(1) items:
instr -> MULLI reg COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## MULLI reg COMMA reg
## LR(1) items:
instr -> MULLI reg COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## MULLI reg COMMA reg COMMA
## LR(1) items:
instr -> MULLI reg COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## MULLI reg COMMA reg COMMA k
## LR(1) items:
instr -> MULLI reg COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> MULLI reg COMMA reg COMMA k
-- On PIPE reduce production instr -> MULLI reg COMMA reg COMMA k
-- On # reduce production instr -> MULLI reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> MULLI reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 208:
## Known stack suffix:
## MULLDOT
## LR(1) items:
instr -> MULLDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## MULLDOT reg
## LR(1) items:
instr -> MULLDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## MULLDOT reg COMMA
## LR(1) items:
instr -> MULLDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## MULLDOT reg COMMA reg
## LR(1) items:
instr -> MULLDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## MULLDOT reg COMMA reg COMMA
## LR(1) items:
instr -> MULLDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## MULLDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> MULLDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> MULLDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> MULLDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> MULLDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> MULLDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 214:
## Known stack suffix:
## MULL
## LR(1) items:
instr -> MULL . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## MULL reg
## LR(1) items:
instr -> MULL reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## MULL reg COMMA
## LR(1) items:
instr -> MULL reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## MULL reg COMMA reg
## LR(1) items:
instr -> MULL reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## MULL reg COMMA reg COMMA
## LR(1) items:
instr -> MULL reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## MULL reg COMMA reg COMMA reg
## LR(1) items:
instr -> MULL reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> MULL reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> MULL reg COMMA reg COMMA reg
-- On # reduce production instr -> MULL reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> MULL reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 220:
## Known stack suffix:
## MTLR
## LR(1) items:
instr -> MTLR . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## MTLR reg
## LR(1) items:
instr -> MTLR reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> MTLR reg
-- On PIPE reduce production instr -> MTLR reg
-- On # reduce production instr -> MTLR reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> MTLR reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 222:
## Known stack suffix:
## MR
## LR(1) items:
instr -> MR . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## MR reg
## LR(1) items:
instr -> MR reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## MR reg COMMA
## LR(1) items:
instr -> MR reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## MR reg COMMA reg
## LR(1) items:
instr -> MR reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> MR reg COMMA reg
-- On PIPE reduce production instr -> MR reg COMMA reg
-- On # reduce production instr -> MR reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> MR reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 226:
## Known stack suffix:
## MFLR
## LR(1) items:
instr -> MFLR . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## MFLR reg
## LR(1) items:
instr -> MFLR reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> MFLR reg
-- On PIPE reduce production instr -> MFLR reg
-- On # reduce production instr -> MFLR reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> MFLR reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 228:
## Known stack suffix:
## LWZX
## LR(1) items:
instr -> LWZX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## LWZX reg
## LR(1) items:
instr -> LWZX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## LWZX reg COMMA
## LR(1) items:
instr -> LWZX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## LWZX reg COMMA reg
## LR(1) items:
instr -> LWZX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## LWZX reg COMMA reg COMMA
## LR(1) items:
instr -> LWZX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## LWZX reg COMMA reg COMMA reg
## LR(1) items:
instr -> LWZX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LWZX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> LWZX reg COMMA reg COMMA reg
-- On # reduce production instr -> LWZX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LWZX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 234:
## Known stack suffix:
## LWZU
## LR(1) items:
instr -> LWZU . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LWZU . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## LWZU reg
## LR(1) items:
instr -> LWZU reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LWZU reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## LWZU reg COMMA
## LR(1) items:
instr -> LWZU reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> LWZU reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## LWZU reg COMMA idx
## LR(1) items:
instr -> LWZU reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> LWZU reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 238
-- On COMMA shift to state 241
## Reductions:

State 238:
## Known stack suffix:
## LWZU reg COMMA idx LPAR
## LR(1) items:
instr -> LWZU reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## LWZU reg COMMA idx LPAR reg
## LR(1) items:
instr -> LWZU reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## LWZU reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> LWZU reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LWZU reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> LWZU reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> LWZU reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LWZU reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 241:
## Known stack suffix:
## LWZU reg COMMA idx COMMA
## LR(1) items:
instr -> LWZU reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## LWZU reg COMMA idx COMMA reg
## LR(1) items:
instr -> LWZU reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LWZU reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> LWZU reg COMMA idx COMMA reg
-- On # reduce production instr -> LWZU reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LWZU reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 243:
## Known stack suffix:
## LWZ
## LR(1) items:
instr -> LWZ . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LWZ . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## LWZ reg
## LR(1) items:
instr -> LWZ reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LWZ reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## LWZ reg COMMA
## LR(1) items:
instr -> LWZ reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> LWZ reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## LWZ reg COMMA idx
## LR(1) items:
instr -> LWZ reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> LWZ reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 247
-- On COMMA shift to state 250
## Reductions:

State 247:
## Known stack suffix:
## LWZ reg COMMA idx LPAR
## LR(1) items:
instr -> LWZ reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## LWZ reg COMMA idx LPAR reg
## LR(1) items:
instr -> LWZ reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## LWZ reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> LWZ reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LWZ reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> LWZ reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> LWZ reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LWZ reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 250:
## Known stack suffix:
## LWZ reg COMMA idx COMMA
## LR(1) items:
instr -> LWZ reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## LWZ reg COMMA idx COMMA reg
## LR(1) items:
instr -> LWZ reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LWZ reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> LWZ reg COMMA idx COMMA reg
-- On # reduce production instr -> LWZ reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LWZ reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 252:
## Known stack suffix:
## LWSYNC
## LR(1) items:
instr -> LWSYNC . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LWSYNC
-- On PIPE reduce production instr -> LWSYNC
-- On # reduce production instr -> LWSYNC
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LWSYNC
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 253:
## Known stack suffix:
## LWARX
## LR(1) items:
instr -> LWARX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## LWARX reg
## LR(1) items:
instr -> LWARX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## LWARX reg COMMA
## LR(1) items:
instr -> LWARX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 256
## Reductions:

State 256:
## Known stack suffix:
## LWARX reg COMMA reg
## LR(1) items:
instr -> LWARX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## LWARX reg COMMA reg COMMA
## LR(1) items:
instr -> LWARX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## LWARX reg COMMA reg COMMA reg
## LR(1) items:
instr -> LWARX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LWARX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> LWARX reg COMMA reg COMMA reg
-- On # reduce production instr -> LWARX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LWARX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 259:
## Known stack suffix:
## LMW
## LR(1) items:
instr -> LMW . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## LMW reg
## LR(1) items:
instr -> LMW reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## LMW reg COMMA
## LR(1) items:
instr -> LMW reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## LMW reg COMMA idx
## LR(1) items:
instr -> LMW reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## LMW reg COMMA idx LPAR
## LR(1) items:
instr -> LMW reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## LMW reg COMMA idx LPAR reg
## LR(1) items:
instr -> LMW reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## LMW reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> LMW reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LMW reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> LMW reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> LMW reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LMW reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 266:
## Known stack suffix:
## LI
## LR(1) items:
instr -> LI . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## LI reg
## LR(1) items:
instr -> LI reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## LI reg COMMA
## LR(1) items:
instr -> LI reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## LI reg COMMA k
## LR(1) items:
instr -> LI reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LI reg COMMA k
-- On PIPE reduce production instr -> LI reg COMMA k
-- On # reduce production instr -> LI reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LI reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 270:
## Known stack suffix:
## LHZX
## LR(1) items:
instr -> LHZX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## LHZX reg
## LR(1) items:
instr -> LHZX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## LHZX reg COMMA
## LR(1) items:
instr -> LHZX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## LHZX reg COMMA reg
## LR(1) items:
instr -> LHZX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## LHZX reg COMMA reg COMMA
## LR(1) items:
instr -> LHZX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## LHZX reg COMMA reg COMMA reg
## LR(1) items:
instr -> LHZX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LHZX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> LHZX reg COMMA reg COMMA reg
-- On # reduce production instr -> LHZX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LHZX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 276:
## Known stack suffix:
## LHZ
## LR(1) items:
instr -> LHZ . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LHZ . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## LHZ reg
## LR(1) items:
instr -> LHZ reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LHZ reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## LHZ reg COMMA
## LR(1) items:
instr -> LHZ reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> LHZ reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## LHZ reg COMMA idx
## LR(1) items:
instr -> LHZ reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> LHZ reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 280
-- On COMMA shift to state 283
## Reductions:

State 280:
## Known stack suffix:
## LHZ reg COMMA idx LPAR
## LR(1) items:
instr -> LHZ reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## LHZ reg COMMA idx LPAR reg
## LR(1) items:
instr -> LHZ reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## LHZ reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> LHZ reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LHZ reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> LHZ reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> LHZ reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LHZ reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 283:
## Known stack suffix:
## LHZ reg COMMA idx COMMA
## LR(1) items:
instr -> LHZ reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## LHZ reg COMMA idx COMMA reg
## LR(1) items:
instr -> LHZ reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LHZ reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> LHZ reg COMMA idx COMMA reg
-- On # reduce production instr -> LHZ reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LHZ reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 285:
## Known stack suffix:
## LDX
## LR(1) items:
instr -> LDX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## LDX reg
## LR(1) items:
instr -> LDX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## LDX reg COMMA
## LR(1) items:
instr -> LDX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## LDX reg COMMA reg
## LR(1) items:
instr -> LDX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## LDX reg COMMA reg COMMA
## LR(1) items:
instr -> LDX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## LDX reg COMMA reg COMMA reg
## LR(1) items:
instr -> LDX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LDX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> LDX reg COMMA reg COMMA reg
-- On # reduce production instr -> LDX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LDX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 291:
## Known stack suffix:
## LD
## LR(1) items:
instr -> LD . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LD . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## LD reg
## LR(1) items:
instr -> LD reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LD reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## LD reg COMMA
## LR(1) items:
instr -> LD reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> LD reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## LD reg COMMA idx
## LR(1) items:
instr -> LD reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> LD reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 295
-- On COMMA shift to state 298
## Reductions:

State 295:
## Known stack suffix:
## LD reg COMMA idx LPAR
## LR(1) items:
instr -> LD reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## LD reg COMMA idx LPAR reg
## LR(1) items:
instr -> LD reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## LD reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> LD reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LD reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> LD reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> LD reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LD reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 298:
## Known stack suffix:
## LD reg COMMA idx COMMA
## LR(1) items:
instr -> LD reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## LD reg COMMA idx COMMA reg
## LR(1) items:
instr -> LD reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LD reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> LD reg COMMA idx COMMA reg
-- On # reduce production instr -> LD reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LD reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 300:
## Known stack suffix:
## LBZX
## LR(1) items:
instr -> LBZX . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## LBZX reg
## LR(1) items:
instr -> LBZX reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 302
## Reductions:

State 302:
## Known stack suffix:
## LBZX reg COMMA
## LR(1) items:
instr -> LBZX reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## LBZX reg COMMA reg
## LR(1) items:
instr -> LBZX reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## LBZX reg COMMA reg COMMA
## LR(1) items:
instr -> LBZX reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## LBZX reg COMMA reg COMMA reg
## LR(1) items:
instr -> LBZX reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LBZX reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> LBZX reg COMMA reg COMMA reg
-- On # reduce production instr -> LBZX reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LBZX reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 306:
## Known stack suffix:
## LBZ
## LR(1) items:
instr -> LBZ . reg COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LBZ . reg COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## LBZ reg
## LR(1) items:
instr -> LBZ reg . COMMA idx COMMA reg [ SEMI PIPE # ]
instr -> LBZ reg . COMMA idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## LBZ reg COMMA
## LR(1) items:
instr -> LBZ reg COMMA . idx COMMA reg [ SEMI PIPE # ]
instr -> LBZ reg COMMA . idx LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 63
-- On CSTVAR shift to state 64
-- On idx shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## LBZ reg COMMA idx
## LR(1) items:
instr -> LBZ reg COMMA idx . COMMA reg [ SEMI PIPE # ]
instr -> LBZ reg COMMA idx . LPAR reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On LPAR shift to state 310
-- On COMMA shift to state 313
## Reductions:

State 310:
## Known stack suffix:
## LBZ reg COMMA idx LPAR
## LR(1) items:
instr -> LBZ reg COMMA idx LPAR . reg RPAR [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## LBZ reg COMMA idx LPAR reg
## LR(1) items:
instr -> LBZ reg COMMA idx LPAR reg . RPAR [ SEMI PIPE # ]
## Transitions:
-- On RPAR shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## LBZ reg COMMA idx LPAR reg RPAR
## LR(1) items:
instr -> LBZ reg COMMA idx LPAR reg RPAR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LBZ reg COMMA idx LPAR reg RPAR
-- On PIPE reduce production instr -> LBZ reg COMMA idx LPAR reg RPAR
-- On # reduce production instr -> LBZ reg COMMA idx LPAR reg RPAR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LBZ reg COMMA idx LPAR reg RPAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 313:
## Known stack suffix:
## LBZ reg COMMA idx COMMA
## LR(1) items:
instr -> LBZ reg COMMA idx COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## LBZ reg COMMA idx COMMA reg
## LR(1) items:
instr -> LBZ reg COMMA idx COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LBZ reg COMMA idx COMMA reg
-- On PIPE reduce production instr -> LBZ reg COMMA idx COMMA reg
-- On # reduce production instr -> LBZ reg COMMA idx COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> LBZ reg COMMA idx COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 315:
## Known stack suffix:
## ISYNC
## LR(1) items:
instr -> ISYNC . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ISYNC
-- On PIPE reduce production instr -> ISYNC
-- On # reduce production instr -> ISYNC
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ISYNC
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 316:
## Known stack suffix:
## EIEIO
## LR(1) items:
instr -> EIEIO . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> EIEIO
-- On PIPE reduce production instr -> EIEIO
-- On # reduce production instr -> EIEIO
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> EIEIO
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 317:
## Known stack suffix:
## DIVDOT
## LR(1) items:
instr -> DIVDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## DIVDOT reg
## LR(1) items:
instr -> DIVDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## DIVDOT reg COMMA
## LR(1) items:
instr -> DIVDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## DIVDOT reg COMMA reg
## LR(1) items:
instr -> DIVDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## DIVDOT reg COMMA reg COMMA
## LR(1) items:
instr -> DIVDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## DIVDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> DIVDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> DIVDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> DIVDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> DIVDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> DIVDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 323:
## Known stack suffix:
## DIV
## LR(1) items:
instr -> DIV . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## DIV reg
## LR(1) items:
instr -> DIV reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## DIV reg COMMA
## LR(1) items:
instr -> DIV reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## DIV reg COMMA reg
## LR(1) items:
instr -> DIV reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## DIV reg COMMA reg COMMA
## LR(1) items:
instr -> DIV reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## DIV reg COMMA reg COMMA reg
## LR(1) items:
instr -> DIV reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> DIV reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> DIV reg COMMA reg COMMA reg
-- On # reduce production instr -> DIV reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> DIV reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 329:
## Known stack suffix:
## DCBF
## LR(1) items:
instr -> DCBF . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 330
## Reductions:

State 330:
## Known stack suffix:
## DCBF reg
## LR(1) items:
instr -> DCBF reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## DCBF reg COMMA
## LR(1) items:
instr -> DCBF reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## DCBF reg COMMA reg
## LR(1) items:
instr -> DCBF reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> DCBF reg COMMA reg
-- On PIPE reduce production instr -> DCBF reg COMMA reg
-- On # reduce production instr -> DCBF reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> DCBF reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 333:
## Known stack suffix:
## COMMENT
## LR(1) items:
instr -> COMMENT . STRING [ SEMI PIPE # ]
## Transitions:
-- On STRING shift to state 334
## Reductions:

State 334:
## Known stack suffix:
## COMMENT STRING
## LR(1) items:
instr -> COMMENT STRING . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> COMMENT STRING
-- On PIPE reduce production instr -> COMMENT STRING
-- On # reduce production instr -> COMMENT STRING
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> COMMENT STRING
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 335:
## Known stack suffix:
## CMPWI
## LR(1) items:
instr -> CMPWI . reg COMMA k [ SEMI PIPE # ]
instr -> CMPWI . crindex COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On CRK shift to state 336
-- On ARCH_REG shift to state 3
-- On reg shift to state 337
-- On crindex shift to state 340
## Reductions:

State 336:
## Known stack suffix:
## CRK
## LR(1) items:
crindex -> CRK . [ COMMA ]
## Transitions:
## Reductions:
-- On COMMA reduce production crindex -> CRK

State 337:
## Known stack suffix:
## CMPWI reg
## LR(1) items:
instr -> CMPWI reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## CMPWI reg COMMA
## LR(1) items:
instr -> CMPWI reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## CMPWI reg COMMA k
## LR(1) items:
instr -> CMPWI reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> CMPWI reg COMMA k
-- On PIPE reduce production instr -> CMPWI reg COMMA k
-- On # reduce production instr -> CMPWI reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> CMPWI reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 340:
## Known stack suffix:
## CMPWI crindex
## LR(1) items:
instr -> CMPWI crindex . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## CMPWI crindex COMMA
## LR(1) items:
instr -> CMPWI crindex COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 342
## Reductions:

State 342:
## Known stack suffix:
## CMPWI crindex COMMA reg
## LR(1) items:
instr -> CMPWI crindex COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## CMPWI crindex COMMA reg COMMA
## LR(1) items:
instr -> CMPWI crindex COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## CMPWI crindex COMMA reg COMMA k
## LR(1) items:
instr -> CMPWI crindex COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> CMPWI crindex COMMA reg COMMA k
-- On PIPE reduce production instr -> CMPWI crindex COMMA reg COMMA k
-- On # reduce production instr -> CMPWI crindex COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> CMPWI crindex COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 345:
## Known stack suffix:
## CMPW
## LR(1) items:
instr -> CMPW . crindex COMMA reg COMMA reg [ SEMI PIPE # ]
instr -> CMPW . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On CRK shift to state 336
-- On ARCH_REG shift to state 3
-- On reg shift to state 346
-- On crindex shift to state 349
## Reductions:

State 346:
## Known stack suffix:
## CMPW reg
## LR(1) items:
instr -> CMPW reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## CMPW reg COMMA
## LR(1) items:
instr -> CMPW reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## CMPW reg COMMA reg
## LR(1) items:
instr -> CMPW reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> CMPW reg COMMA reg
-- On PIPE reduce production instr -> CMPW reg COMMA reg
-- On # reduce production instr -> CMPW reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> CMPW reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 349:
## Known stack suffix:
## CMPW crindex
## LR(1) items:
instr -> CMPW crindex . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 350
## Reductions:

State 350:
## Known stack suffix:
## CMPW crindex COMMA
## LR(1) items:
instr -> CMPW crindex COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## CMPW crindex COMMA reg
## LR(1) items:
instr -> CMPW crindex COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## CMPW crindex COMMA reg COMMA
## LR(1) items:
instr -> CMPW crindex COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## CMPW crindex COMMA reg COMMA reg
## LR(1) items:
instr -> CMPW crindex COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> CMPW crindex COMMA reg COMMA reg
-- On PIPE reduce production instr -> CMPW crindex COMMA reg COMMA reg
-- On # reduce production instr -> CMPW crindex COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> CMPW crindex COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 354:
## Known stack suffix:
## BNL
## LR(1) items:
instr -> BNL . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## BNL NAME
## LR(1) items:
instr -> BNL NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BNL NAME
-- On PIPE reduce production instr -> BNL NAME
-- On # reduce production instr -> BNL NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BNL NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 356:
## Known stack suffix:
## BNG
## LR(1) items:
instr -> BNG . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 357
## Reductions:

State 357:
## Known stack suffix:
## BNG NAME
## LR(1) items:
instr -> BNG NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BNG NAME
-- On PIPE reduce production instr -> BNG NAME
-- On # reduce production instr -> BNG NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BNG NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 358:
## Known stack suffix:
## BNE
## LR(1) items:
instr -> BNE . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 359
## Reductions:

State 359:
## Known stack suffix:
## BNE NAME
## LR(1) items:
instr -> BNE NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BNE NAME
-- On PIPE reduce production instr -> BNE NAME
-- On # reduce production instr -> BNE NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BNE NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 360:
## Known stack suffix:
## BLT
## LR(1) items:
instr -> BLT . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## BLT NAME
## LR(1) items:
instr -> BLT NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BLT NAME
-- On PIPE reduce production instr -> BLT NAME
-- On # reduce production instr -> BLT NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BLT NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 362:
## Known stack suffix:
## BLR
## LR(1) items:
instr -> BLR . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BLR
-- On PIPE reduce production instr -> BLR
-- On # reduce production instr -> BLR
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BLR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 363:
## Known stack suffix:
## BLE
## LR(1) items:
instr -> BLE . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## BLE NAME
## LR(1) items:
instr -> BLE NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BLE NAME
-- On PIPE reduce production instr -> BLE NAME
-- On # reduce production instr -> BLE NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BLE NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 365:
## Known stack suffix:
## BL
## LR(1) items:
instr -> BL . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 366
## Reductions:

State 366:
## Known stack suffix:
## BL NAME
## LR(1) items:
instr -> BL NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BL NAME
-- On PIPE reduce production instr -> BL NAME
-- On # reduce production instr -> BL NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BL NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 367:
## Known stack suffix:
## BGT
## LR(1) items:
instr -> BGT . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 368
## Reductions:

State 368:
## Known stack suffix:
## BGT NAME
## LR(1) items:
instr -> BGT NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BGT NAME
-- On PIPE reduce production instr -> BGT NAME
-- On # reduce production instr -> BGT NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BGT NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 369:
## Known stack suffix:
## BGE
## LR(1) items:
instr -> BGE . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 370
## Reductions:

State 370:
## Known stack suffix:
## BGE NAME
## LR(1) items:
instr -> BGE NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BGE NAME
-- On PIPE reduce production instr -> BGE NAME
-- On # reduce production instr -> BGE NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BGE NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 371:
## Known stack suffix:
## BEQ
## LR(1) items:
instr -> BEQ . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 372
## Reductions:

State 372:
## Known stack suffix:
## BEQ NAME
## LR(1) items:
instr -> BEQ NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BEQ NAME
-- On PIPE reduce production instr -> BEQ NAME
-- On # reduce production instr -> BEQ NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> BEQ NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 373:
## Known stack suffix:
## B
## LR(1) items:
instr -> B . NAME [ SEMI PIPE # ]
## Transitions:
-- On NAME shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## B NAME
## LR(1) items:
instr -> B NAME . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> B NAME
-- On PIPE reduce production instr -> B NAME
-- On # reduce production instr -> B NAME
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> B NAME
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 375:
## Known stack suffix:
## ANDIDOT
## LR(1) items:
instr -> ANDIDOT . reg COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## ANDIDOT reg
## LR(1) items:
instr -> ANDIDOT reg . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## ANDIDOT reg COMMA
## LR(1) items:
instr -> ANDIDOT reg COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 378
## Reductions:

State 378:
## Known stack suffix:
## ANDIDOT reg COMMA reg
## LR(1) items:
instr -> ANDIDOT reg COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## ANDIDOT reg COMMA reg COMMA
## LR(1) items:
instr -> ANDIDOT reg COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## ANDIDOT reg COMMA reg COMMA k
## LR(1) items:
instr -> ANDIDOT reg COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ANDIDOT reg COMMA reg COMMA k
-- On PIPE reduce production instr -> ANDIDOT reg COMMA reg COMMA k
-- On # reduce production instr -> ANDIDOT reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ANDIDOT reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 381:
## Known stack suffix:
## ANDDOT
## LR(1) items:
instr -> ANDDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## ANDDOT reg
## LR(1) items:
instr -> ANDDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## ANDDOT reg COMMA
## LR(1) items:
instr -> ANDDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## ANDDOT reg COMMA reg
## LR(1) items:
instr -> ANDDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## ANDDOT reg COMMA reg COMMA
## LR(1) items:
instr -> ANDDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## ANDDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> ANDDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ANDDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> ANDDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> ANDDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ANDDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 387:
## Known stack suffix:
## AND
## LR(1) items:
instr -> AND . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## AND reg
## LR(1) items:
instr -> AND reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## AND reg COMMA
## LR(1) items:
instr -> AND reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 390
## Reductions:

State 390:
## Known stack suffix:
## AND reg COMMA reg
## LR(1) items:
instr -> AND reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 391
## Reductions:

State 391:
## Known stack suffix:
## AND reg COMMA reg COMMA
## LR(1) items:
instr -> AND reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## AND reg COMMA reg COMMA reg
## LR(1) items:
instr -> AND reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> AND reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> AND reg COMMA reg COMMA reg
-- On # reduce production instr -> AND reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> AND reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 393:
## Known stack suffix:
## ADDI
## LR(1) items:
instr -> ADDI . reg COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 394
## Reductions:

State 394:
## Known stack suffix:
## ADDI reg
## LR(1) items:
instr -> ADDI reg . COMMA reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## ADDI reg COMMA
## LR(1) items:
instr -> ADDI reg COMMA . reg COMMA k [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 396
## Reductions:

State 396:
## Known stack suffix:
## ADDI reg COMMA reg
## LR(1) items:
instr -> ADDI reg COMMA reg . COMMA k [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## ADDI reg COMMA reg COMMA
## LR(1) items:
instr -> ADDI reg COMMA reg COMMA . k [ SEMI PIPE # ]
## Transitions:
-- On NUM shift to state 8
-- On CSTVAR shift to state 9
-- On k shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## ADDI reg COMMA reg COMMA k
## LR(1) items:
instr -> ADDI reg COMMA reg COMMA k . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ADDI reg COMMA reg COMMA k
-- On PIPE reduce production instr -> ADDI reg COMMA reg COMMA k
-- On # reduce production instr -> ADDI reg COMMA reg COMMA k
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ADDI reg COMMA reg COMMA k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 399:
## Known stack suffix:
## ADDDOT
## LR(1) items:
instr -> ADDDOT . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## ADDDOT reg
## LR(1) items:
instr -> ADDDOT reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 401
## Reductions:

State 401:
## Known stack suffix:
## ADDDOT reg COMMA
## LR(1) items:
instr -> ADDDOT reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## ADDDOT reg COMMA reg
## LR(1) items:
instr -> ADDDOT reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## ADDDOT reg COMMA reg COMMA
## LR(1) items:
instr -> ADDDOT reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 404
## Reductions:

State 404:
## Known stack suffix:
## ADDDOT reg COMMA reg COMMA reg
## LR(1) items:
instr -> ADDDOT reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ADDDOT reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> ADDDOT reg COMMA reg COMMA reg
-- On # reduce production instr -> ADDDOT reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ADDDOT reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 405:
## Known stack suffix:
## ADD
## LR(1) items:
instr -> ADD . reg COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## ADD reg
## LR(1) items:
instr -> ADD reg . COMMA reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## ADD reg COMMA
## LR(1) items:
instr -> ADD reg COMMA . reg COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## ADD reg COMMA reg
## LR(1) items:
instr -> ADD reg COMMA reg . COMMA reg [ SEMI PIPE # ]
## Transitions:
-- On COMMA shift to state 409
## Reductions:

State 409:
## Known stack suffix:
## ADD reg COMMA reg COMMA
## LR(1) items:
instr -> ADD reg COMMA reg COMMA . reg [ SEMI PIPE # ]
## Transitions:
-- On SYMB_REG shift to state 2
-- On ARCH_REG shift to state 3
-- On reg shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## ADD reg COMMA reg COMMA reg
## LR(1) items:
instr -> ADD reg COMMA reg COMMA reg . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> ADD reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> ADD reg COMMA reg COMMA reg
-- On # reduce production instr -> ADD reg COMMA reg COMMA reg
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr -> ADD reg COMMA reg COMMA reg
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 411:
## Known stack suffix:
## NAME COLON instr_option
## LR(1) items:
instr_option -> NAME COLON instr_option . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option -> NAME COLON instr_option
-- On PIPE reduce production instr_option -> NAME COLON instr_option
-- On # reduce production instr_option -> NAME COLON instr_option
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> NAME COLON instr_option
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 412:
## Known stack suffix:
## instr
## LR(1) items:
instr_option -> instr . [ SEMI PIPE # ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option -> instr
-- On PIPE reduce production instr_option -> instr
-- On # reduce production instr_option -> instr
** End-of-stream conflict on SEMI PIPE
**   There is a tension between
**   (1) reducing production instr_option -> instr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 413:
## Known stack suffix:
## instr_option_seq
## LR(1) items:
instr_option_seq' -> instr_option_seq . [ # ]
## Transitions:
## Reductions:
-- On # accept instr_option_seq

State 414:
## Known stack suffix:
## instr_option
## LR(1) items:
instr_option_seq -> instr_option . [ # ]
instr_option_seq -> instr_option . SEMI instr_option_seq [ # ]
## Transitions:
-- On SEMI shift to state 415
## Reductions:
-- On # reduce production instr_option_seq -> instr_option
** End-of-stream conflict on SEMI
**   There is a tension between
**   (1) reducing production instr_option_seq -> instr_option
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 415:
## Known stack suffix:
## instr_option SEMI
## LR(1) items:
instr_option_seq -> instr_option SEMI . instr_option_seq [ # ]
## Transitions:
-- On XORI shift to state 1
-- On XORDOT shift to state 11
-- On XOR shift to state 17
-- On SYNC shift to state 23
-- On SUBI shift to state 24
-- On SUBFDOT shift to state 30
-- On SUBF shift to state 36
-- On SUBDOT shift to state 42
-- On SUB shift to state 48
-- On STWX shift to state 54
-- On STWU shift to state 60
-- On STWCX shift to state 71
-- On STW shift to state 77
-- On STMW shift to state 86
-- On STHX shift to state 93
-- On STH shift to state 99
-- On STDX shift to state 108
-- On STD shift to state 114
-- On STBX shift to state 123
-- On STB shift to state 129
-- On SRAWI shift to state 138
-- On SRAW shift to state 144
-- On SLW shift to state 150
-- On ORI shift to state 156
-- On ORDOT shift to state 162
-- On OR shift to state 168
-- On NORDOT shift to state 174
-- On NOR shift to state 180
-- On NEGDOT shift to state 186
-- On NEG shift to state 190
-- On NAME shift to state 194
-- On MULLI shift to state 202
-- On MULLDOT shift to state 208
-- On MULL shift to state 214
-- On MTLR shift to state 220
-- On MR shift to state 222
-- On MFLR shift to state 226
-- On LWZX shift to state 228
-- On LWZU shift to state 234
-- On LWZ shift to state 243
-- On LWSYNC shift to state 252
-- On LWARX shift to state 253
-- On LMW shift to state 259
-- On LI shift to state 266
-- On LHZX shift to state 270
-- On LHZ shift to state 276
-- On LDX shift to state 285
-- On LD shift to state 291
-- On LBZX shift to state 300
-- On LBZ shift to state 306
-- On ISYNC shift to state 315
-- On EIEIO shift to state 316
-- On DIVDOT shift to state 317
-- On DIV shift to state 323
-- On DCBF shift to state 329
-- On COMMENT shift to state 333
-- On CMPWI shift to state 335
-- On CMPW shift to state 345
-- On BNL shift to state 354
-- On BNG shift to state 356
-- On BNE shift to state 358
-- On BLT shift to state 360
-- On BLR shift to state 362
-- On BLE shift to state 363
-- On BL shift to state 365
-- On BGT shift to state 367
-- On BGE shift to state 369
-- On BEQ shift to state 371
-- On B shift to state 373
-- On ANDIDOT shift to state 375
-- On ANDDOT shift to state 381
-- On AND shift to state 387
-- On ADDI shift to state 393
-- On ADDDOT shift to state 399
-- On ADD shift to state 405
-- On instr_option_seq shift to state 416
-- On instr_option shift to state 414
-- On instr shift to state 412
## Reductions:
-- On SEMI reduce production instr_option ->
-- On # reduce production instr_option ->
** End-of-stream conflict on XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD
**   There is a tension between
**   (1) reducing production instr_option ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 416:
## Known stack suffix:
## instr_option SEMI instr_option_seq
## LR(1) items:
instr_option_seq -> instr_option SEMI instr_option_seq . [ # ]
## Transitions:
## Reductions:
-- On # reduce production instr_option_seq -> instr_option SEMI instr_option_seq

State 417:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SEMI shift to state 418
-- On semi_opt shift to state 419
-- On main shift to state 434
## Reductions:
-- On PROC reduce production semi_opt ->

State 418:
## Known stack suffix:
## SEMI
## LR(1) items:
semi_opt -> SEMI . [ PROC ]
## Transitions:
## Reductions:
-- On PROC reduce production semi_opt -> SEMI

State 419:
## Known stack suffix:
## semi_opt
## LR(1) items:
main -> semi_opt . proc_list iol_list EOF [ # ]
main -> semi_opt . proc_list EOF [ # ]
## Transitions:
-- On PROC shift to state 420
-- On proc_list shift to state 424
## Reductions:

State 420:
## Known stack suffix:
## PROC
## LR(1) items:
proc_list -> PROC . SEMI [ XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI PIPE ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EOF EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD ]
proc_list -> PROC . PIPE proc_list [ XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI PIPE ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EOF EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD ]
## Transitions:
-- On SEMI shift to state 421
-- On PIPE shift to state 422
## Reductions:

State 421:
## Known stack suffix:
## PROC SEMI
## LR(1) items:
proc_list -> PROC SEMI . [ XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI PIPE ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EOF EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD ]
## Transitions:
## Reductions:
-- On XORI reduce production proc_list -> PROC SEMI
-- On XORDOT reduce production proc_list -> PROC SEMI
-- On XOR reduce production proc_list -> PROC SEMI
-- On SYNC reduce production proc_list -> PROC SEMI
-- On SUBI reduce production proc_list -> PROC SEMI
-- On SUBFDOT reduce production proc_list -> PROC SEMI
-- On SUBF reduce production proc_list -> PROC SEMI
-- On SUBDOT reduce production proc_list -> PROC SEMI
-- On SUB reduce production proc_list -> PROC SEMI
-- On STWX reduce production proc_list -> PROC SEMI
-- On STWU reduce production proc_list -> PROC SEMI
-- On STWCX reduce production proc_list -> PROC SEMI
-- On STW reduce production proc_list -> PROC SEMI
-- On STMW reduce production proc_list -> PROC SEMI
-- On STHX reduce production proc_list -> PROC SEMI
-- On STH reduce production proc_list -> PROC SEMI
-- On STDX reduce production proc_list -> PROC SEMI
-- On STD reduce production proc_list -> PROC SEMI
-- On STBX reduce production proc_list -> PROC SEMI
-- On STB reduce production proc_list -> PROC SEMI
-- On SRAWI reduce production proc_list -> PROC SEMI
-- On SRAW reduce production proc_list -> PROC SEMI
-- On SLW reduce production proc_list -> PROC SEMI
-- On SEMI reduce production proc_list -> PROC SEMI
-- On PIPE reduce production proc_list -> PROC SEMI
-- On ORI reduce production proc_list -> PROC SEMI
-- On ORDOT reduce production proc_list -> PROC SEMI
-- On OR reduce production proc_list -> PROC SEMI
-- On NORDOT reduce production proc_list -> PROC SEMI
-- On NOR reduce production proc_list -> PROC SEMI
-- On NEGDOT reduce production proc_list -> PROC SEMI
-- On NEG reduce production proc_list -> PROC SEMI
-- On NAME reduce production proc_list -> PROC SEMI
-- On MULLI reduce production proc_list -> PROC SEMI
-- On MULLDOT reduce production proc_list -> PROC SEMI
-- On MULL reduce production proc_list -> PROC SEMI
-- On MTLR reduce production proc_list -> PROC SEMI
-- On MR reduce production proc_list -> PROC SEMI
-- On MFLR reduce production proc_list -> PROC SEMI
-- On LWZX reduce production proc_list -> PROC SEMI
-- On LWZU reduce production proc_list -> PROC SEMI
-- On LWZ reduce production proc_list -> PROC SEMI
-- On LWSYNC reduce production proc_list -> PROC SEMI
-- On LWARX reduce production proc_list -> PROC SEMI
-- On LMW reduce production proc_list -> PROC SEMI
-- On LI reduce production proc_list -> PROC SEMI
-- On LHZX reduce production proc_list -> PROC SEMI
-- On LHZ reduce production proc_list -> PROC SEMI
-- On LDX reduce production proc_list -> PROC SEMI
-- On LD reduce production proc_list -> PROC SEMI
-- On LBZX reduce production proc_list -> PROC SEMI
-- On LBZ reduce production proc_list -> PROC SEMI
-- On ISYNC reduce production proc_list -> PROC SEMI
-- On EOF reduce production proc_list -> PROC SEMI
-- On EIEIO reduce production proc_list -> PROC SEMI
-- On DIVDOT reduce production proc_list -> PROC SEMI
-- On DIV reduce production proc_list -> PROC SEMI
-- On DCBF reduce production proc_list -> PROC SEMI
-- On COMMENT reduce production proc_list -> PROC SEMI
-- On CMPWI reduce production proc_list -> PROC SEMI
-- On CMPW reduce production proc_list -> PROC SEMI
-- On BNL reduce production proc_list -> PROC SEMI
-- On BNG reduce production proc_list -> PROC SEMI
-- On BNE reduce production proc_list -> PROC SEMI
-- On BLT reduce production proc_list -> PROC SEMI
-- On BLR reduce production proc_list -> PROC SEMI
-- On BLE reduce production proc_list -> PROC SEMI
-- On BL reduce production proc_list -> PROC SEMI
-- On BGT reduce production proc_list -> PROC SEMI
-- On BGE reduce production proc_list -> PROC SEMI
-- On BEQ reduce production proc_list -> PROC SEMI
-- On B reduce production proc_list -> PROC SEMI
-- On ANDIDOT reduce production proc_list -> PROC SEMI
-- On ANDDOT reduce production proc_list -> PROC SEMI
-- On AND reduce production proc_list -> PROC SEMI
-- On ADDI reduce production proc_list -> PROC SEMI
-- On ADDDOT reduce production proc_list -> PROC SEMI
-- On ADD reduce production proc_list -> PROC SEMI

State 422:
## Known stack suffix:
## PROC PIPE
## LR(1) items:
proc_list -> PROC PIPE . proc_list [ XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI PIPE ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EOF EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD ]
## Transitions:
-- On PROC shift to state 420
-- On proc_list shift to state 423
## Reductions:

State 423:
## Known stack suffix:
## PROC PIPE proc_list
## LR(1) items:
proc_list -> PROC PIPE proc_list . [ XORI XORDOT XOR SYNC SUBI SUBFDOT SUBF SUBDOT SUB STWX STWU STWCX STW STMW STHX STH STDX STD STBX STB SRAWI SRAW SLW SEMI PIPE ORI ORDOT OR NORDOT NOR NEGDOT NEG NAME MULLI MULLDOT MULL MTLR MR MFLR LWZX LWZU LWZ LWSYNC LWARX LMW LI LHZX LHZ LDX LD LBZX LBZ ISYNC EOF EIEIO DIVDOT DIV DCBF COMMENT CMPWI CMPW BNL BNG BNE BLT BLR BLE BL BGT BGE BEQ B ANDIDOT ANDDOT AND ADDI ADDDOT ADD ]
## Transitions:
## Reductions:
-- On XORI reduce production proc_list -> PROC PIPE proc_list
-- On XORDOT reduce production proc_list -> PROC PIPE proc_list
-- On XOR reduce production proc_list -> PROC PIPE proc_list
-- On SYNC reduce production proc_list -> PROC PIPE proc_list
-- On SUBI reduce production proc_list -> PROC PIPE proc_list
-- On SUBFDOT reduce production proc_list -> PROC PIPE proc_list
-- On SUBF reduce production proc_list -> PROC PIPE proc_list
-- On SUBDOT reduce production proc_list -> PROC PIPE proc_list
-- On SUB reduce production proc_list -> PROC PIPE proc_list
-- On STWX reduce production proc_list -> PROC PIPE proc_list
-- On STWU reduce production proc_list -> PROC PIPE proc_list
-- On STWCX reduce production proc_list -> PROC PIPE proc_list
-- On STW reduce production proc_list -> PROC PIPE proc_list
-- On STMW reduce production proc_list -> PROC PIPE proc_list
-- On STHX reduce production proc_list -> PROC PIPE proc_list
-- On STH reduce production proc_list -> PROC PIPE proc_list
-- On STDX reduce production proc_list -> PROC PIPE proc_list
-- On STD reduce production proc_list -> PROC PIPE proc_list
-- On STBX reduce production proc_list -> PROC PIPE proc_list
-- On STB reduce production proc_list -> PROC PIPE proc_list
-- On SRAWI reduce production proc_list -> PROC PIPE proc_list
-- On SRAW reduce production proc_list -> PROC PIPE proc_list
-- On SLW reduce production proc_list -> PROC PIPE proc_list
-- On SEMI reduce production proc_list -> PROC PIPE proc_list
-- On PIPE reduce production proc_list -> PROC PIPE proc_list
-- On ORI reduce production proc_list -> PROC PIPE proc_list
-- On ORDOT reduce production proc_list -> PROC PIPE proc_list
-- On OR reduce production proc_list -> PROC PIPE proc_list
-- On NORDOT reduce production proc_list -> PROC PIPE proc_list
-- On NOR reduce production proc_list -> PROC PIPE proc_list
-- On NEGDOT reduce production proc_list -> PROC PIPE proc_list
-- On NEG reduce production proc_list -> PROC PIPE proc_list
-- On NAME reduce production proc_list -> PROC PIPE proc_list
-- On MULLI reduce production proc_list -> PROC PIPE proc_list
-- On MULLDOT reduce production proc_list -> PROC PIPE proc_list
-- On MULL reduce production proc_list -> PROC PIPE proc_list
-- On MTLR reduce production proc_list -> PROC PIPE proc_list
-- On MR reduce production proc_list -> PROC PIPE proc_list
-- On MFLR reduce production proc_list -> PROC PIPE proc_list
-- On LWZX reduce production proc_list -> PROC PIPE proc_list
-- On LWZU reduce production proc_list -> PROC PIPE proc_list
-- On LWZ reduce production proc_list -> PROC PIPE proc_list
-- On LWSYNC reduce production proc_list -> PROC PIPE proc_list
-- On LWARX reduce production proc_list -> PROC PIPE proc_list
-- On LMW reduce production proc_list -> PROC PIPE proc_list
-- On LI reduce production proc_list -> PROC PIPE proc_list
-- On LHZX reduce production proc_list -> PROC PIPE proc_list
-- On LHZ reduce production proc_list -> PROC PIPE proc_list
-- On LDX reduce production proc_list -> PROC PIPE proc_list
-- On LD reduce production proc_list -> PROC PIPE proc_list
-- On LBZX reduce production proc_list -> PROC PIPE proc_list
-- On LBZ reduce production proc_list -> PROC PIPE proc_list
-- On ISYNC reduce production proc_list -> PROC PIPE proc_list
-- On EOF reduce production proc_list -> PROC PIPE proc_list
-- On EIEIO reduce production proc_list -> PROC PIPE proc_list
-- On DIVDOT reduce production proc_list -> PROC PIPE proc_list
-- On DIV reduce production proc_list -> PROC PIPE proc_list
-- On DCBF reduce production proc_list -> PROC PIPE proc_list
-- On COMMENT reduce production proc_list -> PROC PIPE proc_list
-- On CMPWI reduce production proc_list -> PROC PIPE proc_list
-- On CMPW reduce production proc_list -> PROC PIPE proc_list
-- On BNL reduce production proc_list -> PROC PIPE proc_list
-- On BNG reduce production proc_list -> PROC PIPE proc_list
-- On BNE reduce production proc_list -> PROC PIPE proc_list
-- On BLT reduce production proc_list -> PROC PIPE proc_list
-- On BLR reduce production proc_list -> PROC PIPE proc_list
-- On BLE reduce production proc_list -> PROC PIPE proc_list
-- On BL reduce production proc_list -> PROC PIPE proc_list
-- On BGT reduce production proc_list -> PROC PIPE proc_list
-- On BGE reduce production proc_list -> PROC PIPE proc_list
-- On BEQ reduce production proc_list -> PROC PIPE proc_list
-- On B reduce production proc_list -> PROC PIPE proc_list
-- On ANDIDOT reduce production proc_list -> PROC PIPE proc_list
-- On ANDDOT reduce production proc_list -> PROC PIPE proc_list
-- On AND reduce production proc_list -> PROC PIPE proc_list
-- On ADDI reduce production proc_list -> PROC PIPE proc_list
-- On ADDDOT reduce production proc_list -> PROC PIPE proc_list
-- On ADD reduce production proc_list -> PROC PIPE proc_list

State 424:
## Known stack suffix:
## semi_opt proc_list
## LR(1) items:
main -> semi_opt proc_list . iol_list EOF [ # ]
main -> semi_opt proc_list . EOF [ # ]
## Transitions:
-- On XORI shift to state 1
-- On XORDOT shift to state 11
-- On XOR shift to state 17
-- On SYNC shift to state 23
-- On SUBI shift to state 24
-- On SUBFDOT shift to state 30
-- On SUBF shift to state 36
-- On SUBDOT shift to state 42
-- On SUB shift to state 48
-- On STWX shift to state 54
-- On STWU shift to state 60
-- On STWCX shift to state 71
-- On STW shift to state 77
-- On STMW shift to state 86
-- On STHX shift to state 93
-- On STH shift to state 99
-- On STDX shift to state 108
-- On STD shift to state 114
-- On STBX shift to state 123
-- On STB shift to state 129
-- On SRAWI shift to state 138
-- On SRAW shift to state 144
-- On SLW shift to state 150
-- On ORI shift to state 156
-- On ORDOT shift to state 162
-- On OR shift to state 168
-- On NORDOT shift to state 174
-- On NOR shift to state 180
-- On NEGDOT shift to state 186
-- On NEG shift to state 190
-- On NAME shift to state 194
-- On MULLI shift to state 202
-- On MULLDOT shift to state 208
-- On MULL shift to state 214
-- On MTLR shift to state 220
-- On MR shift to state 222
-- On MFLR shift to state 226
-- On LWZX shift to state 228
-- On LWZU shift to state 234
-- On LWZ shift to state 243
-- On LWSYNC shift to state 252
-- On LWARX shift to state 253
-- On LMW shift to state 259
-- On LI shift to state 266
-- On LHZX shift to state 270
-- On LHZ shift to state 276
-- On LDX shift to state 285
-- On LD shift to state 291
-- On LBZX shift to state 300
-- On LBZ shift to state 306
-- On ISYNC shift to state 315
-- On EOF shift to state 425
-- On EIEIO shift to state 316
-- On DIVDOT shift to state 317
-- On DIV shift to state 323
-- On DCBF shift to state 329
-- On COMMENT shift to state 333
-- On CMPWI shift to state 335
-- On CMPW shift to state 345
-- On BNL shift to state 354
-- On BNG shift to state 356
-- On BNE shift to state 358
-- On BLT shift to state 360
-- On BLR shift to state 362
-- On BLE shift to state 363
-- On BL shift to state 365
-- On BGT shift to state 367
-- On BGE shift to state 369
-- On BEQ shift to state 371
-- On B shift to state 373
-- On ANDIDOT shift to state 375
-- On ANDDOT shift to state 381
-- On AND shift to state 387
-- On ADDI shift to state 393
-- On ADDDOT shift to state 399
-- On ADD shift to state 405
-- On iol_list shift to state 426
-- On instr_option_list shift to state 428
-- On instr_option shift to state 431
-- On instr shift to state 412
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 425:
## Known stack suffix:
## semi_opt proc_list EOF
## LR(1) items:
main -> semi_opt proc_list EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> semi_opt proc_list EOF

State 426:
## Known stack suffix:
## semi_opt proc_list iol_list
## LR(1) items:
main -> semi_opt proc_list iol_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 427
## Reductions:

State 427:
## Known stack suffix:
## semi_opt proc_list iol_list EOF
## LR(1) items:
main -> semi_opt proc_list iol_list EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> semi_opt proc_list iol_list EOF

State 428:
## Known stack suffix:
## instr_option_list
## LR(1) items:
iol_list -> instr_option_list . SEMI [ EOF ]
iol_list -> instr_option_list . SEMI iol_list [ EOF ]
## Transitions:
-- On SEMI shift to state 429
## Reductions:

State 429:
## Known stack suffix:
## instr_option_list SEMI
## LR(1) items:
iol_list -> instr_option_list SEMI . [ EOF ]
iol_list -> instr_option_list SEMI . iol_list [ EOF ]
## Transitions:
-- On XORI shift to state 1
-- On XORDOT shift to state 11
-- On XOR shift to state 17
-- On SYNC shift to state 23
-- On SUBI shift to state 24
-- On SUBFDOT shift to state 30
-- On SUBF shift to state 36
-- On SUBDOT shift to state 42
-- On SUB shift to state 48
-- On STWX shift to state 54
-- On STWU shift to state 60
-- On STWCX shift to state 71
-- On STW shift to state 77
-- On STMW shift to state 86
-- On STHX shift to state 93
-- On STH shift to state 99
-- On STDX shift to state 108
-- On STD shift to state 114
-- On STBX shift to state 123
-- On STB shift to state 129
-- On SRAWI shift to state 138
-- On SRAW shift to state 144
-- On SLW shift to state 150
-- On ORI shift to state 156
-- On ORDOT shift to state 162
-- On OR shift to state 168
-- On NORDOT shift to state 174
-- On NOR shift to state 180
-- On NEGDOT shift to state 186
-- On NEG shift to state 190
-- On NAME shift to state 194
-- On MULLI shift to state 202
-- On MULLDOT shift to state 208
-- On MULL shift to state 214
-- On MTLR shift to state 220
-- On MR shift to state 222
-- On MFLR shift to state 226
-- On LWZX shift to state 228
-- On LWZU shift to state 234
-- On LWZ shift to state 243
-- On LWSYNC shift to state 252
-- On LWARX shift to state 253
-- On LMW shift to state 259
-- On LI shift to state 266
-- On LHZX shift to state 270
-- On LHZ shift to state 276
-- On LDX shift to state 285
-- On LD shift to state 291
-- On LBZX shift to state 300
-- On LBZ shift to state 306
-- On ISYNC shift to state 315
-- On EIEIO shift to state 316
-- On DIVDOT shift to state 317
-- On DIV shift to state 323
-- On DCBF shift to state 329
-- On COMMENT shift to state 333
-- On CMPWI shift to state 335
-- On CMPW shift to state 345
-- On BNL shift to state 354
-- On BNG shift to state 356
-- On BNE shift to state 358
-- On BLT shift to state 360
-- On BLR shift to state 362
-- On BLE shift to state 363
-- On BL shift to state 365
-- On BGT shift to state 367
-- On BGE shift to state 369
-- On BEQ shift to state 371
-- On B shift to state 373
-- On ANDIDOT shift to state 375
-- On ANDDOT shift to state 381
-- On AND shift to state 387
-- On ADDI shift to state 393
-- On ADDDOT shift to state 399
-- On ADD shift to state 405
-- On iol_list shift to state 430
-- On instr_option_list shift to state 428
-- On instr_option shift to state 431
-- On instr shift to state 412
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->
-- On EOF reduce production iol_list -> instr_option_list SEMI

State 430:
## Known stack suffix:
## instr_option_list SEMI iol_list
## LR(1) items:
iol_list -> instr_option_list SEMI iol_list . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production iol_list -> instr_option_list SEMI iol_list

State 431:
## Known stack suffix:
## instr_option
## LR(1) items:
instr_option_list -> instr_option . [ SEMI ]
instr_option_list -> instr_option . PIPE instr_option_list [ SEMI ]
## Transitions:
-- On PIPE shift to state 432
## Reductions:
-- On SEMI reduce production instr_option_list -> instr_option

State 432:
## Known stack suffix:
## instr_option PIPE
## LR(1) items:
instr_option_list -> instr_option PIPE . instr_option_list [ SEMI ]
## Transitions:
-- On XORI shift to state 1
-- On XORDOT shift to state 11
-- On XOR shift to state 17
-- On SYNC shift to state 23
-- On SUBI shift to state 24
-- On SUBFDOT shift to state 30
-- On SUBF shift to state 36
-- On SUBDOT shift to state 42
-- On SUB shift to state 48
-- On STWX shift to state 54
-- On STWU shift to state 60
-- On STWCX shift to state 71
-- On STW shift to state 77
-- On STMW shift to state 86
-- On STHX shift to state 93
-- On STH shift to state 99
-- On STDX shift to state 108
-- On STD shift to state 114
-- On STBX shift to state 123
-- On STB shift to state 129
-- On SRAWI shift to state 138
-- On SRAW shift to state 144
-- On SLW shift to state 150
-- On ORI shift to state 156
-- On ORDOT shift to state 162
-- On OR shift to state 168
-- On NORDOT shift to state 174
-- On NOR shift to state 180
-- On NEGDOT shift to state 186
-- On NEG shift to state 190
-- On NAME shift to state 194
-- On MULLI shift to state 202
-- On MULLDOT shift to state 208
-- On MULL shift to state 214
-- On MTLR shift to state 220
-- On MR shift to state 222
-- On MFLR shift to state 226
-- On LWZX shift to state 228
-- On LWZU shift to state 234
-- On LWZ shift to state 243
-- On LWSYNC shift to state 252
-- On LWARX shift to state 253
-- On LMW shift to state 259
-- On LI shift to state 266
-- On LHZX shift to state 270
-- On LHZ shift to state 276
-- On LDX shift to state 285
-- On LD shift to state 291
-- On LBZX shift to state 300
-- On LBZ shift to state 306
-- On ISYNC shift to state 315
-- On EIEIO shift to state 316
-- On DIVDOT shift to state 317
-- On DIV shift to state 323
-- On DCBF shift to state 329
-- On COMMENT shift to state 333
-- On CMPWI shift to state 335
-- On CMPW shift to state 345
-- On BNL shift to state 354
-- On BNG shift to state 356
-- On BNE shift to state 358
-- On BLT shift to state 360
-- On BLR shift to state 362
-- On BLE shift to state 363
-- On BL shift to state 365
-- On BGT shift to state 367
-- On BGE shift to state 369
-- On BEQ shift to state 371
-- On B shift to state 373
-- On ANDIDOT shift to state 375
-- On ANDDOT shift to state 381
-- On AND shift to state 387
-- On ADDI shift to state 393
-- On ADDDOT shift to state 399
-- On ADD shift to state 405
-- On instr_option_list shift to state 433
-- On instr_option shift to state 431
-- On instr shift to state 412
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 433:
## Known stack suffix:
## instr_option PIPE instr_option_list
## LR(1) items:
instr_option_list -> instr_option PIPE instr_option_list . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option_list -> instr_option PIPE instr_option_list

State 434:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

