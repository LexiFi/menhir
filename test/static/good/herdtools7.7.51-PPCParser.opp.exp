%{
(****************************************************************************)
(*                           the diy toolsuite                              *)
(*                                                                          *)
(* Jade Alglave, University College London, UK.                             *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                          *)
(*                                                                          *)
(* Copyright 2010-present Institut National de Recherche en Informatique et *)
(* en Automatique and the authors. All rights reserved.                     *)
(*                                                                          *)
(* This software is governed by the CeCILL-B license under French law and   *)
(* abiding by the rules of distribution of free software. You can use,      *)
(* modify and/ or redistribute the software under the terms of the CeCILL-B *)
(* license as circulated by CEA, CNRS and INRIA at the following URL        *)
(* "http://www.cecill.info". We also give a copy in LICENSE.txt.            *)
(****************************************************************************)

module PPC = PPCBase
open PPC
open MachSize
%}
%start instr_option_seq
%start main
%token ADD
%token ADDDOT
%token ADDI
%token AND
%token ANDDOT
%token ANDIDOT
%token <PPCBase.reg> ARCH_REG
%token B
%token BEQ
%token BGE
%token BGT
%token BL
%token BLE
%token BLR
%token BLT
%token BNE
%token BNG
%token BNL
%token CMPW
%token CMPWI
%token COLON
%token COMMA
%token COMMENT
%token <int> CRK
%token <string> CSTVAR
%token DCBF
%token DIV
%token DIVDOT
%token EIEIO
%token EOF
%token ISYNC
%token LBZ
%token LBZX
%token LD
%token LDX
%token LHZ
%token LHZX
%token LI
%token LMW
%token LPAR
%token LWARX
%token LWSYNC
%token LWZ
%token LWZU
%token LWZX
%token MFLR
%token MR
%token MTLR
%token MULL
%token MULLDOT
%token MULLI
%token <string> NAME
%token NEG
%token NEGDOT
%token NOR
%token NORDOT
%token <int> NUM
%token OR
%token ORDOT
%token ORI
%token PIPE
%token <int> PROC
%token RPAR
%token SEMI
%token SLW
%token SRAW
%token SRAWI
%token STB
%token STBX
%token STD
%token STDX
%token STH
%token STHX
%token STMW
%token <string> STRING
%token STW
%token STWCX
%token STWU
%token STWX
%token SUB
%token SUBDOT
%token SUBF
%token SUBFDOT
%token SUBI
%token <string> SYMB_REG
%token SYNC
%token XOR
%token XORDOT
%token XORI
%nonassoc SEMI
%type <PPCBase.parsedPseudo list> instr_option_seq
%type <int list * (PPCBase.parsedPseudo) list list> main
%%

main:
  _1 = semi_opt _2 = proc_list _3 = iol_list _4 = EOF
    {                                  ( _2,_3 )}
| _1 = semi_opt _2 = proc_list _3 = EOF
    {                         ( _2,[] )}

semi_opt:
  
    {  ( () )}
| _1 = SEMI
    {       ( () )}

proc_list:
  _1 = PROC _2 = SEMI
    {    ([_1])}
| _1 = PROC _2 = PIPE _3 = proc_list
    {                       ( _1::_3 )}

iol_list:
  _1 = instr_option_list _2 = SEMI
    {    ([_1])}
| _1 = instr_option_list _2 = SEMI _3 = iol_list
    {                                   (_1::_3)}

instr_option_list:
  _1 = instr_option
    {      ([_1])}
| _1 = instr_option _2 = PIPE _3 = instr_option_list
    {      (_1::_3)}

instr_option_seq:
  _1 = instr_option
    {      ([_1])}
| _1 = instr_option _2 = SEMI _3 = instr_option_seq
    {      (_1::_3)}

instr_option:
  
    {             ( Nop )}
| _1 = NAME _2 = COLON _3 = instr_option
    {                          ( Label (_1,_3) )}
| _1 = NAME _2 = LPAR _3 = reg_list _4 = RPAR
    {             ( Macro (_1,_3) )}
| _1 = instr
    {             ( Instruction _1)}

reg_list:
  
    {  ( [] )}
| _1 = reg
    {      ( [_1] )}
| _1 = reg _2 = COMMA _3 = reg_list
    {                     ( _1 :: _3 )}

instr:
  _1 = ADD _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Padd (DontSetCR0,_2,_4,_6) )}
| _1 = ADDDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Padd (SetCR0,_2,_4,_6) )}
| _1 = SUB _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Psub (DontSetCR0,_2,_4,_6) )}
| _1 = SUBDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Psub (SetCR0,_2,_4,_6) )}
| _1 = SUBF _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Psubf (DontSetCR0,_2,_4,_6) )}
| _1 = SUBFDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Psubf (SetCR0,_2,_4,_6) )}
| _1 = ADDI _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {    ( Paddi (_2,_4,_6) )}
| _1 = SUBI _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {      ( Paddi (_2,_4, match _6 with MetaConst.Meta _ as k -> k
                     | MetaConst.Int i -> MetaConst.Int(-i)) )}
| _1 = CMPWI _2 = reg _3 = COMMA _4 = k
    {    ( Pcmpwi (0,_2,_4) )}
| _1 = CMPWI _2 = crindex _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {    ( Pcmpwi (_2,_4,_6) )}
| _1 = CMPW _2 = crindex _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pcmpw (_2,_4,_6))}
| _1 = CMPW _2 = reg _3 = COMMA _4 = reg
    {    ( Pcmpw (0,_2,_4))}
| _1 = LI _2 = reg _3 = COMMA _4 = k
    {    ( Pli (_2,_4) )}
| _1 = XOR _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pxor (DontSetCR0,_2,_4,_6) )}
| _1 = XORDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pxor (SetCR0,_2,_4,_6) )}
| _1 = XORI _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {    ( Pxori (_2,_4,_6) )}
| _1 = AND _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pand (DontSetCR0,_2,_4,_6) )}
| _1 = ANDDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pand (SetCR0,_2,_4,_6) )}
| _1 = ANDIDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {    ( Pandi (_2,_4,_6) )}
| _1 = OR _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Por (DontSetCR0,_2,_4,_6) )}
| _1 = ORDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Por (SetCR0,_2,_4,_6) )}
| _1 = ORI _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {    ( Pori (_2,_4,_6) )}
| _1 = MULL _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pmull (DontSetCR0,_2,_4,_6) )}
| _1 = MULLDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pmull (SetCR0,_2,_4,_6) )}
| _1 = MULLI _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {    ( Pmulli (_2,_4,_6) )}
| _1 = DIV _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pdiv (DontSetCR0,_2,_4,_6) )}
| _1 = DIVDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pdiv (SetCR0,_2,_4,_6) )}
| _1 = LBZ _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pload (Byte,_2,_4,_6))}
| _1 = LBZ _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pload (Byte,_2,_4,_6))}
| _1 = LHZ _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pload (Short,_2,_4,_6))}
| _1 = LHZ _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pload (Short,_2,_4,_6))}
| _1 = LWZ _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pload (Word,_2,_4,_6))}
| _1 = LWZ _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pload (Word,_2,_4,_6))}
| _1 = LWZU _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Plwzu (_2,_4,_6))}
| _1 = LWZU _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Plwzu (_2,_4,_6))}
| _1 = LD _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pload (Quad,_2,_4,_6))}
| _1 = LD _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pload (Quad,_2,_4,_6))}
| _1 = LBZX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Ploadx (Byte,_2,_4,_6))}
| _1 = LHZX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Ploadx (Short,_2,_4,_6))}
| _1 = LWZX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Ploadx (Word,_2,_4,_6))}
| _1 = LDX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Ploadx (Quad,_2,_4,_6))}
| _1 = MR _2 = reg _3 = COMMA _4 = reg
    {    ( Pmr (_2,_4) )}
| _1 = STB _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pstore (Byte,_2,_4,_6) )}
| _1 = STB _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pstore (Byte,_2,_4,_6) )}
| _1 = STH _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pstore (Short,_2,_4,_6) )}
| _1 = STH _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pstore (Short,_2,_4,_6) )}
| _1 = STW _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pstore (Word,_2,_4,_6) )}
| _1 = STW _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pstore (Word,_2,_4,_6) )}
| _1 = STWU _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pstwu (_2,_4,_6) )}
| _1 = STWU _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pstwu (_2,_4,_6) )}
| _1 = STD _2 = reg _3 = COMMA _4 = idx _5 = COMMA _6 = reg
    {    ( Pstore (Quad,_2,_4,_6) )}
| _1 = STD _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {    ( Pstore (Quad,_2,_4,_6) )}
| _1 = STBX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pstorex (Byte,_2,_4,_6) )}
| _1 = STHX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pstorex (Short,_2,_4,_6) )}
| _1 = STWX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pstorex (Word,_2,_4,_6) )}
| _1 = STDX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pstorex (Quad,_2,_4,_6) )}
| _1 = LWARX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Plwarx (_2,_4,_6))}
| _1 = STWCX _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pstwcx (_2,_4,_6) )}
| _1 = SYNC
    {    ( Psync )}
| _1 = EIEIO
    {    ( Peieio )}
| _1 = LWSYNC
    {    ( Plwsync )}
| _1 = ISYNC
    {    ( Pisync )}
| _1 = DCBF _2 = reg _3 = COMMA _4 = reg
    {    ( Pdcbf (_2,_4) )}
| _1 = B _2 = NAME
    {           ( Pb _2 )}
| _1 = BEQ _2 = NAME
    {             ( Pbcc (Eq,_2) )}
| _1 = BNE _2 = NAME
    {             ( Pbcc (Ne,_2) )}
| _1 = BLT _2 = NAME
    {             ( Pbcc (Lt,_2) )}
| _1 = BGE _2 = NAME
    {             ( Pbcc (Ge,_2) )}
| _1 = BNL _2 = NAME
    {             ( Pbcc (Ge,_2) )}
| _1 = BGT _2 = NAME
    {             ( Pbcc (Gt,_2) )}
| _1 = BLE _2 = NAME
    {             ( Pbcc (Le,_2) )}
| _1 = BNG _2 = NAME
    {             ( Pbcc (Le,_2) )}
| _1 = NOR _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pnor (DontSetCR0,_2,_4,_6))}
| _1 = NORDOT _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pnor (SetCR0,_2,_4,_6))}
| _1 = NEG _2 = reg _3 = COMMA _4 = reg
    {    ( Pneg (DontSetCR0,_2,_4))}
| _1 = NEGDOT _2 = reg _3 = COMMA _4 = reg
    {    ( Pneg (SetCR0,_2,_4))}
| _1 = SLW _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Pslw (DontSetCR0,_2,_4,_6))}
| _1 = SRAWI _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = k
    {    ( Psrawi (DontSetCR0,_2,_4,_6))}
| _1 = SRAW _2 = reg _3 = COMMA _4 = reg _5 = COMMA _6 = reg
    {    ( Psraw (DontSetCR0,_2,_4,_6))}
| _1 = BL _2 = NAME
    {            ( Pbl _2 )}
| _1 = BLR
    {        ( Pblr )}
| _1 = MTLR _2 = reg
    {             ( Pmtlr _2)}
| _1 = MFLR _2 = reg
    {             ( Pmflr _2)}
| _1 = LMW _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {                                     ( Plmw (_2,_4,_6) )}
| _1 = STMW _2 = reg _3 = COMMA _4 = idx _5 = LPAR _6 = reg _7 = RPAR
    {                                      ( Pstmw (_2,_4,_6) )}
| _1 = COMMENT _2 = STRING
    {                   ( Pcomment _2 )}

k:
  _1 = NUM
    {       ( MetaConst.Int _1 )}
| _1 = CSTVAR
    {         ( MetaConst.Meta _1 )}

idx:
  _1 = NUM
    {       ( MetaConst.Int _1 )}
| _1 = CSTVAR
    {         ( MetaConst.Meta _1 )}

crindex:
  _1 = CRK
    {       ( _1 )}

reg:
  _1 = SYMB_REG
    {           ( Symbolic_reg _1 )}
| _1 = ARCH_REG
    {           ( _1 )}

%%
