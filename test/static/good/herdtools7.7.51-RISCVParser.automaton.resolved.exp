State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SEMI shift to state 1
-- On semi_opt shift to state 2
-- On main shift to state 104
## Reductions:
-- On PROC reduce production semi_opt ->

State 1:
## Known stack suffix:
## SEMI
## LR(1) items:
semi_opt -> SEMI . [ PROC ]
## Transitions:
## Reductions:
-- On PROC reduce production semi_opt -> SEMI

State 2:
## Known stack suffix:
## semi_opt
## LR(1) items:
main -> semi_opt . proc_list iol_list EOF [ # ]
## Transitions:
-- On PROC shift to state 3
-- On proc_list shift to state 7
## Reductions:

State 3:
## Known stack suffix:
## PROC
## LR(1) items:
proc_list -> PROC . SEMI [ STORE SEMI SC PIPE OPW OPIW OPI OP NAME LR LOAD LI J FENCETSO FENCEI FENCE BCC AMO ]
proc_list -> PROC . PIPE proc_list [ STORE SEMI SC PIPE OPW OPIW OPI OP NAME LR LOAD LI J FENCETSO FENCEI FENCE BCC AMO ]
## Transitions:
-- On SEMI shift to state 4
-- On PIPE shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## PROC SEMI
## LR(1) items:
proc_list -> PROC SEMI . [ STORE SEMI SC PIPE OPW OPIW OPI OP NAME LR LOAD LI J FENCETSO FENCEI FENCE BCC AMO ]
## Transitions:
## Reductions:
-- On STORE reduce production proc_list -> PROC SEMI
-- On SEMI reduce production proc_list -> PROC SEMI
-- On SC reduce production proc_list -> PROC SEMI
-- On PIPE reduce production proc_list -> PROC SEMI
-- On OPW reduce production proc_list -> PROC SEMI
-- On OPIW reduce production proc_list -> PROC SEMI
-- On OPI reduce production proc_list -> PROC SEMI
-- On OP reduce production proc_list -> PROC SEMI
-- On NAME reduce production proc_list -> PROC SEMI
-- On LR reduce production proc_list -> PROC SEMI
-- On LOAD reduce production proc_list -> PROC SEMI
-- On LI reduce production proc_list -> PROC SEMI
-- On J reduce production proc_list -> PROC SEMI
-- On FENCETSO reduce production proc_list -> PROC SEMI
-- On FENCEI reduce production proc_list -> PROC SEMI
-- On FENCE reduce production proc_list -> PROC SEMI
-- On BCC reduce production proc_list -> PROC SEMI
-- On AMO reduce production proc_list -> PROC SEMI

State 5:
## Known stack suffix:
## PROC PIPE
## LR(1) items:
proc_list -> PROC PIPE . proc_list [ STORE SEMI SC PIPE OPW OPIW OPI OP NAME LR LOAD LI J FENCETSO FENCEI FENCE BCC AMO ]
## Transitions:
-- On PROC shift to state 3
-- On proc_list shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## PROC PIPE proc_list
## LR(1) items:
proc_list -> PROC PIPE proc_list . [ STORE SEMI SC PIPE OPW OPIW OPI OP NAME LR LOAD LI J FENCETSO FENCEI FENCE BCC AMO ]
## Transitions:
## Reductions:
-- On STORE reduce production proc_list -> PROC PIPE proc_list
-- On SEMI reduce production proc_list -> PROC PIPE proc_list
-- On SC reduce production proc_list -> PROC PIPE proc_list
-- On PIPE reduce production proc_list -> PROC PIPE proc_list
-- On OPW reduce production proc_list -> PROC PIPE proc_list
-- On OPIW reduce production proc_list -> PROC PIPE proc_list
-- On OPI reduce production proc_list -> PROC PIPE proc_list
-- On OP reduce production proc_list -> PROC PIPE proc_list
-- On NAME reduce production proc_list -> PROC PIPE proc_list
-- On LR reduce production proc_list -> PROC PIPE proc_list
-- On LOAD reduce production proc_list -> PROC PIPE proc_list
-- On LI reduce production proc_list -> PROC PIPE proc_list
-- On J reduce production proc_list -> PROC PIPE proc_list
-- On FENCETSO reduce production proc_list -> PROC PIPE proc_list
-- On FENCEI reduce production proc_list -> PROC PIPE proc_list
-- On FENCE reduce production proc_list -> PROC PIPE proc_list
-- On BCC reduce production proc_list -> PROC PIPE proc_list
-- On AMO reduce production proc_list -> PROC PIPE proc_list

State 7:
## Known stack suffix:
## semi_opt proc_list
## LR(1) items:
main -> semi_opt proc_list . iol_list EOF [ # ]
## Transitions:
-- On STORE shift to state 8
-- On SC shift to state 21
-- On OPW shift to state 34
-- On OPIW shift to state 40
-- On OPI shift to state 48
-- On OP shift to state 54
-- On NAME shift to state 60
-- On LR shift to state 62
-- On LOAD shift to state 66
-- On LI shift to state 70
-- On J shift to state 74
-- On FENCETSO shift to state 76
-- On FENCEI shift to state 77
-- On FENCE shift to state 78
-- On BCC shift to state 82
-- On AMO shift to state 88
-- On iol_list shift to state 96
-- On instr_option_list shift to state 98
-- On instr_option shift to state 101
-- On instr shift to state 95
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 8:
## Known stack suffix:
## STORE
## LR(1) items:
instr -> STORE . reg COMMA addr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 11
## Reductions:

State 9:
## Known stack suffix:
## SYMB_REG
## LR(1) items:
reg -> SYMB_REG . [ SEMI RPAR PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production reg -> SYMB_REG
-- On RPAR reduce production reg -> SYMB_REG
-- On PIPE reduce production reg -> SYMB_REG
-- On COMMA reduce production reg -> SYMB_REG

State 10:
## Known stack suffix:
## ARCH_REG
## LR(1) items:
reg -> ARCH_REG . [ SEMI RPAR PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production reg -> ARCH_REG
-- On RPAR reduce production reg -> ARCH_REG
-- On PIPE reduce production reg -> ARCH_REG
-- On COMMA reduce production reg -> ARCH_REG

State 11:
## Known stack suffix:
## STORE reg
## LR(1) items:
instr -> STORE reg . COMMA addr [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## STORE reg COMMA
## LR(1) items:
instr -> STORE reg COMMA . addr [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 13
-- On LPAR shift to state 17
-- On addr shift to state 20
## Reductions:

State 13:
## Known stack suffix:
## NUM
## LR(1) items:
addr -> NUM . LPAR reg RPAR [ SEMI PIPE ]
## Transitions:
-- On LPAR shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## NUM LPAR
## LR(1) items:
addr -> NUM LPAR . reg RPAR [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## NUM LPAR reg
## LR(1) items:
addr -> NUM LPAR reg . RPAR [ SEMI PIPE ]
## Transitions:
-- On RPAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## NUM LPAR reg RPAR
## LR(1) items:
addr -> NUM LPAR reg RPAR . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production addr -> NUM LPAR reg RPAR
-- On PIPE reduce production addr -> NUM LPAR reg RPAR

State 17:
## Known stack suffix:
## LPAR
## LR(1) items:
addr -> LPAR . reg RPAR [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## LPAR reg
## LR(1) items:
addr -> LPAR reg . RPAR [ SEMI PIPE ]
## Transitions:
-- On RPAR shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## LPAR reg RPAR
## LR(1) items:
addr -> LPAR reg RPAR . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production addr -> LPAR reg RPAR
-- On PIPE reduce production addr -> LPAR reg RPAR

State 20:
## Known stack suffix:
## STORE reg COMMA addr
## LR(1) items:
instr -> STORE reg COMMA addr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> STORE reg COMMA addr
-- On PIPE reduce production instr -> STORE reg COMMA addr

State 21:
## Known stack suffix:
## SC
## LR(1) items:
instr -> SC . reg COMMA reg COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## SC reg
## LR(1) items:
instr -> SC reg . COMMA reg COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## SC reg COMMA
## LR(1) items:
instr -> SC reg COMMA . reg COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## SC reg COMMA reg
## LR(1) items:
instr -> SC reg COMMA reg . COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## SC reg COMMA reg COMMA
## LR(1) items:
instr -> SC reg COMMA reg COMMA . addr0 [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 26
-- On LPAR shift to state 30
-- On addr0 shift to state 33
## Reductions:

State 26:
## Known stack suffix:
## NUM
## LR(1) items:
addr0 -> NUM . LPAR reg RPAR [ SEMI PIPE ]
## Transitions:
-- On LPAR shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## NUM LPAR
## LR(1) items:
addr0 -> NUM LPAR . reg RPAR [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## NUM LPAR reg
## LR(1) items:
addr0 -> NUM LPAR reg . RPAR [ SEMI PIPE ]
## Transitions:
-- On RPAR shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## NUM LPAR reg RPAR
## LR(1) items:
addr0 -> NUM LPAR reg RPAR . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production addr0 -> NUM LPAR reg RPAR
-- On PIPE reduce production addr0 -> NUM LPAR reg RPAR

State 30:
## Known stack suffix:
## LPAR
## LR(1) items:
addr0 -> LPAR . reg RPAR [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## LPAR reg
## LR(1) items:
addr0 -> LPAR reg . RPAR [ SEMI PIPE ]
## Transitions:
-- On RPAR shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## LPAR reg RPAR
## LR(1) items:
addr0 -> LPAR reg RPAR . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production addr0 -> LPAR reg RPAR
-- On PIPE reduce production addr0 -> LPAR reg RPAR

State 33:
## Known stack suffix:
## SC reg COMMA reg COMMA addr0
## LR(1) items:
instr -> SC reg COMMA reg COMMA addr0 . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> SC reg COMMA reg COMMA addr0
-- On PIPE reduce production instr -> SC reg COMMA reg COMMA addr0

State 34:
## Known stack suffix:
## OPW
## LR(1) items:
instr -> OPW . reg COMMA reg COMMA reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## OPW reg
## LR(1) items:
instr -> OPW reg . COMMA reg COMMA reg [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## OPW reg COMMA
## LR(1) items:
instr -> OPW reg COMMA . reg COMMA reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## OPW reg COMMA reg
## LR(1) items:
instr -> OPW reg COMMA reg . COMMA reg [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## OPW reg COMMA reg COMMA
## LR(1) items:
instr -> OPW reg COMMA reg COMMA . reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## OPW reg COMMA reg COMMA reg
## LR(1) items:
instr -> OPW reg COMMA reg COMMA reg . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> OPW reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> OPW reg COMMA reg COMMA reg

State 40:
## Known stack suffix:
## OPIW
## LR(1) items:
instr -> OPIW . reg COMMA reg COMMA k [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## OPIW reg
## LR(1) items:
instr -> OPIW reg . COMMA reg COMMA k [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## OPIW reg COMMA
## LR(1) items:
instr -> OPIW reg COMMA . reg COMMA k [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## OPIW reg COMMA reg
## LR(1) items:
instr -> OPIW reg COMMA reg . COMMA k [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## OPIW reg COMMA reg COMMA
## LR(1) items:
instr -> OPIW reg COMMA reg COMMA . k [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 45
-- On META shift to state 46
-- On k shift to state 47
## Reductions:

State 45:
## Known stack suffix:
## NUM
## LR(1) items:
k -> NUM . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production k -> NUM
-- On PIPE reduce production k -> NUM

State 46:
## Known stack suffix:
## META
## LR(1) items:
k -> META . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production k -> META
-- On PIPE reduce production k -> META

State 47:
## Known stack suffix:
## OPIW reg COMMA reg COMMA k
## LR(1) items:
instr -> OPIW reg COMMA reg COMMA k . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> OPIW reg COMMA reg COMMA k
-- On PIPE reduce production instr -> OPIW reg COMMA reg COMMA k

State 48:
## Known stack suffix:
## OPI
## LR(1) items:
instr -> OPI . reg COMMA reg COMMA k [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## OPI reg
## LR(1) items:
instr -> OPI reg . COMMA reg COMMA k [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## OPI reg COMMA
## LR(1) items:
instr -> OPI reg COMMA . reg COMMA k [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## OPI reg COMMA reg
## LR(1) items:
instr -> OPI reg COMMA reg . COMMA k [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## OPI reg COMMA reg COMMA
## LR(1) items:
instr -> OPI reg COMMA reg COMMA . k [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 45
-- On META shift to state 46
-- On k shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## OPI reg COMMA reg COMMA k
## LR(1) items:
instr -> OPI reg COMMA reg COMMA k . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> OPI reg COMMA reg COMMA k
-- On PIPE reduce production instr -> OPI reg COMMA reg COMMA k

State 54:
## Known stack suffix:
## OP
## LR(1) items:
instr -> OP . reg COMMA reg COMMA reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## OP reg
## LR(1) items:
instr -> OP reg . COMMA reg COMMA reg [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## OP reg COMMA
## LR(1) items:
instr -> OP reg COMMA . reg COMMA reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## OP reg COMMA reg
## LR(1) items:
instr -> OP reg COMMA reg . COMMA reg [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## OP reg COMMA reg COMMA
## LR(1) items:
instr -> OP reg COMMA reg COMMA . reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## OP reg COMMA reg COMMA reg
## LR(1) items:
instr -> OP reg COMMA reg COMMA reg . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> OP reg COMMA reg COMMA reg
-- On PIPE reduce production instr -> OP reg COMMA reg COMMA reg

State 60:
## Known stack suffix:
## NAME
## LR(1) items:
instr_option -> NAME . COLON instr_option [ SEMI PIPE ]
## Transitions:
-- On COLON shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## NAME COLON
## LR(1) items:
instr_option -> NAME COLON . instr_option [ SEMI PIPE ]
## Transitions:
-- On STORE shift to state 8
-- On SC shift to state 21
-- On OPW shift to state 34
-- On OPIW shift to state 40
-- On OPI shift to state 48
-- On OP shift to state 54
-- On NAME shift to state 60
-- On LR shift to state 62
-- On LOAD shift to state 66
-- On LI shift to state 70
-- On J shift to state 74
-- On FENCETSO shift to state 76
-- On FENCEI shift to state 77
-- On FENCE shift to state 78
-- On BCC shift to state 82
-- On AMO shift to state 88
-- On instr_option shift to state 94
-- On instr shift to state 95
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 62:
## Known stack suffix:
## LR
## LR(1) items:
instr -> LR . reg COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## LR reg
## LR(1) items:
instr -> LR reg . COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## LR reg COMMA
## LR(1) items:
instr -> LR reg COMMA . addr0 [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 26
-- On LPAR shift to state 30
-- On addr0 shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## LR reg COMMA addr0
## LR(1) items:
instr -> LR reg COMMA addr0 . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LR reg COMMA addr0
-- On PIPE reduce production instr -> LR reg COMMA addr0

State 66:
## Known stack suffix:
## LOAD
## LR(1) items:
instr -> LOAD . reg COMMA addr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## LOAD reg
## LR(1) items:
instr -> LOAD reg . COMMA addr [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LOAD reg COMMA
## LR(1) items:
instr -> LOAD reg COMMA . addr [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 13
-- On LPAR shift to state 17
-- On addr shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## LOAD reg COMMA addr
## LR(1) items:
instr -> LOAD reg COMMA addr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LOAD reg COMMA addr
-- On PIPE reduce production instr -> LOAD reg COMMA addr

State 70:
## Known stack suffix:
## LI
## LR(1) items:
instr -> LI . reg COMMA k [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## LI reg
## LR(1) items:
instr -> LI reg . COMMA k [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## LI reg COMMA
## LR(1) items:
instr -> LI reg COMMA . k [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 45
-- On META shift to state 46
-- On k shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## LI reg COMMA k
## LR(1) items:
instr -> LI reg COMMA k . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> LI reg COMMA k
-- On PIPE reduce production instr -> LI reg COMMA k

State 74:
## Known stack suffix:
## J
## LR(1) items:
instr -> J . NAME [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## J NAME
## LR(1) items:
instr -> J NAME . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> J NAME
-- On PIPE reduce production instr -> J NAME

State 76:
## Known stack suffix:
## FENCETSO
## LR(1) items:
instr -> FENCETSO . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> FENCETSO
-- On PIPE reduce production instr -> FENCETSO

State 77:
## Known stack suffix:
## FENCEI
## LR(1) items:
instr -> FENCEI . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> FENCEI
-- On PIPE reduce production instr -> FENCEI

State 78:
## Known stack suffix:
## FENCE
## LR(1) items:
instr -> FENCE . [ SEMI PIPE ]
instr -> FENCE . NAME COMMA NAME [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 79
## Reductions:
-- On SEMI reduce production instr -> FENCE
-- On PIPE reduce production instr -> FENCE

State 79:
## Known stack suffix:
## FENCE NAME
## LR(1) items:
instr -> FENCE NAME . COMMA NAME [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## FENCE NAME COMMA
## LR(1) items:
instr -> FENCE NAME COMMA . NAME [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## FENCE NAME COMMA NAME
## LR(1) items:
instr -> FENCE NAME COMMA NAME . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> FENCE NAME COMMA NAME
-- On PIPE reduce production instr -> FENCE NAME COMMA NAME

State 82:
## Known stack suffix:
## BCC
## LR(1) items:
instr -> BCC . reg COMMA reg COMMA NAME [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## BCC reg
## LR(1) items:
instr -> BCC reg . COMMA reg COMMA NAME [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## BCC reg COMMA
## LR(1) items:
instr -> BCC reg COMMA . reg COMMA NAME [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## BCC reg COMMA reg
## LR(1) items:
instr -> BCC reg COMMA reg . COMMA NAME [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## BCC reg COMMA reg COMMA
## LR(1) items:
instr -> BCC reg COMMA reg COMMA . NAME [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## BCC reg COMMA reg COMMA NAME
## LR(1) items:
instr -> BCC reg COMMA reg COMMA NAME . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> BCC reg COMMA reg COMMA NAME
-- On PIPE reduce production instr -> BCC reg COMMA reg COMMA NAME

State 88:
## Known stack suffix:
## AMO
## LR(1) items:
instr -> AMO . reg COMMA reg COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## AMO reg
## LR(1) items:
instr -> AMO reg . COMMA reg COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## AMO reg COMMA
## LR(1) items:
instr -> AMO reg COMMA . reg COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 9
-- On ARCH_REG shift to state 10
-- On reg shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## AMO reg COMMA reg
## LR(1) items:
instr -> AMO reg COMMA reg . COMMA addr0 [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## AMO reg COMMA reg COMMA
## LR(1) items:
instr -> AMO reg COMMA reg COMMA . addr0 [ SEMI PIPE ]
## Transitions:
-- On NUM shift to state 26
-- On LPAR shift to state 30
-- On addr0 shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## AMO reg COMMA reg COMMA addr0
## LR(1) items:
instr -> AMO reg COMMA reg COMMA addr0 . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> AMO reg COMMA reg COMMA addr0
-- On PIPE reduce production instr -> AMO reg COMMA reg COMMA addr0

State 94:
## Known stack suffix:
## NAME COLON instr_option
## LR(1) items:
instr_option -> NAME COLON instr_option . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option -> NAME COLON instr_option
-- On PIPE reduce production instr_option -> NAME COLON instr_option

State 95:
## Known stack suffix:
## instr
## LR(1) items:
instr_option -> instr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option -> instr
-- On PIPE reduce production instr_option -> instr

State 96:
## Known stack suffix:
## semi_opt proc_list iol_list
## LR(1) items:
main -> semi_opt proc_list iol_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## semi_opt proc_list iol_list EOF
## LR(1) items:
main -> semi_opt proc_list iol_list EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> semi_opt proc_list iol_list EOF

State 98:
## Known stack suffix:
## instr_option_list
## LR(1) items:
iol_list -> instr_option_list . SEMI [ EOF ]
iol_list -> instr_option_list . SEMI iol_list [ EOF ]
## Transitions:
-- On SEMI shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## instr_option_list SEMI
## LR(1) items:
iol_list -> instr_option_list SEMI . [ EOF ]
iol_list -> instr_option_list SEMI . iol_list [ EOF ]
## Transitions:
-- On STORE shift to state 8
-- On SC shift to state 21
-- On OPW shift to state 34
-- On OPIW shift to state 40
-- On OPI shift to state 48
-- On OP shift to state 54
-- On NAME shift to state 60
-- On LR shift to state 62
-- On LOAD shift to state 66
-- On LI shift to state 70
-- On J shift to state 74
-- On FENCETSO shift to state 76
-- On FENCEI shift to state 77
-- On FENCE shift to state 78
-- On BCC shift to state 82
-- On AMO shift to state 88
-- On iol_list shift to state 100
-- On instr_option_list shift to state 98
-- On instr_option shift to state 101
-- On instr shift to state 95
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->
-- On EOF reduce production iol_list -> instr_option_list SEMI

State 100:
## Known stack suffix:
## instr_option_list SEMI iol_list
## LR(1) items:
iol_list -> instr_option_list SEMI iol_list . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production iol_list -> instr_option_list SEMI iol_list

State 101:
## Known stack suffix:
## instr_option
## LR(1) items:
instr_option_list -> instr_option . [ SEMI ]
instr_option_list -> instr_option . PIPE instr_option_list [ SEMI ]
## Transitions:
-- On PIPE shift to state 102
## Reductions:
-- On SEMI reduce production instr_option_list -> instr_option

State 102:
## Known stack suffix:
## instr_option PIPE
## LR(1) items:
instr_option_list -> instr_option PIPE . instr_option_list [ SEMI ]
## Transitions:
-- On STORE shift to state 8
-- On SC shift to state 21
-- On OPW shift to state 34
-- On OPIW shift to state 40
-- On OPI shift to state 48
-- On OP shift to state 54
-- On NAME shift to state 60
-- On LR shift to state 62
-- On LOAD shift to state 66
-- On LI shift to state 70
-- On J shift to state 74
-- On FENCETSO shift to state 76
-- On FENCEI shift to state 77
-- On FENCE shift to state 78
-- On BCC shift to state 82
-- On AMO shift to state 88
-- On instr_option_list shift to state 103
-- On instr_option shift to state 101
-- On instr shift to state 95
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 103:
## Known stack suffix:
## instr_option PIPE instr_option_list
## LR(1) items:
instr_option_list -> instr_option PIPE instr_option_list . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option_list -> instr_option PIPE instr_option_list

State 104:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

