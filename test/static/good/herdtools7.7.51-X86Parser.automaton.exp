State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On SEMI shift to state 1
-- On semi_opt shift to state 2
-- On main shift to state 109
## Reductions:
-- On PROC reduce production semi_opt ->

State 1:
## Known stack suffix:
## SEMI
## LR(1) items:
semi_opt -> SEMI . [ PROC I_XOR I_XCHG I_SFENCE I_SETNB I_OR I_MOVW I_MOVT I_MOVSD I_MOVQ I_MOVL I_MOVB I_MOV I_MFENCE I_LOCK I_LFENCE I_JNE I_JMP I_JE I_INC I_DEC I_CMPXCHG I_CMP I_CMOVC I_ADD ]
## Transitions:
## Reductions:
-- On PROC reduce production semi_opt -> SEMI
-- On I_XOR reduce production semi_opt -> SEMI
-- On I_XCHG reduce production semi_opt -> SEMI
-- On I_SFENCE reduce production semi_opt -> SEMI
-- On I_SETNB reduce production semi_opt -> SEMI
-- On I_OR reduce production semi_opt -> SEMI
-- On I_MOVW reduce production semi_opt -> SEMI
-- On I_MOVT reduce production semi_opt -> SEMI
-- On I_MOVSD reduce production semi_opt -> SEMI
-- On I_MOVQ reduce production semi_opt -> SEMI
-- On I_MOVL reduce production semi_opt -> SEMI
-- On I_MOVB reduce production semi_opt -> SEMI
-- On I_MOV reduce production semi_opt -> SEMI
-- On I_MFENCE reduce production semi_opt -> SEMI
-- On I_LOCK reduce production semi_opt -> SEMI
-- On I_LFENCE reduce production semi_opt -> SEMI
-- On I_JNE reduce production semi_opt -> SEMI
-- On I_JMP reduce production semi_opt -> SEMI
-- On I_JE reduce production semi_opt -> SEMI
-- On I_INC reduce production semi_opt -> SEMI
-- On I_DEC reduce production semi_opt -> SEMI
-- On I_CMPXCHG reduce production semi_opt -> SEMI
-- On I_CMP reduce production semi_opt -> SEMI
-- On I_CMOVC reduce production semi_opt -> SEMI
-- On I_ADD reduce production semi_opt -> SEMI

State 2:
## Known stack suffix:
## semi_opt
## LR(1) items:
main -> semi_opt . proc_list iol_list EOF [ # ]
## Transitions:
-- On PROC shift to state 3
-- On proc_list shift to state 7
## Reductions:

State 3:
## Known stack suffix:
## PROC
## LR(1) items:
proc_list -> PROC . SEMI [ SEMI PIPE NAME I_XOR I_XCHG I_SFENCE I_SETNB I_OR I_MOVW I_MOVT I_MOVSD I_MOVQ I_MOVL I_MOVB I_MOV I_MFENCE I_LOCK I_LFENCE I_JNE I_JMP I_JE I_INC I_DEC I_CMPXCHG I_CMP I_CMOVC I_ADD ]
proc_list -> PROC . PIPE proc_list [ SEMI PIPE NAME I_XOR I_XCHG I_SFENCE I_SETNB I_OR I_MOVW I_MOVT I_MOVSD I_MOVQ I_MOVL I_MOVB I_MOV I_MFENCE I_LOCK I_LFENCE I_JNE I_JMP I_JE I_INC I_DEC I_CMPXCHG I_CMP I_CMOVC I_ADD ]
## Transitions:
-- On SEMI shift to state 4
-- On PIPE shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## PROC SEMI
## LR(1) items:
proc_list -> PROC SEMI . [ SEMI PIPE NAME I_XOR I_XCHG I_SFENCE I_SETNB I_OR I_MOVW I_MOVT I_MOVSD I_MOVQ I_MOVL I_MOVB I_MOV I_MFENCE I_LOCK I_LFENCE I_JNE I_JMP I_JE I_INC I_DEC I_CMPXCHG I_CMP I_CMOVC I_ADD ]
## Transitions:
## Reductions:
-- On SEMI reduce production proc_list -> PROC SEMI
-- On PIPE reduce production proc_list -> PROC SEMI
-- On NAME reduce production proc_list -> PROC SEMI
-- On I_XOR reduce production proc_list -> PROC SEMI
-- On I_XCHG reduce production proc_list -> PROC SEMI
-- On I_SFENCE reduce production proc_list -> PROC SEMI
-- On I_SETNB reduce production proc_list -> PROC SEMI
-- On I_OR reduce production proc_list -> PROC SEMI
-- On I_MOVW reduce production proc_list -> PROC SEMI
-- On I_MOVT reduce production proc_list -> PROC SEMI
-- On I_MOVSD reduce production proc_list -> PROC SEMI
-- On I_MOVQ reduce production proc_list -> PROC SEMI
-- On I_MOVL reduce production proc_list -> PROC SEMI
-- On I_MOVB reduce production proc_list -> PROC SEMI
-- On I_MOV reduce production proc_list -> PROC SEMI
-- On I_MFENCE reduce production proc_list -> PROC SEMI
-- On I_LOCK reduce production proc_list -> PROC SEMI
-- On I_LFENCE reduce production proc_list -> PROC SEMI
-- On I_JNE reduce production proc_list -> PROC SEMI
-- On I_JMP reduce production proc_list -> PROC SEMI
-- On I_JE reduce production proc_list -> PROC SEMI
-- On I_INC reduce production proc_list -> PROC SEMI
-- On I_DEC reduce production proc_list -> PROC SEMI
-- On I_CMPXCHG reduce production proc_list -> PROC SEMI
-- On I_CMP reduce production proc_list -> PROC SEMI
-- On I_CMOVC reduce production proc_list -> PROC SEMI
-- On I_ADD reduce production proc_list -> PROC SEMI

State 5:
## Known stack suffix:
## PROC PIPE
## LR(1) items:
proc_list -> PROC PIPE . proc_list [ SEMI PIPE NAME I_XOR I_XCHG I_SFENCE I_SETNB I_OR I_MOVW I_MOVT I_MOVSD I_MOVQ I_MOVL I_MOVB I_MOV I_MFENCE I_LOCK I_LFENCE I_JNE I_JMP I_JE I_INC I_DEC I_CMPXCHG I_CMP I_CMOVC I_ADD ]
## Transitions:
-- On PROC shift to state 3
-- On proc_list shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## PROC PIPE proc_list
## LR(1) items:
proc_list -> PROC PIPE proc_list . [ SEMI PIPE NAME I_XOR I_XCHG I_SFENCE I_SETNB I_OR I_MOVW I_MOVT I_MOVSD I_MOVQ I_MOVL I_MOVB I_MOV I_MFENCE I_LOCK I_LFENCE I_JNE I_JMP I_JE I_INC I_DEC I_CMPXCHG I_CMP I_CMOVC I_ADD ]
## Transitions:
## Reductions:
-- On SEMI reduce production proc_list -> PROC PIPE proc_list
-- On PIPE reduce production proc_list -> PROC PIPE proc_list
-- On NAME reduce production proc_list -> PROC PIPE proc_list
-- On I_XOR reduce production proc_list -> PROC PIPE proc_list
-- On I_XCHG reduce production proc_list -> PROC PIPE proc_list
-- On I_SFENCE reduce production proc_list -> PROC PIPE proc_list
-- On I_SETNB reduce production proc_list -> PROC PIPE proc_list
-- On I_OR reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVW reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVT reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVSD reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVQ reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVL reduce production proc_list -> PROC PIPE proc_list
-- On I_MOVB reduce production proc_list -> PROC PIPE proc_list
-- On I_MOV reduce production proc_list -> PROC PIPE proc_list
-- On I_MFENCE reduce production proc_list -> PROC PIPE proc_list
-- On I_LOCK reduce production proc_list -> PROC PIPE proc_list
-- On I_LFENCE reduce production proc_list -> PROC PIPE proc_list
-- On I_JNE reduce production proc_list -> PROC PIPE proc_list
-- On I_JMP reduce production proc_list -> PROC PIPE proc_list
-- On I_JE reduce production proc_list -> PROC PIPE proc_list
-- On I_INC reduce production proc_list -> PROC PIPE proc_list
-- On I_DEC reduce production proc_list -> PROC PIPE proc_list
-- On I_CMPXCHG reduce production proc_list -> PROC PIPE proc_list
-- On I_CMP reduce production proc_list -> PROC PIPE proc_list
-- On I_CMOVC reduce production proc_list -> PROC PIPE proc_list
-- On I_ADD reduce production proc_list -> PROC PIPE proc_list

State 7:
## Known stack suffix:
## semi_opt proc_list
## LR(1) items:
main -> semi_opt proc_list . iol_list EOF [ # ]
## Transitions:
-- On NAME shift to state 8
-- On I_XOR shift to state 10
-- On I_XCHG shift to state 32
-- On I_SFENCE shift to state 36
-- On I_SETNB shift to state 37
-- On I_OR shift to state 39
-- On I_MOVW shift to state 43
-- On I_MOVT shift to state 47
-- On I_MOVSD shift to state 51
-- On I_MOVQ shift to state 52
-- On I_MOVL shift to state 56
-- On I_MOVB shift to state 60
-- On I_MOV shift to state 64
-- On I_MFENCE shift to state 68
-- On I_LOCK shift to state 69
-- On I_LFENCE shift to state 71
-- On I_JNE shift to state 72
-- On I_JMP shift to state 74
-- On I_JE shift to state 76
-- On I_INC shift to state 78
-- On I_DEC shift to state 80
-- On I_CMPXCHG shift to state 82
-- On I_CMP shift to state 86
-- On I_CMOVC shift to state 90
-- On I_ADD shift to state 94
-- On iol_list shift to state 101
-- On instr_option_list shift to state 103
-- On instr_option shift to state 106
-- On instr shift to state 100
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 8:
## Known stack suffix:
## NAME
## LR(1) items:
instr_option -> NAME . COLON instr_option [ SEMI PIPE ]
## Transitions:
-- On COLON shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## NAME COLON
## LR(1) items:
instr_option -> NAME COLON . instr_option [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 8
-- On I_XOR shift to state 10
-- On I_XCHG shift to state 32
-- On I_SFENCE shift to state 36
-- On I_SETNB shift to state 37
-- On I_OR shift to state 39
-- On I_MOVW shift to state 43
-- On I_MOVT shift to state 47
-- On I_MOVSD shift to state 51
-- On I_MOVQ shift to state 52
-- On I_MOVL shift to state 56
-- On I_MOVB shift to state 60
-- On I_MOV shift to state 64
-- On I_MFENCE shift to state 68
-- On I_LOCK shift to state 69
-- On I_LFENCE shift to state 71
-- On I_JNE shift to state 72
-- On I_JMP shift to state 74
-- On I_JE shift to state 76
-- On I_INC shift to state 78
-- On I_DEC shift to state 80
-- On I_CMPXCHG shift to state 82
-- On I_CMP shift to state 86
-- On I_CMOVC shift to state 90
-- On I_ADD shift to state 94
-- On instr_option shift to state 99
-- On instr shift to state 100
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 10:
## Known stack suffix:
## I_XOR
## LR(1) items:
instr -> I_XOR . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 25
## Reductions:

State 11:
## Known stack suffix:
## SYMB_REG
## LR(1) items:
reg -> SYMB_REG . [ SEMI RPAR RBRK PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production reg -> SYMB_REG
-- On RPAR reduce production reg -> SYMB_REG
-- On RBRK reduce production reg -> SYMB_REG
-- On PIPE reduce production reg -> SYMB_REG
-- On COMMA reduce production reg -> SYMB_REG

State 12:
## Known stack suffix:
## LPAR
## LR(1) items:
rm32 -> LPAR . reg RPAR [ SEMI PIPE COMMA ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On ARCH_REG shift to state 13
-- On reg shift to state 14
## Reductions:

State 13:
## Known stack suffix:
## ARCH_REG
## LR(1) items:
reg -> ARCH_REG . [ SEMI RPAR RBRK PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production reg -> ARCH_REG
-- On RPAR reduce production reg -> ARCH_REG
-- On RBRK reduce production reg -> ARCH_REG
-- On PIPE reduce production reg -> ARCH_REG
-- On COMMA reduce production reg -> ARCH_REG

State 14:
## Known stack suffix:
## LPAR reg
## LR(1) items:
rm32 -> LPAR reg . RPAR [ SEMI PIPE COMMA ]
## Transitions:
-- On RPAR shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LPAR reg RPAR
## LR(1) items:
rm32 -> LPAR reg RPAR . [ SEMI PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production rm32 -> LPAR reg RPAR
-- On PIPE reduce production rm32 -> LPAR reg RPAR
-- On COMMA reduce production rm32 -> LPAR reg RPAR

State 16:
## Known stack suffix:
## LBRK
## LR(1) items:
rm32 -> LBRK . reg RBRK [ SEMI PIPE COMMA ]
rm32 -> LBRK . NAME RBRK [ SEMI PIPE COMMA ]
rm32 -> LBRK . NUM RBRK [ SEMI PIPE COMMA ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 17
-- On NAME shift to state 19
-- On ARCH_REG shift to state 13
-- On reg shift to state 21
## Reductions:

State 17:
## Known stack suffix:
## LBRK NUM
## LR(1) items:
rm32 -> LBRK NUM . RBRK [ SEMI PIPE COMMA ]
## Transitions:
-- On RBRK shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## LBRK NUM RBRK
## LR(1) items:
rm32 -> LBRK NUM RBRK . [ SEMI PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production rm32 -> LBRK NUM RBRK
-- On PIPE reduce production rm32 -> LBRK NUM RBRK
-- On COMMA reduce production rm32 -> LBRK NUM RBRK

State 19:
## Known stack suffix:
## LBRK NAME
## LR(1) items:
rm32 -> LBRK NAME . RBRK [ SEMI PIPE COMMA ]
## Transitions:
-- On RBRK shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## LBRK NAME RBRK
## LR(1) items:
rm32 -> LBRK NAME RBRK . [ SEMI PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production rm32 -> LBRK NAME RBRK
-- On PIPE reduce production rm32 -> LBRK NAME RBRK
-- On COMMA reduce production rm32 -> LBRK NAME RBRK

State 21:
## Known stack suffix:
## LBRK reg
## LR(1) items:
rm32 -> LBRK reg . RBRK [ SEMI PIPE COMMA ]
## Transitions:
-- On RBRK shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## LBRK reg RBRK
## LR(1) items:
rm32 -> LBRK reg RBRK . [ SEMI PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production rm32 -> LBRK reg RBRK
-- On PIPE reduce production rm32 -> LBRK reg RBRK
-- On COMMA reduce production rm32 -> LBRK reg RBRK

State 23:
## Known stack suffix:
## rm32
## LR(1) items:
effaddr -> rm32 . [ SEMI PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production effaddr -> rm32
-- On PIPE reduce production effaddr -> rm32
-- On COMMA reduce production effaddr -> rm32

State 24:
## Known stack suffix:
## reg
## LR(1) items:
rm32 -> reg . [ SEMI PIPE COMMA ]
## Transitions:
## Reductions:
-- On SEMI reduce production rm32 -> reg
-- On PIPE reduce production rm32 -> reg
-- On COMMA reduce production rm32 -> reg

State 25:
## Known stack suffix:
## I_XOR effaddr
## LR(1) items:
instr -> I_XOR effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## I_XOR effaddr COMMA
## LR(1) items:
instr -> I_XOR effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 29
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 27:
## Known stack suffix:
## NUM
## LR(1) items:
k -> NUM . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production k -> NUM
-- On PIPE reduce production k -> NUM

State 28:
## Known stack suffix:
## INTEL_NUM
## LR(1) items:
operand -> INTEL_NUM . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production operand -> INTEL_NUM
-- On PIPE reduce production operand -> INTEL_NUM

State 29:
## Known stack suffix:
## I_XOR effaddr COMMA operand
## LR(1) items:
instr -> I_XOR effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_XOR effaddr COMMA operand
-- On PIPE reduce production instr -> I_XOR effaddr COMMA operand

State 30:
## Known stack suffix:
## k
## LR(1) items:
operand -> k . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production operand -> k
-- On PIPE reduce production operand -> k

State 31:
## Known stack suffix:
## effaddr
## LR(1) items:
operand -> effaddr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production operand -> effaddr
-- On PIPE reduce production operand -> effaddr

State 32:
## Known stack suffix:
## I_XCHG
## LR(1) items:
instr -> I_XCHG . effaddr COMMA effaddr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## I_XCHG effaddr
## LR(1) items:
instr -> I_XCHG effaddr . COMMA effaddr [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## I_XCHG effaddr COMMA
## LR(1) items:
instr -> I_XCHG effaddr COMMA . effaddr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## I_XCHG effaddr COMMA effaddr
## LR(1) items:
instr -> I_XCHG effaddr COMMA effaddr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_XCHG effaddr COMMA effaddr
-- On PIPE reduce production instr -> I_XCHG effaddr COMMA effaddr

State 36:
## Known stack suffix:
## I_SFENCE
## LR(1) items:
instr -> I_SFENCE . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_SFENCE
-- On PIPE reduce production instr -> I_SFENCE

State 37:
## Known stack suffix:
## I_SETNB
## LR(1) items:
instr -> I_SETNB . effaddr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## I_SETNB effaddr
## LR(1) items:
instr -> I_SETNB effaddr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_SETNB effaddr
-- On PIPE reduce production instr -> I_SETNB effaddr

State 39:
## Known stack suffix:
## I_OR
## LR(1) items:
instr -> I_OR . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## I_OR effaddr
## LR(1) items:
instr -> I_OR effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## I_OR effaddr COMMA
## LR(1) items:
instr -> I_OR effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 42
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 42:
## Known stack suffix:
## I_OR effaddr COMMA operand
## LR(1) items:
instr -> I_OR effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_OR effaddr COMMA operand
-- On PIPE reduce production instr -> I_OR effaddr COMMA operand

State 43:
## Known stack suffix:
## I_MOVW
## LR(1) items:
instr -> I_MOVW . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## I_MOVW effaddr
## LR(1) items:
instr -> I_MOVW effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## I_MOVW effaddr COMMA
## LR(1) items:
instr -> I_MOVW effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 46
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 46:
## Known stack suffix:
## I_MOVW effaddr COMMA operand
## LR(1) items:
instr -> I_MOVW effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MOVW effaddr COMMA operand
-- On PIPE reduce production instr -> I_MOVW effaddr COMMA operand

State 47:
## Known stack suffix:
## I_MOVT
## LR(1) items:
instr -> I_MOVT . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## I_MOVT effaddr
## LR(1) items:
instr -> I_MOVT effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## I_MOVT effaddr COMMA
## LR(1) items:
instr -> I_MOVT effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 50
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 50:
## Known stack suffix:
## I_MOVT effaddr COMMA operand
## LR(1) items:
instr -> I_MOVT effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MOVT effaddr COMMA operand
-- On PIPE reduce production instr -> I_MOVT effaddr COMMA operand

State 51:
## Known stack suffix:
## I_MOVSD
## LR(1) items:
instr -> I_MOVSD . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MOVSD
-- On PIPE reduce production instr -> I_MOVSD

State 52:
## Known stack suffix:
## I_MOVQ
## LR(1) items:
instr -> I_MOVQ . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## I_MOVQ effaddr
## LR(1) items:
instr -> I_MOVQ effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## I_MOVQ effaddr COMMA
## LR(1) items:
instr -> I_MOVQ effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 55
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 55:
## Known stack suffix:
## I_MOVQ effaddr COMMA operand
## LR(1) items:
instr -> I_MOVQ effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MOVQ effaddr COMMA operand
-- On PIPE reduce production instr -> I_MOVQ effaddr COMMA operand

State 56:
## Known stack suffix:
## I_MOVL
## LR(1) items:
instr -> I_MOVL . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## I_MOVL effaddr
## LR(1) items:
instr -> I_MOVL effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## I_MOVL effaddr COMMA
## LR(1) items:
instr -> I_MOVL effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 59
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 59:
## Known stack suffix:
## I_MOVL effaddr COMMA operand
## LR(1) items:
instr -> I_MOVL effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MOVL effaddr COMMA operand
-- On PIPE reduce production instr -> I_MOVL effaddr COMMA operand

State 60:
## Known stack suffix:
## I_MOVB
## LR(1) items:
instr -> I_MOVB . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## I_MOVB effaddr
## LR(1) items:
instr -> I_MOVB effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## I_MOVB effaddr COMMA
## LR(1) items:
instr -> I_MOVB effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 63
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 63:
## Known stack suffix:
## I_MOVB effaddr COMMA operand
## LR(1) items:
instr -> I_MOVB effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MOVB effaddr COMMA operand
-- On PIPE reduce production instr -> I_MOVB effaddr COMMA operand

State 64:
## Known stack suffix:
## I_MOV
## LR(1) items:
instr -> I_MOV . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## I_MOV effaddr
## LR(1) items:
instr -> I_MOV effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## I_MOV effaddr COMMA
## LR(1) items:
instr -> I_MOV effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 67
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 67:
## Known stack suffix:
## I_MOV effaddr COMMA operand
## LR(1) items:
instr -> I_MOV effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MOV effaddr COMMA operand
-- On PIPE reduce production instr -> I_MOV effaddr COMMA operand

State 68:
## Known stack suffix:
## I_MFENCE
## LR(1) items:
instr -> I_MFENCE . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_MFENCE
-- On PIPE reduce production instr -> I_MFENCE

State 69:
## Known stack suffix:
## I_LOCK
## LR(1) items:
instr -> I_LOCK . semi_opt instr [ SEMI PIPE ]
## Transitions:
-- On SEMI shift to state 1
-- On semi_opt shift to state 70
## Reductions:
-- On I_XOR reduce production semi_opt ->
-- On I_XCHG reduce production semi_opt ->
-- On I_SFENCE reduce production semi_opt ->
-- On I_SETNB reduce production semi_opt ->
-- On I_OR reduce production semi_opt ->
-- On I_MOVW reduce production semi_opt ->
-- On I_MOVT reduce production semi_opt ->
-- On I_MOVSD reduce production semi_opt ->
-- On I_MOVQ reduce production semi_opt ->
-- On I_MOVL reduce production semi_opt ->
-- On I_MOVB reduce production semi_opt ->
-- On I_MOV reduce production semi_opt ->
-- On I_MFENCE reduce production semi_opt ->
-- On I_LOCK reduce production semi_opt ->
-- On I_LFENCE reduce production semi_opt ->
-- On I_JNE reduce production semi_opt ->
-- On I_JMP reduce production semi_opt ->
-- On I_JE reduce production semi_opt ->
-- On I_INC reduce production semi_opt ->
-- On I_DEC reduce production semi_opt ->
-- On I_CMPXCHG reduce production semi_opt ->
-- On I_CMP reduce production semi_opt ->
-- On I_CMOVC reduce production semi_opt ->
-- On I_ADD reduce production semi_opt ->

State 70:
## Known stack suffix:
## I_LOCK semi_opt
## LR(1) items:
instr -> I_LOCK semi_opt . instr [ SEMI PIPE ]
## Transitions:
-- On I_XOR shift to state 10
-- On I_XCHG shift to state 32
-- On I_SFENCE shift to state 36
-- On I_SETNB shift to state 37
-- On I_OR shift to state 39
-- On I_MOVW shift to state 43
-- On I_MOVT shift to state 47
-- On I_MOVSD shift to state 51
-- On I_MOVQ shift to state 52
-- On I_MOVL shift to state 56
-- On I_MOVB shift to state 60
-- On I_MOV shift to state 64
-- On I_MFENCE shift to state 68
-- On I_LOCK shift to state 69
-- On I_LFENCE shift to state 71
-- On I_JNE shift to state 72
-- On I_JMP shift to state 74
-- On I_JE shift to state 76
-- On I_INC shift to state 78
-- On I_DEC shift to state 80
-- On I_CMPXCHG shift to state 82
-- On I_CMP shift to state 86
-- On I_CMOVC shift to state 90
-- On I_ADD shift to state 94
-- On instr shift to state 98
## Reductions:

State 71:
## Known stack suffix:
## I_LFENCE
## LR(1) items:
instr -> I_LFENCE . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_LFENCE
-- On PIPE reduce production instr -> I_LFENCE

State 72:
## Known stack suffix:
## I_JNE
## LR(1) items:
instr -> I_JNE . NAME [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## I_JNE NAME
## LR(1) items:
instr -> I_JNE NAME . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_JNE NAME
-- On PIPE reduce production instr -> I_JNE NAME

State 74:
## Known stack suffix:
## I_JMP
## LR(1) items:
instr -> I_JMP . NAME [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## I_JMP NAME
## LR(1) items:
instr -> I_JMP NAME . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_JMP NAME
-- On PIPE reduce production instr -> I_JMP NAME

State 76:
## Known stack suffix:
## I_JE
## LR(1) items:
instr -> I_JE . NAME [ SEMI PIPE ]
## Transitions:
-- On NAME shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## I_JE NAME
## LR(1) items:
instr -> I_JE NAME . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_JE NAME
-- On PIPE reduce production instr -> I_JE NAME

State 78:
## Known stack suffix:
## I_INC
## LR(1) items:
instr -> I_INC . effaddr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## I_INC effaddr
## LR(1) items:
instr -> I_INC effaddr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_INC effaddr
-- On PIPE reduce production instr -> I_INC effaddr

State 80:
## Known stack suffix:
## I_DEC
## LR(1) items:
instr -> I_DEC . effaddr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## I_DEC effaddr
## LR(1) items:
instr -> I_DEC effaddr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_DEC effaddr
-- On PIPE reduce production instr -> I_DEC effaddr

State 82:
## Known stack suffix:
## I_CMPXCHG
## LR(1) items:
instr -> I_CMPXCHG . effaddr COMMA reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## I_CMPXCHG effaddr
## LR(1) items:
instr -> I_CMPXCHG effaddr . COMMA reg [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## I_CMPXCHG effaddr COMMA
## LR(1) items:
instr -> I_CMPXCHG effaddr COMMA . reg [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On ARCH_REG shift to state 13
-- On reg shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## I_CMPXCHG effaddr COMMA reg
## LR(1) items:
instr -> I_CMPXCHG effaddr COMMA reg . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_CMPXCHG effaddr COMMA reg
-- On PIPE reduce production instr -> I_CMPXCHG effaddr COMMA reg

State 86:
## Known stack suffix:
## I_CMP
## LR(1) items:
instr -> I_CMP . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## I_CMP effaddr
## LR(1) items:
instr -> I_CMP effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## I_CMP effaddr COMMA
## LR(1) items:
instr -> I_CMP effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 89
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 89:
## Known stack suffix:
## I_CMP effaddr COMMA operand
## LR(1) items:
instr -> I_CMP effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_CMP effaddr COMMA operand
-- On PIPE reduce production instr -> I_CMP effaddr COMMA operand

State 90:
## Known stack suffix:
## I_CMOVC
## LR(1) items:
instr -> I_CMOVC . reg COMMA effaddr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On ARCH_REG shift to state 13
-- On reg shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## I_CMOVC reg
## LR(1) items:
instr -> I_CMOVC reg . COMMA effaddr [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## I_CMOVC reg COMMA
## LR(1) items:
instr -> I_CMOVC reg COMMA . effaddr [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## I_CMOVC reg COMMA effaddr
## LR(1) items:
instr -> I_CMOVC reg COMMA effaddr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_CMOVC reg COMMA effaddr
-- On PIPE reduce production instr -> I_CMOVC reg COMMA effaddr

State 94:
## Known stack suffix:
## I_ADD
## LR(1) items:
instr -> I_ADD . effaddr COMMA operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On effaddr shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## I_ADD effaddr
## LR(1) items:
instr -> I_ADD effaddr . COMMA operand [ SEMI PIPE ]
## Transitions:
-- On COMMA shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## I_ADD effaddr COMMA
## LR(1) items:
instr -> I_ADD effaddr COMMA . operand [ SEMI PIPE ]
## Transitions:
-- On SYMB_REG shift to state 11
-- On NUM shift to state 27
-- On LPAR shift to state 12
-- On LBRK shift to state 16
-- On INTEL_NUM shift to state 28
-- On ARCH_REG shift to state 13
-- On rm32 shift to state 23
-- On reg shift to state 24
-- On operand shift to state 97
-- On k shift to state 30
-- On effaddr shift to state 31
## Reductions:

State 97:
## Known stack suffix:
## I_ADD effaddr COMMA operand
## LR(1) items:
instr -> I_ADD effaddr COMMA operand . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_ADD effaddr COMMA operand
-- On PIPE reduce production instr -> I_ADD effaddr COMMA operand

State 98:
## Known stack suffix:
## I_LOCK semi_opt instr
## LR(1) items:
instr -> I_LOCK semi_opt instr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr -> I_LOCK semi_opt instr
-- On PIPE reduce production instr -> I_LOCK semi_opt instr

State 99:
## Known stack suffix:
## NAME COLON instr_option
## LR(1) items:
instr_option -> NAME COLON instr_option . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option -> NAME COLON instr_option
-- On PIPE reduce production instr_option -> NAME COLON instr_option

State 100:
## Known stack suffix:
## instr
## LR(1) items:
instr_option -> instr . [ SEMI PIPE ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option -> instr
-- On PIPE reduce production instr_option -> instr

State 101:
## Known stack suffix:
## semi_opt proc_list iol_list
## LR(1) items:
main -> semi_opt proc_list iol_list . EOF [ # ]
## Transitions:
-- On EOF shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## semi_opt proc_list iol_list EOF
## LR(1) items:
main -> semi_opt proc_list iol_list EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production main -> semi_opt proc_list iol_list EOF

State 103:
## Known stack suffix:
## instr_option_list
## LR(1) items:
iol_list -> instr_option_list . SEMI [ EOF ]
iol_list -> instr_option_list . SEMI iol_list [ EOF ]
## Transitions:
-- On SEMI shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## instr_option_list SEMI
## LR(1) items:
iol_list -> instr_option_list SEMI . [ EOF ]
iol_list -> instr_option_list SEMI . iol_list [ EOF ]
## Transitions:
-- On NAME shift to state 8
-- On I_XOR shift to state 10
-- On I_XCHG shift to state 32
-- On I_SFENCE shift to state 36
-- On I_SETNB shift to state 37
-- On I_OR shift to state 39
-- On I_MOVW shift to state 43
-- On I_MOVT shift to state 47
-- On I_MOVSD shift to state 51
-- On I_MOVQ shift to state 52
-- On I_MOVL shift to state 56
-- On I_MOVB shift to state 60
-- On I_MOV shift to state 64
-- On I_MFENCE shift to state 68
-- On I_LOCK shift to state 69
-- On I_LFENCE shift to state 71
-- On I_JNE shift to state 72
-- On I_JMP shift to state 74
-- On I_JE shift to state 76
-- On I_INC shift to state 78
-- On I_DEC shift to state 80
-- On I_CMPXCHG shift to state 82
-- On I_CMP shift to state 86
-- On I_CMOVC shift to state 90
-- On I_ADD shift to state 94
-- On iol_list shift to state 105
-- On instr_option_list shift to state 103
-- On instr_option shift to state 106
-- On instr shift to state 100
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->
-- On EOF reduce production iol_list -> instr_option_list SEMI

State 105:
## Known stack suffix:
## instr_option_list SEMI iol_list
## LR(1) items:
iol_list -> instr_option_list SEMI iol_list . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production iol_list -> instr_option_list SEMI iol_list

State 106:
## Known stack suffix:
## instr_option
## LR(1) items:
instr_option_list -> instr_option . [ SEMI ]
instr_option_list -> instr_option . PIPE instr_option_list [ SEMI ]
## Transitions:
-- On PIPE shift to state 107
## Reductions:
-- On SEMI reduce production instr_option_list -> instr_option

State 107:
## Known stack suffix:
## instr_option PIPE
## LR(1) items:
instr_option_list -> instr_option PIPE . instr_option_list [ SEMI ]
## Transitions:
-- On NAME shift to state 8
-- On I_XOR shift to state 10
-- On I_XCHG shift to state 32
-- On I_SFENCE shift to state 36
-- On I_SETNB shift to state 37
-- On I_OR shift to state 39
-- On I_MOVW shift to state 43
-- On I_MOVT shift to state 47
-- On I_MOVSD shift to state 51
-- On I_MOVQ shift to state 52
-- On I_MOVL shift to state 56
-- On I_MOVB shift to state 60
-- On I_MOV shift to state 64
-- On I_MFENCE shift to state 68
-- On I_LOCK shift to state 69
-- On I_LFENCE shift to state 71
-- On I_JNE shift to state 72
-- On I_JMP shift to state 74
-- On I_JE shift to state 76
-- On I_INC shift to state 78
-- On I_DEC shift to state 80
-- On I_CMPXCHG shift to state 82
-- On I_CMP shift to state 86
-- On I_CMOVC shift to state 90
-- On I_ADD shift to state 94
-- On instr_option_list shift to state 108
-- On instr_option shift to state 106
-- On instr shift to state 100
## Reductions:
-- On SEMI reduce production instr_option ->
-- On PIPE reduce production instr_option ->

State 108:
## Known stack suffix:
## instr_option PIPE instr_option_list
## LR(1) items:
instr_option_list -> instr_option PIPE instr_option_list . [ SEMI ]
## Transitions:
## Reductions:
-- On SEMI reduce production instr_option_list -> instr_option PIPE instr_option_list

State 109:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On # accept main

