File "herdtools7.7.51-X86Parser.mly", line 37, characters 8-14:
Warning: the token I_READ is unused.
%{
(****************************************************************************)
(*                           the diy toolsuite                              *)
(*                                                                          *)
(* Jade Alglave, University College London, UK.                             *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                          *)
(*                                                                          *)
(* Copyright 2010-present Institut National de Recherche en Informatique et *)
(* en Automatique and the authors. All rights reserved.                     *)
(*                                                                          *)
(* This software is governed by the CeCILL-B license under French law and   *)
(* abiding by the rules of distribution of free software. You can use,      *)
(* modify and/ or redistribute the software under the terms of the CeCILL-B *)
(* license as circulated by CEA, CNRS and INRIA at the following URL        *)
(* "http://www.cecill.info". We also give a copy in LICENSE.txt.            *)
(****************************************************************************)

module X86 = X86Base
open X86
%}
%start main
%token <X86Base.reg> ARCH_REG
%token COLON
%token COMMA
%token EOF
%token <string> INTEL_NUM
%token I_ADD
%token I_CMOVC
%token I_CMP
%token I_CMPXCHG
%token I_DEC
%token I_INC
%token I_JE
%token I_JMP
%token I_JNE
%token I_LFENCE
%token I_LOCK
%token I_MFENCE
%token I_MOV
%token I_MOVB
%token I_MOVL
%token I_MOVQ
%token I_MOVSD
%token I_MOVT
%token I_MOVW
%token I_OR
%token I_READ
%token I_SETNB
%token I_SFENCE
%token I_XCHG
%token I_XOR
%token LBRK
%token LPAR
%token <string> NAME
%token <string> NUM
%token PIPE
%token <int> PROC
%token RBRK
%token RPAR
%token SEMI
%token <string> SYMB_REG
%nonassoc SEMI
%type <int list * (X86Base.pseudo) list list> main
%%

main:
  _1 = semi_opt _2 = proc_list _3 = iol_list _4 = EOF
    {                                      ( _2,_3 )}

semi_opt:
  
    {  ( () )}
| _1 = SEMI
    {       ( () )}

proc_list:
  _1 = PROC _2 = SEMI
    {             ([_1])}
| _1 = PROC _2 = PIPE _3 = proc_list
    {                       ( _1::_3 )}

iol_list:
  _1 = instr_option_list _2 = SEMI
    {    ([_1])}
| _1 = instr_option_list _2 = SEMI _3 = iol_list
    {                                   (_1::_3)}

instr_option_list:
  _1 = instr_option
    {      ([_1])}
| _1 = instr_option _2 = PIPE _3 = instr_option_list
    {      (_1::_3)}

instr_option:
  
    {  (Nop)}
| _1 = NAME _2 = COLON _3 = instr_option
    {                          ( Label (_1,_3) )}
| _1 = instr
    {             ( Instruction _1)}

reg:
  _1 = SYMB_REG
    {           ( Symbolic_reg _1 )}
| _1 = ARCH_REG
    {           ( _1 )}

k:
  _1 = NUM
    {      ( _1 )}

instr:
  _1 = I_XOR _2 = effaddr _3 = COMMA _4 = operand
    {    (I_XOR (_2,_4))}
| _1 = I_OR _2 = effaddr _3 = COMMA _4 = operand
    {    (I_OR (_2,_4))}
| _1 = I_ADD _2 = effaddr _3 = COMMA _4 = operand
    {    (I_ADD (_2,_4))}
| _1 = I_MOV _2 = effaddr _3 = COMMA _4 = operand
    {    (I_MOV (_2,_4))}
| _1 = I_MOVB _2 = effaddr _3 = COMMA _4 = operand
    {    (I_MOVB (_2,_4))}
| _1 = I_MOVW _2 = effaddr _3 = COMMA _4 = operand
    {    (I_MOVW (_2,_4))}
| _1 = I_MOVL _2 = effaddr _3 = COMMA _4 = operand
    {    (I_MOVL (_2,_4))}
| _1 = I_MOVQ _2 = effaddr _3 = COMMA _4 = operand
    {    (I_MOVQ (_2,_4))}
| _1 = I_MOVT _2 = effaddr _3 = COMMA _4 = operand
    {    (I_MOVT (_2,_4))}
| _1 = I_MOVSD
    {    (I_MOVSD)}
| _1 = I_DEC _2 = effaddr
    {    (I_DEC _2)}
| _1 = I_CMP _2 = effaddr _3 = COMMA _4 = operand
    {    (I_CMP (_2,_4))}
| _1 = I_CMOVC _2 = reg _3 = COMMA _4 = effaddr
    {    (I_CMOVC (_2, _4))}
| _1 = I_INC _2 = effaddr
    {    (I_INC _2)}
| _1 = I_JMP _2 = NAME
    {    (I_JMP _2)}
| _1 = I_JE _2 = NAME
    {    (I_JCC(C_EQ, _2))}
| _1 = I_JNE _2 = NAME
    {    (I_JCC(C_NE, _2))}
| _1 = I_LOCK _2 = semi_opt _3 = instr
    {    (I_LOCK _3 )}
| _1 = I_XCHG _2 = effaddr _3 = COMMA _4 = effaddr
    {    ( I_XCHG (_2,_4))}
| _1 = I_CMPXCHG _2 = effaddr _3 = COMMA _4 = reg
    {    ( I_CMPXCHG (_2,_4))}
| _1 = I_LFENCE
    {      ( I_LFENCE)}
| _1 = I_SFENCE
    {      ( I_SFENCE)}
| _1 = I_MFENCE
    {      ( I_MFENCE)}
| _1 = I_SETNB _2 = effaddr
    {                    (I_SETNB _2 )}

effaddr:
  _1 = rm32
    {          (Effaddr_rm32 _1)}

rm32:
  _1 = reg
    {         (Rm32_reg _1)}
| _1 = LPAR _2 = reg _3 = RPAR
    {                   (Rm32_deref _2)}
| _1 = LBRK _2 = reg _3 = RBRK
    {                   (Rm32_deref _2)}
| _1 = LBRK _2 = NAME _3 = RBRK
    {                    (Rm32_abs (Constant.Symbolic (_2,0)))}
| _1 = LBRK _2 = NUM _3 = RBRK
    {                   (Rm32_abs (Constant.Concrete _2))}

operand:
  _1 = effaddr
    {            (Operand_effaddr _1)}
| _1 = k
    {      (Operand_immediate (Misc.string_as_int _1) )}
| _1 = INTEL_NUM
    {              (Operand_immediate (Misc.string_as_int _1))}

%%
