File "herdtools7.7.51-modelParser.mly", line 61, characters 51-57:
Warning: the token COMPAT is unused.
File "herdtools7.7.51-modelParser.mly", line 61, characters 45-50:
Warning: the token YIELD is unused.
Grammar has 44 nonterminal symbols, among which 1 start symbols.
Grammar has 69 terminal symbols.
Grammar has 132 productions.
nullable(var_list) = false
nullable(tupleend) = false
nullable(tupleargs) = false
nullable(topins_list) = true
nullable(topins) = false
nullable(test_type) = true
nullable(test) = false
nullable(simple) = false
nullable(set_clauses) = false
nullable(pat_bind_list) = false
nullable(pat_bind) = false
nullable(options) = true
nullable(optional_name) = true
nullable(main) = false
nullable(ins_list) = true
nullable(ins_clause_list) = false
nullable(ins_clause) = false
nullable(ins) = false
nullable(in_opt) = true
nullable(identity) = true
nullable(formalsN) = false
nullable(formals) = true
nullable(exp_listN) = false
nullable(exp_list) = true
nullable(exp0) = false
nullable(exp) = false
nullable(empty_clause) = false
nullable(element_clause3) = false
nullable(element_clause2) = false
nullable(element_clause) = false
nullable(do_test) = false
nullable(deftest) = false
nullable(cond) = false
nullable(comma_opt) = false
nullable(clause_list) = false
nullable(clause) = false
nullable(bind) = false
nullable(base) = false
nullable(argsN) = false
nullable(args) = true
nullable(arg) = false
nullable(app_test) = false
nullable(alttags) = false
nullable(altopt) = true
first(var_list) = VAR
first(tupleend) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(tupleargs) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(topins_list) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG ENUM DEFAULT DEBUG COMP CALL ACYCLIC
first(topins) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG ENUM DEFAULT DEBUG COMP CALL ACYCLIC
first(test_type) = REQUIRES FLAG
first(test) = TESTEMPTY IRREFLEXIVE COMP ACYCLIC
first(simple) = UNDERSCORE TAG LPAR LBRAC LACC EMPTY BEGIN
first(set_clauses) = VAR LACC
first(pat_bind_list) = VAR LPAR
first(pat_bind) = VAR LPAR
first(options) = WITHSC WITHOUTSC WITHOUTINIT WITHOUTCO WITHINIT WITHCO
first(optional_name) = AS
first(main) = WITHSC WITHOUTSC WITHOUTINIT WITHOUTCO WITHINIT WITHCO WITH VAR UNSHOW TESTEMPTY STRING SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM DEFAULT DEBUG COMP CALL ACYCLIC
first(ins_list) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG DEFAULT DEBUG COMP CALL ACYCLIC
first(ins_clause_list) = UNDERSCORE TAG
first(ins_clause) = TAG
first(ins) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG DEFAULT DEBUG COMP CALL ACYCLIC
first(in_opt) = IN
first(identity) = VAR STRING
first(formalsN) = VAR
first(formals) = VAR
first(exp_listN) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(exp_list) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(exp0) = VAR
first(exp) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(empty_clause) = LACC
first(element_clause3) = VAR
first(element_clause2) = VAR
first(element_clause) = VAR
first(do_test) = TESTEMPTY IRREFLEXIVE ACYCLIC
first(deftest) = TESTEMPTY REQUIRES IRREFLEXIVE FLAG COMP ACYCLIC
first(cond) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(comma_opt) = COMMA
first(clause_list) = UNDERSCORE TAG
first(clause) = TAG
first(bind) = VAR LPAR
first(base) = VAR UNDERSCORE TAG LPAR LBRAC LACC EMPTY COMP BEGIN
first(argsN) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(args) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
first(arg) = VAR UNDERSCORE TAG LPAR LBRAC LACC EMPTY BEGIN
first(app_test) = TESTEMPTY IRREFLEXIVE COMP ACYCLIC
first(alttags) = TAG
first(altopt) = ALT
minimal(var_list) = (* 1 *) VAR
minimal(tupleend) = (* 1 *) EMPTY
minimal(tupleargs) = (* 3 *) EMPTY COMMA EMPTY
minimal(topins_list) = (* 0 *)
minimal(topins) = (* 1 *) LATEX
minimal(test_type) = (* 0 *)
minimal(test) = (* 1 *) ACYCLIC
minimal(simple) = (* 1 *) EMPTY
minimal(set_clauses) = (* 10 *) LACC RACC ARROW EMPTY ALT VAR PLUSPLUS VAR ARROW EMPTY
minimal(pat_bind_list) = (* 3 *) VAR EQUAL EMPTY
minimal(pat_bind) = (* 3 *) VAR EQUAL EMPTY
minimal(options) = (* 0 *)
minimal(optional_name) = (* 0 *)
minimal(main) = (* 1 *) EOF
minimal(ins_list) = (* 0 *)
minimal(ins_clause_list) = (* 2 *) TAG ARROW
minimal(ins_clause) = (* 2 *) TAG ARROW
minimal(ins) = (* 1 *) LATEX
minimal(in_opt) = (* 0 *)
minimal(identity) = (* 0 *)
minimal(formalsN) = (* 1 *) VAR
minimal(formals) = (* 0 *)
minimal(exp_listN) = (* 1 *) EMPTY
minimal(exp_list) = (* 0 *)
minimal(exp0) = (* 1 *) VAR
minimal(exp) = (* 1 *) EMPTY
minimal(empty_clause) = (* 4 *) LACC RACC ARROW EMPTY
minimal(element_clause3) = (* 7 *) VAR UNION VAR PLUSPLUS VAR ARROW EMPTY
minimal(element_clause2) = (* 5 *) VAR PLUSPLUS VAR ARROW EMPTY
minimal(element_clause) = (* 5 *) VAR PLUSPLUS VAR ARROW EMPTY
minimal(do_test) = (* 1 *) ACYCLIC
minimal(deftest) = (* 2 *) ACYCLIC EMPTY
minimal(cond) = (* 3 *) EMPTY EQUAL EMPTY
minimal(comma_opt) = (* 1 *) COMMA
minimal(clause_list) = (* 3 *) TAG ARROW EMPTY
minimal(clause) = (* 3 *) TAG ARROW EMPTY
minimal(bind) = (* 3 *) VAR EQUAL EMPTY
minimal(base) = (* 1 *) EMPTY
minimal(argsN) = (* 1 *) EMPTY
minimal(args) = (* 0 *)
minimal(arg) = (* 1 *) VAR
minimal(app_test) = (* 2 *) ACYCLIC EMPTY
minimal(alttags) = (* 1 *) TAG
minimal(altopt) = (* 0 *)
maximal(var_list) = infinity
maximal(tupleend) = infinity
maximal(tupleargs) = infinity
maximal(topins_list) = infinity
maximal(topins) = infinity
maximal(test_type) = 1
maximal(test) = 2
maximal(simple) = infinity
maximal(set_clauses) = infinity
maximal(pat_bind_list) = infinity
maximal(pat_bind) = infinity
maximal(options) = infinity
maximal(optional_name) = 2
maximal(main) = infinity
maximal(ins_list) = infinity
maximal(ins_clause_list) = infinity
maximal(ins_clause) = infinity
maximal(ins) = infinity
maximal(in_opt) = 1
maximal(identity) = 1
maximal(formalsN) = infinity
maximal(formals) = infinity
maximal(exp_listN) = infinity
maximal(exp_list) = infinity
maximal(exp0) = infinity
maximal(exp) = infinity
maximal(empty_clause) = infinity
maximal(element_clause3) = infinity
maximal(element_clause2) = infinity
maximal(element_clause) = infinity
maximal(do_test) = 1
maximal(deftest) = infinity
maximal(cond) = infinity
maximal(comma_opt) = 1
maximal(clause_list) = infinity
maximal(clause) = infinity
maximal(bind) = infinity
maximal(base) = infinity
maximal(argsN) = infinity
maximal(args) = infinity
maximal(arg) = infinity
maximal(app_test) = infinity
maximal(alttags) = infinity
maximal(altopt) = 1
follow(var_list) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL ALT ACYCLIC
follow(tupleend) = RPAR
follow(tupleargs) = RPAR
follow(topins_list) = EOF
follow(topins) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM DEFAULT DEBUG COMP CALL ACYCLIC
follow(test_type) = TESTEMPTY IRREFLEXIVE COMP ACYCLIC
follow(test) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
follow(simple) = WITH WHEN VAR UNSHOW UNION UNDERSCORE THEN TESTEMPTY TAG SUBSET STAR SHOW SEMI RPAR REQUIRES RBRAC RACC PROCEDURE PLUSPLUS PLUS OPT MATCH LPAR LET LBRAC LATEX LACC IRREFLEXIVE INTER INSTRUCTIONS INCLUDE IN HAT FORALL FLAG EQUAL EOF ENUM END EMPTY ELSE DO DIFF DEFAULT DEBUG COMP COMMA CALL BEGIN AS AND ALT ACYCLIC
follow(set_clauses) = END
follow(pat_bind_list) = WITH WHEN UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE IN FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL ALT ACYCLIC
follow(pat_bind) = WITH WHEN UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE IN FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL AND ALT ACYCLIC
follow(options) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM DEFAULT DEBUG COMP CALL ACYCLIC
follow(optional_name) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE IN FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL ALT ACYCLIC
follow(main) = #
follow(ins_list) = END ALT
follow(ins_clause_list) = END
follow(ins_clause) = END ALT
follow(ins) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL ALT ACYCLIC
follow(in_opt) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL ALT ACYCLIC
follow(identity) = WITHSC WITHOUTSC WITHOUTINIT WITHOUTCO WITHINIT WITHCO WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM DEFAULT DEBUG COMP CALL ACYCLIC
follow(formalsN) = RPAR
follow(formals) = RPAR
follow(exp_listN) = RBRAC
follow(exp_list) = RBRAC
follow(exp0) = WITH WHEN VAR UNSHOW UNION UNDERSCORE THEN TESTEMPTY TAG SUBSET STAR SHOW SEMI RPAR REQUIRES RBRAC RACC PROCEDURE PLUSPLUS PLUS OPT MATCH LPAR LET LBRAC LATEX LACC IRREFLEXIVE INTER INSTRUCTIONS INCLUDE IN HAT FORALL FLAG EQUAL EOF ENUM END EMPTY ELSE DO DIFF DEFAULT DEBUG COMP COMMA CALL BEGIN AS AND ALT ACYCLIC
follow(exp) = WITH WHEN UNSHOW THEN TESTEMPTY SUBSET SHOW RPAR REQUIRES RBRAC RACC PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE IN FORALL FLAG EQUAL EOF ENUM END ELSE DO DEFAULT DEBUG COMP COMMA CALL AS AND ALT ACYCLIC
follow(empty_clause) = END ALT
follow(element_clause3) = END ALT
follow(element_clause2) = END ALT
follow(element_clause) = END ALT
follow(do_test) = VAR UNDERSCORE TRY TAG MATCH LPAR LET LBRAC LACC IF FUN EMPTY COMP BEGIN
follow(deftest) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL ALT ACYCLIC
follow(cond) = THEN
follow(comma_opt) = VAR
follow(clause_list) = END
follow(clause) = END ALT
follow(bind) = WITH WHEN UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE IN FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL AND ALT ACYCLIC
follow(base) = WITH WHEN UNSHOW UNION THEN TESTEMPTY SUBSET STAR SHOW SEMI RPAR REQUIRES RBRAC RACC PROCEDURE PLUSPLUS PLUS OPT MATCH LET LATEX IRREFLEXIVE INTER INSTRUCTIONS INCLUDE IN HAT FORALL FLAG EQUAL EOF ENUM END ELSE DO DIFF DEFAULT DEBUG COMP COMMA CALL AS AND ALT ACYCLIC
follow(argsN) = RACC
follow(args) = RACC
follow(arg) = WITH WHEN VAR UNSHOW UNION UNDERSCORE THEN TESTEMPTY TAG SUBSET STAR SHOW SEMI RPAR REQUIRES RBRAC RACC PROCEDURE PLUSPLUS PLUS OPT MATCH LPAR LET LBRAC LATEX LACC IRREFLEXIVE INTER INSTRUCTIONS INCLUDE IN HAT FORALL FLAG EQUAL EOF ENUM END EMPTY ELSE DO DIFF DEFAULT DEBUG COMP COMMA CALL BEGIN AS AND ALT ACYCLIC
follow(app_test) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE IN FORALL FLAG EOF ENUM END DEFAULT DEBUG COMP CALL ALT ACYCLIC
follow(alttags) = WITH UNSHOW TESTEMPTY SHOW REQUIRES PROCEDURE MATCH LET LATEX IRREFLEXIVE INSTRUCTIONS INCLUDE FORALL FLAG EOF ENUM DEFAULT DEBUG COMP CALL ACYCLIC
follow(altopt) = VAR UNDERSCORE TAG LACC
Built an LR(0) automaton with 293 states.
The grammar is not SLR(1) -- 9 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 293 states.
64 shift/reduce conflicts were silently solved.
File "herdtools7.7.51-modelParser.mly", line 69, characters 0-6:
Warning: the precedence level assigned to COMMA is never useful.
File "herdtools7.7.51-modelParser.mly", line 76, characters 0-9:
Warning: the precedence level assigned to INV is never useful.
File "herdtools7.7.51-modelParser.mly", line 70, characters 0-5:
Warning: the precedence level assigned to prec_app is never useful.
File "herdtools7.7.51-modelParser.mly", line 329, characters 18-26:
Warning: this %prec declaration is never useful.
103 out of 293 states have a default reduction.
The action table is 20510 entries; 1857 non-zero; 1444 compressed.
The action table occupies roughly 2984 bytes.
The goto table is 13185 entries; 300 non-zero; 630 compressed.
The goto table occupies roughly 1360 bytes.
The error table occupies roughly 2600 bytes.
The default_reduction table occupies roughly 328 bytes.
The lhs table occupies roughly 168 bytes.
The trace table occupies roughly 8 bytes.
