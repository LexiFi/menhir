File "herdtools7.7.51-modelParser.mly", line 61, characters 51-57:
Warning: the token COMPAT is unused.
File "herdtools7.7.51-modelParser.mly", line 61, characters 45-50:
Warning: the token YIELD is unused.
%{
(****************************************************************************)
(*                           the diy toolsuite                              *)
(*                                                                          *)
(* Jade Alglave, University College London, UK.                             *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                          *)
(*                                                                          *)
(* Copyright 2013-present Institut National de Recherche en Informatique et *)
(* en Automatique and the authors. All rights reserved.                     *)
(*                                                                          *)
(* This software is governed by the CeCILL-B license under French law and   *)
(* abiding by the rules of distribution of free software. You can use,      *)
(* modify and/ or redistribute the software under the terms of the CeCILL-B *)
(* license as circulated by CEA, CNRS and INRIA at the following URL        *)
(* "http://www.cecill.info". We also give a copy in LICENSE.txt.            *)
(****************************************************************************)


open AST

let mk_loc () =
  TxtLoc.make
    (Parsing.symbol_start_pos ())
    (Parsing.symbol_end_pos ())


let as_op op = function
  | Op (_,op0,es) when op0 = op -> es
  | e -> [e]

let do_op op e1 e2 =
  let es1 = as_op op e1
  and es2 = as_op op e2 in
  Op (mk_loc(),op,es1@es2)

let pp () =
  let open Lexing in
  let start = symbol_start_pos ()
  and fin = symbol_end () in
  let pos = start.pos_cnum in
  let len = fin - pos in
  Pos {pos;len}

%}
%start main
%token ACYCLIC
%token ALT
%token AND
%token ARROW
%token AS
%token BEGIN
%token CALL
%token COMMA
%token COMP
%token COMPAT
%token DEBUG
%token DEFAULT
%token DIFF
%token DO
%token ELSE
%token EMPTY
%token END
%token ENUM
%token EOF
%token EQUAL
%token FLAG
%token FORALL
%token FROM
%token FUN
%token HAT
%token IF
%token IN
%token INCLUDE
%token INSTRUCTIONS
%token INTER
%token INV
%token IRREFLEXIVE
%token LACC
%token <string> LATEX
%token LBRAC
%token LET
%token LPAR
%token MATCH
%token OPT
%token PLUS
%token PLUSPLUS
%token PROCEDURE
%token RACC
%token RBRAC
%token REC
%token REQUIRES
%token RPAR
%token SEMI
%token SHOW
%token STAR
%token <string> STRING
%token SUBSET
%token <string> TAG
%token TESTEMPTY
%token THEN
%token TRY
%token UNDERSCORE
%token UNION
%token UNSHOW
%token <string> VAR
%token WHEN
%token WITH
%token WITHCO
%token WITHINIT
%token WITHOUTCO
%token WITHOUTINIT
%token WITHOUTSC
%token WITHSC
%token YIELD
%right COMMA
%left prec_app
%right UNION
%right PLUSPLUS
%right SEMI
%left DIFF
%right INTER
%nonassoc COMP INV OPT PLUS STAR
%nonassoc HAT
%type <AST.t> main
%%

main:
  _1 = identity _2 = options _3 = topins_list _4 = EOF
    {                                   ( _2, _1,_3 )}

identity:
  _1 = VAR
    {      ( _1 )}
| _1 = STRING
    {         ( _1 )}
| 
    {   ( "Unknown" )}

options:
  _1 = WITHCO _2 = options
    {                 ( ModelOption.set_enumco true _2 )}
| _1 = WITHOUTCO _2 = options
    {                    ( ModelOption.set_enumco false _2 )}
| _1 = WITHINIT _2 = options
    {                   ( ModelOption.set_init true _2 )}
| _1 = WITHOUTINIT _2 = options
    {                      ( ModelOption.set_init false _2 )}
| _1 = WITHSC _2 = options
    {                 ( ModelOption.set_enumsc true _2 )}
| _1 = WITHOUTSC _2 = options
    {                    ( ModelOption.set_enumsc false _2 )}
| 
    {     ( ModelOption.default )}

topins_list:
  
    {  ( [] )}
| _1 = topins _2 = topins_list
    {                     ( _1 :: _2 )}

ins_list:
  
    {  ( [] )}
| _1 = ins _2 = ins_list
    {               ( _1 :: _2 )}

in_opt:
  
    {     ( () )}
| _1 = IN
    {     ( () )}

ins_clause:
  _1 = TAG _2 = ARROW _3 = ins_list
    {                     ( _1,_3 )}

ins_clause_list:
  _1 = ins_clause
    {             ( [_1],None )}
| _1 = UNDERSCORE _2 = ARROW _3 = ins_list
    {                            ( [],Some _3 )}
| _1 = ins_clause _2 = ALT _3 = ins_clause_list
    {    (
     let cls,d = _3 in
     _1 :: cls, d
    )}

topins:
  _1 = ENUM _2 = VAR _3 = EQUAL _4 = altopt _5 = alttags
    {                                ( Enum (mk_loc (),_2,_5) )}
| _1 = ins
    {      ( _1 )}

ins:
  _1 = LET _2 = pat_bind_list _3 = in_opt
    {                           ( Let (mk_loc (),_2) )}
| _1 = LET _2 = REC _3 = pat_bind_list _4 = in_opt
    {                                ( Rec (mk_loc (),_3,None) )}
| _1 = LET _2 = REC _3 = pat_bind_list _4 = WHEN _5 = app_test _6 = in_opt
    {                                             ( Rec (mk_loc (),_3,Some _5) )}
| _1 = MATCH _2 = exp _3 = WITH _4 = altopt _5 = ins_clause_list _6 = END
    {    (
     let cls,d = _5 in
     InsMatch (mk_loc(),_2,cls,d)
    )}
| _1 = deftest
    {          ( _1 )}
| _1 = SHOW _2 = exp _3 = AS _4 = VAR
    {                  ( ShowAs (mk_loc(),_2, _4) )}
| _1 = SHOW _2 = var_list
    {                ( Show (mk_loc(),_2) )}
| _1 = UNSHOW _2 = var_list
    {                  ( UnShow (mk_loc(),_2) )}
| _1 = LATEX
    {        ( Latex (mk_loc(),_1) )}
| _1 = INCLUDE _2 = STRING
    {                 ( Include (mk_loc(),_2) )}
| _1 = PROCEDURE _2 = VAR _3 = LPAR _4 = formals _5 = RPAR _6 = EQUAL _7 = ins_list _8 = END
    {   ( Procedure (mk_loc (),_2,Ptuple _4,_7,IsNotRec) )}
| _1 = PROCEDURE _2 = VAR _3 = VAR _4 = EQUAL _5 = ins_list _6 = END
    {   ( Procedure (mk_loc (),_2,Pvar _3,_5,IsNotRec) )}
| _1 = PROCEDURE _2 = REC _3 = VAR _4 = LPAR _5 = formals _6 = RPAR _7 = EQUAL _8 = ins_list _9 = END
    {   ( Procedure (mk_loc (),_3,Ptuple _5,_8,IsRec) )}
| _1 = PROCEDURE _2 = REC _3 = VAR _4 = VAR _5 = EQUAL _6 = ins_list _7 = END
    {   ( Procedure (mk_loc (),_3,Pvar _4,_6,IsRec) )}
| _1 = CALL _2 = VAR _3 = simple _4 = optional_name
    {                                ( Call (mk_loc (),_2,_3,_4) )}
| _1 = DEBUG _2 = exp
    {            ( Debug (mk_loc (),_2) )}
| _1 = FORALL _2 = VAR _3 = IN _4 = exp _5 = DO _6 = ins_list _7 = END
    {    ( Forall (mk_loc (),_2,_4,_6) )}
| _1 = WITH _2 = VAR _3 = FROM _4 = exp
    {    ( WithFrom (mk_loc (),_2,_4) )}
| _1 = INSTRUCTIONS _2 = VAR _3 = LBRAC _4 = exp_list _5 = RBRAC
    {                                         (Events(mk_loc(),_2,_4,false))}
| _1 = DEFAULT _2 = VAR _3 = LBRAC _4 = exp_list _5 = RBRAC
    {                                    (Events(mk_loc(),_2,_4,true))}

altopt:
  _1 = ALT
    {       ( () )}
| 
    {       ( () )}

alttags:
  _1 = TAG
    {      ( [_1] )}
| _1 = TAG _2 = ALT _3 = alttags
    {                  ( _1 :: _3 )}

deftest:
  _1 = test_type _2 = app_test
    {                     ( Test (_2,_1) )}

app_test:
  _1 = test _2 = exp _3 = optional_name
    {                         ( (mk_loc(),pp (),_1,_2,_3) )}

test_type:
  
    {           ( Check )}
| _1 = REQUIRES
    {           ( UndefinedUnless )}
| _1 = FLAG
    {           ( Flagged )}

optional_name:
  
    {         ( None )}
| _1 = AS _2 = VAR
    {         ( Some _2 )}

do_test:
  _1 = ACYCLIC
    {          ( Acyclic )}
| _1 = IRREFLEXIVE
    {              ( Irreflexive )}
| _1 = TESTEMPTY
    {            ( TestEmpty )}

test:
  _1 = do_test
    {          ( Yes _1 )}
| _1 = COMP _2 = do_test
    {               ( No _2)}

var_list:
  _1 = VAR
    {      ( [_1] )}
| _1 = VAR _2 = comma_opt _3 = var_list
    {                         ( _1 :: _3 )}

comma_opt:
  _1 = COMMA
    {        ( () )}

bind:
  _1 = VAR _2 = EQUAL _3 = exp
    {                ( (mk_loc (),Pvar _1,_3) )}
| _1 = LPAR _2 = formals _3 = RPAR _4 = EQUAL _5 = exp
    {                              ( (mk_loc (),Ptuple _2,_5) )}

pat_bind:
  _1 = bind
    {       ( _1 )}
| _1 = VAR _2 = VAR _3 = EQUAL _4 = exp
    {   ( (mk_loc (),Pvar _1,Fun (mk_loc(),Pvar _2,_4,_1,ASTUtils.free_body [_2] _4)) )}
| _1 = VAR _2 = LPAR _3 = formals _4 = RPAR _5 = EQUAL _6 = exp
    {   ( (mk_loc(),Pvar _1,Fun (mk_loc(),Ptuple _3,_6,_1,ASTUtils.free_body _3 _6)) )}

pat_bind_list:
  _1 = pat_bind
    {           ( [_1] )}
| _1 = pat_bind _2 = AND _3 = pat_bind_list
    {                             ( _1 :: _3 )}

formals:
  
    {           ( [] )}
| _1 = formalsN
    {           ( _1 )}

formalsN:
  _1 = VAR
    {                     ( [_1] )}
| _1 = VAR _2 = COMMA _3 = formalsN
    {                     ( _1 :: _3 )}

exp_list:
  
    {  ( [] )}
| _1 = exp_listN
    {            ( _1 )}

exp_listN:
  _1 = exp
    {      ([_1])}
| _1 = exp _2 = COMMA _3 = exp_listN
    {                      ( _1 :: _3)}

exp:
  _1 = LET _2 = pat_bind_list _3 = IN _4 = exp
    {                           ( Bind (mk_loc(),_2,_4) )}
| _1 = LET _2 = REC _3 = pat_bind_list _4 = IN _5 = exp
    {                               ( BindRec (mk_loc(),_3,_5) )}
| _1 = FUN _2 = VAR _3 = ARROW _4 = exp
    {    ( Fun (mk_loc(),Pvar _2,_4,"*fun*",ASTUtils.free_body [_2] _4) )}
| _1 = FUN _2 = LPAR _3 = formals _4 = RPAR _5 = ARROW _6 = exp
    {    ( Fun (mk_loc(),Ptuple _3,_6,"*fun*",ASTUtils.free_body _3 _6) )}
| _1 = TRY _2 = exp _3 = WITH _4 = exp
    {    ( Try (mk_loc(),_2,_4) )}
| _1 = IF _2 = cond _3 = THEN _4 = exp _5 = ELSE _6 = exp
    {    ( If (mk_loc(),_2,_4,_6) )}
| _1 = MATCH _2 = exp _3 = WITH _4 = altopt _5 = clause_list _6 = END
    {    (
     let cls,d = _5 in
     Match (mk_loc(),_2,cls,d)
    )}
| _1 = MATCH _2 = exp _3 = WITH _4 = altopt _5 = set_clauses _6 = END
    {    (
     let e,f = _5 in
     MatchSet (mk_loc (),_2,e,f)
   )}
| _1 = base
    {       ( _1 )}

cond:
  _1 = exp _2 = EQUAL _3 = exp
    {                 ( Eq (_1,_3) )}
| _1 = exp _2 = SUBSET _3 = exp
    {                 ( Subset (_1,_3) )}

simple:
  _1 = EMPTY
    {        ( Konst (mk_loc(),Empty RLN) )}
| _1 = TAG
    {       ( Tag (mk_loc (),_1) )}
| _1 = LACC _2 = args _3 = RACC
    {                 ( ExplicitSet (mk_loc (),_2) )}
| _1 = UNDERSCORE
    {              ( Konst (mk_loc(),Universe SET) )}
| _1 = LPAR _2 = RPAR
    {            ( Op (mk_loc (),Tuple,[]) )}
| _1 = LPAR _2 = tupleargs _3 = RPAR
    {                      ( Op (mk_loc (),Tuple,_2) )}
| _1 = LPAR _2 = exp _3 = RPAR
    {                ( _2 )}
| _1 = BEGIN _2 = exp _3 = END
    {                ( _2 )}
| _1 = LBRAC _2 = exp _3 = RBRAC
    {                  ( Op1 (mk_loc(),ToId,_2) )}

tupleargs:
  _1 = exp _2 = COMMA _3 = tupleend
    {                     ( _1 :: _3 )}

tupleend:
  _1 = exp
    {      ( [_1] )}
| _1 = exp _2 = COMMA _3 = tupleend
    {                     ( _1 :: _3 )}

base:
  _1 = simple
    {         ( _1 )}
| _1 = exp0
    {       ( _1 )}
| _1 = base _2 = STAR _3 = base
    {                 (Op (mk_loc(),Cartesian, [_1; _3]))}
| _1 = base _2 = STAR
    {            ( Op1(mk_loc(),Star,_1) )}
| _1 = base _2 = PLUS
    {            ( Op1(mk_loc(),Plus,_1) )}
| _1 = base _2 = OPT
    {           ( Op1(mk_loc(),Opt,_1) )}
| _1 = base _2 = HAT _3 = INV
    {               ( Op1(mk_loc(),Inv,_1) )}
| _1 = base _2 = SEMI _3 = base
    {                 ( do_op Seq _1 _3 )}
| _1 = base _2 = UNION _3 = base
    {                  ( do_op Union _1 _3 )}
| _1 = base _2 = PLUSPLUS _3 = base
    {                     ( Op (mk_loc (), Add, [_1; _3]) )}
| _1 = base _2 = DIFF _3 = base
    {                 ( Op (mk_loc (),Diff, [_1; _3;]) )}
| _1 = base _2 = INTER _3 = base
    {                  (  Op (mk_loc (),Inter, [_1; _3;]) )}
| _1 = COMP _2 = base
    {            ( Op1 (mk_loc(),Comp, _2) )}

empty_clause:
  _1 = LACC _2 = RACC _3 = ARROW _4 = exp
    {                      ( _4 )}

element_clause2:
  _1 = VAR _2 = PLUSPLUS _3 = VAR _4 = ARROW _5 = exp
    {                             ( EltRem (_1, _3, _5) )}

element_clause3:
  _1 = VAR _2 = UNION _3 = VAR _4 = PLUSPLUS _5 = VAR _6 = ARROW _7 = exp
    {                                       ( PreEltPost (_1,_3,_5,_7) )}

element_clause:
  _1 = element_clause2
    {                  ( _1 )}
| _1 = element_clause3
    {                  ( _1 )}

set_clauses:
  _1 = empty_clause _2 = ALT _3 = element_clause
    {                                  ( _1, _3 )}
| _1 = element_clause _2 = ALT _3 = empty_clause
    {                                  ( _3, _1 )}

clause:
  _1 = TAG _2 = ARROW _3 = exp
    {                ( _1,_3 )}

clause_list:
  _1 = clause
    {         ( [_1],None )}
| _1 = UNDERSCORE _2 = ARROW _3 = exp
    {                       ( [],Some _3 )}
| _1 = clause _2 = ALT _3 = clause_list
    {    (
     let cls,d = _3 in
     _1 :: cls, d
    )}

exp0:
  _1 = VAR
    {                      ( Var (mk_loc (),_1) )}
| _1 = exp0 _2 = arg %prec prec_app
    {                             ( App (mk_loc (),_1,_2) )}

arg:
  _1 = VAR
    {      ( Var (mk_loc (),_1) )}
| _1 = simple
    {         ( _1 )}

args:
  
    {  ( [] )}
| _1 = argsN
    {        ( _1 )}

argsN:
  _1 = exp
    {                 ( [ _1 ] )}
| _1 = exp _2 = COMMA _3 = argsN
    {                  ( _1 :: _3 )}

%%
