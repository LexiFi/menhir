File "herdtools7.7.51-stateParser.mly", line 34, characters 62-67:
Warning: the token CASES is unused.
File "herdtools7.7.51-stateParser.mly", line 33, characters 33-42:
Warning: the token PLUS_DISJ is unused.
Grammar has 28 nonterminal symbols, among which 8 start symbols.
Grammar has 37 terminal symbols.
Grammar has 90 productions.
nullable(skip_loc_constr) = true
nullable(reg) = false
nullable(prop) = false
nullable(old_constraints) = false
nullable(obsone) = true
nullable(obs) = true
nullable(maybev) = false
nullable(locs) = true
nullable(locations) = true
nullable(location_reg) = false
nullable(location_deref) = false
nullable(location) = false
nullable(loc_typ) = false
nullable(loc_semi_list) = true
nullable(loc_deref) = false
nullable(loc_constr) = true
nullable(kinds) = false
nullable(kind) = false
nullable(init_semi_list) = true
nullable(init) = false
nullable(final) = true
nullable(filter) = true
nullable(constraints) = false
nullable(constr) = true
nullable(atom_prop) = false
nullable(atom_init) = false
nullable(atom) = false
nullable(amperopt) = true
first(skip_loc_constr) = OBSERVED NOT LPAR LOCATIONS FORALL FINAL EXISTS
first(reg) = NAME DOLLARNAME
first(prop) = TRUE SYMB_REG PROC NUM NOT NAME LPAR LBRK FALSE
first(old_constraints) = WITH SEMI OBSERVED NOT LPAR FORALL FINAL EXISTS EOF
first(obsone) = SYMB_REG PROC NUM NAME LBRK
first(obs) = TOKAND SYMB_REG PROC NUM NAME LBRK
first(maybev) = NUM NAME
first(locs) = SYMB_REG PROC NUM NAME LBRK
first(locations) = LOCATIONS
first(location_reg) = SYMB_REG PROC NUM
first(location_deref) = SYMB_REG STAR PROC NUM
first(location) = SYMB_REG PROC NUM NAME LBRK
first(loc_typ) = SYMB_REG PROC NUM NAME LBRK
first(loc_semi_list) = SYMB_REG SEMI PROC NUM NAME LBRK
first(loc_deref) = NAME
first(loc_constr) = OBSERVED NOT LPAR LOCATIONS FORALL FINAL EXISTS
first(kinds) = NAME
first(kind) = NAME
first(init_semi_list) = SYMB_REG STAR SEMI PROC NUM NAME LBRK ATOMIC
first(init) = SYMB_REG STAR SEMI PROC NUM NAME LBRK EOF ATOMIC
first(final) = SEMI OBSERVED NOT LPAR FORALL FINAL EXISTS
first(filter) = FILTER
first(constraints) = WITH SEMI OBSERVED NOT LPAR LOCATIONS FORALL FINAL FILTER EXISTS EOF
first(constr) = OBSERVED NOT LPAR FORALL FINAL EXISTS
first(atom_prop) = SYMB_REG PROC NUM NAME LBRK
first(atom_init) = SYMB_REG STAR PROC NUM NAME LBRK ATOMIC
first(atom) = SYMB_REG PROC NUM NAME LBRK
first(amperopt) = AMPER
minimal(skip_loc_constr) = (* 0 *) 
minimal(reg) = (* 1 *) NAME
minimal(prop) = (* 1 *) TRUE
minimal(old_constraints) = (* 1 *) EOF
minimal(obsone) = (* 0 *) 
minimal(obs) = (* 0 *) 
minimal(maybev) = (* 1 *) NUM
minimal(locs) = (* 0 *) 
minimal(locations) = (* 0 *) 
minimal(location_reg) = (* 1 *) SYMB_REG
minimal(location_deref) = (* 1 *) SYMB_REG
minimal(location) = (* 1 *) SYMB_REG
minimal(loc_typ) = (* 1 *) SYMB_REG
minimal(loc_semi_list) = (* 0 *) 
minimal(loc_deref) = (* 4 *) NAME LBRK NUM RBRK
minimal(loc_constr) = (* 0 *) 
minimal(kinds) = (* 3 *) NAME COLON FORALL
minimal(kind) = (* 3 *) NAME COLON FORALL
minimal(init_semi_list) = (* 0 *) 
minimal(init) = (* 1 *) EOF
minimal(final) = (* 0 *) 
minimal(filter) = (* 0 *) 
minimal(constraints) = (* 1 *) EOF
minimal(constr) = (* 0 *) 
minimal(atom_prop) = (* 3 *) SYMB_REG EQUAL NUM
minimal(atom_init) = (* 1 *) SYMB_REG
minimal(atom) = (* 1 *) SYMB_REG
minimal(amperopt) = (* 0 *) 
follow(skip_loc_constr) = #
follow(reg) = WITH SYMB_REG STAR SEMI RPAR RBRK PROC OR OBSERVED NUM NOTEQUAL NOT NAME LPAR LBRK IMPLIES FORALL FINAL EXISTS EQUALEQUAL EQUAL EOF AND #
follow(prop) = WITH SEMI RPAR OR OBSERVED NOT LPAR IMPLIES FORALL FINAL EXISTS EOF AND #
follow(old_constraints) = #
follow(obsone) = WITH TOKAND SEMI EOF #
follow(obs) = WITH SEMI EOF #
follow(maybev) = WITH SYMB_REG STAR SEMI RPAR RBRK PROC OR OBSERVED NUM NOTEQUAL NOT NAME LPAR LBRK IMPLIES FORALL FINAL EXISTS EQUALEQUAL EQUAL EOF AND #
follow(locs) = #
follow(locations) = WITH SEMI OBSERVED NOT LPAR FORALL FINAL FILTER EXISTS EOF #
follow(location_reg) = WITH SYMB_REG STAR SEMI RPAR RBRK PROC OR OBSERVED NUM NOTEQUAL NOT NAME LPAR LBRK IMPLIES FORALL FINAL EXISTS EQUALEQUAL EQUAL EOF AND #
follow(location_deref) = WITH SEMI RPAR OR OBSERVED NOT LPAR IMPLIES FORALL FINAL EXISTS EOF AND #
follow(location) = SYMB_REG STAR SEMI RBRK PROC NUM NOTEQUAL NAME LBRK EQUALEQUAL EQUAL EOF #
follow(loc_typ) = SEMI RBRK
follow(loc_semi_list) = RBRK
follow(loc_deref) = SEMI RBRK NOTEQUAL EQUALEQUAL EQUAL
follow(loc_constr) = #
follow(kinds) = EOF
follow(kind) = SEMI EOF
follow(init_semi_list) = EOF
follow(init) = #
follow(final) = WITH EOF
follow(filter) = WITH SEMI OBSERVED NOT LPAR FORALL FINAL EXISTS EOF #
follow(constraints) = #
follow(constr) = WITH SEMI EOF #
follow(atom_prop) = WITH SEMI RPAR OR OBSERVED NOT LPAR IMPLIES FORALL FINAL EXISTS EOF AND #
follow(atom_init) = SEMI EOF
follow(atom) = SEMI EOF
follow(amperopt) = NUM NAME
Built an LR(0) automaton with 173 states.
The grammar is not SLR(1) -- 7 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 192 states.
12 shift/reduce conflicts were silently solved.
File "herdtools7.7.51-stateParser.mly", line 44, characters 0-5:
Warning: the precedence level assigned to PLUS_DISJ is never useful.
Warning: 51 states have an end-of-stream conflict.
File "herdtools7.7.51-stateParser.mly", line 151, characters 1-1:
Warning: production locs ->  is never reduced.
Warning: in total, 1 production is never reduced.
73 out of 192 states have a default reduction.
63 out of 192 states are represented.
0 out of 75 symbols keep track of their start position.
0 out of 75 symbols keep track of their end position.
44 out of 98 productions exploit shiftreduce optimization.
0 out of 192 states can peek at an error.
522 functions before inlining, 76 functions after inlining.
