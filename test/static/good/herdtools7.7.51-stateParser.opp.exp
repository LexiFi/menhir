File "herdtools7.7.51-stateParser.mly", line 34, characters 62-67:
Warning: the token CASES is unused.
File "herdtools7.7.51-stateParser.mly", line 33, characters 33-42:
Warning: the token PLUS_DISJ is unused.
%{
(****************************************************************************)
(*                           the diy toolsuite                              *)
(*                                                                          *)
(* Jade Alglave, University College London, UK.                             *)
(* Luc Maranget, INRIA Paris-Rocquencourt, France.                          *)
(*                                                                          *)
(* Copyright 2010-present Institut National de Recherche en Informatique et *)
(* en Automatique and the authors. All rights reserved.                     *)
(*                                                                          *)
(* This software is governed by the CeCILL-B license under French law and   *)
(* abiding by the rules of distribution of free software. You can use,      *)
(* modify and/ or redistribute the software under the terms of the CeCILL-B *)
(* license as circulated by CEA, CNRS and INRIA at the following URL        *)
(* "http://www.cecill.info". We also give a copy in LICENSE.txt.            *)
(****************************************************************************)

open Constant
open MiscParser
open ConstrGen
let mk_sym s = Symbolic (s,0)
%}
%start constr
%start constraints
%start filter
%start init
%start loc_constr
%start location
%start locs
%start skip_loc_constr
%token AMPER
%token AND
%token ATOMIC
%token ATOMICINIT
%token CASES
%token COLON
%token <string> DOLLARNAME
%token EOF
%token EQUAL
%token EQUALEQUAL
%token EXISTS
%token FALSE
%token FILTER
%token FINAL
%token FORALL
%token IMPLIES
%token LBRK
%token LOCATIONS
%token LPAR
%token <string> NAME
%token NOT
%token NOTEQUAL
%token <string> NUM
%token OBSERVED
%token OR
%token PLUS_DISJ
%token <int> PROC
%token PTX_REG_DEC
%token <string> PTX_REG_TYPE
%token RBRK
%token RPAR
%token SEMI
%token STAR
%token <string> SYMB_REG
%token TOKAND
%token TRUE
%token WITH
%left OR PLUS_DISJ
%left AND
%right IMPLIES
%nonassoc NOT
%type <MiscParser.constr> constr
%type <(MiscParser.location * MiscParser.run_type) list * MiscParser.prop option * MiscParser.constr * (string * MiscParser.quantifier) list> constraints
%type <MiscParser.prop option> filter
%type <MiscParser.state> init
%type <(MiscParser.location * MiscParser.run_type) list * MiscParser.constr> loc_constr
%type <MiscParser.location> location
%type <MiscParser.location list> locs
%type <MiscParser.constr> skip_loc_constr
%%

init:
  _1 = init_semi_list _2 = EOF
    {                     ( _1 )}

reg:
  _1 = NAME
    {             (  _1 )}
| _1 = DOLLARNAME
    {             (  _1 )}

maybev:
  _1 = NUM
    {       ( Concrete _1 )}
| _1 = NAME
    {       ( mk_sym _1 )}

location_reg:
  _1 = PROC _2 = COLON _3 = reg
    {                  (Location_reg (_1,_3))}
| _1 = NUM _2 = COLON _3 = reg
    {                  (Location_reg (Misc.string_as_int _1,_3))}
| _1 = SYMB_REG
    {                  (Location_sreg _1 )}
| _1 = NUM _2 = COLON _3 = PTX_REG_DEC _4 = PTX_REG_TYPE _5 = reg
    {                  (Location_reg(Misc.string_as_int _1,_5))}
| _1 = PROC _2 = COLON _3 = PTX_REG_DEC _4 = PTX_REG_TYPE _5 = reg
    {                  (Location_reg(_1,_5))}

location_deref:
  _1 = location_reg
    {               ( _1 )}
| _1 = STAR _2 = location_reg
    {                    ( _2 )}
| _1 = STAR _2 = NAME
    {            ( Location_global (mk_sym _2) )}

location:
  _1 = location_reg
    {               ( _1 )}
| _1 = LBRK _2 = maybev _3 = RBRK
    {                   (Location_global _2)}
| _1 = maybev
    {         ( Location_global _1 )}

atom:
  _1 = location
    {           ((_1,ParsedConstant.zero))}
| _1 = location _2 = EQUAL _3 = maybev
    {                        ((_1,_3))}

atom_init:
  _1 = atom
    {       ( let x,v = _1 in x,(TyDef,v) )}
| _1 = NAME _2 = location
    {                ( _2,(Ty _1,ParsedConstant.zero))}
| _1 = ATOMIC _2 = NAME _3 = location
    {                       ( _3,(Atomic _2,ParsedConstant.zero))}
| _1 = NAME _2 = location _3 = EQUAL _4 = maybev
    {                             ( (_2,(Ty _1,_4)))}
| _1 = NAME _2 = location _3 = EQUAL _4 = ATOMICINIT _5 = LPAR _6 = maybev _7 = RPAR
    {                                                  ( (_2,(Ty _1,_6)))}
| _1 = NAME _2 = STAR _3 = location
    {                     ( (_3,(Pointer _1,ParsedConstant.zero)))}
| _1 = NAME _2 = STAR _3 = location _4 = EQUAL _5 = amperopt _6 = maybev
    {                                           ( (_3,(Pointer _1,_6)))}
| _1 = STAR _2 = location
    {                ( (_2,(TyDefPointer,ParsedConstant.zero)))}
| _1 = STAR _2 = location _3 = EQUAL _4 = amperopt _5 = maybev
    {                                      ( (_2,(TyDefPointer,_5)))}
| _1 = NAME _2 = NAME _3 = LBRK _4 = NUM _5 = RBRK
    {                          ( (Location_global (mk_sym _2),(TyArray (_1,Misc.string_as_int _4),ParsedConstant.zero)) )}

amperopt:
  _1 = AMPER
    {        ( () )}
| 
    {  ( () )}

init_semi_list:
  
    {  ([])}
| _1 = SEMI
    {       ([])}
| _1 = atom_init
    {            (_1::[])}
| _1 = atom_init _2 = SEMI _3 = init_semi_list
    {                                 (_1::_3)}

loc_deref:
  _1 = NAME _2 = LBRK _3 = NUM _4 = RBRK
    {                    ( Location_deref (mk_sym _1, Misc.string_as_int _3) )}

loc_typ:
  _1 = loc_deref
    {            ( (_1,TyDef) )}
| _1 = location
    {           ( (_1, TyDef) )}
| _1 = location _2 = STAR
    {                ( (_1, TyDefPointer) )}
| _1 = location _2 = NAME
    {                ( (_1, Ty _2) )}
| _1 = location _2 = NAME _3 = STAR
    {                     ( (_1, Pointer _2) )}

loc_semi_list:
  
    {  ([])}
| _1 = SEMI
    {       ([])}
| _1 = loc_typ
    {          (_1::[])}
| _1 = loc_typ _2 = SEMI _3 = loc_semi_list
    {                              (_1::_3)}

locations:
  _1 = LOCATIONS _2 = LBRK _3 = loc_semi_list _4 = RBRK
    {                                     ( _3 )}
| 
    {  ( [] )}

locs:
  
    {  ( [] )}
| _1 = location _2 = locs
    {                ( _1 :: _2 )}

filter:
  
    {  ( None )}
| _1 = FILTER _2 = prop
    {              ( Some _2 )}

constraints:
  _1 = locations _2 = filter _3 = old_constraints
    {  ( let x = _1 in
    let f = _2 in
    let y,z = _3 in
    x,f,y,z )}

old_constraints:
  _1 = final _2 = EOF
    {            ( _1,[] )}
| _1 = final _2 = WITH _3 = kinds _4 = EOF
    {                       ( _1,_3 )}

kinds:
  _1 = kind
    {               ( [_1] )}
| _1 = kind _2 = SEMI
    {               ( [_1] )}
| _1 = kind _2 = SEMI _3 = kinds
    {                    ( _1 :: _3 )}

kind:
  _1 = NAME _2 = COLON _3 = FORALL
    {                    ( (_1,Require) )}
| _1 = NAME _2 = COLON _3 = EXISTS
    {                    ( (_1,Allow) )}
| _1 = NAME _2 = COLON _3 = NOT _4 = EXISTS
    {                        ( (_1,Forbid) )}

final:
  _1 = constr
    {         ( _1 )}
| _1 = constr _2 = SEMI
    {              ( _1 )}

constr:
  
    {   ( ConstrGen.constr_true )}
| _1 = FORALL _2 = prop
    {    (ForallStates _2)}
| _1 = EXISTS _2 = prop
    {    (ExistsState _2)}
| _1 = NOT _2 = EXISTS _3 = prop
    {        ( NotExistsState _3 )}
| _1 = FINAL _2 = prop
    {        ( ExistsState _2 )}
| _1 = LPAR _2 = prop _3 = RPAR
    {    (ExistsState _2)}
| _1 = OBSERVED _2 = obs
    {    ( ExistsState (Or _2) )}

obs:
  _1 = obsone
    {          (  [ And _1 ] )}
| _1 = obsone _2 = TOKAND _3 = obs
    {                     ( And _1 :: _3 )}

obsone:
  
    {                        ( [] )}
| _1 = atom_prop _2 = SEMI _3 = obsone
    {                        ( _1 :: _3 )}

loc_constr:
  _1 = locations _2 = constr
    {                   ( _1,_2 )}

skip_loc_constr:
  _1 = locations _2 = constr
    {                   ( _2 )}

atom_prop:
  _1 = loc_deref _2 = EQUAL _3 = maybev
    {                          (Atom (LV (_1,_3)))}
| _1 = location _2 = EQUAL _3 = maybev
    {                        (Atom (LV (_1,_3)))}
| _1 = loc_deref _2 = EQUALEQUAL _3 = maybev
    {                               (Atom (LV (_1,_3)))}
| _1 = location _2 = EQUALEQUAL _3 = maybev
    {                             (Atom (LV (_1,_3)))}
| _1 = loc_deref _2 = NOTEQUAL _3 = maybev
    {                             (Not (Atom (LV (_1,_3))))}
| _1 = location _2 = NOTEQUAL _3 = maybev
    {                           (Not (Atom (LV (_1,_3))))}
| _1 = location _2 = EQUAL _3 = location_deref
    {                                (Atom (LL (_1,_3)))}
| _1 = location _2 = EQUALEQUAL _3 = location_deref
    {                                     (Atom (LL (_1,_3)))}

prop:
  _1 = TRUE
    {    (And [])}
| _1 = FALSE
    {    (Or [])}
| _1 = atom_prop
    {    ( _1 )}
| _1 = NOT _2 = prop
    {    (Not _2)}
| _1 = prop _2 = AND _3 = prop
    {    (And [_1;_3])}
| _1 = prop _2 = OR _3 = prop
    {    (Or [_1;_3])}
| _1 = prop _2 = IMPLIES _3 = prop
    {    ( Implies (_1,_3) )}
| _1 = LPAR _2 = prop _3 = RPAR
    {    ( _2 )}

%%
