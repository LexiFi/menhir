File "hmx-multi.mly", line 115, characters 7-12:
Warning: the token MATCH is unused.
%{

open Multi.Hm
open Multi.Primitives

let app e1 e2 =
  App(e1, e2)

let prim p =
  PrimApp (p, [])

let primapp p e =
  PrimApp (p, [e])

let primapp2 p e1 e2 =
  PrimApp (p, [e1; e2])

let sequence e1 e2 =
  Let ("-", primapp PrimEnsureUnit e1, e2)

(* A pattern is either a variable or the unit constant. A wildcard pattern is viewed as a variable "-", which cannot
   be named inside expressions, because the lexer will not view it as an identifier. *)

type pattern =
  | PVariable of string
  | PUnit

let rec make_fun patterns expr =
  match patterns with
  | [] ->
      expr
  | (PVariable x) :: patterns ->
      Lambda (x, make_fun patterns expr)
  | PUnit :: patterns ->
      Lambda ("-", sequence (Var "-") (make_fun patterns expr))

let rec make_let (pattern, body) =
  match pattern with
  | PVariable x ->
      x, body
  | PUnit ->
      "-", primapp PrimEnsureUnit body

let rec make_extension base = function
  | [] ->
      base
  | (mutflag, label, expr) :: rest ->
      primapp2
	(if mutflag then PrimExtendMutable label else PrimExtend label)
	(make_extension base rest) expr

let rec make_restriction base = function
  | [] ->
      base
  | label :: rest ->
      primapp (PrimRestrict label) (make_restriction base rest)

type case_pattern =
  | CaseOne of string
  | CaseAll

let rec make_case subject = function
  | [] ->
      prim PrimCaseNone
  | (CaseOne tag, e) :: rest ->

      (* For convenience, we have made PrimCaseOne a binary primitive operation. This allows avoiding unnecessary
	 $\eta$-expansions.

	 Note that our current encoding of ``case'' constructs into $\lambda$-abstractions and applications of
	 primitives is not satisfactory, because it forces all such constructs to have monomorphic type. *)

      primapp2 (PrimCaseOne tag) (make_fun [subject] e) (make_case subject rest)
  | (CaseAll, e) :: rest ->
      if rest <> [] then
	Printf.eprintf "Warning: unused `case' clauses.\n";
      make_fun [subject] e

%}
%start phrase
%token ARROW
%token BAR
%token CASE
%token CHOOSE
%token DOT
%token END
%token EQUAL
%token FUN
%token IN
%token <int> INT
%token LBRACE
%token LEFTARROW
%token LET
%token <string> LIDENT
%token LPAREN
%token MATCH
%token MUTABLE
%token OF
%token RBRACE
%token REC
%token RPAREN
%token SEMI
%token SEMISEMI
%token SETMINUS
%token <string> UIDENT
%token UNDERSCORE
%token UNIT
%type <Multi.Hm.phrase> phrase
%%

phrase:
  _1 = expression _2 = SEMISEMI
    {                                                                ( "-", _1 )}
| _1 = LET _2 = pattern _3 = pattern_list _4 = EQUAL _5 = expression _6 = SEMISEMI
    {                                                                ( make_let (_2, make_fun _3 _5) )}
| _1 = LET _2 = REC _3 = LIDENT _4 = pattern_list _5 = EQUAL _6 = expression _7 = SEMISEMI
    {                                                                ( let ff = Lambda (_3, make_fun _4 _6) in
                                                                  _3, primapp PrimFix ff )}

expression:
  _1 = expression2
    {                            ( _1 )}
| _1 = FUN _2 = pattern_list _3 = ARROW _4 = expression
    {                                         ( make_fun _2 _4 )}
| _1 = LET _2 = pattern _3 = pattern_list _4 = EQUAL _5 = expression _6 = IN _7 = expression
    {                                                                ( let name, body = make_let (_2, make_fun _3 _5) in
                                                                  Let (name, body, _7) )}
| _1 = LET _2 = REC _3 = LIDENT _4 = pattern_list _5 = EQUAL _6 = expression _7 = IN _8 = expression
    {                                                                ( let ff = Lambda (_3, make_fun _4 _6) in
                                                                  Let (_3, primapp PrimFix ff, _8) )}

expression2:
  _1 = expression1
    {                      ( _1 )}
| _1 = expression1 _2 = SEMI _3 = expression
    {                                    ( sequence _1 _3 )}

expression1:
  _1 = expression0
    {                             ( _1 )}
| _1 = expression1 _2 = expression0
    {                                                ( app _1 _2 )}
| _1 = CHOOSE _2 = expression0 _3 = expression0
    {                                                                ( primapp2 PrimChoice _2 _3 )}

expression0:
  _1 = LIDENT
    {                         ( Var _1 )}
| _1 = UIDENT
    {                         ( prim (PrimConstructor _1) )}
| _1 = UNIT
    {                      ( prim PrimUnit )}
| _1 = INT
    {                                                                ( prim (PrimInt _1) )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                              ( _2 )}
| _1 = expression0 _2 = LBRACE _3 = field_expr_list _4 = RBRACE
    {                                                              ( make_extension _1 _3 )}
| _1 = expression0 _2 = DOT _3 = LIDENT
    {                                              ( primapp (PrimAccess _3) _1 )}
| _1 = expression0 _2 = SETMINUS _3 = LIDENT
    {                                                                ( primapp (PrimRestrict _3) _1 )}
| _1 = expression0 _2 = SETMINUS _3 = LBRACE _4 = field_list _5 = RBRACE
    {                                                                ( make_restriction _1 _4 )}
| _1 = expression0 _2 = DOT _3 = LIDENT _4 = LEFTARROW _5 = expression1
    {                                                                ( primapp2 (PrimMutate _3) _1 _5 )}
| _1 = CASE _2 = LIDENT _3 = OF _4 = case_list _5 = END
    {                                                                ( app (make_case (PVariable _2) _4) (Var _2) )}
| _1 = CASE _2 = pattern _3 = EQUAL _4 = expression _5 = OF _6 = case_list _7 = END
    {                                                                ( app (make_case _2 _6) _4 )}

field_expr_list:
  
    {                              ( [] )}
| _1 = field_expr
    {                                                                ( [_1] )}
| _1 = field_expr _2 = SEMI _3 = field_expr_list
    {                                                          ( _1 :: _3 )}

field_expr:
  _1 = LIDENT _2 = EQUAL _3 = expression1
    {                                                                ( false, _1, _3 )}
| _1 = MUTABLE _2 = LIDENT _3 = EQUAL _4 = expression1
    {                                                                ( true, _2, _4 )}

field_list:
  
    {                              ( [] )}
| _1 = LIDENT
    {                                      ( [_1] )}
| _1 = LIDENT _2 = SEMI _3 = field_list
    {                                                          ( _1 :: _3 )}

pattern_list:
  
    {                              ( [] )}
| _1 = pattern _2 = pattern_list
    {                                                     ( _1 :: _2 )}

pattern:
  _1 = LIDENT
    {                                                                ( PVariable _1 )}
| _1 = UNDERSCORE
    {                                                                ( PVariable "-" )}
| _1 = UNIT
    {                                                                ( PUnit )}

case_list:
  
    {                                                                ( [] )}
| _1 = case_entry _2 = case_list
    {                                                                ( _1 :: _2 )}

case_entry:
  _1 = BAR _2 = case_pattern _3 = ARROW _4 = expression
    {                                                                ( _2, _4 )}

case_pattern:
  _1 = UIDENT
    {                                                                ( CaseOne _1 )}
| _1 = UNDERSCORE
    {                                                                ( CaseAll )}

%%
