File "hmx-sets.mly", line 69, characters 7-10:
Warning: the token TRY is unused.
File "hmx-sets.mly", line 72, characters 7-11:
Warning: the token WITH is unused.
%{

open Sets.Hm
open Sets.Primitives

let sequence e1 e2 =
  App(Lambda("-", e2), e1)

let sequence arg body =
  sequence (PrimApp(PrimEnsureUnit, [arg])) body

(* A pattern is either a variable or the unit constant. A wildcard pattern is viewed as a variable "-", which cannot
   be named inside expressions, because the lexer will not view it as an identifier. *)

type pattern =
  | PVariable of string
  | PUnit

let rec make_fun patterns expr =
  match patterns with
  | [] ->
      expr
  | (PVariable x) :: patterns ->
      Lambda (x, make_fun patterns expr)
  | PUnit :: patterns ->
      Lambda ("-", sequence (Var "-") (make_fun patterns expr))

let rec make_let (pattern, body) =
  match pattern with
  | PVariable x ->
      x, body
  | PUnit ->
      "-", PrimApp (PrimEnsureUnit, [body])

let rec make_set = function
  | [] ->
      PrimApp (PrimSetEmpty, [])
  | label :: rest ->
      PrimApp (PrimSetExtend label, [make_set rest])

%}
%start phrase
%token ARROW
%token CHOOSE
%token DOT
%token EQUAL
%token EXC
%token FUN
%token <string> IDENT
%token IN
%token LBRACE
%token LET
%token LPAREN
%token MATCH
%token NORMAL
%token PLUS
%token QUESTION
%token RBRACE
%token RPAREN
%token SEMI
%token SEMISEMI
%token SETMINUS
%token TILDE
%token TRY
%token UNDERSCORE
%token UNIT
%token WITH
%type <Sets.Hm.phrase> phrase
%%

phrase:
  _1 = expression _2 = SEMISEMI
    {                                                                ( "_", _1 )}
| _1 = LET _2 = pattern _3 = pattern_list _4 = EQUAL _5 = expression _6 = SEMISEMI
    {                                                                ( make_let (_2, make_fun _3 _5) )}

expression:
  _1 = expression2
    {                            ( _1 )}
| _1 = FUN _2 = pattern_list _3 = ARROW _4 = expression
    {                                         ( make_fun _2 _4 )}
| _1 = LET _2 = pattern _3 = pattern_list _4 = EQUAL _5 = expression _6 = IN _7 = expression
    {                                                                ( let name, body = make_let (_2, make_fun _3 _5) in
                                                                  Let (name, body, _7) )}

expression2:
  _1 = expression1
    {                      ( _1 )}
| _1 = expression1 _2 = SEMI _3 = expression
    {                                    ( sequence _1 _3 )}

expression1:
  _1 = expression0
    {                             ( _1 )}
| _1 = expression1 _2 = expression0
    {                                                ( App (_1, _2) )}
| _1 = CHOOSE _2 = expression0 _3 = expression0
    {                                                                ( PrimApp (PrimChoice, [_2;_3]) )}

expression0:
  _1 = IDENT
    {                        ( Var _1 )}
| _1 = UNIT
    {                      ( PrimApp (PrimUnit, []) )}
| _1 = NORMAL
    {                                                                ( PrimApp (PrimNormal, []) )}
| _1 = EXC
    {                                                                ( PrimApp (PrimExc, []) )}
| _1 = MATCH
    {                                                                ( PrimApp (PrimMatch, []) )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                              ( _2 )}
| _1 = LBRACE _2 = label_list _3 = RBRACE
    {                                               ( make_set _2 )}
| _1 = expression0 _2 = PLUS _3 = IDENT
    {                                                                ( PrimApp (PrimSetExtend _3, [_1]) )}
| _1 = expression0 _2 = DOT _3 = IDENT
    {                                             ( PrimApp (PrimSetMemberAssert _3, [_1]) )}
| _1 = expression0 _2 = SETMINUS _3 = IDENT
    {                                                                ( PrimApp (PrimSetRestrict _3, [_1]) )}
| _1 = expression0 _2 = QUESTION _3 = IDENT
    {                                                                ( PrimApp (PrimSetMemberTest _3, [_1]) )}
| _1 = expression0 _2 = TILDE _3 = IDENT
    {                                                                ( PrimApp (PrimSetModify _3, [_1]) )}

label_list:
  
    {                              ( [] )}
| _1 = IDENT
    {                             ( [_1] )}
| _1 = IDENT _2 = SEMI _3 = label_list
    {                                                   ( _1 :: _3 )}

pattern_list:
  
    {                              ( [] )}
| _1 = pattern _2 = pattern_list
    {                                                     ( _1 :: _2 )}

pattern:
  _1 = IDENT
    {                                                                ( PVariable _1 )}
| _1 = UNDERSCORE
    {                                                                ( PVariable "-" )}
| _1 = UNIT
    {                                                                ( PUnit )}

%%
