State 0:
## Known stack suffix:
##
## LR(1) items:
input' -> . input [ # ]
## Transitions:
-- On error shift to state 1
-- On null shift to state 2
-- On input shift to state 3
## Reductions:
-- On QMF reduce production null ->
-- On HOF reduce production null ->
-- On FOF reduce production null ->
-- On CNF reduce production null ->

State 1:
## Known stack suffix:
## error
## LR(1) items:
input -> error . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production input -> error

State 2:
## Known stack suffix:
## null
## LR(1) items:
input -> null . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production input -> null

State 3:
## Known stack suffix:
## input
## LR(1) items:
input' -> input . [ # ]
input -> input . hof_annotated [ QMF HOF FOF CNF # ]
input -> input . fof_annotated [ QMF HOF FOF CNF # ]
input -> input . cnf_annotated [ QMF HOF FOF CNF # ]
input -> input . qmf_annotated [ QMF HOF FOF CNF # ]
## Transitions:
-- On QMF shift to state 4
-- On HOF shift to state 321
-- On FOF shift to state 359
-- On CNF shift to state 370
-- On qmf_annotated shift to state 381
-- On hof_annotated shift to state 382
-- On fof_annotated shift to state 383
-- On cnf_annotated shift to state 384
## Reductions:

State 4:
## Known stack suffix:
## QMF
## LR(1) items:
qmf_annotated -> QMF . LPAREN name COMMA formula_role COMMA qmf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On LPAREN shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## QMF LPAREN
## LR(1) items:
qmf_annotated -> QMF LPAREN . name COMMA formula_role COMMA qmf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Unsigned_integer shift to state 6
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On name shift to state 9
-- On atomic_word shift to state 320
## Reductions:

State 6:
## Known stack suffix:
## Unsigned_integer
## LR(1) items:
name -> Unsigned_integer . [ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> Unsigned_integer

State 7:
## Known stack suffix:
## Single_quoted
## LR(1) items:
atomic_word -> Single_quoted . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND LPAREN IMPLIES IFF IF GETS EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_word -> Single_quoted

State 8:
## Known stack suffix:
## Lower_word
## LR(1) items:
atomic_word -> Lower_word . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND LPAREN IMPLIES IFF IF GETS EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_word -> Lower_word

State 9:
## Known stack suffix:
## QMF LPAREN name
## LR(1) items:
qmf_annotated -> QMF LPAREN name . COMMA formula_role COMMA qmf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## QMF LPAREN name COMMA
## LR(1) items:
qmf_annotated -> QMF LPAREN name COMMA . formula_role COMMA qmf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On formula_role shift to state 11
-- On atomic_word shift to state 319
## Reductions:

State 11:
## Known stack suffix:
## QMF LPAREN name COMMA formula_role
## LR(1) items:
qmf_annotated -> QMF LPAREN name COMMA formula_role . COMMA qmf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## QMF LPAREN name COMMA formula_role COMMA
## LR(1) items:
qmf_annotated -> QMF LPAREN name COMMA formula_role COMMA . qmf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 67
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_top shift to state 89
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_or_formula shift to state 78
-- On qmf_nonassoc_binary shift to state 81
-- On qmf_formula shift to state 318
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_binary_formula shift to state 84
-- On qmf_atomic_formula shift to state 58
-- On qmf_assoc_binary shift to state 85
-- On qmf_and_formula shift to state 86
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 13:
## Known stack suffix:
## Upper_word
## LR(1) items:
variable -> Upper_word . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> Upper_word

State 14:
## Known stack suffix:
## Unsigned_integer
## LR(1) items:
number -> Unsigned_integer . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production number -> Unsigned_integer

State 15:
## Known stack suffix:
## TOK_TRUE
## LR(1) items:
qmf_prop_const -> TOK_TRUE . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_prop_const -> TOK_TRUE

State 16:
## Known stack suffix:
## TOK_FALSE
## LR(1) items:
qmf_prop_const -> TOK_FALSE . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_prop_const -> TOK_FALSE

State 17:
## Known stack suffix:
## TILDE
## LR(1) items:
qmf_unary_connective -> TILDE . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_unary_connective -> TILDE

State 18:
## Known stack suffix:
## Signed_integer
## LR(1) items:
number -> Signed_integer . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production number -> Signed_integer

State 19:
## Known stack suffix:
## Real
## LR(1) items:
number -> Real . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production number -> Real

State 20:
## Known stack suffix:
## QUESTION
## LR(1) items:
quantifier -> QUESTION . [ LBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifier -> QUESTION

State 21:
## Known stack suffix:
## LPAREN
## LR(1) items:
qmf_unitary_formula -> LPAREN . qmf_formula RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 67
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_or_formula shift to state 78
-- On qmf_nonassoc_binary shift to state 81
-- On qmf_formula shift to state 82
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_binary_formula shift to state 84
-- On qmf_atomic_formula shift to state 58
-- On qmf_assoc_binary shift to state 85
-- On qmf_and_formula shift to state 86
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 22:
## Known stack suffix:
## EXCLAMATION
## LR(1) items:
quantifier -> EXCLAMATION . [ LBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifier -> EXCLAMATION

State 23:
## Known stack suffix:
## DIAMOND
## LR(1) items:
boxoperator -> DIAMOND . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boxoperator -> DIAMOND

State 24:
## Known stack suffix:
## BOX
## LR(1) items:
boxoperator -> BOX . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boxoperator -> BOX

State 25:
## Known stack suffix:
## variable
## LR(1) items:
qmf_variable -> variable . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_variable -> variable

State 26:
## Known stack suffix:
## quantifier
## LR(1) items:
qmf_quantified_formula -> quantifier . LBRKT qmf_variable_decls RBRKT COLON qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On LBRKT shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## quantifier LBRKT
## LR(1) items:
qmf_quantified_formula -> quantifier LBRKT . qmf_variable_decls RBRKT COLON qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable shift to state 25
-- On qmf_variable_decls shift to state 28
-- On qmf_variable_decl shift to state 63
-- On qmf_variable shift to state 66
## Reductions:

State 28:
## Known stack suffix:
## quantifier LBRKT qmf_variable_decls
## LR(1) items:
qmf_quantified_formula -> quantifier LBRKT qmf_variable_decls . RBRKT COLON qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On RBRKT shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## quantifier LBRKT qmf_variable_decls RBRKT
## LR(1) items:
qmf_quantified_formula -> quantifier LBRKT qmf_variable_decls RBRKT . COLON qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On COLON shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## quantifier LBRKT qmf_variable_decls RBRKT COLON
## LR(1) items:
qmf_quantified_formula -> quantifier LBRKT qmf_variable_decls RBRKT COLON . qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 32
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_atomic_formula shift to state 58
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 31:
## Known stack suffix:
## qmf_variable
## LR(1) items:
qmf_term -> qmf_variable . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_term -> qmf_variable

State 32:
## Known stack suffix:
## quantifier LBRKT qmf_variable_decls RBRKT COLON qmf_unitary_formula
## LR(1) items:
qmf_quantified_formula -> quantifier LBRKT qmf_variable_decls RBRKT COLON qmf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_quantified_formula -> quantifier LBRKT qmf_variable_decls RBRKT COLON qmf_unitary_formula

State 33:
## Known stack suffix:
## qmf_unary_formula
## LR(1) items:
qmf_unitary_formula -> qmf_unary_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_unitary_formula -> qmf_unary_formula

State 34:
## Known stack suffix:
## qmf_unary_connective
## LR(1) items:
qmf_unary_formula -> qmf_unary_connective . qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 35
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_atomic_formula shift to state 58
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 35:
## Known stack suffix:
## qmf_unary_connective qmf_unitary_formula
## LR(1) items:
qmf_unary_formula -> qmf_unary_connective qmf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_unary_formula -> qmf_unary_connective qmf_unitary_formula

State 36:
## Known stack suffix:
## qmf_term
## LR(1) items:
qmf_atomic_formula -> qmf_term . qmf_infix_pred qmf_term [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On NEQUALS shift to state 37
-- On EQUALS shift to state 38
-- On qmf_infix_pred shift to state 39
## Reductions:

State 37:
## Known stack suffix:
## NEQUALS
## LR(1) items:
qmf_infix_pred -> NEQUALS . [ Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_infix_pred -> NEQUALS

State 38:
## Known stack suffix:
## EQUALS
## LR(1) items:
qmf_infix_pred -> EQUALS . [ Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_infix_pred -> EQUALS

State 39:
## Known stack suffix:
## qmf_term qmf_infix_pred
## LR(1) items:
qmf_atomic_formula -> qmf_term qmf_infix_pred . qmf_term [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 25
-- On qmf_variable shift to state 31
-- On qmf_term shift to state 40
-- On qmf_pred shift to state 41
-- On qmf_constant shift to state 45
-- On number shift to state 47
-- On atomic_word shift to state 48
## Reductions:

State 40:
## Known stack suffix:
## qmf_term qmf_infix_pred qmf_term
## LR(1) items:
qmf_atomic_formula -> qmf_term qmf_infix_pred qmf_term . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_atomic_formula -> qmf_term qmf_infix_pred qmf_term

State 41:
## Known stack suffix:
## qmf_pred
## LR(1) items:
qmf_term -> qmf_pred . LPAREN qmf_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## qmf_pred LPAREN
## LR(1) items:
qmf_term -> qmf_pred LPAREN . qmf_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 25
-- On qmf_variable shift to state 31
-- On qmf_term shift to state 43
-- On qmf_pred shift to state 41
-- On qmf_constant shift to state 45
-- On qmf_args shift to state 49
-- On number shift to state 47
-- On atomic_word shift to state 48
## Reductions:

State 43:
## Known stack suffix:
## qmf_term
## LR(1) items:
qmf_args -> qmf_term . [ RPAREN ]
qmf_args -> qmf_term . COMMA qmf_args [ RPAREN ]
## Transitions:
-- On COMMA shift to state 44
## Reductions:
-- On RPAREN reduce production qmf_args -> qmf_term

State 44:
## Known stack suffix:
## qmf_term COMMA
## LR(1) items:
qmf_args -> qmf_term COMMA . qmf_args [ RPAREN ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 25
-- On qmf_variable shift to state 31
-- On qmf_term shift to state 43
-- On qmf_pred shift to state 41
-- On qmf_constant shift to state 45
-- On qmf_args shift to state 46
-- On number shift to state 47
-- On atomic_word shift to state 48
## Reductions:

State 45:
## Known stack suffix:
## qmf_constant
## LR(1) items:
qmf_term -> qmf_constant . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_term -> qmf_constant

State 46:
## Known stack suffix:
## qmf_term COMMA qmf_args
## LR(1) items:
qmf_args -> qmf_term COMMA qmf_args . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_args -> qmf_term COMMA qmf_args

State 47:
## Known stack suffix:
## number
## LR(1) items:
qmf_constant -> number . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_constant -> number

State 48:
## Known stack suffix:
## atomic_word
## LR(1) items:
qmf_constant -> atomic_word . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
qmf_pred -> atomic_word . [ LPAREN ]
## Transitions:
## Reductions:
-- On VLINE reduce production qmf_constant -> atomic_word
-- On RPAREN reduce production qmf_constant -> atomic_word
-- On NVLINE reduce production qmf_constant -> atomic_word
-- On NIFF reduce production qmf_constant -> atomic_word
-- On NAMPERSAND reduce production qmf_constant -> atomic_word
-- On LPAREN reduce production qmf_pred -> atomic_word
-- On IMPLIES reduce production qmf_constant -> atomic_word
-- On IFF reduce production qmf_constant -> atomic_word
-- On IF reduce production qmf_constant -> atomic_word
-- On COMMA reduce production qmf_constant -> atomic_word
-- On AMPERSAND reduce production qmf_constant -> atomic_word

State 49:
## Known stack suffix:
## qmf_pred LPAREN qmf_args
## LR(1) items:
qmf_term -> qmf_pred LPAREN qmf_args . RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## qmf_pred LPAREN qmf_args RPAREN
## LR(1) items:
qmf_term -> qmf_pred LPAREN qmf_args RPAREN . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_term -> qmf_pred LPAREN qmf_args RPAREN

State 51:
## Known stack suffix:
## qmf_quantified_formula
## LR(1) items:
qmf_unitary_formula -> qmf_quantified_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_unitary_formula -> qmf_quantified_formula

State 52:
## Known stack suffix:
## qmf_prop_const
## LR(1) items:
qmf_atomic_formula -> qmf_prop_const . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_atomic_formula -> qmf_prop_const

State 53:
## Known stack suffix:
## qmf_pred
## LR(1) items:
qmf_atomic_formula -> qmf_pred . LPAREN qmf_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
qmf_term -> qmf_pred . LPAREN qmf_args RPAREN [ NEQUALS EQUALS ]
## Transitions:
-- On LPAREN shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## qmf_pred LPAREN
## LR(1) items:
qmf_atomic_formula -> qmf_pred LPAREN . qmf_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
qmf_term -> qmf_pred LPAREN . qmf_args RPAREN [ NEQUALS EQUALS ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 25
-- On qmf_variable shift to state 31
-- On qmf_term shift to state 43
-- On qmf_pred shift to state 41
-- On qmf_constant shift to state 45
-- On qmf_args shift to state 55
-- On number shift to state 47
-- On atomic_word shift to state 48
## Reductions:

State 55:
## Known stack suffix:
## qmf_pred LPAREN qmf_args
## LR(1) items:
qmf_atomic_formula -> qmf_pred LPAREN qmf_args . RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
qmf_term -> qmf_pred LPAREN qmf_args . RPAREN [ NEQUALS EQUALS ]
## Transitions:
-- On RPAREN shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## qmf_pred LPAREN qmf_args RPAREN
## LR(1) items:
qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
qmf_term -> qmf_pred LPAREN qmf_args RPAREN . [ NEQUALS EQUALS ]
## Transitions:
## Reductions:
-- On VLINE reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On RPAREN reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On NVLINE reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On NIFF reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On NEQUALS reduce production qmf_term -> qmf_pred LPAREN qmf_args RPAREN
-- On NAMPERSAND reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On IMPLIES reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On IFF reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On IF reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On EQUALS reduce production qmf_term -> qmf_pred LPAREN qmf_args RPAREN
-- On COMMA reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN
-- On AMPERSAND reduce production qmf_atomic_formula -> qmf_pred LPAREN qmf_args RPAREN

State 57:
## Known stack suffix:
## qmf_boxed_formula
## LR(1) items:
qmf_unitary_formula -> qmf_boxed_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_unitary_formula -> qmf_boxed_formula

State 58:
## Known stack suffix:
## qmf_atomic_formula
## LR(1) items:
qmf_unitary_formula -> qmf_atomic_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_unitary_formula -> qmf_atomic_formula

State 59:
## Known stack suffix:
## boxoperator
## LR(1) items:
qmf_boxed_formula -> boxoperator . COLON qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On COLON shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## boxoperator COLON
## LR(1) items:
qmf_boxed_formula -> boxoperator COLON . qmf_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 61
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_atomic_formula shift to state 58
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 61:
## Known stack suffix:
## boxoperator COLON qmf_unitary_formula
## LR(1) items:
qmf_boxed_formula -> boxoperator COLON qmf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_boxed_formula -> boxoperator COLON qmf_unitary_formula

State 62:
## Known stack suffix:
## atomic_word
## LR(1) items:
qmf_constant -> atomic_word . [ NEQUALS EQUALS ]
qmf_pred -> atomic_word . [ LPAREN ]
qmf_prop_const -> atomic_word . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Reductions:
-- On VLINE reduce production qmf_prop_const -> atomic_word
-- On RPAREN reduce production qmf_prop_const -> atomic_word
-- On NVLINE reduce production qmf_prop_const -> atomic_word
-- On NIFF reduce production qmf_prop_const -> atomic_word
-- On NEQUALS reduce production qmf_constant -> atomic_word
-- On NAMPERSAND reduce production qmf_prop_const -> atomic_word
-- On LPAREN reduce production qmf_pred -> atomic_word
-- On IMPLIES reduce production qmf_prop_const -> atomic_word
-- On IFF reduce production qmf_prop_const -> atomic_word
-- On IF reduce production qmf_prop_const -> atomic_word
-- On EQUALS reduce production qmf_constant -> atomic_word
-- On COMMA reduce production qmf_prop_const -> atomic_word
-- On AMPERSAND reduce production qmf_prop_const -> atomic_word

State 63:
## Known stack suffix:
## qmf_variable_decl
## LR(1) items:
qmf_variable_decls -> qmf_variable_decl . [ RBRKT ]
qmf_variable_decls -> qmf_variable_decl . COMMA qmf_variable_decls [ RBRKT ]
## Transitions:
-- On COMMA shift to state 64
## Reductions:
-- On RBRKT reduce production qmf_variable_decls -> qmf_variable_decl

State 64:
## Known stack suffix:
## qmf_variable_decl COMMA
## LR(1) items:
qmf_variable_decls -> qmf_variable_decl COMMA . qmf_variable_decls [ RBRKT ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable shift to state 25
-- On qmf_variable_decls shift to state 65
-- On qmf_variable_decl shift to state 63
-- On qmf_variable shift to state 66
## Reductions:

State 65:
## Known stack suffix:
## qmf_variable_decl COMMA qmf_variable_decls
## LR(1) items:
qmf_variable_decls -> qmf_variable_decl COMMA qmf_variable_decls . [ RBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_variable_decls -> qmf_variable_decl COMMA qmf_variable_decls

State 66:
## Known stack suffix:
## qmf_variable
## LR(1) items:
qmf_variable_decl -> qmf_variable . [ RBRKT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_variable_decl -> qmf_variable

State 67:
## Known stack suffix:
## qmf_unitary_formula
## LR(1) items:
qmf_and_formula -> qmf_unitary_formula . AMPERSAND qmf_unitary_formula [ RPAREN COMMA AMPERSAND ]
qmf_formula -> qmf_unitary_formula . [ RPAREN COMMA ]
qmf_nonassoc_binary -> qmf_unitary_formula . fof_binary_connective qmf_unitary_formula [ RPAREN COMMA ]
qmf_or_formula -> qmf_unitary_formula . [ VLINE RPAREN COMMA ]
## Transitions:
-- On NVLINE shift to state 68
-- On NIFF shift to state 69
-- On NAMPERSAND shift to state 70
-- On IMPLIES shift to state 71
-- On IFF shift to state 72
-- On IF shift to state 73
-- On AMPERSAND shift to state 74
-- On fof_binary_connective shift to state 76
## Reductions:
-- On VLINE reduce production qmf_or_formula -> qmf_unitary_formula
-- On RPAREN reduce production qmf_formula -> qmf_unitary_formula
-- On COMMA reduce production qmf_formula -> qmf_unitary_formula

State 68:
## Known stack suffix:
## NVLINE
## LR(1) items:
fof_binary_connective -> NVLINE . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_connective -> NVLINE

State 69:
## Known stack suffix:
## NIFF
## LR(1) items:
fof_binary_connective -> NIFF . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_connective -> NIFF

State 70:
## Known stack suffix:
## NAMPERSAND
## LR(1) items:
fof_binary_connective -> NAMPERSAND . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_connective -> NAMPERSAND

State 71:
## Known stack suffix:
## IMPLIES
## LR(1) items:
fof_binary_connective -> IMPLIES . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_connective -> IMPLIES

State 72:
## Known stack suffix:
## IFF
## LR(1) items:
fof_binary_connective -> IFF . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_connective -> IFF

State 73:
## Known stack suffix:
## IF
## LR(1) items:
fof_binary_connective -> IF . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_connective -> IF

State 74:
## Known stack suffix:
## qmf_unitary_formula AMPERSAND
## LR(1) items:
qmf_and_formula -> qmf_unitary_formula AMPERSAND . qmf_unitary_formula [ RPAREN COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 75
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_atomic_formula shift to state 58
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 75:
## Known stack suffix:
## qmf_unitary_formula AMPERSAND qmf_unitary_formula
## LR(1) items:
qmf_and_formula -> qmf_unitary_formula AMPERSAND qmf_unitary_formula . [ RPAREN COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_and_formula -> qmf_unitary_formula AMPERSAND qmf_unitary_formula

State 76:
## Known stack suffix:
## qmf_unitary_formula fof_binary_connective
## LR(1) items:
qmf_nonassoc_binary -> qmf_unitary_formula fof_binary_connective . qmf_unitary_formula [ RPAREN COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 77
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_atomic_formula shift to state 58
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 77:
## Known stack suffix:
## qmf_unitary_formula fof_binary_connective qmf_unitary_formula
## LR(1) items:
qmf_nonassoc_binary -> qmf_unitary_formula fof_binary_connective qmf_unitary_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_nonassoc_binary -> qmf_unitary_formula fof_binary_connective qmf_unitary_formula

State 78:
## Known stack suffix:
## qmf_or_formula
## LR(1) items:
qmf_assoc_binary -> qmf_or_formula . [ RPAREN COMMA ]
qmf_or_formula -> qmf_or_formula . VLINE qmf_unitary_formula [ VLINE RPAREN COMMA ]
## Transitions:
-- On VLINE shift to state 79
## Reductions:
-- On RPAREN reduce production qmf_assoc_binary -> qmf_or_formula
-- On COMMA reduce production qmf_assoc_binary -> qmf_or_formula

State 79:
## Known stack suffix:
## qmf_or_formula VLINE
## LR(1) items:
qmf_or_formula -> qmf_or_formula VLINE . qmf_unitary_formula [ VLINE RPAREN COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 80
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_atomic_formula shift to state 58
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 80:
## Known stack suffix:
## qmf_or_formula VLINE qmf_unitary_formula
## LR(1) items:
qmf_or_formula -> qmf_or_formula VLINE qmf_unitary_formula . [ VLINE RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_or_formula -> qmf_or_formula VLINE qmf_unitary_formula

State 81:
## Known stack suffix:
## qmf_nonassoc_binary
## LR(1) items:
qmf_binary_formula -> qmf_nonassoc_binary . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_binary_formula -> qmf_nonassoc_binary

State 82:
## Known stack suffix:
## LPAREN qmf_formula
## LR(1) items:
qmf_unitary_formula -> LPAREN qmf_formula . RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## LPAREN qmf_formula RPAREN
## LR(1) items:
qmf_unitary_formula -> LPAREN qmf_formula RPAREN . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_unitary_formula -> LPAREN qmf_formula RPAREN

State 84:
## Known stack suffix:
## qmf_binary_formula
## LR(1) items:
qmf_formula -> qmf_binary_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_formula -> qmf_binary_formula

State 85:
## Known stack suffix:
## qmf_assoc_binary
## LR(1) items:
qmf_binary_formula -> qmf_assoc_binary . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_binary_formula -> qmf_assoc_binary

State 86:
## Known stack suffix:
## qmf_and_formula
## LR(1) items:
qmf_and_formula -> qmf_and_formula . AMPERSAND qmf_unitary_formula [ RPAREN COMMA AMPERSAND ]
qmf_assoc_binary -> qmf_and_formula . [ RPAREN COMMA ]
## Transitions:
-- On AMPERSAND shift to state 87
## Reductions:
-- On RPAREN reduce production qmf_assoc_binary -> qmf_and_formula
-- On COMMA reduce production qmf_assoc_binary -> qmf_and_formula

State 87:
## Known stack suffix:
## qmf_and_formula AMPERSAND
## LR(1) items:
qmf_and_formula -> qmf_and_formula AMPERSAND . qmf_unitary_formula [ RPAREN COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 15
-- On TOK_FALSE shift to state 16
-- On TILDE shift to state 17
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 21
-- On EXCLAMATION shift to state 22
-- On DIAMOND shift to state 23
-- On BOX shift to state 24
-- On variable shift to state 25
-- On quantifier shift to state 26
-- On qmf_variable shift to state 31
-- On qmf_unitary_formula shift to state 88
-- On qmf_unary_formula shift to state 33
-- On qmf_unary_connective shift to state 34
-- On qmf_term shift to state 36
-- On qmf_quantified_formula shift to state 51
-- On qmf_prop_const shift to state 52
-- On qmf_pred shift to state 53
-- On qmf_constant shift to state 45
-- On qmf_boxed_formula shift to state 57
-- On qmf_atomic_formula shift to state 58
-- On number shift to state 47
-- On boxoperator shift to state 59
-- On atomic_word shift to state 62
## Reductions:

State 88:
## Known stack suffix:
## qmf_and_formula AMPERSAND qmf_unitary_formula
## LR(1) items:
qmf_and_formula -> qmf_and_formula AMPERSAND qmf_unitary_formula . [ RPAREN COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_and_formula -> qmf_and_formula AMPERSAND qmf_unitary_formula

State 89:
## Known stack suffix:
## QMF LPAREN name COMMA formula_role COMMA qmf_top
## LR(1) items:
qmf_annotated -> QMF LPAREN name COMMA formula_role COMMA qmf_top . annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 90
-- On null shift to state 314
-- On annotations shift to state 315
## Reductions:
-- On RPAREN reduce production null ->

State 90:
## Known stack suffix:
## COMMA
## LR(1) items:
annotations -> COMMA . source optional_info [ RPAREN ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LBRKT shift to state 91
-- On Distinct_object shift to state 93
-- On DTHF shift to state 94
-- On DFOT shift to state 212
-- On DFOF shift to state 228
-- On DCNF shift to state 278
-- On variable shift to state 291
-- On source shift to state 307
-- On number shift to state 292
-- On general_term shift to state 313
-- On general_list shift to state 298
-- On general_data shift to state 299
-- On formula_data shift to state 302
-- On atomic_word shift to state 303
## Reductions:

State 91:
## Known stack suffix:
## LBRKT
## LR(1) items:
general_list -> LBRKT . RBRKT [ RPAREN RBRKT COMMA ]
general_list -> LBRKT . general_terms RBRKT [ RPAREN RBRKT COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On RBRKT shift to state 92
-- On Lower_word shift to state 8
-- On LBRKT shift to state 91
-- On Distinct_object shift to state 93
-- On DTHF shift to state 94
-- On DFOT shift to state 212
-- On DFOF shift to state 228
-- On DCNF shift to state 278
-- On variable shift to state 291
-- On number shift to state 292
-- On general_terms shift to state 293
-- On general_term shift to state 295
-- On general_list shift to state 298
-- On general_data shift to state 299
-- On formula_data shift to state 302
-- On atomic_word shift to state 303
## Reductions:

State 92:
## Known stack suffix:
## LBRKT RBRKT
## LR(1) items:
general_list -> LBRKT RBRKT . [ RPAREN RBRKT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_list -> LBRKT RBRKT

State 93:
## Known stack suffix:
## Distinct_object
## LR(1) items:
general_data -> Distinct_object . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> Distinct_object

State 94:
## Known stack suffix:
## DTHF
## LR(1) items:
formula_data -> DTHF . LPAREN thf_logic_formula RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## DTHF LPAREN
## LR(1) items:
formula_data -> DTHF LPAREN . thf_logic_formula RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 210
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 96:
## Known stack suffix:
## VLINE
## LR(1) items:
binary_connective -> VLINE . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> VLINE

State 97:
## Known stack suffix:
## TOK_TRUE
## LR(1) items:
constant -> TOK_TRUE . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF GETS EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TOK_TRUE

State 98:
## Known stack suffix:
## TOK_FALSE
## LR(1) items:
constant -> TOK_FALSE . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF GETS EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> TOK_FALSE

State 99:
## Known stack suffix:
## TILDE
## LR(1) items:
thf_unary_formula -> TILDE . LPAREN thf_logic_formula RPAREN [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
unary_connective -> TILDE . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 100
## Reductions:
-- On VLINE reduce production unary_connective -> TILDE
-- On RPAREN reduce production unary_connective -> TILDE
-- On NVLINE reduce production unary_connective -> TILDE
-- On NIFF reduce production unary_connective -> TILDE
-- On NEQUALS reduce production unary_connective -> TILDE
-- On NAMPERSAND reduce production unary_connective -> TILDE
-- On IMPLIES reduce production unary_connective -> TILDE
-- On IFF reduce production unary_connective -> TILDE
-- On IF reduce production unary_connective -> TILDE
-- On EQUALS reduce production unary_connective -> TILDE
-- On COMMA reduce production unary_connective -> TILDE
-- On AT_SIGN reduce production unary_connective -> TILDE
-- On AMPERSAND reduce production unary_connective -> TILDE

State 100:
## Known stack suffix:
## TILDE LPAREN
## LR(1) items:
thf_unary_formula -> TILDE LPAREN . thf_logic_formula RPAREN [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 208
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 101:
## Known stack suffix:
## NVLINE
## LR(1) items:
binary_connective -> NVLINE . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> NVLINE

State 102:
## Known stack suffix:
## NIFF
## LR(1) items:
binary_connective -> NIFF . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> NIFF

State 103:
## Known stack suffix:
## NEQUALS
## LR(1) items:
binary_connective -> NEQUALS . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> NEQUALS

State 104:
## Known stack suffix:
## NAMPERSAND
## LR(1) items:
binary_connective -> NAMPERSAND . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> NAMPERSAND

State 105:
## Known stack suffix:
## LPAREN
## LR(1) items:
thf_unitary_formula -> LPAREN . thf_logic_formula RPAREN [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 206
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 106:
## Known stack suffix:
## LAMBDA
## LR(1) items:
lambda_symbol -> LAMBDA . [ LBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lambda_symbol -> LAMBDA

State 107:
## Known stack suffix:
## IMPLIES
## LR(1) items:
binary_connective -> IMPLIES . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> IMPLIES

State 108:
## Known stack suffix:
## IFF
## LR(1) items:
binary_connective -> IFF . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> IFF

State 109:
## Known stack suffix:
## IF
## LR(1) items:
binary_connective -> IF . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> IF

State 110:
## Known stack suffix:
## EQUALS
## LR(1) items:
binary_connective -> EQUALS . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> EQUALS

State 111:
## Known stack suffix:
## DOUBLEQUESTION
## LR(1) items:
quantifier_comb -> DOUBLEQUESTION . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifier_comb -> DOUBLEQUESTION

State 112:
## Known stack suffix:
## DOUBLEEXCLAMATION
## LR(1) items:
quantifier_comb -> DOUBLEEXCLAMATION . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifier_comb -> DOUBLEEXCLAMATION

State 113:
## Known stack suffix:
## CARET
## LR(1) items:
lambda_symbol -> CARET . [ LBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lambda_symbol -> CARET

State 114:
## Known stack suffix:
## AMPERSAND
## LR(1) items:
binary_connective -> AMPERSAND . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binary_connective -> AMPERSAND

State 115:
## Known stack suffix:
## variable
## LR(1) items:
thf_atom -> variable . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_atom -> variable

State 116:
## Known stack suffix:
## unary_connective
## LR(1) items:
thf_atom -> unary_connective . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_atom -> unary_connective

State 117:
## Known stack suffix:
## thf_unitary_formula
## LR(1) items:
thf_and_formula -> thf_unitary_formula . AMPERSAND thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_apply_formula -> thf_unitary_formula . AT_SIGN thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_binary_pair -> thf_unitary_formula . thf_pair_connective thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_logic_formula -> thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_or_formula -> thf_unitary_formula . VLINE thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 118
-- On NVLINE shift to state 192
-- On NIFF shift to state 193
-- On NEQUALS shift to state 194
-- On NAMPERSAND shift to state 195
-- On IMPLIES shift to state 196
-- On IFF shift to state 197
-- On IF shift to state 198
-- On EQUALS shift to state 199
-- On AT_SIGN shift to state 200
-- On AMPERSAND shift to state 202
-- On thf_pair_connective shift to state 204
## Reductions:
-- On RPAREN reduce production thf_logic_formula -> thf_unitary_formula
-- On COMMA reduce production thf_logic_formula -> thf_unitary_formula

State 118:
## Known stack suffix:
## thf_unitary_formula VLINE
## LR(1) items:
thf_or_formula -> thf_unitary_formula VLINE . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 119
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 119:
## Known stack suffix:
## thf_unitary_formula VLINE thf_unitary_formula
## LR(1) items:
thf_or_formula -> thf_unitary_formula VLINE thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_or_formula -> thf_unitary_formula VLINE thf_unitary_formula

State 120:
## Known stack suffix:
## thf_unary_formula
## LR(1) items:
thf_unitary_formula -> thf_unary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unitary_formula -> thf_unary_formula

State 121:
## Known stack suffix:
## thf_quantified_formula
## LR(1) items:
thf_unitary_formula -> thf_quantified_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unitary_formula -> thf_quantified_formula

State 122:
## Known stack suffix:
## thf_atom
## LR(1) items:
thf_unitary_formula -> thf_atom . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unitary_formula -> thf_atom

State 123:
## Known stack suffix:
## thf_abstraction
## LR(1) items:
thf_unitary_formula -> thf_abstraction . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unitary_formula -> thf_abstraction

State 124:
## Known stack suffix:
## quantifier_comb
## LR(1) items:
thf_unary_formula -> quantifier_comb . thf_logic_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_unary_formula -> quantifier_comb . AT_SIGN thf_logic_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
unary_connective -> quantifier_comb . thf_logic_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AT_SIGN shift to state 125
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 191
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 125:
## Known stack suffix:
## quantifier_comb AT_SIGN
## LR(1) items:
thf_unary_formula -> quantifier_comb AT_SIGN . thf_logic_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 181
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 126:
## Known stack suffix:
## thf_or_formula
## LR(1) items:
thf_binary_tuple -> thf_or_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_or_formula -> thf_or_formula . VLINE thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 127
## Reductions:
-- On RPAREN reduce production thf_binary_tuple -> thf_or_formula
-- On NVLINE reduce production thf_binary_tuple -> thf_or_formula
-- On NIFF reduce production thf_binary_tuple -> thf_or_formula
-- On NEQUALS reduce production thf_binary_tuple -> thf_or_formula
-- On NAMPERSAND reduce production thf_binary_tuple -> thf_or_formula
-- On IMPLIES reduce production thf_binary_tuple -> thf_or_formula
-- On IFF reduce production thf_binary_tuple -> thf_or_formula
-- On IF reduce production thf_binary_tuple -> thf_or_formula
-- On EQUALS reduce production thf_binary_tuple -> thf_or_formula
-- On COMMA reduce production thf_binary_tuple -> thf_or_formula
-- On AT_SIGN reduce production thf_binary_tuple -> thf_or_formula
-- On AMPERSAND reduce production thf_binary_tuple -> thf_or_formula

State 127:
## Known stack suffix:
## thf_or_formula VLINE
## LR(1) items:
thf_or_formula -> thf_or_formula VLINE . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 128
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 128:
## Known stack suffix:
## thf_or_formula VLINE thf_unitary_formula
## LR(1) items:
thf_or_formula -> thf_or_formula VLINE thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_or_formula -> thf_or_formula VLINE thf_unitary_formula

State 129:
## Known stack suffix:
## quantifier
## LR(1) items:
thf_quantified_formula -> quantifier . LBRKT variable_decls RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On LBRKT shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## quantifier LBRKT
## LR(1) items:
thf_quantified_formula -> quantifier LBRKT . variable_decls RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable_decls shift to state 131
-- On variable_decl shift to state 145
-- On variable shift to state 148
## Reductions:

State 131:
## Known stack suffix:
## quantifier LBRKT variable_decls
## LR(1) items:
thf_quantified_formula -> quantifier LBRKT variable_decls . RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On RBRKT shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## quantifier LBRKT variable_decls RBRKT
## LR(1) items:
thf_quantified_formula -> quantifier LBRKT variable_decls RBRKT . COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On COLON shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## quantifier LBRKT variable_decls RBRKT COLON
## LR(1) items:
thf_quantified_formula -> quantifier LBRKT variable_decls RBRKT COLON . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 134
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 134:
## Known stack suffix:
## quantifier LBRKT variable_decls RBRKT COLON thf_unitary_formula
## LR(1) items:
thf_quantified_formula -> quantifier LBRKT variable_decls RBRKT COLON thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_quantified_formula -> quantifier LBRKT variable_decls RBRKT COLON thf_unitary_formula

State 135:
## Known stack suffix:
## number
## LR(1) items:
thf_atom -> number . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_atom -> number

State 136:
## Known stack suffix:
## lambda_symbol
## LR(1) items:
thf_abstraction -> lambda_symbol . LBRKT variable_decls RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_abstraction -> lambda_symbol . LBRKT type_variable_decls RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On LBRKT shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## lambda_symbol LBRKT
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT . variable_decls RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_abstraction -> lambda_symbol LBRKT . type_variable_decls RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable_decls shift to state 138
-- On variable_decl shift to state 145
-- On variable shift to state 168
-- On type_variable_decls shift to state 171
-- On type_variable_decl shift to state 175
## Reductions:

State 138:
## Known stack suffix:
## lambda_symbol LBRKT variable_decls
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT variable_decls . RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On RBRKT shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## lambda_symbol LBRKT variable_decls RBRKT
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT variable_decls RBRKT . COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On COLON shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## lambda_symbol LBRKT variable_decls RBRKT COLON
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT variable_decls RBRKT COLON . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 141
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 141:
## Known stack suffix:
## lambda_symbol LBRKT variable_decls RBRKT COLON thf_unitary_formula
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT variable_decls RBRKT COLON thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_abstraction -> lambda_symbol LBRKT variable_decls RBRKT COLON thf_unitary_formula

State 142:
## Known stack suffix:
## constant
## LR(1) items:
thf_atom -> constant . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_atom -> constant

State 143:
## Known stack suffix:
## binary_connective
## LR(1) items:
thf_atom -> binary_connective . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_atom -> binary_connective

State 144:
## Known stack suffix:
## atomic_word
## LR(1) items:
constant -> atomic_word . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF GETS EQUALS COMMA COLON AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> atomic_word

State 145:
## Known stack suffix:
## variable_decl
## LR(1) items:
variable_decls -> variable_decl . [ RBRKT ]
variable_decls -> variable_decl . COMMA variable_decls [ RBRKT ]
## Transitions:
-- On COMMA shift to state 146
## Reductions:
-- On RBRKT reduce production variable_decls -> variable_decl

State 146:
## Known stack suffix:
## variable_decl COMMA
## LR(1) items:
variable_decls -> variable_decl COMMA . variable_decls [ RBRKT ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable_decls shift to state 147
-- On variable_decl shift to state 145
-- On variable shift to state 148
## Reductions:

State 147:
## Known stack suffix:
## variable_decl COMMA variable_decls
## LR(1) items:
variable_decls -> variable_decl COMMA variable_decls . [ RBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_decls -> variable_decl COMMA variable_decls

State 148:
## Known stack suffix:
## variable
## LR(1) items:
variable_decl -> variable . COLON type_expr [ RBRKT COMMA ]
## Transitions:
-- On COLON shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## variable COLON
## LR(1) items:
variable_decl -> variable COLON . type_expr [ RBRKT COMMA ]
## Transitions:
-- On Upper_word shift to state 150
-- On TOK_TYPE shift to state 151
-- On TOK_REAL shift to state 152
-- On TOK_O shift to state 153
-- On TOK_INT shift to state 154
-- On TOK_I shift to state 155
-- On Lower_word shift to state 156
-- On LPAREN shift to state 157
-- On type_variable shift to state 158
-- On type_expr shift to state 167
-- On poly_type_variable shift to state 165
-- On atomic_type shift to state 166
## Reductions:

State 150:
## Known stack suffix:
## Upper_word
## LR(1) items:
poly_type_variable -> Upper_word . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
type_variable -> Upper_word . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_variable -> Upper_word

State 151:
## Known stack suffix:
## TOK_TYPE
## LR(1) items:
atomic_type -> TOK_TYPE . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_type -> TOK_TYPE

State 152:
## Known stack suffix:
## TOK_REAL
## LR(1) items:
atomic_type -> TOK_REAL . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_type -> TOK_REAL

State 153:
## Known stack suffix:
## TOK_O
## LR(1) items:
atomic_type -> TOK_O . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_type -> TOK_O

State 154:
## Known stack suffix:
## TOK_INT
## LR(1) items:
atomic_type -> TOK_INT . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_type -> TOK_INT

State 155:
## Known stack suffix:
## TOK_I
## LR(1) items:
atomic_type -> TOK_I . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_type -> TOK_I

State 156:
## Known stack suffix:
## Lower_word
## LR(1) items:
atomic_type -> Lower_word . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomic_type -> Lower_word

State 157:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_expr -> LPAREN . type_expr RPAREN [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
-- On Upper_word shift to state 150
-- On TOK_TYPE shift to state 151
-- On TOK_REAL shift to state 152
-- On TOK_O shift to state 153
-- On TOK_INT shift to state 154
-- On TOK_I shift to state 155
-- On Lower_word shift to state 156
-- On LPAREN shift to state 157
-- On type_variable shift to state 158
-- On type_expr shift to state 159
-- On poly_type_variable shift to state 165
-- On atomic_type shift to state 166
## Reductions:

State 158:
## Known stack suffix:
## type_variable
## LR(1) items:
type_expr -> type_variable . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> type_variable

State 159:
## Known stack suffix:
## LPAREN type_expr
## LR(1) items:
type_expr -> type_expr . map_arrow type_expr [ RPAREN MAP_TO GREATER ]
type_expr -> LPAREN type_expr . RPAREN [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
-- On RPAREN shift to state 160
-- On MAP_TO shift to state 161
-- On GREATER shift to state 162
-- On map_arrow shift to state 163
## Reductions:

State 160:
## Known stack suffix:
## LPAREN type_expr RPAREN
## LR(1) items:
type_expr -> LPAREN type_expr RPAREN . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> LPAREN type_expr RPAREN

State 161:
## Known stack suffix:
## MAP_TO
## LR(1) items:
map_arrow -> MAP_TO . [ Upper_word TOK_TYPE TOK_REAL TOK_O TOK_INT TOK_I Lower_word LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production map_arrow -> MAP_TO

State 162:
## Known stack suffix:
## GREATER
## LR(1) items:
map_arrow -> GREATER . [ Upper_word TOK_TYPE TOK_REAL TOK_O TOK_INT TOK_I Lower_word LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production map_arrow -> GREATER

State 163:
## Known stack suffix:
## type_expr map_arrow
## LR(1) items:
type_expr -> type_expr map_arrow . type_expr [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
-- On Upper_word shift to state 150
-- On TOK_TYPE shift to state 151
-- On TOK_REAL shift to state 152
-- On TOK_O shift to state 153
-- On TOK_INT shift to state 154
-- On TOK_I shift to state 155
-- On Lower_word shift to state 156
-- On LPAREN shift to state 157
-- On type_variable shift to state 158
-- On type_expr shift to state 164
-- On poly_type_variable shift to state 165
-- On atomic_type shift to state 166
## Reductions:

State 164:
## Known stack suffix:
## type_expr map_arrow type_expr
## LR(1) items:
type_expr -> type_expr . map_arrow type_expr [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
type_expr -> type_expr map_arrow type_expr . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
-- On MAP_TO shift to state 161
-- On GREATER shift to state 162
-- On map_arrow shift to state 163
## Reductions:
-- On RPAREN reduce production type_expr -> type_expr map_arrow type_expr
-- On RBRKT reduce production type_expr -> type_expr map_arrow type_expr
-- On GETS reduce production type_expr -> type_expr map_arrow type_expr
-- On COMMA reduce production type_expr -> type_expr map_arrow type_expr

State 165:
## Known stack suffix:
## poly_type_variable
## LR(1) items:
type_expr -> poly_type_variable . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> poly_type_variable

State 166:
## Known stack suffix:
## atomic_type
## LR(1) items:
type_expr -> atomic_type . [ RPAREN RBRKT MAP_TO GREATER GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_expr -> atomic_type

State 167:
## Known stack suffix:
## variable COLON type_expr
## LR(1) items:
type_expr -> type_expr . map_arrow type_expr [ RBRKT MAP_TO GREATER COMMA ]
variable_decl -> variable COLON type_expr . [ RBRKT COMMA ]
## Transitions:
-- On MAP_TO shift to state 161
-- On GREATER shift to state 162
-- On map_arrow shift to state 163
## Reductions:
-- On RBRKT reduce production variable_decl -> variable COLON type_expr
-- On COMMA reduce production variable_decl -> variable COLON type_expr

State 168:
## Known stack suffix:
## variable
## LR(1) items:
type_variable_decl -> variable . COLON TOK_TYPE [ RBRKT COMMA ]
variable_decl -> variable . COLON type_expr [ RBRKT COMMA ]
## Transitions:
-- On COLON shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## variable COLON
## LR(1) items:
type_variable_decl -> variable COLON . TOK_TYPE [ RBRKT COMMA ]
variable_decl -> variable COLON . type_expr [ RBRKT COMMA ]
## Transitions:
-- On Upper_word shift to state 150
-- On TOK_TYPE shift to state 170
-- On TOK_REAL shift to state 152
-- On TOK_O shift to state 153
-- On TOK_INT shift to state 154
-- On TOK_I shift to state 155
-- On Lower_word shift to state 156
-- On LPAREN shift to state 157
-- On type_variable shift to state 158
-- On type_expr shift to state 167
-- On poly_type_variable shift to state 165
-- On atomic_type shift to state 166
## Reductions:

State 170:
## Known stack suffix:
## variable COLON TOK_TYPE
## LR(1) items:
atomic_type -> TOK_TYPE . [ RBRKT MAP_TO GREATER COMMA ]
type_variable_decl -> variable COLON TOK_TYPE . [ RBRKT COMMA ]
## Transitions:
## Reductions:
-- On RBRKT reduce production type_variable_decl -> variable COLON TOK_TYPE
-- On MAP_TO reduce production atomic_type -> TOK_TYPE
-- On GREATER reduce production atomic_type -> TOK_TYPE
-- On COMMA reduce production type_variable_decl -> variable COLON TOK_TYPE

State 171:
## Known stack suffix:
## lambda_symbol LBRKT type_variable_decls
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT type_variable_decls . RBRKT COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On RBRKT shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## lambda_symbol LBRKT type_variable_decls RBRKT
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT type_variable_decls RBRKT . COLON thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On COLON shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## lambda_symbol LBRKT type_variable_decls RBRKT COLON
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT type_variable_decls RBRKT COLON . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 174
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 174:
## Known stack suffix:
## lambda_symbol LBRKT type_variable_decls RBRKT COLON thf_unitary_formula
## LR(1) items:
thf_abstraction -> lambda_symbol LBRKT type_variable_decls RBRKT COLON thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_abstraction -> lambda_symbol LBRKT type_variable_decls RBRKT COLON thf_unitary_formula

State 175:
## Known stack suffix:
## type_variable_decl
## LR(1) items:
type_variable_decls -> type_variable_decl . [ RBRKT ]
type_variable_decls -> type_variable_decl . COMMA type_variable_decls [ RBRKT ]
## Transitions:
-- On COMMA shift to state 176
## Reductions:
-- On RBRKT reduce production type_variable_decls -> type_variable_decl

State 176:
## Known stack suffix:
## type_variable_decl COMMA
## LR(1) items:
type_variable_decls -> type_variable_decl COMMA . type_variable_decls [ RBRKT ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable shift to state 177
-- On type_variable_decls shift to state 180
-- On type_variable_decl shift to state 175
## Reductions:

State 177:
## Known stack suffix:
## variable
## LR(1) items:
type_variable_decl -> variable . COLON TOK_TYPE [ RBRKT COMMA ]
## Transitions:
-- On COLON shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## variable COLON
## LR(1) items:
type_variable_decl -> variable COLON . TOK_TYPE [ RBRKT COMMA ]
## Transitions:
-- On TOK_TYPE shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## variable COLON TOK_TYPE
## LR(1) items:
type_variable_decl -> variable COLON TOK_TYPE . [ RBRKT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_variable_decl -> variable COLON TOK_TYPE

State 180:
## Known stack suffix:
## type_variable_decl COMMA type_variable_decls
## LR(1) items:
type_variable_decls -> type_variable_decl COMMA type_variable_decls . [ RBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_variable_decls -> type_variable_decl COMMA type_variable_decls

State 181:
## Known stack suffix:
## quantifier_comb AT_SIGN thf_logic_formula
## LR(1) items:
thf_unary_formula -> quantifier_comb AT_SIGN thf_logic_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unary_formula -> quantifier_comb AT_SIGN thf_logic_formula

State 182:
## Known stack suffix:
## thf_binary_tuple
## LR(1) items:
thf_binary_formula -> thf_binary_tuple . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_binary_formula -> thf_binary_tuple

State 183:
## Known stack suffix:
## thf_binary_pair
## LR(1) items:
thf_binary_formula -> thf_binary_pair . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_binary_formula -> thf_binary_pair

State 184:
## Known stack suffix:
## thf_binary_formula
## LR(1) items:
thf_logic_formula -> thf_binary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_logic_formula -> thf_binary_formula

State 185:
## Known stack suffix:
## thf_apply_formula
## LR(1) items:
thf_apply_formula -> thf_apply_formula . AT_SIGN thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_binary_tuple -> thf_apply_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On AT_SIGN shift to state 186
## Reductions:
-- On VLINE reduce production thf_binary_tuple -> thf_apply_formula
-- On RPAREN reduce production thf_binary_tuple -> thf_apply_formula
-- On NVLINE reduce production thf_binary_tuple -> thf_apply_formula
-- On NIFF reduce production thf_binary_tuple -> thf_apply_formula
-- On NEQUALS reduce production thf_binary_tuple -> thf_apply_formula
-- On NAMPERSAND reduce production thf_binary_tuple -> thf_apply_formula
-- On IMPLIES reduce production thf_binary_tuple -> thf_apply_formula
-- On IFF reduce production thf_binary_tuple -> thf_apply_formula
-- On IF reduce production thf_binary_tuple -> thf_apply_formula
-- On EQUALS reduce production thf_binary_tuple -> thf_apply_formula
-- On COMMA reduce production thf_binary_tuple -> thf_apply_formula
-- On AMPERSAND reduce production thf_binary_tuple -> thf_apply_formula

State 186:
## Known stack suffix:
## thf_apply_formula AT_SIGN
## LR(1) items:
thf_apply_formula -> thf_apply_formula AT_SIGN . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 187
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 187:
## Known stack suffix:
## thf_apply_formula AT_SIGN thf_unitary_formula
## LR(1) items:
thf_apply_formula -> thf_apply_formula AT_SIGN thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_apply_formula -> thf_apply_formula AT_SIGN thf_unitary_formula

State 188:
## Known stack suffix:
## thf_and_formula
## LR(1) items:
thf_and_formula -> thf_and_formula . AMPERSAND thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
thf_binary_tuple -> thf_and_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On AMPERSAND shift to state 189
## Reductions:
-- On VLINE reduce production thf_binary_tuple -> thf_and_formula
-- On RPAREN reduce production thf_binary_tuple -> thf_and_formula
-- On NVLINE reduce production thf_binary_tuple -> thf_and_formula
-- On NIFF reduce production thf_binary_tuple -> thf_and_formula
-- On NEQUALS reduce production thf_binary_tuple -> thf_and_formula
-- On NAMPERSAND reduce production thf_binary_tuple -> thf_and_formula
-- On IMPLIES reduce production thf_binary_tuple -> thf_and_formula
-- On IFF reduce production thf_binary_tuple -> thf_and_formula
-- On IF reduce production thf_binary_tuple -> thf_and_formula
-- On EQUALS reduce production thf_binary_tuple -> thf_and_formula
-- On COMMA reduce production thf_binary_tuple -> thf_and_formula
-- On AT_SIGN reduce production thf_binary_tuple -> thf_and_formula

State 189:
## Known stack suffix:
## thf_and_formula AMPERSAND
## LR(1) items:
thf_and_formula -> thf_and_formula AMPERSAND . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 190
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 190:
## Known stack suffix:
## thf_and_formula AMPERSAND thf_unitary_formula
## LR(1) items:
thf_and_formula -> thf_and_formula AMPERSAND thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_and_formula -> thf_and_formula AMPERSAND thf_unitary_formula

State 191:
## Known stack suffix:
## quantifier_comb thf_logic_formula
## LR(1) items:
thf_unary_formula -> quantifier_comb thf_logic_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
unary_connective -> quantifier_comb thf_logic_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unary_formula -> quantifier_comb thf_logic_formula

State 192:
## Known stack suffix:
## NVLINE
## LR(1) items:
thf_pair_connective -> NVLINE . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> NVLINE

State 193:
## Known stack suffix:
## NIFF
## LR(1) items:
thf_pair_connective -> NIFF . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> NIFF

State 194:
## Known stack suffix:
## NEQUALS
## LR(1) items:
thf_pair_connective -> NEQUALS . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> NEQUALS

State 195:
## Known stack suffix:
## NAMPERSAND
## LR(1) items:
thf_pair_connective -> NAMPERSAND . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> NAMPERSAND

State 196:
## Known stack suffix:
## IMPLIES
## LR(1) items:
thf_pair_connective -> IMPLIES . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> IMPLIES

State 197:
## Known stack suffix:
## IFF
## LR(1) items:
thf_pair_connective -> IFF . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> IFF

State 198:
## Known stack suffix:
## IF
## LR(1) items:
thf_pair_connective -> IF . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> IF

State 199:
## Known stack suffix:
## EQUALS
## LR(1) items:
thf_pair_connective -> EQUALS . [ VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_pair_connective -> EQUALS

State 200:
## Known stack suffix:
## thf_unitary_formula AT_SIGN
## LR(1) items:
thf_apply_formula -> thf_unitary_formula AT_SIGN . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 201
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 201:
## Known stack suffix:
## thf_unitary_formula AT_SIGN thf_unitary_formula
## LR(1) items:
thf_apply_formula -> thf_unitary_formula AT_SIGN thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_apply_formula -> thf_unitary_formula AT_SIGN thf_unitary_formula

State 202:
## Known stack suffix:
## thf_unitary_formula AMPERSAND
## LR(1) items:
thf_and_formula -> thf_unitary_formula AMPERSAND . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 203
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 203:
## Known stack suffix:
## thf_unitary_formula AMPERSAND thf_unitary_formula
## LR(1) items:
thf_and_formula -> thf_unitary_formula AMPERSAND thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_and_formula -> thf_unitary_formula AMPERSAND thf_unitary_formula

State 204:
## Known stack suffix:
## thf_unitary_formula thf_pair_connective
## LR(1) items:
thf_binary_pair -> thf_unitary_formula thf_pair_connective . thf_unitary_formula [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 205
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_atom shift to state 122
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 205:
## Known stack suffix:
## thf_unitary_formula thf_pair_connective thf_unitary_formula
## LR(1) items:
thf_binary_pair -> thf_unitary_formula thf_pair_connective thf_unitary_formula . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_binary_pair -> thf_unitary_formula thf_pair_connective thf_unitary_formula

State 206:
## Known stack suffix:
## LPAREN thf_logic_formula
## LR(1) items:
thf_unitary_formula -> LPAREN thf_logic_formula . RPAREN [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## LPAREN thf_logic_formula RPAREN
## LR(1) items:
thf_unitary_formula -> LPAREN thf_logic_formula RPAREN . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unitary_formula -> LPAREN thf_logic_formula RPAREN

State 208:
## Known stack suffix:
## TILDE LPAREN thf_logic_formula
## LR(1) items:
thf_unary_formula -> TILDE LPAREN thf_logic_formula . RPAREN [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## TILDE LPAREN thf_logic_formula RPAREN
## LR(1) items:
thf_unary_formula -> TILDE LPAREN thf_logic_formula RPAREN . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production thf_unary_formula -> TILDE LPAREN thf_logic_formula RPAREN

State 210:
## Known stack suffix:
## DTHF LPAREN thf_logic_formula
## LR(1) items:
formula_data -> DTHF LPAREN thf_logic_formula . RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## DTHF LPAREN thf_logic_formula RPAREN
## LR(1) items:
formula_data -> DTHF LPAREN thf_logic_formula RPAREN . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_data -> DTHF LPAREN thf_logic_formula RPAREN

State 212:
## Known stack suffix:
## DFOT
## LR(1) items:
formula_data -> DFOT . LPAREN fof_term RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## DFOT LPAREN
## LR(1) items:
formula_data -> DFOT LPAREN . fof_term RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 217
-- On fof_pred shift to state 219
-- On fof_constant shift to state 223
-- On atomic_word shift to state 225
## Reductions:

State 214:
## Known stack suffix:
## variable
## LR(1) items:
fof_variable -> variable . [ VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_variable -> variable

State 215:
## Known stack suffix:
## number
## LR(1) items:
fof_constant -> number . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_constant -> number

State 216:
## Known stack suffix:
## fof_variable
## LR(1) items:
fof_term -> fof_variable . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_term -> fof_variable

State 217:
## Known stack suffix:
## DFOT LPAREN fof_term
## LR(1) items:
formula_data -> DFOT LPAREN fof_term . RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## DFOT LPAREN fof_term RPAREN
## LR(1) items:
formula_data -> DFOT LPAREN fof_term RPAREN . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_data -> DFOT LPAREN fof_term RPAREN

State 219:
## Known stack suffix:
## fof_pred
## LR(1) items:
fof_term -> fof_pred . LPAREN fof_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On LPAREN shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## fof_pred LPAREN
## LR(1) items:
fof_term -> fof_pred LPAREN . fof_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 221
-- On fof_pred shift to state 219
-- On fof_constant shift to state 223
-- On fof_args shift to state 226
-- On atomic_word shift to state 225
## Reductions:

State 221:
## Known stack suffix:
## fof_term
## LR(1) items:
fof_args -> fof_term . [ RPAREN ]
fof_args -> fof_term . COMMA fof_args [ RPAREN ]
## Transitions:
-- On COMMA shift to state 222
## Reductions:
-- On RPAREN reduce production fof_args -> fof_term

State 222:
## Known stack suffix:
## fof_term COMMA
## LR(1) items:
fof_args -> fof_term COMMA . fof_args [ RPAREN ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 221
-- On fof_pred shift to state 219
-- On fof_constant shift to state 223
-- On fof_args shift to state 224
-- On atomic_word shift to state 225
## Reductions:

State 223:
## Known stack suffix:
## fof_constant
## LR(1) items:
fof_term -> fof_constant . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_term -> fof_constant

State 224:
## Known stack suffix:
## fof_term COMMA fof_args
## LR(1) items:
fof_args -> fof_term COMMA fof_args . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_args -> fof_term COMMA fof_args

State 225:
## Known stack suffix:
## atomic_word
## LR(1) items:
fof_constant -> atomic_word . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
fof_pred -> atomic_word . [ LPAREN ]
## Transitions:
## Reductions:
-- On VLINE reduce production fof_constant -> atomic_word
-- On RPAREN reduce production fof_constant -> atomic_word
-- On NVLINE reduce production fof_constant -> atomic_word
-- On NIFF reduce production fof_constant -> atomic_word
-- On NAMPERSAND reduce production fof_constant -> atomic_word
-- On LPAREN reduce production fof_pred -> atomic_word
-- On IMPLIES reduce production fof_constant -> atomic_word
-- On IFF reduce production fof_constant -> atomic_word
-- On IF reduce production fof_constant -> atomic_word
-- On COMMA reduce production fof_constant -> atomic_word
-- On AMPERSAND reduce production fof_constant -> atomic_word

State 226:
## Known stack suffix:
## fof_pred LPAREN fof_args
## LR(1) items:
fof_term -> fof_pred LPAREN fof_args . RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## fof_pred LPAREN fof_args RPAREN
## LR(1) items:
fof_term -> fof_pred LPAREN fof_args RPAREN . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_term -> fof_pred LPAREN fof_args RPAREN

State 228:
## Known stack suffix:
## DFOF
## LR(1) items:
formula_data -> DFOF . LPAREN fof_formula RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## DFOF LPAREN
## LR(1) items:
formula_data -> DFOF LPAREN . fof_formula RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 260
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_or_formula shift to state 265
-- On fof_nonassoc_binary shift to state 268
-- On fof_formula shift to state 276
-- On fof_constant shift to state 223
-- On fof_binary_formula shift to state 271
-- On fof_atomic_formula shift to state 254
-- On fof_assoc_binary shift to state 272
-- On fof_and_formula shift to state 273
-- On atomic_word shift to state 255
## Reductions:

State 230:
## Known stack suffix:
## TOK_TRUE
## LR(1) items:
fof_prop_const -> TOK_TRUE . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_prop_const -> TOK_TRUE

State 231:
## Known stack suffix:
## TOK_FALSE
## LR(1) items:
fof_prop_const -> TOK_FALSE . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_prop_const -> TOK_FALSE

State 232:
## Known stack suffix:
## TILDE
## LR(1) items:
fof_unary_connective -> TILDE . [ Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_unary_connective -> TILDE

State 233:
## Known stack suffix:
## LPAREN
## LR(1) items:
fof_unitary_formula -> LPAREN . fof_formula RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 260
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_or_formula shift to state 265
-- On fof_nonassoc_binary shift to state 268
-- On fof_formula shift to state 269
-- On fof_constant shift to state 223
-- On fof_binary_formula shift to state 271
-- On fof_atomic_formula shift to state 254
-- On fof_assoc_binary shift to state 272
-- On fof_and_formula shift to state 273
-- On atomic_word shift to state 255
## Reductions:

State 234:
## Known stack suffix:
## quantifier
## LR(1) items:
fof_quantified_formula -> quantifier . LBRKT fof_variable_decls RBRKT COLON fof_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On LBRKT shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## quantifier LBRKT
## LR(1) items:
fof_quantified_formula -> quantifier LBRKT . fof_variable_decls RBRKT COLON fof_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable shift to state 214
-- On fof_variable_decls shift to state 236
-- On fof_variable_decl shift to state 256
-- On fof_variable shift to state 259
## Reductions:

State 236:
## Known stack suffix:
## quantifier LBRKT fof_variable_decls
## LR(1) items:
fof_quantified_formula -> quantifier LBRKT fof_variable_decls . RBRKT COLON fof_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On RBRKT shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## quantifier LBRKT fof_variable_decls RBRKT
## LR(1) items:
fof_quantified_formula -> quantifier LBRKT fof_variable_decls RBRKT . COLON fof_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On COLON shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## quantifier LBRKT fof_variable_decls RBRKT COLON
## LR(1) items:
fof_quantified_formula -> quantifier LBRKT fof_variable_decls RBRKT COLON . fof_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 239
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 254
-- On atomic_word shift to state 255
## Reductions:

State 239:
## Known stack suffix:
## quantifier LBRKT fof_variable_decls RBRKT COLON fof_unitary_formula
## LR(1) items:
fof_quantified_formula -> quantifier LBRKT fof_variable_decls RBRKT COLON fof_unitary_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_quantified_formula -> quantifier LBRKT fof_variable_decls RBRKT COLON fof_unitary_formula

State 240:
## Known stack suffix:
## fof_unary_formula
## LR(1) items:
fof_unitary_formula -> fof_unary_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_unitary_formula -> fof_unary_formula

State 241:
## Known stack suffix:
## fof_unary_connective
## LR(1) items:
fof_unary_formula -> fof_unary_connective . fof_unitary_formula [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 242
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 254
-- On atomic_word shift to state 255
## Reductions:

State 242:
## Known stack suffix:
## fof_unary_connective fof_unitary_formula
## LR(1) items:
fof_unary_formula -> fof_unary_connective fof_unitary_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_unary_formula -> fof_unary_connective fof_unitary_formula

State 243:
## Known stack suffix:
## fof_term
## LR(1) items:
fof_atomic_formula -> fof_term . fof_infix_pred fof_term [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On NEQUALS shift to state 244
-- On EQUALS shift to state 245
-- On fof_infix_pred shift to state 246
## Reductions:

State 244:
## Known stack suffix:
## NEQUALS
## LR(1) items:
fof_infix_pred -> NEQUALS . [ Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_infix_pred -> NEQUALS

State 245:
## Known stack suffix:
## EQUALS
## LR(1) items:
fof_infix_pred -> EQUALS . [ Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_infix_pred -> EQUALS

State 246:
## Known stack suffix:
## fof_term fof_infix_pred
## LR(1) items:
fof_atomic_formula -> fof_term fof_infix_pred . fof_term [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 247
-- On fof_pred shift to state 219
-- On fof_constant shift to state 223
-- On atomic_word shift to state 225
## Reductions:

State 247:
## Known stack suffix:
## fof_term fof_infix_pred fof_term
## LR(1) items:
fof_atomic_formula -> fof_term fof_infix_pred fof_term . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_atomic_formula -> fof_term fof_infix_pred fof_term

State 248:
## Known stack suffix:
## fof_quantified_formula
## LR(1) items:
fof_unitary_formula -> fof_quantified_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_unitary_formula -> fof_quantified_formula

State 249:
## Known stack suffix:
## fof_prop_const
## LR(1) items:
fof_atomic_formula -> fof_prop_const . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_atomic_formula -> fof_prop_const

State 250:
## Known stack suffix:
## fof_pred
## LR(1) items:
fof_atomic_formula -> fof_pred . LPAREN fof_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
fof_term -> fof_pred . LPAREN fof_args RPAREN [ NEQUALS EQUALS ]
## Transitions:
-- On LPAREN shift to state 251
## Reductions:

State 251:
## Known stack suffix:
## fof_pred LPAREN
## LR(1) items:
fof_atomic_formula -> fof_pred LPAREN . fof_args RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
fof_term -> fof_pred LPAREN . fof_args RPAREN [ NEQUALS EQUALS ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 221
-- On fof_pred shift to state 219
-- On fof_constant shift to state 223
-- On fof_args shift to state 252
-- On atomic_word shift to state 225
## Reductions:

State 252:
## Known stack suffix:
## fof_pred LPAREN fof_args
## LR(1) items:
fof_atomic_formula -> fof_pred LPAREN fof_args . RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
fof_term -> fof_pred LPAREN fof_args . RPAREN [ NEQUALS EQUALS ]
## Transitions:
-- On RPAREN shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## fof_pred LPAREN fof_args RPAREN
## LR(1) items:
fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
fof_term -> fof_pred LPAREN fof_args RPAREN . [ NEQUALS EQUALS ]
## Transitions:
## Reductions:
-- On VLINE reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On RPAREN reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On NVLINE reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On NIFF reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On NEQUALS reduce production fof_term -> fof_pred LPAREN fof_args RPAREN
-- On NAMPERSAND reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On IMPLIES reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On IFF reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On IF reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On EQUALS reduce production fof_term -> fof_pred LPAREN fof_args RPAREN
-- On COMMA reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN
-- On AMPERSAND reduce production fof_atomic_formula -> fof_pred LPAREN fof_args RPAREN

State 254:
## Known stack suffix:
## fof_atomic_formula
## LR(1) items:
fof_unitary_formula -> fof_atomic_formula . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_unitary_formula -> fof_atomic_formula

State 255:
## Known stack suffix:
## atomic_word
## LR(1) items:
fof_constant -> atomic_word . [ NEQUALS EQUALS ]
fof_pred -> atomic_word . [ LPAREN ]
fof_prop_const -> atomic_word . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Reductions:
-- On VLINE reduce production fof_prop_const -> atomic_word
-- On RPAREN reduce production fof_prop_const -> atomic_word
-- On NVLINE reduce production fof_prop_const -> atomic_word
-- On NIFF reduce production fof_prop_const -> atomic_word
-- On NEQUALS reduce production fof_constant -> atomic_word
-- On NAMPERSAND reduce production fof_prop_const -> atomic_word
-- On LPAREN reduce production fof_pred -> atomic_word
-- On IMPLIES reduce production fof_prop_const -> atomic_word
-- On IFF reduce production fof_prop_const -> atomic_word
-- On IF reduce production fof_prop_const -> atomic_word
-- On EQUALS reduce production fof_constant -> atomic_word
-- On COMMA reduce production fof_prop_const -> atomic_word
-- On AMPERSAND reduce production fof_prop_const -> atomic_word

State 256:
## Known stack suffix:
## fof_variable_decl
## LR(1) items:
fof_variable_decls -> fof_variable_decl . [ RBRKT ]
fof_variable_decls -> fof_variable_decl . COMMA fof_variable_decls [ RBRKT ]
## Transitions:
-- On COMMA shift to state 257
## Reductions:
-- On RBRKT reduce production fof_variable_decls -> fof_variable_decl

State 257:
## Known stack suffix:
## fof_variable_decl COMMA
## LR(1) items:
fof_variable_decls -> fof_variable_decl COMMA . fof_variable_decls [ RBRKT ]
## Transitions:
-- On Upper_word shift to state 13
-- On variable shift to state 214
-- On fof_variable_decls shift to state 258
-- On fof_variable_decl shift to state 256
-- On fof_variable shift to state 259
## Reductions:

State 258:
## Known stack suffix:
## fof_variable_decl COMMA fof_variable_decls
## LR(1) items:
fof_variable_decls -> fof_variable_decl COMMA fof_variable_decls . [ RBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_variable_decls -> fof_variable_decl COMMA fof_variable_decls

State 259:
## Known stack suffix:
## fof_variable
## LR(1) items:
fof_variable_decl -> fof_variable . [ RBRKT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_variable_decl -> fof_variable

State 260:
## Known stack suffix:
## fof_unitary_formula
## LR(1) items:
fof_and_formula -> fof_unitary_formula . AMPERSAND fof_unitary_formula [ RPAREN COMMA AMPERSAND ]
fof_formula -> fof_unitary_formula . [ RPAREN COMMA ]
fof_nonassoc_binary -> fof_unitary_formula . fof_binary_connective fof_unitary_formula [ RPAREN COMMA ]
fof_or_formula -> fof_unitary_formula . [ VLINE RPAREN COMMA ]
## Transitions:
-- On NVLINE shift to state 68
-- On NIFF shift to state 69
-- On NAMPERSAND shift to state 70
-- On IMPLIES shift to state 71
-- On IFF shift to state 72
-- On IF shift to state 73
-- On AMPERSAND shift to state 261
-- On fof_binary_connective shift to state 263
## Reductions:
-- On VLINE reduce production fof_or_formula -> fof_unitary_formula
-- On RPAREN reduce production fof_formula -> fof_unitary_formula
-- On COMMA reduce production fof_formula -> fof_unitary_formula

State 261:
## Known stack suffix:
## fof_unitary_formula AMPERSAND
## LR(1) items:
fof_and_formula -> fof_unitary_formula AMPERSAND . fof_unitary_formula [ RPAREN COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 262
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 254
-- On atomic_word shift to state 255
## Reductions:

State 262:
## Known stack suffix:
## fof_unitary_formula AMPERSAND fof_unitary_formula
## LR(1) items:
fof_and_formula -> fof_unitary_formula AMPERSAND fof_unitary_formula . [ RPAREN COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_and_formula -> fof_unitary_formula AMPERSAND fof_unitary_formula

State 263:
## Known stack suffix:
## fof_unitary_formula fof_binary_connective
## LR(1) items:
fof_nonassoc_binary -> fof_unitary_formula fof_binary_connective . fof_unitary_formula [ RPAREN COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 264
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 254
-- On atomic_word shift to state 255
## Reductions:

State 264:
## Known stack suffix:
## fof_unitary_formula fof_binary_connective fof_unitary_formula
## LR(1) items:
fof_nonassoc_binary -> fof_unitary_formula fof_binary_connective fof_unitary_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_nonassoc_binary -> fof_unitary_formula fof_binary_connective fof_unitary_formula

State 265:
## Known stack suffix:
## fof_or_formula
## LR(1) items:
fof_assoc_binary -> fof_or_formula . [ RPAREN COMMA ]
fof_or_formula -> fof_or_formula . VLINE fof_unitary_formula [ VLINE RPAREN COMMA ]
## Transitions:
-- On VLINE shift to state 266
## Reductions:
-- On RPAREN reduce production fof_assoc_binary -> fof_or_formula
-- On COMMA reduce production fof_assoc_binary -> fof_or_formula

State 266:
## Known stack suffix:
## fof_or_formula VLINE
## LR(1) items:
fof_or_formula -> fof_or_formula VLINE . fof_unitary_formula [ VLINE RPAREN COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 267
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 254
-- On atomic_word shift to state 255
## Reductions:

State 267:
## Known stack suffix:
## fof_or_formula VLINE fof_unitary_formula
## LR(1) items:
fof_or_formula -> fof_or_formula VLINE fof_unitary_formula . [ VLINE RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_or_formula -> fof_or_formula VLINE fof_unitary_formula

State 268:
## Known stack suffix:
## fof_nonassoc_binary
## LR(1) items:
fof_binary_formula -> fof_nonassoc_binary . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_formula -> fof_nonassoc_binary

State 269:
## Known stack suffix:
## LPAREN fof_formula
## LR(1) items:
fof_unitary_formula -> LPAREN fof_formula . RPAREN [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
-- On RPAREN shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## LPAREN fof_formula RPAREN
## LR(1) items:
fof_unitary_formula -> LPAREN fof_formula RPAREN . [ VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_unitary_formula -> LPAREN fof_formula RPAREN

State 271:
## Known stack suffix:
## fof_binary_formula
## LR(1) items:
fof_formula -> fof_binary_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_formula -> fof_binary_formula

State 272:
## Known stack suffix:
## fof_assoc_binary
## LR(1) items:
fof_binary_formula -> fof_assoc_binary . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_binary_formula -> fof_assoc_binary

State 273:
## Known stack suffix:
## fof_and_formula
## LR(1) items:
fof_and_formula -> fof_and_formula . AMPERSAND fof_unitary_formula [ RPAREN COMMA AMPERSAND ]
fof_assoc_binary -> fof_and_formula . [ RPAREN COMMA ]
## Transitions:
-- On AMPERSAND shift to state 274
## Reductions:
-- On RPAREN reduce production fof_assoc_binary -> fof_and_formula
-- On COMMA reduce production fof_assoc_binary -> fof_and_formula

State 274:
## Known stack suffix:
## fof_and_formula AMPERSAND
## LR(1) items:
fof_and_formula -> fof_and_formula AMPERSAND . fof_unitary_formula [ RPAREN COMMA AMPERSAND ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 275
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 254
-- On atomic_word shift to state 255
## Reductions:

State 275:
## Known stack suffix:
## fof_and_formula AMPERSAND fof_unitary_formula
## LR(1) items:
fof_and_formula -> fof_and_formula AMPERSAND fof_unitary_formula . [ RPAREN COMMA AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_and_formula -> fof_and_formula AMPERSAND fof_unitary_formula

State 276:
## Known stack suffix:
## DFOF LPAREN fof_formula
## LR(1) items:
formula_data -> DFOF LPAREN fof_formula . RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## DFOF LPAREN fof_formula RPAREN
## LR(1) items:
formula_data -> DFOF LPAREN fof_formula RPAREN . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_data -> DFOF LPAREN fof_formula RPAREN

State 278:
## Known stack suffix:
## DCNF
## LR(1) items:
formula_data -> DCNF . LPAREN cnf_formula RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## DCNF LPAREN
## LR(1) items:
formula_data -> DCNF LPAREN . cnf_formula RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 280
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LPAREN shift to state 282
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 243
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 283
-- On cnf_literal shift to state 284
-- On cnf_formula shift to state 289
-- On atomic_word shift to state 255
## Reductions:

State 280:
## Known stack suffix:
## TILDE
## LR(1) items:
cnf_literal -> TILDE . fof_atomic_formula [ VLINE RPAREN COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 243
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 281
-- On atomic_word shift to state 255
## Reductions:

State 281:
## Known stack suffix:
## TILDE fof_atomic_formula
## LR(1) items:
cnf_literal -> TILDE fof_atomic_formula . [ VLINE RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_literal -> TILDE fof_atomic_formula

State 282:
## Known stack suffix:
## LPAREN
## LR(1) items:
cnf_formula -> LPAREN . cnf_formula RPAREN [ RPAREN COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 280
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LPAREN shift to state 282
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 243
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 283
-- On cnf_literal shift to state 284
-- On cnf_formula shift to state 287
-- On atomic_word shift to state 255
## Reductions:

State 283:
## Known stack suffix:
## fof_atomic_formula
## LR(1) items:
cnf_literal -> fof_atomic_formula . [ VLINE RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_literal -> fof_atomic_formula

State 284:
## Known stack suffix:
## cnf_literal
## LR(1) items:
cnf_formula -> cnf_literal . [ RPAREN COMMA ]
cnf_formula -> cnf_literal . VLINE cnf_formula [ RPAREN COMMA ]
## Transitions:
-- On VLINE shift to state 285
## Reductions:
-- On RPAREN reduce production cnf_formula -> cnf_literal
-- On COMMA reduce production cnf_formula -> cnf_literal

State 285:
## Known stack suffix:
## cnf_literal VLINE
## LR(1) items:
cnf_formula -> cnf_literal VLINE . cnf_formula [ RPAREN COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 280
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LPAREN shift to state 282
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 243
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 283
-- On cnf_literal shift to state 284
-- On cnf_formula shift to state 286
-- On atomic_word shift to state 255
## Reductions:

State 286:
## Known stack suffix:
## cnf_literal VLINE cnf_formula
## LR(1) items:
cnf_formula -> cnf_literal VLINE cnf_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_formula -> cnf_literal VLINE cnf_formula

State 287:
## Known stack suffix:
## LPAREN cnf_formula
## LR(1) items:
cnf_formula -> LPAREN cnf_formula . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## LPAREN cnf_formula RPAREN
## LR(1) items:
cnf_formula -> LPAREN cnf_formula RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_formula -> LPAREN cnf_formula RPAREN

State 289:
## Known stack suffix:
## DCNF LPAREN cnf_formula
## LR(1) items:
formula_data -> DCNF LPAREN cnf_formula . RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## DCNF LPAREN cnf_formula RPAREN
## LR(1) items:
formula_data -> DCNF LPAREN cnf_formula RPAREN . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_data -> DCNF LPAREN cnf_formula RPAREN

State 291:
## Known stack suffix:
## variable
## LR(1) items:
general_data -> variable . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> variable

State 292:
## Known stack suffix:
## number
## LR(1) items:
general_data -> number . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> number

State 293:
## Known stack suffix:
## LBRKT general_terms
## LR(1) items:
general_list -> LBRKT general_terms . RBRKT [ RPAREN RBRKT COMMA ]
## Transitions:
-- On RBRKT shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## LBRKT general_terms RBRKT
## LR(1) items:
general_list -> LBRKT general_terms RBRKT . [ RPAREN RBRKT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_list -> LBRKT general_terms RBRKT

State 295:
## Known stack suffix:
## general_term
## LR(1) items:
general_terms -> general_term . [ RPAREN RBRKT ]
general_terms -> general_term . COMMA general_terms [ RPAREN RBRKT ]
## Transitions:
-- On COMMA shift to state 296
## Reductions:
-- On RPAREN reduce production general_terms -> general_term
-- On RBRKT reduce production general_terms -> general_term

State 296:
## Known stack suffix:
## general_term COMMA
## LR(1) items:
general_terms -> general_term COMMA . general_terms [ RPAREN RBRKT ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LBRKT shift to state 91
-- On Distinct_object shift to state 93
-- On DTHF shift to state 94
-- On DFOT shift to state 212
-- On DFOF shift to state 228
-- On DCNF shift to state 278
-- On variable shift to state 291
-- On number shift to state 292
-- On general_terms shift to state 297
-- On general_term shift to state 295
-- On general_list shift to state 298
-- On general_data shift to state 299
-- On formula_data shift to state 302
-- On atomic_word shift to state 303
## Reductions:

State 297:
## Known stack suffix:
## general_term COMMA general_terms
## LR(1) items:
general_terms -> general_term COMMA general_terms . [ RPAREN RBRKT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_terms -> general_term COMMA general_terms

State 298:
## Known stack suffix:
## general_list
## LR(1) items:
general_term -> general_list . [ RPAREN RBRKT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_term -> general_list

State 299:
## Known stack suffix:
## general_data
## LR(1) items:
general_term -> general_data . [ RPAREN RBRKT COMMA ]
general_term -> general_data . COLON general_term [ RPAREN RBRKT COMMA ]
## Transitions:
-- On COLON shift to state 300
## Reductions:
-- On RPAREN reduce production general_term -> general_data
-- On RBRKT reduce production general_term -> general_data
-- On COMMA reduce production general_term -> general_data

State 300:
## Known stack suffix:
## general_data COLON
## LR(1) items:
general_term -> general_data COLON . general_term [ RPAREN RBRKT COMMA ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LBRKT shift to state 91
-- On Distinct_object shift to state 93
-- On DTHF shift to state 94
-- On DFOT shift to state 212
-- On DFOF shift to state 228
-- On DCNF shift to state 278
-- On variable shift to state 291
-- On number shift to state 292
-- On general_term shift to state 301
-- On general_list shift to state 298
-- On general_data shift to state 299
-- On formula_data shift to state 302
-- On atomic_word shift to state 303
## Reductions:

State 301:
## Known stack suffix:
## general_data COLON general_term
## LR(1) items:
general_term -> general_data COLON general_term . [ RPAREN RBRKT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_term -> general_data COLON general_term

State 302:
## Known stack suffix:
## formula_data
## LR(1) items:
general_data -> formula_data . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> formula_data

State 303:
## Known stack suffix:
## atomic_word
## LR(1) items:
general_data -> atomic_word . [ RPAREN RBRKT COMMA COLON ]
general_data -> atomic_word . LPAREN general_terms RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On LPAREN shift to state 304
## Reductions:
-- On RPAREN reduce production general_data -> atomic_word
-- On RBRKT reduce production general_data -> atomic_word
-- On COMMA reduce production general_data -> atomic_word
-- On COLON reduce production general_data -> atomic_word

State 304:
## Known stack suffix:
## atomic_word LPAREN
## LR(1) items:
general_data -> atomic_word LPAREN . general_terms RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LBRKT shift to state 91
-- On Distinct_object shift to state 93
-- On DTHF shift to state 94
-- On DFOT shift to state 212
-- On DFOF shift to state 228
-- On DCNF shift to state 278
-- On variable shift to state 291
-- On number shift to state 292
-- On general_terms shift to state 305
-- On general_term shift to state 295
-- On general_list shift to state 298
-- On general_data shift to state 299
-- On formula_data shift to state 302
-- On atomic_word shift to state 303
## Reductions:

State 305:
## Known stack suffix:
## atomic_word LPAREN general_terms
## LR(1) items:
general_data -> atomic_word LPAREN general_terms . RPAREN [ RPAREN RBRKT COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## atomic_word LPAREN general_terms RPAREN
## LR(1) items:
general_data -> atomic_word LPAREN general_terms RPAREN . [ RPAREN RBRKT COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_data -> atomic_word LPAREN general_terms RPAREN

State 307:
## Known stack suffix:
## COMMA source
## LR(1) items:
annotations -> COMMA source . optional_info [ RPAREN ]
## Transitions:
-- On COMMA shift to state 308
-- On optional_info shift to state 311
-- On null shift to state 312
## Reductions:
-- On RPAREN reduce production null ->

State 308:
## Known stack suffix:
## COMMA
## LR(1) items:
optional_info -> COMMA . useful_info [ RPAREN ]
## Transitions:
-- On LBRKT shift to state 91
-- On useful_info shift to state 309
-- On general_list shift to state 310
## Reductions:

State 309:
## Known stack suffix:
## COMMA useful_info
## LR(1) items:
optional_info -> COMMA useful_info . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_info -> COMMA useful_info

State 310:
## Known stack suffix:
## general_list
## LR(1) items:
useful_info -> general_list . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production useful_info -> general_list

State 311:
## Known stack suffix:
## COMMA source optional_info
## LR(1) items:
annotations -> COMMA source optional_info . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotations -> COMMA source optional_info

State 312:
## Known stack suffix:
## null
## LR(1) items:
optional_info -> null . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional_info -> null

State 313:
## Known stack suffix:
## general_term
## LR(1) items:
source -> general_term . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source -> general_term

State 314:
## Known stack suffix:
## null
## LR(1) items:
annotations -> null . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotations -> null

State 315:
## Known stack suffix:
## QMF LPAREN name COMMA formula_role COMMA qmf_top annotations
## LR(1) items:
qmf_annotated -> QMF LPAREN name COMMA formula_role COMMA qmf_top annotations . RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On RPAREN shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## QMF LPAREN name COMMA formula_role COMMA qmf_top annotations RPAREN
## LR(1) items:
qmf_annotated -> QMF LPAREN name COMMA formula_role COMMA qmf_top annotations RPAREN . PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On PERIOD shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## QMF LPAREN name COMMA formula_role COMMA qmf_top annotations RPAREN PERIOD
## LR(1) items:
qmf_annotated -> QMF LPAREN name COMMA formula_role COMMA qmf_top annotations RPAREN PERIOD . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_annotated -> QMF LPAREN name COMMA formula_role COMMA qmf_top annotations RPAREN PERIOD

State 318:
## Known stack suffix:
## qmf_formula
## LR(1) items:
qmf_top -> qmf_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qmf_top -> qmf_formula

State 319:
## Known stack suffix:
## atomic_word
## LR(1) items:
formula_role -> atomic_word . [ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_role -> atomic_word

State 320:
## Known stack suffix:
## atomic_word
## LR(1) items:
name -> atomic_word . [ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> atomic_word

State 321:
## Known stack suffix:
## HOF
## LR(1) items:
hof_annotated -> HOF . LPAREN name COMMA formula_role COMMA typed_constant annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF . LPAREN name COMMA formula_role COMMA definition annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF . LPAREN name COMMA formula_role COMMA thf_logic_formula annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On LPAREN shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## HOF LPAREN
## LR(1) items:
hof_annotated -> HOF LPAREN . name COMMA formula_role COMMA typed_constant annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN . name COMMA formula_role COMMA definition annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN . name COMMA formula_role COMMA thf_logic_formula annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Unsigned_integer shift to state 6
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On name shift to state 323
-- On atomic_word shift to state 320
## Reductions:

State 323:
## Known stack suffix:
## HOF LPAREN name
## LR(1) items:
hof_annotated -> HOF LPAREN name . COMMA formula_role COMMA typed_constant annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name . COMMA formula_role COMMA definition annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name . COMMA formula_role COMMA thf_logic_formula annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## HOF LPAREN name COMMA
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA . formula_role COMMA typed_constant annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name COMMA . formula_role COMMA definition annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name COMMA . formula_role COMMA thf_logic_formula annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On formula_role shift to state 325
-- On atomic_word shift to state 319
## Reductions:

State 325:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role . COMMA typed_constant annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name COMMA formula_role . COMMA definition annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name COMMA formula_role . COMMA thf_logic_formula annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA . typed_constant annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA . definition annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA . thf_logic_formula annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 327
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On typed_constant shift to state 341
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 345
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On definition shift to state 349
-- On defined_element shift to state 353
-- On constant shift to state 356
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 327:
## Known stack suffix:
## LPAREN
## LR(1) items:
definition -> LPAREN . defined_element GETS thf_logic_formula RPAREN [ RPAREN COMMA ]
thf_unitary_formula -> LPAREN . thf_logic_formula RPAREN [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
typed_constant -> LPAREN . constant COLON type_expr RPAREN [ RPAREN GETS COMMA ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 328
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On typed_constant shift to state 333
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 206
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On defined_element shift to state 334
-- On constant shift to state 338
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 328:
## Known stack suffix:
## LPAREN
## LR(1) items:
thf_unitary_formula -> LPAREN . thf_logic_formula RPAREN [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS AT_SIGN AMPERSAND ]
typed_constant -> LPAREN . constant COLON type_expr RPAREN [ GETS ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 206
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 329
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 329:
## Known stack suffix:
## LPAREN constant
## LR(1) items:
thf_atom -> constant . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS AT_SIGN AMPERSAND ]
typed_constant -> LPAREN constant . COLON type_expr RPAREN [ GETS ]
## Transitions:
-- On COLON shift to state 330
## Reductions:
-- On VLINE reduce production thf_atom -> constant
-- On RPAREN reduce production thf_atom -> constant
-- On NVLINE reduce production thf_atom -> constant
-- On NIFF reduce production thf_atom -> constant
-- On NEQUALS reduce production thf_atom -> constant
-- On NAMPERSAND reduce production thf_atom -> constant
-- On IMPLIES reduce production thf_atom -> constant
-- On IFF reduce production thf_atom -> constant
-- On IF reduce production thf_atom -> constant
-- On EQUALS reduce production thf_atom -> constant
-- On AT_SIGN reduce production thf_atom -> constant
-- On AMPERSAND reduce production thf_atom -> constant

State 330:
## Known stack suffix:
## LPAREN constant COLON
## LR(1) items:
typed_constant -> LPAREN constant COLON . type_expr RPAREN [ GETS ]
## Transitions:
-- On Upper_word shift to state 150
-- On TOK_TYPE shift to state 151
-- On TOK_REAL shift to state 152
-- On TOK_O shift to state 153
-- On TOK_INT shift to state 154
-- On TOK_I shift to state 155
-- On Lower_word shift to state 156
-- On LPAREN shift to state 157
-- On type_variable shift to state 158
-- On type_expr shift to state 331
-- On poly_type_variable shift to state 165
-- On atomic_type shift to state 166
## Reductions:

State 331:
## Known stack suffix:
## LPAREN constant COLON type_expr
## LR(1) items:
type_expr -> type_expr . map_arrow type_expr [ RPAREN MAP_TO GREATER ]
typed_constant -> LPAREN constant COLON type_expr . RPAREN [ GETS ]
## Transitions:
-- On RPAREN shift to state 332
-- On MAP_TO shift to state 161
-- On GREATER shift to state 162
-- On map_arrow shift to state 163
## Reductions:

State 332:
## Known stack suffix:
## LPAREN constant COLON type_expr RPAREN
## LR(1) items:
typed_constant -> LPAREN constant COLON type_expr RPAREN . [ RPAREN GETS COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_constant -> LPAREN constant COLON type_expr RPAREN

State 333:
## Known stack suffix:
## typed_constant
## LR(1) items:
defined_element -> typed_constant . [ GETS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defined_element -> typed_constant

State 334:
## Known stack suffix:
## LPAREN defined_element
## LR(1) items:
definition -> LPAREN defined_element . GETS thf_logic_formula RPAREN [ RPAREN COMMA ]
## Transitions:
-- On GETS shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## LPAREN defined_element GETS
## LR(1) items:
definition -> LPAREN defined_element GETS . thf_logic_formula RPAREN [ RPAREN COMMA ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 336
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 336:
## Known stack suffix:
## LPAREN defined_element GETS thf_logic_formula
## LR(1) items:
definition -> LPAREN defined_element GETS thf_logic_formula . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## LPAREN defined_element GETS thf_logic_formula RPAREN
## LR(1) items:
definition -> LPAREN defined_element GETS thf_logic_formula RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production definition -> LPAREN defined_element GETS thf_logic_formula RPAREN

State 338:
## Known stack suffix:
## LPAREN constant
## LR(1) items:
defined_element -> constant . [ GETS ]
thf_atom -> constant . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS AT_SIGN AMPERSAND ]
typed_constant -> LPAREN constant . COLON type_expr RPAREN [ RPAREN GETS COMMA ]
typed_constant -> constant . COLON type_expr [ GETS ]
## Transitions:
-- On COLON shift to state 339
## Reductions:
-- On VLINE reduce production thf_atom -> constant
-- On RPAREN reduce production thf_atom -> constant
-- On NVLINE reduce production thf_atom -> constant
-- On NIFF reduce production thf_atom -> constant
-- On NEQUALS reduce production thf_atom -> constant
-- On NAMPERSAND reduce production thf_atom -> constant
-- On IMPLIES reduce production thf_atom -> constant
-- On IFF reduce production thf_atom -> constant
-- On IF reduce production thf_atom -> constant
-- On GETS reduce production defined_element -> constant
-- On EQUALS reduce production thf_atom -> constant
-- On AT_SIGN reduce production thf_atom -> constant
-- On AMPERSAND reduce production thf_atom -> constant

State 339:
## Known stack suffix:
## LPAREN constant COLON
## LR(1) items:
typed_constant -> LPAREN constant COLON . type_expr RPAREN [ RPAREN GETS COMMA ]
typed_constant -> constant COLON . type_expr [ GETS ]
## Transitions:
-- On Upper_word shift to state 150
-- On TOK_TYPE shift to state 151
-- On TOK_REAL shift to state 152
-- On TOK_O shift to state 153
-- On TOK_INT shift to state 154
-- On TOK_I shift to state 155
-- On Lower_word shift to state 156
-- On LPAREN shift to state 157
-- On type_variable shift to state 158
-- On type_expr shift to state 340
-- On poly_type_variable shift to state 165
-- On atomic_type shift to state 166
## Reductions:

State 340:
## Known stack suffix:
## LPAREN constant COLON type_expr
## LR(1) items:
type_expr -> type_expr . map_arrow type_expr [ RPAREN MAP_TO GREATER GETS ]
typed_constant -> LPAREN constant COLON type_expr . RPAREN [ RPAREN GETS COMMA ]
typed_constant -> constant COLON type_expr . [ GETS ]
## Transitions:
-- On RPAREN shift to state 332
-- On MAP_TO shift to state 161
-- On GREATER shift to state 162
-- On map_arrow shift to state 163
## Reductions:
-- On GETS reduce production typed_constant -> constant COLON type_expr

State 341:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA typed_constant
## LR(1) items:
defined_element -> typed_constant . [ GETS ]
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA typed_constant . annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 90
-- On null shift to state 314
-- On annotations shift to state 342
## Reductions:
-- On RPAREN reduce production null ->
-- On GETS reduce production defined_element -> typed_constant

State 342:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA typed_constant annotations
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA typed_constant annotations . RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On RPAREN shift to state 343
## Reductions:

State 343:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA typed_constant annotations RPAREN
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA typed_constant annotations RPAREN . PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On PERIOD shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA typed_constant annotations RPAREN PERIOD
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA typed_constant annotations RPAREN PERIOD . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hof_annotated -> HOF LPAREN name COMMA formula_role COMMA typed_constant annotations RPAREN PERIOD

State 345:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA thf_logic_formula
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA thf_logic_formula . annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 90
-- On null shift to state 314
-- On annotations shift to state 346
## Reductions:
-- On RPAREN reduce production null ->

State 346:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA thf_logic_formula annotations
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA thf_logic_formula annotations . RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On RPAREN shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA thf_logic_formula annotations RPAREN
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA thf_logic_formula annotations RPAREN . PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On PERIOD shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA thf_logic_formula annotations RPAREN PERIOD
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA thf_logic_formula annotations RPAREN PERIOD . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hof_annotated -> HOF LPAREN name COMMA formula_role COMMA thf_logic_formula annotations RPAREN PERIOD

State 349:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA definition
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA definition . annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 90
-- On null shift to state 314
-- On annotations shift to state 350
## Reductions:
-- On RPAREN reduce production null ->

State 350:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA definition annotations
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA definition annotations . RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On RPAREN shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA definition annotations RPAREN
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA definition annotations RPAREN . PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On PERIOD shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## HOF LPAREN name COMMA formula_role COMMA definition annotations RPAREN PERIOD
## LR(1) items:
hof_annotated -> HOF LPAREN name COMMA formula_role COMMA definition annotations RPAREN PERIOD . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production hof_annotated -> HOF LPAREN name COMMA formula_role COMMA definition annotations RPAREN PERIOD

State 353:
## Known stack suffix:
## defined_element
## LR(1) items:
definition -> defined_element . GETS thf_logic_formula [ RPAREN COMMA ]
## Transitions:
-- On GETS shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## defined_element GETS
## LR(1) items:
definition -> defined_element GETS . thf_logic_formula [ RPAREN COMMA ]
## Transitions:
-- On VLINE shift to state 96
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 97
-- On TOK_FALSE shift to state 98
-- On TILDE shift to state 99
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On NVLINE shift to state 101
-- On NIFF shift to state 102
-- On NEQUALS shift to state 103
-- On NAMPERSAND shift to state 104
-- On Lower_word shift to state 8
-- On LPAREN shift to state 105
-- On LAMBDA shift to state 106
-- On IMPLIES shift to state 107
-- On IFF shift to state 108
-- On IF shift to state 109
-- On EXCLAMATION shift to state 22
-- On EQUALS shift to state 110
-- On DOUBLEQUESTION shift to state 111
-- On DOUBLEEXCLAMATION shift to state 112
-- On CARET shift to state 113
-- On AMPERSAND shift to state 114
-- On variable shift to state 115
-- On unary_connective shift to state 116
-- On thf_unitary_formula shift to state 117
-- On thf_unary_formula shift to state 120
-- On thf_quantified_formula shift to state 121
-- On thf_or_formula shift to state 126
-- On thf_logic_formula shift to state 355
-- On thf_binary_tuple shift to state 182
-- On thf_binary_pair shift to state 183
-- On thf_binary_formula shift to state 184
-- On thf_atom shift to state 122
-- On thf_apply_formula shift to state 185
-- On thf_and_formula shift to state 188
-- On thf_abstraction shift to state 123
-- On quantifier_comb shift to state 124
-- On quantifier shift to state 129
-- On number shift to state 135
-- On lambda_symbol shift to state 136
-- On constant shift to state 142
-- On binary_connective shift to state 143
-- On atomic_word shift to state 144
## Reductions:

State 355:
## Known stack suffix:
## defined_element GETS thf_logic_formula
## LR(1) items:
definition -> defined_element GETS thf_logic_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production definition -> defined_element GETS thf_logic_formula

State 356:
## Known stack suffix:
## constant
## LR(1) items:
defined_element -> constant . [ GETS ]
thf_atom -> constant . [ VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND ]
typed_constant -> constant . COLON type_expr [ RPAREN GETS COMMA ]
## Transitions:
-- On COLON shift to state 357
## Reductions:
-- On VLINE reduce production thf_atom -> constant
-- On RPAREN reduce production thf_atom -> constant
-- On NVLINE reduce production thf_atom -> constant
-- On NIFF reduce production thf_atom -> constant
-- On NEQUALS reduce production thf_atom -> constant
-- On NAMPERSAND reduce production thf_atom -> constant
-- On IMPLIES reduce production thf_atom -> constant
-- On IFF reduce production thf_atom -> constant
-- On IF reduce production thf_atom -> constant
-- On GETS reduce production defined_element -> constant
-- On EQUALS reduce production thf_atom -> constant
-- On COMMA reduce production thf_atom -> constant
-- On AT_SIGN reduce production thf_atom -> constant
-- On AMPERSAND reduce production thf_atom -> constant

State 357:
## Known stack suffix:
## constant COLON
## LR(1) items:
typed_constant -> constant COLON . type_expr [ RPAREN GETS COMMA ]
## Transitions:
-- On Upper_word shift to state 150
-- On TOK_TYPE shift to state 151
-- On TOK_REAL shift to state 152
-- On TOK_O shift to state 153
-- On TOK_INT shift to state 154
-- On TOK_I shift to state 155
-- On Lower_word shift to state 156
-- On LPAREN shift to state 157
-- On type_variable shift to state 158
-- On type_expr shift to state 358
-- On poly_type_variable shift to state 165
-- On atomic_type shift to state 166
## Reductions:

State 358:
## Known stack suffix:
## constant COLON type_expr
## LR(1) items:
type_expr -> type_expr . map_arrow type_expr [ RPAREN MAP_TO GREATER GETS COMMA ]
typed_constant -> constant COLON type_expr . [ RPAREN GETS COMMA ]
## Transitions:
-- On MAP_TO shift to state 161
-- On GREATER shift to state 162
-- On map_arrow shift to state 163
## Reductions:
-- On RPAREN reduce production typed_constant -> constant COLON type_expr
-- On GETS reduce production typed_constant -> constant COLON type_expr
-- On COMMA reduce production typed_constant -> constant COLON type_expr

State 359:
## Known stack suffix:
## FOF
## LR(1) items:
fof_annotated -> FOF . LPAREN name COMMA formula_role COMMA fof_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On LPAREN shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## FOF LPAREN
## LR(1) items:
fof_annotated -> FOF LPAREN . name COMMA formula_role COMMA fof_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Unsigned_integer shift to state 6
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On name shift to state 361
-- On atomic_word shift to state 320
## Reductions:

State 361:
## Known stack suffix:
## FOF LPAREN name
## LR(1) items:
fof_annotated -> FOF LPAREN name . COMMA formula_role COMMA fof_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## FOF LPAREN name COMMA
## LR(1) items:
fof_annotated -> FOF LPAREN name COMMA . formula_role COMMA fof_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On formula_role shift to state 363
-- On atomic_word shift to state 319
## Reductions:

State 363:
## Known stack suffix:
## FOF LPAREN name COMMA formula_role
## LR(1) items:
fof_annotated -> FOF LPAREN name COMMA formula_role . COMMA fof_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## FOF LPAREN name COMMA formula_role COMMA
## LR(1) items:
fof_annotated -> FOF LPAREN name COMMA formula_role COMMA . fof_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 232
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On QUESTION shift to state 20
-- On Lower_word shift to state 8
-- On LPAREN shift to state 233
-- On EXCLAMATION shift to state 22
-- On variable shift to state 214
-- On quantifier shift to state 234
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_unitary_formula shift to state 260
-- On fof_unary_formula shift to state 240
-- On fof_unary_connective shift to state 241
-- On fof_top shift to state 365
-- On fof_term shift to state 243
-- On fof_quantified_formula shift to state 248
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_or_formula shift to state 265
-- On fof_nonassoc_binary shift to state 268
-- On fof_formula shift to state 369
-- On fof_constant shift to state 223
-- On fof_binary_formula shift to state 271
-- On fof_atomic_formula shift to state 254
-- On fof_assoc_binary shift to state 272
-- On fof_and_formula shift to state 273
-- On atomic_word shift to state 255
## Reductions:

State 365:
## Known stack suffix:
## FOF LPAREN name COMMA formula_role COMMA fof_top
## LR(1) items:
fof_annotated -> FOF LPAREN name COMMA formula_role COMMA fof_top . annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 90
-- On null shift to state 314
-- On annotations shift to state 366
## Reductions:
-- On RPAREN reduce production null ->

State 366:
## Known stack suffix:
## FOF LPAREN name COMMA formula_role COMMA fof_top annotations
## LR(1) items:
fof_annotated -> FOF LPAREN name COMMA formula_role COMMA fof_top annotations . RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On RPAREN shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## FOF LPAREN name COMMA formula_role COMMA fof_top annotations RPAREN
## LR(1) items:
fof_annotated -> FOF LPAREN name COMMA formula_role COMMA fof_top annotations RPAREN . PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On PERIOD shift to state 368
## Reductions:

State 368:
## Known stack suffix:
## FOF LPAREN name COMMA formula_role COMMA fof_top annotations RPAREN PERIOD
## LR(1) items:
fof_annotated -> FOF LPAREN name COMMA formula_role COMMA fof_top annotations RPAREN PERIOD . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_annotated -> FOF LPAREN name COMMA formula_role COMMA fof_top annotations RPAREN PERIOD

State 369:
## Known stack suffix:
## fof_formula
## LR(1) items:
fof_top -> fof_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fof_top -> fof_formula

State 370:
## Known stack suffix:
## CNF
## LR(1) items:
cnf_annotated -> CNF . LPAREN name COMMA formula_role COMMA cnf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On LPAREN shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## CNF LPAREN
## LR(1) items:
cnf_annotated -> CNF LPAREN . name COMMA formula_role COMMA cnf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Unsigned_integer shift to state 6
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On name shift to state 372
-- On atomic_word shift to state 320
## Reductions:

State 372:
## Known stack suffix:
## CNF LPAREN name
## LR(1) items:
cnf_annotated -> CNF LPAREN name . COMMA formula_role COMMA cnf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 373
## Reductions:

State 373:
## Known stack suffix:
## CNF LPAREN name COMMA
## LR(1) items:
cnf_annotated -> CNF LPAREN name COMMA . formula_role COMMA cnf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Single_quoted shift to state 7
-- On Lower_word shift to state 8
-- On formula_role shift to state 374
-- On atomic_word shift to state 319
## Reductions:

State 374:
## Known stack suffix:
## CNF LPAREN name COMMA formula_role
## LR(1) items:
cnf_annotated -> CNF LPAREN name COMMA formula_role . COMMA cnf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## CNF LPAREN name COMMA formula_role COMMA
## LR(1) items:
cnf_annotated -> CNF LPAREN name COMMA formula_role COMMA . cnf_top annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On Upper_word shift to state 13
-- On Unsigned_integer shift to state 14
-- On TOK_TRUE shift to state 230
-- On TOK_FALSE shift to state 231
-- On TILDE shift to state 280
-- On Single_quoted shift to state 7
-- On Signed_integer shift to state 18
-- On Real shift to state 19
-- On Lower_word shift to state 8
-- On LPAREN shift to state 282
-- On variable shift to state 214
-- On number shift to state 215
-- On fof_variable shift to state 216
-- On fof_term shift to state 243
-- On fof_prop_const shift to state 249
-- On fof_pred shift to state 250
-- On fof_constant shift to state 223
-- On fof_atomic_formula shift to state 283
-- On cnf_top shift to state 376
-- On cnf_literal shift to state 284
-- On cnf_formula shift to state 380
-- On atomic_word shift to state 255
## Reductions:

State 376:
## Known stack suffix:
## CNF LPAREN name COMMA formula_role COMMA cnf_top
## LR(1) items:
cnf_annotated -> CNF LPAREN name COMMA formula_role COMMA cnf_top . annotations RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On COMMA shift to state 90
-- On null shift to state 314
-- On annotations shift to state 377
## Reductions:
-- On RPAREN reduce production null ->

State 377:
## Known stack suffix:
## CNF LPAREN name COMMA formula_role COMMA cnf_top annotations
## LR(1) items:
cnf_annotated -> CNF LPAREN name COMMA formula_role COMMA cnf_top annotations . RPAREN PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On RPAREN shift to state 378
## Reductions:

State 378:
## Known stack suffix:
## CNF LPAREN name COMMA formula_role COMMA cnf_top annotations RPAREN
## LR(1) items:
cnf_annotated -> CNF LPAREN name COMMA formula_role COMMA cnf_top annotations RPAREN . PERIOD [ QMF HOF FOF CNF # ]
## Transitions:
-- On PERIOD shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## CNF LPAREN name COMMA formula_role COMMA cnf_top annotations RPAREN PERIOD
## LR(1) items:
cnf_annotated -> CNF LPAREN name COMMA formula_role COMMA cnf_top annotations RPAREN PERIOD . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_annotated -> CNF LPAREN name COMMA formula_role COMMA cnf_top annotations RPAREN PERIOD

State 380:
## Known stack suffix:
## cnf_formula
## LR(1) items:
cnf_top -> cnf_formula . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnf_top -> cnf_formula

State 381:
## Known stack suffix:
## input qmf_annotated
## LR(1) items:
input -> input qmf_annotated . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production input -> input qmf_annotated

State 382:
## Known stack suffix:
## input hof_annotated
## LR(1) items:
input -> input hof_annotated . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production input -> input hof_annotated

State 383:
## Known stack suffix:
## input fof_annotated
## LR(1) items:
input -> input fof_annotated . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production input -> input fof_annotated

State 384:
## Known stack suffix:
## input cnf_annotated
## LR(1) items:
input -> input cnf_annotated . [ QMF HOF FOF CNF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production input -> input cnf_annotated

