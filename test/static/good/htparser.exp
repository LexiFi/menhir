File "htparser.mly", line 134, characters 16-34:
Warning: the token Atomic_system_word is unused.
File "htparser.mly", line 132, characters 16-28:
Warning: the token Decimal_part is unused.
File "htparser.mly", line 123, characters 7-10:
Warning: the token EOF is unused.
File "htparser.mly", line 94, characters 7-18:
Warning: the token INCLUDE_TOK is unused.
File "htparser.mly", line 95, characters 7-19:
Warning: the token INPUT_CLAUSE is unused.
File "htparser.mly", line 96, characters 7-20:
Warning: the token INPUT_FORMULA is unused.
File "htparser.mly", line 101, characters 7-13:
Warning: the token MMINUS is unused.
File "htparser.mly", line 107, characters 7-12:
Warning: the token PPLUS is unused.
File "htparser.mly", line 140, characters 7-19:
Warning: the token Unrecognized is unused.
File "htparser.mly", line 704, characters 0-10:
Warning: symbol apply_term is unreachable from any of the start symbol(s).
File "htparser.mly", line 259, characters 0-11:
Warning: symbol hof_formula is unreachable from any of the start symbol(s).
File "htparser.mly", line 708, characters 0-11:
Warning: symbol lambda_term is unreachable from any of the start symbol(s).
File "htparser.mly", line 690, characters 0-15:
Warning: symbol quantified_term is unreachable from any of the start symbol(s).
File "htparser.mly", line 649, characters 0-4:
Warning: symbol term is unreachable from any of the start symbol(s).
Grammar has 99 nonterminal symbols, among which 1 start symbols.
Grammar has 61 terminal symbols.
Grammar has 225 productions.
nullable(variable_decls) = false
nullable(variable_decl) = false
nullable(variable) = false
nullable(useful_info) = false
nullable(unary_connective) = false
nullable(typed_constant) = false
nullable(type_variable_decls) = false
nullable(type_variable_decl) = false
nullable(type_variable) = false
nullable(type_expr) = false
nullable(thf_unitary_formula) = false
nullable(thf_unary_formula) = false
nullable(thf_quantified_formula) = false
nullable(thf_pair_connective) = false
nullable(thf_or_formula) = false
nullable(thf_logic_formula) = false
nullable(thf_binary_tuple) = false
nullable(thf_binary_pair) = false
nullable(thf_binary_formula) = false
nullable(thf_atom) = false
nullable(thf_apply_formula) = false
nullable(thf_and_formula) = false
nullable(thf_abstraction) = false
nullable(source) = false
nullable(quantifier_comb) = false
nullable(quantifier) = false
nullable(qmf_variable_decls) = false
nullable(qmf_variable_decl) = false
nullable(qmf_variable) = false
nullable(qmf_unitary_formula) = false
nullable(qmf_unary_formula) = false
nullable(qmf_unary_connective) = false
nullable(qmf_top) = false
nullable(qmf_term) = false
nullable(qmf_quantified_formula) = false
nullable(qmf_prop_const) = false
nullable(qmf_pred) = false
nullable(qmf_or_formula) = false
nullable(qmf_nonassoc_binary) = false
nullable(qmf_infix_pred) = false
nullable(qmf_formula) = false
nullable(qmf_constant) = false
nullable(qmf_boxed_formula) = false
nullable(qmf_binary_formula) = false
nullable(qmf_atomic_formula) = false
nullable(qmf_assoc_binary) = false
nullable(qmf_args) = false
nullable(qmf_annotated) = false
nullable(qmf_and_formula) = false
nullable(poly_type_variable) = false
nullable(optional_info) = true
nullable(number) = false
nullable(null) = true
nullable(name) = false
nullable(map_arrow) = false
nullable(lambda_symbol) = false
nullable(input) = true
nullable(hof_annotated) = false
nullable(general_terms) = false
nullable(general_term) = false
nullable(general_list) = false
nullable(general_data) = false
nullable(formula_role) = false
nullable(formula_data) = false
nullable(fof_variable_decls) = false
nullable(fof_variable_decl) = false
nullable(fof_variable) = false
nullable(fof_unitary_formula) = false
nullable(fof_unary_formula) = false
nullable(fof_unary_connective) = false
nullable(fof_top) = false
nullable(fof_term) = false
nullable(fof_quantified_formula) = false
nullable(fof_prop_const) = false
nullable(fof_pred) = false
nullable(fof_or_formula) = false
nullable(fof_nonassoc_binary) = false
nullable(fof_infix_pred) = false
nullable(fof_formula) = false
nullable(fof_constant) = false
nullable(fof_binary_formula) = false
nullable(fof_binary_connective) = false
nullable(fof_atomic_formula) = false
nullable(fof_assoc_binary) = false
nullable(fof_args) = false
nullable(fof_annotated) = false
nullable(fof_and_formula) = false
nullable(definition) = false
nullable(defined_element) = false
nullable(constant) = false
nullable(cnf_top) = false
nullable(cnf_literal) = false
nullable(cnf_formula) = false
nullable(cnf_annotated) = false
nullable(boxoperator) = false
nullable(binary_connective) = false
nullable(atomic_word) = false
nullable(atomic_type) = false
nullable(annotations) = true
first(variable_decls) = Upper_word
first(variable_decl) = Upper_word
first(variable) = Upper_word
first(useful_info) = LBRKT
first(unary_connective) = TILDE DOUBLEQUESTION DOUBLEEXCLAMATION
first(typed_constant) = TOK_TRUE TOK_FALSE Single_quoted Lower_word LPAREN
first(type_variable_decls) = Upper_word
first(type_variable_decl) = Upper_word
first(type_variable) = Upper_word
first(type_expr) = Upper_word TOK_TYPE TOK_REAL TOK_O TOK_INT TOK_I Lower_word LPAREN
first(thf_unitary_formula) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_unary_formula) = TILDE DOUBLEQUESTION DOUBLEEXCLAMATION
first(thf_quantified_formula) = QUESTION EXCLAMATION
first(thf_pair_connective) = NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS
first(thf_or_formula) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_logic_formula) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_binary_tuple) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_binary_pair) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_binary_formula) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_atom) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real NVLINE NIFF NEQUALS NAMPERSAND Lower_word IMPLIES IFF IF EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION AMPERSAND
first(thf_apply_formula) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_and_formula) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
first(thf_abstraction) = LAMBDA CARET
first(source) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word LBRKT Distinct_object DTHF DFOT DFOF DCNF
first(quantifier_comb) = DOUBLEQUESTION DOUBLEEXCLAMATION
first(quantifier) = QUESTION EXCLAMATION
first(qmf_variable_decls) = Upper_word
first(qmf_variable_decl) = Upper_word
first(qmf_variable) = Upper_word
first(qmf_unitary_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(qmf_unary_formula) = TILDE
first(qmf_unary_connective) = TILDE
first(qmf_top) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(qmf_term) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word
first(qmf_quantified_formula) = QUESTION EXCLAMATION
first(qmf_prop_const) = TOK_TRUE TOK_FALSE Single_quoted Lower_word
first(qmf_pred) = Single_quoted Lower_word
first(qmf_or_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(qmf_nonassoc_binary) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(qmf_infix_pred) = NEQUALS EQUALS
first(qmf_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(qmf_constant) = Unsigned_integer Single_quoted Signed_integer Real Lower_word
first(qmf_boxed_formula) = DIAMOND BOX
first(qmf_binary_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(qmf_atomic_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE Single_quoted Signed_integer Real Lower_word
first(qmf_assoc_binary) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(qmf_args) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word
first(qmf_annotated) = QMF
first(qmf_and_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
first(poly_type_variable) = Upper_word
first(optional_info) = COMMA
first(number) = Unsigned_integer Signed_integer Real
first(null) = 
first(name) = Unsigned_integer Single_quoted Lower_word
first(map_arrow) = MAP_TO GREATER
first(lambda_symbol) = LAMBDA CARET
first(input) = error QMF HOF FOF CNF
first(hof_annotated) = HOF
first(general_terms) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word LBRKT Distinct_object DTHF DFOT DFOF DCNF
first(general_term) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word LBRKT Distinct_object DTHF DFOT DFOF DCNF
first(general_list) = LBRKT
first(general_data) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word Distinct_object DTHF DFOT DFOF DCNF
first(formula_role) = Single_quoted Lower_word
first(formula_data) = DTHF DFOT DFOF DCNF
first(fof_variable_decls) = Upper_word
first(fof_variable_decl) = Upper_word
first(fof_variable) = Upper_word
first(fof_unitary_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(fof_unary_formula) = TILDE
first(fof_unary_connective) = TILDE
first(fof_top) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(fof_term) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word
first(fof_quantified_formula) = QUESTION EXCLAMATION
first(fof_prop_const) = TOK_TRUE TOK_FALSE Single_quoted Lower_word
first(fof_pred) = Single_quoted Lower_word
first(fof_or_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(fof_nonassoc_binary) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(fof_infix_pred) = NEQUALS EQUALS
first(fof_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(fof_constant) = Unsigned_integer Single_quoted Signed_integer Real Lower_word
first(fof_binary_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(fof_binary_connective) = NVLINE NIFF NAMPERSAND IMPLIES IFF IF
first(fof_atomic_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE Single_quoted Signed_integer Real Lower_word
first(fof_assoc_binary) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(fof_args) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word
first(fof_annotated) = FOF
first(fof_and_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
first(definition) = TOK_TRUE TOK_FALSE Single_quoted Lower_word LPAREN
first(defined_element) = TOK_TRUE TOK_FALSE Single_quoted Lower_word LPAREN
first(constant) = TOK_TRUE TOK_FALSE Single_quoted Lower_word
first(cnf_top) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real Lower_word LPAREN
first(cnf_literal) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real Lower_word
first(cnf_formula) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real Lower_word LPAREN
first(cnf_annotated) = CNF
first(boxoperator) = DIAMOND BOX
first(binary_connective) = VLINE NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS AMPERSAND
first(atomic_word) = Single_quoted Lower_word
first(atomic_type) = TOK_TYPE TOK_REAL TOK_O TOK_INT TOK_I Lower_word
first(annotations) = COMMA
minimal(variable_decls) = (* 3 *) Upper_word COLON TOK_O
minimal(variable_decl) = (* 3 *) Upper_word COLON TOK_O
minimal(variable) = (* 1 *) Upper_word
minimal(useful_info) = (* 2 *) LBRKT RBRKT
minimal(unary_connective) = (* 1 *) TILDE
minimal(typed_constant) = (* 3 *) TOK_TRUE COLON TOK_O
minimal(type_variable_decls) = (* 3 *) Upper_word COLON TOK_TYPE
minimal(type_variable_decl) = (* 3 *) Upper_word COLON TOK_TYPE
minimal(type_variable) = (* 1 *) Upper_word
minimal(type_expr) = (* 1 *) TOK_O
minimal(thf_unitary_formula) = (* 1 *) Upper_word
minimal(thf_unary_formula) = (* 2 *) DOUBLEEXCLAMATION Upper_word
minimal(thf_quantified_formula) = (* 8 *) EXCLAMATION LBRKT Upper_word COLON TOK_O RBRKT COLON Upper_word
minimal(thf_pair_connective) = (* 1 *) IFF
minimal(thf_or_formula) = (* 3 *) Upper_word VLINE Upper_word
minimal(thf_logic_formula) = (* 1 *) Upper_word
minimal(thf_binary_tuple) = (* 3 *) Upper_word VLINE Upper_word
minimal(thf_binary_pair) = (* 3 *) Upper_word IFF Upper_word
minimal(thf_binary_formula) = (* 3 *) Upper_word IFF Upper_word
minimal(thf_atom) = (* 1 *) Upper_word
minimal(thf_apply_formula) = (* 3 *) Upper_word AT_SIGN Upper_word
minimal(thf_and_formula) = (* 3 *) Upper_word AMPERSAND Upper_word
minimal(thf_abstraction) = (* 8 *) LAMBDA LBRKT Upper_word COLON TOK_O RBRKT COLON Upper_word
minimal(source) = (* 1 *) Lower_word
minimal(quantifier_comb) = (* 1 *) DOUBLEEXCLAMATION
minimal(quantifier) = (* 1 *) EXCLAMATION
minimal(qmf_variable_decls) = (* 1 *) Upper_word
minimal(qmf_variable_decl) = (* 1 *) Upper_word
minimal(qmf_variable) = (* 1 *) Upper_word
minimal(qmf_unitary_formula) = (* 1 *) TOK_TRUE
minimal(qmf_unary_formula) = (* 2 *) TILDE TOK_TRUE
minimal(qmf_unary_connective) = (* 1 *) TILDE
minimal(qmf_top) = (* 1 *) TOK_TRUE
minimal(qmf_term) = (* 1 *) Lower_word
minimal(qmf_quantified_formula) = (* 6 *) EXCLAMATION LBRKT Upper_word RBRKT COLON TOK_TRUE
minimal(qmf_prop_const) = (* 1 *) TOK_TRUE
minimal(qmf_pred) = (* 1 *) Lower_word
minimal(qmf_or_formula) = (* 1 *) TOK_TRUE
minimal(qmf_nonassoc_binary) = (* 3 *) TOK_TRUE IFF TOK_TRUE
minimal(qmf_infix_pred) = (* 1 *) EQUALS
minimal(qmf_formula) = (* 1 *) TOK_TRUE
minimal(qmf_constant) = (* 1 *) Lower_word
minimal(qmf_boxed_formula) = (* 3 *) BOX COLON TOK_TRUE
minimal(qmf_binary_formula) = (* 1 *) TOK_TRUE
minimal(qmf_atomic_formula) = (* 1 *) TOK_TRUE
minimal(qmf_assoc_binary) = (* 1 *) TOK_TRUE
minimal(qmf_args) = (* 1 *) Lower_word
minimal(qmf_annotated) = (* 9 *) QMF LPAREN Lower_word COMMA Lower_word COMMA TOK_TRUE RPAREN PERIOD
minimal(qmf_and_formula) = (* 3 *) TOK_TRUE AMPERSAND TOK_TRUE
minimal(poly_type_variable) = (* 1 *) Upper_word
minimal(optional_info) = (* 0 *) 
minimal(number) = (* 1 *) Unsigned_integer
minimal(null) = (* 0 *) 
minimal(name) = (* 1 *) Lower_word
minimal(map_arrow) = (* 1 *) MAP_TO
minimal(lambda_symbol) = (* 1 *) LAMBDA
minimal(input) = (* 0 *) 
minimal(hof_annotated) = (* 9 *) HOF LPAREN Lower_word COMMA Lower_word COMMA Upper_word RPAREN PERIOD
minimal(general_terms) = (* 1 *) Lower_word
minimal(general_term) = (* 1 *) Lower_word
minimal(general_list) = (* 2 *) LBRKT RBRKT
minimal(general_data) = (* 1 *) Lower_word
minimal(formula_role) = (* 1 *) Lower_word
minimal(formula_data) = (* 4 *) DTHF LPAREN Upper_word RPAREN
minimal(fof_variable_decls) = (* 1 *) Upper_word
minimal(fof_variable_decl) = (* 1 *) Upper_word
minimal(fof_variable) = (* 1 *) Upper_word
minimal(fof_unitary_formula) = (* 1 *) TOK_TRUE
minimal(fof_unary_formula) = (* 2 *) TILDE TOK_TRUE
minimal(fof_unary_connective) = (* 1 *) TILDE
minimal(fof_top) = (* 1 *) TOK_TRUE
minimal(fof_term) = (* 1 *) Lower_word
minimal(fof_quantified_formula) = (* 6 *) EXCLAMATION LBRKT Upper_word RBRKT COLON TOK_TRUE
minimal(fof_prop_const) = (* 1 *) TOK_TRUE
minimal(fof_pred) = (* 1 *) Lower_word
minimal(fof_or_formula) = (* 1 *) TOK_TRUE
minimal(fof_nonassoc_binary) = (* 3 *) TOK_TRUE IFF TOK_TRUE
minimal(fof_infix_pred) = (* 1 *) EQUALS
minimal(fof_formula) = (* 1 *) TOK_TRUE
minimal(fof_constant) = (* 1 *) Lower_word
minimal(fof_binary_formula) = (* 1 *) TOK_TRUE
minimal(fof_binary_connective) = (* 1 *) IFF
minimal(fof_atomic_formula) = (* 1 *) TOK_TRUE
minimal(fof_assoc_binary) = (* 1 *) TOK_TRUE
minimal(fof_args) = (* 1 *) Lower_word
minimal(fof_annotated) = (* 9 *) FOF LPAREN Lower_word COMMA Lower_word COMMA TOK_TRUE RPAREN PERIOD
minimal(fof_and_formula) = (* 3 *) TOK_TRUE AMPERSAND TOK_TRUE
minimal(definition) = (* 3 *) TOK_TRUE GETS Upper_word
minimal(defined_element) = (* 1 *) TOK_TRUE
minimal(constant) = (* 1 *) TOK_TRUE
minimal(cnf_top) = (* 1 *) TOK_TRUE
minimal(cnf_literal) = (* 1 *) TOK_TRUE
minimal(cnf_formula) = (* 1 *) TOK_TRUE
minimal(cnf_annotated) = (* 9 *) CNF LPAREN Lower_word COMMA Lower_word COMMA TOK_TRUE RPAREN PERIOD
minimal(boxoperator) = (* 1 *) BOX
minimal(binary_connective) = (* 1 *) IFF
minimal(atomic_word) = (* 1 *) Lower_word
minimal(atomic_type) = (* 1 *) TOK_O
minimal(annotations) = (* 0 *) 
follow(variable_decls) = RBRKT
follow(variable_decl) = RBRKT COMMA
follow(variable) = VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA COLON AT_SIGN AMPERSAND
follow(useful_info) = RPAREN
follow(unary_connective) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(typed_constant) = RPAREN GETS COMMA
follow(type_variable_decls) = RBRKT
follow(type_variable_decl) = RBRKT COMMA
follow(type_variable) = RPAREN RBRKT MAP_TO GREATER GETS COMMA
follow(type_expr) = RPAREN RBRKT MAP_TO GREATER GETS COMMA
follow(thf_unitary_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_unary_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_quantified_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_pair_connective) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AMPERSAND
follow(thf_or_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_logic_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_binary_tuple) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_binary_pair) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_binary_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_atom) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_apply_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_and_formula) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(thf_abstraction) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(source) = RPAREN COMMA
follow(quantifier_comb) = VLINE Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION NVLINE NIFF NEQUALS NAMPERSAND Lower_word LPAREN LAMBDA IMPLIES IFF IF EXCLAMATION EQUALS DOUBLEQUESTION DOUBLEEXCLAMATION CARET AT_SIGN AMPERSAND
follow(quantifier) = LBRKT
follow(qmf_variable_decls) = RBRKT
follow(qmf_variable_decl) = RBRKT COMMA
follow(qmf_variable) = VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND
follow(qmf_unitary_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(qmf_unary_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(qmf_unary_connective) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
follow(qmf_top) = RPAREN COMMA
follow(qmf_term) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND
follow(qmf_quantified_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(qmf_prop_const) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(qmf_pred) = LPAREN
follow(qmf_or_formula) = VLINE RPAREN COMMA
follow(qmf_nonassoc_binary) = RPAREN COMMA
follow(qmf_infix_pred) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word
follow(qmf_formula) = RPAREN COMMA
follow(qmf_constant) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND
follow(qmf_boxed_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(qmf_binary_formula) = RPAREN COMMA
follow(qmf_atomic_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(qmf_assoc_binary) = RPAREN COMMA
follow(qmf_args) = RPAREN
follow(qmf_annotated) = QMF HOF FOF CNF #
follow(qmf_and_formula) = RPAREN COMMA AMPERSAND
follow(poly_type_variable) = RPAREN RBRKT MAP_TO GREATER GETS COMMA
follow(optional_info) = RPAREN
follow(number) = VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA COLON AT_SIGN AMPERSAND
follow(null) = RPAREN QMF HOF FOF CNF #
follow(name) = COMMA
follow(map_arrow) = Upper_word TOK_TYPE TOK_REAL TOK_O TOK_INT TOK_I Lower_word LPAREN
follow(lambda_symbol) = LBRKT
follow(input) = QMF HOF FOF CNF #
follow(hof_annotated) = QMF HOF FOF CNF #
follow(general_terms) = RPAREN RBRKT
follow(general_term) = RPAREN RBRKT COMMA
follow(general_list) = RPAREN RBRKT COMMA
follow(general_data) = RPAREN RBRKT COMMA COLON
follow(formula_role) = COMMA
follow(formula_data) = RPAREN RBRKT COMMA COLON
follow(fof_variable_decls) = RBRKT
follow(fof_variable_decl) = RBRKT COMMA
follow(fof_variable) = VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND
follow(fof_unitary_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(fof_unary_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(fof_unary_connective) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION
follow(fof_top) = RPAREN COMMA
follow(fof_term) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND
follow(fof_quantified_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(fof_prop_const) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(fof_pred) = LPAREN
follow(fof_or_formula) = VLINE RPAREN COMMA
follow(fof_nonassoc_binary) = RPAREN COMMA
follow(fof_infix_pred) = Upper_word Unsigned_integer Single_quoted Signed_integer Real Lower_word
follow(fof_formula) = RPAREN COMMA
follow(fof_constant) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AMPERSAND
follow(fof_binary_formula) = RPAREN COMMA
follow(fof_binary_connective) = Upper_word Unsigned_integer TOK_TRUE TOK_FALSE TILDE Single_quoted Signed_integer Real QUESTION Lower_word LPAREN EXCLAMATION DIAMOND BOX
follow(fof_atomic_formula) = VLINE RPAREN NVLINE NIFF NAMPERSAND IMPLIES IFF IF COMMA AMPERSAND
follow(fof_assoc_binary) = RPAREN COMMA
follow(fof_args) = RPAREN
follow(fof_annotated) = QMF HOF FOF CNF #
follow(fof_and_formula) = RPAREN COMMA AMPERSAND
follow(definition) = RPAREN COMMA
follow(defined_element) = GETS
follow(constant) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF GETS EQUALS COMMA COLON AT_SIGN AMPERSAND
follow(cnf_top) = RPAREN COMMA
follow(cnf_literal) = VLINE RPAREN COMMA
follow(cnf_formula) = RPAREN COMMA
follow(cnf_annotated) = QMF HOF FOF CNF #
follow(boxoperator) = COLON
follow(binary_connective) = VLINE RPAREN NVLINE NIFF NEQUALS NAMPERSAND IMPLIES IFF IF EQUALS COMMA AT_SIGN AMPERSAND
follow(atomic_word) = VLINE RPAREN RBRKT NVLINE NIFF NEQUALS NAMPERSAND LPAREN IMPLIES IFF IF GETS EQUALS COMMA COLON AT_SIGN AMPERSAND
follow(atomic_type) = RPAREN RBRKT MAP_TO GREATER GETS COMMA
follow(annotations) = RPAREN
Built an LR(0) automaton with 385 states.
The grammar is not SLR(1) -- 15 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 385 states.
File "htparser.mly", line 148, characters 0-5:
Warning: the precedence level assigned to AMPERSAND is never useful.
File "htparser.mly", line 149, characters 0-5:
Warning: the precedence level assigned to AT_SIGN is never useful.
File "htparser.mly", line 152, characters 0-9:
Warning: the precedence level assigned to CARET is never useful.
File "htparser.mly", line 151, characters 0-6:
Warning: the precedence level assigned to DOUBLEEXCLAMATION is never useful.
File "htparser.mly", line 151, characters 0-6:
Warning: the precedence level assigned to DOUBLEQUESTION is never useful.
File "htparser.mly", line 146, characters 0-9:
Warning: the precedence level assigned to EQUALS is never useful.
File "htparser.mly", line 152, characters 0-9:
Warning: the precedence level assigned to EXCLAMATION is never useful.
File "htparser.mly", line 145, characters 0-6:
Warning: the precedence level assigned to IF is never useful.
File "htparser.mly", line 144, characters 0-9:
Warning: the precedence level assigned to IFF is never useful.
File "htparser.mly", line 145, characters 0-6:
Warning: the precedence level assigned to IMPLIES is never useful.
File "htparser.mly", line 152, characters 0-9:
Warning: the precedence level assigned to LAMBDA is never useful.
File "htparser.mly", line 148, characters 0-5:
Warning: the precedence level assigned to NAMPERSAND is never useful.
File "htparser.mly", line 146, characters 0-9:
Warning: the precedence level assigned to NEQUALS is never useful.
File "htparser.mly", line 144, characters 0-9:
Warning: the precedence level assigned to NIFF is never useful.
File "htparser.mly", line 147, characters 0-6:
Warning: the precedence level assigned to NVLINE is never useful.
File "htparser.mly", line 152, characters 0-9:
Warning: the precedence level assigned to QUESTION is never useful.
File "htparser.mly", line 150, characters 0-9:
Warning: the precedence level assigned to TILDE is never useful.
File "htparser.mly", line 147, characters 0-6:
Warning: the precedence level assigned to VLINE is never useful.
Warning: 5 states have shift/reduce conflicts.
Warning: 5 states have reduce/reduce conflicts.
Warning: 16 shift/reduce conflicts were arbitrarily resolved.
Warning: 25 reduce/reduce conflicts were arbitrarily resolved.
Warning: 14 end-of-stream conflicts were arbitrarily resolved.
File "htparser.mly", line 163, characters 0-5:
Warning: symbol input is never accepted.
File "htparser.mly", line 759, characters 4-14:
Warning: production poly_type_variable -> Upper_word is never reduced.
File "htparser.mly", line 665, characters 4-37:
Warning: production unary_connective -> quantifier_comb thf_logic_formula is never reduced.
Warning: in total, 3 productions are never reduced.
187 out of 385 states have a default reduction.
92 out of 385 states are represented.
0 out of 163 symbols keep track of their start position.
0 out of 163 symbols keep track of their end position.
136 out of 226 productions exploit shiftreduce optimization.
0 out of 385 states can peek at an error.
1098 functions before inlining, 146 functions after inlining.
