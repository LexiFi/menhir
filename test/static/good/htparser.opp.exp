File "htparser.mly", line 134, characters 16-34:
Warning: the token Atomic_system_word is unused.
File "htparser.mly", line 132, characters 16-28:
Warning: the token Decimal_part is unused.
File "htparser.mly", line 123, characters 7-10:
Warning: the token EOF is unused.
File "htparser.mly", line 94, characters 7-18:
Warning: the token INCLUDE_TOK is unused.
File "htparser.mly", line 95, characters 7-19:
Warning: the token INPUT_CLAUSE is unused.
File "htparser.mly", line 96, characters 7-20:
Warning: the token INPUT_FORMULA is unused.
File "htparser.mly", line 101, characters 7-13:
Warning: the token MMINUS is unused.
File "htparser.mly", line 107, characters 7-12:
Warning: the token PPLUS is unused.
File "htparser.mly", line 140, characters 7-19:
Warning: the token Unrecognized is unused.
File "htparser.mly", line 704, characters 0-10:
Warning: symbol apply_term is unreachable from any of the start symbol(s).
File "htparser.mly", line 259, characters 0-11:
Warning: symbol hof_formula is unreachable from any of the start symbol(s).
File "htparser.mly", line 708, characters 0-11:
Warning: symbol lambda_term is unreachable from any of the start symbol(s).
File "htparser.mly", line 690, characters 0-15:
Warning: symbol quantified_term is unreachable from any of the start symbol(s).
File "htparser.mly", line 649, characters 0-4:
Warning: symbol term is unreachable from any of the start symbol(s).
%{

open Hol_type
open Term
open Signature
open Lexing

let print_error startpos endpos msg =
  if startpos.pos_lnum = endpos.pos_lnum then
    Printf.printf "line %d, characters %d-%d: %s\n"
      startpos.pos_lnum (startpos.pos_cnum - startpos.pos_bol)
      (endpos.pos_cnum - endpos.pos_bol)
      msg
  else
    Printf.printf "line %d, character %d - line %d, character %d: %s\n"
      startpos.pos_lnum (startpos.pos_cnum - startpos.pos_bol)
      endpos.pos_lnum (endpos.pos_cnum - endpos.pos_bol)
      msg

let terms = ref []
let sigma = ref (new_signature ())
let bound_typevars = ref (Hashtbl.create 17)
let typevar_counter = ref 0
let termroles = ref (Hashtbl.create 3)
let add_fun = ref (fun _ _ -> ())

let reset () = let t= !terms in
               let s= !sigma in
               let r= !termroles in
               terms := [];
               sigma := new_signature ();
               termroles := (Hashtbl.create 3);
               (t,s,r)

let reset_bound_typevars () =
  bound_typevars := Hashtbl.create 17;
  typevar_counter := 0

let add_typevar s =
  Hashtbl.add !bound_typevars s (!typevar_counter);
  typevar_counter := !typevar_counter + 1

let add_term t =
  terms := t :: !terms;
  add_fun := fun n r -> Hashtbl.add !termroles r (n,t)

let add_def (s,t) =
  try (
    let ty = Term.type_of (type_of_symbol !sigma) t in
    add_defined_symbol ~ty:(Some ty) !sigma s t
  ) with Failure msg ->
    begin
      print_string ("\nin definition "^s^":\n"^msg^"\n\n");
      add_defined_symbol !sigma s t
    end;
  add_fun := fun n r -> Hashtbl.add !termroles r (s,t)

let add_const_strict (c,ty) =
  add_uninterpreted_symbol !sigma c ty;
  add_fun := fun n r -> Hashtbl.add !termroles r (c, Symbol c)

let add_const (c,ty) =
  if ty = Signature.bt_type then
    Signature.add_basetype !sigma c
  else
  try (
    let ty2 = type_of_symbol !sigma c in
    (* print_string ("Symbol "^c^": ."^(Hol_type.to_string ty2)^"., ."^(Hol_type.to_string ty)^".\n"); *)
    if not (ty2 = ty)
    then failwith ("add_const: type mismatch for symbol "^c^" and types "^
                   (Hol_type.to_string ty2)^" and "^(Hol_type.to_string ty2))
  ) with Failure _ -> add_const_strict (c,ty)

%}
%start input
%token AMPERSAND
%token AT_SIGN
%token <string> Atomic_system_word
%token BOX
%token CARET
%token CNF
%token COLON
%token COMMA
%token DCNF
%token DFOF
%token DFOT
%token DIAMOND
%token DOUBLEEXCLAMATION
%token DOUBLEQUESTION
%token DTHF
%token <string> Decimal_part
%token <string> Distinct_object
%token EOF
%token EQUALS
%token EXCLAMATION
%token FOF
%token GETS
%token GREATER
%token HOF
%token IF
%token IFF
%token IMPLIES
%token INCLUDE_TOK
%token INPUT_CLAUSE
%token INPUT_FORMULA
%token LAMBDA
%token LBRKT
%token LPAREN
%token <string> Lower_word
%token MAP_TO
%token MMINUS
%token NAMPERSAND
%token NEQUALS
%token NIFF
%token NVLINE
%token PERIOD
%token PPLUS
%token QMF
%token QUESTION
%token RBRKT
%token RPAREN
%token <string> Real
%token <string> Signed_integer
%token <string> Single_quoted
%token TILDE
%token TOK_FALSE
%token TOK_I
%token TOK_INT
%token TOK_O
%token TOK_REAL
%token TOK_TRUE
%token TOK_TYPE
%token Unrecognized
%token <string> Unsigned_integer
%token <string> Upper_word
%token VLINE
%nonassoc IFF NIFF
%right IF IMPLIES
%nonassoc EQUALS NEQUALS
%right NVLINE VLINE
%left AMPERSAND NAMPERSAND
%left AT_SIGN
%nonassoc TILDE
%right DOUBLEEXCLAMATION DOUBLEQUESTION
%nonassoc CARET EXCLAMATION LAMBDA QUESTION
%type <Term.term list * Signature.signature * (string , string * Term.term) Hashtbl.t> input
%%

input:
  _1 = null
    {         ( reset () )}
| _1 = input _2 = hof_annotated
    {                        ( (!terms,!sigma,!termroles) )}
| _1 = input _2 = fof_annotated
    {                        ( (!terms,!sigma,!termroles) )}
| _1 = input _2 = cnf_annotated
    {                        ( (!terms,!sigma,!termroles) )}
| _1 = input _2 = qmf_annotated
    {                        ( (!terms,!sigma,!termroles) )}
| _1 = error
    {          ( let startpos = Parsing.rhs_start_pos 1 in
            let endpos = Parsing.rhs_end_pos 1
            in
              print_error startpos endpos "syntax error";
              raise PARSER )}

fof_annotated:
  _1 = FOF _2 = LPAREN _3 = name _4 = COMMA _5 = formula_role _6 = COMMA _7 = fof_top _8 = annotations _9 = RPAREN _10 = PERIOD
    {                                                                               (State.set_input_logic "FOF"; !add_fun _3 _5)}

qmf_annotated:
  _1 = QMF _2 = LPAREN _3 = name _4 = COMMA _5 = formula_role _6 = COMMA _7 = qmf_top _8 = annotations _9 = RPAREN _10 = PERIOD
    {                                                                               (State.set_input_logic "QMF"; !add_fun _3 _5)}

cnf_annotated:
  _1 = CNF _2 = LPAREN _3 = name _4 = COMMA _5 = formula_role _6 = COMMA _7 = cnf_top _8 = annotations _9 = RPAREN _10 = PERIOD
    {                                                                               (State.set_input_logic "CNF"; !add_fun _3 _5)}

formula_role:
  _1 = atomic_word
    {              ( _1 )}

annotations:
  _1 = COMMA _2 = source _3 = optional_info
    {                               ()}
| _1 = null
    {         ()}

source:
  _1 = general_term
    {                 ()}

general_term:
  _1 = general_data
    {                 ()}
| _1 = general_data _2 = COLON _3 = general_term
    {                                    ()}
| _1 = general_list
    {                 ()}

general_data:
  _1 = atomic_word
    {                ()}
| _1 = atomic_word _2 = LPAREN _3 = general_terms _4 = RPAREN
    {                                            ()}
| _1 = variable
    {             ()}
| _1 = number
    {           ()}
| _1 = Distinct_object
    {                    ()}
| _1 = formula_data
    {                 ()}

formula_data:
  _1 = DTHF _2 = LPAREN _3 = thf_logic_formula _4 = RPAREN
    {                                         ()}
| _1 = DFOF _2 = LPAREN _3 = fof_formula _4 = RPAREN
    {                                   ()}
| _1 = DCNF _2 = LPAREN _3 = cnf_formula _4 = RPAREN
    {                                   ()}
| _1 = DFOT _2 = LPAREN _3 = fof_term _4 = RPAREN
    {                                ()}

general_list:
  _1 = LBRKT _2 = RBRKT
    {                ()}
| _1 = LBRKT _2 = general_terms _3 = RBRKT
    {                              ()}

general_terms:
  _1 = general_term
    {                 ()}
| _1 = general_term _2 = COMMA _3 = general_terms
    {                                     ()}

optional_info:
  _1 = COMMA _2 = useful_info
    {                      ()}
| _1 = null
    {         ()}

useful_info:
  _1 = general_list
    {                 ()}

hof_annotated:
  _1 = HOF _2 = LPAREN _3 = name _4 = COMMA _5 = formula_role _6 = COMMA _7 = typed_constant _8 = annotations _9 = RPAREN _10 = PERIOD
    {                                                                                      (State.set_input_logic "THF"; add_const _7; !add_fun _3 _5)}
| _1 = HOF _2 = LPAREN _3 = name _4 = COMMA _5 = formula_role _6 = COMMA _7 = definition _8 = annotations _9 = RPAREN _10 = PERIOD
    {                                                                                  (State.set_input_logic "THF"; add_def _7; reset_bound_typevars(); !add_fun _3 _5)}
| _1 = HOF _2 = LPAREN _3 = name _4 = COMMA _5 = formula_role _6 = COMMA _7 = thf_logic_formula _8 = annotations _9 = RPAREN _10 = PERIOD
    {                                                                                         (State.set_input_logic "THF";
            match (_5,_7) with
              ("definition",(Appl (Appl (Symbol "=", Symbol definiendum), definiens))) -> (add_def (definiendum,definiens);
                                                                                           reset_bound_typevars();
                                                                                           !add_fun _3 _5)
            | _ -> (add_term _7; reset_bound_typevars();!add_fun _3 _5))}

definition:
  _1 = defined_element _2 = GETS _3 = thf_logic_formula
    {                                           ( (_1,_3) )}
| _1 = LPAREN _2 = defined_element _3 = GETS _4 = thf_logic_formula _5 = RPAREN
    {                                                        ( (_2,_4) )}

defined_element:
  _1 = constant
    {             ( _1 )}
| _1 = typed_constant
    {                   ( fst _1 )}

typed_constant:
  _1 = LPAREN _2 = constant _3 = COLON _4 = type_expr _5 = RPAREN
    {                                           ( (_2,_4) )}
| _1 = constant _2 = COLON _3 = type_expr
    {                             ( (_1,_3) )}

constant:
  _1 = TOK_TRUE
    {             ( Signature.ctrue )}
| _1 = TOK_FALSE
    {              ( Signature.cfalse )}
| _1 = atomic_word
    {                ( _1 )}

fof_top:
  _1 = fof_formula
    {                ((* print_string ("Read: "^(Term.to_hotptp $1)^"\n\n"); *)
      add_term (multi_quantified (Symbol Signature.forall) (List.map (fun x -> (x,bt_i)) (free_vars _1)) _1);
      reset_bound_typevars() )}

qmf_top:
  _1 = qmf_formula
    {                ((* print_string ("Read: "^(Term.to_hotptp $1)^"\n\n"); *)
      add_term (multi_quantified (Symbol Signature.forall) (List.map (fun x -> (x,bt_i)) (free_vars _1)) _1);
      reset_bound_typevars() )}

cnf_top:
  _1 = cnf_formula
    {                (
      add_term (multi_quantified (Symbol Signature.forall) (List.map (fun x -> (x,bt_i)) (free_vars _1)) _1);
      reset_bound_typevars() )}

cnf_formula:
  _1 = cnf_literal
    {                ( _1 )}
| _1 = cnf_literal _2 = VLINE _3 = cnf_formula
    {                                  ( Appl(Appl(Symbol(Signature.disjunction),_1),_3) )}
| _1 = LPAREN _2 = cnf_formula _3 = RPAREN
    {                              ( _2 )}

cnf_literal:
  _1 = fof_atomic_formula
    {                       ( _1 )}
| _1 = TILDE _2 = fof_atomic_formula
    {                             ( Appl(Symbol(Signature.neg),_2) )}

fof_formula:
  _1 = fof_unitary_formula
    {                        ( _1 )}
| _1 = fof_binary_formula
    {                       ( _1 )}

fof_binary_formula:
  _1 = fof_nonassoc_binary
    {                        ( _1 )}
| _1 = fof_assoc_binary
    {                     ( _1 )}

fof_nonassoc_binary:
  _1 = fof_unitary_formula _2 = fof_binary_connective _3 = fof_unitary_formula
    {                                                                  ( Appl(Appl(_2,_1),_3) )}

fof_assoc_binary:
  _1 = fof_and_formula
    {                    ( _1 )}
| _1 = fof_or_formula
    {                   ( _1 )}

fof_and_formula:
  _1 = fof_unitary_formula _2 = AMPERSAND _3 = fof_unitary_formula
    {                                                     ( Appl(Appl(Symbol(Signature.conjunction),_1),_3) )}
| _1 = fof_and_formula _2 = AMPERSAND _3 = fof_unitary_formula
    {                                                  ( Appl(Appl(Symbol(Signature.conjunction),_1),_3) )}

fof_or_formula:
  _1 = fof_or_formula _2 = VLINE _3 = fof_unitary_formula
    {                                             ( Appl(Appl(Symbol(Signature.disjunction),_1),_3) )}
| _1 = fof_unitary_formula
    {                        ( _1 )}

fof_unitary_formula:
  _1 = fof_quantified_formula
    {                           ( _1 )}
| _1 = fof_unary_formula
    {                      ( _1 )}
| _1 = fof_atomic_formula
    {                       ( _1 )}
| _1 = LPAREN _2 = fof_formula _3 = RPAREN
    {                              ( _2 )}

fof_quantified_formula:
  _1 = quantifier _2 = LBRKT _3 = fof_variable_decls _4 = RBRKT _5 = COLON _6 = fof_unitary_formula
    {                                                                        ( multi_quantified _1 _3 _6 )}

fof_variable_decls:
  _1 = fof_variable_decl
    {                      ( [_1] )}
| _1 = fof_variable_decl _2 = COMMA _3 = fof_variable_decls
    {                                               ( _1::_3 )}

fof_variable_decl:
  _1 = fof_variable
    {                 ( (_1,bt_i) )}

fof_unary_formula:
  _1 = fof_unary_connective _2 = fof_unitary_formula
    {                                             ( Appl(_1,_2) )}

fof_unary_connective:
  _1 = TILDE
    {          ( Symbol(Signature.neg) )}

fof_atomic_formula:
  _1 = fof_prop_const
    {                   ( Symbol _1 )}
| _1 = fof_term _2 = fof_infix_pred _3 = fof_term
    {                                     ( Appl(Appl(_2,_1),_3) )}
| _1 = fof_pred _2 = LPAREN _3 = fof_args _4 = RPAREN
    {                                    ( (* print_string ("fof_pred "^(Term.to_hotptp $1)^" with args ");
                                      List.map (fun a -> print_string ((Term.to_hotptp a)^", ")) $3;
                                      print_string "\n"; *)
      add_const (get_symbol _1, mk_funtype (List.map (fun _ -> bt_i) _3) bt_o);
      List.fold_left (fun acc arg -> Appl(acc,arg)) _1 _3 )}

fof_prop_const:
  _1 = TOK_TRUE
    {             ( Signature.ctrue )}
| _1 = TOK_FALSE
    {              ( Signature.cfalse )}
| _1 = atomic_word
    {                ( add_const (_1,bt_o); _1 )}

fof_infix_pred:
  _1 = EQUALS
    {           ( Symbol(Signature.equality) )}
| _1 = NEQUALS
    {            ( Symbol(Signature.nequals) )}

fof_args:
  _1 = fof_term
    {             ( [_1] )}
| _1 = fof_term _2 = COMMA _3 = fof_args
    {                            ( _1::_3 )}

fof_term:
  _1 = fof_constant
    {                 ( _1 )}
| _1 = fof_variable
    {                 ( Symbol _1 )}
| _1 = fof_pred _2 = LPAREN _3 = fof_args _4 = RPAREN
    {                                    (
      add_const (get_symbol _1, mk_funtype (List.map (fun _ -> bt_i) _3) bt_i);
      List.fold_left (fun acc arg -> Appl(acc,arg)) _1 _3 )}

fof_constant:
  _1 = atomic_word
    {                ( (* print_string ("There's a constant of type $i: "^$1^"\n"); *) add_const (_1, bt_i);
      Symbol _1 )}
| _1 = number
    {           ( Symbol _1 )}

fof_variable:
  _1 = variable
    {             ( _1 )}

fof_pred:
  _1 = atomic_word
    {                ( Symbol _1 )}

qmf_formula:
  _1 = qmf_unitary_formula
    {                        ( _1 )}
| _1 = qmf_binary_formula
    {                       ( _1 )}

qmf_binary_formula:
  _1 = qmf_nonassoc_binary
    {                        ( _1 )}
| _1 = qmf_assoc_binary
    {                     ( _1 )}

qmf_nonassoc_binary:
  _1 = qmf_unitary_formula _2 = fof_binary_connective _3 = qmf_unitary_formula
    {                                                                  ( Appl(Appl(_2,_1),_3) )}

qmf_assoc_binary:
  _1 = qmf_and_formula
    {                    ( _1 )}
| _1 = qmf_or_formula
    {                   ( _1 )}

qmf_and_formula:
  _1 = qmf_unitary_formula _2 = AMPERSAND _3 = qmf_unitary_formula
    {                                                     ( Appl(Appl(Symbol(Signature.conjunction),_1),_3) )}
| _1 = qmf_and_formula _2 = AMPERSAND _3 = qmf_unitary_formula
    {                                                  ( Appl(Appl(Symbol(Signature.conjunction),_1),_3) )}

qmf_or_formula:
  _1 = qmf_or_formula _2 = VLINE _3 = qmf_unitary_formula
    {                                             ( Appl(Appl(Symbol(Signature.disjunction),_1),_3) )}
| _1 = qmf_unitary_formula
    {                        ( _1 )}

qmf_unitary_formula:
  _1 = qmf_quantified_formula
    {                           ( _1 )}
| _1 = qmf_unary_formula
    {                      ( _1 )}
| _1 = qmf_atomic_formula
    {                       ( _1 )}
| _1 = qmf_boxed_formula
    {                      ( _1 )}
| _1 = LPAREN _2 = qmf_formula _3 = RPAREN
    {                              ( _2 )}

qmf_boxed_formula:
  _1 = boxoperator _2 = COLON _3 = qmf_unitary_formula
    {                                          ( Appl(_1,_3) )}

qmf_quantified_formula:
  _1 = quantifier _2 = LBRKT _3 = qmf_variable_decls _4 = RBRKT _5 = COLON _6 = qmf_unitary_formula
    {                                                                        ( multi_quantified _1 _3 _6 )}

qmf_variable_decls:
  _1 = qmf_variable_decl
    {                      ( [_1] )}
| _1 = qmf_variable_decl _2 = COMMA _3 = qmf_variable_decls
    {                                               ( _1::_3 )}

qmf_variable_decl:
  _1 = qmf_variable
    {                 ( (_1,bt_i) )}

qmf_unary_formula:
  _1 = qmf_unary_connective _2 = qmf_unitary_formula
    {                                             ( Appl(_1,_2) )}

qmf_unary_connective:
  _1 = TILDE
    {          ( Symbol(Signature.neg) )}

qmf_atomic_formula:
  _1 = qmf_prop_const
    {                   ( Symbol _1 )}
| _1 = qmf_term _2 = qmf_infix_pred _3 = qmf_term
    {                                     ( Appl(Appl(_2,_1),_3) )}
| _1 = qmf_pred _2 = LPAREN _3 = qmf_args _4 = RPAREN
    {                                    ( (* print_string ("qmf_pred "^(Term.to_hotptp $1)^" with args ");
                                      List.map (fun a -> print_string ((Term.to_hotptp a)^", ")) $3;
                                      print_string "\n"; *)
      add_const (get_symbol _1, mk_funtype (List.map (fun _ -> bt_i) _3) bt_o);
      List.fold_left (fun acc arg -> Appl(acc,arg)) _1 _3 )}

qmf_prop_const:
  _1 = TOK_TRUE
    {             ( Signature.ctrue )}
| _1 = TOK_FALSE
    {              ( Signature.cfalse )}
| _1 = atomic_word
    {                ( add_const (_1,bt_o); _1 )}

qmf_infix_pred:
  _1 = EQUALS
    {           ( Symbol(Signature.equality) )}
| _1 = NEQUALS
    {            ( Symbol(Signature.nequals) )}

qmf_args:
  _1 = qmf_term
    {             ( [_1] )}
| _1 = qmf_term _2 = COMMA _3 = qmf_args
    {                            ( _1::_3 )}

qmf_term:
  _1 = qmf_constant
    {                 ( _1 )}
| _1 = qmf_variable
    {                 ( Symbol _1 )}
| _1 = qmf_pred _2 = LPAREN _3 = qmf_args _4 = RPAREN
    {                                    (
      add_const (get_symbol _1, mk_funtype (List.map (fun _ -> bt_i) _3) bt_i);
      List.fold_left (fun acc arg -> Appl(acc,arg)) _1 _3 )}

qmf_constant:
  _1 = atomic_word
    {                ( (* print_string ("There's a constant of type $i: "^$1^"\n"); *) add_const (_1, bt_i);
      Symbol _1 )}
| _1 = number
    {           ( Symbol _1 )}

qmf_variable:
  _1 = variable
    {             ( _1 )}

qmf_pred:
  _1 = atomic_word
    {                ( Symbol _1 )}

thf_logic_formula:
  _1 = thf_binary_formula
    {                       ( _1 )}
| _1 = thf_unitary_formula
    {                        ( _1 )}

thf_binary_formula:
  _1 = thf_binary_pair
    {                    ( _1 )}
| _1 = thf_binary_tuple
    {                     ( _1 )}

thf_binary_pair:
  _1 = thf_unitary_formula _2 = thf_pair_connective _3 = thf_unitary_formula
    {                                                                ( Appl(Appl(_2,_1),_3) )}

thf_pair_connective:
  _1 = IFF
    {        ( Symbol(Signature.iff) )}
| _1 = NIFF
    {         ( Symbol(Signature.negated_iff) )}
| _1 = IMPLIES
    {            ( Symbol(Signature.implies) )}
| _1 = IF
    {       ( Symbol(Signature.i_f) )}
| _1 = NVLINE
    {           ( Symbol(Signature.negated_disjunction) )}
| _1 = NAMPERSAND
    {               ( Symbol(Signature.negated_conjunction) )}
| _1 = EQUALS
    {           ( Symbol(Signature.equality) )}
| _1 = NEQUALS
    {            ( Symbol(Signature.nequals) )}

thf_binary_tuple:
  _1 = thf_or_formula
    {                   ( _1 )}
| _1 = thf_and_formula
    {                    ( _1 )}
| _1 = thf_apply_formula
    {                      ( _1 )}

thf_or_formula:
  _1 = thf_unitary_formula _2 = VLINE _3 = thf_unitary_formula
    {                                                  ( Appl(Appl(Symbol(Signature.disjunction),_1),_3) )}
| _1 = thf_or_formula _2 = VLINE _3 = thf_unitary_formula
    {                                             ( Appl(Appl(Symbol(Signature.disjunction),_1),_3) )}

thf_and_formula:
  _1 = thf_unitary_formula _2 = AMPERSAND _3 = thf_unitary_formula
    {                                                      ( Appl(Appl(Symbol(Signature.conjunction),_1),_3) )}
| _1 = thf_and_formula _2 = AMPERSAND _3 = thf_unitary_formula
    {                                                  ( Appl(Appl(Symbol(Signature.conjunction),_1),_3) )}

thf_apply_formula:
  _1 = thf_unitary_formula _2 = AT_SIGN _3 = thf_unitary_formula
    {                                                    ( Appl(_1,_3) )}
| _1 = thf_apply_formula _2 = AT_SIGN _3 = thf_unitary_formula
    {                                                  ( Appl(_1,_3) )}

thf_unitary_formula:
  _1 = thf_quantified_formula
    {                           ( _1 )}
| _1 = thf_abstraction
    {                    ( _1 )}
| _1 = thf_unary_formula
    {                      ( _1 )}
| _1 = thf_atom
    {             ( _1 )}
| _1 = LPAREN _2 = thf_logic_formula _3 = RPAREN
    {                                    ( _2 )}

thf_quantified_formula:
  _1 = quantifier _2 = LBRKT _3 = variable_decls _4 = RBRKT _5 = COLON _6 = thf_unitary_formula
    {                                                                    ( multi_quantified _1 _3 _6 )}

thf_abstraction:
  _1 = lambda_symbol _2 = LBRKT _3 = variable_decls _4 = RBRKT _5 = COLON _6 = thf_unitary_formula
    {                                                                       ( multi_abstr _3 _6 )}
| _1 = lambda_symbol _2 = LBRKT _3 = type_variable_decls _4 = RBRKT _5 = COLON _6 = thf_unitary_formula
    {                                                                            ( _6 )}

thf_unary_formula:
  _1 = TILDE _2 = LPAREN _3 = thf_logic_formula _4 = RPAREN
    {                                          ( Appl(Symbol(Signature.neg),_3) )}
| _1 = quantifier_comb _2 = thf_logic_formula
    {                                      ( Appl(_1, _2) )}
| _1 = quantifier_comb _2 = AT_SIGN _3 = thf_logic_formula
    {                                              ( Appl(_1, _3) )}

quantifier_comb:
  _1 = DOUBLEEXCLAMATION
    {                      ( Symbol(Signature.forall_comb) )}
| _1 = DOUBLEQUESTION
    {                   ( Symbol(Signature.exists_comb) )}

thf_atom:
  _1 = variable
    {             ( Symbol _1 )}
| _1 = constant
    {             ( Symbol _1 )}
| _1 = number
    {           ( Symbol _1 )}
| _1 = binary_connective
    {                      ( _1 )}
| _1 = unary_connective
    {                     ( _1 )}

unary_connective:
  _1 = TILDE
    {          ( Symbol(Signature.neg) )}
| _1 = quantifier_comb _2 = thf_logic_formula
    {                                      ( Appl(_1, _2) )}

binary_connective:
  _1 = IFF
    {        ( Symbol(Signature.iff) )}
| _1 = NIFF
    {         ( Symbol(Signature.negated_iff) )}
| _1 = IMPLIES
    {            ( Symbol(Signature.implies) )}
| _1 = IF
    {       ( Symbol(Signature.i_f) )}
| _1 = VLINE
    {          ( Symbol(Signature.disjunction) )}
| _1 = NVLINE
    {           ( Symbol(Signature.negated_disjunction) )}
| _1 = AMPERSAND
    {              ( Symbol(Signature.conjunction) )}
| _1 = NAMPERSAND
    {               ( Symbol(Signature.negated_conjunction) )}
| _1 = EQUALS
    {           ( Symbol(Signature.equality) )}
| _1 = NEQUALS
    {            ( Symbol(Signature.nequals) )}

fof_binary_connective:
  _1 = IFF
    {        ( Symbol(Signature.iff) )}
| _1 = NIFF
    {         ( Symbol(Signature.negated_iff) )}
| _1 = IMPLIES
    {            ( Symbol(Signature.implies) )}
| _1 = IF
    {       ( Symbol(Signature.i_f) )}
| _1 = NVLINE
    {           ( Symbol(Signature.negated_disjunction) )}
| _1 = NAMPERSAND
    {               ( Symbol(Signature.negated_conjunction) )}

quantifier:
  _1 = EXCLAMATION
    {                ( Symbol(Signature.forall) )}
| _1 = QUESTION
    {             ( Symbol(Signature.exists) )}

boxoperator:
  _1 = BOX
    {        ( Symbol(Signature.box) )}
| _1 = DIAMOND
    {            ( Symbol(Signature.diamond) )}

lambda_symbol:
  _1 = LAMBDA
    {           ( )}
| _1 = CARET
    {          ( )}

variable_decls:
  _1 = variable_decl
    {                  ( [_1] )}
| _1 = variable_decl _2 = COMMA _3 = variable_decls
    {                                       ( _1::_3 )}

variable_decl:
  _1 = variable _2 = COLON _3 = type_expr
    {                             ( (_1,_3) )}

type_variable_decls:
  _1 = type_variable_decl
    {                       ( )}
| _1 = type_variable_decl _2 = COMMA _3 = type_variable_decls
    {                                                 ( )}

type_variable_decl:
  _1 = variable _2 = COLON _3 = TOK_TYPE
    {                            ( add_typevar _1 )}

type_expr:
  _1 = atomic_type
    {                ( _1 )}
| _1 = type_variable
    {                  ( if Hashtbl.mem !bound_typevars _1 then mk_polyvar (Hashtbl.find !bound_typevars _1) else basetype _1  )}
| _1 = poly_type_variable
    {                       ( basetype _1 )}
| _1 = type_expr _2 = map_arrow _3 = type_expr
    {                                  ( abstr_type _1 _3 )}
| _1 = LPAREN _2 = type_expr _3 = RPAREN
    {                            ( _2 )}

atomic_type:
  _1 = TOK_O
    {          ( bt_o )}
| _1 = TOK_I
    {          ( bt_i )}
| _1 = TOK_INT
    {            ( basetype "$int" )}
| _1 = TOK_REAL
    {             ( basetype "$real" )}
| _1 = TOK_TYPE
    {             ( bt_type )}
| _1 = Lower_word
    {               ( basetype _1 )}

type_variable:
  _1 = Upper_word
    {              ( _1 )}

poly_type_variable:
  _1 = Upper_word
    {               ( _1 )}

map_arrow:
  _1 = MAP_TO
    {           ( )}
| _1 = GREATER
    {             ( )}

name:
  _1 = atomic_word
    {                ( _1 )}
| _1 = Unsigned_integer
    {                     ( _1 )}

atomic_word:
  _1 = Lower_word
    {               ( _1 )}
| _1 = Single_quoted
    {                  ( _1 )}

variable:
  _1 = Upper_word
    {               ( _1 )}

number:
  _1 = Unsigned_integer
    {                     ( add_const (_1, basetype "$int");  _1 )}
| _1 = Signed_integer
    {                   ( add_const (_1, basetype "$int"); _1 )}
| _1 = Real
    {         ( add_const (_1, basetype "$real"); _1 )}

null:
  
    {       ()}

%%
