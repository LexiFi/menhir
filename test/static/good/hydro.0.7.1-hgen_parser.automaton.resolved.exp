State 0:
## Known stack suffix:
##
## LR(1) items:
start' -> . start [ # ]
## Transitions:
-- On LDBRACK shift to state 1
-- On LBRACK shift to state 9
-- On start shift to state 12
-- On meta_data_opt shift to state 13
-- On global_meta_data shift to state 17
-- On defs shift to state 155
-- On def shift to state 19
## Reductions:
-- On EOF
--   reduce production defs ->
-- On K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS
--   reduce production meta_data_opt ->

State 1:
## Known stack suffix:
## LDBRACK
## LR(1) items:
global_meta_data -> LDBRACK . string_list RDBRACK [ RBRACE LDBRACK LBRACK K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS EOF ]
## Transitions:
-- On STRING_LITERAL shift to state 2
-- On string_lit shift to state 4
-- On string_list shift to state 7
## Reductions:

State 2:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
string_lit -> STRING_LITERAL . string_lit [ RDBRACK RBRACK COMMA ]
string_lit -> STRING_LITERAL . [ RDBRACK RBRACK COMMA ]
## Transitions:
-- On STRING_LITERAL shift to state 2
-- On string_lit shift to state 3
## Reductions:
-- On RDBRACK RBRACK COMMA
--   reduce production string_lit -> STRING_LITERAL

State 3:
## Known stack suffix:
## STRING_LITERAL string_lit
## LR(1) items:
string_lit -> STRING_LITERAL string_lit . [ RDBRACK RBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_lit -> STRING_LITERAL string_lit

State 4:
## Known stack suffix:
## string_lit
## LR(1) items:
string_list -> string_lit . COMMA string_list [ RDBRACK RBRACK ]
string_list -> string_lit . [ RDBRACK RBRACK ]
## Transitions:
-- On COMMA shift to state 5
## Reductions:
-- On RDBRACK RBRACK
--   reduce production string_list -> string_lit

State 5:
## Known stack suffix:
## string_lit COMMA
## LR(1) items:
string_list -> string_lit COMMA . string_list [ RDBRACK RBRACK ]
## Transitions:
-- On STRING_LITERAL shift to state 2
-- On string_lit shift to state 4
-- On string_list shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## string_lit COMMA string_list
## LR(1) items:
string_list -> string_lit COMMA string_list . [ RDBRACK RBRACK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_list -> string_lit COMMA string_list

State 7:
## Known stack suffix:
## LDBRACK string_list
## LR(1) items:
global_meta_data -> LDBRACK string_list . RDBRACK [ RBRACE LDBRACK LBRACK K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS EOF ]
## Transitions:
-- On RDBRACK shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## LDBRACK string_list RDBRACK
## LR(1) items:
global_meta_data -> LDBRACK string_list RDBRACK . [ RBRACE LDBRACK LBRACK K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production global_meta_data -> LDBRACK string_list RDBRACK

State 9:
## Known stack suffix:
## LBRACK
## LR(1) items:
meta_data_opt -> LBRACK . string_list RBRACK [ K_VOID K_STRUCT K_STRING K_SHORT K_SEQUENCE K_MODULE K_LONG K_LOCAL K_INTERFACE K_INT K_IDEMPOTENT K_FLOAT K_EXCEPTION K_ENUM K_DOUBLE K_DICTIONARY K_CONST K_CLASS K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On STRING_LITERAL shift to state 2
-- On string_lit shift to state 4
-- On string_list shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LBRACK string_list
## LR(1) items:
meta_data_opt -> LBRACK string_list . RBRACK [ K_VOID K_STRUCT K_STRING K_SHORT K_SEQUENCE K_MODULE K_LONG K_LOCAL K_INTERFACE K_INT K_IDEMPOTENT K_FLOAT K_EXCEPTION K_ENUM K_DOUBLE K_DICTIONARY K_CONST K_CLASS K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On RBRACK shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## LBRACK string_list RBRACK
## LR(1) items:
meta_data_opt -> LBRACK string_list RBRACK . [ K_VOID K_STRUCT K_STRING K_SHORT K_SEQUENCE K_MODULE K_LONG K_LOCAL K_INTERFACE K_INT K_IDEMPOTENT K_FLOAT K_EXCEPTION K_ENUM K_DOUBLE K_DICTIONARY K_CONST K_CLASS K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meta_data_opt -> LBRACK string_list RBRACK

State 12:
## Known stack suffix:
## start
## LR(1) items:
start' -> start . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept start

State 13:
## Known stack suffix:
## meta_data_opt
## LR(1) items:
def -> meta_data_opt . K_MODULE IDENT LBRACE defs RBRACE [ SEMI ]
def -> meta_data_opt . local_flag K_CLASS IDENT class_def_opt [ SEMI ]
def -> meta_data_opt . local_flag K_INTERFACE IDENT intf_def_opt [ SEMI ]
def -> meta_data_opt . local_flag K_EXCEPTION IDENT exn_def_opt [ SEMI ]
def -> meta_data_opt . local_flag K_STRUCT IDENT struct_def_opt [ SEMI ]
def -> meta_data_opt . local_flag K_SEQUENCE LANGLE typ RANGLE IDENT [ SEMI ]
def -> meta_data_opt . local_flag K_DICTIONARY LANGLE typ COMMA typ RANGLE IDENT [ SEMI ]
def -> meta_data_opt . local_flag K_ENUM IDENT LBRACE enum_list RBRACE [ SEMI ]
def -> meta_data_opt . K_CONST typ IDENT EQUAL const_value [ SEMI ]
## Transitions:
-- On K_MODULE shift to state 14
-- On K_LOCAL shift to state 24
-- On K_CONST shift to state 25
-- On local_flag shift to state 55
## Reductions:
-- On K_STRUCT K_SEQUENCE K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CLASS
--   reduce production local_flag ->

State 14:
## Known stack suffix:
## meta_data_opt K_MODULE
## LR(1) items:
def -> meta_data_opt K_MODULE . IDENT LBRACE defs RBRACE [ SEMI ]
## Transitions:
-- On IDENT shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## meta_data_opt K_MODULE IDENT
## LR(1) items:
def -> meta_data_opt K_MODULE IDENT . LBRACE defs RBRACE [ SEMI ]
## Transitions:
-- On LBRACE shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## meta_data_opt K_MODULE IDENT LBRACE
## LR(1) items:
def -> meta_data_opt K_MODULE IDENT LBRACE . defs RBRACE [ SEMI ]
## Transitions:
-- On LDBRACK shift to state 1
-- On LBRACK shift to state 9
-- On meta_data_opt shift to state 13
-- On global_meta_data shift to state 17
-- On defs shift to state 22
-- On def shift to state 19
## Reductions:
-- On RBRACE
--   reduce production defs ->
-- On K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS
--   reduce production meta_data_opt ->

State 17:
## Known stack suffix:
## global_meta_data
## LR(1) items:
defs -> global_meta_data . defs [ RBRACE EOF ]
## Transitions:
-- On LDBRACK shift to state 1
-- On LBRACK shift to state 9
-- On meta_data_opt shift to state 13
-- On global_meta_data shift to state 17
-- On defs shift to state 18
-- On def shift to state 19
## Reductions:
-- On RBRACE EOF
--   reduce production defs ->
-- On K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS
--   reduce production meta_data_opt ->

State 18:
## Known stack suffix:
## global_meta_data defs
## LR(1) items:
defs -> global_meta_data defs . [ RBRACE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defs -> global_meta_data defs

State 19:
## Known stack suffix:
## def
## LR(1) items:
defs -> def . SEMI defs [ RBRACE EOF ]
## Transitions:
-- On SEMI shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## def SEMI
## LR(1) items:
defs -> def SEMI . defs [ RBRACE EOF ]
## Transitions:
-- On LDBRACK shift to state 1
-- On LBRACK shift to state 9
-- On meta_data_opt shift to state 13
-- On global_meta_data shift to state 17
-- On defs shift to state 21
-- On def shift to state 19
## Reductions:
-- On RBRACE EOF
--   reduce production defs ->
-- On K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS
--   reduce production meta_data_opt ->

State 21:
## Known stack suffix:
## def SEMI defs
## LR(1) items:
defs -> def SEMI defs . [ RBRACE EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production defs -> def SEMI defs

State 22:
## Known stack suffix:
## meta_data_opt K_MODULE IDENT LBRACE defs
## LR(1) items:
def -> meta_data_opt K_MODULE IDENT LBRACE defs . RBRACE [ SEMI ]
## Transitions:
-- On RBRACE shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## meta_data_opt K_MODULE IDENT LBRACE defs RBRACE
## LR(1) items:
def -> meta_data_opt K_MODULE IDENT LBRACE defs RBRACE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt K_MODULE IDENT LBRACE defs RBRACE

State 24:
## Known stack suffix:
## K_LOCAL
## LR(1) items:
local_flag -> K_LOCAL . [ K_STRUCT K_SEQUENCE K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_flag -> K_LOCAL

State 25:
## Known stack suffix:
## meta_data_opt K_CONST
## LR(1) items:
def -> meta_data_opt K_CONST . typ IDENT EQUAL const_value [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 26
-- On meta_data_opt shift to state 42
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 26:
## Known stack suffix:
## meta_data_opt K_CONST typ
## LR(1) items:
def -> meta_data_opt K_CONST typ . IDENT EQUAL const_value [ SEMI ]
## Transitions:
-- On IDENT shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## meta_data_opt K_CONST typ IDENT
## LR(1) items:
def -> meta_data_opt K_CONST typ IDENT . EQUAL const_value [ SEMI ]
## Transitions:
-- On EQUAL shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## meta_data_opt K_CONST typ IDENT EQUAL
## LR(1) items:
def -> meta_data_opt K_CONST typ IDENT EQUAL . const_value [ SEMI ]
## Transitions:
-- On STRING_LITERAL shift to state 29
-- On K_TRUE shift to state 30
-- On K_FALSE shift to state 31
-- On INT_LITERAL shift to state 32
-- On IDENT shift to state 33
-- On FLOAT_LITERAL shift to state 36
-- On DCOLON shift to state 37
-- On rel_name shift to state 39
-- On name shift to state 40
-- On const_value shift to state 41
## Reductions:

State 29:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
const_value -> STRING_LITERAL . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_value -> STRING_LITERAL

State 30:
## Known stack suffix:
## K_TRUE
## LR(1) items:
const_value -> K_TRUE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_value -> K_TRUE

State 31:
## Known stack suffix:
## K_FALSE
## LR(1) items:
const_value -> K_FALSE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_value -> K_FALSE

State 32:
## Known stack suffix:
## INT_LITERAL
## LR(1) items:
const_value -> INT_LITERAL . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_value -> INT_LITERAL

State 33:
## Known stack suffix:
## IDENT
## LR(1) items:
rel_name -> IDENT . [ SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK ]
rel_name -> IDENT . DCOLON rel_name [ SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK ]
## Transitions:
-- On DCOLON shift to state 34
## Reductions:
-- On SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK
--   reduce production rel_name -> IDENT

State 34:
## Known stack suffix:
## IDENT DCOLON
## LR(1) items:
rel_name -> IDENT DCOLON . rel_name [ SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK ]
## Transitions:
-- On IDENT shift to state 33
-- On rel_name shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## IDENT DCOLON rel_name
## LR(1) items:
rel_name -> IDENT DCOLON rel_name . [ SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rel_name -> IDENT DCOLON rel_name

State 36:
## Known stack suffix:
## FLOAT_LITERAL
## LR(1) items:
const_value -> FLOAT_LITERAL . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_value -> FLOAT_LITERAL

State 37:
## Known stack suffix:
## DCOLON
## LR(1) items:
name -> DCOLON . rel_name [ SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK ]
## Transitions:
-- On IDENT shift to state 33
-- On rel_name shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## DCOLON rel_name
## LR(1) items:
name -> DCOLON rel_name . [ SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> DCOLON rel_name

State 39:
## Known stack suffix:
## rel_name
## LR(1) items:
name -> rel_name . [ SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> rel_name

State 40:
## Known stack suffix:
## name
## LR(1) items:
const_value -> name . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production const_value -> name

State 41:
## Known stack suffix:
## meta_data_opt K_CONST typ IDENT EQUAL const_value
## LR(1) items:
def -> meta_data_opt K_CONST typ IDENT EQUAL const_value . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt K_CONST typ IDENT EQUAL const_value

State 42:
## Known stack suffix:
## meta_data_opt
## LR(1) items:
typ -> meta_data_opt . typ_name [ RANGLE IDENT COMMA ]
## Transitions:
-- On K_VOID shift to state 43
-- On K_STRING shift to state 44
-- On K_SHORT shift to state 45
-- On K_LONG shift to state 46
-- On K_INT shift to state 47
-- On K_FLOAT shift to state 48
-- On K_DOUBLE shift to state 49
-- On K_BYTE shift to state 50
-- On K_BOOL shift to state 51
-- On IDENT shift to state 33
-- On DCOLON shift to state 37
-- On typ_name shift to state 52
-- On rel_name shift to state 39
-- On name shift to state 53
## Reductions:

State 43:
## Known stack suffix:
## K_VOID
## LR(1) items:
typ_name -> K_VOID . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_VOID

State 44:
## Known stack suffix:
## K_STRING
## LR(1) items:
typ_name -> K_STRING . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_STRING

State 45:
## Known stack suffix:
## K_SHORT
## LR(1) items:
typ_name -> K_SHORT . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_SHORT

State 46:
## Known stack suffix:
## K_LONG
## LR(1) items:
typ_name -> K_LONG . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_LONG

State 47:
## Known stack suffix:
## K_INT
## LR(1) items:
typ_name -> K_INT . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_INT

State 48:
## Known stack suffix:
## K_FLOAT
## LR(1) items:
typ_name -> K_FLOAT . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_FLOAT

State 49:
## Known stack suffix:
## K_DOUBLE
## LR(1) items:
typ_name -> K_DOUBLE . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_DOUBLE

State 50:
## Known stack suffix:
## K_BYTE
## LR(1) items:
typ_name -> K_BYTE . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_BYTE

State 51:
## Known stack suffix:
## K_BOOL
## LR(1) items:
typ_name -> K_BOOL . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> K_BOOL

State 52:
## Known stack suffix:
## meta_data_opt typ_name
## LR(1) items:
typ -> meta_data_opt typ_name . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> meta_data_opt typ_name

State 53:
## Known stack suffix:
## name
## LR(1) items:
typ_name -> name . [ RANGLE IDENT COMMA ]
typ_name -> name . ASTERISK [ RANGLE IDENT COMMA ]
## Transitions:
-- On ASTERISK shift to state 54
## Reductions:
-- On RANGLE IDENT COMMA
--   reduce production typ_name -> name

State 54:
## Known stack suffix:
## name ASTERISK
## LR(1) items:
typ_name -> name ASTERISK . [ RANGLE IDENT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ_name -> name ASTERISK

State 55:
## Known stack suffix:
## meta_data_opt local_flag
## LR(1) items:
def -> meta_data_opt local_flag . K_CLASS IDENT class_def_opt [ SEMI ]
def -> meta_data_opt local_flag . K_INTERFACE IDENT intf_def_opt [ SEMI ]
def -> meta_data_opt local_flag . K_EXCEPTION IDENT exn_def_opt [ SEMI ]
def -> meta_data_opt local_flag . K_STRUCT IDENT struct_def_opt [ SEMI ]
def -> meta_data_opt local_flag . K_SEQUENCE LANGLE typ RANGLE IDENT [ SEMI ]
def -> meta_data_opt local_flag . K_DICTIONARY LANGLE typ COMMA typ RANGLE IDENT [ SEMI ]
def -> meta_data_opt local_flag . K_ENUM IDENT LBRACE enum_list RBRACE [ SEMI ]
## Transitions:
-- On K_STRUCT shift to state 56
-- On K_SEQUENCE shift to state 67
-- On K_INTERFACE shift to state 72
-- On K_EXCEPTION shift to state 107
-- On K_ENUM shift to state 118
-- On K_DICTIONARY shift to state 126
-- On K_CLASS shift to state 133
## Reductions:

State 56:
## Known stack suffix:
## meta_data_opt local_flag K_STRUCT
## LR(1) items:
def -> meta_data_opt local_flag K_STRUCT . IDENT struct_def_opt [ SEMI ]
## Transitions:
-- On IDENT shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## meta_data_opt local_flag K_STRUCT IDENT
## LR(1) items:
def -> meta_data_opt local_flag K_STRUCT IDENT . struct_def_opt [ SEMI ]
## Transitions:
-- On LBRACE shift to state 58
-- On struct_def_opt shift to state 66
## Reductions:
-- On SEMI
--   reduce production struct_def_opt ->

State 58:
## Known stack suffix:
## LBRACE
## LR(1) items:
struct_def_opt -> LBRACE . struct_members RBRACE [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 59
-- On struct_members shift to state 62
-- On meta_data_opt shift to state 42
-- On data_member shift to state 64
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->
-- On RBRACE
--   reduce production struct_members ->

State 59:
## Known stack suffix:
## typ
## LR(1) items:
data_member -> typ . IDENT SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On IDENT shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## typ IDENT
## LR(1) items:
data_member -> typ IDENT . SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On SEMI shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## typ IDENT SEMI
## LR(1) items:
data_member -> typ IDENT SEMI . [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_member -> typ IDENT SEMI

State 62:
## Known stack suffix:
## LBRACE struct_members
## LR(1) items:
struct_def_opt -> LBRACE struct_members . RBRACE [ SEMI ]
## Transitions:
-- On RBRACE shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## LBRACE struct_members RBRACE
## LR(1) items:
struct_def_opt -> LBRACE struct_members RBRACE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_def_opt -> LBRACE struct_members RBRACE

State 64:
## Known stack suffix:
## data_member
## LR(1) items:
struct_members -> data_member . struct_members [ RBRACE ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 59
-- On struct_members shift to state 65
-- On meta_data_opt shift to state 42
-- On data_member shift to state 64
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->
-- On RBRACE
--   reduce production struct_members ->

State 65:
## Known stack suffix:
## data_member struct_members
## LR(1) items:
struct_members -> data_member struct_members . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_members -> data_member struct_members

State 66:
## Known stack suffix:
## meta_data_opt local_flag K_STRUCT IDENT struct_def_opt
## LR(1) items:
def -> meta_data_opt local_flag K_STRUCT IDENT struct_def_opt . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt local_flag K_STRUCT IDENT struct_def_opt

State 67:
## Known stack suffix:
## meta_data_opt local_flag K_SEQUENCE
## LR(1) items:
def -> meta_data_opt local_flag K_SEQUENCE . LANGLE typ RANGLE IDENT [ SEMI ]
## Transitions:
-- On LANGLE shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## meta_data_opt local_flag K_SEQUENCE LANGLE
## LR(1) items:
def -> meta_data_opt local_flag K_SEQUENCE LANGLE . typ RANGLE IDENT [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 69
-- On meta_data_opt shift to state 42
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 69:
## Known stack suffix:
## meta_data_opt local_flag K_SEQUENCE LANGLE typ
## LR(1) items:
def -> meta_data_opt local_flag K_SEQUENCE LANGLE typ . RANGLE IDENT [ SEMI ]
## Transitions:
-- On RANGLE shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## meta_data_opt local_flag K_SEQUENCE LANGLE typ RANGLE
## LR(1) items:
def -> meta_data_opt local_flag K_SEQUENCE LANGLE typ RANGLE . IDENT [ SEMI ]
## Transitions:
-- On IDENT shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## meta_data_opt local_flag K_SEQUENCE LANGLE typ RANGLE IDENT
## LR(1) items:
def -> meta_data_opt local_flag K_SEQUENCE LANGLE typ RANGLE IDENT . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt local_flag K_SEQUENCE LANGLE typ RANGLE IDENT

State 72:
## Known stack suffix:
## meta_data_opt local_flag K_INTERFACE
## LR(1) items:
def -> meta_data_opt local_flag K_INTERFACE . IDENT intf_def_opt [ SEMI ]
## Transitions:
-- On IDENT shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## meta_data_opt local_flag K_INTERFACE IDENT
## LR(1) items:
def -> meta_data_opt local_flag K_INTERFACE IDENT . intf_def_opt [ SEMI ]
## Transitions:
-- On K_EXTENDS shift to state 74
-- On intf_extends_clause_opt shift to state 79
-- On intf_def_opt shift to state 106
## Reductions:
-- On SEMI
--   reduce production intf_def_opt ->
-- On LBRACE
--   reduce production intf_extends_clause_opt ->

State 74:
## Known stack suffix:
## K_EXTENDS
## LR(1) items:
intf_extends_clause_opt -> K_EXTENDS . name_list [ LBRACE ]
## Transitions:
-- On IDENT shift to state 33
-- On DCOLON shift to state 37
-- On rel_name shift to state 39
-- On name_list shift to state 75
-- On name shift to state 76
## Reductions:

State 75:
## Known stack suffix:
## K_EXTENDS name_list
## LR(1) items:
intf_extends_clause_opt -> K_EXTENDS name_list . [ LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production intf_extends_clause_opt -> K_EXTENDS name_list

State 76:
## Known stack suffix:
## name
## LR(1) items:
name_list -> name . [ SEMI LBRACE ]
name_list -> name . COMMA name_list [ SEMI LBRACE ]
## Transitions:
-- On COMMA shift to state 77
## Reductions:
-- On SEMI LBRACE
--   reduce production name_list -> name

State 77:
## Known stack suffix:
## name COMMA
## LR(1) items:
name_list -> name COMMA . name_list [ SEMI LBRACE ]
## Transitions:
-- On IDENT shift to state 33
-- On DCOLON shift to state 37
-- On rel_name shift to state 39
-- On name_list shift to state 78
-- On name shift to state 76
## Reductions:

State 78:
## Known stack suffix:
## name COMMA name_list
## LR(1) items:
name_list -> name COMMA name_list . [ SEMI LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_list -> name COMMA name_list

State 79:
## Known stack suffix:
## intf_extends_clause_opt
## LR(1) items:
intf_def_opt -> intf_extends_clause_opt . LBRACE intf_members RBRACE [ SEMI ]
## Transitions:
-- On LBRACE shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## intf_extends_clause_opt LBRACE
## LR(1) items:
intf_def_opt -> intf_extends_clause_opt LBRACE . intf_members RBRACE [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On operation_member shift to state 81
-- On op_typ shift to state 82
-- On meta_data_opt shift to state 99
-- On intf_members shift to state 104
## Reductions:
-- On RBRACE
--   reduce production intf_members ->
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 81:
## Known stack suffix:
## operation_member
## LR(1) items:
intf_members -> operation_member . intf_members [ RBRACE ]
## Transitions:
-- On LBRACK shift to state 9
-- On operation_member shift to state 81
-- On op_typ shift to state 82
-- On meta_data_opt shift to state 99
-- On intf_members shift to state 103
## Reductions:
-- On RBRACE
--   reduce production intf_members ->
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 82:
## Known stack suffix:
## op_typ
## LR(1) items:
operation_member -> op_typ . IDENT LPAREN params RPAREN throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On IDENT shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## op_typ IDENT
## LR(1) items:
operation_member -> op_typ IDENT . LPAREN params RPAREN throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On LPAREN shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## op_typ IDENT LPAREN
## LR(1) items:
operation_member -> op_typ IDENT LPAREN . params RPAREN throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On K_OUT shift to state 85
-- On params1 shift to state 86
-- On params shift to state 87
-- On param shift to state 93
-- On out_flag shift to state 96
## Reductions:
-- On LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production out_flag ->
-- On RPAREN
--   reduce production params ->

State 85:
## Known stack suffix:
## K_OUT
## LR(1) items:
out_flag -> K_OUT . [ LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production out_flag -> K_OUT

State 86:
## Known stack suffix:
## params1
## LR(1) items:
params -> params1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production params -> params1

State 87:
## Known stack suffix:
## op_typ IDENT LPAREN params
## LR(1) items:
operation_member -> op_typ IDENT LPAREN params . RPAREN throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On RPAREN shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## op_typ IDENT LPAREN params RPAREN
## LR(1) items:
operation_member -> op_typ IDENT LPAREN params RPAREN . throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On K_THROWS shift to state 89
-- On throws_clause_opt shift to state 91
## Reductions:
-- On SEMI
--   reduce production throws_clause_opt ->

State 89:
## Known stack suffix:
## K_THROWS
## LR(1) items:
throws_clause_opt -> K_THROWS . name_list [ SEMI ]
## Transitions:
-- On IDENT shift to state 33
-- On DCOLON shift to state 37
-- On rel_name shift to state 39
-- On name_list shift to state 90
-- On name shift to state 76
## Reductions:

State 90:
## Known stack suffix:
## K_THROWS name_list
## LR(1) items:
throws_clause_opt -> K_THROWS name_list . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production throws_clause_opt -> K_THROWS name_list

State 91:
## Known stack suffix:
## op_typ IDENT LPAREN params RPAREN throws_clause_opt
## LR(1) items:
operation_member -> op_typ IDENT LPAREN params RPAREN throws_clause_opt . SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On SEMI shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## op_typ IDENT LPAREN params RPAREN throws_clause_opt SEMI
## LR(1) items:
operation_member -> op_typ IDENT LPAREN params RPAREN throws_clause_opt SEMI . [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operation_member -> op_typ IDENT LPAREN params RPAREN throws_clause_opt SEMI

State 93:
## Known stack suffix:
## param
## LR(1) items:
params1 -> param . COMMA params1 [ RPAREN ]
params1 -> param . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 94
## Reductions:
-- On RPAREN
--   reduce production params1 -> param

State 94:
## Known stack suffix:
## param COMMA
## LR(1) items:
params1 -> param COMMA . params1 [ RPAREN ]
## Transitions:
-- On K_OUT shift to state 85
-- On params1 shift to state 95
-- On param shift to state 93
-- On out_flag shift to state 96
## Reductions:
-- On LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production out_flag ->

State 95:
## Known stack suffix:
## param COMMA params1
## LR(1) items:
params1 -> param COMMA params1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production params1 -> param COMMA params1

State 96:
## Known stack suffix:
## out_flag
## LR(1) items:
param -> out_flag . typ IDENT [ RPAREN COMMA ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 97
-- On meta_data_opt shift to state 42
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 97:
## Known stack suffix:
## out_flag typ
## LR(1) items:
param -> out_flag typ . IDENT [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## out_flag typ IDENT
## LR(1) items:
param -> out_flag typ IDENT . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production param -> out_flag typ IDENT

State 99:
## Known stack suffix:
## meta_data_opt
## LR(1) items:
op_typ -> meta_data_opt . idempotent_flag typ_name [ IDENT ]
## Transitions:
-- On K_IDEMPOTENT shift to state 100
-- On idempotent_flag shift to state 101
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production idempotent_flag ->

State 100:
## Known stack suffix:
## K_IDEMPOTENT
## LR(1) items:
idempotent_flag -> K_IDEMPOTENT . [ K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production idempotent_flag -> K_IDEMPOTENT

State 101:
## Known stack suffix:
## meta_data_opt idempotent_flag
## LR(1) items:
op_typ -> meta_data_opt idempotent_flag . typ_name [ IDENT ]
## Transitions:
-- On K_VOID shift to state 43
-- On K_STRING shift to state 44
-- On K_SHORT shift to state 45
-- On K_LONG shift to state 46
-- On K_INT shift to state 47
-- On K_FLOAT shift to state 48
-- On K_DOUBLE shift to state 49
-- On K_BYTE shift to state 50
-- On K_BOOL shift to state 51
-- On IDENT shift to state 33
-- On DCOLON shift to state 37
-- On typ_name shift to state 102
-- On rel_name shift to state 39
-- On name shift to state 53
## Reductions:

State 102:
## Known stack suffix:
## meta_data_opt idempotent_flag typ_name
## LR(1) items:
op_typ -> meta_data_opt idempotent_flag typ_name . [ IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op_typ -> meta_data_opt idempotent_flag typ_name

State 103:
## Known stack suffix:
## operation_member intf_members
## LR(1) items:
intf_members -> operation_member intf_members . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production intf_members -> operation_member intf_members

State 104:
## Known stack suffix:
## intf_extends_clause_opt LBRACE intf_members
## LR(1) items:
intf_def_opt -> intf_extends_clause_opt LBRACE intf_members . RBRACE [ SEMI ]
## Transitions:
-- On RBRACE shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## intf_extends_clause_opt LBRACE intf_members RBRACE
## LR(1) items:
intf_def_opt -> intf_extends_clause_opt LBRACE intf_members RBRACE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production intf_def_opt -> intf_extends_clause_opt LBRACE intf_members RBRACE

State 106:
## Known stack suffix:
## meta_data_opt local_flag K_INTERFACE IDENT intf_def_opt
## LR(1) items:
def -> meta_data_opt local_flag K_INTERFACE IDENT intf_def_opt . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt local_flag K_INTERFACE IDENT intf_def_opt

State 107:
## Known stack suffix:
## meta_data_opt local_flag K_EXCEPTION
## LR(1) items:
def -> meta_data_opt local_flag K_EXCEPTION . IDENT exn_def_opt [ SEMI ]
## Transitions:
-- On IDENT shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## meta_data_opt local_flag K_EXCEPTION IDENT
## LR(1) items:
def -> meta_data_opt local_flag K_EXCEPTION IDENT . exn_def_opt [ SEMI ]
## Transitions:
-- On K_EXTENDS shift to state 109
-- On single_extends_clause_opt shift to state 111
-- On exn_def_opt shift to state 117
## Reductions:
-- On SEMI
--   reduce production exn_def_opt ->
-- On LBRACE
--   reduce production single_extends_clause_opt ->

State 109:
## Known stack suffix:
## K_EXTENDS
## LR(1) items:
single_extends_clause_opt -> K_EXTENDS . name [ LBRACE K_IMPLEMENTS ]
## Transitions:
-- On IDENT shift to state 33
-- On DCOLON shift to state 37
-- On rel_name shift to state 39
-- On name shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## K_EXTENDS name
## LR(1) items:
single_extends_clause_opt -> K_EXTENDS name . [ LBRACE K_IMPLEMENTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production single_extends_clause_opt -> K_EXTENDS name

State 111:
## Known stack suffix:
## single_extends_clause_opt
## LR(1) items:
exn_def_opt -> single_extends_clause_opt . LBRACE exn_members RBRACE [ SEMI ]
## Transitions:
-- On LBRACE shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## single_extends_clause_opt LBRACE
## LR(1) items:
exn_def_opt -> single_extends_clause_opt LBRACE . exn_members RBRACE [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 59
-- On meta_data_opt shift to state 42
-- On exn_members shift to state 113
-- On data_member shift to state 115
## Reductions:
-- On RBRACE
--   reduce production exn_members ->
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 113:
## Known stack suffix:
## single_extends_clause_opt LBRACE exn_members
## LR(1) items:
exn_def_opt -> single_extends_clause_opt LBRACE exn_members . RBRACE [ SEMI ]
## Transitions:
-- On RBRACE shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## single_extends_clause_opt LBRACE exn_members RBRACE
## LR(1) items:
exn_def_opt -> single_extends_clause_opt LBRACE exn_members RBRACE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exn_def_opt -> single_extends_clause_opt LBRACE exn_members RBRACE

State 115:
## Known stack suffix:
## data_member
## LR(1) items:
exn_members -> data_member . exn_members [ RBRACE ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 59
-- On meta_data_opt shift to state 42
-- On exn_members shift to state 116
-- On data_member shift to state 115
## Reductions:
-- On RBRACE
--   reduce production exn_members ->
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 116:
## Known stack suffix:
## data_member exn_members
## LR(1) items:
exn_members -> data_member exn_members . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exn_members -> data_member exn_members

State 117:
## Known stack suffix:
## meta_data_opt local_flag K_EXCEPTION IDENT exn_def_opt
## LR(1) items:
def -> meta_data_opt local_flag K_EXCEPTION IDENT exn_def_opt . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt local_flag K_EXCEPTION IDENT exn_def_opt

State 118:
## Known stack suffix:
## meta_data_opt local_flag K_ENUM
## LR(1) items:
def -> meta_data_opt local_flag K_ENUM . IDENT LBRACE enum_list RBRACE [ SEMI ]
## Transitions:
-- On IDENT shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## meta_data_opt local_flag K_ENUM IDENT
## LR(1) items:
def -> meta_data_opt local_flag K_ENUM IDENT . LBRACE enum_list RBRACE [ SEMI ]
## Transitions:
-- On LBRACE shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## meta_data_opt local_flag K_ENUM IDENT LBRACE
## LR(1) items:
def -> meta_data_opt local_flag K_ENUM IDENT LBRACE . enum_list RBRACE [ SEMI ]
## Transitions:
-- On IDENT shift to state 121
-- On enum_list shift to state 124
## Reductions:

State 121:
## Known stack suffix:
## IDENT
## LR(1) items:
enum_list -> IDENT . [ RBRACE ]
enum_list -> IDENT . COMMA enum_list [ RBRACE ]
## Transitions:
-- On COMMA shift to state 122
## Reductions:
-- On RBRACE
--   reduce production enum_list -> IDENT

State 122:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
enum_list -> IDENT COMMA . enum_list [ RBRACE ]
## Transitions:
-- On IDENT shift to state 121
-- On enum_list shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## IDENT COMMA enum_list
## LR(1) items:
enum_list -> IDENT COMMA enum_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_list -> IDENT COMMA enum_list

State 124:
## Known stack suffix:
## meta_data_opt local_flag K_ENUM IDENT LBRACE enum_list
## LR(1) items:
def -> meta_data_opt local_flag K_ENUM IDENT LBRACE enum_list . RBRACE [ SEMI ]
## Transitions:
-- On RBRACE shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## meta_data_opt local_flag K_ENUM IDENT LBRACE enum_list RBRACE
## LR(1) items:
def -> meta_data_opt local_flag K_ENUM IDENT LBRACE enum_list RBRACE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt local_flag K_ENUM IDENT LBRACE enum_list RBRACE

State 126:
## Known stack suffix:
## meta_data_opt local_flag K_DICTIONARY
## LR(1) items:
def -> meta_data_opt local_flag K_DICTIONARY . LANGLE typ COMMA typ RANGLE IDENT [ SEMI ]
## Transitions:
-- On LANGLE shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## meta_data_opt local_flag K_DICTIONARY LANGLE
## LR(1) items:
def -> meta_data_opt local_flag K_DICTIONARY LANGLE . typ COMMA typ RANGLE IDENT [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 128
-- On meta_data_opt shift to state 42
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 128:
## Known stack suffix:
## meta_data_opt local_flag K_DICTIONARY LANGLE typ
## LR(1) items:
def -> meta_data_opt local_flag K_DICTIONARY LANGLE typ . COMMA typ RANGLE IDENT [ SEMI ]
## Transitions:
-- On COMMA shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA
## LR(1) items:
def -> meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA . typ RANGLE IDENT [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On typ shift to state 130
-- On meta_data_opt shift to state 42
## Reductions:
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 130:
## Known stack suffix:
## meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA typ
## LR(1) items:
def -> meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA typ . RANGLE IDENT [ SEMI ]
## Transitions:
-- On RANGLE shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA typ RANGLE
## LR(1) items:
def -> meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA typ RANGLE . IDENT [ SEMI ]
## Transitions:
-- On IDENT shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA typ RANGLE IDENT
## LR(1) items:
def -> meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA typ RANGLE IDENT . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt local_flag K_DICTIONARY LANGLE typ COMMA typ RANGLE IDENT

State 133:
## Known stack suffix:
## meta_data_opt local_flag K_CLASS
## LR(1) items:
def -> meta_data_opt local_flag K_CLASS . IDENT class_def_opt [ SEMI ]
## Transitions:
-- On IDENT shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## meta_data_opt local_flag K_CLASS IDENT
## LR(1) items:
def -> meta_data_opt local_flag K_CLASS IDENT . class_def_opt [ SEMI ]
## Transitions:
-- On K_EXTENDS shift to state 109
-- On single_extends_clause_opt shift to state 135
-- On class_def_opt shift to state 154
## Reductions:
-- On SEMI
--   reduce production class_def_opt ->
-- On LBRACE K_IMPLEMENTS
--   reduce production single_extends_clause_opt ->

State 135:
## Known stack suffix:
## single_extends_clause_opt
## LR(1) items:
class_def_opt -> single_extends_clause_opt . implements_clause_opt LBRACE class_members RBRACE [ SEMI ]
## Transitions:
-- On K_IMPLEMENTS shift to state 136
-- On implements_clause_opt shift to state 138
## Reductions:
-- On LBRACE
--   reduce production implements_clause_opt ->

State 136:
## Known stack suffix:
## K_IMPLEMENTS
## LR(1) items:
implements_clause_opt -> K_IMPLEMENTS . name_list [ LBRACE ]
## Transitions:
-- On IDENT shift to state 33
-- On DCOLON shift to state 37
-- On rel_name shift to state 39
-- On name_list shift to state 137
-- On name shift to state 76
## Reductions:

State 137:
## Known stack suffix:
## K_IMPLEMENTS name_list
## LR(1) items:
implements_clause_opt -> K_IMPLEMENTS name_list . [ LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production implements_clause_opt -> K_IMPLEMENTS name_list

State 138:
## Known stack suffix:
## single_extends_clause_opt implements_clause_opt
## LR(1) items:
class_def_opt -> single_extends_clause_opt implements_clause_opt . LBRACE class_members RBRACE [ SEMI ]
## Transitions:
-- On LBRACE shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## single_extends_clause_opt implements_clause_opt LBRACE
## LR(1) items:
class_def_opt -> single_extends_clause_opt implements_clause_opt LBRACE . class_members RBRACE [ SEMI ]
## Transitions:
-- On LBRACK shift to state 9
-- On op_typ shift to state 140
-- On meta_data_opt shift to state 99
-- On data_or_operation_member shift to state 149
-- On class_members shift to state 150
-- On class_member shift to state 152
## Reductions:
-- On RBRACE
--   reduce production class_members ->
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 140:
## Known stack suffix:
## op_typ
## LR(1) items:
data_or_operation_member -> op_typ . IDENT data_or_operation_cont [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On IDENT shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## op_typ IDENT
## LR(1) items:
data_or_operation_member -> op_typ IDENT . data_or_operation_cont [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On SEMI shift to state 142
-- On LPAREN shift to state 143
-- On data_or_operation_cont shift to state 148
## Reductions:

State 142:
## Known stack suffix:
## SEMI
## LR(1) items:
data_or_operation_cont -> SEMI . [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_or_operation_cont -> SEMI

State 143:
## Known stack suffix:
## LPAREN
## LR(1) items:
data_or_operation_cont -> LPAREN . params RPAREN throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On K_OUT shift to state 85
-- On params1 shift to state 86
-- On params shift to state 144
-- On param shift to state 93
-- On out_flag shift to state 96
## Reductions:
-- On LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production out_flag ->
-- On RPAREN
--   reduce production params ->

State 144:
## Known stack suffix:
## LPAREN params
## LR(1) items:
data_or_operation_cont -> LPAREN params . RPAREN throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On RPAREN shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## LPAREN params RPAREN
## LR(1) items:
data_or_operation_cont -> LPAREN params RPAREN . throws_clause_opt SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On K_THROWS shift to state 89
-- On throws_clause_opt shift to state 146
## Reductions:
-- On SEMI
--   reduce production throws_clause_opt ->

State 146:
## Known stack suffix:
## LPAREN params RPAREN throws_clause_opt
## LR(1) items:
data_or_operation_cont -> LPAREN params RPAREN throws_clause_opt . SEMI [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
-- On SEMI shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## LPAREN params RPAREN throws_clause_opt SEMI
## LR(1) items:
data_or_operation_cont -> LPAREN params RPAREN throws_clause_opt SEMI . [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_or_operation_cont -> LPAREN params RPAREN throws_clause_opt SEMI

State 148:
## Known stack suffix:
## op_typ IDENT data_or_operation_cont
## LR(1) items:
data_or_operation_member -> op_typ IDENT data_or_operation_cont . [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production data_or_operation_member -> op_typ IDENT data_or_operation_cont

State 149:
## Known stack suffix:
## data_or_operation_member
## LR(1) items:
class_member -> data_or_operation_member . [ RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_member -> data_or_operation_member

State 150:
## Known stack suffix:
## single_extends_clause_opt implements_clause_opt LBRACE class_members
## LR(1) items:
class_def_opt -> single_extends_clause_opt implements_clause_opt LBRACE class_members . RBRACE [ SEMI ]
## Transitions:
-- On RBRACE shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## single_extends_clause_opt implements_clause_opt LBRACE class_members RBRACE
## LR(1) items:
class_def_opt -> single_extends_clause_opt implements_clause_opt LBRACE class_members RBRACE . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_def_opt -> single_extends_clause_opt implements_clause_opt LBRACE class_members RBRACE

State 152:
## Known stack suffix:
## class_member
## LR(1) items:
class_members -> class_member . class_members [ RBRACE ]
## Transitions:
-- On LBRACK shift to state 9
-- On op_typ shift to state 140
-- On meta_data_opt shift to state 99
-- On data_or_operation_member shift to state 149
-- On class_members shift to state 153
-- On class_member shift to state 152
## Reductions:
-- On RBRACE
--   reduce production class_members ->
-- On K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
--   reduce production meta_data_opt ->

State 153:
## Known stack suffix:
## class_member class_members
## LR(1) items:
class_members -> class_member class_members . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_members -> class_member class_members

State 154:
## Known stack suffix:
## meta_data_opt local_flag K_CLASS IDENT class_def_opt
## LR(1) items:
def -> meta_data_opt local_flag K_CLASS IDENT class_def_opt . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def -> meta_data_opt local_flag K_CLASS IDENT class_def_opt

State 155:
## Known stack suffix:
## defs
## LR(1) items:
start -> defs . EOF [ # ]
## Transitions:
-- On EOF shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## defs EOF
## LR(1) items:
start -> defs EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production start -> defs EOF

