Grammar has 38 nonterminal symbols, among which 1 start symbols.
Grammar has 46 terminal symbols.
Grammar has 88 productions.
nullable(typ_name) = false
nullable(typ) = false
nullable(throws_clause_opt) = true
nullable(struct_members) = true
nullable(struct_def_opt) = true
nullable(string_lit) = false
nullable(string_list) = false
nullable(start) = false
nullable(single_extends_clause_opt) = true
nullable(rel_name) = false
nullable(params1) = false
nullable(params) = true
nullable(param) = false
nullable(out_flag) = true
nullable(operation_member) = false
nullable(op_typ) = false
nullable(name_list) = false
nullable(name) = false
nullable(meta_data_opt) = true
nullable(local_flag) = true
nullable(intf_members) = true
nullable(intf_extends_clause_opt) = true
nullable(intf_def_opt) = true
nullable(implements_clause_opt) = true
nullable(idempotent_flag) = true
nullable(global_meta_data) = false
nullable(exn_members) = true
nullable(exn_def_opt) = true
nullable(enum_list) = false
nullable(defs) = true
nullable(def) = false
nullable(data_or_operation_member) = false
nullable(data_or_operation_cont) = false
nullable(data_member) = false
nullable(const_value) = false
nullable(class_members) = true
nullable(class_member) = false
nullable(class_def_opt) = true
first(typ_name) = K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(typ) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(throws_clause_opt) = K_THROWS
first(struct_members) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(struct_def_opt) = LBRACE
first(string_lit) = STRING_LITERAL
first(string_list) = STRING_LITERAL
first(start) = LDBRACK LBRACK K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS EOF
first(single_extends_clause_opt) = K_EXTENDS
first(rel_name) = IDENT
first(params1) = LBRACK K_VOID K_STRING K_SHORT K_OUT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(params) = LBRACK K_VOID K_STRING K_SHORT K_OUT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(param) = LBRACK K_VOID K_STRING K_SHORT K_OUT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(out_flag) = K_OUT
first(operation_member) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(op_typ) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(name_list) = IDENT DCOLON
first(name) = IDENT DCOLON
first(meta_data_opt) = LBRACK
first(local_flag) = K_LOCAL
first(intf_members) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(intf_extends_clause_opt) = K_EXTENDS
first(intf_def_opt) = LBRACE K_EXTENDS
first(implements_clause_opt) = K_IMPLEMENTS
first(idempotent_flag) = K_IDEMPOTENT
first(global_meta_data) = LDBRACK
first(exn_members) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(exn_def_opt) = LBRACE K_EXTENDS
first(enum_list) = IDENT
first(defs) = LDBRACK LBRACK K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS
first(def) = LBRACK K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS
first(data_or_operation_member) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(data_or_operation_cont) = SEMI LPAREN
first(data_member) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(const_value) = STRING_LITERAL K_TRUE K_FALSE INT_LITERAL IDENT FLOAT_LITERAL DCOLON
first(class_members) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(class_member) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
first(class_def_opt) = LBRACE K_IMPLEMENTS K_EXTENDS
minimal(typ_name) = (* 1 *) K_BYTE
minimal(typ) = (* 1 *) K_BYTE
minimal(throws_clause_opt) = (* 0 *)
minimal(struct_members) = (* 0 *)
minimal(struct_def_opt) = (* 0 *)
minimal(string_lit) = (* 1 *) STRING_LITERAL
minimal(string_list) = (* 1 *) STRING_LITERAL
minimal(start) = (* 1 *) EOF
minimal(single_extends_clause_opt) = (* 0 *)
minimal(rel_name) = (* 1 *) IDENT
minimal(params1) = (* 2 *) K_BYTE IDENT
minimal(params) = (* 0 *)
minimal(param) = (* 2 *) K_BYTE IDENT
minimal(out_flag) = (* 0 *)
minimal(operation_member) = (* 5 *) K_BYTE IDENT LPAREN RPAREN SEMI
minimal(op_typ) = (* 1 *) K_BYTE
minimal(name_list) = (* 1 *) IDENT
minimal(name) = (* 1 *) IDENT
minimal(meta_data_opt) = (* 0 *)
minimal(local_flag) = (* 0 *)
minimal(intf_members) = (* 0 *)
minimal(intf_extends_clause_opt) = (* 0 *)
minimal(intf_def_opt) = (* 0 *)
minimal(implements_clause_opt) = (* 0 *)
minimal(idempotent_flag) = (* 0 *)
minimal(global_meta_data) = (* 3 *) LDBRACK STRING_LITERAL RDBRACK
minimal(exn_members) = (* 0 *)
minimal(exn_def_opt) = (* 0 *)
minimal(enum_list) = (* 1 *) IDENT
minimal(defs) = (* 0 *)
minimal(def) = (* 2 *) K_CLASS IDENT
minimal(data_or_operation_member) = (* 3 *) K_BYTE IDENT SEMI
minimal(data_or_operation_cont) = (* 1 *) SEMI
minimal(data_member) = (* 3 *) K_BYTE IDENT SEMI
minimal(const_value) = (* 1 *) INT_LITERAL
minimal(class_members) = (* 0 *)
minimal(class_member) = (* 3 *) K_BYTE IDENT SEMI
minimal(class_def_opt) = (* 0 *)
follow(typ_name) = RANGLE IDENT COMMA
follow(typ) = RANGLE IDENT COMMA
follow(throws_clause_opt) = SEMI
follow(struct_members) = RBRACE
follow(struct_def_opt) = SEMI
follow(string_lit) = RDBRACK RBRACK COMMA
follow(string_list) = RDBRACK RBRACK
follow(start) = #
follow(single_extends_clause_opt) = LBRACE K_IMPLEMENTS
follow(rel_name) = SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK
follow(params1) = RPAREN
follow(params) = RPAREN
follow(param) = RPAREN COMMA
follow(out_flag) = LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
follow(operation_member) = RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
follow(op_typ) = IDENT
follow(name_list) = SEMI LBRACE
follow(name) = SEMI RANGLE LBRACE K_IMPLEMENTS IDENT COMMA ASTERISK
follow(meta_data_opt) = K_VOID K_STRUCT K_STRING K_SHORT K_SEQUENCE K_MODULE K_LONG K_LOCAL K_INTERFACE K_INT K_IDEMPOTENT K_FLOAT K_EXCEPTION K_ENUM K_DOUBLE K_DICTIONARY K_CONST K_CLASS K_BYTE K_BOOL IDENT DCOLON
follow(local_flag) = K_STRUCT K_SEQUENCE K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CLASS
follow(intf_members) = RBRACE
follow(intf_extends_clause_opt) = LBRACE
follow(intf_def_opt) = SEMI
follow(implements_clause_opt) = LBRACE
follow(idempotent_flag) = K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
follow(global_meta_data) = RBRACE LDBRACK LBRACK K_STRUCT K_SEQUENCE K_MODULE K_LOCAL K_INTERFACE K_EXCEPTION K_ENUM K_DICTIONARY K_CONST K_CLASS EOF
follow(exn_members) = RBRACE
follow(exn_def_opt) = SEMI
follow(enum_list) = RBRACE
follow(defs) = RBRACE EOF
follow(def) = SEMI
follow(data_or_operation_member) = RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
follow(data_or_operation_cont) = RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
follow(data_member) = RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
follow(const_value) = SEMI
follow(class_members) = RBRACE
follow(class_member) = RBRACE LBRACK K_VOID K_STRING K_SHORT K_LONG K_INT K_IDEMPOTENT K_FLOAT K_DOUBLE K_BYTE K_BOOL IDENT DCOLON
follow(class_def_opt) = SEMI
Built an LR(0) automaton with 157 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 157 states.
64 out of 157 states have a default reduction.
40 out of 157 states are represented.
0 out of 87 symbols keep track of their start position.
0 out of 87 symbols keep track of their end position.
53 out of 89 productions exploit shiftreduce optimization.
288 functions before inlining, 60 functions after inlining.
