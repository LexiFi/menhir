%{ (* $Id: hgen_parser.mly 15582 2007-12-06 23:56:27Z gerd $ *)
  (* Header *)
  open Hgen_types
  open Hgen_types.AST
%}
%start start
%token <Hgen_types.loc> ASTERISK
%token <Hgen_types.loc> COMMA
%token <Hgen_types.loc> DCOLON
%token <Hgen_types.loc> EOF
%token <Hgen_types.loc> EQUAL
%token <float * Hgen_types.loc> FLOAT_LITERAL
%token <string * Hgen_types.loc> IDENT
%token <int64 * Hgen_types.loc> INT_LITERAL
%token <Hgen_types.loc> K_BOOL
%token <Hgen_types.loc> K_BYTE
%token <Hgen_types.loc> K_CLASS
%token <Hgen_types.loc> K_CONST
%token <Hgen_types.loc> K_DICTIONARY
%token <Hgen_types.loc> K_DOUBLE
%token <Hgen_types.loc> K_ENUM
%token <Hgen_types.loc> K_EXCEPTION
%token <Hgen_types.loc> K_EXTENDS
%token <Hgen_types.loc> K_FALSE
%token <Hgen_types.loc> K_FLOAT
%token <Hgen_types.loc> K_IDEMPOTENT
%token <Hgen_types.loc> K_IMPLEMENTS
%token <Hgen_types.loc> K_INT
%token <Hgen_types.loc> K_INTERFACE
%token <Hgen_types.loc> K_LOCAL
%token <Hgen_types.loc> K_LONG
%token <Hgen_types.loc> K_MODULE
%token <Hgen_types.loc> K_OUT
%token <Hgen_types.loc> K_SEQUENCE
%token <Hgen_types.loc> K_SHORT
%token <Hgen_types.loc> K_STRING
%token <Hgen_types.loc> K_STRUCT
%token <Hgen_types.loc> K_THROWS
%token <Hgen_types.loc> K_TRUE
%token <Hgen_types.loc> K_VOID
%token <Hgen_types.loc> LANGLE
%token <Hgen_types.loc> LBRACE
%token <Hgen_types.loc> LBRACK
%token <Hgen_types.loc> LDBRACK
%token <Hgen_types.loc> LPAREN
%token <Hgen_types.loc> RANGLE
%token <Hgen_types.loc> RBRACE
%token <Hgen_types.loc> RBRACK
%token <Hgen_types.loc> RDBRACK
%token <Hgen_types.loc> RPAREN
%token <Hgen_types.loc> SEMI
%token <string * Hgen_types.loc * Hgen_types.loc> STRING_LITERAL
%type <Hgen_types.AST.def list> start
%%

start:
  _1 = defs _2 = EOF
    {                ( _1 )}

defs:
  _1 = global_meta_data _2 = defs
    {    ( (`GMeta _1) :: _2 )}
| _1 = def _2 = SEMI _3 = defs
    {    ( _1 :: _3 )}
| 
    {    ( [] )}

def:
  _1 = meta_data_opt _2 = K_MODULE _3 = IDENT _4 = LBRACE _5 = defs _6 = RBRACE
    {    ( `Module
	( object
	    method name = fst _3
	    method meta = _1
	    method term = _5
	    method loc = snd _3
	  end : module_def
	)
    )}
| _1 = meta_data_opt _2 = local_flag _3 = K_CLASS _4 = IDENT _5 = class_def_opt
    {    ( `Class
	( object
	    method name = fst _4
	    method meta = _1
	    method local = _2
	    method term = _5
	    method loc = snd _4
	  end : class_def
	)
    )}
| _1 = meta_data_opt _2 = local_flag _3 = K_INTERFACE _4 = IDENT _5 = intf_def_opt
    {   ( `Intf 
       ( object
	   method name = fst _4
	   method meta = _1
	   method local = _2
	   method term = _5
	   method loc = snd _4
	 end : intf_def
       )
   )}
| _1 = meta_data_opt _2 = local_flag _3 = K_EXCEPTION _4 = IDENT _5 = exn_def_opt
    {   ( `Exn
       ( object
	   method name = fst _4
	   method meta = _1
	   method local = _2
	   method term = _5
	   method loc = snd _4
	 end : exn_def
       )
   )}
| _1 = meta_data_opt _2 = local_flag _3 = K_STRUCT _4 = IDENT _5 = struct_def_opt
    {   ( `Struct
       ( object
	   method name = fst _4
	   method meta = _1
	   method local = _2
	   method term = _5
	   method loc = snd _4
	 end : struct_def
       )
   )}
| _1 = meta_data_opt _2 = local_flag _3 = K_SEQUENCE _4 = LANGLE _5 = typ _6 = RANGLE _7 = IDENT
    {   ( let (arg_typ, arg_meta) = _5 in
     `Seq 
       ( object
	   method name = fst _7
	   method arg_typ = arg_typ
	   method arg_meta = arg_meta
	   method meta = _1
	   method local = _2
	   method loc = snd _7
	 end : seq_def
       )
   )}
| _1 = meta_data_opt _2 = local_flag _3 = K_DICTIONARY _4 = LANGLE _5 = typ _6 = COMMA _7 = typ _8 = RANGLE _9 = IDENT
    {  ( let (arg_typ1, arg_meta1) = _5 in
    let (arg_typ2, arg_meta2) = _7 in
    `Dict 
       ( object
	   method name = fst _9
	   method arg_typ1 = arg_typ1
	   method arg_typ2 = arg_typ2
	   method arg_meta1 = arg_meta1
	   method arg_meta2 = arg_meta2
	   method meta = _1
	   method local = _2
	   method loc = snd _9
	 end : dict_def
       )
  )}
| _1 = meta_data_opt _2 = local_flag _3 = K_ENUM _4 = IDENT _5 = LBRACE _6 = enum_list _7 = RBRACE
    {   ( `Enum 
       ( object
	   method name = fst _4
	   method meta = _1
	   method local = _2
	   method term = _6
	   method loc = snd _4
	 end : enum_def
       )
   )}
| _1 = meta_data_opt _2 = K_CONST _3 = typ _4 = IDENT _5 = EQUAL _6 = const_value
    {   ( let (arg_typ, arg_meta) = _3 in
     `Const
       ( object
	   method name = fst _4
	   method arg_typ = arg_typ
	   method arg_meta = arg_meta
	   method arg_value = _6
	   method meta = _1
	   method loc = snd _4
	 end : const_def
       )
   )}

class_def_opt:
  _1 = single_extends_clause_opt _2 = implements_clause_opt _3 = LBRACE _4 = class_members _5 = RBRACE
    {   ( let members = _4 in
     let data_members =
       List.flatten
	 (List.map
	    (function `Data_member m -> [m] | _ -> [])
	    members) in
     let operations =
       List.flatten
	 (List.map
	    (function `Operation m -> [m] | _ -> [])
	    members) in
     Some 
       ( object
	   method extends = _1
	   method implements = _2
	   method data_members = data_members
	   method operations = operations
	 end : class_term
       )
   )}
| 
    {   ( None )}

single_extends_clause_opt:
  _1 = K_EXTENDS _2 = name
    {     ( Some _2 )}
| 
    {     ( None )}

implements_clause_opt:
  _1 = K_IMPLEMENTS _2 = name_list
    {     ( _2 )}
| 
    {     ( [] )}

class_members:
  _1 = class_member _2 = class_members
    {    ( _1 :: _2 )}
| 
    {    ( [] )}

class_member:
  _1 = data_or_operation_member
    {    ( _1 )}

intf_def_opt:
  _1 = intf_extends_clause_opt _2 = LBRACE _3 = intf_members _4 = RBRACE
    {    ( Some
	( object
	    method extends = _1
	    method operations = _3
	  end : intf_term
	)
    )}
| 
    {    ( None )}

intf_extends_clause_opt:
  _1 = K_EXTENDS _2 = name_list
    {    ( _2 )}
| 
    {    ( [] )}

intf_members:
  _1 = operation_member _2 = intf_members
    {    ( _1 :: _2 )}
| 
    {    ( [] )}

exn_def_opt:
  _1 = single_extends_clause_opt _2 = LBRACE _3 = exn_members _4 = RBRACE
    {    ( Some
	( object
	    method extends = _1
	    method data_members = _3
	  end : exn_term
	)
    )}
| 
    {    ( None )}

exn_members:
  _1 = data_member _2 = exn_members
    {    ( _1 :: _2 )}
| 
    {    ( [] )}

struct_def_opt:
  _1 = LBRACE _2 = struct_members _3 = RBRACE
    {    ( Some
	( object
	    method data_members = _2
	  end : struct_term
	)
    )}
| 
    {    ( None )}

struct_members:
  _1 = data_member _2 = struct_members
    {    ( _1 :: _2 )}
| 
    {    ( [] )}

enum_list:
  _1 = IDENT
    {    ( [ fst _1 ] )}
| _1 = IDENT _2 = COMMA _3 = enum_list
    {    ( fst _1 :: _3 )}

data_member:
  _1 = typ _2 = IDENT _3 = SEMI
    {    ( let (typ, meta) = _1 in
      ( object
	  method name = fst _2
	  method typ = typ
	  method meta = meta
	  method loc = snd _2
	end : data_member
      ) 
    )}

operation_member:
  _1 = op_typ _2 = IDENT _3 = LPAREN _4 = params _5 = RPAREN _6 = throws_clause_opt _7 = SEMI
    {    ( let (typ, meta, idempotent) = _1 in
      ( object
	  method name = fst _2
	  method typ = typ
	  method meta = meta
	  method params = _4
	  method throws = _6
	  method idempotent = idempotent
	  method loc = snd _2
	end : operation
      ) 
    )}

data_or_operation_member:
  _1 = op_typ _2 = IDENT _3 = data_or_operation_cont
    {    ( let (typ, meta, idempotent) = _1 in
      match _3 with
	| None ->
	    if idempotent then raise Parsing.Parse_error;
	    `Data_member(object
			   method name = fst _2
			   method typ = typ
			   method meta = meta
			   method loc = snd _2
			 end : data_member
			) 
	| Some (params, throws) ->
	    `Operation( object
			  method name = fst _2
			  method typ = typ
			  method meta = meta
			  method params = params
			  method throws = throws
			  method idempotent = idempotent
			  method loc = snd _2
			end : operation
		      ) 
    )}

data_or_operation_cont:
  _1 = SEMI
    {    ( None )}
| _1 = LPAREN _2 = params _3 = RPAREN _4 = throws_clause_opt _5 = SEMI
    {    ( Some(_2, _4) )}

params:
  _1 = params1
    {    ( _1 )}
| 
    {    ( [] )}

params1:
  _1 = param _2 = COMMA _3 = params1
    {    ( _1 :: _3 )}
| _1 = param
    {    ( [ _1 ] )}

param:
  _1 = out_flag _2 = typ _3 = IDENT
    {    ( let (typ, meta) = _2 in
      ( object
	  method name = fst _3
	  method typ = typ
	  method meta = meta
	  method out = _1
	  method loc = snd _3
	end : param
      )
    )}

out_flag:
  _1 = K_OUT
    {    ( true )}
| 
    {    ( false )}

throws_clause_opt:
  _1 = K_THROWS _2 = name_list
    {    ( _2 )}
| 
    {    ( [] )}

typ:
  _1 = meta_data_opt _2 = typ_name
    {    ( ( _2, _1 ) )}

op_typ:
  _1 = meta_data_opt _2 = idempotent_flag _3 = typ_name
    {    ( ( _3, _1, _2 ) )}

typ_name:
  _1 = K_BYTE
    {    ( `Byte )}
| _1 = K_BOOL
    {    ( `Bool )}
| _1 = K_SHORT
    {    ( `Short )}
| _1 = K_INT
    {    ( `Int )}
| _1 = K_LONG
    {    ( `Long )}
| _1 = K_FLOAT
    {    ( `Float )}
| _1 = K_DOUBLE
    {    ( `Double )}
| _1 = K_STRING
    {    ( `String )}
| _1 = K_VOID
    {    ( `Void )}
| _1 = name
    {    ( `Name _1 )}
| _1 = name _2 = ASTERISK
    {    ( `Proxy _1 )}

idempotent_flag:
  _1 = K_IDEMPOTENT
    {    ( true )}
| 
    {    ( false )}

meta_data_opt:
  _1 = LBRACK _2 = string_list _3 = RBRACK
    {    ( List.map Hgen_parser_util.parse_meta_def _2 )}
| 
    {    ( [] )}

global_meta_data:
  _1 = LDBRACK _2 = string_list _3 = RDBRACK
    {    ( List.map Hgen_parser_util.parse_meta_def _2 )}

string_list:
  _1 = string_lit _2 = COMMA _3 = string_list
    {    ( _1 :: _3 )}
| _1 = string_lit
    {    ( [ _1 ] )}

string_lit:
  _1 = STRING_LITERAL _2 = string_lit
    {    ( let (s, _, _) = _1 in s ^ _2 )}
| _1 = STRING_LITERAL
    {    ( let (s, _, _) = _1 in s )}

local_flag:
  _1 = K_LOCAL
    {    ( true )}
| 
    {    ( false )}

const_value:
  _1 = INT_LITERAL
    {    ( `Int (fst _1) )}
| _1 = FLOAT_LITERAL
    {    ( `Float (fst _1) )}
| _1 = STRING_LITERAL
    {    ( let (s, _, _) = _1 in `String s )}
| _1 = K_FALSE
    {    ( `Bool false )}
| _1 = K_TRUE
    {    ( `Bool true )}
| _1 = name
    {    ( `Name _1 )}

name:
  _1 = DCOLON _2 = rel_name
    {    ( `Absolute _2 )}
| _1 = rel_name
    {    ( `Relative _1 )}

rel_name:
  _1 = IDENT
    {    ( [ fst _1 ] )}
| _1 = IDENT _2 = DCOLON _3 = rel_name
    {    ( ( fst _1) :: _3 )}

name_list:
  _1 = name
    {    ( [ _1 ] )}
| _1 = name _2 = COMMA _3 = name_list
    {    ( _1 :: _3 )}

%%

  (* Trailer *)

