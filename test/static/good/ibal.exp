File "ibal.mly", line 125, characters 7-13:
Warning: the token DOLLAR is unused.
File "ibal.mly", line 140, characters 7-10:
Warning: the token EOF is unused.
File "ibal.mly", line 99, characters 7-13:
Warning: the token LARROW is unused.
File "ibal.mly", line 100, characters 7-15:
Warning: the token NOTEQUAL is unused.
Grammar has 67 nonterminal symbols, among which 3 start symbols.
Grammar has 75 terminal symbols.
Grammar has 234 productions.
nullable(weighted_exprs) = false
nullable(weighted_expr) = false
nullable(vars) = false
nullable(values) = true
nullable(ulongvar) = false
nullable(type_exprs) = false
nullable(type_expr) = false
nullable(type_args) = false
nullable(tycon_item) = false
nullable(tycon_expr) = false
nullable(top) = false
nullable(strings) = false
nullable(string_choices) = false
nullable(string) = false
nullable(rew_clauses1) = false
nullable(rew_clauses) = false
nullable(rew_clause) = false
nullable(pats) = false
nullable(pat) = false
nullable(params) = false
nullable(param_decls) = false
nullable(param_decl) = false
nullable(other_type_expr) = false
nullable(opt_vars) = true
nullable(opt_type_exprs) = true
nullable(opt_type_args) = true
nullable(opt_sqparen_type_exprs) = true
nullable(opt_semicolon) = true
nullable(opt_paren_type_exprs) = true
nullable(opt_paren_type_args) = true
nullable(opt_paren_pats) = true
nullable(opt_paren_exprs) = true
nullable(opt_named_type_exprs) = true
nullable(opt_named_pats) = true
nullable(opt_named_exprs) = true
nullable(opt_given) = true
nullable(opt_decls) = true
nullable(obs) = false
nullable(new_type_var) = false
nullable(named_type_exprs) = false
nullable(named_type_expr) = false
nullable(named_pats) = false
nullable(named_pat) = false
nullable(named_exprs) = false
nullable(named_expr) = false
nullable(longvars) = false
nullable(longvar) = false
nullable(let_decl) = false
nullable(integer) = false
nullable(ident) = false
nullable(float) = false
nullable(exprs) = false
nullable(expr_nonint4) = false
nullable(expr_nonint) = false
nullable(expr4) = false
nullable(expr3) = false
nullable(expr2) = false
nullable(expr1) = false
nullable(expr) = false
nullable(decls) = false
nullable(decl) = false
nullable(decide_decl) = false
nullable(clauses1) = false
nullable(clauses) = false
nullable(clause) = false
nullable(arrow_type_exprs) = false
nullable(arrow_type_expr) = false
first(weighted_exprs) = POSFLOAT
first(weighted_expr) = POSFLOAT
first(vars) = LIDENT
first(values) = FROM
first(ulongvar) = UIDENT LIDENT
first(type_exprs) = UIDENT SYMBOL LTUP LPAREN LIDENT INT FORALL BOOL
first(type_expr) = UIDENT SYMBOL LTUP LPAREN LIDENT INT FORALL BOOL
first(type_args) = LIDENT
first(tycon_item) = UIDENT
first(tycon_expr) = UIDENT
first(top) = UNIFORM UIDENT TYPE TRUE STRING REWARD RETRACT QUOTE PRIVATE PRAGMA PDIST PARAMS PARAM OP OBSERVE NOT NATURAL MINUS LTUP LPAREN LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE DATA CASE
first(strings) = STRING QUOTE
first(string_choices) = STRING QUOTE
first(string) = STRING QUOTE
first(rew_clauses1) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE FALSE ANY
first(rew_clauses) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE HASH FALSE ANY
first(rew_clause) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE FALSE ANY
first(pats) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE FALSE ANY
first(pat) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE FALSE ANY
first(params) = POSFLOAT
first(param_decls) = UIDENT LIDENT
first(param_decl) = UIDENT LIDENT
first(other_type_expr) = UIDENT SYMBOL LTUP LPAREN LIDENT INT FORALL BOOL
first(opt_vars) = LIDENT
first(opt_type_exprs) = UIDENT SYMBOL LTUP LPAREN LIDENT INT FORALL BOOL
first(opt_type_args) = LIDENT
first(opt_sqparen_type_exprs) = UIDENT SYMBOL LTUP LSQUARE LPAREN LIDENT INT FORALL BOOL
first(opt_semicolon) = SEMICOLON
first(opt_paren_type_exprs) = UIDENT SYMBOL LTUP LPAREN LIDENT INT FORALL BOOL
first(opt_paren_type_args) = LSQUARE LIDENT
first(opt_paren_pats) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LPAREN LIDENT LBRACE FALSE ANY
first(opt_paren_exprs) = UNIFORM UIDENT TRUE STRING REWARD QUOTE PRAGMA PDIST PARAMS OP OBSERVE NOT NATURAL MINUS LTUP LPAREN LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE CASE
first(opt_named_type_exprs) = LIDENT
first(opt_named_pats) = LIDENT
first(opt_named_exprs) = LIDENT
first(opt_given) = GIVEN
first(opt_decls) = TYPE REWARD RETRACT PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA
first(obs) = UIDENT NOT LIDENT
first(new_type_var) = LIDENT
first(named_type_exprs) = LIDENT
first(named_type_expr) = LIDENT
first(named_pats) = LIDENT
first(named_pat) = LIDENT
first(named_exprs) = LIDENT
first(named_expr) = LIDENT
first(longvars) = UIDENT LIDENT
first(longvar) = UIDENT LIDENT
first(let_decl) = LIDENT
first(integer) = NATURAL MINUS
first(ident) = UIDENT LIDENT
first(float) = POSFLOAT MINUS
first(exprs) = UNIFORM UIDENT TRUE STRING REWARD QUOTE PRAGMA PDIST PARAMS OP OBSERVE NOT NATURAL MINUS LTUP LPAREN LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE CASE
first(expr_nonint4) = UNIFORM UIDENT TRUE STRING REWARD QUOTE PRAGMA PDIST PARAMS OP OBSERVE NOT MINUS LTUP LPAREN LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE CASE
first(expr_nonint) = UNIFORM UIDENT TRUE STRING REWARD QUOTE PRAGMA PDIST PARAMS OP OBSERVE NOT MINUS LTUP LPAREN LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE CASE
first(expr4) = UNIFORM UIDENT TRUE STRING REWARD QUOTE PRAGMA PDIST PARAMS OP OBSERVE NOT NATURAL MINUS LTUP LPAREN LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE CASE
first(expr3) = UNIFORM UIDENT TRUE STRING REWARD QUOTE PRAGMA PDIST PARAMS OP OBSERVE NOT MINUS LTUP LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE CASE
first(expr2) = UIDENT LPAREN LIDENT
first(expr1) = NATURAL MINUS
first(expr) = UNIFORM UIDENT TRUE STRING REWARD QUOTE PRAGMA PDIST PARAMS OP OBSERVE NOT NATURAL MINUS LTUP LPAREN LIDENT LET LBRACE LAMBDA IF FLIP FIX FALSE ETYPE ERROR EDATA DIST DISCOUNT DECIDE CASE
first(decls) = TYPE REWARD RETRACT PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA
first(decl) = TYPE REWARD RETRACT PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA
first(decide_decl) = DECIDE
first(clauses1) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE FALSE ANY
first(clauses) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE HASH FALSE ANY
first(clause) = UIDENT TRUE STRING QUOTE NATURAL MINUS LTUP LIDENT LBRACE FALSE ANY
first(arrow_type_exprs) = LPAREN
first(arrow_type_expr) = LPAREN
minimal(weighted_exprs) = (* 3 *) POSFLOAT COLON NATURAL
minimal(weighted_expr) = (* 3 *) POSFLOAT COLON NATURAL
minimal(vars) = (* 1 *) LIDENT
minimal(values) = (* 0 *)
minimal(ulongvar) = (* 1 *) UIDENT
minimal(type_exprs) = (* 1 *) SYMBOL
minimal(type_expr) = (* 1 *) SYMBOL
minimal(type_args) = (* 1 *) LIDENT
minimal(tycon_item) = (* 1 *) UIDENT
minimal(tycon_expr) = (* 1 *) UIDENT
minimal(top) = (* 1 *) NATURAL
minimal(strings) = (* 1 *) STRING
minimal(string_choices) = (* 1 *) STRING
minimal(string) = (* 1 *) STRING
minimal(rew_clauses1) = (* 3 *) ANY COLON POSFLOAT
minimal(rew_clauses) = (* 3 *) ANY COLON POSFLOAT
minimal(rew_clause) = (* 3 *) ANY COLON POSFLOAT
minimal(pats) = (* 1 *) ANY
minimal(pat) = (* 1 *) ANY
minimal(params) = (* 1 *) POSFLOAT
minimal(param_decls) = (* 2 *) LIDENT NATURAL
minimal(param_decl) = (* 2 *) LIDENT NATURAL
minimal(other_type_expr) = (* 1 *) SYMBOL
minimal(opt_vars) = (* 0 *)
minimal(opt_type_exprs) = (* 0 *)
minimal(opt_type_args) = (* 0 *)
minimal(opt_sqparen_type_exprs) = (* 0 *)
minimal(opt_semicolon) = (* 0 *)
minimal(opt_paren_type_exprs) = (* 0 *)
minimal(opt_paren_type_args) = (* 0 *)
minimal(opt_paren_pats) = (* 0 *)
minimal(opt_paren_exprs) = (* 0 *)
minimal(opt_named_type_exprs) = (* 0 *)
minimal(opt_named_pats) = (* 0 *)
minimal(opt_named_exprs) = (* 0 *)
minimal(opt_given) = (* 0 *)
minimal(opt_decls) = (* 0 *)
minimal(obs) = (* 1 *) LIDENT
minimal(new_type_var) = (* 1 *) LIDENT
minimal(named_type_exprs) = (* 3 *) LIDENT COLON SYMBOL
minimal(named_type_expr) = (* 3 *) LIDENT COLON SYMBOL
minimal(named_pats) = (* 3 *) LIDENT COLON ANY
minimal(named_pat) = (* 3 *) LIDENT COLON ANY
minimal(named_exprs) = (* 3 *) LIDENT COLON NATURAL
minimal(named_expr) = (* 3 *) LIDENT COLON NATURAL
minimal(longvars) = (* 1 *) LIDENT
minimal(longvar) = (* 1 *) LIDENT
minimal(let_decl) = (* 3 *) LIDENT EQUALS NATURAL
minimal(integer) = (* 1 *) NATURAL
minimal(ident) = (* 1 *) LIDENT
minimal(float) = (* 1 *) POSFLOAT
minimal(exprs) = (* 1 *) NATURAL
minimal(expr_nonint4) = (* 2 *) LIDENT PLUSPLUS
minimal(expr_nonint) = (* 1 *) LIDENT
minimal(expr4) = (* 2 *) NATURAL PLUSPLUS
minimal(expr3) = (* 1 *) STRING
minimal(expr2) = (* 1 *) LIDENT
minimal(expr1) = (* 1 *) NATURAL
minimal(expr) = (* 1 *) NATURAL
minimal(decls) = (* 2 *) OBSERVE LIDENT
minimal(decl) = (* 2 *) OBSERVE LIDENT
minimal(decide_decl) = (* 2 *) DECIDE LIDENT
minimal(clauses1) = (* 3 *) ANY COLON NATURAL
minimal(clauses) = (* 3 *) ANY COLON NATURAL
minimal(clause) = (* 3 *) ANY COLON NATURAL
minimal(arrow_type_exprs) = (* 2 *) LPAREN RPAREN
minimal(arrow_type_expr) = (* 4 *) LPAREN RPAREN MAPSTO SYMBOL
follow(weighted_exprs) = RSQUARE
follow(weighted_expr) = RSQUARE COMMA
follow(vars) = RPAREN
follow(values) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN GIVEN DECIDE DATA #
follow(ulongvar) = UNIFORM UIDENT TYPE TRUE TIMES THEN SYMBOL STRING SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE QUOTE PRIVATE PRAGMA PLUSPLUS PLUS PDIST PARAMS PARAM OP OF OBSERVE NOT NATURAL MOD MINUSMINUS MINUS LTUP LSQUARE LPAREN LIDENT LET LBRACE LAMBDA INT IN IF HASH FORALL FLIP FIX FALSE ETYPE ERROR EQUALSEQUALS EQUALS ELSE EDATA DOT DIVIDE DIST DISCOUNT DECIDE DATA CONCAT COMMA COLON CASE BOOL BAR ANY AND #
follow(type_exprs) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(type_expr) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(type_args) = RSQUARE EQUALS
follow(tycon_item) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA BAR #
follow(tycon_expr) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA #
follow(top) = #
follow(strings) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN GIVEN DECIDE DATA #
follow(string_choices) = RBRACE
follow(string) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH GIVEN EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(rew_clauses1) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA #
follow(rew_clauses) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA #
follow(rew_clause) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN HASH DECIDE DATA #
follow(pats) = RTUP RPAREN
follow(pat) = TYPE SEMICOLON RTUP RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN EQUALS DECIDE DATA COMMA COLON #
follow(params) = RSQUARE
follow(param_decls) = IN
follow(param_decl) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA #
follow(other_type_expr) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(opt_vars) = RPAREN
follow(opt_type_exprs) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(opt_type_args) = RSQUARE EQUALS
follow(opt_sqparen_type_exprs) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(opt_semicolon) = TYPE REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA
follow(opt_paren_type_exprs) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA BAR #
follow(opt_paren_type_args) = EQUALS
follow(opt_paren_pats) = TYPE SEMICOLON RTUP RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN EQUALS DECIDE DATA COMMA COLON #
follow(opt_paren_exprs) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(opt_named_type_exprs) = RTUP
follow(opt_named_pats) = RTUP
follow(opt_named_exprs) = RTUP
follow(opt_given) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA #
follow(opt_decls) = RBRACE
follow(obs) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA #
follow(new_type_var) = RSQUARE EQUALS DOT COMMA
follow(named_type_exprs) = RTUP
follow(named_type_expr) = RTUP COMMA
follow(named_pats) = RTUP
follow(named_pat) = RTUP COMMA
follow(named_exprs) = RTUP
follow(named_expr) = RTUP COMMA
follow(longvars) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN DECIDE DATA #
follow(longvar) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LPAREN LIDENT IN HASH EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(let_decl) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA #
follow(integer) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH GIVEN EQUALSEQUALS EQUALS ELSE DOTDOT DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(ident) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE NATURAL MOD MINUSMINUS MINUS LSQUARE LIDENT IN HASH GIVEN EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(float) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT IN HASH DECIDE DATA #
follow(exprs) = RTUP RSQUARE RPAREN
follow(expr_nonint4) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(expr_nonint) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(expr4) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(expr3) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(expr2) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LPAREN LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(expr1) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(expr) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(decls) = RBRACE
follow(decl) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA #
follow(decide_decl) = TYPE SEMICOLON REWARD RETRACT RBRACE PRIVATE PRAGMA PARAM OBSERVE LIDENT DECIDE DATA #
follow(clauses1) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(clauses) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(clause) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
follow(arrow_type_exprs) = MAPSTO
follow(arrow_type_expr) = TYPE TIMES THEN SEMICOLON RTUP RSQUARE RPAREN REWARD RETRACT RBRACE PRIVATE PRAGMA PLUSPLUS PLUS PARAM OF OBSERVE MOD MINUSMINUS MINUS LIDENT IN HASH EQUALSEQUALS EQUALS ELSE DOT DIVIDE DECIDE DATA CONCAT COMMA COLON BAR AND #
Built an LR(0) automaton with 505 states.
The grammar is not SLR(1) -- 57 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 572 states.
130 shift/reduce conflicts were silently solved.
Only 562 states remain after resolving shift/reduce conflicts.
Warning: 48 states have shift/reduce conflicts.
Warning: 358 shift/reduce conflicts were arbitrarily resolved.
Warning: 174 end-of-stream conflicts were arbitrarily resolved.
File "ibal.mly", line 163, characters 0-4:
Warning: symbol expr is never accepted.
File "ibal.mly", line 260, characters 7-28:
Warning: production expr_nonint4 -> expr_nonint PLUS expr is never reduced.
File "ibal.mly", line 261, characters 7-29:
Warning: production expr_nonint4 -> expr_nonint MINUS expr is never reduced.
File "ibal.mly", line 265, characters 7-30:
Warning: production expr_nonint4 -> expr_nonint CONCAT expr is never reduced.
File "ibal.mly", line 269, characters 7-27:
Warning: production expr_nonint4 -> expr_nonint AND expr is never reduced.
File "ibal.mly", line 270, characters 7-27:
Warning: production expr_nonint4 -> expr_nonint BAR expr is never reduced.
File "ibal.mly", line 160, characters 6-10:
Warning: production top -> expr is never reduced.
Warning: in total, 7 productions are never reduced.
160 out of 562 states have a default reduction.
196 out of 562 states are represented.
0 out of 147 symbols keep track of their start position.
0 out of 147 symbols keep track of their end position.
103 out of 237 productions exploit shiftreduce optimization.
866 functions before inlining, 200 functions after inlining.
