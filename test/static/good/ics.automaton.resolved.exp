State 0:
## Known stack suffix:
##
## LR(1) items:
atomeof' -> . atomeof [ # ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atomeof shift to state 183
-- On atom shift to state 184
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 1:
## Known stack suffix:
## TT
## LR(1) items:
atom -> TT . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> TT

State 2:
## Known stack suffix:
## TRUE
## LR(1) items:
boolean -> TRUE . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean -> TRUE

State 3:
## Known stack suffix:
## TAIL
## LR(1) items:
ics_list -> TAIL . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## TAIL LPAR
## LR(1) items:
ics_list -> TAIL LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 165
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 5:
## Known stack suffix:
## SUB
## LR(1) items:
bv -> SUB . LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LBRA shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## SUB LBRA
## LR(1) items:
bv -> SUB LBRA . INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## SUB LBRA INTCONST
## LR(1) items:
bv -> SUB LBRA INTCONST . COMMA INTCONST COMMA INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On COMMA shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## SUB LBRA INTCONST COMMA
## LR(1) items:
bv -> SUB LBRA INTCONST COMMA . INTCONST COMMA INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## SUB LBRA INTCONST COMMA INTCONST
## LR(1) items:
bv -> SUB LBRA INTCONST COMMA INTCONST . COMMA INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On COMMA shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## SUB LBRA INTCONST COMMA INTCONST COMMA
## LR(1) items:
bv -> SUB LBRA INTCONST COMMA INTCONST COMMA . INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST
## LR(1) items:
bv -> SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST . RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On RBRA shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA
## LR(1) items:
bv -> SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR
## LR(1) items:
bv -> SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 163
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 14:
## Known stack suffix:
## S
## LR(1) items:
apply -> S . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apply -> S

State 15:
## Known stack suffix:
## RATCONST
## LR(1) items:
rat -> RATCONST . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rat -> RATCONST

State 16:
## Known stack suffix:
## OUTR
## LR(1) items:
coproduct -> OUTR . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## OUTR LPAR
## LR(1) items:
coproduct -> OUTR LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 161
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 18:
## Known stack suffix:
## OUTL
## LR(1) items:
coproduct -> OUTL . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## OUTL LPAR
## LR(1) items:
coproduct -> OUTL LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 159
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 20:
## Known stack suffix:
## OUT
## LR(1) items:
coproduct -> OUT . LBRA INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LBRA shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## OUT LBRA
## LR(1) items:
coproduct -> OUT LBRA . INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## OUT LBRA INTCONST
## LR(1) items:
coproduct -> OUT LBRA INTCONST . RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On RBRA shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## OUT LBRA INTCONST RBRA
## LR(1) items:
coproduct -> OUT LBRA INTCONST RBRA . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## OUT LBRA INTCONST RBRA LPAR
## LR(1) items:
coproduct -> OUT LBRA INTCONST RBRA LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 157
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 25:
## Known stack suffix:
## NIL
## LR(1) items:
ics_list -> NIL . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ics_list -> NIL

State 26:
## Known stack suffix:
## MINUS
## LR(1) items:
arith -> MINUS . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 156
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 27:
## Known stack suffix:
## LPAR
## LR(1) items:
term -> LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 154
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 28:
## Known stack suffix:
## LAMBDA
## LR(1) items:
apply -> LAMBDA . namelist COLON term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On IDENT shift to state 29
-- On namelist shift to state 30
-- On name shift to state 153
## Reductions:

State 29:
## Known stack suffix:
## IDENT
## LR(1) items:
name -> IDENT . [ XOR UNION TT TRUE TIMES THEN TAIL SUBSET SUB S RPAR RBRA RATCONST PLUS OUTR OUTL OUT NIL NEG MINUS LPAR LISTCONS LESSOREQUAL LESS LCUR LBRA LAMBDA K INTER INTCONST INR INL INJ IMPL IF IDENT I HEAD GREATEROREQUAL GREATER FULL FF FALSE EXPT EQUAL EOF END EMPTY ELSE DOT DISJ DISEQ CREATE CONS CONJ CONC COMPL COMMA COLON CMP CDR CAR C BVCONST BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> IDENT

State 30:
## Known stack suffix:
## LAMBDA namelist
## LR(1) items:
apply -> LAMBDA namelist . COLON term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
namelist -> namelist . COMMA name [ COMMA COLON ]
## Transitions:
-- On COMMA shift to state 31
-- On COLON shift to state 33
## Reductions:

State 31:
## Known stack suffix:
## namelist COMMA
## LR(1) items:
namelist -> namelist COMMA . name [ COMMA COLON ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## namelist COMMA name
## LR(1) items:
namelist -> namelist COMMA name . [ COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production namelist -> namelist COMMA name

State 33:
## Known stack suffix:
## LAMBDA namelist COLON
## LR(1) items:
apply -> LAMBDA namelist COLON . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 152
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 34:
## Known stack suffix:
## K
## LR(1) items:
apply -> K . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apply -> K

State 35:
## Known stack suffix:
## INTCONST
## LR(1) items:
int -> INTCONST . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production int -> INTCONST

State 36:
## Known stack suffix:
## INR
## LR(1) items:
coproduct -> INR . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## INR LPAR
## LR(1) items:
coproduct -> INR LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 150
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 38:
## Known stack suffix:
## INL
## LR(1) items:
coproduct -> INL . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## INL LPAR
## LR(1) items:
coproduct -> INL LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 148
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 40:
## Known stack suffix:
## INJ
## LR(1) items:
coproduct -> INJ . LBRA INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LBRA shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## INJ LBRA
## LR(1) items:
coproduct -> INJ LBRA . INTCONST RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## INJ LBRA INTCONST
## LR(1) items:
coproduct -> INJ LBRA INTCONST . RBRA LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On RBRA shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## INJ LBRA INTCONST RBRA
## LR(1) items:
coproduct -> INJ LBRA INTCONST RBRA . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## INJ LBRA INTCONST RBRA LPAR
## LR(1) items:
coproduct -> INJ LBRA INTCONST RBRA LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 146
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 45:
## Known stack suffix:
## I
## LR(1) items:
apply -> I . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apply -> I

State 46:
## Known stack suffix:
## HEAD
## LR(1) items:
ics_list -> HEAD . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## HEAD LPAR
## LR(1) items:
ics_list -> HEAD LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 144
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 48:
## Known stack suffix:
## FULL
## LR(1) items:
propset -> FULL . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production propset -> FULL

State 49:
## Known stack suffix:
## FALSE
## LR(1) items:
boolean -> FALSE . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean -> FALSE

State 50:
## Known stack suffix:
## EMPTY
## LR(1) items:
propset -> EMPTY . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production propset -> EMPTY

State 51:
## Known stack suffix:
## CREATE
## LR(1) items:
array -> CREATE . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## CREATE LPAR
## LR(1) items:
array -> CREATE LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 142
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 53:
## Known stack suffix:
## CONS
## LR(1) items:
product -> CONS . LPAR term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## CONS LPAR
## LR(1) items:
product -> CONS LPAR . term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 138
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 55:
## Known stack suffix:
## CONC
## LR(1) items:
bv -> CONC . LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LBRA shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## CONC LBRA
## LR(1) items:
bv -> CONC LBRA . INTCONST COMMA INTCONST RBRA LPAR term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## CONC LBRA INTCONST
## LR(1) items:
bv -> CONC LBRA INTCONST . COMMA INTCONST RBRA LPAR term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On COMMA shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## CONC LBRA INTCONST COMMA
## LR(1) items:
bv -> CONC LBRA INTCONST COMMA . INTCONST RBRA LPAR term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## CONC LBRA INTCONST COMMA INTCONST
## LR(1) items:
bv -> CONC LBRA INTCONST COMMA INTCONST . RBRA LPAR term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On RBRA shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## CONC LBRA INTCONST COMMA INTCONST RBRA
## LR(1) items:
bv -> CONC LBRA INTCONST COMMA INTCONST RBRA . LPAR term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## CONC LBRA INTCONST COMMA INTCONST RBRA LPAR
## LR(1) items:
bv -> CONC LBRA INTCONST COMMA INTCONST RBRA LPAR . term COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 134
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 62:
## Known stack suffix:
## COMPL
## LR(1) items:
propset -> COMPL . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 133
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 63:
## Known stack suffix:
## CDR
## LR(1) items:
product -> CDR . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## CDR LPAR
## LR(1) items:
product -> CDR LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 131
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 65:
## Known stack suffix:
## CAR
## LR(1) items:
product -> CAR . LPAR term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## CAR LPAR
## LR(1) items:
product -> CAR LPAR . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 70
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 67:
## Known stack suffix:
## C
## LR(1) items:
apply -> C . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apply -> C

State 68:
## Known stack suffix:
## BVCONST
## LR(1) items:
bv -> BVCONST . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bv -> BVCONST

State 69:
## Known stack suffix:
## var
## LR(1) items:
term -> var . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> var

State 70:
## Known stack suffix:
## CAR LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
product -> CAR LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 130
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 71:
## Known stack suffix:
## term UNION
## LR(1) items:
propset -> term UNION . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 72
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 72:
## Known stack suffix:
## term UNION term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term UNION term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
## Reductions:
-- On XOR THEN SUBSET RPAR RBRA LESSOREQUAL LESS IMPL GREATEROREQUAL GREATER EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production propset -> term UNION term

State 73:
## Known stack suffix:
## term TIMES
## LR(1) items:
arith -> term TIMES . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 74
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 74:
## Known stack suffix:
## term TIMES term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term TIMES term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
## Reductions:
-- On XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LESSOREQUAL LESS INTER IMPL GREATEROREQUAL GREATER EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production arith -> term TIMES term

State 75:
## Known stack suffix:
## term LISTCONS
## LR(1) items:
ics_list -> term LISTCONS . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 76
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 76:
## Known stack suffix:
## term LISTCONS term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term LISTCONS term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On BVCONC shift to state 88
## Reductions:
-- On XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LESSOREQUAL LESS INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production ics_list -> term LISTCONS term

State 77:
## Known stack suffix:
## term LBRA
## LR(1) items:
array -> term LBRA . term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term LBRA . term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term LBRA . INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 78
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 82
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 78:
## Known stack suffix:
## term LBRA INTCONST
## LR(1) items:
bv -> term LBRA INTCONST . COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
int -> INTCONST . [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
## Transitions:
-- On COLON shift to state 79
## Reductions:
-- On UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY
--   reduce production int -> INTCONST

State 79:
## Known stack suffix:
## term LBRA INTCONST COLON
## LR(1) items:
bv -> term LBRA INTCONST COLON . INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## term LBRA INTCONST COLON INTCONST
## LR(1) items:
bv -> term LBRA INTCONST COLON INTCONST . RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On RBRA shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## term LBRA INTCONST COLON INTCONST RBRA
## LR(1) items:
bv -> term LBRA INTCONST COLON INTCONST RBRA . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bv -> term LBRA INTCONST COLON INTCONST RBRA

State 82:
## Known stack suffix:
## term LBRA term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
arith -> term . PLUS term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
arith -> term . MINUS term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
arith -> term . TIMES term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
arith -> term . EXPT int [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
array -> term LBRA term . ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
array -> term LBRA term . RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
propset -> term . UNION term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
propset -> term . INTER term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC ASSIGN APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RBRA shift to state 83
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On ASSIGN shift to state 127
-- On APPLY shift to state 124
## Reductions:

State 83:
## Known stack suffix:
## term LBRA term RBRA
## LR(1) items:
array -> term LBRA term RBRA . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array -> term LBRA term RBRA

State 84:
## Known stack suffix:
## term PLUS
## LR(1) items:
arith -> term PLUS . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 85
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 85:
## Known stack suffix:
## term PLUS term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term PLUS term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TIMES shift to state 73
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
## Reductions:
-- On XOR UNION THEN SUBSET RPAR RBRA PLUS MINUS LESSOREQUAL LESS INTER IMPL GREATEROREQUAL GREATER EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production arith -> term PLUS term

State 86:
## Known stack suffix:
## term EXPT
## LR(1) items:
arith -> term EXPT . int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On INTCONST shift to state 35
-- On int shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## term EXPT int
## LR(1) items:
arith -> term EXPT int . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arith -> term EXPT int

State 88:
## Known stack suffix:
## term BVCONC
## LR(1) items:
bv -> term BVCONC . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 89
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 89:
## Known stack suffix:
## term BVCONC term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term BVCONC term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LBRA shift to state 77
-- On BVCONC shift to state 88
## Reductions:
-- On XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production bv -> term BVCONC term

State 90:
## Known stack suffix:
## rat
## LR(1) items:
arith -> rat . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arith -> rat

State 91:
## Known stack suffix:
## propset
## LR(1) items:
term -> propset . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> propset

State 92:
## Known stack suffix:
## product
## LR(1) items:
term -> product . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> product

State 93:
## Known stack suffix:
## name
## LR(1) items:
funsym -> name . [ LPAR ]
var -> name . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
var -> name . LCUR cnstrnt RCUR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LCUR shift to state 94
## Reductions:
-- On LPAR
--   reduce production funsym -> name
-- On XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY
--   reduce production var -> name

State 94:
## Known stack suffix:
## name LCUR
## LR(1) items:
var -> name LCUR . cnstrnt RCUR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On REAL shift to state 95
-- On INT shift to state 96
-- On BV shift to state 97
-- On signature shift to state 101
-- On dom shift to state 102
-- On cnstrnt shift to state 103
## Reductions:

State 95:
## Known stack suffix:
## REAL
## LR(1) items:
dom -> REAL . [ RCUR EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dom -> REAL

State 96:
## Known stack suffix:
## INT
## LR(1) items:
dom -> INT . [ RCUR EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production dom -> INT

State 97:
## Known stack suffix:
## BV
## LR(1) items:
signature -> BV . LBRA INTCONST RBRA [ RCUR EOF DOT ]
## Transitions:
-- On LBRA shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## BV LBRA
## LR(1) items:
signature -> BV LBRA . INTCONST RBRA [ RCUR EOF DOT ]
## Transitions:
-- On INTCONST shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## BV LBRA INTCONST
## LR(1) items:
signature -> BV LBRA INTCONST . RBRA [ RCUR EOF DOT ]
## Transitions:
-- On RBRA shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## BV LBRA INTCONST RBRA
## LR(1) items:
signature -> BV LBRA INTCONST RBRA . [ RCUR EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> BV LBRA INTCONST RBRA

State 101:
## Known stack suffix:
## signature
## LR(1) items:
cnstrnt -> signature . [ RCUR EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnstrnt -> signature

State 102:
## Known stack suffix:
## dom
## LR(1) items:
cnstrnt -> dom . [ RCUR EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cnstrnt -> dom

State 103:
## Known stack suffix:
## name LCUR cnstrnt
## LR(1) items:
var -> name LCUR cnstrnt . RCUR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On RCUR shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## name LCUR cnstrnt RCUR
## LR(1) items:
var -> name LCUR cnstrnt RCUR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production var -> name LCUR cnstrnt RCUR

State 105:
## Known stack suffix:
## int
## LR(1) items:
rat -> int . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rat -> int

State 106:
## Known stack suffix:
## ics_list
## LR(1) items:
term -> ics_list . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> ics_list

State 107:
## Known stack suffix:
## funsym
## LR(1) items:
app -> funsym . LPAR termlist RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On LPAR shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## funsym LPAR
## LR(1) items:
app -> funsym LPAR . termlist RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On termlist shift to state 109
-- On term shift to state 126
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:
-- On RPAR COMMA
--   reduce production termlist ->

State 109:
## Known stack suffix:
## funsym LPAR termlist
## LR(1) items:
app -> funsym LPAR termlist . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
termlist -> termlist . COMMA term [ RPAR COMMA ]
## Transitions:
-- On RPAR shift to state 110
-- On COMMA shift to state 111
## Reductions:

State 110:
## Known stack suffix:
## funsym LPAR termlist RPAR
## LR(1) items:
app -> funsym LPAR termlist RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production app -> funsym LPAR termlist RPAR

State 111:
## Known stack suffix:
## termlist COMMA
## LR(1) items:
termlist -> termlist COMMA . term [ RPAR COMMA ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 112
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 112:
## Known stack suffix:
## termlist COMMA term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
termlist -> termlist COMMA term . [ RPAR COMMA ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On RPAR COMMA
--   reduce production termlist -> termlist COMMA term

State 113:
## Known stack suffix:
## term MINUS
## LR(1) items:
arith -> term MINUS . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 114
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 114:
## Known stack suffix:
## term MINUS term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term MINUS term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TIMES shift to state 73
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
## Reductions:
-- On XOR UNION THEN SUBSET RPAR RBRA PLUS MINUS LESSOREQUAL LESS INTER IMPL GREATEROREQUAL GREATER EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production arith -> term MINUS term

State 115:
## Known stack suffix:
## coproduct
## LR(1) items:
term -> coproduct . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> coproduct

State 116:
## Known stack suffix:
## bv
## LR(1) items:
term -> bv . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> bv

State 117:
## Known stack suffix:
## boolean
## LR(1) items:
term -> boolean . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> boolean

State 118:
## Known stack suffix:
## array
## LR(1) items:
term -> array . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> array

State 119:
## Known stack suffix:
## arith
## LR(1) items:
term -> arith . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> arith

State 120:
## Known stack suffix:
## apply
## LR(1) items:
term -> apply . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> apply

State 121:
## Known stack suffix:
## app
## LR(1) items:
term -> app . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> app

State 122:
## Known stack suffix:
## term INTER
## LR(1) items:
propset -> term INTER . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 123
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 123:
## Known stack suffix:
## term INTER term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term INTER term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
## Reductions:
-- On XOR UNION THEN SUBSET RPAR RBRA LESSOREQUAL LESS IMPL GREATEROREQUAL GREATER EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production propset -> term INTER term

State 124:
## Known stack suffix:
## term APPLY
## LR(1) items:
apply -> term APPLY . term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 125
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 125:
## Known stack suffix:
## term APPLY term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
apply -> term APPLY term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
## Reductions:
-- On XOR THEN SUBSET RPAR RBRA LESSOREQUAL LESS IMPL GREATEROREQUAL GREATER EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BIIMPL ASSIGN APPLY
--   reduce production apply -> term APPLY term

State 126:
## Known stack suffix:
## term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
termlist -> term . [ RPAR COMMA ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On RPAR COMMA
--   reduce production termlist -> term

State 127:
## Known stack suffix:
## term LBRA term ASSIGN
## LR(1) items:
array -> term LBRA term ASSIGN . term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 128
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 128:
## Known stack suffix:
## term LBRA term ASSIGN term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term LBRA term ASSIGN term . RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RBRA PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RBRA shift to state 129
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 129:
## Known stack suffix:
## term LBRA term ASSIGN term RBRA
## LR(1) items:
array -> term LBRA term ASSIGN term RBRA . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array -> term LBRA term ASSIGN term RBRA

State 130:
## Known stack suffix:
## CAR LPAR term RPAR
## LR(1) items:
product -> CAR LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production product -> CAR LPAR term RPAR

State 131:
## Known stack suffix:
## CDR LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
product -> CDR LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 132
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 132:
## Known stack suffix:
## CDR LPAR term RPAR
## LR(1) items:
product -> CDR LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production product -> CDR LPAR term RPAR

State 133:
## Known stack suffix:
## COMPL term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> COMPL term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production propset -> COMPL term

State 134:
## Known stack suffix:
## CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term . COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On COMMA shift to state 135
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 135:
## Known stack suffix:
## CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA
## LR(1) items:
bv -> CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 136
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 136:
## Known stack suffix:
## CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 137
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 137:
## Known stack suffix:
## CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA term RPAR
## LR(1) items:
bv -> CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bv -> CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA term RPAR

State 138:
## Known stack suffix:
## CONS LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
product -> CONS LPAR term . COMMA term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT COMMA BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On COMMA shift to state 139
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 139:
## Known stack suffix:
## CONS LPAR term COMMA
## LR(1) items:
product -> CONS LPAR term COMMA . term RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 140
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 140:
## Known stack suffix:
## CONS LPAR term COMMA term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
product -> CONS LPAR term COMMA term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 141
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 141:
## Known stack suffix:
## CONS LPAR term COMMA term RPAR
## LR(1) items:
product -> CONS LPAR term COMMA term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production product -> CONS LPAR term COMMA term RPAR

State 142:
## Known stack suffix:
## CREATE LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> CREATE LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 143
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 143:
## Known stack suffix:
## CREATE LPAR term RPAR
## LR(1) items:
array -> CREATE LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array -> CREATE LPAR term RPAR

State 144:
## Known stack suffix:
## HEAD LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> HEAD LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 145
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 145:
## Known stack suffix:
## HEAD LPAR term RPAR
## LR(1) items:
ics_list -> HEAD LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ics_list -> HEAD LPAR term RPAR

State 146:
## Known stack suffix:
## INJ LBRA INTCONST RBRA LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
coproduct -> INJ LBRA INTCONST RBRA LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 147
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 147:
## Known stack suffix:
## INJ LBRA INTCONST RBRA LPAR term RPAR
## LR(1) items:
coproduct -> INJ LBRA INTCONST RBRA LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coproduct -> INJ LBRA INTCONST RBRA LPAR term RPAR

State 148:
## Known stack suffix:
## INL LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
coproduct -> INL LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 149
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 149:
## Known stack suffix:
## INL LPAR term RPAR
## LR(1) items:
coproduct -> INL LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coproduct -> INL LPAR term RPAR

State 150:
## Known stack suffix:
## INR LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
coproduct -> INR LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 151
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 151:
## Known stack suffix:
## INR LPAR term RPAR
## LR(1) items:
coproduct -> INR LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coproduct -> INR LPAR term RPAR

State 152:
## Known stack suffix:
## LAMBDA namelist COLON term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
apply -> LAMBDA namelist COLON term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apply -> LAMBDA namelist COLON term

State 153:
## Known stack suffix:
## name
## LR(1) items:
namelist -> name . [ COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production namelist -> name

State 154:
## Known stack suffix:
## LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
term -> LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 155
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 155:
## Known stack suffix:
## LPAR term RPAR
## LR(1) items:
term -> LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> LPAR term RPAR

State 156:
## Known stack suffix:
## MINUS term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> MINUS term . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arith -> MINUS term

State 157:
## Known stack suffix:
## OUT LBRA INTCONST RBRA LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
coproduct -> OUT LBRA INTCONST RBRA LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 158
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 158:
## Known stack suffix:
## OUT LBRA INTCONST RBRA LPAR term RPAR
## LR(1) items:
coproduct -> OUT LBRA INTCONST RBRA LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coproduct -> OUT LBRA INTCONST RBRA LPAR term RPAR

State 159:
## Known stack suffix:
## OUTL LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
coproduct -> OUTL LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 160
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 160:
## Known stack suffix:
## OUTL LPAR term RPAR
## LR(1) items:
coproduct -> OUTL LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coproduct -> OUTL LPAR term RPAR

State 161:
## Known stack suffix:
## OUTR LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
coproduct -> OUTR LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 162
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 162:
## Known stack suffix:
## OUTR LPAR term RPAR
## LR(1) items:
coproduct -> OUTR LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production coproduct -> OUTR LPAR term RPAR

State 163:
## Known stack suffix:
## SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 164
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 164:
## Known stack suffix:
## SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term RPAR
## LR(1) items:
bv -> SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bv -> SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term RPAR

State 165:
## Known stack suffix:
## TAIL LPAR term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
ics_list -> TAIL LPAR term . RPAR [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
propset -> term . UNION term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES RPAR PLUS MINUS LISTCONS LBRA INTER EXPT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On RPAR shift to state 166
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 166:
## Known stack suffix:
## TAIL LPAR term RPAR
## LR(1) items:
ics_list -> TAIL LPAR term RPAR . [ XOR UNION TIMES THEN SUBSET RPAR RBRA PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER IMPL GREATEROREQUAL GREATER EXPT EQUAL EOF END ELSE DOT DISJ DISEQ CONJ COMMA CMP BVCONC BIIMPL ASSIGN APPLY ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ics_list -> TAIL LPAR term RPAR

State 167:
## Known stack suffix:
## FF
## LR(1) items:
atom -> FF . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> FF

State 168:
## Known stack suffix:
## term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
atom -> term . EQUAL term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
atom -> term . DISEQ term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
atom -> term . LESS term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
atom -> term . GREATER term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
atom -> term . LESSOREQUAL term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
atom -> term . GREATEROREQUAL term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
atom -> term . SUBSET term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On SUBSET shift to state 169
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LESSOREQUAL shift to state 171
-- On LESS shift to state 173
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On GREATEROREQUAL shift to state 175
-- On GREATER shift to state 177
-- On EXPT shift to state 86
-- On EQUAL shift to state 179
-- On DISEQ shift to state 181
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 169:
## Known stack suffix:
## term SUBSET
## LR(1) items:
atom -> term SUBSET . term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 170
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 170:
## Known stack suffix:
## term SUBSET term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
atom -> term SUBSET term . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL
--   reduce production atom -> term SUBSET term

State 171:
## Known stack suffix:
## term LESSOREQUAL
## LR(1) items:
atom -> term LESSOREQUAL . term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 172
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 172:
## Known stack suffix:
## term LESSOREQUAL term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
atom -> term LESSOREQUAL term . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL
--   reduce production atom -> term LESSOREQUAL term

State 173:
## Known stack suffix:
## term LESS
## LR(1) items:
atom -> term LESS . term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 174
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 174:
## Known stack suffix:
## term LESS term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
atom -> term LESS term . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL
--   reduce production atom -> term LESS term

State 175:
## Known stack suffix:
## term GREATEROREQUAL
## LR(1) items:
atom -> term GREATEROREQUAL . term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 176
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 176:
## Known stack suffix:
## term GREATEROREQUAL term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
atom -> term GREATEROREQUAL term . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL
--   reduce production atom -> term GREATEROREQUAL term

State 177:
## Known stack suffix:
## term GREATER
## LR(1) items:
atom -> term GREATER . term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 178
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 178:
## Known stack suffix:
## term GREATER term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
atom -> term GREATER term . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL
--   reduce production atom -> term GREATER term

State 179:
## Known stack suffix:
## term EQUAL
## LR(1) items:
atom -> term EQUAL . term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 180
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 180:
## Known stack suffix:
## term EQUAL term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
atom -> term EQUAL term . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL
--   reduce production atom -> term EQUAL term

State 181:
## Known stack suffix:
## term DISEQ
## LR(1) items:
atom -> term DISEQ . term [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 182
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 182:
## Known stack suffix:
## term DISEQ term
## LR(1) items:
apply -> term . APPLY term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . PLUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . MINUS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . TIMES term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
arith -> term . EXPT int [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
array -> term . LBRA term RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
atom -> term DISEQ term . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL ]
bv -> term . BVCONC term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
ics_list -> term . LISTCONS term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . UNION term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
propset -> term . INTER term [ XOR UNION TIMES THEN RBRA PLUS MINUS LISTCONS LBRA INTER IMPL EXPT EOF END ELSE DOT DISJ CONJ COMMA BVCONC BIIMPL APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ COMMA BIIMPL
--   reduce production atom -> term DISEQ term

State 183:
## Known stack suffix:
## atomeof
## LR(1) items:
atomeof' -> atomeof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept atomeof

State 184:
## Known stack suffix:
## atom
## LR(1) items:
atomeof -> atom . EOF [ # ]
## Transitions:
-- On EOF shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## atom EOF
## LR(1) items:
atomeof -> atom EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production atomeof -> atom EOF

State 186:
## Known stack suffix:
##
## LR(1) items:
commands' -> . commands [ # ]
## Transitions:
-- On VALID shift to state 187
-- On USE shift to state 195
-- On UNTRACE shift to state 200
-- On UNSAT shift to state 205
-- On UNDO shift to state 208
-- On TRUE shift to state 2
-- On TRACE shift to state 209
-- On TAIL shift to state 3
-- On SYMTAB shift to state 211
-- On SUP shift to state 213
-- On SUB shift to state 5
-- On SPLIT shift to state 216
-- On SOLVE shift to state 218
-- On SIMPLIFY shift to state 223
-- On SIGMA shift to state 225
-- On SIG shift to state 227
-- On SHOW shift to state 234
-- On SAVE shift to state 238
-- On SAT shift to state 240
-- On S shift to state 14
-- On RESTORE shift to state 267
-- On RESET shift to state 269
-- On REMOVE shift to state 270
-- On RATCONST shift to state 15
-- On PROP shift to state 272
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MODEL shift to state 276
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INV shift to state 279
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On INF shift to state 283
-- On IDENT shift to state 286
-- On I shift to state 45
-- On HELP shift to state 287
-- On HEAD shift to state 46
-- On GET shift to state 330
-- On FULL shift to state 48
-- On FORGET shift to state 333
-- On FIND shift to state 334
-- On FALSE shift to state 49
-- On EXIT shift to state 338
-- On EOF shift to state 339
-- On EMPTY shift to state 50
-- On ECHO shift to state 340
-- On DROP shift to state 342
-- On DOM shift to state 343
-- On DISEQ shift to state 346
-- On DEF shift to state 349
-- On CTXT shift to state 353
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CHECK shift to state 355
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On CAN shift to state 357
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On ASSERT shift to state 359
-- On varname shift to state 364
-- On var shift to state 69
-- On term shift to state 370
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On help shift to state 373
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On commands shift to state 374
-- On command shift to state 375
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 187:
## Known stack suffix:
## VALID
## LR(1) items:
command -> VALID . optname atomlist [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 190
## Reductions:
-- On TT TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FF FALSE EOF EMPTY DOT CREATE CONS CONC COMPL COMMA CDR CAR C BVCONST
--   reduce production optname ->

State 188:
## Known stack suffix:
## KLAMMERAFFE
## LR(1) items:
optname -> KLAMMERAFFE . name [ TT TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL NEG MINUS LPAR LBRA LAMBDA K INTCONST INR INL INJ IF IDENT I HEAD FULL FF FALSE EOF EMPTY DOT CREATE CONS CONC COMPL COMMA CDR CAR C BVCONST ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## KLAMMERAFFE name
## LR(1) items:
optname -> KLAMMERAFFE name . [ TT TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL NEG MINUS LPAR LBRA LAMBDA K INTCONST INR INL INJ IF IDENT I HEAD FULL FF FALSE EOF EMPTY DOT CREATE CONS CONC COMPL COMMA CDR CAR C BVCONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optname -> KLAMMERAFFE name

State 190:
## Known stack suffix:
## VALID optname
## LR(1) items:
command -> VALID optname . atomlist [ EOF DOT ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atomlist shift to state 191
-- On atom shift to state 194
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:
-- On EOF DOT COMMA
--   reduce production atomlist ->

State 191:
## Known stack suffix:
## VALID optname atomlist
## LR(1) items:
atomlist -> atomlist . COMMA atom [ EOF DOT COMMA ]
command -> VALID optname atomlist . [ EOF DOT ]
## Transitions:
-- On COMMA shift to state 192
## Reductions:
-- On EOF DOT
--   reduce production command -> VALID optname atomlist

State 192:
## Known stack suffix:
## atomlist COMMA
## LR(1) items:
atomlist -> atomlist COMMA . atom [ EOF DOT COMMA ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 193
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 193:
## Known stack suffix:
## atomlist COMMA atom
## LR(1) items:
atomlist -> atomlist COMMA atom . [ EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomlist -> atomlist COMMA atom

State 194:
## Known stack suffix:
## atom
## LR(1) items:
atomlist -> atom . [ EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atomlist -> atom

State 195:
## Known stack suffix:
## USE
## LR(1) items:
command -> USE . optname th term [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 196
## Reductions:
-- On IDENT
--   reduce production optname ->

State 196:
## Known stack suffix:
## USE optname
## LR(1) items:
command -> USE optname . th term [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 197
-- On th shift to state 198
## Reductions:

State 197:
## Known stack suffix:
## IDENT
## LR(1) items:
th -> IDENT . [ TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FALSE EMPTY CREATE CONS CONC COMPL CDR CAR C BVCONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production th -> IDENT

State 198:
## Known stack suffix:
## USE optname th
## LR(1) items:
command -> USE optname th . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 199
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 199:
## Known stack suffix:
## USE optname th term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> USE optname th term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> USE optname th term

State 200:
## Known stack suffix:
## UNTRACE
## LR(1) items:
command -> UNTRACE . [ EOF DOT ]
command -> UNTRACE . identlist [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 201
-- On identlist shift to state 202
## Reductions:
-- On EOF DOT
--   reduce production command -> UNTRACE

State 201:
## Known stack suffix:
## IDENT
## LR(1) items:
identlist -> IDENT . [ EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identlist -> IDENT

State 202:
## Known stack suffix:
## UNTRACE identlist
## LR(1) items:
command -> UNTRACE identlist . [ EOF DOT ]
identlist -> identlist . COMMA IDENT [ EOF DOT COMMA ]
## Transitions:
-- On COMMA shift to state 203
## Reductions:
-- On EOF DOT
--   reduce production command -> UNTRACE identlist

State 203:
## Known stack suffix:
## identlist COMMA
## LR(1) items:
identlist -> identlist COMMA . IDENT [ EOF DOT COMMA ]
## Transitions:
-- On IDENT shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## identlist COMMA IDENT
## LR(1) items:
identlist -> identlist COMMA IDENT . [ EOF DOT COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identlist -> identlist COMMA IDENT

State 205:
## Known stack suffix:
## UNSAT
## LR(1) items:
command -> UNSAT . optname atomlist [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 206
## Reductions:
-- On TT TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FF FALSE EOF EMPTY DOT CREATE CONS CONC COMPL COMMA CDR CAR C BVCONST
--   reduce production optname ->

State 206:
## Known stack suffix:
## UNSAT optname
## LR(1) items:
command -> UNSAT optname . atomlist [ EOF DOT ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atomlist shift to state 207
-- On atom shift to state 194
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:
-- On EOF DOT COMMA
--   reduce production atomlist ->

State 207:
## Known stack suffix:
## UNSAT optname atomlist
## LR(1) items:
atomlist -> atomlist . COMMA atom [ EOF DOT COMMA ]
command -> UNSAT optname atomlist . [ EOF DOT ]
## Transitions:
-- On COMMA shift to state 192
## Reductions:
-- On EOF DOT
--   reduce production command -> UNSAT optname atomlist

State 208:
## Known stack suffix:
## UNDO
## LR(1) items:
command -> UNDO . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> UNDO

State 209:
## Known stack suffix:
## TRACE
## LR(1) items:
command -> TRACE . identlist [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 201
-- On identlist shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## TRACE identlist
## LR(1) items:
command -> TRACE identlist . [ EOF DOT ]
identlist -> identlist . COMMA IDENT [ EOF DOT COMMA ]
## Transitions:
-- On COMMA shift to state 203
## Reductions:
-- On EOF DOT
--   reduce production command -> TRACE identlist

State 211:
## Known stack suffix:
## SYMTAB
## LR(1) items:
command -> SYMTAB . [ EOF DOT ]
command -> SYMTAB . name [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 212
## Reductions:
-- On EOF DOT
--   reduce production command -> SYMTAB

State 212:
## Known stack suffix:
## SYMTAB name
## LR(1) items:
command -> SYMTAB name . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> SYMTAB name

State 213:
## Known stack suffix:
## SUP
## LR(1) items:
command -> SUP . optname term [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 214
## Reductions:
-- On TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FALSE EMPTY CREATE CONS CONC COMPL CDR CAR C BVCONST
--   reduce production optname ->

State 214:
## Known stack suffix:
## SUP optname
## LR(1) items:
command -> SUP optname . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 215
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 215:
## Known stack suffix:
## SUP optname term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> SUP optname term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> SUP optname term

State 216:
## Known stack suffix:
## SPLIT
## LR(1) items:
command -> SPLIT . optname [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 217
## Reductions:
-- On EOF DOT
--   reduce production optname ->

State 217:
## Known stack suffix:
## SPLIT optname
## LR(1) items:
command -> SPLIT optname . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> SPLIT optname

State 218:
## Known stack suffix:
## SOLVE
## LR(1) items:
command -> SOLVE . th term EQUAL term [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 197
-- On th shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## SOLVE th
## LR(1) items:
command -> SOLVE th . term EQUAL term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 220
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 220:
## Known stack suffix:
## SOLVE th term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
command -> SOLVE th term . EQUAL term [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EQUAL BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On EQUAL shift to state 221
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 221:
## Known stack suffix:
## SOLVE th term EQUAL
## LR(1) items:
command -> SOLVE th term EQUAL . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 222
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 222:
## Known stack suffix:
## SOLVE th term EQUAL term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> SOLVE th term EQUAL term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> SOLVE th term EQUAL term

State 223:
## Known stack suffix:
## SIMPLIFY
## LR(1) items:
command -> SIMPLIFY . atom [ EOF DOT ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 224
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 224:
## Known stack suffix:
## SIMPLIFY atom
## LR(1) items:
command -> SIMPLIFY atom . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> SIMPLIFY atom

State 225:
## Known stack suffix:
## SIGMA
## LR(1) items:
command -> SIGMA . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 226
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 226:
## Known stack suffix:
## SIGMA term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> SIGMA term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> SIGMA term

State 227:
## Known stack suffix:
## SIG
## LR(1) items:
command -> SIG . name COLON cnstrnt [ EOF DOT ]
command -> SIG . namelist COLON cnstrnt [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 29
-- On namelist shift to state 228
-- On name shift to state 231
## Reductions:

State 228:
## Known stack suffix:
## SIG namelist
## LR(1) items:
command -> SIG namelist . COLON cnstrnt [ EOF DOT ]
namelist -> namelist . COMMA name [ COMMA COLON ]
## Transitions:
-- On COMMA shift to state 31
-- On COLON shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## SIG namelist COLON
## LR(1) items:
command -> SIG namelist COLON . cnstrnt [ EOF DOT ]
## Transitions:
-- On REAL shift to state 95
-- On INT shift to state 96
-- On BV shift to state 97
-- On signature shift to state 101
-- On dom shift to state 102
-- On cnstrnt shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## SIG namelist COLON cnstrnt
## LR(1) items:
command -> SIG namelist COLON cnstrnt . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> SIG namelist COLON cnstrnt

State 231:
## Known stack suffix:
## SIG name
## LR(1) items:
command -> SIG name . COLON cnstrnt [ EOF DOT ]
namelist -> name . [ COMMA COLON ]
## Transitions:
-- On COLON shift to state 232
## Reductions:
-- On COMMA
--   reduce production namelist -> name

State 232:
## Known stack suffix:
## SIG name COLON
## LR(1) items:
command -> SIG name COLON . cnstrnt [ EOF DOT ]
## Transitions:
-- On REAL shift to state 95
-- On INT shift to state 96
-- On BV shift to state 97
-- On signature shift to state 101
-- On dom shift to state 102
-- On cnstrnt shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## SIG name COLON cnstrnt
## LR(1) items:
command -> SIG name COLON cnstrnt . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> SIG name COLON cnstrnt

State 234:
## Known stack suffix:
## SHOW
## LR(1) items:
command -> SHOW . optname [ EOF DOT ]
command -> SHOW . optname eqth [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 235
## Reductions:
-- On IDENT EOF DOT
--   reduce production optname ->

State 235:
## Known stack suffix:
## SHOW optname
## LR(1) items:
command -> SHOW optname . [ EOF DOT ]
command -> SHOW optname . eqth [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 236
-- On eqth shift to state 237
## Reductions:
-- On EOF DOT
--   reduce production command -> SHOW optname

State 236:
## Known stack suffix:
## IDENT
## LR(1) items:
eqth -> IDENT . [ TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FALSE EOF EMPTY DOT CREATE CONS CONC COMPL CDR CAR C BVCONST ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production eqth -> IDENT

State 237:
## Known stack suffix:
## SHOW optname eqth
## LR(1) items:
command -> SHOW optname eqth . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> SHOW optname eqth

State 238:
## Known stack suffix:
## SAVE
## LR(1) items:
command -> SAVE . name [ EOF DOT ]
command -> SAVE . [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 239
## Reductions:
-- On EOF DOT
--   reduce production command -> SAVE

State 239:
## Known stack suffix:
## SAVE name
## LR(1) items:
command -> SAVE name . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> SAVE name

State 240:
## Known stack suffix:
## SAT
## LR(1) items:
command -> SAT . optname prop [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 241
## Reductions:
-- On TT TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL NEG MINUS LPAR LBRA LAMBDA K INTCONST INR INL INJ IF IDENT I HEAD FULL FF FALSE EMPTY CREATE CONS CONC COMPL CDR CAR C BVCONST
--   reduce production optname ->

State 241:
## Known stack suffix:
## SAT optname
## LR(1) items:
command -> SAT optname . prop [ EOF DOT ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 266
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 242:
## Known stack suffix:
## NEG
## LR(1) items:
prop -> NEG . prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 265
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 243:
## Known stack suffix:
## LBRA
## LR(1) items:
prop -> LBRA . prop RBRA [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 263
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 244:
## Known stack suffix:
## IF
## LR(1) items:
prop -> IF . prop THEN prop ELSE prop END [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 245
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 245:
## Known stack suffix:
## IF prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR THEN IMPL DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR THEN IMPL DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR THEN IMPL DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR THEN IMPL DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR THEN IMPL DISJ CONJ BIIMPL ]
prop -> IF prop . THEN prop ELSE prop END [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On THEN shift to state 258
-- On IMPL shift to state 248
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:

State 246:
## Known stack suffix:
## prop XOR
## LR(1) items:
prop -> prop XOR . prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 247
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 247:
## Known stack suffix:
## prop XOR prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop XOR prop . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:
-- On THEN RBRA EOF END ELSE DOT
--   reduce production prop -> prop XOR prop

State 248:
## Known stack suffix:
## prop IMPL
## LR(1) items:
prop -> prop IMPL . prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 249
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 249:
## Known stack suffix:
## prop IMPL prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop IMPL prop . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:
-- On THEN RBRA EOF END ELSE DOT
--   reduce production prop -> prop IMPL prop

State 250:
## Known stack suffix:
## prop DISJ
## LR(1) items:
prop -> prop DISJ . prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 251
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 251:
## Known stack suffix:
## prop DISJ prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop DISJ prop . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:
-- On THEN RBRA EOF END ELSE DOT
--   reduce production prop -> prop DISJ prop

State 252:
## Known stack suffix:
## prop CONJ
## LR(1) items:
prop -> prop CONJ . prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 253
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 253:
## Known stack suffix:
## prop CONJ prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop CONJ prop . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prop -> prop CONJ prop

State 254:
## Known stack suffix:
## name
## LR(1) items:
funsym -> name . [ LPAR ]
prop -> name . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
var -> name . [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
var -> name . LCUR cnstrnt RCUR [ UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY ]
## Transitions:
-- On LCUR shift to state 94
## Reductions:
-- On LPAR
--   reduce production funsym -> name
-- On XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL
--   reduce production prop -> name
-- On UNION TIMES SUBSET PLUS MINUS LISTCONS LESSOREQUAL LESS LBRA INTER GREATEROREQUAL GREATER EXPT EQUAL DISEQ BVCONC APPLY
--   reduce production var -> name

State 255:
## Known stack suffix:
## atom
## LR(1) items:
prop -> atom . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prop -> atom

State 256:
## Known stack suffix:
## prop BIIMPL
## LR(1) items:
prop -> prop BIIMPL . prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 257
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 257:
## Known stack suffix:
## prop BIIMPL prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop BIIMPL prop . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prop -> prop BIIMPL prop

State 258:
## Known stack suffix:
## IF prop THEN
## LR(1) items:
prop -> IF prop THEN . prop ELSE prop END [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 259
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 259:
## Known stack suffix:
## IF prop THEN prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR IMPL ELSE DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR IMPL ELSE DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR IMPL ELSE DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR IMPL ELSE DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR IMPL ELSE DISJ CONJ BIIMPL ]
prop -> IF prop THEN prop . ELSE prop END [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On ELSE shift to state 260
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:

State 260:
## Known stack suffix:
## IF prop THEN prop ELSE
## LR(1) items:
prop -> IF prop THEN prop ELSE . prop END [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 261
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 261:
## Known stack suffix:
## IF prop THEN prop ELSE prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR IMPL END DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR IMPL END DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR IMPL END DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR IMPL END DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR IMPL END DISJ CONJ BIIMPL ]
prop -> IF prop THEN prop ELSE prop . END [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On END shift to state 262
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:

State 262:
## Known stack suffix:
## IF prop THEN prop ELSE prop END
## LR(1) items:
prop -> IF prop THEN prop ELSE prop END . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prop -> IF prop THEN prop ELSE prop END

State 263:
## Known stack suffix:
## LBRA prop
## LR(1) items:
prop -> LBRA prop . RBRA [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . CONJ prop [ XOR RBRA IMPL DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR RBRA IMPL DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR RBRA IMPL DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR RBRA IMPL DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR RBRA IMPL DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On RBRA shift to state 264
-- On IMPL shift to state 248
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:

State 264:
## Known stack suffix:
## LBRA prop RBRA
## LR(1) items:
prop -> LBRA prop RBRA . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prop -> LBRA prop RBRA

State 265:
## Known stack suffix:
## NEG prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
prop -> NEG prop . [ XOR THEN RBRA IMPL EOF END ELSE DOT DISJ CONJ BIIMPL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production prop -> NEG prop

State 266:
## Known stack suffix:
## SAT optname prop
## LR(1) items:
command -> SAT optname prop . [ EOF DOT ]
prop -> prop . CONJ prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:
-- On EOF DOT
--   reduce production command -> SAT optname prop

State 267:
## Known stack suffix:
## RESTORE
## LR(1) items:
command -> RESTORE . name [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## RESTORE name
## LR(1) items:
command -> RESTORE name . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> RESTORE name

State 269:
## Known stack suffix:
## RESET
## LR(1) items:
command -> RESET . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> RESET

State 270:
## Known stack suffix:
## REMOVE
## LR(1) items:
command -> REMOVE . name [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 271
## Reductions:

State 271:
## Known stack suffix:
## REMOVE name
## LR(1) items:
command -> REMOVE name . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> REMOVE name

State 272:
## Known stack suffix:
## PROP
## LR(1) items:
command -> PROP . name ASSIGN prop [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## PROP name
## LR(1) items:
command -> PROP name . ASSIGN prop [ EOF DOT ]
## Transitions:
-- On ASSIGN shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## PROP name ASSIGN
## LR(1) items:
command -> PROP name ASSIGN . prop [ EOF DOT ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On prop shift to state 275
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 275:
## Known stack suffix:
## PROP name ASSIGN prop
## LR(1) items:
command -> PROP name ASSIGN prop . [ EOF DOT ]
prop -> prop . CONJ prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR IMPL EOF DOT DISJ CONJ BIIMPL ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:
-- On EOF DOT
--   reduce production command -> PROP name ASSIGN prop

State 276:
## Known stack suffix:
## MODEL
## LR(1) items:
command -> MODEL . optname optvarspecs [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 277
## Reductions:
-- On EOF DOT
--   reduce production optname ->

State 277:
## Known stack suffix:
## MODEL optname
## LR(1) items:
command -> MODEL optname . optvarspecs [ EOF DOT ]
## Transitions:
-- On optvarspecs shift to state 278
## Default reduction:
-- After reading the next token, reduce production optvarspecs ->

State 278:
## Known stack suffix:
## MODEL optname optvarspecs
## LR(1) items:
command -> MODEL optname optvarspecs . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> MODEL optname optvarspecs

State 279:
## Known stack suffix:
## INV
## LR(1) items:
command -> INV . optname th term [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 280
## Reductions:
-- On IDENT
--   reduce production optname ->

State 280:
## Known stack suffix:
## INV optname
## LR(1) items:
command -> INV optname . th term [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 197
-- On th shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## INV optname th
## LR(1) items:
command -> INV optname th . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 282
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 282:
## Known stack suffix:
## INV optname th term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> INV optname th term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> INV optname th term

State 283:
## Known stack suffix:
## INF
## LR(1) items:
command -> INF . optname term [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 284
## Reductions:
-- On TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FALSE EMPTY CREATE CONS CONC COMPL CDR CAR C BVCONST
--   reduce production optname ->

State 284:
## Known stack suffix:
## INF optname
## LR(1) items:
command -> INF optname . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 285
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 285:
## Known stack suffix:
## INF optname term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> INF optname term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> INF optname term

State 286:
## Known stack suffix:
## IDENT
## LR(1) items:
name -> IDENT . [ UNION TIMES PLUS MINUS LPAR LISTCONS LCUR LBRA INTER EXPT CMP BVCONC APPLY ]
varname -> IDENT . [ ASSIGN ]
## Transitions:
## Reductions:
-- On UNION TIMES PLUS MINUS LPAR LISTCONS LCUR LBRA INTER EXPT CMP BVCONC APPLY
--   reduce production name -> IDENT
-- On ASSIGN
--   reduce production varname -> IDENT

State 287:
## Known stack suffix:
## HELP
## LR(1) items:
help -> HELP . [ EOF DOT ]
help -> HELP . CAN [ EOF DOT ]
help -> HELP . HELP [ EOF DOT ]
help -> HELP . SIMPLIFY [ EOF DOT ]
help -> HELP . ASSERT [ EOF DOT ]
help -> HELP . DEF [ EOF DOT ]
help -> HELP . PROP [ EOF DOT ]
help -> HELP . SIG [ EOF DOT ]
help -> HELP . RESET [ EOF DOT ]
help -> HELP . SAVE [ EOF DOT ]
help -> HELP . RESTORE [ EOF DOT ]
help -> HELP . REMOVE [ EOF DOT ]
help -> HELP . FORGET [ EOF DOT ]
help -> HELP . VALID [ EOF DOT ]
help -> HELP . UNSAT [ EOF DOT ]
help -> HELP . EXIT [ EOF DOT ]
help -> HELP . DROP [ EOF DOT ]
help -> HELP . SYMTAB [ EOF DOT ]
help -> HELP . CTXT [ EOF DOT ]
help -> HELP . SIGMA [ EOF DOT ]
help -> HELP . CMP [ EOF DOT ]
help -> HELP . SHOW [ EOF DOT ]
help -> HELP . FIND [ EOF DOT ]
help -> HELP . INV [ EOF DOT ]
help -> HELP . USE [ EOF DOT ]
help -> HELP . DOM [ EOF DOT ]
help -> HELP . DISEQ [ EOF DOT ]
help -> HELP . SPLIT [ EOF DOT ]
help -> HELP . SOLVE [ EOF DOT ]
help -> HELP . TRACE [ EOF DOT ]
help -> HELP . UNTRACE [ EOF DOT ]
help -> HELP . SAT [ EOF DOT ]
help -> HELP . MODEL [ EOF DOT ]
help -> HELP . CHECK [ EOF DOT ]
help -> HELP . ECHO [ EOF DOT ]
help -> HELP . GET [ EOF DOT ]
help -> HELP . SUP [ EOF DOT ]
help -> HELP . INF [ EOF DOT ]
help -> HELP . ASSIGN [ EOF DOT ]
help -> HELP . LESS IDENT GREATER [ EOF DOT ]
help -> HELP . UNDO [ EOF DOT ]
## Transitions:
-- On VALID shift to state 288
-- On USE shift to state 289
-- On UNTRACE shift to state 290
-- On UNSAT shift to state 291
-- On UNDO shift to state 292
-- On TRACE shift to state 293
-- On SYMTAB shift to state 294
-- On SUP shift to state 295
-- On SPLIT shift to state 296
-- On SOLVE shift to state 297
-- On SIMPLIFY shift to state 298
-- On SIGMA shift to state 299
-- On SIG shift to state 300
-- On SHOW shift to state 301
-- On SAVE shift to state 302
-- On SAT shift to state 303
-- On RESTORE shift to state 304
-- On RESET shift to state 305
-- On REMOVE shift to state 306
-- On PROP shift to state 307
-- On MODEL shift to state 308
-- On LESS shift to state 309
-- On INV shift to state 312
-- On INF shift to state 313
-- On HELP shift to state 314
-- On GET shift to state 315
-- On FORGET shift to state 316
-- On FIND shift to state 317
-- On EXIT shift to state 318
-- On ECHO shift to state 319
-- On DROP shift to state 320
-- On DOM shift to state 321
-- On DISEQ shift to state 322
-- On DEF shift to state 323
-- On CTXT shift to state 324
-- On CMP shift to state 325
-- On CHECK shift to state 326
-- On CAN shift to state 327
-- On ASSIGN shift to state 328
-- On ASSERT shift to state 329
## Reductions:
-- On EOF DOT
--   reduce production help -> HELP

State 288:
## Known stack suffix:
## HELP VALID
## LR(1) items:
help -> HELP VALID . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP VALID

State 289:
## Known stack suffix:
## HELP USE
## LR(1) items:
help -> HELP USE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP USE

State 290:
## Known stack suffix:
## HELP UNTRACE
## LR(1) items:
help -> HELP UNTRACE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP UNTRACE

State 291:
## Known stack suffix:
## HELP UNSAT
## LR(1) items:
help -> HELP UNSAT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP UNSAT

State 292:
## Known stack suffix:
## HELP UNDO
## LR(1) items:
help -> HELP UNDO . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP UNDO

State 293:
## Known stack suffix:
## HELP TRACE
## LR(1) items:
help -> HELP TRACE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP TRACE

State 294:
## Known stack suffix:
## HELP SYMTAB
## LR(1) items:
help -> HELP SYMTAB . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SYMTAB

State 295:
## Known stack suffix:
## HELP SUP
## LR(1) items:
help -> HELP SUP . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SUP

State 296:
## Known stack suffix:
## HELP SPLIT
## LR(1) items:
help -> HELP SPLIT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SPLIT

State 297:
## Known stack suffix:
## HELP SOLVE
## LR(1) items:
help -> HELP SOLVE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SOLVE

State 298:
## Known stack suffix:
## HELP SIMPLIFY
## LR(1) items:
help -> HELP SIMPLIFY . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SIMPLIFY

State 299:
## Known stack suffix:
## HELP SIGMA
## LR(1) items:
help -> HELP SIGMA . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SIGMA

State 300:
## Known stack suffix:
## HELP SIG
## LR(1) items:
help -> HELP SIG . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SIG

State 301:
## Known stack suffix:
## HELP SHOW
## LR(1) items:
help -> HELP SHOW . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SHOW

State 302:
## Known stack suffix:
## HELP SAVE
## LR(1) items:
help -> HELP SAVE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SAVE

State 303:
## Known stack suffix:
## HELP SAT
## LR(1) items:
help -> HELP SAT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP SAT

State 304:
## Known stack suffix:
## HELP RESTORE
## LR(1) items:
help -> HELP RESTORE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP RESTORE

State 305:
## Known stack suffix:
## HELP RESET
## LR(1) items:
help -> HELP RESET . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP RESET

State 306:
## Known stack suffix:
## HELP REMOVE
## LR(1) items:
help -> HELP REMOVE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP REMOVE

State 307:
## Known stack suffix:
## HELP PROP
## LR(1) items:
help -> HELP PROP . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP PROP

State 308:
## Known stack suffix:
## HELP MODEL
## LR(1) items:
help -> HELP MODEL . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP MODEL

State 309:
## Known stack suffix:
## HELP LESS
## LR(1) items:
help -> HELP LESS . IDENT GREATER [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## HELP LESS IDENT
## LR(1) items:
help -> HELP LESS IDENT . GREATER [ EOF DOT ]
## Transitions:
-- On GREATER shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## HELP LESS IDENT GREATER
## LR(1) items:
help -> HELP LESS IDENT GREATER . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP LESS IDENT GREATER

State 312:
## Known stack suffix:
## HELP INV
## LR(1) items:
help -> HELP INV . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP INV

State 313:
## Known stack suffix:
## HELP INF
## LR(1) items:
help -> HELP INF . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP INF

State 314:
## Known stack suffix:
## HELP HELP
## LR(1) items:
help -> HELP HELP . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP HELP

State 315:
## Known stack suffix:
## HELP GET
## LR(1) items:
help -> HELP GET . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP GET

State 316:
## Known stack suffix:
## HELP FORGET
## LR(1) items:
help -> HELP FORGET . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP FORGET

State 317:
## Known stack suffix:
## HELP FIND
## LR(1) items:
help -> HELP FIND . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP FIND

State 318:
## Known stack suffix:
## HELP EXIT
## LR(1) items:
help -> HELP EXIT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP EXIT

State 319:
## Known stack suffix:
## HELP ECHO
## LR(1) items:
help -> HELP ECHO . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP ECHO

State 320:
## Known stack suffix:
## HELP DROP
## LR(1) items:
help -> HELP DROP . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP DROP

State 321:
## Known stack suffix:
## HELP DOM
## LR(1) items:
help -> HELP DOM . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP DOM

State 322:
## Known stack suffix:
## HELP DISEQ
## LR(1) items:
help -> HELP DISEQ . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP DISEQ

State 323:
## Known stack suffix:
## HELP DEF
## LR(1) items:
help -> HELP DEF . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP DEF

State 324:
## Known stack suffix:
## HELP CTXT
## LR(1) items:
help -> HELP CTXT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP CTXT

State 325:
## Known stack suffix:
## HELP CMP
## LR(1) items:
help -> HELP CMP . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP CMP

State 326:
## Known stack suffix:
## HELP CHECK
## LR(1) items:
help -> HELP CHECK . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP CHECK

State 327:
## Known stack suffix:
## HELP CAN
## LR(1) items:
help -> HELP CAN . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP CAN

State 328:
## Known stack suffix:
## HELP ASSIGN
## LR(1) items:
help -> HELP ASSIGN . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP ASSIGN

State 329:
## Known stack suffix:
## HELP ASSERT
## LR(1) items:
help -> HELP ASSERT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production help -> HELP ASSERT

State 330:
## Known stack suffix:
## GET
## LR(1) items:
command -> GET . varname [ EOF DOT ]
command -> GET . [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 331
-- On varname shift to state 332
## Reductions:
-- On EOF DOT
--   reduce production command -> GET

State 331:
## Known stack suffix:
## IDENT
## LR(1) items:
varname -> IDENT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production varname -> IDENT

State 332:
## Known stack suffix:
## GET varname
## LR(1) items:
command -> GET varname . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> GET varname

State 333:
## Known stack suffix:
## FORGET
## LR(1) items:
command -> FORGET . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> FORGET

State 334:
## Known stack suffix:
## FIND
## LR(1) items:
command -> FIND . optname eqth term [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 335
## Reductions:
-- On IDENT
--   reduce production optname ->

State 335:
## Known stack suffix:
## FIND optname
## LR(1) items:
command -> FIND optname . eqth term [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 236
-- On eqth shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## FIND optname eqth
## LR(1) items:
command -> FIND optname eqth . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 337
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 337:
## Known stack suffix:
## FIND optname eqth term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> FIND optname eqth term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> FIND optname eqth term

State 338:
## Known stack suffix:
## EXIT
## LR(1) items:
command -> EXIT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> EXIT

State 339:
## Known stack suffix:
## EOF
## LR(1) items:
commands -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production commands -> EOF

State 340:
## Known stack suffix:
## ECHO
## LR(1) items:
command -> ECHO . STRING [ EOF DOT ]
## Transitions:
-- On STRING shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## ECHO STRING
## LR(1) items:
command -> ECHO STRING . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> ECHO STRING

State 342:
## Known stack suffix:
## DROP
## LR(1) items:
command -> DROP . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> DROP

State 343:
## Known stack suffix:
## DOM
## LR(1) items:
command -> DOM . optname term [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 344
## Reductions:
-- On TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FALSE EMPTY CREATE CONS CONC COMPL CDR CAR C BVCONST
--   reduce production optname ->

State 344:
## Known stack suffix:
## DOM optname
## LR(1) items:
command -> DOM optname . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 345
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 345:
## Known stack suffix:
## DOM optname term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> DOM optname term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> DOM optname term

State 346:
## Known stack suffix:
## DISEQ
## LR(1) items:
command -> DISEQ . optname term [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 347
## Reductions:
-- On TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FALSE EMPTY CREATE CONS CONC COMPL CDR CAR C BVCONST
--   reduce production optname ->

State 347:
## Known stack suffix:
## DISEQ optname
## LR(1) items:
command -> DISEQ optname . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 348
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 348:
## Known stack suffix:
## DISEQ optname term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> DISEQ optname term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> DISEQ optname term

State 349:
## Known stack suffix:
## DEF
## LR(1) items:
command -> DEF . name ASSIGN term [ EOF DOT ]
## Transitions:
-- On IDENT shift to state 29
-- On name shift to state 350
## Reductions:

State 350:
## Known stack suffix:
## DEF name
## LR(1) items:
command -> DEF name . ASSIGN term [ EOF DOT ]
## Transitions:
-- On ASSIGN shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## DEF name ASSIGN
## LR(1) items:
command -> DEF name ASSIGN . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 352
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 352:
## Known stack suffix:
## DEF name ASSIGN term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> DEF name ASSIGN term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> DEF name ASSIGN term

State 353:
## Known stack suffix:
## CTXT
## LR(1) items:
command -> CTXT . optname [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 354
## Reductions:
-- On EOF DOT
--   reduce production optname ->

State 354:
## Known stack suffix:
## CTXT optname
## LR(1) items:
command -> CTXT optname . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> CTXT optname

State 355:
## Known stack suffix:
## CHECK
## LR(1) items:
command -> CHECK . optname [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 356
## Reductions:
-- On EOF DOT
--   reduce production optname ->

State 356:
## Known stack suffix:
## CHECK optname
## LR(1) items:
command -> CHECK optname . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> CHECK optname

State 357:
## Known stack suffix:
## CAN
## LR(1) items:
command -> CAN . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 358
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 358:
## Known stack suffix:
## CAN term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> CAN term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> CAN term

State 359:
## Known stack suffix:
## ASSERT
## LR(1) items:
command -> ASSERT . optname atom [ EOF DOT ]
command -> ASSERT . optname atom COMMA atomlist [ EOF DOT ]
## Transitions:
-- On KLAMMERAFFE shift to state 188
-- On optname shift to state 360
## Reductions:
-- On TT TRUE TAIL SUB S RATCONST OUTR OUTL OUT NIL MINUS LPAR LAMBDA K INTCONST INR INL INJ IDENT I HEAD FULL FF FALSE EMPTY CREATE CONS CONC COMPL CDR CAR C BVCONST
--   reduce production optname ->

State 360:
## Known stack suffix:
## ASSERT optname
## LR(1) items:
command -> ASSERT optname . atom [ EOF DOT ]
command -> ASSERT optname . atom COMMA atomlist [ EOF DOT ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 361
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 361:
## Known stack suffix:
## ASSERT optname atom
## LR(1) items:
command -> ASSERT optname atom . [ EOF DOT ]
command -> ASSERT optname atom . COMMA atomlist [ EOF DOT ]
## Transitions:
-- On COMMA shift to state 362
## Reductions:
-- On EOF DOT
--   reduce production command -> ASSERT optname atom

State 362:
## Known stack suffix:
## ASSERT optname atom COMMA
## LR(1) items:
command -> ASSERT optname atom COMMA . atomlist [ EOF DOT ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atomlist shift to state 363
-- On atom shift to state 194
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:
-- On EOF DOT COMMA
--   reduce production atomlist ->

State 363:
## Known stack suffix:
## ASSERT optname atom COMMA atomlist
## LR(1) items:
atomlist -> atomlist . COMMA atom [ EOF DOT COMMA ]
command -> ASSERT optname atom COMMA atomlist . [ EOF DOT ]
## Transitions:
-- On COMMA shift to state 192
## Reductions:
-- On EOF DOT
--   reduce production command -> ASSERT optname atom COMMA atomlist

State 364:
## Known stack suffix:
## varname
## LR(1) items:
command -> varname . ASSIGN value [ EOF DOT ]
## Transitions:
-- On ASSIGN shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## varname ASSIGN
## LR(1) items:
command -> varname ASSIGN . value [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 366
-- On IDENT shift to state 367
-- On FALSE shift to state 368
-- On value shift to state 369
## Reductions:

State 366:
## Known stack suffix:
## TRUE
## LR(1) items:
value -> TRUE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> TRUE

State 367:
## Known stack suffix:
## IDENT
## LR(1) items:
value -> IDENT . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> IDENT

State 368:
## Known stack suffix:
## FALSE
## LR(1) items:
value -> FALSE . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> FALSE

State 369:
## Known stack suffix:
## varname ASSIGN value
## LR(1) items:
command -> varname ASSIGN value . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> varname ASSIGN value

State 370:
## Known stack suffix:
## term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
command -> term . CMP term [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT CMP BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On CMP shift to state 371
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 371:
## Known stack suffix:
## term CMP
## LR(1) items:
command -> term CMP . term [ EOF DOT ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 372
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 372:
## Known stack suffix:
## term CMP term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
command -> term CMP term . [ EOF DOT ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF DOT BVCONC APPLY ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:
-- On EOF DOT
--   reduce production command -> term CMP term

State 373:
## Known stack suffix:
## help
## LR(1) items:
command -> help . [ EOF DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command -> help

State 374:
## Known stack suffix:
## commands
## LR(1) items:
commands' -> commands . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept commands

State 375:
## Known stack suffix:
## command
## LR(1) items:
commands -> command . DOT [ # ]
## Transitions:
-- On DOT shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## command DOT
## LR(1) items:
commands -> command DOT . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production commands -> command DOT

State 377:
## Known stack suffix:
##
## LR(1) items:
commandseof' -> . commandseof [ # ]
## Transitions:
-- On VALID shift to state 187
-- On USE shift to state 195
-- On UNTRACE shift to state 200
-- On UNSAT shift to state 205
-- On UNDO shift to state 208
-- On TRUE shift to state 2
-- On TRACE shift to state 209
-- On TAIL shift to state 3
-- On SYMTAB shift to state 211
-- On SUP shift to state 213
-- On SUB shift to state 5
-- On SPLIT shift to state 216
-- On SOLVE shift to state 218
-- On SIMPLIFY shift to state 223
-- On SIGMA shift to state 225
-- On SIG shift to state 227
-- On SHOW shift to state 234
-- On SAVE shift to state 238
-- On SAT shift to state 240
-- On S shift to state 14
-- On RESTORE shift to state 267
-- On RESET shift to state 269
-- On REMOVE shift to state 270
-- On RATCONST shift to state 15
-- On PROP shift to state 272
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MODEL shift to state 276
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INV shift to state 279
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On INF shift to state 283
-- On IDENT shift to state 286
-- On I shift to state 45
-- On HELP shift to state 287
-- On HEAD shift to state 46
-- On GET shift to state 330
-- On FULL shift to state 48
-- On FORGET shift to state 333
-- On FIND shift to state 334
-- On FALSE shift to state 49
-- On EXIT shift to state 338
-- On EMPTY shift to state 50
-- On ECHO shift to state 340
-- On DROP shift to state 342
-- On DOM shift to state 343
-- On DISEQ shift to state 346
-- On DEF shift to state 349
-- On CTXT shift to state 353
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CHECK shift to state 355
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On CAN shift to state 357
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On ASSERT shift to state 359
-- On varname shift to state 364
-- On var shift to state 69
-- On term shift to state 370
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On help shift to state 373
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On commandseof shift to state 378
-- On command shift to state 379
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 378:
## Known stack suffix:
## commandseof
## LR(1) items:
commandseof' -> commandseof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept commandseof

State 379:
## Known stack suffix:
## command
## LR(1) items:
commandseof -> command . EOF [ # ]
## Transitions:
-- On EOF shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## command EOF
## LR(1) items:
commandseof -> command EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production commandseof -> command EOF

State 381:
## Known stack suffix:
##
## LR(1) items:
commandsequence' -> . commandsequence [ # ]
## Transitions:
-- On VALID shift to state 187
-- On USE shift to state 195
-- On UNTRACE shift to state 200
-- On UNSAT shift to state 205
-- On UNDO shift to state 208
-- On TRUE shift to state 2
-- On TRACE shift to state 209
-- On TAIL shift to state 3
-- On SYMTAB shift to state 211
-- On SUP shift to state 213
-- On SUB shift to state 5
-- On SPLIT shift to state 216
-- On SOLVE shift to state 218
-- On SIMPLIFY shift to state 223
-- On SIGMA shift to state 225
-- On SIG shift to state 227
-- On SHOW shift to state 234
-- On SAVE shift to state 238
-- On SAT shift to state 240
-- On S shift to state 14
-- On RESTORE shift to state 267
-- On RESET shift to state 269
-- On REMOVE shift to state 270
-- On RATCONST shift to state 15
-- On PROP shift to state 272
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MODEL shift to state 276
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INV shift to state 279
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On INF shift to state 283
-- On IDENT shift to state 286
-- On I shift to state 45
-- On HELP shift to state 287
-- On HEAD shift to state 46
-- On GET shift to state 330
-- On FULL shift to state 48
-- On FORGET shift to state 333
-- On FIND shift to state 334
-- On FALSE shift to state 49
-- On EXIT shift to state 338
-- On EOF shift to state 382
-- On EMPTY shift to state 50
-- On ECHO shift to state 340
-- On DROP shift to state 342
-- On DOM shift to state 343
-- On DISEQ shift to state 346
-- On DEF shift to state 349
-- On CTXT shift to state 353
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CHECK shift to state 355
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On CAN shift to state 357
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On ASSERT shift to state 359
-- On varname shift to state 364
-- On var shift to state 69
-- On term shift to state 370
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On help shift to state 373
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On commandsequence shift to state 383
-- On command shift to state 384
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 382:
## Known stack suffix:
## EOF
## LR(1) items:
commandsequence -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production commandsequence -> EOF

State 383:
## Known stack suffix:
## commandsequence
## LR(1) items:
commandsequence' -> commandsequence . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept commandsequence

State 384:
## Known stack suffix:
## command
## LR(1) items:
commandsequence -> command . DOT commandsequence [ # ]
commandsequence -> command . DOT [ # ]
## Transitions:
-- On DOT shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## command DOT
## LR(1) items:
commandsequence -> command DOT . commandsequence [ # ]
commandsequence -> command DOT . [ # ]
## Transitions:
-- On VALID shift to state 187
-- On USE shift to state 195
-- On UNTRACE shift to state 200
-- On UNSAT shift to state 205
-- On UNDO shift to state 208
-- On TRUE shift to state 2
-- On TRACE shift to state 209
-- On TAIL shift to state 3
-- On SYMTAB shift to state 211
-- On SUP shift to state 213
-- On SUB shift to state 5
-- On SPLIT shift to state 216
-- On SOLVE shift to state 218
-- On SIMPLIFY shift to state 223
-- On SIGMA shift to state 225
-- On SIG shift to state 227
-- On SHOW shift to state 234
-- On SAVE shift to state 238
-- On SAT shift to state 240
-- On S shift to state 14
-- On RESTORE shift to state 267
-- On RESET shift to state 269
-- On REMOVE shift to state 270
-- On RATCONST shift to state 15
-- On PROP shift to state 272
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MODEL shift to state 276
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INV shift to state 279
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On INF shift to state 283
-- On IDENT shift to state 286
-- On I shift to state 45
-- On HELP shift to state 287
-- On HEAD shift to state 46
-- On GET shift to state 330
-- On FULL shift to state 48
-- On FORGET shift to state 333
-- On FIND shift to state 334
-- On FALSE shift to state 49
-- On EXIT shift to state 338
-- On EOF shift to state 382
-- On EMPTY shift to state 50
-- On ECHO shift to state 340
-- On DROP shift to state 342
-- On DOM shift to state 343
-- On DISEQ shift to state 346
-- On DEF shift to state 349
-- On CTXT shift to state 353
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CHECK shift to state 355
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On CAN shift to state 357
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On ASSERT shift to state 359
-- On varname shift to state 364
-- On var shift to state 69
-- On term shift to state 370
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On help shift to state 373
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On commandsequence shift to state 386
-- On command shift to state 384
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 386:
## Known stack suffix:
## command DOT commandsequence
## LR(1) items:
commandsequence -> command DOT commandsequence . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production commandsequence -> command DOT commandsequence

State 387:
## Known stack suffix:
##
## LR(1) items:
propeof' -> . propeof [ # ]
## Transitions:
-- On TT shift to state 1
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On NEG shift to state 242
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LBRA shift to state 243
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IF shift to state 244
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FF shift to state 167
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On term shift to state 168
-- On rat shift to state 90
-- On propset shift to state 91
-- On propeof shift to state 388
-- On prop shift to state 389
-- On product shift to state 92
-- On name shift to state 254
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On atom shift to state 255
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 388:
## Known stack suffix:
## propeof
## LR(1) items:
propeof' -> propeof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept propeof

State 389:
## Known stack suffix:
## prop
## LR(1) items:
prop -> prop . CONJ prop [ XOR IMPL EOF DISJ CONJ BIIMPL ]
prop -> prop . DISJ prop [ XOR IMPL EOF DISJ CONJ BIIMPL ]
prop -> prop . BIIMPL prop [ XOR IMPL EOF DISJ CONJ BIIMPL ]
prop -> prop . XOR prop [ XOR IMPL EOF DISJ CONJ BIIMPL ]
prop -> prop . IMPL prop [ XOR IMPL EOF DISJ CONJ BIIMPL ]
propeof -> prop . EOF [ # ]
## Transitions:
-- On XOR shift to state 246
-- On IMPL shift to state 248
-- On EOF shift to state 390
-- On DISJ shift to state 250
-- On CONJ shift to state 252
-- On BIIMPL shift to state 256
## Reductions:

State 390:
## Known stack suffix:
## prop EOF
## LR(1) items:
propeof -> prop EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production propeof -> prop EOF

State 391:
## Known stack suffix:
##
## LR(1) items:
termeof' -> . termeof [ # ]
## Transitions:
-- On TRUE shift to state 2
-- On TAIL shift to state 3
-- On SUB shift to state 5
-- On S shift to state 14
-- On RATCONST shift to state 15
-- On OUTR shift to state 16
-- On OUTL shift to state 18
-- On OUT shift to state 20
-- On NIL shift to state 25
-- On MINUS shift to state 26
-- On LPAR shift to state 27
-- On LAMBDA shift to state 28
-- On K shift to state 34
-- On INTCONST shift to state 35
-- On INR shift to state 36
-- On INL shift to state 38
-- On INJ shift to state 40
-- On IDENT shift to state 29
-- On I shift to state 45
-- On HEAD shift to state 46
-- On FULL shift to state 48
-- On FALSE shift to state 49
-- On EMPTY shift to state 50
-- On CREATE shift to state 51
-- On CONS shift to state 53
-- On CONC shift to state 55
-- On COMPL shift to state 62
-- On CDR shift to state 63
-- On CAR shift to state 65
-- On C shift to state 67
-- On BVCONST shift to state 68
-- On var shift to state 69
-- On termeof shift to state 392
-- On term shift to state 393
-- On rat shift to state 90
-- On propset shift to state 91
-- On product shift to state 92
-- On name shift to state 93
-- On int shift to state 105
-- On ics_list shift to state 106
-- On funsym shift to state 107
-- On coproduct shift to state 115
-- On bv shift to state 116
-- On boolean shift to state 117
-- On array shift to state 118
-- On arith shift to state 119
-- On apply shift to state 120
-- On app shift to state 121
## Reductions:

State 392:
## Known stack suffix:
## termeof
## LR(1) items:
termeof' -> termeof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept termeof

State 393:
## Known stack suffix:
## term
## LR(1) items:
apply -> term . APPLY term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
arith -> term . PLUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
arith -> term . MINUS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
arith -> term . TIMES term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
arith -> term . EXPT int [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
array -> term . LBRA term ASSIGN term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
array -> term . LBRA term RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
bv -> term . BVCONC term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
bv -> term . LBRA INTCONST COLON INTCONST RBRA [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
ics_list -> term . LISTCONS term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
propset -> term . UNION term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
propset -> term . INTER term [ UNION TIMES PLUS MINUS LISTCONS LBRA INTER EXPT EOF BVCONC APPLY ]
termeof -> term . EOF [ # ]
## Transitions:
-- On UNION shift to state 71
-- On TIMES shift to state 73
-- On PLUS shift to state 84
-- On MINUS shift to state 113
-- On LISTCONS shift to state 75
-- On LBRA shift to state 77
-- On INTER shift to state 122
-- On EXPT shift to state 86
-- On EOF shift to state 394
-- On BVCONC shift to state 88
-- On APPLY shift to state 124
## Reductions:

State 394:
## Known stack suffix:
## term EOF
## LR(1) items:
termeof -> term EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production termeof -> term EOF

