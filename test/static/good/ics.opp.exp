Note: the nonterminal symbol list (from ics.mly) is renamed ics_list.
File "ics.mly", line 47, characters 13-19:
Warning: the token ACLBRA is unused.
File "ics.mly", line 47, characters 7-12:
Warning: the token ALBRA is unused.
File "ics.mly", line 50, characters 48-57:
Warning: the token BACKSLASH is unused.
File "ics.mly", line 45, characters 7-10:
Warning: the token BOT is unused.
File "ics.mly", line 57, characters 22-27:
Warning: the token BWAND is unused.
File "ics.mly", line 57, characters 45-50:
Warning: the token BWIFF is unused.
File "ics.mly", line 57, characters 39-44:
Warning: the token BWIMP is unused.
File "ics.mly", line 57, characters 16-21:
Warning: the token BWITE is unused.
File "ics.mly", line 57, characters 51-56:
Warning: the token BWNOT is unused.
File "ics.mly", line 57, characters 28-32:
Warning: the token BWOR is unused.
File "ics.mly", line 57, characters 33-38:
Warning: the token BWXOR is unused.
File "ics.mly", line 47, characters 20-25:
Warning: the token CLBRA is unused.
File "ics.mly", line 35, characters 28-36:
Warning: the token COMMANDS is unused.
File "ics.mly", line 50, characters 23-27:
Warning: the token DDOT is unused.
File "ics.mly", line 51, characters 36-40:
Warning: the token DIFF is unused.
File "ics.mly", line 61, characters 24-30:
Warning: the token DIVIDE is unused.
File "ics.mly", line 50, characters 38-47:
Warning: the token ENDMARKER is unused.
File "ics.mly", line 55, characters 13-17:
Warning: the token FREE is unused.
File "ics.mly", line 54, characters 22-27:
Warning: the token FRESH is unused.
File "ics.mly", line 37, characters 7-9:
Warning: the token IN is unused.
File "ics.mly", line 46, characters 11-17:
Warning: the token NEGINF is unused.
File "ics.mly", line 37, characters 10-15:
Warning: the token NOTIN is unused.
File "ics.mly", line 34, characters 82-91:
Warning: the token PARTITION is unused.
File "ics.mly", line 70, characters 7-11:
Warning: the token PROJ is unused.
File "ics.mly", line 49, characters 37-45:
Warning: the token PROPLPAR is unused.
File "ics.mly", line 49, characters 46-54:
Warning: the token PROPRPAR is unused.
File "ics.mly", line 68, characters 7-14:
Warning: the token PROPVAR is unused.
File "ics.mly", line 38, characters 11-16:
Warning: the token QUOTE is unused.
File "ics.mly", line 34, characters 34-37:
Warning: the token SET is unused.
File "ics.mly", line 35, characters 12-16:
Warning: the token SIGN is unused.
File "ics.mly", line 34, characters 73-81:
Warning: the token SOLUTION is unused.
File "ics.mly", line 35, characters 21-27:
Warning: the token SYNTAX is unused.
File "ics.mly", line 50, characters 35-37:
Warning: the token TO is unused.
File "ics.mly", line 34, characters 27-33:
Warning: the token TOGGLE is unused.
File "ics.mly", line 45, characters 23-26:
Warning: the token TOP is unused.
File "ics.mly", line 33, characters 7-11:
Warning: the token TYPE is unused.
File "ics.mly", line 49, characters 55-65:
Warning: the token UNDERSCORE is unused.
File "ics.mly", line 63, characters 7-15:
Warning: the token UNSIGNED is unused.
File "ics.mly", line 64, characters 7-11:
Warning: the token WITH is unused.
%{

(** Command parser. *)

  open Mpa
  open Tools

let name_of_slack = Name.of_string "k"
let name_of_zero_slack = Name.of_string "k0"
let name_of_rename = Name.of_string "v"


%}
%start atomeof
%start commands
%start commandseof
%start commandsequence
%start propeof
%start termeof
%token ACLBRA
%token ALBRA
%token APPLY
%token ASSERT
%token ASSIGN
%token BACKSLASH
%token BIIMPL
%token BOT
%token BV
%token BVCONC
%token <string> BVCONST
%token BWAND
%token BWIFF
%token BWIMP
%token BWITE
%token BWNOT
%token BWOR
%token BWXOR
%token C
%token CAN
%token CAR
%token CDR
%token CHECK
%token CLBRA
%token CMP
%token COLON
%token COMMA
%token COMMANDS
%token COMPL
%token CONC
%token CONJ
%token CONS
%token CREATE
%token CTXT
%token DDOT
%token DEF
%token DIFF
%token DISEQ
%token DISJ
%token DIVIDE
%token DOM
%token DOT
%token DROP
%token ECHO
%token ELSE
%token EMPTY
%token END
%token ENDMARKER
%token EOF
%token EQUAL
%token EXIT
%token EXPT
%token FALSE
%token FF
%token FIND
%token FORGET
%token <int> FREE
%token <string * int> FRESH
%token FULL
%token GET
%token GREATER
%token GREATEROREQUAL
%token HEAD
%token HELP
%token I
%token <string> IDENT
%token IF
%token IMPL
%token IN
%token INF
%token INJ
%token INL
%token INR
%token INT
%token <int> INTCONST
%token INTER
%token INV
%token K
%token KLAMMERAFFE
%token LAMBDA
%token LBRA
%token LCUR
%token LESS
%token LESSOREQUAL
%token LISTCONS
%token LPAR
%token MINUS
%token MODEL
%token NEG
%token NEGINF
%token NIL
%token NOTIN
%token OUT
%token OUTL
%token OUTR
%token PARTITION
%token PLUS
%token PROJ
%token PROP
%token PROPLPAR
%token PROPRPAR
%token PROPVAR
%token QUOTE
%token <Mpa.Q.t> RATCONST
%token RBRA
%token RCUR
%token REAL
%token REMOVE
%token RESET
%token RESTORE
%token RPAR
%token S
%token SAT
%token SAVE
%token SET
%token SHOW
%token SIG
%token SIGMA
%token SIGN
%token SIMPLIFY
%token SOLUTION
%token SOLVE
%token SPLIT
%token <string> STRING
%token SUB
%token SUBSET
%token SUP
%token SYMTAB
%token SYNTAX
%token TAIL
%token THEN
%token TIMES
%token TO
%token TOGGLE
%token TOP
%token TRACE
%token TRUE
%token TT
%token TYPE
%token UNDERSCORE
%token UNDO
%token UNION
%token UNSAT
%token UNSIGNED
%token UNTRACE
%token USE
%token VALID
%token WITH
%token XOR
%right DISJ IMPL XOR
%left BIIMPL CONJ
%nonassoc DISEQ EQUAL GREATER GREATEROREQUAL LESS LESSOREQUAL SUBSET
%left APPLY
%right UNION
%right DIFF INTER
%nonassoc COMPL
%left MINUS PLUS
%left DIVIDE
%left TIMES
%right EXPT
%right LISTCONS
%right BVCONC
%right BWIMP BWOR BWXOR
%left BWAND BWIFF
%nonassoc TO
%nonassoc IN NOTIN
%nonassoc LCUR
%nonassoc LBRA
%nonassoc COLON
%nonassoc prec_unary
%type <Atom.t> atomeof
%type <unit> commands
%type <unit> commandseof
%type <unit> commandsequence
%type <Prop.t> propeof
%type <Term.t> termeof
%%

termeof:
  _1 = term _2 = EOF
    {                             ( _1 )}

atomeof:
  _1 = atom _2 = EOF
    {                             ( _1 )}

propeof:
  _1 = prop _2 = EOF
    {                             ( _1 )}

commandseof:
  _1 = command _2 = EOF
    {                             ( () )}

commands:
  _1 = command _2 = DOT
    {                  ( () )}
| _1 = EOF
    {                  ( raise End_of_file )}

commandsequence:
  _1 = command _2 = DOT _3 = commandsequence
    {                                 ( () )}
| _1 = command _2 = DOT
    {                                 ( () )}
| _1 = EOF
    {                                 ( raise End_of_file )}

prop:
  _1 = LBRA _2 = prop _3 = RBRA
    {                                  ( _2 )}
| _1 = name
    {                                  ( try Istate.prop_of _1 with Not_found -> Prop.mk_var _1 )}
| _1 = atom
    {                                  ( Prop.mk_poslit _1 )}
| _1 = prop _2 = CONJ _3 = prop
    {                                  ( Prop.mk_conj [_1; _3] )}
| _1 = prop _2 = DISJ _3 = prop
    {                                  ( Prop.mk_disj [_1; _3] )}
| _1 = prop _2 = BIIMPL _3 = prop
    {                                  ( Prop.mk_iff _1 _3 )}
| _1 = prop _2 = XOR _3 = prop
    {                                  ( Prop.mk_neg (Prop.mk_iff _1 _3) )}
| _1 = prop _2 = IMPL _3 = prop
    {                                  ( Prop.mk_disj [Prop.mk_neg _1; _3] )}
| _1 = NEG _2 = prop %prec prec_unary
    {                                  ( Prop.mk_neg _2 )}
| _1 = IF _2 = prop _3 = THEN _4 = prop _5 = ELSE _6 = prop _7 = END
    {                                  ( Prop.mk_ite _2 _4 _6 )}

int:
  _1 = INTCONST
    {               ( _1 )}

rat:
  _1 = int
    {            ( Q.of_int _1 )}
| _1 = RATCONST
    {            ( _1 )}

name:
  _1 = IDENT
    {             ( Name.of_string _1 )}

namelist:
  _1 = name
    {                      ( [_1] )}
| _1 = namelist _2 = COMMA _3 = name
    {                      ( _3 :: _1 )}

term:
  _1 = var
    {                   ( _1 )}
| _1 = app
    {                   ( _1 )}
| _1 = LPAR _2 = term _3 = RPAR
    {                   ( _2 )}
| _1 = arith
    {                   ( _1 )}
| _1 = array
    {                   ( _1 )}
| _1 = bv
    {                   ( _1 )}
| _1 = product
    {                   ( _1 )}
| _1 = boolean
    {                   ( _1 )}
| _1 = coproduct
    {                   ( _1 )}
| _1 = ics_list
    {                   ( _1 )}
| _1 = apply
    {                   ( _1 )}
| _1 = propset
    {                   ( _1 )}

var:
  _1 = name
    {        ( try
	    match Istate.entry_of _1 with
	      | Symtab.Def(Symtab.Term(a)) -> a
	      | Symtab.Type(c)  -> Term.Var.mk_var _1 c
	      | _ -> Term.Var.mk_var _1 Var.Cnstrnt.Unconstrained
	  with
	      Not_found -> Term.Var.mk_var _1 Var.Cnstrnt.Unconstrained )}
| _1 = name _2 = LCUR _3 = cnstrnt _4 = RCUR
    {         ( Term.Var.mk_var _1 _3 )}

app:
  _1 = funsym _2 = LPAR _3 = termlist _4 = RPAR
    {                                   ( Term.App.mk_app _1 (List.rev _3) )}

funsym:
  _1 = name
    {                                   ( Sym.Uninterp.make _1 )}

ics_list:
  _1 = term _2 = LISTCONS _3 = term
    {                                ( Coproduct.mk_inj 1 (Product.mk_cons _1 _3) )}
| _1 = HEAD _2 = LPAR _3 = term _4 = RPAR
    {                                ( Product.mk_car (Coproduct.mk_out 1 _3) )}
| _1 = TAIL _2 = LPAR _3 = term _4 = RPAR
    {                                ( Product.mk_cdr (Coproduct.mk_out 1 _3) )}
| _1 = NIL
    {                                ( Coproduct.mk_inj 0 (Bitvector.mk_eps()) )}

apply:
  _1 = term _2 = APPLY _3 = term
    {                                ( Apply.mk_apply _1 _3 )}
| _1 = S
    {                                ( Apply.mk_s () )}
| _1 = K
    {                                ( Apply.mk_k () )}
| _1 = I
    {                                ( Apply.mk_i () )}
| _1 = C
    {                                ( Apply.mk_c () )}
| _1 = LAMBDA _2 = namelist _3 = COLON _4 = term
    {                                ( let nl = _2 in   (* in reverse order! *)
				  let body = _4 in
				  let rec abstract_star acc = function
				    | [] -> assert false
				    | [n] -> Apply.abstract n acc
				    | n :: nl -> abstract_star (Apply.abstract n acc) nl
				  in
				  abstract_star body nl )}

boolean:
  _1 = TRUE
    {                                ( Boolean.mk_true() )}
| _1 = FALSE
    {                                ( Boolean.mk_false() )}

arith:
  _1 = rat
    {                                ( Arith.mk_num _1 )}
| _1 = term _2 = PLUS _3 = term
    {                                ( Arith.mk_add _1 _3 )}
| _1 = term _2 = MINUS _3 = term
    {                                ( Arith.mk_sub _1 _3 )}
| _1 = MINUS _2 = term %prec prec_unary
    {                                ( Arith.mk_neg _2 )}
| _1 = term _2 = TIMES _3 = term
    {                                ( Pprod.mk_mult _1 _3 )}
| _1 = term _2 = EXPT _3 = int
    {                                ( Pprod.mk_expt _1 _3 )}

product:
  _1 = CONS _2 = LPAR _3 = term _4 = COMMA _5 = term _6 = RPAR
    {                                 ( Product.mk_cons _3 _5 )}
| _1 = CAR _2 = LPAR _3 = term _4 = RPAR
    {                                 ( Product.mk_car _3 )}
| _1 = CDR _2 = LPAR _3 = term _4 = RPAR
    {                                 ( Product.mk_cdr _3 )}

coproduct:
  _1 = INL _2 = LPAR _3 = term _4 = RPAR
    {                                        ( Coproduct.mk_inl _3 )}
| _1 = INR _2 = LPAR _3 = term _4 = RPAR
    {                                        ( Coproduct.mk_inr _3 )}
| _1 = OUTL _2 = LPAR _3 = term _4 = RPAR
    {                                        ( Coproduct.mk_outl _3 )}
| _1 = OUTR _2 = LPAR _3 = term _4 = RPAR
    {                                        ( Coproduct.mk_outr _3 )}
| _1 = INJ _2 = LBRA _3 = INTCONST _4 = RBRA _5 = LPAR _6 = term _7 = RPAR
    {                                        ( Coproduct.mk_inj _3 _6 )}
| _1 = OUT _2 = LBRA _3 = INTCONST _4 = RBRA _5 = LPAR _6 = term _7 = RPAR
    {                                        ( Coproduct.mk_out _3 _6 )}

array:
  _1 = CREATE _2 = LPAR _3 = term _4 = RPAR
    {                             ( Funarr.mk_create _3 )}
| _1 = term _2 = LBRA _3 = term _4 = ASSIGN _5 = term _6 = RBRA
    {                                  ( Funarr.mk_update Term.is_equal _1 _3 _5 )}
| _1 = term _2 = LBRA _3 = term _4 = RBRA
    {                             ( Funarr.mk_select Term.is_equal _1 _3 )}

propset:
  _1 = EMPTY
    {                                 ( Propset.mk_empty() )}
| _1 = FULL
    {                                 ( Propset.mk_full() )}
| _1 = term _2 = UNION _3 = term
    {                                 ( Propset.mk_union _1 _3 )}
| _1 = term _2 = INTER _3 = term
    {                                 ( Propset.mk_inter _1 _3 )}
| _1 = COMPL _2 = term %prec prec_unary
    {                                 ( Propset.mk_compl _2 )}

bv:
  _1 = BVCONST
    {                              ( Bitvector.mk_const (Bitv.from_string _1)  )}
| _1 = CONC _2 = LBRA _3 = INTCONST _4 = COMMA _5 = INTCONST _6 = RBRA _7 = LPAR _8 = term _9 = COMMA _10 = term _11 = RPAR
    {                              ( Bitvector.mk_conc _3 _5 _8 _10 )}
| _1 = SUB _2 = LBRA _3 = INTCONST _4 = COMMA _5 = INTCONST _6 = COMMA _7 = INTCONST _8 = RBRA _9 = LPAR _10 = term _11 = RPAR
    {                              ( Bitvector.mk_sub _3 _5 _7 _10 )}
| _1 = term _2 = BVCONC _3 = term
    {     ( match Istate.width_of _1, Istate.width_of _3 with
	 | Some(n), Some(m) ->
	     if n < 0 then
	       raise (Invalid_argument ("Negative length of " ^ Term.to_string _1))
	     else if m < 0 then
	       raise (Invalid_argument ("Negative length of " ^ Term.to_string _3))
	     else
	       Bitvector.mk_conc n m _1 _3
	 | Some _, _ ->
	     raise (Invalid_argument (Term.to_string _3 ^ " not a bitvector."))
	 | _ ->
	     raise (Invalid_argument (Term.to_string _1 ^ " not a bitvector.")) )}
| _1 = term _2 = LBRA _3 = INTCONST _4 = COLON _5 = INTCONST _6 = RBRA
    {     ( match Istate.width_of _1 with
	 | Some(n) ->
	     if n < 0 then
	       raise(Invalid_argument ("Negative length of " ^ Term.to_string _1))
	     else if not(0 <= _3 && _3 <= _5 && _5 < n) then
	       raise(Invalid_argument ("Invalid extraction from " ^ Term.to_string _1))
	     else
	       Bitvector.mk_sub n _3 _5 _1
	 | None ->
	     raise (Invalid_argument (Term.to_string _1 ^ " not a bitvector.")) )}

atom:
  _1 = FF
    {                           ( Atom.mk_false )}
| _1 = TT
    {                           ( Atom.mk_true )}
| _1 = term _2 = EQUAL _3 = term
    {                           ( Atom.mk_equal (_1, _3) )}
| _1 = term _2 = DISEQ _3 = term
    {                           ( Atom.mk_diseq (_1, _3) )}
| _1 = term _2 = LESS _3 = term
    {                           ( Atom.mk_pos (Arith.mk_sub _3 _1) )}
| _1 = term _2 = GREATER _3 = term
    {                           ( Atom.mk_pos (Arith.mk_sub _1 _3) )}
| _1 = term _2 = LESSOREQUAL _3 = term
    {                           ( Atom.mk_nonneg (Arith.mk_sub _3 _1) )}
| _1 = term _2 = GREATEROREQUAL _3 = term
    {                           ( Atom.mk_nonneg (Arith.mk_sub _1 _3) )}
| _1 = term _2 = SUBSET _3 = term
    {                           ( Atom.mk_equal (Propset.mk_inter _1 _3, _1) )}

dom:
  _1 = INT
    {               ( Dom.Int )}
| _1 = REAL
    {               ( Dom.Real )}

cnstrnt:
  _1 = dom
    {               ( Var.Cnstrnt.Real(_1) )}
| _1 = signature
    {               ( Var.Cnstrnt.Bitvector(_1) )}

termlist:
  
    {                      ( [] )}
| _1 = term
    {                      ( [_1] )}
| _1 = termlist _2 = COMMA _3 = term
    {                      ( _3 :: _1 )}

atomlist:
  
    {                      ( [] )}
| _1 = atom
    {                      ( [_1] )}
| _1 = atomlist _2 = COMMA _3 = atom
    {                      ( _3 :: _1 )}

signature:
  _1 = BV _2 = LBRA _3 = INTCONST _4 = RBRA
    {                            ( _3 )}

command:
  _1 = CAN _2 = term
    {                            ( Istate.do_can _2 )}
| _1 = SIMPLIFY _2 = atom
    {                            ( Istate.do_simplify _2 )}
| _1 = ASSERT _2 = optname _3 = atom
    {                            ( Istate.do_process1 (_2, _3) )}
| _1 = ASSERT _2 = optname _3 = atom _4 = COMMA _5 = atomlist
    {                                     ( Istate.do_process (_2, _3 :: _5) )}
| _1 = DEF _2 = name _3 = ASSIGN _4 = term
    {                            ( Istate.do_def (_2, (Symtab.Term(_4))) )}
| _1 = PROP _2 = name _3 = ASSIGN _4 = prop
    {                            ( Istate.do_prop (_2, _4) )}
| _1 = SIG _2 = name _3 = COLON _4 = cnstrnt
    {                            ( Istate.do_typ ([_2], _4) )}
| _1 = SIG _2 = namelist _3 = COLON _4 = cnstrnt
    {                            ( Istate.do_typ (_2, _4) )}
| _1 = RESET
    {                            ( Istate.do_reset () )}
| _1 = SAVE _2 = name
    {                            ( Istate.do_save(Some(_2)) )}
| _1 = SAVE
    {                            ( Istate.do_save(None) )}
| _1 = RESTORE _2 = name
    {                            ( Istate.do_restore _2 )}
| _1 = REMOVE _2 = name
    {                            ( Istate.do_remove _2 )}
| _1 = FORGET
    {                            ( Istate.do_forget() )}
| _1 = VALID _2 = optname _3 = atomlist
    {                            ( Istate.do_valid (_2, _3) )}
| _1 = UNSAT _2 = optname _3 = atomlist
    {                            ( Istate.do_unsat (_2, _3) )}
| _1 = EXIT
    {                            ( raise End_of_file )}
| _1 = DROP
    {                            ( failwith "drop" )}
| _1 = SYMTAB
    {                            ( Istate.do_symtab None )}
| _1 = SYMTAB _2 = name
    {                            ( Istate.do_symtab (Some(_2)) )}
| _1 = CTXT _2 = optname
    {                            ( Istate.do_ctxt _2 )}
| _1 = SIGMA _2 = term
    {                            ( Istate.do_sigma _2 )}
| _1 = term _2 = CMP _3 = term
    {                            ( Istate.do_cmp (_1, _3) )}
| _1 = SHOW _2 = optname
    {                            ( Istate.do_show _2 None )}
| _1 = SHOW _2 = optname _3 = eqth
    {                            ( Istate.do_show _2 (Some(_3)) )}
| _1 = FIND _2 = optname _3 = eqth _4 = term
    {                            ( Istate.do_find (_2, _3, _4) )}
| _1 = INV _2 = optname _3 = th _4 = term
    {                            ( Istate.do_inv (_2, _3, _4) )}
| _1 = USE _2 = optname _3 = th _4 = term
    {                            ( Istate.do_dep (_2, _3, _4) )}
| _1 = DOM _2 = optname _3 = term
    {                            ( Istate.do_dom (_2, _3) )}
| _1 = DISEQ _2 = optname _3 = term
    {                            ( Istate.do_diseq (_2, _3) )}
| _1 = SPLIT _2 = optname
    {                            ( Istate.do_split _2 )}
| _1 = SOLVE _2 = th _3 = term _4 = EQUAL _5 = term
    {                            ( Istate.do_solve (_2, (_3, _5)) )}
| _1 = TRACE _2 = identlist
    {                            ( Istate.do_trace _2 )}
| _1 = UNTRACE
    {                            ( Istate.do_untrace None )}
| _1 = UNTRACE _2 = identlist
    {                            ( Istate.do_untrace (Some(_2)) )}
| _1 = SAT _2 = optname _3 = prop
    {                            ( Istate.do_sat (_2, _3) )}
| _1 = CHECK _2 = optname
    {                            ( Istate.do_check_sat _2 )}
| _1 = MODEL _2 = optname _3 = optvarspecs
    {                            ( Istate.do_model (_2, List.rev _3) )}
| _1 = ECHO _2 = STRING
    {                            ( Format.eprintf "%s@." _2 )}
| _1 = GET _2 = varname
    {                            ( Istate.do_get _2 )}
| _1 = varname _2 = ASSIGN _3 = value
    {                            ( Istate.do_set (_1, _3))}
| _1 = GET
    {                            ( Istate.do_show_vars () )}
| _1 = SUP _2 = optname _3 = term
    {                            ( Istate.do_sup (_2, _3) )}
| _1 = INF _2 = optname _3 = term
    {                            ( Istate.do_inf (_2, _3) )}
| _1 = UNDO
    {                            ( Istate.do_undo () )}
| _1 = help
    {                            ( _1 )}

optvarspecs:
  
    {                           ( [] )}

varname:
  _1 = IDENT
    {                           ( Istate.Parameters.of_string _1 )}

value:
  _1 = IDENT
    {                           ( _1 )}
| _1 = TRUE
    {                           ( "true" )}
| _1 = FALSE
    {                           ( "false" )}

identlist:
  _1 = IDENT
    {                            ( [_1] )}
| _1 = identlist _2 = COMMA _3 = IDENT
    {                            ( _3 :: _1 )}

th:
  _1 = IDENT
    {           ( Th.of_string _1 )}

eqth:
  _1 = IDENT
    {  ( try Some(Th.of_string _1)
    with exc -> if _1 = "v" then None else raise exc )}

help:
  _1 = HELP
    {                            ( Istate.do_help Istate.All )}
| _1 = HELP _2 = CAN
    {                            ( Istate.do_help (Istate.Command("can")) )}
| _1 = HELP _2 = HELP
    {                            ( Istate.do_help (Istate.Command("help")) )}
| _1 = HELP _2 = SIMPLIFY
    {                            ( Istate.do_help (Istate.Command("simplify")) )}
| _1 = HELP _2 = ASSERT
    {                            ( Istate.do_help (Istate.Command("assert")) )}
| _1 = HELP _2 = DEF
    {                            ( Istate.do_help (Istate.Command("def")) )}
| _1 = HELP _2 = PROP
    {                            ( Istate.do_help (Istate.Command("prop")) )}
| _1 = HELP _2 = SIG
    {                            ( Istate.do_help (Istate.Command("sig")) )}
| _1 = HELP _2 = RESET
    {                            ( Istate.do_help (Istate.Command("reset")) )}
| _1 = HELP _2 = SAVE
    {                            ( Istate.do_help (Istate.Command("save")) )}
| _1 = HELP _2 = RESTORE
    {                            ( Istate.do_help (Istate.Command("restore")) )}
| _1 = HELP _2 = REMOVE
    {                            ( Istate.do_help (Istate.Command("remove")) )}
| _1 = HELP _2 = FORGET
    {                            ( Istate.do_help (Istate.Command("forget")) )}
| _1 = HELP _2 = VALID
    {                            ( Istate.do_help (Istate.Command("valid")) )}
| _1 = HELP _2 = UNSAT
    {                            ( Istate.do_help (Istate.Command("unsat")) )}
| _1 = HELP _2 = EXIT
    {                            ( Istate.do_help (Istate.Command("exit")) )}
| _1 = HELP _2 = DROP
    {                            ( Istate.do_help (Istate.Command("drop")) )}
| _1 = HELP _2 = SYMTAB
    {                            ( Istate.do_help (Istate.Command("symtab")) )}
| _1 = HELP _2 = CTXT
    {                            ( Istate.do_help (Istate.Command("ctxt")) )}
| _1 = HELP _2 = SIGMA
    {                            ( Istate.do_help (Istate.Command("sigma")) )}
| _1 = HELP _2 = CMP
    {                            ( Istate.do_help (Istate.Command("cmp")) )}
| _1 = HELP _2 = SHOW
    {                            ( Istate.do_help (Istate.Command("show")) )}
| _1 = HELP _2 = FIND
    {                            ( Istate.do_help (Istate.Command("find")) )}
| _1 = HELP _2 = INV
    {                            ( Istate.do_help (Istate.Command("inv")) )}
| _1 = HELP _2 = USE
    {                            ( Istate.do_help (Istate.Command("use")) )}
| _1 = HELP _2 = DOM
    {                            ( Istate.do_help (Istate.Command("dom")) )}
| _1 = HELP _2 = DISEQ
    {                            ( Istate.do_help (Istate.Command("diseq")) )}
| _1 = HELP _2 = SPLIT
    {                            ( Istate.do_help (Istate.Command("split")) )}
| _1 = HELP _2 = SOLVE
    {                            ( Istate.do_help (Istate.Command("solve")) )}
| _1 = HELP _2 = TRACE
    {                            ( Istate.do_help (Istate.Command("trace")) )}
| _1 = HELP _2 = UNTRACE
    {                            ( Istate.do_help (Istate.Command("untrace")) )}
| _1 = HELP _2 = SAT
    {                            ( Istate.do_help (Istate.Command("sat")) )}
| _1 = HELP _2 = MODEL
    {                            ( Istate.do_help (Istate.Command("model")) )}
| _1 = HELP _2 = CHECK
    {                            ( Istate.do_help (Istate.Command("check")) )}
| _1 = HELP _2 = ECHO
    {                            ( Istate.do_help (Istate.Command("echo")) )}
| _1 = HELP _2 = GET
    {                            ( Istate.do_help (Istate.Command("get")) )}
| _1 = HELP _2 = SUP
    {                            ( Istate.do_help (Istate.Command("sup")) )}
| _1 = HELP _2 = INF
    {                            ( Istate.do_help (Istate.Command("inf")) )}
| _1 = HELP _2 = ASSIGN
    {                            ( Istate.do_help (Istate.Command("set")) )}
| _1 = HELP _2 = LESS _3 = IDENT _4 = GREATER
    {                            ( Istate.do_help (Istate.Nonterminal(_3)) )}
| _1 = HELP _2 = UNDO
    {                            ( Istate.do_help (Istate.Command("undo")) )}

optname:
  
    {                            ( None )}
| _1 = KLAMMERAFFE _2 = name
    {                            ( Some(_2) )}

%%


