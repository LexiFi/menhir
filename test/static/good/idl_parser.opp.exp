%{

open Full_idl_syntax

let find_attr attr attrs =
  let at = AttrNoArgs (Id.id_of_string attr) in
  List.exists (fun a -> a == at) attrs
let ifaceMemWithAttrs mem attrs = match mem with
  | Attribute(p, _, ro, s, t, id) -> Attribute(p, attrs, ro, s, t, id)
  | Operation(p, _, s, q, ret, id, args) ->
    let q' = if (find_attr "getter" attrs) then {q with getter = true} else q in
    let q' = if (find_attr "setter" attrs) then {q' with setter = true} else q' in
    Operation(p, attrs, s, q', ret, id, args)
  | ConstMember(p, _, t, id, value) -> ConstMember(p, attrs, t, id, value)
  | Stringifier(p, _) -> Stringifier(p, attrs)
let defWithAttrs def attrs = match def with
  | Module(p, _, id, defs) -> Module(p, attrs, id, defs)
  | Typedef(p, _, typ, id) -> Typedef(p, attrs, typ, id)
  | Interface(p, _, id, parent, mems, callback) -> Interface(p, attrs, id, parent, mems, callback)
  | ForwardInterface(p, _, id) -> ForwardInterface(p, attrs, id)
  | Exception(p, _, id, parent, mems) -> Exception(p, attrs, id, parent, mems)
  | Implements(p, _, id, impl) -> Implements(p, attrs, id, impl)
  | Const(p, _, typ, id, value) -> Const(p, attrs, typ, id, value)
  | Dictionary(p, _, id, parent, mems) -> Dictionary(p, attrs, id, parent, mems)
  | PartialInterface(p, _, id, mems) -> PartialInterface(p, attrs, id, mems)
  | Include(p, _, file) -> Include(p, attrs, file)
  | Callback(p, _, id, args, ret) -> Callback(p, attrs, id, args, ret)
  | Enum(p, _, id, items) -> Enum(p, attrs, id, items)
let noQualifiers = {static=false;getter=false;setter=false;
                    creator=false;deleter=false;legacyCaller=false}
%}
%start idlFile
%token ALLOWANY
%token AND
%token ANY
%token ATTRIBUTE
%token BAR
%token BOOLEAN
%token BYTE
%token CALLBACK
%token CLAMP
%token COLON
%token COLONCOLON
%token COMMA
%token CONST
%token CONSTRUCTOR
%token CREATOR
%token DELETER
%token DICTIONARY
%token DIVIDE
%token DOTDOTDOT
%token DOUBLE
%token ENUM
%token EOF
%token EQUALS
%token EXCEPTION
%token FALSE
%token FLOAT
%token <float> FLOATLIT
%token FUNCTIONONLY
%token GETTER
%token <Id.t> ID
%token IMPLEMENTS
%token IMPLICIT_JSCONTEXT
%token IN
%token INCLUDE
%token INHERIT
%token INOUT
%token INTERFACE
%token <int64> INTLIT
%token LANGLE
%token LBRACE
%token LBRACK
%token LEGACYCALLER
%token LONG
%token LPAREN
%token LRBRACK
%token MINUS
%token MOD
%token MODULE
%token NAMEDCONSTRUCTOR
%token <string * string> NATIVE
%token NOINTERFACEOBJECT
%token NOSCRIPT
%token NOTXPCOM
%token OCTET
%token OPTIONAL
%token OPTIONAL_ARGC
%token OUT
%token OVERRIDEBUILTINS
%token PARTIAL
%token PLUS
%token PRIVATEBROWSINGCHECK
%token PUTFORWARDS
%token QUERYELEMENTATTYPE
%token QUERYINTERFACETYPE
%token QUES
%token RAISES
%token RANGLE
%token RBRACE
%token RBRACK
%token READONLY
%token REPLACEABLE
%token REPLACEABLENAMEDPROPERTIES
%token RETVAL
%token RPAREN
%token SCRIPTABLE
%token SEMI
%token SEQUENCE
%token SETTER
%token SHLEFT
%token SHORT
%token SHRIGHT
%token SIZE_IS
%token STATIC
%token <string> STRING
%token STRINGIFIER
%token TILDE
%token TIMES
%token TREATNULLAS
%token TRUE
%token TYPEDEF
%token UNFORGEABLE
%token UNSAFE
%token UNSIGNED
%token <string> UUID
%token VOID
%token XOR
%left BAR
%left XOR
%left AND
%nonassoc SHLEFT SHRIGHT
%left MINUS PLUS
%left DIVIDE MOD TIMES
%type <Full_idl_syntax.definition list> idlFile
%%

option_INHERIT_:
  
    {    ( None )}
| x = INHERIT
    {    ( Some x )}

option_default_:
  
    {    ( None )}
| x = default
    {    ( Some x )}

option_identOrKeyword_:
  
    {    ( None )}
| _1 = CONSTRUCTOR
    {let x =                 ( Id.id_of_string "Constructor" ) in
    ( Some x )}
| _1 = NOTXPCOM
    {let x =              ( Id.id_of_string "notxpcom" ) in
    ( Some x )}
| _1 = RETVAL
    {let x =            ( Id.id_of_string "retval" ) in
    ( Some x )}
| _1 = UNSAFE
    {let x =            ( Id.id_of_string "unsafe" ) in
    ( Some x )}
| _1 = PRIVATEBROWSINGCHECK
    {let x =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
    ( Some x )}
| _1 = QUERYINTERFACETYPE
    {let x =                        ( Id.id_of_string "QueryInterfaceType" ) in
    ( Some x )}
| _1 = CREATOR
    {let x =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1 = GETTER
    {let x =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1 = SETTER
    {let x =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
    ( Some x )}
| id = ID
    {let x =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1 = DICTIONARY
    {let x =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
    ( Some x )}
| _1 = PARTIAL
    {let x =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
    ( Some x )}

option_raisesClause_:
  
    {    ( None )}
| x = raisesClause
    {    ( Some x )}

loption_separated_nonempty_list_COMMA_ID__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_ID_
    {    ( x )}

loption_separated_nonempty_list_COMMA_argument__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_argument_
    {    ( x )}

loption_separated_nonempty_list_COMMA_expr__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_expr_
    {    ( x )}

separated_nonempty_list_COMMA_ID_:
  x = ID
    {    ( [ x ] )}
| x = ID _2 = COMMA xs = separated_nonempty_list_COMMA_ID_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_argument_:
  x = argument
    {    ( [ x ] )}
| x = argument _2 = COMMA xs = separated_nonempty_list_COMMA_argument_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_expr_:
  x = expr
    {    ( [ x ] )}
| x = expr _2 = COMMA xs = separated_nonempty_list_COMMA_expr_
    {    ( x :: xs )}

ilist_definition_:
  
    {    ( [] )}
| x = definition xs = ilist_definition_
    {    ( x :: xs )}

ilist_extAttrDefList_definition__:
  
    {    ( [] )}
| x = extAttrDefList_definition_ xs = ilist_extAttrDefList_definition__
    {    ( x :: xs )}

ilist_extAttrDictList_dictionaryMember__:
  
    {    ( [] )}
| x = extAttrDictList_dictionaryMember_ xs = ilist_extAttrDictList_dictionaryMember__
    {    ( x :: xs )}

ilist_extAttrExnMemList_exceptionMember__:
  
    {    ( [] )}
| x = extAttrExnMemList_exceptionMember_ xs = ilist_extAttrExnMemList_exceptionMember__
    {    ( x :: xs )}

ilist_extAttrIfaceMemList_interfaceMember__:
  
    {    ( [] )}
| x = extAttrIfaceMemList_interfaceMember_ xs = ilist_extAttrIfaceMemList_interfaceMember__
    {    ( x :: xs )}

iseparated_nonempty_list_COMMA_STRING_:
  x = STRING
    {    ( [ x ] )}
| x = STRING _2 = COMMA xs = iseparated_nonempty_list_COMMA_STRING_
    {    ( x :: xs )}

iseparated_nonempty_list_COMMA_extendedAttribute_:
  x = extendedAttribute
    {    ( [ x ] )}
| x = extendedAttribute _2 = COMMA xs = iseparated_nonempty_list_COMMA_extendedAttribute_
    {    ( x :: xs )}

extAttrIfaceMemList_interfaceMember_:
  attrs = extendedAttributeList x = interfaceMember
    {                                    ( ifaceMemWithAttrs x attrs )}

extAttrExnMemList_exceptionMember_:
  attrs = extendedAttributeList x = exceptionMember
    {                                    ( ifaceMemWithAttrs x attrs )}

extAttrArgList_optionalOrRequiredArgument_:
  attrs = extendedAttributeList x = optionalOrRequiredArgument
    {                                    ( (attrs, x) )}

extAttrDefList_definition_:
  attrs = extendedAttributeList x = definition
    {                                    ( defWithAttrs x attrs )}

extAttrDictList_dictionaryMember_:
  attrs = extendedAttributeList x = dictionaryMember
    {                                    ( ifaceMemWithAttrs x attrs )}

definitions:
  defs = ilist_extAttrDefList_definition__
    {                                           ( defs )}

definition:
  _1 = callbackOrInterface
    {                        ( _1 )}
| _1 = partialInterface
    {                     ( _1 )}
| _1 = dictionary
    {               ( _1 )}
| _1 = exceptionDef
    {                 ( _1 )}
| _1 = enum
    {         ( _1 )}
| _1 = typedef
    {            ( _1 )}
| _1 = implementsStatement
    {                        ( _1 )}
| _1 = INCLUDE _2 = STRING
    {let _startpos = _startpos__1_ in
                   ( Include(_startpos, [], _2) )}
| _1 = MODULE name = ID _1_inlined1 = LBRACE x = ilist_definition_ _3 = RBRACE _4 = SEMI
    {let defs =     ( x ) in
let _startpos = _startpos__1_ in
    ( Module (_startpos, [], name, defs) )}
| _1 = INTERFACE _2 = ID _3 = SEMI
    {let _startpos = _startpos__1_ in
                      ( ForwardInterface (_startpos, [], _2) )}
| c = const
    {            ( let (p, m, t, id, e) = c in Const(p,m,t,id,e) )}

callbackOrInterface:
  _1 = CALLBACK _2 = callbackRestOrInterface
    {                                     ( _2 )}
| _1 = interface
    {              ( _1 )}

callbackRestOrInterface:
  _1 = callbackRest
    {                 ( _1 )}
| _1 = interface
    {let _startpos = _startpos__1_ in
              (
    match _1 with
    | Interface(_, id, nameOpt, members, metas, _) ->
      Interface(_startpos, id, nameOpt, members, metas, IsCallbackInterface)
    | _ -> failwith "Impossible"
  )}

callbackRest:
  _1 = CONSTRUCTOR _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =                 ( Id.id_of_string "Constructor" ) in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = NOTXPCOM _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =              ( Id.id_of_string "notxpcom" ) in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = RETVAL _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =            ( Id.id_of_string "retval" ) in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = UNSAFE _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =            ( Id.id_of_string "unsafe" ) in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = CREATOR _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = GETTER _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = SETTER _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| id = ID _2 = EQUALS ret = returnType _1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos_id_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = DICTIONARY _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}
| _1 = PARTIAL _2 = EQUALS ret = returnType _1_inlined1 = LPAREN x = argumentList _3 = RPAREN _5 = SEMI
    {let args =     ( x ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos_name_ = _startpos__1_ in
let _startpos = _startpos_name_ in
      ( Callback(_startpos, [], name, args, ret) )}

interface:
  _1 = INTERFACE name = ID inherits = inheritance _1_inlined1 = LBRACE x = interfaceMembers _3 = RBRACE _5 = SEMI
    {let mems =     ( x ) in
let _startpos = _startpos__1_ in
      ( Interface(_startpos, [], name, inherits, mems, IsNormalInterface) )}

partialInterface:
  _1 = PARTIAL _2 = INTERFACE name = ID _1_inlined1 = LBRACE x = interfaceMembers _3 = RBRACE _5 = SEMI
    {let mems =     ( x ) in
let _startpos = _startpos__1_ in
      ( PartialInterface(_startpos, [], name, mems) )}

interfaceMembers:
  mems = ilist_extAttrIfaceMemList_interfaceMember__
    {                                                     ( mems )}

interfaceMember:
  c = const
    {            ( let (p,m,t,id,c) = c in ConstMember(p,m,t,id,c) )}
| _1 = attributeOrOperation
    {                         ( _1 )}

dictionary:
  _1 = DICTIONARY name = ID inherits = inheritance _1_inlined1 = LBRACE x = dictionaryMembers _3 = RBRACE _5 = SEMI
    {let defs =     ( x ) in
let _startpos = _startpos__1_ in
      ( Dictionary(_startpos, [], name, inherits, defs) )}

dictionaryMembers:
  mems = ilist_extAttrDictList_dictionaryMember__
    {                                                  ( mems )}

dictionaryMember:
  ty = typeDecl _1 = CONSTRUCTOR _4 = SEMI
    {let _3 =     ( None ) in
let name =                 ( Id.id_of_string "Constructor" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = CONSTRUCTOR x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =                 ( Id.id_of_string "Constructor" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = NOTXPCOM _4 = SEMI
    {let _3 =     ( None ) in
let name =              ( Id.id_of_string "notxpcom" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = NOTXPCOM x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =              ( Id.id_of_string "notxpcom" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = RETVAL _4 = SEMI
    {let _3 =     ( None ) in
let name =            ( Id.id_of_string "retval" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = RETVAL x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =            ( Id.id_of_string "retval" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = UNSAFE _4 = SEMI
    {let _3 =     ( None ) in
let name =            ( Id.id_of_string "unsafe" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = UNSAFE x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =            ( Id.id_of_string "unsafe" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = PRIVATEBROWSINGCHECK _4 = SEMI
    {let _3 =     ( None ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = PRIVATEBROWSINGCHECK x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = QUERYINTERFACETYPE _4 = SEMI
    {let _3 =     ( None ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = QUERYINTERFACETYPE x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = CREATOR _4 = SEMI
    {let _3 =     ( None ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = CREATOR x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = GETTER _4 = SEMI
    {let _3 =     ( None ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = GETTER x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = SETTER _4 = SEMI
    {let _3 =     ( None ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = SETTER x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl id = ID _4 = SEMI
    {let _3 =     ( None ) in
let name =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl id = ID x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = DICTIONARY _4 = SEMI
    {let _3 =     ( None ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = DICTIONARY x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = PARTIAL _4 = SEMI
    {let _3 =     ( None ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}
| ty = typeDecl _1 = PARTIAL x = default _4 = SEMI
    {let _3 =     ( Some x ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let _startpos = _startpos_ty_ in
      ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, name) )}

default:
  _1 = EQUALS _2 = constValue
    {                      ( _2 )}

exceptionDef:
  _1 = EXCEPTION name = ID inherits = inheritance _1_inlined1 = LBRACE x = exceptionMembers _3 = RBRACE _5 = SEMI
    {let mems =     ( x ) in
let _startpos = _startpos__1_ in
      ( Exception(_startpos, [], name, inherits, mems) )}

exceptionMembers:
  mems = ilist_extAttrExnMemList_exceptionMember__
    {                                                   ( mems )}

inheritance:
  _1 = COLON _2 = scopedName
    {                     ( Some (_2) )}
| 
    {    ( None )}

scopedName:
  n = absoluteScopedName
    {                         ( n )}
| n = relativeScopedName
    {                         ( n )}

absoluteScopedName:
  _1 = COLONCOLON _1_inlined1 = CONSTRUCTOR parts = scopedNameParts
    {let id =                 ( Id.id_of_string "Constructor" ) in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = NOTXPCOM parts = scopedNameParts
    {let id =              ( Id.id_of_string "notxpcom" ) in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = RETVAL parts = scopedNameParts
    {let id =            ( Id.id_of_string "retval" ) in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = UNSAFE parts = scopedNameParts
    {let id =            ( Id.id_of_string "unsafe" ) in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = PRIVATEBROWSINGCHECK parts = scopedNameParts
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = QUERYINTERFACETYPE parts = scopedNameParts
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = CREATOR parts = scopedNameParts
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = GETTER parts = scopedNameParts
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = SETTER parts = scopedNameParts
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON id = ID parts = scopedNameParts
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = DICTIONARY parts = scopedNameParts
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}
| _1 = COLONCOLON _1_inlined1 = PARTIAL parts = scopedNameParts
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( AbsoluteName (id::parts) )}

relativeScopedName:
  _1 = CONSTRUCTOR parts = scopedNameParts
    {let id =                 ( Id.id_of_string "Constructor" ) in
                                            ( RelativeName (id::parts) )}
| _1 = NOTXPCOM parts = scopedNameParts
    {let id =              ( Id.id_of_string "notxpcom" ) in
                                            ( RelativeName (id::parts) )}
| _1 = RETVAL parts = scopedNameParts
    {let id =            ( Id.id_of_string "retval" ) in
                                            ( RelativeName (id::parts) )}
| _1 = UNSAFE parts = scopedNameParts
    {let id =            ( Id.id_of_string "unsafe" ) in
                                            ( RelativeName (id::parts) )}
| _1 = PRIVATEBROWSINGCHECK parts = scopedNameParts
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                            ( RelativeName (id::parts) )}
| _1 = QUERYINTERFACETYPE parts = scopedNameParts
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                            ( RelativeName (id::parts) )}
| _1 = CREATOR parts = scopedNameParts
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1 = GETTER parts = scopedNameParts
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1 = SETTER parts = scopedNameParts
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| id = ID parts = scopedNameParts
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1 = DICTIONARY parts = scopedNameParts
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}
| _1 = PARTIAL parts = scopedNameParts
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                            ( RelativeName (id::parts) )}

scopedNameParts:
  _1 = COLONCOLON _1_inlined1 = CONSTRUCTOR parts = scopedNameParts
    {let id =                 ( Id.id_of_string "Constructor" ) in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = NOTXPCOM parts = scopedNameParts
    {let id =              ( Id.id_of_string "notxpcom" ) in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = RETVAL parts = scopedNameParts
    {let id =            ( Id.id_of_string "retval" ) in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = UNSAFE parts = scopedNameParts
    {let id =            ( Id.id_of_string "unsafe" ) in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = PRIVATEBROWSINGCHECK parts = scopedNameParts
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = QUERYINTERFACETYPE parts = scopedNameParts
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = CREATOR parts = scopedNameParts
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = GETTER parts = scopedNameParts
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = SETTER parts = scopedNameParts
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON id = ID parts = scopedNameParts
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = DICTIONARY parts = scopedNameParts
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| _1 = COLONCOLON _1_inlined1 = PARTIAL parts = scopedNameParts
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                       ( id::parts )}
| 
    {    ( [] )}

enum:
  _1 = ENUM name = ID _1_inlined1 = LBRACE x = iseparated_nonempty_list_COMMA_STRING_ _3 = RBRACE _4 = SEMI
    {let mems =     ( x ) in
let _startpos = _startpos__1_ in
      ( Enum(_startpos, [], name, mems) )}

typedef:
  _1 = TYPEDEF attrs = extendedAttributeList ty = typeDecl id = ID _5 = SEMI
    {let _startpos = _startpos__1_ in
      ( Typedef (_startpos, [], ty, id) )}
| nat = NATIVE _2 = SEMI
    {let _startpos = _startpos_nat_ in
      ( let (id, natid) = nat in Typedef (_startpos, [], Native natid, Id.id_of_string id) )}

implementsStatement:
  _1 = ID _2 = IMPLEMENTS _3 = ID _4 = SEMI
    {let _startpos = _startpos__1_ in
      ( Implements(_startpos, [], _1, _3) )}

const:
  _1 = CONST cty = constType id = ID _4 = EQUALS cval = constValue _6 = SEMI
    {let _startpos = _startpos__1_ in
      ( (_startpos, [], cty, id, cval) )}

constValue:
  _1 = expr
    {         ( _1 )}

expr:
  _1 = exprUn
    {           ( _1 )}
| _1 = expr _2 = MOD _3 = expr
    {                  ( BinOp(_1, Mod, _3) )}
| _1 = expr _2 = DIVIDE _3 = expr
    {                     ( BinOp(_1, Divide, _3) )}
| _1 = expr _2 = TIMES _3 = expr
    {                    ( BinOp(_1, Times, _3) )}
| _1 = expr _2 = MINUS _3 = expr
    {                    ( BinOp(_1, Minus, _3) )}
| _1 = expr _2 = PLUS _3 = expr
    {                   ( BinOp(_1, Plus, _3) )}
| _1 = expr _2 = SHRIGHT _3 = expr
    {                      ( BinOp(_1, ShRight, _3) )}
| _1 = expr _2 = SHLEFT _3 = expr
    {                     ( BinOp(_1, ShLeft, _3) )}
| _1 = expr _2 = AND _3 = expr
    {                  ( BinOp(_1, And, _3) )}
| _1 = expr _2 = XOR _3 = expr
    {                  ( BinOp(_1, Xor, _3) )}
| _1 = expr _2 = BAR _3 = expr
    {                  ( BinOp(_1, Or, _3) )}

exprUn:
  name = scopedName
    {let atom =                     ( Ident name ) in
                  ( atom )}
| lit = INTLIT
    {let atom =
  let lit =                ( IntLit lit ) in
                  ( lit )
in
                  ( atom )}
| lit = FLOATLIT
    {let atom =
  let lit =                  ( FloatLit lit ) in
                  ( lit )
in
                  ( atom )}
| lit = STRING
    {let atom =
  let lit =                ( String lit ) in
                  ( lit )
in
                  ( atom )}
| _1 = TRUE
    {let atom =
  let lit =          ( Bool true ) in
                  ( lit )
in
                  ( atom )}
| _1 = FALSE
    {let atom =
  let lit =           ( Bool false ) in
                  ( lit )
in
                  ( atom )}
| _1 = LPAREN x = expr _3 = RPAREN
    {let atom =
  let exp =     ( x ) in
                                          ( exp )
in
                  ( atom )}
| _1 = TILDE name = scopedName
    {let atom =                     ( Ident name ) in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE lit = INTLIT
    {let atom =
  let lit =                ( IntLit lit ) in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE lit = FLOATLIT
    {let atom =
  let lit =                  ( FloatLit lit ) in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE lit = STRING
    {let atom =
  let lit =                ( String lit ) in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE _1_inlined1 = TRUE
    {let atom =
  let lit =          ( Bool true ) in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE _1_inlined1 = FALSE
    {let atom =
  let lit =           ( Bool false ) in
                  ( lit )
in
                        ( UnOp(UTilde, atom) )}
| _1 = TILDE _1_inlined1 = LPAREN x = expr _3 = RPAREN
    {let atom =
  let exp =     ( x ) in
                                          ( exp )
in
                        ( UnOp(UTilde, atom) )}
| _1 = PLUS name = scopedName
    {let atom =                     ( Ident name ) in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS lit = INTLIT
    {let atom =
  let lit =                ( IntLit lit ) in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS lit = FLOATLIT
    {let atom =
  let lit =                  ( FloatLit lit ) in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS lit = STRING
    {let atom =
  let lit =                ( String lit ) in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS _1_inlined1 = TRUE
    {let atom =
  let lit =          ( Bool true ) in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS _1_inlined1 = FALSE
    {let atom =
  let lit =           ( Bool false ) in
                  ( lit )
in
                       ( UnOp(UPlus, atom) )}
| _1 = PLUS _1_inlined1 = LPAREN x = expr _3 = RPAREN
    {let atom =
  let exp =     ( x ) in
                                          ( exp )
in
                       ( UnOp(UPlus, atom) )}
| _1 = MINUS name = scopedName
    {let atom =                     ( Ident name ) in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS lit = INTLIT
    {let atom =
  let lit =                ( IntLit lit ) in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS lit = FLOATLIT
    {let atom =
  let lit =                  ( FloatLit lit ) in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS lit = STRING
    {let atom =
  let lit =                ( String lit ) in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS _1_inlined1 = TRUE
    {let atom =
  let lit =          ( Bool true ) in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS _1_inlined1 = FALSE
    {let atom =
  let lit =           ( Bool false ) in
                  ( lit )
in
                        ( UnOp(UMinus, atom) )}
| _1 = MINUS _1_inlined1 = LPAREN x = expr _3 = RPAREN
    {let atom =
  let exp =     ( x ) in
                                          ( exp )
in
                        ( UnOp(UMinus, atom) )}

attributeOrOperation:
  _1 = STRINGIFIER _2 = stringifierAttributeOrOperation
    {                                                ( _2 )}
| _1 = attribute
    {              ( _1 )}
| _1 = operation
    {              ( _1 )}

stringifierAttributeOrOperation:
  _1 = attribute
    {let _startpos = _startpos__1_ in
              (
    match _1 with
    | Attribute(_, meta, readonly, _, ty, id) -> Attribute(_startpos, meta, readonly, IsStringifier, ty, id)
    | _ -> failwith "Impossible"
  )}
| _1 = operation
    {let _startpos = _startpos__1_ in
              (
    match _1 with
    | Operation(_, meta, _, quals, ret, id, args) -> Operation(_startpos, meta, IsStringifier, quals, ret, id, args)
    | _ -> failwith "Impossible"
  )}
| _1 = SEMI
    {let _startpos = _startpos__1_ in
         ( Stringifier(_startpos, []) )}

attribute:
  _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = CONSTRUCTOR _6 = SEMI
    {let name =                 ( Id.id_of_string "Constructor" ) in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = NOTXPCOM _6 = SEMI
    {let name =              ( Id.id_of_string "notxpcom" ) in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = RETVAL _6 = SEMI
    {let name =            ( Id.id_of_string "retval" ) in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = UNSAFE _6 = SEMI
    {let name =            ( Id.id_of_string "unsafe" ) in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = PRIVATEBROWSINGCHECK _6 = SEMI
    {let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = QUERYINTERFACETYPE _6 = SEMI
    {let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = CREATOR _6 = SEMI
    {let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = GETTER _6 = SEMI
    {let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = SETTER _6 = SEMI
    {let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl id = ID _6 = SEMI
    {let name =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = DICTIONARY _6 = SEMI
    {let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _3 = ATTRIBUTE ty = typeDecl _1_inlined1 = PARTIAL _6 = SEMI
    {let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let readonly =     ( false ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = CONSTRUCTOR _6 = SEMI
    {let name =                 ( Id.id_of_string "Constructor" ) in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = NOTXPCOM _6 = SEMI
    {let name =              ( Id.id_of_string "notxpcom" ) in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = RETVAL _6 = SEMI
    {let name =            ( Id.id_of_string "retval" ) in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = UNSAFE _6 = SEMI
    {let name =            ( Id.id_of_string "unsafe" ) in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = PRIVATEBROWSINGCHECK _6 = SEMI
    {let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = QUERYINTERFACETYPE _6 = SEMI
    {let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = CREATOR _6 = SEMI
    {let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = GETTER _6 = SEMI
    {let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = SETTER _6 = SEMI
    {let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl id = ID _6 = SEMI
    {let name =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = DICTIONARY _6 = SEMI
    {let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}
| _1 = option_INHERIT_ _1_inlined1 = READONLY _3 = ATTRIBUTE ty = typeDecl _1_inlined2 = PARTIAL _6 = SEMI
    {let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let readonly =     ( true ) in
let _startpos = _startpos__1_ in
      ( Attribute(_startpos, [], (if readonly then ReadOnly else NoReadOnly), IsNormal, ty, name) )}

operation:
  _1 = STATIC op = operationRest
    {let q =            ( {noQualifiers with static=true} ) in
let _startpos_q_ = _startpos__1_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _2 = GETTER op = operationRest
    {let q =
  let legacy =     ( false ) in
                                           ( {noQualifiers with legacyCaller=legacy; getter=true} )
in
let _startpos_q_ = _startpos__2_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _1 = LEGACYCALLER _2 = GETTER op = operationRest
    {let q =
  let legacy =     ( true ) in
                                           ( {noQualifiers with legacyCaller=legacy; getter=true} )
in
let _startpos_q_ = _startpos__1_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _1 = SETTER op = operationRest
    {let q =
  let creator =     ( false ) in
                                       ( {noQualifiers with setter=true; creator=creator} )
in
let _startpos_q_ = _startpos__1_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _1 = SETTER _1_inlined1 = CREATOR op = operationRest
    {let q =
  let creator =     ( true ) in
                                       ( {noQualifiers with setter=true; creator=creator} )
in
let _startpos_q_ = _startpos__1_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _1 = CREATOR op = operationRest
    {let q =             ( {noQualifiers with creator=true} ) in
let _startpos_q_ = _startpos__1_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| _1 = DELETER op = operationRest
    {let q =             ( {noQualifiers with deleter=true} ) in
let _startpos_q_ = _startpos__1_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}
| op = operationRest
    {let q =     ( noQualifiers ) in
let _startpos_q_ = _endpos__0_ in
let _startpos = _startpos_q_ in
                                  ( op _startpos q )}

raisesClause:
  _1 = RAISES _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_ID__ _3 = RPAREN
    {let _2 =
  let x =     ( xs ) in
      ( x )
in
                                                                ( () )}

operationRest:
  ret = returnType name = option_identOrKeyword_ _1 = LPAREN x = argumentList _3 = RPAREN _4 = option_raisesClause_ _5 = SEMI
    {let args =     ( x ) in
      ( (fun start quals -> Operation(start, [], IsNormal, quals, ret, name, args)) )}

argumentList:
  xs = loption_separated_nonempty_list_COMMA_argument__
    {let args =     ( xs ) in
                                        ( args )}

argument:
  arg = extAttrArgList_optionalOrRequiredArgument_
    {                                                   (
    let (m, (io, opt, ty, dots, id, def)) = arg in
    if opt then (io, Optional::m, ty, dots, id, def)
    else (io, m, ty, dots, id, def) )}

optionalOrRequiredArgument:
  io = inout _2 = OPTIONAL ty = typeDecl _1 = CONSTRUCTOR def = option_default_
    {let id =                 ( Id.id_of_string "Constructor" ) in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = NOTXPCOM def = option_default_
    {let id =              ( Id.id_of_string "notxpcom" ) in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = RETVAL def = option_default_
    {let id =            ( Id.id_of_string "retval" ) in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = UNSAFE def = option_default_
    {let id =            ( Id.id_of_string "unsafe" ) in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = PRIVATEBROWSINGCHECK def = option_default_
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = QUERYINTERFACETYPE def = option_default_
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = CREATOR def = option_default_
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = GETTER def = option_default_
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = SETTER def = option_default_
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl id = ID def = option_default_
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = DICTIONARY def = option_default_
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout _2 = OPTIONAL ty = typeDecl _1 = PARTIAL def = option_default_
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                 ( (io, true, ty, Single, id, def) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DOTDOTDOT _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let dots =               ( Variadic ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}
| io = inout ty = typeDecl _1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let dots =     ( Single ) in
                                                     ( (io, false, ty, dots, id, None) )}

inout:
  _1 = IN
    {       ( InParam )}
| _1 = OUT
    {        ( OutParam )}
| _1 = INOUT
    {          ( InOutParam )}
| 
    {    ( InParam )}

exceptionMember:
  c = const
    {            ( let (p,m,t,id,e) = c in ConstMember(p,m,t,id,e) )}
| _1 = exceptionField
    {                   ( _1 )}

exceptionField:
  ty = typeDecl id = ID _3 = SEMI
    {let _startpos = _startpos_ty_ in
                           ( Attribute(_startpos, [], NoReadOnly, IsNormal, ty, id) )}

extendedAttributeList:
  _1 = LBRACK x = iseparated_nonempty_list_COMMA_extendedAttribute_ _3 = RBRACK
    {let attrs =     ( x ) in
                                                                                        ( attrs )}
| 
    {    ( [] )}

extendedAttribute:
  _1 = extendedAttributeNoArgs
    {                            ( _1 )}
| _1 = extendedAttributeArgList
    {                             ( _1 )}
| _1 = extendedAttributeNamedArgList
    {                                  ( _1 )}
| _1 = extendedAttributeIdent
    {                           ( _1 )}

typeDecl:
  _1 = singleType
    {               ( _1 )}

singleType:
  _1 = nonAnyType
    {               ( _1 )}
| _1 = ANY _2 = typeSuffixStartingWithArray
    {                                    ( _2 Any )}

nonAnyType:
  _1 = primitiveType _2 = typeSuffix
    {                             ( (_2 _1) )}
| _1 = SEQUENCE _2 = LANGLE t = typeDecl _4 = RANGLE
    {let q =     ( false ) in
                                                       ( if q then Ques (Sequence t) else Sequence t )}
| _1 = SEQUENCE _2 = LANGLE t = typeDecl _4 = RANGLE _1_inlined1 = QUES
    {let q =     ( true ) in
                                                       ( if q then Ques (Sequence t) else Sequence t )}

constType:
  ty = primitiveType
    {let readonly =     ( false ) in
                                             ( if readonly then Ques ty else ty )}
| ty = primitiveType _1 = QUES
    {let readonly =     ( true ) in
                                             ( if readonly then Ques ty else ty )}

primitiveType:
  _1 = unsignedIntegerType
    {                        ( _1 )}
| _1 = BOOLEAN
    {            ( Boolean )}
| _1 = OCTET
    {          ( Octet )}
| _1 = FLOAT
    {          ( Float )}
| _1 = DOUBLE
    {           ( Double )}
| _1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| id = ID
    {let id =
  let id =           ( id ) in
                                               ( id )
in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _1 = DICTIONARY
    {let id =
  let id =                ( Id.id_of_string "dictionary" ) in
                                               ( id )
in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}
| _1 = PARTIAL
    {let id =
  let id =             ( Id.id_of_string "partial" ) in
                                               ( id )
in
                                (
    match (Id.string_of_id id) with
    | "PRUnichar" -> Octet
    | "PRUint32" -> Long Unsigned
    | "PRInt32" -> Long NoUnsigned
    | "PRUint16" -> Short Unsigned
    | "PRInt16" -> Short NoUnsigned
    | "DOMString" -> DOMString
    | "object" -> Object
    | "Date" -> Date
    | _ -> Name (RelativeName[id])
  )}

unsignedIntegerType:
  ty = integerType
    {let unsigned =     ( false ) in
                                               ( ty (if unsigned then Unsigned else NoUnsigned) )}
| _1 = UNSIGNED ty = integerType
    {let unsigned =     ( true ) in
                                               ( ty (if unsigned then Unsigned else NoUnsigned) )}

integerType:
  _1 = BYTE
    {         ( (fun u -> match u with | Unsigned -> Octet | NoUnsigned -> Byte) )}
| _1 = SHORT
    {          ( (fun u -> Short u) )}
| _1 = LONG
    {let longopt =     ( false ) in
                                ( if longopt then (fun u -> LongLong u) else (fun u -> Long u) )}
| _1 = LONG _1_inlined1 = LONG
    {let longopt =     ( true ) in
                                ( if longopt then (fun u -> LongLong u) else (fun u -> Long u) )}

typeSuffix:
  _1 = LRBRACK _2 = typeSuffix
    {                       ( (fun t -> _2 (Array t)) )}
| _1 = QUES _2 = typeSuffixStartingWithArray
    {                                     ( (fun t -> _2 (Ques t)) )}
| 
    {    ( (fun t -> t) )}

typeSuffixStartingWithArray:
  _1 = LRBRACK _2 = typeSuffix
    {                       ( (fun t -> _2 (Array t)) )}
| 
    {    ( (fun t -> t) )}

returnType:
  _1 = typeDecl
    {             ( _1 )}
| _1 = VOID
    {         ( Void )}

extendedAttributeNoArgs:
  _1 = CONST
    {          ( AttrNoArgs (Id.id_of_string "const") )}
| _1 = NOINTERFACEOBJECT
    {                      ( NoInterfaceObject )}
| _1 = OVERRIDEBUILTINS
    {                     ( OverrideBuiltins )}
| _1 = REPLACEABLENAMEDPROPERTIES
    {                               ( ReplaceableNamedProperties )}
| _1 = REPLACEABLE
    {                ( Replaceable )}
| _1 = UNFORGEABLE
    {                ( Unforgeable )}
| _1 = CALLBACK
    {             ( MCallback )}
| _1 = ALLOWANY
    {             ( AllowAny )}
| _1 = CLAMP
    {          ( Clamp )}
| _1 = NOSCRIPT
    {             ( NoScript )}
| _1 = PRIVATEBROWSINGCHECK
    {                         ( PrivateBrowsingCheck )}
| _1 = QUERYINTERFACETYPE
    {                       ( QueryInterfaceType )}
| _1 = UNSAFE
    {           ( Unsafe )}
| _1 = OPTIONAL
    {             (Optional)}
| _1 = OPTIONAL_ARGC
    {                  ( OptionalArgc )}
| _1 = SCRIPTABLE
    {               ( Scriptable )}
| _1 = IMPLICIT_JSCONTEXT
    {                       ( ImplicitJSContext )}
| _1 = CONSTRUCTOR
    {                ( Constructor [] )}
| _1 = NOTXPCOM
    {             ( NotXPCOM )}
| _1 = RETVAL
    {           ( Retval )}
| _1 = CREATOR
    {let id =
  let id =             ( Id.id_of_string "creator" ) in
                           ( id )
in
                                    ( AttrNoArgs id )}
| _1 = GETTER
    {let id =
  let id =            ( Id.id_of_string "getter" ) in
                           ( id )
in
                                    ( AttrNoArgs id )}
| _1 = SETTER
    {let id =
  let id =            ( Id.id_of_string "setter" ) in
                           ( id )
in
                                    ( AttrNoArgs id )}
| id = ID
    {let id =
  let id =           ( id ) in
                                               ( id )
in
                                    ( AttrNoArgs id )}
| _1 = DICTIONARY
    {let id =
  let id =                ( Id.id_of_string "dictionary" ) in
                                               ( id )
in
                                    ( AttrNoArgs id )}
| _1 = PARTIAL
    {let id =
  let id =             ( Id.id_of_string "partial" ) in
                                               ( id )
in
                                    ( AttrNoArgs id )}

extendedAttributeArgList:
  _1 = UUID
    {         ( Uuid (_1) )}
| _1 = CONSTRUCTOR _1_inlined1 = LPAREN x = argumentList _3 = RPAREN
    {let args =     ( x ) in
                                                             ( Constructor args )}
| _1 = SIZE_IS _1_inlined1 = LPAREN x = ID _3 = RPAREN
    {let arg =     ( x ) in
                                              ( SizeOf arg )}
| _1 = QUERYELEMENTATTYPE _1_inlined1 = LPAREN x = INTLIT _3 = RPAREN
    {let arg =     ( x ) in
                                                               ( QueryElementAtType(Int64.to_int arg) )}
| _1 = CREATOR _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =             ( Id.id_of_string "creator" ) in
                           ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _1 = GETTER _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =            ( Id.id_of_string "getter" ) in
                           ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _1 = SETTER _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =            ( Id.id_of_string "setter" ) in
                           ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| id = ID _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =           ( id ) in
                                               ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _1 = DICTIONARY _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =                ( Id.id_of_string "dictionary" ) in
                                               ( id )
in
                                                                                                ( AttrArgList (id, args) )}
| _1 = PARTIAL _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =             ( Id.id_of_string "partial" ) in
                                               ( id )
in
                                                                                                ( AttrArgList (id, args) )}

extendedAttributeIdent:
  _1 = PUTFORWARDS _2 = EQUALS id = ID
    {                             ( PutForwards id )}
| _1 = TREATNULLAS _2 = EQUALS _3 = typeDecl
    {                                ( TreatNullAs _3 )}
| _1 = CALLBACK _2 = EQUALS _3 = FUNCTIONONLY
    {                                 ( MCallbackFunctionOnly )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| id_inlined1 = ID _2 = EQUALS _1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = CONSTRUCTOR
    {let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = NOTXPCOM
    {let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = RETVAL
    {let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = UNSAFE
    {let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK
    {let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE
    {let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = CREATOR
    {let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = GETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = SETTER
    {let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS id = ID
    {let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = DICTIONARY
    {let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = PARTIAL
    {let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                 ( AttrNamedIdent(name, id) )}

extendedAttributeNamedArgList:
  _1 = NAMEDCONSTRUCTOR _2 = EQUALS name = ID _1_inlined1 = LPAREN x = argumentList _3 = RPAREN
    {let args =     ( x ) in
                                                                                 ( NamedConstructor(name,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CONSTRUCTOR _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                 ( Id.id_of_string "Constructor" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = NOTXPCOM _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =              ( Id.id_of_string "notxpcom" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = RETVAL _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "retval" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = UNSAFE _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =            ( Id.id_of_string "unsafe" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PRIVATEBROWSINGCHECK _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = QUERYINTERFACETYPE _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =                        ( Id.id_of_string "QueryInterfaceType" ) in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = CREATOR _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = GETTER _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = SETTER _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = CONSTRUCTOR _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = NOTXPCOM _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = RETVAL _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = UNSAFE _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = PRIVATEBROWSINGCHECK _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = QUERYINTERFACETYPE _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = CREATOR _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = GETTER _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = SETTER _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS id = ID _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = DICTIONARY _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| id_inlined1 = ID _2 = EQUALS _1 = PARTIAL _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id = id_inlined1 in
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = DICTIONARY _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = CONSTRUCTOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                 ( Id.id_of_string "Constructor" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = NOTXPCOM _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =              ( Id.id_of_string "notxpcom" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = RETVAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "retval" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = UNSAFE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =            ( Id.id_of_string "unsafe" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = PRIVATEBROWSINGCHECK _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                          ( Id.id_of_string "PrivateBrowsingCheck" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = QUERYINTERFACETYPE _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =                        ( Id.id_of_string "QueryInterfaceType" ) in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = CREATOR _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "creator" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = GETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "getter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = SETTER _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =            ( Id.id_of_string "setter" ) in
                             ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS id = ID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =           ( id ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = DICTIONARY _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =                ( Id.id_of_string "dictionary" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}
| _1 = PARTIAL _2 = EQUALS _1_inlined1 = PARTIAL _1_inlined2 = LPAREN xs = loption_separated_nonempty_list_COMMA_expr__ _3 = RPAREN
    {let args =
  let x =     ( xs ) in
      ( x )
in
let id =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
let name =
  let id =
    let id =             ( Id.id_of_string "partial" ) in
                                                 ( id )
  in
                                      ( id )
in
                                                                                                             ( AttrNamedArgList (name,id,args) )}

idlFile:
  _1 = definitions _2 = EOF
    {                     ( _1 )}

%%




