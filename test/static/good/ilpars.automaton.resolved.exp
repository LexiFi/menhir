State 0:
## Known stack suffix:
##
## LR(1) items:
top_instrs' -> . top_instrs [ # ]
## Transitions:
-- On INSTR_VALUETYPE shift to state 1
-- On INSTR_TYPE shift to state 117
-- On INSTR_TOK shift to state 119
-- On INSTR_STRING shift to state 151
-- On INSTR_SIG shift to state 164
-- On INSTR_R shift to state 170
-- On INSTR_NONE shift to state 180
-- On INSTR_METHOD shift to state 181
-- On INSTR_LOC shift to state 185
-- On INSTR_INT_TYPE shift to state 187
-- On INSTR_I8 shift to state 190
-- On INSTR_I32_I32 shift to state 192
-- On INSTR_I shift to state 195
-- On INSTR_FIELD shift to state 197
-- On INSTR_ARG shift to state 199
-- On top_instrs shift to state 201
-- On instrs2 shift to state 202
-- On instr_r_head shift to state 204
-- On instr shift to state 207
## Reductions:
-- On EOF reduce production instrs2 ->

State 1:
## Known stack suffix:
## INSTR_VALUETYPE
## LR(1) items:
instr -> INSTR_VALUETYPE . typSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 103
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typeName shift to state 106
-- On typSpec shift to state 116
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 109
## Reductions:

State 2:
## Known stack suffix:
## VOID
## LR(1) items:
typ -> VOID . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> VOID
-- On VAL_SQSTRING reduce production typ -> VOID
-- On VAL_ID reduce production typ -> VOID
-- On VAL_DOTTEDNAME reduce production typ -> VOID
-- On VALUETYPE reduce production typ -> VOID
-- On VALUE reduce production typ -> VOID
-- On UNSIGNED reduce production typ -> VOID
-- On UINT8 reduce production typ -> VOID
-- On UINT64 reduce production typ -> VOID
-- On UINT32 reduce production typ -> VOID
-- On UINT16 reduce production typ -> VOID
-- On TYPEDREF reduce production typ -> VOID
-- On STRING reduce production typ -> VOID
-- On STAR reduce production typ -> VOID
-- On RPAREN reduce production typ -> VOID
-- On OBJECT reduce production typ -> VOID
-- On NATIVE reduce production typ -> VOID
-- On METHOD reduce production typ -> VOID
-- On LPAREN reduce production typ -> VOID
-- On LBRACK reduce production typ -> VOID
-- On INT8 reduce production typ -> VOID
-- On INT64 reduce production typ -> VOID
-- On INT32 reduce production typ -> VOID
-- On INT16 reduce production typ -> VOID
-- On INSTR_VALUETYPE reduce production typ -> VOID
-- On INSTR_TYPE reduce production typ -> VOID
-- On INSTR_TOK reduce production typ -> VOID
-- On INSTR_STRING reduce production typ -> VOID
-- On INSTR_SIG reduce production typ -> VOID
-- On INSTR_R reduce production typ -> VOID
-- On INSTR_NONE reduce production typ -> VOID
-- On INSTR_METHOD reduce production typ -> VOID
-- On INSTR_LOC reduce production typ -> VOID
-- On INSTR_INT_TYPE reduce production typ -> VOID
-- On INSTR_I8 reduce production typ -> VOID
-- On INSTR_I32_I32 reduce production typ -> VOID
-- On INSTR_I reduce production typ -> VOID
-- On INSTR_FIELD reduce production typ -> VOID
-- On INSTR_ARG reduce production typ -> VOID
-- On GREATER reduce production typ -> VOID
-- On FLOAT64 reduce production typ -> VOID
-- On FLOAT32 reduce production typ -> VOID
-- On EOF reduce production typ -> VOID
-- On DOT_CTOR reduce production typ -> VOID
-- On DOT_CCTOR reduce production typ -> VOID
-- On DCOLON reduce production typ -> VOID
-- On COMMA reduce production typ -> VOID
-- On CLASS reduce production typ -> VOID
-- On CHAR reduce production typ -> VOID
-- On BOOL reduce production typ -> VOID
-- On BANG reduce production typ -> VOID
-- On AMP reduce production typ -> VOID

State 3:
## Known stack suffix:
## VAL_SQSTRING
## LR(1) items:
id -> VAL_SQSTRING . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR SLASH RPAREN RBRACK OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DOT DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production id -> VAL_SQSTRING
-- On VAL_SQSTRING reduce production id -> VAL_SQSTRING
-- On VAL_ID reduce production id -> VAL_SQSTRING
-- On VAL_DOTTEDNAME reduce production id -> VAL_SQSTRING
-- On VALUETYPE reduce production id -> VAL_SQSTRING
-- On VALUE reduce production id -> VAL_SQSTRING
-- On UNSIGNED reduce production id -> VAL_SQSTRING
-- On UINT8 reduce production id -> VAL_SQSTRING
-- On UINT64 reduce production id -> VAL_SQSTRING
-- On UINT32 reduce production id -> VAL_SQSTRING
-- On UINT16 reduce production id -> VAL_SQSTRING
-- On TYPEDREF reduce production id -> VAL_SQSTRING
-- On STRING reduce production id -> VAL_SQSTRING
-- On STAR reduce production id -> VAL_SQSTRING
-- On SLASH reduce production id -> VAL_SQSTRING
-- On RPAREN reduce production id -> VAL_SQSTRING
-- On RBRACK reduce production id -> VAL_SQSTRING
-- On OBJECT reduce production id -> VAL_SQSTRING
-- On NATIVE reduce production id -> VAL_SQSTRING
-- On METHOD reduce production id -> VAL_SQSTRING
-- On LPAREN reduce production id -> VAL_SQSTRING
-- On LESS reduce production id -> VAL_SQSTRING
-- On LBRACK reduce production id -> VAL_SQSTRING
-- On INT8 reduce production id -> VAL_SQSTRING
-- On INT64 reduce production id -> VAL_SQSTRING
-- On INT32 reduce production id -> VAL_SQSTRING
-- On INT16 reduce production id -> VAL_SQSTRING
-- On INSTR_VALUETYPE reduce production id -> VAL_SQSTRING
-- On INSTR_TYPE reduce production id -> VAL_SQSTRING
-- On INSTR_TOK reduce production id -> VAL_SQSTRING
-- On INSTR_STRING reduce production id -> VAL_SQSTRING
-- On INSTR_SIG reduce production id -> VAL_SQSTRING
-- On INSTR_R reduce production id -> VAL_SQSTRING
-- On INSTR_NONE reduce production id -> VAL_SQSTRING
-- On INSTR_METHOD reduce production id -> VAL_SQSTRING
-- On INSTR_LOC reduce production id -> VAL_SQSTRING
-- On INSTR_INT_TYPE reduce production id -> VAL_SQSTRING
-- On INSTR_I8 reduce production id -> VAL_SQSTRING
-- On INSTR_I32_I32 reduce production id -> VAL_SQSTRING
-- On INSTR_I reduce production id -> VAL_SQSTRING
-- On INSTR_FIELD reduce production id -> VAL_SQSTRING
-- On INSTR_ARG reduce production id -> VAL_SQSTRING
-- On GREATER reduce production id -> VAL_SQSTRING
-- On FLOAT64 reduce production id -> VAL_SQSTRING
-- On FLOAT32 reduce production id -> VAL_SQSTRING
-- On EOF reduce production id -> VAL_SQSTRING
-- On DOT_CTOR reduce production id -> VAL_SQSTRING
-- On DOT_CCTOR reduce production id -> VAL_SQSTRING
-- On DOT reduce production id -> VAL_SQSTRING
-- On DCOLON reduce production id -> VAL_SQSTRING
-- On COMMA reduce production id -> VAL_SQSTRING
-- On CLASS reduce production id -> VAL_SQSTRING
-- On CHAR reduce production id -> VAL_SQSTRING
-- On BOOL reduce production id -> VAL_SQSTRING
-- On BANG reduce production id -> VAL_SQSTRING
-- On AMP reduce production id -> VAL_SQSTRING

State 4:
## Known stack suffix:
## VAL_ID
## LR(1) items:
id -> VAL_ID . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR SLASH RPAREN RBRACK OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DOT DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production id -> VAL_ID
-- On VAL_SQSTRING reduce production id -> VAL_ID
-- On VAL_ID reduce production id -> VAL_ID
-- On VAL_DOTTEDNAME reduce production id -> VAL_ID
-- On VALUETYPE reduce production id -> VAL_ID
-- On VALUE reduce production id -> VAL_ID
-- On UNSIGNED reduce production id -> VAL_ID
-- On UINT8 reduce production id -> VAL_ID
-- On UINT64 reduce production id -> VAL_ID
-- On UINT32 reduce production id -> VAL_ID
-- On UINT16 reduce production id -> VAL_ID
-- On TYPEDREF reduce production id -> VAL_ID
-- On STRING reduce production id -> VAL_ID
-- On STAR reduce production id -> VAL_ID
-- On SLASH reduce production id -> VAL_ID
-- On RPAREN reduce production id -> VAL_ID
-- On RBRACK reduce production id -> VAL_ID
-- On OBJECT reduce production id -> VAL_ID
-- On NATIVE reduce production id -> VAL_ID
-- On METHOD reduce production id -> VAL_ID
-- On LPAREN reduce production id -> VAL_ID
-- On LESS reduce production id -> VAL_ID
-- On LBRACK reduce production id -> VAL_ID
-- On INT8 reduce production id -> VAL_ID
-- On INT64 reduce production id -> VAL_ID
-- On INT32 reduce production id -> VAL_ID
-- On INT16 reduce production id -> VAL_ID
-- On INSTR_VALUETYPE reduce production id -> VAL_ID
-- On INSTR_TYPE reduce production id -> VAL_ID
-- On INSTR_TOK reduce production id -> VAL_ID
-- On INSTR_STRING reduce production id -> VAL_ID
-- On INSTR_SIG reduce production id -> VAL_ID
-- On INSTR_R reduce production id -> VAL_ID
-- On INSTR_NONE reduce production id -> VAL_ID
-- On INSTR_METHOD reduce production id -> VAL_ID
-- On INSTR_LOC reduce production id -> VAL_ID
-- On INSTR_INT_TYPE reduce production id -> VAL_ID
-- On INSTR_I8 reduce production id -> VAL_ID
-- On INSTR_I32_I32 reduce production id -> VAL_ID
-- On INSTR_I reduce production id -> VAL_ID
-- On INSTR_FIELD reduce production id -> VAL_ID
-- On INSTR_ARG reduce production id -> VAL_ID
-- On GREATER reduce production id -> VAL_ID
-- On FLOAT64 reduce production id -> VAL_ID
-- On FLOAT32 reduce production id -> VAL_ID
-- On EOF reduce production id -> VAL_ID
-- On DOT_CTOR reduce production id -> VAL_ID
-- On DOT_CCTOR reduce production id -> VAL_ID
-- On DOT reduce production id -> VAL_ID
-- On DCOLON reduce production id -> VAL_ID
-- On COMMA reduce production id -> VAL_ID
-- On CLASS reduce production id -> VAL_ID
-- On CHAR reduce production id -> VAL_ID
-- On BOOL reduce production id -> VAL_ID
-- On BANG reduce production id -> VAL_ID
-- On AMP reduce production id -> VAL_ID

State 5:
## Known stack suffix:
## VAL_DOTTEDNAME
## LR(1) items:
name1 -> VAL_DOTTEDNAME . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR SLASH RPAREN RBRACK OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DOT DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production name1 -> VAL_DOTTEDNAME
-- On VAL_SQSTRING reduce production name1 -> VAL_DOTTEDNAME
-- On VAL_ID reduce production name1 -> VAL_DOTTEDNAME
-- On VAL_DOTTEDNAME reduce production name1 -> VAL_DOTTEDNAME
-- On VALUETYPE reduce production name1 -> VAL_DOTTEDNAME
-- On VALUE reduce production name1 -> VAL_DOTTEDNAME
-- On UNSIGNED reduce production name1 -> VAL_DOTTEDNAME
-- On UINT8 reduce production name1 -> VAL_DOTTEDNAME
-- On UINT64 reduce production name1 -> VAL_DOTTEDNAME
-- On UINT32 reduce production name1 -> VAL_DOTTEDNAME
-- On UINT16 reduce production name1 -> VAL_DOTTEDNAME
-- On TYPEDREF reduce production name1 -> VAL_DOTTEDNAME
-- On STRING reduce production name1 -> VAL_DOTTEDNAME
-- On STAR reduce production name1 -> VAL_DOTTEDNAME
-- On SLASH reduce production name1 -> VAL_DOTTEDNAME
-- On RPAREN reduce production name1 -> VAL_DOTTEDNAME
-- On RBRACK reduce production name1 -> VAL_DOTTEDNAME
-- On OBJECT reduce production name1 -> VAL_DOTTEDNAME
-- On NATIVE reduce production name1 -> VAL_DOTTEDNAME
-- On METHOD reduce production name1 -> VAL_DOTTEDNAME
-- On LPAREN reduce production name1 -> VAL_DOTTEDNAME
-- On LESS reduce production name1 -> VAL_DOTTEDNAME
-- On LBRACK reduce production name1 -> VAL_DOTTEDNAME
-- On INT8 reduce production name1 -> VAL_DOTTEDNAME
-- On INT64 reduce production name1 -> VAL_DOTTEDNAME
-- On INT32 reduce production name1 -> VAL_DOTTEDNAME
-- On INT16 reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_VALUETYPE reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_TYPE reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_TOK reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_STRING reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_SIG reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_R reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_NONE reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_METHOD reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_LOC reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_INT_TYPE reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_I8 reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_I32_I32 reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_I reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_FIELD reduce production name1 -> VAL_DOTTEDNAME
-- On INSTR_ARG reduce production name1 -> VAL_DOTTEDNAME
-- On GREATER reduce production name1 -> VAL_DOTTEDNAME
-- On FLOAT64 reduce production name1 -> VAL_DOTTEDNAME
-- On FLOAT32 reduce production name1 -> VAL_DOTTEDNAME
-- On EOF reduce production name1 -> VAL_DOTTEDNAME
-- On DOT_CTOR reduce production name1 -> VAL_DOTTEDNAME
-- On DOT_CCTOR reduce production name1 -> VAL_DOTTEDNAME
-- On DOT reduce production name1 -> VAL_DOTTEDNAME
-- On DCOLON reduce production name1 -> VAL_DOTTEDNAME
-- On COMMA reduce production name1 -> VAL_DOTTEDNAME
-- On CLASS reduce production name1 -> VAL_DOTTEDNAME
-- On CHAR reduce production name1 -> VAL_DOTTEDNAME
-- On BOOL reduce production name1 -> VAL_DOTTEDNAME
-- On BANG reduce production name1 -> VAL_DOTTEDNAME
-- On AMP reduce production name1 -> VAL_DOTTEDNAME

State 6:
## Known stack suffix:
## VALUETYPE
## LR(1) items:
typ -> VALUETYPE . typeNameInst [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On LBRACK shift to state 7
-- On typeNameInst shift to state 17
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 19
## Reductions:

State 7:
## Known stack suffix:
## LBRACK
## LR(1) items:
className -> LBRACK . name1 RBRACK slashedName [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On name1 shift to state 8
-- On id shift to state 14
## Reductions:

State 8:
## Known stack suffix:
## LBRACK name1
## LR(1) items:
className -> LBRACK name1 . RBRACK slashedName [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
name1 -> name1 . DOT id [ RBRACK DOT ]
## Transitions:
-- On RBRACK shift to state 9
-- On DOT shift to state 15
## Reductions:

State 9:
## Known stack suffix:
## LBRACK name1 RBRACK
## LR(1) items:
className -> LBRACK name1 RBRACK . slashedName [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On slashedName shift to state 10
-- On name1 shift to state 11
-- On id shift to state 14
## Reductions:

State 10:
## Known stack suffix:
## LBRACK name1 RBRACK slashedName
## LR(1) items:
className -> LBRACK name1 RBRACK slashedName . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production className -> LBRACK name1 RBRACK slashedName
-- On VAL_SQSTRING reduce production className -> LBRACK name1 RBRACK slashedName
-- On VAL_ID reduce production className -> LBRACK name1 RBRACK slashedName
-- On VAL_DOTTEDNAME reduce production className -> LBRACK name1 RBRACK slashedName
-- On VALUETYPE reduce production className -> LBRACK name1 RBRACK slashedName
-- On VALUE reduce production className -> LBRACK name1 RBRACK slashedName
-- On UNSIGNED reduce production className -> LBRACK name1 RBRACK slashedName
-- On UINT8 reduce production className -> LBRACK name1 RBRACK slashedName
-- On UINT64 reduce production className -> LBRACK name1 RBRACK slashedName
-- On UINT32 reduce production className -> LBRACK name1 RBRACK slashedName
-- On UINT16 reduce production className -> LBRACK name1 RBRACK slashedName
-- On TYPEDREF reduce production className -> LBRACK name1 RBRACK slashedName
-- On STRING reduce production className -> LBRACK name1 RBRACK slashedName
-- On STAR reduce production className -> LBRACK name1 RBRACK slashedName
-- On RPAREN reduce production className -> LBRACK name1 RBRACK slashedName
-- On OBJECT reduce production className -> LBRACK name1 RBRACK slashedName
-- On NATIVE reduce production className -> LBRACK name1 RBRACK slashedName
-- On METHOD reduce production className -> LBRACK name1 RBRACK slashedName
-- On LPAREN reduce production className -> LBRACK name1 RBRACK slashedName
-- On LESS reduce production className -> LBRACK name1 RBRACK slashedName
-- On LBRACK reduce production className -> LBRACK name1 RBRACK slashedName
-- On INT8 reduce production className -> LBRACK name1 RBRACK slashedName
-- On INT64 reduce production className -> LBRACK name1 RBRACK slashedName
-- On INT32 reduce production className -> LBRACK name1 RBRACK slashedName
-- On INT16 reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_VALUETYPE reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_TYPE reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_TOK reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_STRING reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_SIG reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_R reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_NONE reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_METHOD reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_LOC reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_INT_TYPE reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_I8 reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_I32_I32 reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_I reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_FIELD reduce production className -> LBRACK name1 RBRACK slashedName
-- On INSTR_ARG reduce production className -> LBRACK name1 RBRACK slashedName
-- On GREATER reduce production className -> LBRACK name1 RBRACK slashedName
-- On FLOAT64 reduce production className -> LBRACK name1 RBRACK slashedName
-- On FLOAT32 reduce production className -> LBRACK name1 RBRACK slashedName
-- On EOF reduce production className -> LBRACK name1 RBRACK slashedName
-- On DOT_CTOR reduce production className -> LBRACK name1 RBRACK slashedName
-- On DOT_CCTOR reduce production className -> LBRACK name1 RBRACK slashedName
-- On DCOLON reduce production className -> LBRACK name1 RBRACK slashedName
-- On COMMA reduce production className -> LBRACK name1 RBRACK slashedName
-- On CLASS reduce production className -> LBRACK name1 RBRACK slashedName
-- On CHAR reduce production className -> LBRACK name1 RBRACK slashedName
-- On BOOL reduce production className -> LBRACK name1 RBRACK slashedName
-- On BANG reduce production className -> LBRACK name1 RBRACK slashedName
-- On AMP reduce production className -> LBRACK name1 RBRACK slashedName

State 11:
## Known stack suffix:
## name1
## LR(1) items:
name1 -> name1 . DOT id [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR SLASH RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DOT DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
slashedName -> name1 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
slashedName -> name1 . SLASH slashedName [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On SLASH shift to state 12
-- On DOT shift to state 15
## Reductions:
-- On VOID reduce production slashedName -> name1
-- On VAL_SQSTRING reduce production slashedName -> name1
-- On VAL_ID reduce production slashedName -> name1
-- On VAL_DOTTEDNAME reduce production slashedName -> name1
-- On VALUETYPE reduce production slashedName -> name1
-- On VALUE reduce production slashedName -> name1
-- On UNSIGNED reduce production slashedName -> name1
-- On UINT8 reduce production slashedName -> name1
-- On UINT64 reduce production slashedName -> name1
-- On UINT32 reduce production slashedName -> name1
-- On UINT16 reduce production slashedName -> name1
-- On TYPEDREF reduce production slashedName -> name1
-- On STRING reduce production slashedName -> name1
-- On STAR reduce production slashedName -> name1
-- On RPAREN reduce production slashedName -> name1
-- On OBJECT reduce production slashedName -> name1
-- On NATIVE reduce production slashedName -> name1
-- On METHOD reduce production slashedName -> name1
-- On LPAREN reduce production slashedName -> name1
-- On LESS reduce production slashedName -> name1
-- On LBRACK reduce production slashedName -> name1
-- On INT8 reduce production slashedName -> name1
-- On INT64 reduce production slashedName -> name1
-- On INT32 reduce production slashedName -> name1
-- On INT16 reduce production slashedName -> name1
-- On INSTR_VALUETYPE reduce production slashedName -> name1
-- On INSTR_TYPE reduce production slashedName -> name1
-- On INSTR_TOK reduce production slashedName -> name1
-- On INSTR_STRING reduce production slashedName -> name1
-- On INSTR_SIG reduce production slashedName -> name1
-- On INSTR_R reduce production slashedName -> name1
-- On INSTR_NONE reduce production slashedName -> name1
-- On INSTR_METHOD reduce production slashedName -> name1
-- On INSTR_LOC reduce production slashedName -> name1
-- On INSTR_INT_TYPE reduce production slashedName -> name1
-- On INSTR_I8 reduce production slashedName -> name1
-- On INSTR_I32_I32 reduce production slashedName -> name1
-- On INSTR_I reduce production slashedName -> name1
-- On INSTR_FIELD reduce production slashedName -> name1
-- On INSTR_ARG reduce production slashedName -> name1
-- On GREATER reduce production slashedName -> name1
-- On FLOAT64 reduce production slashedName -> name1
-- On FLOAT32 reduce production slashedName -> name1
-- On EOF reduce production slashedName -> name1
-- On DOT_CTOR reduce production slashedName -> name1
-- On DOT_CCTOR reduce production slashedName -> name1
-- On DCOLON reduce production slashedName -> name1
-- On COMMA reduce production slashedName -> name1
-- On CLASS reduce production slashedName -> name1
-- On CHAR reduce production slashedName -> name1
-- On BOOL reduce production slashedName -> name1
-- On BANG reduce production slashedName -> name1
-- On AMP reduce production slashedName -> name1

State 12:
## Known stack suffix:
## name1 SLASH
## LR(1) items:
slashedName -> name1 SLASH . slashedName [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On slashedName shift to state 13
-- On name1 shift to state 11
-- On id shift to state 14
## Reductions:

State 13:
## Known stack suffix:
## name1 SLASH slashedName
## LR(1) items:
slashedName -> name1 SLASH slashedName . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production slashedName -> name1 SLASH slashedName
-- On VAL_SQSTRING reduce production slashedName -> name1 SLASH slashedName
-- On VAL_ID reduce production slashedName -> name1 SLASH slashedName
-- On VAL_DOTTEDNAME reduce production slashedName -> name1 SLASH slashedName
-- On VALUETYPE reduce production slashedName -> name1 SLASH slashedName
-- On VALUE reduce production slashedName -> name1 SLASH slashedName
-- On UNSIGNED reduce production slashedName -> name1 SLASH slashedName
-- On UINT8 reduce production slashedName -> name1 SLASH slashedName
-- On UINT64 reduce production slashedName -> name1 SLASH slashedName
-- On UINT32 reduce production slashedName -> name1 SLASH slashedName
-- On UINT16 reduce production slashedName -> name1 SLASH slashedName
-- On TYPEDREF reduce production slashedName -> name1 SLASH slashedName
-- On STRING reduce production slashedName -> name1 SLASH slashedName
-- On STAR reduce production slashedName -> name1 SLASH slashedName
-- On RPAREN reduce production slashedName -> name1 SLASH slashedName
-- On OBJECT reduce production slashedName -> name1 SLASH slashedName
-- On NATIVE reduce production slashedName -> name1 SLASH slashedName
-- On METHOD reduce production slashedName -> name1 SLASH slashedName
-- On LPAREN reduce production slashedName -> name1 SLASH slashedName
-- On LESS reduce production slashedName -> name1 SLASH slashedName
-- On LBRACK reduce production slashedName -> name1 SLASH slashedName
-- On INT8 reduce production slashedName -> name1 SLASH slashedName
-- On INT64 reduce production slashedName -> name1 SLASH slashedName
-- On INT32 reduce production slashedName -> name1 SLASH slashedName
-- On INT16 reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_VALUETYPE reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_TYPE reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_TOK reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_STRING reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_SIG reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_R reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_NONE reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_METHOD reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_LOC reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_INT_TYPE reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_I8 reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_I32_I32 reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_I reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_FIELD reduce production slashedName -> name1 SLASH slashedName
-- On INSTR_ARG reduce production slashedName -> name1 SLASH slashedName
-- On GREATER reduce production slashedName -> name1 SLASH slashedName
-- On FLOAT64 reduce production slashedName -> name1 SLASH slashedName
-- On FLOAT32 reduce production slashedName -> name1 SLASH slashedName
-- On EOF reduce production slashedName -> name1 SLASH slashedName
-- On DOT_CTOR reduce production slashedName -> name1 SLASH slashedName
-- On DOT_CCTOR reduce production slashedName -> name1 SLASH slashedName
-- On DCOLON reduce production slashedName -> name1 SLASH slashedName
-- On COMMA reduce production slashedName -> name1 SLASH slashedName
-- On CLASS reduce production slashedName -> name1 SLASH slashedName
-- On CHAR reduce production slashedName -> name1 SLASH slashedName
-- On BOOL reduce production slashedName -> name1 SLASH slashedName
-- On BANG reduce production slashedName -> name1 SLASH slashedName
-- On AMP reduce production slashedName -> name1 SLASH slashedName

State 14:
## Known stack suffix:
## id
## LR(1) items:
name1 -> id . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR SLASH RPAREN RBRACK OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DOT DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production name1 -> id
-- On VAL_SQSTRING reduce production name1 -> id
-- On VAL_ID reduce production name1 -> id
-- On VAL_DOTTEDNAME reduce production name1 -> id
-- On VALUETYPE reduce production name1 -> id
-- On VALUE reduce production name1 -> id
-- On UNSIGNED reduce production name1 -> id
-- On UINT8 reduce production name1 -> id
-- On UINT64 reduce production name1 -> id
-- On UINT32 reduce production name1 -> id
-- On UINT16 reduce production name1 -> id
-- On TYPEDREF reduce production name1 -> id
-- On STRING reduce production name1 -> id
-- On STAR reduce production name1 -> id
-- On SLASH reduce production name1 -> id
-- On RPAREN reduce production name1 -> id
-- On RBRACK reduce production name1 -> id
-- On OBJECT reduce production name1 -> id
-- On NATIVE reduce production name1 -> id
-- On METHOD reduce production name1 -> id
-- On LPAREN reduce production name1 -> id
-- On LESS reduce production name1 -> id
-- On LBRACK reduce production name1 -> id
-- On INT8 reduce production name1 -> id
-- On INT64 reduce production name1 -> id
-- On INT32 reduce production name1 -> id
-- On INT16 reduce production name1 -> id
-- On INSTR_VALUETYPE reduce production name1 -> id
-- On INSTR_TYPE reduce production name1 -> id
-- On INSTR_TOK reduce production name1 -> id
-- On INSTR_STRING reduce production name1 -> id
-- On INSTR_SIG reduce production name1 -> id
-- On INSTR_R reduce production name1 -> id
-- On INSTR_NONE reduce production name1 -> id
-- On INSTR_METHOD reduce production name1 -> id
-- On INSTR_LOC reduce production name1 -> id
-- On INSTR_INT_TYPE reduce production name1 -> id
-- On INSTR_I8 reduce production name1 -> id
-- On INSTR_I32_I32 reduce production name1 -> id
-- On INSTR_I reduce production name1 -> id
-- On INSTR_FIELD reduce production name1 -> id
-- On INSTR_ARG reduce production name1 -> id
-- On GREATER reduce production name1 -> id
-- On FLOAT64 reduce production name1 -> id
-- On FLOAT32 reduce production name1 -> id
-- On EOF reduce production name1 -> id
-- On DOT_CTOR reduce production name1 -> id
-- On DOT_CCTOR reduce production name1 -> id
-- On DOT reduce production name1 -> id
-- On DCOLON reduce production name1 -> id
-- On COMMA reduce production name1 -> id
-- On CLASS reduce production name1 -> id
-- On CHAR reduce production name1 -> id
-- On BOOL reduce production name1 -> id
-- On BANG reduce production name1 -> id
-- On AMP reduce production name1 -> id

State 15:
## Known stack suffix:
## name1 DOT
## LR(1) items:
name1 -> name1 DOT . id [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR SLASH RPAREN RBRACK OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DOT DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On id shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## name1 DOT id
## LR(1) items:
name1 -> name1 DOT id . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR SLASH RPAREN RBRACK OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DOT DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production name1 -> name1 DOT id
-- On VAL_SQSTRING reduce production name1 -> name1 DOT id
-- On VAL_ID reduce production name1 -> name1 DOT id
-- On VAL_DOTTEDNAME reduce production name1 -> name1 DOT id
-- On VALUETYPE reduce production name1 -> name1 DOT id
-- On VALUE reduce production name1 -> name1 DOT id
-- On UNSIGNED reduce production name1 -> name1 DOT id
-- On UINT8 reduce production name1 -> name1 DOT id
-- On UINT64 reduce production name1 -> name1 DOT id
-- On UINT32 reduce production name1 -> name1 DOT id
-- On UINT16 reduce production name1 -> name1 DOT id
-- On TYPEDREF reduce production name1 -> name1 DOT id
-- On STRING reduce production name1 -> name1 DOT id
-- On STAR reduce production name1 -> name1 DOT id
-- On SLASH reduce production name1 -> name1 DOT id
-- On RPAREN reduce production name1 -> name1 DOT id
-- On RBRACK reduce production name1 -> name1 DOT id
-- On OBJECT reduce production name1 -> name1 DOT id
-- On NATIVE reduce production name1 -> name1 DOT id
-- On METHOD reduce production name1 -> name1 DOT id
-- On LPAREN reduce production name1 -> name1 DOT id
-- On LESS reduce production name1 -> name1 DOT id
-- On LBRACK reduce production name1 -> name1 DOT id
-- On INT8 reduce production name1 -> name1 DOT id
-- On INT64 reduce production name1 -> name1 DOT id
-- On INT32 reduce production name1 -> name1 DOT id
-- On INT16 reduce production name1 -> name1 DOT id
-- On INSTR_VALUETYPE reduce production name1 -> name1 DOT id
-- On INSTR_TYPE reduce production name1 -> name1 DOT id
-- On INSTR_TOK reduce production name1 -> name1 DOT id
-- On INSTR_STRING reduce production name1 -> name1 DOT id
-- On INSTR_SIG reduce production name1 -> name1 DOT id
-- On INSTR_R reduce production name1 -> name1 DOT id
-- On INSTR_NONE reduce production name1 -> name1 DOT id
-- On INSTR_METHOD reduce production name1 -> name1 DOT id
-- On INSTR_LOC reduce production name1 -> name1 DOT id
-- On INSTR_INT_TYPE reduce production name1 -> name1 DOT id
-- On INSTR_I8 reduce production name1 -> name1 DOT id
-- On INSTR_I32_I32 reduce production name1 -> name1 DOT id
-- On INSTR_I reduce production name1 -> name1 DOT id
-- On INSTR_FIELD reduce production name1 -> name1 DOT id
-- On INSTR_ARG reduce production name1 -> name1 DOT id
-- On GREATER reduce production name1 -> name1 DOT id
-- On FLOAT64 reduce production name1 -> name1 DOT id
-- On FLOAT32 reduce production name1 -> name1 DOT id
-- On EOF reduce production name1 -> name1 DOT id
-- On DOT_CTOR reduce production name1 -> name1 DOT id
-- On DOT_CCTOR reduce production name1 -> name1 DOT id
-- On DOT reduce production name1 -> name1 DOT id
-- On DCOLON reduce production name1 -> name1 DOT id
-- On COMMA reduce production name1 -> name1 DOT id
-- On CLASS reduce production name1 -> name1 DOT id
-- On CHAR reduce production name1 -> name1 DOT id
-- On BOOL reduce production name1 -> name1 DOT id
-- On BANG reduce production name1 -> name1 DOT id
-- On AMP reduce production name1 -> name1 DOT id

State 17:
## Known stack suffix:
## VALUETYPE typeNameInst
## LR(1) items:
typ -> VALUETYPE typeNameInst . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> VALUETYPE typeNameInst
-- On VAL_SQSTRING reduce production typ -> VALUETYPE typeNameInst
-- On VAL_ID reduce production typ -> VALUETYPE typeNameInst
-- On VAL_DOTTEDNAME reduce production typ -> VALUETYPE typeNameInst
-- On VALUETYPE reduce production typ -> VALUETYPE typeNameInst
-- On VALUE reduce production typ -> VALUETYPE typeNameInst
-- On UNSIGNED reduce production typ -> VALUETYPE typeNameInst
-- On UINT8 reduce production typ -> VALUETYPE typeNameInst
-- On UINT64 reduce production typ -> VALUETYPE typeNameInst
-- On UINT32 reduce production typ -> VALUETYPE typeNameInst
-- On UINT16 reduce production typ -> VALUETYPE typeNameInst
-- On TYPEDREF reduce production typ -> VALUETYPE typeNameInst
-- On STRING reduce production typ -> VALUETYPE typeNameInst
-- On STAR reduce production typ -> VALUETYPE typeNameInst
-- On RPAREN reduce production typ -> VALUETYPE typeNameInst
-- On OBJECT reduce production typ -> VALUETYPE typeNameInst
-- On NATIVE reduce production typ -> VALUETYPE typeNameInst
-- On METHOD reduce production typ -> VALUETYPE typeNameInst
-- On LPAREN reduce production typ -> VALUETYPE typeNameInst
-- On LBRACK reduce production typ -> VALUETYPE typeNameInst
-- On INT8 reduce production typ -> VALUETYPE typeNameInst
-- On INT64 reduce production typ -> VALUETYPE typeNameInst
-- On INT32 reduce production typ -> VALUETYPE typeNameInst
-- On INT16 reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_VALUETYPE reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_TYPE reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_TOK reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_STRING reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_SIG reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_R reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_NONE reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_METHOD reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_LOC reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_INT_TYPE reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_I8 reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_I32_I32 reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_I reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_FIELD reduce production typ -> VALUETYPE typeNameInst
-- On INSTR_ARG reduce production typ -> VALUETYPE typeNameInst
-- On GREATER reduce production typ -> VALUETYPE typeNameInst
-- On FLOAT64 reduce production typ -> VALUETYPE typeNameInst
-- On FLOAT32 reduce production typ -> VALUETYPE typeNameInst
-- On EOF reduce production typ -> VALUETYPE typeNameInst
-- On DOT_CTOR reduce production typ -> VALUETYPE typeNameInst
-- On DOT_CCTOR reduce production typ -> VALUETYPE typeNameInst
-- On DCOLON reduce production typ -> VALUETYPE typeNameInst
-- On COMMA reduce production typ -> VALUETYPE typeNameInst
-- On CLASS reduce production typ -> VALUETYPE typeNameInst
-- On CHAR reduce production typ -> VALUETYPE typeNameInst
-- On BOOL reduce production typ -> VALUETYPE typeNameInst
-- On BANG reduce production typ -> VALUETYPE typeNameInst
-- On AMP reduce production typ -> VALUETYPE typeNameInst

State 18:
## Known stack suffix:
## slashedName
## LR(1) items:
className -> slashedName . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LESS LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production className -> slashedName
-- On VAL_SQSTRING reduce production className -> slashedName
-- On VAL_ID reduce production className -> slashedName
-- On VAL_DOTTEDNAME reduce production className -> slashedName
-- On VALUETYPE reduce production className -> slashedName
-- On VALUE reduce production className -> slashedName
-- On UNSIGNED reduce production className -> slashedName
-- On UINT8 reduce production className -> slashedName
-- On UINT64 reduce production className -> slashedName
-- On UINT32 reduce production className -> slashedName
-- On UINT16 reduce production className -> slashedName
-- On TYPEDREF reduce production className -> slashedName
-- On STRING reduce production className -> slashedName
-- On STAR reduce production className -> slashedName
-- On RPAREN reduce production className -> slashedName
-- On OBJECT reduce production className -> slashedName
-- On NATIVE reduce production className -> slashedName
-- On METHOD reduce production className -> slashedName
-- On LPAREN reduce production className -> slashedName
-- On LESS reduce production className -> slashedName
-- On LBRACK reduce production className -> slashedName
-- On INT8 reduce production className -> slashedName
-- On INT64 reduce production className -> slashedName
-- On INT32 reduce production className -> slashedName
-- On INT16 reduce production className -> slashedName
-- On INSTR_VALUETYPE reduce production className -> slashedName
-- On INSTR_TYPE reduce production className -> slashedName
-- On INSTR_TOK reduce production className -> slashedName
-- On INSTR_STRING reduce production className -> slashedName
-- On INSTR_SIG reduce production className -> slashedName
-- On INSTR_R reduce production className -> slashedName
-- On INSTR_NONE reduce production className -> slashedName
-- On INSTR_METHOD reduce production className -> slashedName
-- On INSTR_LOC reduce production className -> slashedName
-- On INSTR_INT_TYPE reduce production className -> slashedName
-- On INSTR_I8 reduce production className -> slashedName
-- On INSTR_I32_I32 reduce production className -> slashedName
-- On INSTR_I reduce production className -> slashedName
-- On INSTR_FIELD reduce production className -> slashedName
-- On INSTR_ARG reduce production className -> slashedName
-- On GREATER reduce production className -> slashedName
-- On FLOAT64 reduce production className -> slashedName
-- On FLOAT32 reduce production className -> slashedName
-- On EOF reduce production className -> slashedName
-- On DOT_CTOR reduce production className -> slashedName
-- On DOT_CCTOR reduce production className -> slashedName
-- On DCOLON reduce production className -> slashedName
-- On COMMA reduce production className -> slashedName
-- On CLASS reduce production className -> slashedName
-- On CHAR reduce production className -> slashedName
-- On BOOL reduce production className -> slashedName
-- On BANG reduce production className -> slashedName
-- On AMP reduce production className -> slashedName

State 19:
## Known stack suffix:
## className
## LR(1) items:
typeNameInst -> className . opt_actual_tyargs [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On LESS shift to state 20
-- On opt_actual_tyargs shift to state 114
-- On actual_tyargs shift to state 115
## Reductions:
-- On VOID reduce production opt_actual_tyargs ->
-- On VAL_SQSTRING reduce production opt_actual_tyargs ->
-- On VAL_ID reduce production opt_actual_tyargs ->
-- On VAL_DOTTEDNAME reduce production opt_actual_tyargs ->
-- On VALUETYPE reduce production opt_actual_tyargs ->
-- On VALUE reduce production opt_actual_tyargs ->
-- On UNSIGNED reduce production opt_actual_tyargs ->
-- On UINT8 reduce production opt_actual_tyargs ->
-- On UINT64 reduce production opt_actual_tyargs ->
-- On UINT32 reduce production opt_actual_tyargs ->
-- On UINT16 reduce production opt_actual_tyargs ->
-- On TYPEDREF reduce production opt_actual_tyargs ->
-- On STRING reduce production opt_actual_tyargs ->
-- On STAR reduce production opt_actual_tyargs ->
-- On RPAREN reduce production opt_actual_tyargs ->
-- On OBJECT reduce production opt_actual_tyargs ->
-- On NATIVE reduce production opt_actual_tyargs ->
-- On METHOD reduce production opt_actual_tyargs ->
-- On LPAREN reduce production opt_actual_tyargs ->
-- On LBRACK reduce production opt_actual_tyargs ->
-- On INT8 reduce production opt_actual_tyargs ->
-- On INT64 reduce production opt_actual_tyargs ->
-- On INT32 reduce production opt_actual_tyargs ->
-- On INT16 reduce production opt_actual_tyargs ->
-- On INSTR_VALUETYPE reduce production opt_actual_tyargs ->
-- On INSTR_TYPE reduce production opt_actual_tyargs ->
-- On INSTR_TOK reduce production opt_actual_tyargs ->
-- On INSTR_STRING reduce production opt_actual_tyargs ->
-- On INSTR_SIG reduce production opt_actual_tyargs ->
-- On INSTR_R reduce production opt_actual_tyargs ->
-- On INSTR_NONE reduce production opt_actual_tyargs ->
-- On INSTR_METHOD reduce production opt_actual_tyargs ->
-- On INSTR_LOC reduce production opt_actual_tyargs ->
-- On INSTR_INT_TYPE reduce production opt_actual_tyargs ->
-- On INSTR_I8 reduce production opt_actual_tyargs ->
-- On INSTR_I32_I32 reduce production opt_actual_tyargs ->
-- On INSTR_I reduce production opt_actual_tyargs ->
-- On INSTR_FIELD reduce production opt_actual_tyargs ->
-- On INSTR_ARG reduce production opt_actual_tyargs ->
-- On GREATER reduce production opt_actual_tyargs ->
-- On FLOAT64 reduce production opt_actual_tyargs ->
-- On FLOAT32 reduce production opt_actual_tyargs ->
-- On EOF reduce production opt_actual_tyargs ->
-- On DOT_CTOR reduce production opt_actual_tyargs ->
-- On DOT_CCTOR reduce production opt_actual_tyargs ->
-- On DCOLON reduce production opt_actual_tyargs ->
-- On COMMA reduce production opt_actual_tyargs ->
-- On CLASS reduce production opt_actual_tyargs ->
-- On CHAR reduce production opt_actual_tyargs ->
-- On BOOL reduce production opt_actual_tyargs ->
-- On BANG reduce production opt_actual_tyargs ->
-- On AMP reduce production opt_actual_tyargs ->

State 20:
## Known stack suffix:
## LESS
## LR(1) items:
actual_tyargs -> LESS . actualTypSpecs GREATER [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 103
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typeName shift to state 106
-- On typSpec shift to state 107
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 109
-- On actualTypSpecs shift to state 110
## Reductions:

State 21:
## Known stack suffix:
## VALUE
## LR(1) items:
typ -> VALUE . CLASS typeNameInst [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On CLASS shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## VALUE CLASS
## LR(1) items:
typ -> VALUE CLASS . typeNameInst [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On LBRACK shift to state 7
-- On typeNameInst shift to state 23
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 19
## Reductions:

State 23:
## Known stack suffix:
## VALUE CLASS typeNameInst
## LR(1) items:
typ -> VALUE CLASS typeNameInst . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> VALUE CLASS typeNameInst
-- On VAL_SQSTRING reduce production typ -> VALUE CLASS typeNameInst
-- On VAL_ID reduce production typ -> VALUE CLASS typeNameInst
-- On VAL_DOTTEDNAME reduce production typ -> VALUE CLASS typeNameInst
-- On VALUETYPE reduce production typ -> VALUE CLASS typeNameInst
-- On VALUE reduce production typ -> VALUE CLASS typeNameInst
-- On UNSIGNED reduce production typ -> VALUE CLASS typeNameInst
-- On UINT8 reduce production typ -> VALUE CLASS typeNameInst
-- On UINT64 reduce production typ -> VALUE CLASS typeNameInst
-- On UINT32 reduce production typ -> VALUE CLASS typeNameInst
-- On UINT16 reduce production typ -> VALUE CLASS typeNameInst
-- On TYPEDREF reduce production typ -> VALUE CLASS typeNameInst
-- On STRING reduce production typ -> VALUE CLASS typeNameInst
-- On STAR reduce production typ -> VALUE CLASS typeNameInst
-- On RPAREN reduce production typ -> VALUE CLASS typeNameInst
-- On OBJECT reduce production typ -> VALUE CLASS typeNameInst
-- On NATIVE reduce production typ -> VALUE CLASS typeNameInst
-- On METHOD reduce production typ -> VALUE CLASS typeNameInst
-- On LPAREN reduce production typ -> VALUE CLASS typeNameInst
-- On LBRACK reduce production typ -> VALUE CLASS typeNameInst
-- On INT8 reduce production typ -> VALUE CLASS typeNameInst
-- On INT64 reduce production typ -> VALUE CLASS typeNameInst
-- On INT32 reduce production typ -> VALUE CLASS typeNameInst
-- On INT16 reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_VALUETYPE reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_TYPE reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_TOK reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_STRING reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_SIG reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_R reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_NONE reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_METHOD reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_LOC reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_INT_TYPE reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_I8 reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_I32_I32 reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_I reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_FIELD reduce production typ -> VALUE CLASS typeNameInst
-- On INSTR_ARG reduce production typ -> VALUE CLASS typeNameInst
-- On GREATER reduce production typ -> VALUE CLASS typeNameInst
-- On FLOAT64 reduce production typ -> VALUE CLASS typeNameInst
-- On FLOAT32 reduce production typ -> VALUE CLASS typeNameInst
-- On EOF reduce production typ -> VALUE CLASS typeNameInst
-- On DOT_CTOR reduce production typ -> VALUE CLASS typeNameInst
-- On DOT_CCTOR reduce production typ -> VALUE CLASS typeNameInst
-- On DCOLON reduce production typ -> VALUE CLASS typeNameInst
-- On COMMA reduce production typ -> VALUE CLASS typeNameInst
-- On CLASS reduce production typ -> VALUE CLASS typeNameInst
-- On CHAR reduce production typ -> VALUE CLASS typeNameInst
-- On BOOL reduce production typ -> VALUE CLASS typeNameInst
-- On BANG reduce production typ -> VALUE CLASS typeNameInst
-- On AMP reduce production typ -> VALUE CLASS typeNameInst

State 24:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
typ -> UNSIGNED . INT8 [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> UNSIGNED . INT16 [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> UNSIGNED . INT32 [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> UNSIGNED . INT64 [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On INT8 shift to state 25
-- On INT64 shift to state 26
-- On INT32 shift to state 27
-- On INT16 shift to state 28
## Reductions:

State 25:
## Known stack suffix:
## UNSIGNED INT8
## LR(1) items:
typ -> UNSIGNED INT8 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UNSIGNED INT8
-- On VAL_SQSTRING reduce production typ -> UNSIGNED INT8
-- On VAL_ID reduce production typ -> UNSIGNED INT8
-- On VAL_DOTTEDNAME reduce production typ -> UNSIGNED INT8
-- On VALUETYPE reduce production typ -> UNSIGNED INT8
-- On VALUE reduce production typ -> UNSIGNED INT8
-- On UNSIGNED reduce production typ -> UNSIGNED INT8
-- On UINT8 reduce production typ -> UNSIGNED INT8
-- On UINT64 reduce production typ -> UNSIGNED INT8
-- On UINT32 reduce production typ -> UNSIGNED INT8
-- On UINT16 reduce production typ -> UNSIGNED INT8
-- On TYPEDREF reduce production typ -> UNSIGNED INT8
-- On STRING reduce production typ -> UNSIGNED INT8
-- On STAR reduce production typ -> UNSIGNED INT8
-- On RPAREN reduce production typ -> UNSIGNED INT8
-- On OBJECT reduce production typ -> UNSIGNED INT8
-- On NATIVE reduce production typ -> UNSIGNED INT8
-- On METHOD reduce production typ -> UNSIGNED INT8
-- On LPAREN reduce production typ -> UNSIGNED INT8
-- On LBRACK reduce production typ -> UNSIGNED INT8
-- On INT8 reduce production typ -> UNSIGNED INT8
-- On INT64 reduce production typ -> UNSIGNED INT8
-- On INT32 reduce production typ -> UNSIGNED INT8
-- On INT16 reduce production typ -> UNSIGNED INT8
-- On INSTR_VALUETYPE reduce production typ -> UNSIGNED INT8
-- On INSTR_TYPE reduce production typ -> UNSIGNED INT8
-- On INSTR_TOK reduce production typ -> UNSIGNED INT8
-- On INSTR_STRING reduce production typ -> UNSIGNED INT8
-- On INSTR_SIG reduce production typ -> UNSIGNED INT8
-- On INSTR_R reduce production typ -> UNSIGNED INT8
-- On INSTR_NONE reduce production typ -> UNSIGNED INT8
-- On INSTR_METHOD reduce production typ -> UNSIGNED INT8
-- On INSTR_LOC reduce production typ -> UNSIGNED INT8
-- On INSTR_INT_TYPE reduce production typ -> UNSIGNED INT8
-- On INSTR_I8 reduce production typ -> UNSIGNED INT8
-- On INSTR_I32_I32 reduce production typ -> UNSIGNED INT8
-- On INSTR_I reduce production typ -> UNSIGNED INT8
-- On INSTR_FIELD reduce production typ -> UNSIGNED INT8
-- On INSTR_ARG reduce production typ -> UNSIGNED INT8
-- On GREATER reduce production typ -> UNSIGNED INT8
-- On FLOAT64 reduce production typ -> UNSIGNED INT8
-- On FLOAT32 reduce production typ -> UNSIGNED INT8
-- On EOF reduce production typ -> UNSIGNED INT8
-- On DOT_CTOR reduce production typ -> UNSIGNED INT8
-- On DOT_CCTOR reduce production typ -> UNSIGNED INT8
-- On DCOLON reduce production typ -> UNSIGNED INT8
-- On COMMA reduce production typ -> UNSIGNED INT8
-- On CLASS reduce production typ -> UNSIGNED INT8
-- On CHAR reduce production typ -> UNSIGNED INT8
-- On BOOL reduce production typ -> UNSIGNED INT8
-- On BANG reduce production typ -> UNSIGNED INT8
-- On AMP reduce production typ -> UNSIGNED INT8

State 26:
## Known stack suffix:
## UNSIGNED INT64
## LR(1) items:
typ -> UNSIGNED INT64 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UNSIGNED INT64
-- On VAL_SQSTRING reduce production typ -> UNSIGNED INT64
-- On VAL_ID reduce production typ -> UNSIGNED INT64
-- On VAL_DOTTEDNAME reduce production typ -> UNSIGNED INT64
-- On VALUETYPE reduce production typ -> UNSIGNED INT64
-- On VALUE reduce production typ -> UNSIGNED INT64
-- On UNSIGNED reduce production typ -> UNSIGNED INT64
-- On UINT8 reduce production typ -> UNSIGNED INT64
-- On UINT64 reduce production typ -> UNSIGNED INT64
-- On UINT32 reduce production typ -> UNSIGNED INT64
-- On UINT16 reduce production typ -> UNSIGNED INT64
-- On TYPEDREF reduce production typ -> UNSIGNED INT64
-- On STRING reduce production typ -> UNSIGNED INT64
-- On STAR reduce production typ -> UNSIGNED INT64
-- On RPAREN reduce production typ -> UNSIGNED INT64
-- On OBJECT reduce production typ -> UNSIGNED INT64
-- On NATIVE reduce production typ -> UNSIGNED INT64
-- On METHOD reduce production typ -> UNSIGNED INT64
-- On LPAREN reduce production typ -> UNSIGNED INT64
-- On LBRACK reduce production typ -> UNSIGNED INT64
-- On INT8 reduce production typ -> UNSIGNED INT64
-- On INT64 reduce production typ -> UNSIGNED INT64
-- On INT32 reduce production typ -> UNSIGNED INT64
-- On INT16 reduce production typ -> UNSIGNED INT64
-- On INSTR_VALUETYPE reduce production typ -> UNSIGNED INT64
-- On INSTR_TYPE reduce production typ -> UNSIGNED INT64
-- On INSTR_TOK reduce production typ -> UNSIGNED INT64
-- On INSTR_STRING reduce production typ -> UNSIGNED INT64
-- On INSTR_SIG reduce production typ -> UNSIGNED INT64
-- On INSTR_R reduce production typ -> UNSIGNED INT64
-- On INSTR_NONE reduce production typ -> UNSIGNED INT64
-- On INSTR_METHOD reduce production typ -> UNSIGNED INT64
-- On INSTR_LOC reduce production typ -> UNSIGNED INT64
-- On INSTR_INT_TYPE reduce production typ -> UNSIGNED INT64
-- On INSTR_I8 reduce production typ -> UNSIGNED INT64
-- On INSTR_I32_I32 reduce production typ -> UNSIGNED INT64
-- On INSTR_I reduce production typ -> UNSIGNED INT64
-- On INSTR_FIELD reduce production typ -> UNSIGNED INT64
-- On INSTR_ARG reduce production typ -> UNSIGNED INT64
-- On GREATER reduce production typ -> UNSIGNED INT64
-- On FLOAT64 reduce production typ -> UNSIGNED INT64
-- On FLOAT32 reduce production typ -> UNSIGNED INT64
-- On EOF reduce production typ -> UNSIGNED INT64
-- On DOT_CTOR reduce production typ -> UNSIGNED INT64
-- On DOT_CCTOR reduce production typ -> UNSIGNED INT64
-- On DCOLON reduce production typ -> UNSIGNED INT64
-- On COMMA reduce production typ -> UNSIGNED INT64
-- On CLASS reduce production typ -> UNSIGNED INT64
-- On CHAR reduce production typ -> UNSIGNED INT64
-- On BOOL reduce production typ -> UNSIGNED INT64
-- On BANG reduce production typ -> UNSIGNED INT64
-- On AMP reduce production typ -> UNSIGNED INT64

State 27:
## Known stack suffix:
## UNSIGNED INT32
## LR(1) items:
typ -> UNSIGNED INT32 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UNSIGNED INT32
-- On VAL_SQSTRING reduce production typ -> UNSIGNED INT32
-- On VAL_ID reduce production typ -> UNSIGNED INT32
-- On VAL_DOTTEDNAME reduce production typ -> UNSIGNED INT32
-- On VALUETYPE reduce production typ -> UNSIGNED INT32
-- On VALUE reduce production typ -> UNSIGNED INT32
-- On UNSIGNED reduce production typ -> UNSIGNED INT32
-- On UINT8 reduce production typ -> UNSIGNED INT32
-- On UINT64 reduce production typ -> UNSIGNED INT32
-- On UINT32 reduce production typ -> UNSIGNED INT32
-- On UINT16 reduce production typ -> UNSIGNED INT32
-- On TYPEDREF reduce production typ -> UNSIGNED INT32
-- On STRING reduce production typ -> UNSIGNED INT32
-- On STAR reduce production typ -> UNSIGNED INT32
-- On RPAREN reduce production typ -> UNSIGNED INT32
-- On OBJECT reduce production typ -> UNSIGNED INT32
-- On NATIVE reduce production typ -> UNSIGNED INT32
-- On METHOD reduce production typ -> UNSIGNED INT32
-- On LPAREN reduce production typ -> UNSIGNED INT32
-- On LBRACK reduce production typ -> UNSIGNED INT32
-- On INT8 reduce production typ -> UNSIGNED INT32
-- On INT64 reduce production typ -> UNSIGNED INT32
-- On INT32 reduce production typ -> UNSIGNED INT32
-- On INT16 reduce production typ -> UNSIGNED INT32
-- On INSTR_VALUETYPE reduce production typ -> UNSIGNED INT32
-- On INSTR_TYPE reduce production typ -> UNSIGNED INT32
-- On INSTR_TOK reduce production typ -> UNSIGNED INT32
-- On INSTR_STRING reduce production typ -> UNSIGNED INT32
-- On INSTR_SIG reduce production typ -> UNSIGNED INT32
-- On INSTR_R reduce production typ -> UNSIGNED INT32
-- On INSTR_NONE reduce production typ -> UNSIGNED INT32
-- On INSTR_METHOD reduce production typ -> UNSIGNED INT32
-- On INSTR_LOC reduce production typ -> UNSIGNED INT32
-- On INSTR_INT_TYPE reduce production typ -> UNSIGNED INT32
-- On INSTR_I8 reduce production typ -> UNSIGNED INT32
-- On INSTR_I32_I32 reduce production typ -> UNSIGNED INT32
-- On INSTR_I reduce production typ -> UNSIGNED INT32
-- On INSTR_FIELD reduce production typ -> UNSIGNED INT32
-- On INSTR_ARG reduce production typ -> UNSIGNED INT32
-- On GREATER reduce production typ -> UNSIGNED INT32
-- On FLOAT64 reduce production typ -> UNSIGNED INT32
-- On FLOAT32 reduce production typ -> UNSIGNED INT32
-- On EOF reduce production typ -> UNSIGNED INT32
-- On DOT_CTOR reduce production typ -> UNSIGNED INT32
-- On DOT_CCTOR reduce production typ -> UNSIGNED INT32
-- On DCOLON reduce production typ -> UNSIGNED INT32
-- On COMMA reduce production typ -> UNSIGNED INT32
-- On CLASS reduce production typ -> UNSIGNED INT32
-- On CHAR reduce production typ -> UNSIGNED INT32
-- On BOOL reduce production typ -> UNSIGNED INT32
-- On BANG reduce production typ -> UNSIGNED INT32
-- On AMP reduce production typ -> UNSIGNED INT32

State 28:
## Known stack suffix:
## UNSIGNED INT16
## LR(1) items:
typ -> UNSIGNED INT16 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UNSIGNED INT16
-- On VAL_SQSTRING reduce production typ -> UNSIGNED INT16
-- On VAL_ID reduce production typ -> UNSIGNED INT16
-- On VAL_DOTTEDNAME reduce production typ -> UNSIGNED INT16
-- On VALUETYPE reduce production typ -> UNSIGNED INT16
-- On VALUE reduce production typ -> UNSIGNED INT16
-- On UNSIGNED reduce production typ -> UNSIGNED INT16
-- On UINT8 reduce production typ -> UNSIGNED INT16
-- On UINT64 reduce production typ -> UNSIGNED INT16
-- On UINT32 reduce production typ -> UNSIGNED INT16
-- On UINT16 reduce production typ -> UNSIGNED INT16
-- On TYPEDREF reduce production typ -> UNSIGNED INT16
-- On STRING reduce production typ -> UNSIGNED INT16
-- On STAR reduce production typ -> UNSIGNED INT16
-- On RPAREN reduce production typ -> UNSIGNED INT16
-- On OBJECT reduce production typ -> UNSIGNED INT16
-- On NATIVE reduce production typ -> UNSIGNED INT16
-- On METHOD reduce production typ -> UNSIGNED INT16
-- On LPAREN reduce production typ -> UNSIGNED INT16
-- On LBRACK reduce production typ -> UNSIGNED INT16
-- On INT8 reduce production typ -> UNSIGNED INT16
-- On INT64 reduce production typ -> UNSIGNED INT16
-- On INT32 reduce production typ -> UNSIGNED INT16
-- On INT16 reduce production typ -> UNSIGNED INT16
-- On INSTR_VALUETYPE reduce production typ -> UNSIGNED INT16
-- On INSTR_TYPE reduce production typ -> UNSIGNED INT16
-- On INSTR_TOK reduce production typ -> UNSIGNED INT16
-- On INSTR_STRING reduce production typ -> UNSIGNED INT16
-- On INSTR_SIG reduce production typ -> UNSIGNED INT16
-- On INSTR_R reduce production typ -> UNSIGNED INT16
-- On INSTR_NONE reduce production typ -> UNSIGNED INT16
-- On INSTR_METHOD reduce production typ -> UNSIGNED INT16
-- On INSTR_LOC reduce production typ -> UNSIGNED INT16
-- On INSTR_INT_TYPE reduce production typ -> UNSIGNED INT16
-- On INSTR_I8 reduce production typ -> UNSIGNED INT16
-- On INSTR_I32_I32 reduce production typ -> UNSIGNED INT16
-- On INSTR_I reduce production typ -> UNSIGNED INT16
-- On INSTR_FIELD reduce production typ -> UNSIGNED INT16
-- On INSTR_ARG reduce production typ -> UNSIGNED INT16
-- On GREATER reduce production typ -> UNSIGNED INT16
-- On FLOAT64 reduce production typ -> UNSIGNED INT16
-- On FLOAT32 reduce production typ -> UNSIGNED INT16
-- On EOF reduce production typ -> UNSIGNED INT16
-- On DOT_CTOR reduce production typ -> UNSIGNED INT16
-- On DOT_CCTOR reduce production typ -> UNSIGNED INT16
-- On DCOLON reduce production typ -> UNSIGNED INT16
-- On COMMA reduce production typ -> UNSIGNED INT16
-- On CLASS reduce production typ -> UNSIGNED INT16
-- On CHAR reduce production typ -> UNSIGNED INT16
-- On BOOL reduce production typ -> UNSIGNED INT16
-- On BANG reduce production typ -> UNSIGNED INT16
-- On AMP reduce production typ -> UNSIGNED INT16

State 29:
## Known stack suffix:
## UINT8
## LR(1) items:
typ -> UINT8 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UINT8
-- On VAL_SQSTRING reduce production typ -> UINT8
-- On VAL_ID reduce production typ -> UINT8
-- On VAL_DOTTEDNAME reduce production typ -> UINT8
-- On VALUETYPE reduce production typ -> UINT8
-- On VALUE reduce production typ -> UINT8
-- On UNSIGNED reduce production typ -> UINT8
-- On UINT8 reduce production typ -> UINT8
-- On UINT64 reduce production typ -> UINT8
-- On UINT32 reduce production typ -> UINT8
-- On UINT16 reduce production typ -> UINT8
-- On TYPEDREF reduce production typ -> UINT8
-- On STRING reduce production typ -> UINT8
-- On STAR reduce production typ -> UINT8
-- On RPAREN reduce production typ -> UINT8
-- On OBJECT reduce production typ -> UINT8
-- On NATIVE reduce production typ -> UINT8
-- On METHOD reduce production typ -> UINT8
-- On LPAREN reduce production typ -> UINT8
-- On LBRACK reduce production typ -> UINT8
-- On INT8 reduce production typ -> UINT8
-- On INT64 reduce production typ -> UINT8
-- On INT32 reduce production typ -> UINT8
-- On INT16 reduce production typ -> UINT8
-- On INSTR_VALUETYPE reduce production typ -> UINT8
-- On INSTR_TYPE reduce production typ -> UINT8
-- On INSTR_TOK reduce production typ -> UINT8
-- On INSTR_STRING reduce production typ -> UINT8
-- On INSTR_SIG reduce production typ -> UINT8
-- On INSTR_R reduce production typ -> UINT8
-- On INSTR_NONE reduce production typ -> UINT8
-- On INSTR_METHOD reduce production typ -> UINT8
-- On INSTR_LOC reduce production typ -> UINT8
-- On INSTR_INT_TYPE reduce production typ -> UINT8
-- On INSTR_I8 reduce production typ -> UINT8
-- On INSTR_I32_I32 reduce production typ -> UINT8
-- On INSTR_I reduce production typ -> UINT8
-- On INSTR_FIELD reduce production typ -> UINT8
-- On INSTR_ARG reduce production typ -> UINT8
-- On GREATER reduce production typ -> UINT8
-- On FLOAT64 reduce production typ -> UINT8
-- On FLOAT32 reduce production typ -> UINT8
-- On EOF reduce production typ -> UINT8
-- On DOT_CTOR reduce production typ -> UINT8
-- On DOT_CCTOR reduce production typ -> UINT8
-- On DCOLON reduce production typ -> UINT8
-- On COMMA reduce production typ -> UINT8
-- On CLASS reduce production typ -> UINT8
-- On CHAR reduce production typ -> UINT8
-- On BOOL reduce production typ -> UINT8
-- On BANG reduce production typ -> UINT8
-- On AMP reduce production typ -> UINT8

State 30:
## Known stack suffix:
## UINT64
## LR(1) items:
typ -> UINT64 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UINT64
-- On VAL_SQSTRING reduce production typ -> UINT64
-- On VAL_ID reduce production typ -> UINT64
-- On VAL_DOTTEDNAME reduce production typ -> UINT64
-- On VALUETYPE reduce production typ -> UINT64
-- On VALUE reduce production typ -> UINT64
-- On UNSIGNED reduce production typ -> UINT64
-- On UINT8 reduce production typ -> UINT64
-- On UINT64 reduce production typ -> UINT64
-- On UINT32 reduce production typ -> UINT64
-- On UINT16 reduce production typ -> UINT64
-- On TYPEDREF reduce production typ -> UINT64
-- On STRING reduce production typ -> UINT64
-- On STAR reduce production typ -> UINT64
-- On RPAREN reduce production typ -> UINT64
-- On OBJECT reduce production typ -> UINT64
-- On NATIVE reduce production typ -> UINT64
-- On METHOD reduce production typ -> UINT64
-- On LPAREN reduce production typ -> UINT64
-- On LBRACK reduce production typ -> UINT64
-- On INT8 reduce production typ -> UINT64
-- On INT64 reduce production typ -> UINT64
-- On INT32 reduce production typ -> UINT64
-- On INT16 reduce production typ -> UINT64
-- On INSTR_VALUETYPE reduce production typ -> UINT64
-- On INSTR_TYPE reduce production typ -> UINT64
-- On INSTR_TOK reduce production typ -> UINT64
-- On INSTR_STRING reduce production typ -> UINT64
-- On INSTR_SIG reduce production typ -> UINT64
-- On INSTR_R reduce production typ -> UINT64
-- On INSTR_NONE reduce production typ -> UINT64
-- On INSTR_METHOD reduce production typ -> UINT64
-- On INSTR_LOC reduce production typ -> UINT64
-- On INSTR_INT_TYPE reduce production typ -> UINT64
-- On INSTR_I8 reduce production typ -> UINT64
-- On INSTR_I32_I32 reduce production typ -> UINT64
-- On INSTR_I reduce production typ -> UINT64
-- On INSTR_FIELD reduce production typ -> UINT64
-- On INSTR_ARG reduce production typ -> UINT64
-- On GREATER reduce production typ -> UINT64
-- On FLOAT64 reduce production typ -> UINT64
-- On FLOAT32 reduce production typ -> UINT64
-- On EOF reduce production typ -> UINT64
-- On DOT_CTOR reduce production typ -> UINT64
-- On DOT_CCTOR reduce production typ -> UINT64
-- On DCOLON reduce production typ -> UINT64
-- On COMMA reduce production typ -> UINT64
-- On CLASS reduce production typ -> UINT64
-- On CHAR reduce production typ -> UINT64
-- On BOOL reduce production typ -> UINT64
-- On BANG reduce production typ -> UINT64
-- On AMP reduce production typ -> UINT64

State 31:
## Known stack suffix:
## UINT32
## LR(1) items:
typ -> UINT32 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UINT32
-- On VAL_SQSTRING reduce production typ -> UINT32
-- On VAL_ID reduce production typ -> UINT32
-- On VAL_DOTTEDNAME reduce production typ -> UINT32
-- On VALUETYPE reduce production typ -> UINT32
-- On VALUE reduce production typ -> UINT32
-- On UNSIGNED reduce production typ -> UINT32
-- On UINT8 reduce production typ -> UINT32
-- On UINT64 reduce production typ -> UINT32
-- On UINT32 reduce production typ -> UINT32
-- On UINT16 reduce production typ -> UINT32
-- On TYPEDREF reduce production typ -> UINT32
-- On STRING reduce production typ -> UINT32
-- On STAR reduce production typ -> UINT32
-- On RPAREN reduce production typ -> UINT32
-- On OBJECT reduce production typ -> UINT32
-- On NATIVE reduce production typ -> UINT32
-- On METHOD reduce production typ -> UINT32
-- On LPAREN reduce production typ -> UINT32
-- On LBRACK reduce production typ -> UINT32
-- On INT8 reduce production typ -> UINT32
-- On INT64 reduce production typ -> UINT32
-- On INT32 reduce production typ -> UINT32
-- On INT16 reduce production typ -> UINT32
-- On INSTR_VALUETYPE reduce production typ -> UINT32
-- On INSTR_TYPE reduce production typ -> UINT32
-- On INSTR_TOK reduce production typ -> UINT32
-- On INSTR_STRING reduce production typ -> UINT32
-- On INSTR_SIG reduce production typ -> UINT32
-- On INSTR_R reduce production typ -> UINT32
-- On INSTR_NONE reduce production typ -> UINT32
-- On INSTR_METHOD reduce production typ -> UINT32
-- On INSTR_LOC reduce production typ -> UINT32
-- On INSTR_INT_TYPE reduce production typ -> UINT32
-- On INSTR_I8 reduce production typ -> UINT32
-- On INSTR_I32_I32 reduce production typ -> UINT32
-- On INSTR_I reduce production typ -> UINT32
-- On INSTR_FIELD reduce production typ -> UINT32
-- On INSTR_ARG reduce production typ -> UINT32
-- On GREATER reduce production typ -> UINT32
-- On FLOAT64 reduce production typ -> UINT32
-- On FLOAT32 reduce production typ -> UINT32
-- On EOF reduce production typ -> UINT32
-- On DOT_CTOR reduce production typ -> UINT32
-- On DOT_CCTOR reduce production typ -> UINT32
-- On DCOLON reduce production typ -> UINT32
-- On COMMA reduce production typ -> UINT32
-- On CLASS reduce production typ -> UINT32
-- On CHAR reduce production typ -> UINT32
-- On BOOL reduce production typ -> UINT32
-- On BANG reduce production typ -> UINT32
-- On AMP reduce production typ -> UINT32

State 32:
## Known stack suffix:
## UINT16
## LR(1) items:
typ -> UINT16 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> UINT16
-- On VAL_SQSTRING reduce production typ -> UINT16
-- On VAL_ID reduce production typ -> UINT16
-- On VAL_DOTTEDNAME reduce production typ -> UINT16
-- On VALUETYPE reduce production typ -> UINT16
-- On VALUE reduce production typ -> UINT16
-- On UNSIGNED reduce production typ -> UINT16
-- On UINT8 reduce production typ -> UINT16
-- On UINT64 reduce production typ -> UINT16
-- On UINT32 reduce production typ -> UINT16
-- On UINT16 reduce production typ -> UINT16
-- On TYPEDREF reduce production typ -> UINT16
-- On STRING reduce production typ -> UINT16
-- On STAR reduce production typ -> UINT16
-- On RPAREN reduce production typ -> UINT16
-- On OBJECT reduce production typ -> UINT16
-- On NATIVE reduce production typ -> UINT16
-- On METHOD reduce production typ -> UINT16
-- On LPAREN reduce production typ -> UINT16
-- On LBRACK reduce production typ -> UINT16
-- On INT8 reduce production typ -> UINT16
-- On INT64 reduce production typ -> UINT16
-- On INT32 reduce production typ -> UINT16
-- On INT16 reduce production typ -> UINT16
-- On INSTR_VALUETYPE reduce production typ -> UINT16
-- On INSTR_TYPE reduce production typ -> UINT16
-- On INSTR_TOK reduce production typ -> UINT16
-- On INSTR_STRING reduce production typ -> UINT16
-- On INSTR_SIG reduce production typ -> UINT16
-- On INSTR_R reduce production typ -> UINT16
-- On INSTR_NONE reduce production typ -> UINT16
-- On INSTR_METHOD reduce production typ -> UINT16
-- On INSTR_LOC reduce production typ -> UINT16
-- On INSTR_INT_TYPE reduce production typ -> UINT16
-- On INSTR_I8 reduce production typ -> UINT16
-- On INSTR_I32_I32 reduce production typ -> UINT16
-- On INSTR_I reduce production typ -> UINT16
-- On INSTR_FIELD reduce production typ -> UINT16
-- On INSTR_ARG reduce production typ -> UINT16
-- On GREATER reduce production typ -> UINT16
-- On FLOAT64 reduce production typ -> UINT16
-- On FLOAT32 reduce production typ -> UINT16
-- On EOF reduce production typ -> UINT16
-- On DOT_CTOR reduce production typ -> UINT16
-- On DOT_CCTOR reduce production typ -> UINT16
-- On DCOLON reduce production typ -> UINT16
-- On COMMA reduce production typ -> UINT16
-- On CLASS reduce production typ -> UINT16
-- On CHAR reduce production typ -> UINT16
-- On BOOL reduce production typ -> UINT16
-- On BANG reduce production typ -> UINT16
-- On AMP reduce production typ -> UINT16

State 33:
## Known stack suffix:
## TYPEDREF
## LR(1) items:
typ -> TYPEDREF . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> TYPEDREF
-- On VAL_SQSTRING reduce production typ -> TYPEDREF
-- On VAL_ID reduce production typ -> TYPEDREF
-- On VAL_DOTTEDNAME reduce production typ -> TYPEDREF
-- On VALUETYPE reduce production typ -> TYPEDREF
-- On VALUE reduce production typ -> TYPEDREF
-- On UNSIGNED reduce production typ -> TYPEDREF
-- On UINT8 reduce production typ -> TYPEDREF
-- On UINT64 reduce production typ -> TYPEDREF
-- On UINT32 reduce production typ -> TYPEDREF
-- On UINT16 reduce production typ -> TYPEDREF
-- On TYPEDREF reduce production typ -> TYPEDREF
-- On STRING reduce production typ -> TYPEDREF
-- On STAR reduce production typ -> TYPEDREF
-- On RPAREN reduce production typ -> TYPEDREF
-- On OBJECT reduce production typ -> TYPEDREF
-- On NATIVE reduce production typ -> TYPEDREF
-- On METHOD reduce production typ -> TYPEDREF
-- On LPAREN reduce production typ -> TYPEDREF
-- On LBRACK reduce production typ -> TYPEDREF
-- On INT8 reduce production typ -> TYPEDREF
-- On INT64 reduce production typ -> TYPEDREF
-- On INT32 reduce production typ -> TYPEDREF
-- On INT16 reduce production typ -> TYPEDREF
-- On INSTR_VALUETYPE reduce production typ -> TYPEDREF
-- On INSTR_TYPE reduce production typ -> TYPEDREF
-- On INSTR_TOK reduce production typ -> TYPEDREF
-- On INSTR_STRING reduce production typ -> TYPEDREF
-- On INSTR_SIG reduce production typ -> TYPEDREF
-- On INSTR_R reduce production typ -> TYPEDREF
-- On INSTR_NONE reduce production typ -> TYPEDREF
-- On INSTR_METHOD reduce production typ -> TYPEDREF
-- On INSTR_LOC reduce production typ -> TYPEDREF
-- On INSTR_INT_TYPE reduce production typ -> TYPEDREF
-- On INSTR_I8 reduce production typ -> TYPEDREF
-- On INSTR_I32_I32 reduce production typ -> TYPEDREF
-- On INSTR_I reduce production typ -> TYPEDREF
-- On INSTR_FIELD reduce production typ -> TYPEDREF
-- On INSTR_ARG reduce production typ -> TYPEDREF
-- On GREATER reduce production typ -> TYPEDREF
-- On FLOAT64 reduce production typ -> TYPEDREF
-- On FLOAT32 reduce production typ -> TYPEDREF
-- On EOF reduce production typ -> TYPEDREF
-- On DOT_CTOR reduce production typ -> TYPEDREF
-- On DOT_CCTOR reduce production typ -> TYPEDREF
-- On DCOLON reduce production typ -> TYPEDREF
-- On COMMA reduce production typ -> TYPEDREF
-- On CLASS reduce production typ -> TYPEDREF
-- On CHAR reduce production typ -> TYPEDREF
-- On BOOL reduce production typ -> TYPEDREF
-- On BANG reduce production typ -> TYPEDREF
-- On AMP reduce production typ -> TYPEDREF

State 34:
## Known stack suffix:
## STRING
## LR(1) items:
typ -> STRING . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> STRING
-- On VAL_SQSTRING reduce production typ -> STRING
-- On VAL_ID reduce production typ -> STRING
-- On VAL_DOTTEDNAME reduce production typ -> STRING
-- On VALUETYPE reduce production typ -> STRING
-- On VALUE reduce production typ -> STRING
-- On UNSIGNED reduce production typ -> STRING
-- On UINT8 reduce production typ -> STRING
-- On UINT64 reduce production typ -> STRING
-- On UINT32 reduce production typ -> STRING
-- On UINT16 reduce production typ -> STRING
-- On TYPEDREF reduce production typ -> STRING
-- On STRING reduce production typ -> STRING
-- On STAR reduce production typ -> STRING
-- On RPAREN reduce production typ -> STRING
-- On OBJECT reduce production typ -> STRING
-- On NATIVE reduce production typ -> STRING
-- On METHOD reduce production typ -> STRING
-- On LPAREN reduce production typ -> STRING
-- On LBRACK reduce production typ -> STRING
-- On INT8 reduce production typ -> STRING
-- On INT64 reduce production typ -> STRING
-- On INT32 reduce production typ -> STRING
-- On INT16 reduce production typ -> STRING
-- On INSTR_VALUETYPE reduce production typ -> STRING
-- On INSTR_TYPE reduce production typ -> STRING
-- On INSTR_TOK reduce production typ -> STRING
-- On INSTR_STRING reduce production typ -> STRING
-- On INSTR_SIG reduce production typ -> STRING
-- On INSTR_R reduce production typ -> STRING
-- On INSTR_NONE reduce production typ -> STRING
-- On INSTR_METHOD reduce production typ -> STRING
-- On INSTR_LOC reduce production typ -> STRING
-- On INSTR_INT_TYPE reduce production typ -> STRING
-- On INSTR_I8 reduce production typ -> STRING
-- On INSTR_I32_I32 reduce production typ -> STRING
-- On INSTR_I reduce production typ -> STRING
-- On INSTR_FIELD reduce production typ -> STRING
-- On INSTR_ARG reduce production typ -> STRING
-- On GREATER reduce production typ -> STRING
-- On FLOAT64 reduce production typ -> STRING
-- On FLOAT32 reduce production typ -> STRING
-- On EOF reduce production typ -> STRING
-- On DOT_CTOR reduce production typ -> STRING
-- On DOT_CCTOR reduce production typ -> STRING
-- On DCOLON reduce production typ -> STRING
-- On COMMA reduce production typ -> STRING
-- On CLASS reduce production typ -> STRING
-- On CHAR reduce production typ -> STRING
-- On BOOL reduce production typ -> STRING
-- On BANG reduce production typ -> STRING
-- On AMP reduce production typ -> STRING

State 35:
## Known stack suffix:
## OBJECT
## LR(1) items:
typ -> OBJECT . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> OBJECT
-- On VAL_SQSTRING reduce production typ -> OBJECT
-- On VAL_ID reduce production typ -> OBJECT
-- On VAL_DOTTEDNAME reduce production typ -> OBJECT
-- On VALUETYPE reduce production typ -> OBJECT
-- On VALUE reduce production typ -> OBJECT
-- On UNSIGNED reduce production typ -> OBJECT
-- On UINT8 reduce production typ -> OBJECT
-- On UINT64 reduce production typ -> OBJECT
-- On UINT32 reduce production typ -> OBJECT
-- On UINT16 reduce production typ -> OBJECT
-- On TYPEDREF reduce production typ -> OBJECT
-- On STRING reduce production typ -> OBJECT
-- On STAR reduce production typ -> OBJECT
-- On RPAREN reduce production typ -> OBJECT
-- On OBJECT reduce production typ -> OBJECT
-- On NATIVE reduce production typ -> OBJECT
-- On METHOD reduce production typ -> OBJECT
-- On LPAREN reduce production typ -> OBJECT
-- On LBRACK reduce production typ -> OBJECT
-- On INT8 reduce production typ -> OBJECT
-- On INT64 reduce production typ -> OBJECT
-- On INT32 reduce production typ -> OBJECT
-- On INT16 reduce production typ -> OBJECT
-- On INSTR_VALUETYPE reduce production typ -> OBJECT
-- On INSTR_TYPE reduce production typ -> OBJECT
-- On INSTR_TOK reduce production typ -> OBJECT
-- On INSTR_STRING reduce production typ -> OBJECT
-- On INSTR_SIG reduce production typ -> OBJECT
-- On INSTR_R reduce production typ -> OBJECT
-- On INSTR_NONE reduce production typ -> OBJECT
-- On INSTR_METHOD reduce production typ -> OBJECT
-- On INSTR_LOC reduce production typ -> OBJECT
-- On INSTR_INT_TYPE reduce production typ -> OBJECT
-- On INSTR_I8 reduce production typ -> OBJECT
-- On INSTR_I32_I32 reduce production typ -> OBJECT
-- On INSTR_I reduce production typ -> OBJECT
-- On INSTR_FIELD reduce production typ -> OBJECT
-- On INSTR_ARG reduce production typ -> OBJECT
-- On GREATER reduce production typ -> OBJECT
-- On FLOAT64 reduce production typ -> OBJECT
-- On FLOAT32 reduce production typ -> OBJECT
-- On EOF reduce production typ -> OBJECT
-- On DOT_CTOR reduce production typ -> OBJECT
-- On DOT_CCTOR reduce production typ -> OBJECT
-- On DCOLON reduce production typ -> OBJECT
-- On COMMA reduce production typ -> OBJECT
-- On CLASS reduce production typ -> OBJECT
-- On CHAR reduce production typ -> OBJECT
-- On BOOL reduce production typ -> OBJECT
-- On BANG reduce production typ -> OBJECT
-- On AMP reduce production typ -> OBJECT

State 36:
## Known stack suffix:
## NATIVE
## LR(1) items:
typ -> NATIVE . INT [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> NATIVE . UNSIGNED INT [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> NATIVE . UINT [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On UNSIGNED shift to state 37
-- On UINT shift to state 39
-- On INT shift to state 40
## Reductions:

State 37:
## Known stack suffix:
## NATIVE UNSIGNED
## LR(1) items:
typ -> NATIVE UNSIGNED . INT [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On INT shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## NATIVE UNSIGNED INT
## LR(1) items:
typ -> NATIVE UNSIGNED INT . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> NATIVE UNSIGNED INT
-- On VAL_SQSTRING reduce production typ -> NATIVE UNSIGNED INT
-- On VAL_ID reduce production typ -> NATIVE UNSIGNED INT
-- On VAL_DOTTEDNAME reduce production typ -> NATIVE UNSIGNED INT
-- On VALUETYPE reduce production typ -> NATIVE UNSIGNED INT
-- On VALUE reduce production typ -> NATIVE UNSIGNED INT
-- On UNSIGNED reduce production typ -> NATIVE UNSIGNED INT
-- On UINT8 reduce production typ -> NATIVE UNSIGNED INT
-- On UINT64 reduce production typ -> NATIVE UNSIGNED INT
-- On UINT32 reduce production typ -> NATIVE UNSIGNED INT
-- On UINT16 reduce production typ -> NATIVE UNSIGNED INT
-- On TYPEDREF reduce production typ -> NATIVE UNSIGNED INT
-- On STRING reduce production typ -> NATIVE UNSIGNED INT
-- On STAR reduce production typ -> NATIVE UNSIGNED INT
-- On RPAREN reduce production typ -> NATIVE UNSIGNED INT
-- On OBJECT reduce production typ -> NATIVE UNSIGNED INT
-- On NATIVE reduce production typ -> NATIVE UNSIGNED INT
-- On METHOD reduce production typ -> NATIVE UNSIGNED INT
-- On LPAREN reduce production typ -> NATIVE UNSIGNED INT
-- On LBRACK reduce production typ -> NATIVE UNSIGNED INT
-- On INT8 reduce production typ -> NATIVE UNSIGNED INT
-- On INT64 reduce production typ -> NATIVE UNSIGNED INT
-- On INT32 reduce production typ -> NATIVE UNSIGNED INT
-- On INT16 reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_VALUETYPE reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_TYPE reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_TOK reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_STRING reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_SIG reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_R reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_NONE reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_METHOD reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_LOC reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_INT_TYPE reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_I8 reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_I32_I32 reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_I reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_FIELD reduce production typ -> NATIVE UNSIGNED INT
-- On INSTR_ARG reduce production typ -> NATIVE UNSIGNED INT
-- On GREATER reduce production typ -> NATIVE UNSIGNED INT
-- On FLOAT64 reduce production typ -> NATIVE UNSIGNED INT
-- On FLOAT32 reduce production typ -> NATIVE UNSIGNED INT
-- On EOF reduce production typ -> NATIVE UNSIGNED INT
-- On DOT_CTOR reduce production typ -> NATIVE UNSIGNED INT
-- On DOT_CCTOR reduce production typ -> NATIVE UNSIGNED INT
-- On DCOLON reduce production typ -> NATIVE UNSIGNED INT
-- On COMMA reduce production typ -> NATIVE UNSIGNED INT
-- On CLASS reduce production typ -> NATIVE UNSIGNED INT
-- On CHAR reduce production typ -> NATIVE UNSIGNED INT
-- On BOOL reduce production typ -> NATIVE UNSIGNED INT
-- On BANG reduce production typ -> NATIVE UNSIGNED INT
-- On AMP reduce production typ -> NATIVE UNSIGNED INT

State 39:
## Known stack suffix:
## NATIVE UINT
## LR(1) items:
typ -> NATIVE UINT . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> NATIVE UINT
-- On VAL_SQSTRING reduce production typ -> NATIVE UINT
-- On VAL_ID reduce production typ -> NATIVE UINT
-- On VAL_DOTTEDNAME reduce production typ -> NATIVE UINT
-- On VALUETYPE reduce production typ -> NATIVE UINT
-- On VALUE reduce production typ -> NATIVE UINT
-- On UNSIGNED reduce production typ -> NATIVE UINT
-- On UINT8 reduce production typ -> NATIVE UINT
-- On UINT64 reduce production typ -> NATIVE UINT
-- On UINT32 reduce production typ -> NATIVE UINT
-- On UINT16 reduce production typ -> NATIVE UINT
-- On TYPEDREF reduce production typ -> NATIVE UINT
-- On STRING reduce production typ -> NATIVE UINT
-- On STAR reduce production typ -> NATIVE UINT
-- On RPAREN reduce production typ -> NATIVE UINT
-- On OBJECT reduce production typ -> NATIVE UINT
-- On NATIVE reduce production typ -> NATIVE UINT
-- On METHOD reduce production typ -> NATIVE UINT
-- On LPAREN reduce production typ -> NATIVE UINT
-- On LBRACK reduce production typ -> NATIVE UINT
-- On INT8 reduce production typ -> NATIVE UINT
-- On INT64 reduce production typ -> NATIVE UINT
-- On INT32 reduce production typ -> NATIVE UINT
-- On INT16 reduce production typ -> NATIVE UINT
-- On INSTR_VALUETYPE reduce production typ -> NATIVE UINT
-- On INSTR_TYPE reduce production typ -> NATIVE UINT
-- On INSTR_TOK reduce production typ -> NATIVE UINT
-- On INSTR_STRING reduce production typ -> NATIVE UINT
-- On INSTR_SIG reduce production typ -> NATIVE UINT
-- On INSTR_R reduce production typ -> NATIVE UINT
-- On INSTR_NONE reduce production typ -> NATIVE UINT
-- On INSTR_METHOD reduce production typ -> NATIVE UINT
-- On INSTR_LOC reduce production typ -> NATIVE UINT
-- On INSTR_INT_TYPE reduce production typ -> NATIVE UINT
-- On INSTR_I8 reduce production typ -> NATIVE UINT
-- On INSTR_I32_I32 reduce production typ -> NATIVE UINT
-- On INSTR_I reduce production typ -> NATIVE UINT
-- On INSTR_FIELD reduce production typ -> NATIVE UINT
-- On INSTR_ARG reduce production typ -> NATIVE UINT
-- On GREATER reduce production typ -> NATIVE UINT
-- On FLOAT64 reduce production typ -> NATIVE UINT
-- On FLOAT32 reduce production typ -> NATIVE UINT
-- On EOF reduce production typ -> NATIVE UINT
-- On DOT_CTOR reduce production typ -> NATIVE UINT
-- On DOT_CCTOR reduce production typ -> NATIVE UINT
-- On DCOLON reduce production typ -> NATIVE UINT
-- On COMMA reduce production typ -> NATIVE UINT
-- On CLASS reduce production typ -> NATIVE UINT
-- On CHAR reduce production typ -> NATIVE UINT
-- On BOOL reduce production typ -> NATIVE UINT
-- On BANG reduce production typ -> NATIVE UINT
-- On AMP reduce production typ -> NATIVE UINT

State 40:
## Known stack suffix:
## NATIVE INT
## LR(1) items:
typ -> NATIVE INT . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> NATIVE INT
-- On VAL_SQSTRING reduce production typ -> NATIVE INT
-- On VAL_ID reduce production typ -> NATIVE INT
-- On VAL_DOTTEDNAME reduce production typ -> NATIVE INT
-- On VALUETYPE reduce production typ -> NATIVE INT
-- On VALUE reduce production typ -> NATIVE INT
-- On UNSIGNED reduce production typ -> NATIVE INT
-- On UINT8 reduce production typ -> NATIVE INT
-- On UINT64 reduce production typ -> NATIVE INT
-- On UINT32 reduce production typ -> NATIVE INT
-- On UINT16 reduce production typ -> NATIVE INT
-- On TYPEDREF reduce production typ -> NATIVE INT
-- On STRING reduce production typ -> NATIVE INT
-- On STAR reduce production typ -> NATIVE INT
-- On RPAREN reduce production typ -> NATIVE INT
-- On OBJECT reduce production typ -> NATIVE INT
-- On NATIVE reduce production typ -> NATIVE INT
-- On METHOD reduce production typ -> NATIVE INT
-- On LPAREN reduce production typ -> NATIVE INT
-- On LBRACK reduce production typ -> NATIVE INT
-- On INT8 reduce production typ -> NATIVE INT
-- On INT64 reduce production typ -> NATIVE INT
-- On INT32 reduce production typ -> NATIVE INT
-- On INT16 reduce production typ -> NATIVE INT
-- On INSTR_VALUETYPE reduce production typ -> NATIVE INT
-- On INSTR_TYPE reduce production typ -> NATIVE INT
-- On INSTR_TOK reduce production typ -> NATIVE INT
-- On INSTR_STRING reduce production typ -> NATIVE INT
-- On INSTR_SIG reduce production typ -> NATIVE INT
-- On INSTR_R reduce production typ -> NATIVE INT
-- On INSTR_NONE reduce production typ -> NATIVE INT
-- On INSTR_METHOD reduce production typ -> NATIVE INT
-- On INSTR_LOC reduce production typ -> NATIVE INT
-- On INSTR_INT_TYPE reduce production typ -> NATIVE INT
-- On INSTR_I8 reduce production typ -> NATIVE INT
-- On INSTR_I32_I32 reduce production typ -> NATIVE INT
-- On INSTR_I reduce production typ -> NATIVE INT
-- On INSTR_FIELD reduce production typ -> NATIVE INT
-- On INSTR_ARG reduce production typ -> NATIVE INT
-- On GREATER reduce production typ -> NATIVE INT
-- On FLOAT64 reduce production typ -> NATIVE INT
-- On FLOAT32 reduce production typ -> NATIVE INT
-- On EOF reduce production typ -> NATIVE INT
-- On DOT_CTOR reduce production typ -> NATIVE INT
-- On DOT_CCTOR reduce production typ -> NATIVE INT
-- On DCOLON reduce production typ -> NATIVE INT
-- On COMMA reduce production typ -> NATIVE INT
-- On CLASS reduce production typ -> NATIVE INT
-- On CHAR reduce production typ -> NATIVE INT
-- On BOOL reduce production typ -> NATIVE INT
-- On BANG reduce production typ -> NATIVE INT
-- On AMP reduce production typ -> NATIVE INT

State 41:
## Known stack suffix:
## METHOD
## LR(1) items:
typ -> METHOD . callConv typ STAR LPAREN sigArgs0 RPAREN [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VARARG shift to state 42
-- On UNMANAGED shift to state 43
-- On INSTANCE shift to state 48
-- On EXPLICIT shift to state 51
-- On DEFAULT shift to state 49
-- On callKind shift to state 53
-- On callConv shift to state 54
## Reductions:
-- On VOID reduce production callKind ->
-- On VALUETYPE reduce production callKind ->
-- On VALUE reduce production callKind ->
-- On UNSIGNED reduce production callKind ->
-- On UINT8 reduce production callKind ->
-- On UINT64 reduce production callKind ->
-- On UINT32 reduce production callKind ->
-- On UINT16 reduce production callKind ->
-- On TYPEDREF reduce production callKind ->
-- On STRING reduce production callKind ->
-- On OBJECT reduce production callKind ->
-- On NATIVE reduce production callKind ->
-- On METHOD reduce production callKind ->
-- On INT8 reduce production callKind ->
-- On INT64 reduce production callKind ->
-- On INT32 reduce production callKind ->
-- On INT16 reduce production callKind ->
-- On FLOAT64 reduce production callKind ->
-- On FLOAT32 reduce production callKind ->
-- On CLASS reduce production callKind ->
-- On CHAR reduce production callKind ->
-- On BOOL reduce production callKind ->
-- On BANG reduce production callKind ->

State 42:
## Known stack suffix:
## VARARG
## LR(1) items:
callKind -> VARARG . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callKind -> VARARG
-- On VALUETYPE reduce production callKind -> VARARG
-- On VALUE reduce production callKind -> VARARG
-- On UNSIGNED reduce production callKind -> VARARG
-- On UINT8 reduce production callKind -> VARARG
-- On UINT64 reduce production callKind -> VARARG
-- On UINT32 reduce production callKind -> VARARG
-- On UINT16 reduce production callKind -> VARARG
-- On TYPEDREF reduce production callKind -> VARARG
-- On STRING reduce production callKind -> VARARG
-- On OBJECT reduce production callKind -> VARARG
-- On NATIVE reduce production callKind -> VARARG
-- On METHOD reduce production callKind -> VARARG
-- On INT8 reduce production callKind -> VARARG
-- On INT64 reduce production callKind -> VARARG
-- On INT32 reduce production callKind -> VARARG
-- On INT16 reduce production callKind -> VARARG
-- On FLOAT64 reduce production callKind -> VARARG
-- On FLOAT32 reduce production callKind -> VARARG
-- On CLASS reduce production callKind -> VARARG
-- On CHAR reduce production callKind -> VARARG
-- On BOOL reduce production callKind -> VARARG
-- On BANG reduce production callKind -> VARARG

State 43:
## Known stack suffix:
## UNMANAGED
## LR(1) items:
callKind -> UNMANAGED . CDECL [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
callKind -> UNMANAGED . STDCALL [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
callKind -> UNMANAGED . THISCALL [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
callKind -> UNMANAGED . FASTCALL [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
-- On THISCALL shift to state 44
-- On STDCALL shift to state 45
-- On FASTCALL shift to state 46
-- On CDECL shift to state 47
## Reductions:

State 44:
## Known stack suffix:
## UNMANAGED THISCALL
## LR(1) items:
callKind -> UNMANAGED THISCALL . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callKind -> UNMANAGED THISCALL
-- On VALUETYPE reduce production callKind -> UNMANAGED THISCALL
-- On VALUE reduce production callKind -> UNMANAGED THISCALL
-- On UNSIGNED reduce production callKind -> UNMANAGED THISCALL
-- On UINT8 reduce production callKind -> UNMANAGED THISCALL
-- On UINT64 reduce production callKind -> UNMANAGED THISCALL
-- On UINT32 reduce production callKind -> UNMANAGED THISCALL
-- On UINT16 reduce production callKind -> UNMANAGED THISCALL
-- On TYPEDREF reduce production callKind -> UNMANAGED THISCALL
-- On STRING reduce production callKind -> UNMANAGED THISCALL
-- On OBJECT reduce production callKind -> UNMANAGED THISCALL
-- On NATIVE reduce production callKind -> UNMANAGED THISCALL
-- On METHOD reduce production callKind -> UNMANAGED THISCALL
-- On INT8 reduce production callKind -> UNMANAGED THISCALL
-- On INT64 reduce production callKind -> UNMANAGED THISCALL
-- On INT32 reduce production callKind -> UNMANAGED THISCALL
-- On INT16 reduce production callKind -> UNMANAGED THISCALL
-- On FLOAT64 reduce production callKind -> UNMANAGED THISCALL
-- On FLOAT32 reduce production callKind -> UNMANAGED THISCALL
-- On CLASS reduce production callKind -> UNMANAGED THISCALL
-- On CHAR reduce production callKind -> UNMANAGED THISCALL
-- On BOOL reduce production callKind -> UNMANAGED THISCALL
-- On BANG reduce production callKind -> UNMANAGED THISCALL

State 45:
## Known stack suffix:
## UNMANAGED STDCALL
## LR(1) items:
callKind -> UNMANAGED STDCALL . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callKind -> UNMANAGED STDCALL
-- On VALUETYPE reduce production callKind -> UNMANAGED STDCALL
-- On VALUE reduce production callKind -> UNMANAGED STDCALL
-- On UNSIGNED reduce production callKind -> UNMANAGED STDCALL
-- On UINT8 reduce production callKind -> UNMANAGED STDCALL
-- On UINT64 reduce production callKind -> UNMANAGED STDCALL
-- On UINT32 reduce production callKind -> UNMANAGED STDCALL
-- On UINT16 reduce production callKind -> UNMANAGED STDCALL
-- On TYPEDREF reduce production callKind -> UNMANAGED STDCALL
-- On STRING reduce production callKind -> UNMANAGED STDCALL
-- On OBJECT reduce production callKind -> UNMANAGED STDCALL
-- On NATIVE reduce production callKind -> UNMANAGED STDCALL
-- On METHOD reduce production callKind -> UNMANAGED STDCALL
-- On INT8 reduce production callKind -> UNMANAGED STDCALL
-- On INT64 reduce production callKind -> UNMANAGED STDCALL
-- On INT32 reduce production callKind -> UNMANAGED STDCALL
-- On INT16 reduce production callKind -> UNMANAGED STDCALL
-- On FLOAT64 reduce production callKind -> UNMANAGED STDCALL
-- On FLOAT32 reduce production callKind -> UNMANAGED STDCALL
-- On CLASS reduce production callKind -> UNMANAGED STDCALL
-- On CHAR reduce production callKind -> UNMANAGED STDCALL
-- On BOOL reduce production callKind -> UNMANAGED STDCALL
-- On BANG reduce production callKind -> UNMANAGED STDCALL

State 46:
## Known stack suffix:
## UNMANAGED FASTCALL
## LR(1) items:
callKind -> UNMANAGED FASTCALL . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callKind -> UNMANAGED FASTCALL
-- On VALUETYPE reduce production callKind -> UNMANAGED FASTCALL
-- On VALUE reduce production callKind -> UNMANAGED FASTCALL
-- On UNSIGNED reduce production callKind -> UNMANAGED FASTCALL
-- On UINT8 reduce production callKind -> UNMANAGED FASTCALL
-- On UINT64 reduce production callKind -> UNMANAGED FASTCALL
-- On UINT32 reduce production callKind -> UNMANAGED FASTCALL
-- On UINT16 reduce production callKind -> UNMANAGED FASTCALL
-- On TYPEDREF reduce production callKind -> UNMANAGED FASTCALL
-- On STRING reduce production callKind -> UNMANAGED FASTCALL
-- On OBJECT reduce production callKind -> UNMANAGED FASTCALL
-- On NATIVE reduce production callKind -> UNMANAGED FASTCALL
-- On METHOD reduce production callKind -> UNMANAGED FASTCALL
-- On INT8 reduce production callKind -> UNMANAGED FASTCALL
-- On INT64 reduce production callKind -> UNMANAGED FASTCALL
-- On INT32 reduce production callKind -> UNMANAGED FASTCALL
-- On INT16 reduce production callKind -> UNMANAGED FASTCALL
-- On FLOAT64 reduce production callKind -> UNMANAGED FASTCALL
-- On FLOAT32 reduce production callKind -> UNMANAGED FASTCALL
-- On CLASS reduce production callKind -> UNMANAGED FASTCALL
-- On CHAR reduce production callKind -> UNMANAGED FASTCALL
-- On BOOL reduce production callKind -> UNMANAGED FASTCALL
-- On BANG reduce production callKind -> UNMANAGED FASTCALL

State 47:
## Known stack suffix:
## UNMANAGED CDECL
## LR(1) items:
callKind -> UNMANAGED CDECL . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callKind -> UNMANAGED CDECL
-- On VALUETYPE reduce production callKind -> UNMANAGED CDECL
-- On VALUE reduce production callKind -> UNMANAGED CDECL
-- On UNSIGNED reduce production callKind -> UNMANAGED CDECL
-- On UINT8 reduce production callKind -> UNMANAGED CDECL
-- On UINT64 reduce production callKind -> UNMANAGED CDECL
-- On UINT32 reduce production callKind -> UNMANAGED CDECL
-- On UINT16 reduce production callKind -> UNMANAGED CDECL
-- On TYPEDREF reduce production callKind -> UNMANAGED CDECL
-- On STRING reduce production callKind -> UNMANAGED CDECL
-- On OBJECT reduce production callKind -> UNMANAGED CDECL
-- On NATIVE reduce production callKind -> UNMANAGED CDECL
-- On METHOD reduce production callKind -> UNMANAGED CDECL
-- On INT8 reduce production callKind -> UNMANAGED CDECL
-- On INT64 reduce production callKind -> UNMANAGED CDECL
-- On INT32 reduce production callKind -> UNMANAGED CDECL
-- On INT16 reduce production callKind -> UNMANAGED CDECL
-- On FLOAT64 reduce production callKind -> UNMANAGED CDECL
-- On FLOAT32 reduce production callKind -> UNMANAGED CDECL
-- On CLASS reduce production callKind -> UNMANAGED CDECL
-- On CHAR reduce production callKind -> UNMANAGED CDECL
-- On BOOL reduce production callKind -> UNMANAGED CDECL
-- On BANG reduce production callKind -> UNMANAGED CDECL

State 48:
## Known stack suffix:
## INSTANCE
## LR(1) items:
callConv -> INSTANCE . callKind [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
-- On VARARG shift to state 42
-- On UNMANAGED shift to state 43
-- On DEFAULT shift to state 49
-- On callKind shift to state 50
## Reductions:
-- On VOID reduce production callKind ->
-- On VALUETYPE reduce production callKind ->
-- On VALUE reduce production callKind ->
-- On UNSIGNED reduce production callKind ->
-- On UINT8 reduce production callKind ->
-- On UINT64 reduce production callKind ->
-- On UINT32 reduce production callKind ->
-- On UINT16 reduce production callKind ->
-- On TYPEDREF reduce production callKind ->
-- On STRING reduce production callKind ->
-- On OBJECT reduce production callKind ->
-- On NATIVE reduce production callKind ->
-- On METHOD reduce production callKind ->
-- On INT8 reduce production callKind ->
-- On INT64 reduce production callKind ->
-- On INT32 reduce production callKind ->
-- On INT16 reduce production callKind ->
-- On FLOAT64 reduce production callKind ->
-- On FLOAT32 reduce production callKind ->
-- On CLASS reduce production callKind ->
-- On CHAR reduce production callKind ->
-- On BOOL reduce production callKind ->
-- On BANG reduce production callKind ->

State 49:
## Known stack suffix:
## DEFAULT
## LR(1) items:
callKind -> DEFAULT . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callKind -> DEFAULT
-- On VALUETYPE reduce production callKind -> DEFAULT
-- On VALUE reduce production callKind -> DEFAULT
-- On UNSIGNED reduce production callKind -> DEFAULT
-- On UINT8 reduce production callKind -> DEFAULT
-- On UINT64 reduce production callKind -> DEFAULT
-- On UINT32 reduce production callKind -> DEFAULT
-- On UINT16 reduce production callKind -> DEFAULT
-- On TYPEDREF reduce production callKind -> DEFAULT
-- On STRING reduce production callKind -> DEFAULT
-- On OBJECT reduce production callKind -> DEFAULT
-- On NATIVE reduce production callKind -> DEFAULT
-- On METHOD reduce production callKind -> DEFAULT
-- On INT8 reduce production callKind -> DEFAULT
-- On INT64 reduce production callKind -> DEFAULT
-- On INT32 reduce production callKind -> DEFAULT
-- On INT16 reduce production callKind -> DEFAULT
-- On FLOAT64 reduce production callKind -> DEFAULT
-- On FLOAT32 reduce production callKind -> DEFAULT
-- On CLASS reduce production callKind -> DEFAULT
-- On CHAR reduce production callKind -> DEFAULT
-- On BOOL reduce production callKind -> DEFAULT
-- On BANG reduce production callKind -> DEFAULT

State 50:
## Known stack suffix:
## INSTANCE callKind
## LR(1) items:
callConv -> INSTANCE callKind . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callConv -> INSTANCE callKind
-- On VALUETYPE reduce production callConv -> INSTANCE callKind
-- On VALUE reduce production callConv -> INSTANCE callKind
-- On UNSIGNED reduce production callConv -> INSTANCE callKind
-- On UINT8 reduce production callConv -> INSTANCE callKind
-- On UINT64 reduce production callConv -> INSTANCE callKind
-- On UINT32 reduce production callConv -> INSTANCE callKind
-- On UINT16 reduce production callConv -> INSTANCE callKind
-- On TYPEDREF reduce production callConv -> INSTANCE callKind
-- On STRING reduce production callConv -> INSTANCE callKind
-- On OBJECT reduce production callConv -> INSTANCE callKind
-- On NATIVE reduce production callConv -> INSTANCE callKind
-- On METHOD reduce production callConv -> INSTANCE callKind
-- On INT8 reduce production callConv -> INSTANCE callKind
-- On INT64 reduce production callConv -> INSTANCE callKind
-- On INT32 reduce production callConv -> INSTANCE callKind
-- On INT16 reduce production callConv -> INSTANCE callKind
-- On FLOAT64 reduce production callConv -> INSTANCE callKind
-- On FLOAT32 reduce production callConv -> INSTANCE callKind
-- On CLASS reduce production callConv -> INSTANCE callKind
-- On CHAR reduce production callConv -> INSTANCE callKind
-- On BOOL reduce production callConv -> INSTANCE callKind
-- On BANG reduce production callConv -> INSTANCE callKind

State 51:
## Known stack suffix:
## EXPLICIT
## LR(1) items:
callConv -> EXPLICIT . callKind [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
-- On VARARG shift to state 42
-- On UNMANAGED shift to state 43
-- On DEFAULT shift to state 49
-- On callKind shift to state 52
## Reductions:
-- On VOID reduce production callKind ->
-- On VALUETYPE reduce production callKind ->
-- On VALUE reduce production callKind ->
-- On UNSIGNED reduce production callKind ->
-- On UINT8 reduce production callKind ->
-- On UINT64 reduce production callKind ->
-- On UINT32 reduce production callKind ->
-- On UINT16 reduce production callKind ->
-- On TYPEDREF reduce production callKind ->
-- On STRING reduce production callKind ->
-- On OBJECT reduce production callKind ->
-- On NATIVE reduce production callKind ->
-- On METHOD reduce production callKind ->
-- On INT8 reduce production callKind ->
-- On INT64 reduce production callKind ->
-- On INT32 reduce production callKind ->
-- On INT16 reduce production callKind ->
-- On FLOAT64 reduce production callKind ->
-- On FLOAT32 reduce production callKind ->
-- On CLASS reduce production callKind ->
-- On CHAR reduce production callKind ->
-- On BOOL reduce production callKind ->
-- On BANG reduce production callKind ->

State 52:
## Known stack suffix:
## EXPLICIT callKind
## LR(1) items:
callConv -> EXPLICIT callKind . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callConv -> EXPLICIT callKind
-- On VALUETYPE reduce production callConv -> EXPLICIT callKind
-- On VALUE reduce production callConv -> EXPLICIT callKind
-- On UNSIGNED reduce production callConv -> EXPLICIT callKind
-- On UINT8 reduce production callConv -> EXPLICIT callKind
-- On UINT64 reduce production callConv -> EXPLICIT callKind
-- On UINT32 reduce production callConv -> EXPLICIT callKind
-- On UINT16 reduce production callConv -> EXPLICIT callKind
-- On TYPEDREF reduce production callConv -> EXPLICIT callKind
-- On STRING reduce production callConv -> EXPLICIT callKind
-- On OBJECT reduce production callConv -> EXPLICIT callKind
-- On NATIVE reduce production callConv -> EXPLICIT callKind
-- On METHOD reduce production callConv -> EXPLICIT callKind
-- On INT8 reduce production callConv -> EXPLICIT callKind
-- On INT64 reduce production callConv -> EXPLICIT callKind
-- On INT32 reduce production callConv -> EXPLICIT callKind
-- On INT16 reduce production callConv -> EXPLICIT callKind
-- On FLOAT64 reduce production callConv -> EXPLICIT callKind
-- On FLOAT32 reduce production callConv -> EXPLICIT callKind
-- On CLASS reduce production callConv -> EXPLICIT callKind
-- On CHAR reduce production callConv -> EXPLICIT callKind
-- On BOOL reduce production callConv -> EXPLICIT callKind
-- On BANG reduce production callConv -> EXPLICIT callKind

State 53:
## Known stack suffix:
## callKind
## LR(1) items:
callConv -> callKind . [ VOID VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING OBJECT NATIVE METHOD INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG ]
## Transitions:
## Reductions:
-- On VOID reduce production callConv -> callKind
-- On VALUETYPE reduce production callConv -> callKind
-- On VALUE reduce production callConv -> callKind
-- On UNSIGNED reduce production callConv -> callKind
-- On UINT8 reduce production callConv -> callKind
-- On UINT64 reduce production callConv -> callKind
-- On UINT32 reduce production callConv -> callKind
-- On UINT16 reduce production callConv -> callKind
-- On TYPEDREF reduce production callConv -> callKind
-- On STRING reduce production callConv -> callKind
-- On OBJECT reduce production callConv -> callKind
-- On NATIVE reduce production callConv -> callKind
-- On METHOD reduce production callConv -> callKind
-- On INT8 reduce production callConv -> callKind
-- On INT64 reduce production callConv -> callKind
-- On INT32 reduce production callConv -> callKind
-- On INT16 reduce production callConv -> callKind
-- On FLOAT64 reduce production callConv -> callKind
-- On FLOAT32 reduce production callConv -> callKind
-- On CLASS reduce production callConv -> callKind
-- On CHAR reduce production callConv -> callKind
-- On BOOL reduce production callConv -> callKind
-- On BANG reduce production callConv -> callKind

State 54:
## Known stack suffix:
## METHOD callConv
## LR(1) items:
typ -> METHOD callConv . typ STAR LPAREN sigArgs0 RPAREN [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 70
## Reductions:

State 55:
## Known stack suffix:
## INT8
## LR(1) items:
typ -> INT8 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> INT8
-- On VAL_SQSTRING reduce production typ -> INT8
-- On VAL_ID reduce production typ -> INT8
-- On VAL_DOTTEDNAME reduce production typ -> INT8
-- On VALUETYPE reduce production typ -> INT8
-- On VALUE reduce production typ -> INT8
-- On UNSIGNED reduce production typ -> INT8
-- On UINT8 reduce production typ -> INT8
-- On UINT64 reduce production typ -> INT8
-- On UINT32 reduce production typ -> INT8
-- On UINT16 reduce production typ -> INT8
-- On TYPEDREF reduce production typ -> INT8
-- On STRING reduce production typ -> INT8
-- On STAR reduce production typ -> INT8
-- On RPAREN reduce production typ -> INT8
-- On OBJECT reduce production typ -> INT8
-- On NATIVE reduce production typ -> INT8
-- On METHOD reduce production typ -> INT8
-- On LPAREN reduce production typ -> INT8
-- On LBRACK reduce production typ -> INT8
-- On INT8 reduce production typ -> INT8
-- On INT64 reduce production typ -> INT8
-- On INT32 reduce production typ -> INT8
-- On INT16 reduce production typ -> INT8
-- On INSTR_VALUETYPE reduce production typ -> INT8
-- On INSTR_TYPE reduce production typ -> INT8
-- On INSTR_TOK reduce production typ -> INT8
-- On INSTR_STRING reduce production typ -> INT8
-- On INSTR_SIG reduce production typ -> INT8
-- On INSTR_R reduce production typ -> INT8
-- On INSTR_NONE reduce production typ -> INT8
-- On INSTR_METHOD reduce production typ -> INT8
-- On INSTR_LOC reduce production typ -> INT8
-- On INSTR_INT_TYPE reduce production typ -> INT8
-- On INSTR_I8 reduce production typ -> INT8
-- On INSTR_I32_I32 reduce production typ -> INT8
-- On INSTR_I reduce production typ -> INT8
-- On INSTR_FIELD reduce production typ -> INT8
-- On INSTR_ARG reduce production typ -> INT8
-- On GREATER reduce production typ -> INT8
-- On FLOAT64 reduce production typ -> INT8
-- On FLOAT32 reduce production typ -> INT8
-- On EOF reduce production typ -> INT8
-- On DOT_CTOR reduce production typ -> INT8
-- On DOT_CCTOR reduce production typ -> INT8
-- On DCOLON reduce production typ -> INT8
-- On COMMA reduce production typ -> INT8
-- On CLASS reduce production typ -> INT8
-- On CHAR reduce production typ -> INT8
-- On BOOL reduce production typ -> INT8
-- On BANG reduce production typ -> INT8
-- On AMP reduce production typ -> INT8

State 56:
## Known stack suffix:
## INT64
## LR(1) items:
typ -> INT64 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> INT64
-- On VAL_SQSTRING reduce production typ -> INT64
-- On VAL_ID reduce production typ -> INT64
-- On VAL_DOTTEDNAME reduce production typ -> INT64
-- On VALUETYPE reduce production typ -> INT64
-- On VALUE reduce production typ -> INT64
-- On UNSIGNED reduce production typ -> INT64
-- On UINT8 reduce production typ -> INT64
-- On UINT64 reduce production typ -> INT64
-- On UINT32 reduce production typ -> INT64
-- On UINT16 reduce production typ -> INT64
-- On TYPEDREF reduce production typ -> INT64
-- On STRING reduce production typ -> INT64
-- On STAR reduce production typ -> INT64
-- On RPAREN reduce production typ -> INT64
-- On OBJECT reduce production typ -> INT64
-- On NATIVE reduce production typ -> INT64
-- On METHOD reduce production typ -> INT64
-- On LPAREN reduce production typ -> INT64
-- On LBRACK reduce production typ -> INT64
-- On INT8 reduce production typ -> INT64
-- On INT64 reduce production typ -> INT64
-- On INT32 reduce production typ -> INT64
-- On INT16 reduce production typ -> INT64
-- On INSTR_VALUETYPE reduce production typ -> INT64
-- On INSTR_TYPE reduce production typ -> INT64
-- On INSTR_TOK reduce production typ -> INT64
-- On INSTR_STRING reduce production typ -> INT64
-- On INSTR_SIG reduce production typ -> INT64
-- On INSTR_R reduce production typ -> INT64
-- On INSTR_NONE reduce production typ -> INT64
-- On INSTR_METHOD reduce production typ -> INT64
-- On INSTR_LOC reduce production typ -> INT64
-- On INSTR_INT_TYPE reduce production typ -> INT64
-- On INSTR_I8 reduce production typ -> INT64
-- On INSTR_I32_I32 reduce production typ -> INT64
-- On INSTR_I reduce production typ -> INT64
-- On INSTR_FIELD reduce production typ -> INT64
-- On INSTR_ARG reduce production typ -> INT64
-- On GREATER reduce production typ -> INT64
-- On FLOAT64 reduce production typ -> INT64
-- On FLOAT32 reduce production typ -> INT64
-- On EOF reduce production typ -> INT64
-- On DOT_CTOR reduce production typ -> INT64
-- On DOT_CCTOR reduce production typ -> INT64
-- On DCOLON reduce production typ -> INT64
-- On COMMA reduce production typ -> INT64
-- On CLASS reduce production typ -> INT64
-- On CHAR reduce production typ -> INT64
-- On BOOL reduce production typ -> INT64
-- On BANG reduce production typ -> INT64
-- On AMP reduce production typ -> INT64

State 57:
## Known stack suffix:
## INT32
## LR(1) items:
typ -> INT32 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> INT32
-- On VAL_SQSTRING reduce production typ -> INT32
-- On VAL_ID reduce production typ -> INT32
-- On VAL_DOTTEDNAME reduce production typ -> INT32
-- On VALUETYPE reduce production typ -> INT32
-- On VALUE reduce production typ -> INT32
-- On UNSIGNED reduce production typ -> INT32
-- On UINT8 reduce production typ -> INT32
-- On UINT64 reduce production typ -> INT32
-- On UINT32 reduce production typ -> INT32
-- On UINT16 reduce production typ -> INT32
-- On TYPEDREF reduce production typ -> INT32
-- On STRING reduce production typ -> INT32
-- On STAR reduce production typ -> INT32
-- On RPAREN reduce production typ -> INT32
-- On OBJECT reduce production typ -> INT32
-- On NATIVE reduce production typ -> INT32
-- On METHOD reduce production typ -> INT32
-- On LPAREN reduce production typ -> INT32
-- On LBRACK reduce production typ -> INT32
-- On INT8 reduce production typ -> INT32
-- On INT64 reduce production typ -> INT32
-- On INT32 reduce production typ -> INT32
-- On INT16 reduce production typ -> INT32
-- On INSTR_VALUETYPE reduce production typ -> INT32
-- On INSTR_TYPE reduce production typ -> INT32
-- On INSTR_TOK reduce production typ -> INT32
-- On INSTR_STRING reduce production typ -> INT32
-- On INSTR_SIG reduce production typ -> INT32
-- On INSTR_R reduce production typ -> INT32
-- On INSTR_NONE reduce production typ -> INT32
-- On INSTR_METHOD reduce production typ -> INT32
-- On INSTR_LOC reduce production typ -> INT32
-- On INSTR_INT_TYPE reduce production typ -> INT32
-- On INSTR_I8 reduce production typ -> INT32
-- On INSTR_I32_I32 reduce production typ -> INT32
-- On INSTR_I reduce production typ -> INT32
-- On INSTR_FIELD reduce production typ -> INT32
-- On INSTR_ARG reduce production typ -> INT32
-- On GREATER reduce production typ -> INT32
-- On FLOAT64 reduce production typ -> INT32
-- On FLOAT32 reduce production typ -> INT32
-- On EOF reduce production typ -> INT32
-- On DOT_CTOR reduce production typ -> INT32
-- On DOT_CCTOR reduce production typ -> INT32
-- On DCOLON reduce production typ -> INT32
-- On COMMA reduce production typ -> INT32
-- On CLASS reduce production typ -> INT32
-- On CHAR reduce production typ -> INT32
-- On BOOL reduce production typ -> INT32
-- On BANG reduce production typ -> INT32
-- On AMP reduce production typ -> INT32

State 58:
## Known stack suffix:
## INT16
## LR(1) items:
typ -> INT16 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> INT16
-- On VAL_SQSTRING reduce production typ -> INT16
-- On VAL_ID reduce production typ -> INT16
-- On VAL_DOTTEDNAME reduce production typ -> INT16
-- On VALUETYPE reduce production typ -> INT16
-- On VALUE reduce production typ -> INT16
-- On UNSIGNED reduce production typ -> INT16
-- On UINT8 reduce production typ -> INT16
-- On UINT64 reduce production typ -> INT16
-- On UINT32 reduce production typ -> INT16
-- On UINT16 reduce production typ -> INT16
-- On TYPEDREF reduce production typ -> INT16
-- On STRING reduce production typ -> INT16
-- On STAR reduce production typ -> INT16
-- On RPAREN reduce production typ -> INT16
-- On OBJECT reduce production typ -> INT16
-- On NATIVE reduce production typ -> INT16
-- On METHOD reduce production typ -> INT16
-- On LPAREN reduce production typ -> INT16
-- On LBRACK reduce production typ -> INT16
-- On INT8 reduce production typ -> INT16
-- On INT64 reduce production typ -> INT16
-- On INT32 reduce production typ -> INT16
-- On INT16 reduce production typ -> INT16
-- On INSTR_VALUETYPE reduce production typ -> INT16
-- On INSTR_TYPE reduce production typ -> INT16
-- On INSTR_TOK reduce production typ -> INT16
-- On INSTR_STRING reduce production typ -> INT16
-- On INSTR_SIG reduce production typ -> INT16
-- On INSTR_R reduce production typ -> INT16
-- On INSTR_NONE reduce production typ -> INT16
-- On INSTR_METHOD reduce production typ -> INT16
-- On INSTR_LOC reduce production typ -> INT16
-- On INSTR_INT_TYPE reduce production typ -> INT16
-- On INSTR_I8 reduce production typ -> INT16
-- On INSTR_I32_I32 reduce production typ -> INT16
-- On INSTR_I reduce production typ -> INT16
-- On INSTR_FIELD reduce production typ -> INT16
-- On INSTR_ARG reduce production typ -> INT16
-- On GREATER reduce production typ -> INT16
-- On FLOAT64 reduce production typ -> INT16
-- On FLOAT32 reduce production typ -> INT16
-- On EOF reduce production typ -> INT16
-- On DOT_CTOR reduce production typ -> INT16
-- On DOT_CCTOR reduce production typ -> INT16
-- On DCOLON reduce production typ -> INT16
-- On COMMA reduce production typ -> INT16
-- On CLASS reduce production typ -> INT16
-- On CHAR reduce production typ -> INT16
-- On BOOL reduce production typ -> INT16
-- On BANG reduce production typ -> INT16
-- On AMP reduce production typ -> INT16

State 59:
## Known stack suffix:
## FLOAT64
## LR(1) items:
typ -> FLOAT64 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> FLOAT64
-- On VAL_SQSTRING reduce production typ -> FLOAT64
-- On VAL_ID reduce production typ -> FLOAT64
-- On VAL_DOTTEDNAME reduce production typ -> FLOAT64
-- On VALUETYPE reduce production typ -> FLOAT64
-- On VALUE reduce production typ -> FLOAT64
-- On UNSIGNED reduce production typ -> FLOAT64
-- On UINT8 reduce production typ -> FLOAT64
-- On UINT64 reduce production typ -> FLOAT64
-- On UINT32 reduce production typ -> FLOAT64
-- On UINT16 reduce production typ -> FLOAT64
-- On TYPEDREF reduce production typ -> FLOAT64
-- On STRING reduce production typ -> FLOAT64
-- On STAR reduce production typ -> FLOAT64
-- On RPAREN reduce production typ -> FLOAT64
-- On OBJECT reduce production typ -> FLOAT64
-- On NATIVE reduce production typ -> FLOAT64
-- On METHOD reduce production typ -> FLOAT64
-- On LPAREN reduce production typ -> FLOAT64
-- On LBRACK reduce production typ -> FLOAT64
-- On INT8 reduce production typ -> FLOAT64
-- On INT64 reduce production typ -> FLOAT64
-- On INT32 reduce production typ -> FLOAT64
-- On INT16 reduce production typ -> FLOAT64
-- On INSTR_VALUETYPE reduce production typ -> FLOAT64
-- On INSTR_TYPE reduce production typ -> FLOAT64
-- On INSTR_TOK reduce production typ -> FLOAT64
-- On INSTR_STRING reduce production typ -> FLOAT64
-- On INSTR_SIG reduce production typ -> FLOAT64
-- On INSTR_R reduce production typ -> FLOAT64
-- On INSTR_NONE reduce production typ -> FLOAT64
-- On INSTR_METHOD reduce production typ -> FLOAT64
-- On INSTR_LOC reduce production typ -> FLOAT64
-- On INSTR_INT_TYPE reduce production typ -> FLOAT64
-- On INSTR_I8 reduce production typ -> FLOAT64
-- On INSTR_I32_I32 reduce production typ -> FLOAT64
-- On INSTR_I reduce production typ -> FLOAT64
-- On INSTR_FIELD reduce production typ -> FLOAT64
-- On INSTR_ARG reduce production typ -> FLOAT64
-- On GREATER reduce production typ -> FLOAT64
-- On FLOAT64 reduce production typ -> FLOAT64
-- On FLOAT32 reduce production typ -> FLOAT64
-- On EOF reduce production typ -> FLOAT64
-- On DOT_CTOR reduce production typ -> FLOAT64
-- On DOT_CCTOR reduce production typ -> FLOAT64
-- On DCOLON reduce production typ -> FLOAT64
-- On COMMA reduce production typ -> FLOAT64
-- On CLASS reduce production typ -> FLOAT64
-- On CHAR reduce production typ -> FLOAT64
-- On BOOL reduce production typ -> FLOAT64
-- On BANG reduce production typ -> FLOAT64
-- On AMP reduce production typ -> FLOAT64

State 60:
## Known stack suffix:
## FLOAT32
## LR(1) items:
typ -> FLOAT32 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> FLOAT32
-- On VAL_SQSTRING reduce production typ -> FLOAT32
-- On VAL_ID reduce production typ -> FLOAT32
-- On VAL_DOTTEDNAME reduce production typ -> FLOAT32
-- On VALUETYPE reduce production typ -> FLOAT32
-- On VALUE reduce production typ -> FLOAT32
-- On UNSIGNED reduce production typ -> FLOAT32
-- On UINT8 reduce production typ -> FLOAT32
-- On UINT64 reduce production typ -> FLOAT32
-- On UINT32 reduce production typ -> FLOAT32
-- On UINT16 reduce production typ -> FLOAT32
-- On TYPEDREF reduce production typ -> FLOAT32
-- On STRING reduce production typ -> FLOAT32
-- On STAR reduce production typ -> FLOAT32
-- On RPAREN reduce production typ -> FLOAT32
-- On OBJECT reduce production typ -> FLOAT32
-- On NATIVE reduce production typ -> FLOAT32
-- On METHOD reduce production typ -> FLOAT32
-- On LPAREN reduce production typ -> FLOAT32
-- On LBRACK reduce production typ -> FLOAT32
-- On INT8 reduce production typ -> FLOAT32
-- On INT64 reduce production typ -> FLOAT32
-- On INT32 reduce production typ -> FLOAT32
-- On INT16 reduce production typ -> FLOAT32
-- On INSTR_VALUETYPE reduce production typ -> FLOAT32
-- On INSTR_TYPE reduce production typ -> FLOAT32
-- On INSTR_TOK reduce production typ -> FLOAT32
-- On INSTR_STRING reduce production typ -> FLOAT32
-- On INSTR_SIG reduce production typ -> FLOAT32
-- On INSTR_R reduce production typ -> FLOAT32
-- On INSTR_NONE reduce production typ -> FLOAT32
-- On INSTR_METHOD reduce production typ -> FLOAT32
-- On INSTR_LOC reduce production typ -> FLOAT32
-- On INSTR_INT_TYPE reduce production typ -> FLOAT32
-- On INSTR_I8 reduce production typ -> FLOAT32
-- On INSTR_I32_I32 reduce production typ -> FLOAT32
-- On INSTR_I reduce production typ -> FLOAT32
-- On INSTR_FIELD reduce production typ -> FLOAT32
-- On INSTR_ARG reduce production typ -> FLOAT32
-- On GREATER reduce production typ -> FLOAT32
-- On FLOAT64 reduce production typ -> FLOAT32
-- On FLOAT32 reduce production typ -> FLOAT32
-- On EOF reduce production typ -> FLOAT32
-- On DOT_CTOR reduce production typ -> FLOAT32
-- On DOT_CCTOR reduce production typ -> FLOAT32
-- On DCOLON reduce production typ -> FLOAT32
-- On COMMA reduce production typ -> FLOAT32
-- On CLASS reduce production typ -> FLOAT32
-- On CHAR reduce production typ -> FLOAT32
-- On BOOL reduce production typ -> FLOAT32
-- On BANG reduce production typ -> FLOAT32
-- On AMP reduce production typ -> FLOAT32

State 61:
## Known stack suffix:
## CLASS
## LR(1) items:
typ -> CLASS . typeNameInst [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On LBRACK shift to state 7
-- On typeNameInst shift to state 62
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 19
## Reductions:

State 62:
## Known stack suffix:
## CLASS typeNameInst
## LR(1) items:
typ -> CLASS typeNameInst . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> CLASS typeNameInst
-- On VAL_SQSTRING reduce production typ -> CLASS typeNameInst
-- On VAL_ID reduce production typ -> CLASS typeNameInst
-- On VAL_DOTTEDNAME reduce production typ -> CLASS typeNameInst
-- On VALUETYPE reduce production typ -> CLASS typeNameInst
-- On VALUE reduce production typ -> CLASS typeNameInst
-- On UNSIGNED reduce production typ -> CLASS typeNameInst
-- On UINT8 reduce production typ -> CLASS typeNameInst
-- On UINT64 reduce production typ -> CLASS typeNameInst
-- On UINT32 reduce production typ -> CLASS typeNameInst
-- On UINT16 reduce production typ -> CLASS typeNameInst
-- On TYPEDREF reduce production typ -> CLASS typeNameInst
-- On STRING reduce production typ -> CLASS typeNameInst
-- On STAR reduce production typ -> CLASS typeNameInst
-- On RPAREN reduce production typ -> CLASS typeNameInst
-- On OBJECT reduce production typ -> CLASS typeNameInst
-- On NATIVE reduce production typ -> CLASS typeNameInst
-- On METHOD reduce production typ -> CLASS typeNameInst
-- On LPAREN reduce production typ -> CLASS typeNameInst
-- On LBRACK reduce production typ -> CLASS typeNameInst
-- On INT8 reduce production typ -> CLASS typeNameInst
-- On INT64 reduce production typ -> CLASS typeNameInst
-- On INT32 reduce production typ -> CLASS typeNameInst
-- On INT16 reduce production typ -> CLASS typeNameInst
-- On INSTR_VALUETYPE reduce production typ -> CLASS typeNameInst
-- On INSTR_TYPE reduce production typ -> CLASS typeNameInst
-- On INSTR_TOK reduce production typ -> CLASS typeNameInst
-- On INSTR_STRING reduce production typ -> CLASS typeNameInst
-- On INSTR_SIG reduce production typ -> CLASS typeNameInst
-- On INSTR_R reduce production typ -> CLASS typeNameInst
-- On INSTR_NONE reduce production typ -> CLASS typeNameInst
-- On INSTR_METHOD reduce production typ -> CLASS typeNameInst
-- On INSTR_LOC reduce production typ -> CLASS typeNameInst
-- On INSTR_INT_TYPE reduce production typ -> CLASS typeNameInst
-- On INSTR_I8 reduce production typ -> CLASS typeNameInst
-- On INSTR_I32_I32 reduce production typ -> CLASS typeNameInst
-- On INSTR_I reduce production typ -> CLASS typeNameInst
-- On INSTR_FIELD reduce production typ -> CLASS typeNameInst
-- On INSTR_ARG reduce production typ -> CLASS typeNameInst
-- On GREATER reduce production typ -> CLASS typeNameInst
-- On FLOAT64 reduce production typ -> CLASS typeNameInst
-- On FLOAT32 reduce production typ -> CLASS typeNameInst
-- On EOF reduce production typ -> CLASS typeNameInst
-- On DOT_CTOR reduce production typ -> CLASS typeNameInst
-- On DOT_CCTOR reduce production typ -> CLASS typeNameInst
-- On DCOLON reduce production typ -> CLASS typeNameInst
-- On COMMA reduce production typ -> CLASS typeNameInst
-- On CLASS reduce production typ -> CLASS typeNameInst
-- On CHAR reduce production typ -> CLASS typeNameInst
-- On BOOL reduce production typ -> CLASS typeNameInst
-- On BANG reduce production typ -> CLASS typeNameInst
-- On AMP reduce production typ -> CLASS typeNameInst

State 63:
## Known stack suffix:
## CHAR
## LR(1) items:
typ -> CHAR . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> CHAR
-- On VAL_SQSTRING reduce production typ -> CHAR
-- On VAL_ID reduce production typ -> CHAR
-- On VAL_DOTTEDNAME reduce production typ -> CHAR
-- On VALUETYPE reduce production typ -> CHAR
-- On VALUE reduce production typ -> CHAR
-- On UNSIGNED reduce production typ -> CHAR
-- On UINT8 reduce production typ -> CHAR
-- On UINT64 reduce production typ -> CHAR
-- On UINT32 reduce production typ -> CHAR
-- On UINT16 reduce production typ -> CHAR
-- On TYPEDREF reduce production typ -> CHAR
-- On STRING reduce production typ -> CHAR
-- On STAR reduce production typ -> CHAR
-- On RPAREN reduce production typ -> CHAR
-- On OBJECT reduce production typ -> CHAR
-- On NATIVE reduce production typ -> CHAR
-- On METHOD reduce production typ -> CHAR
-- On LPAREN reduce production typ -> CHAR
-- On LBRACK reduce production typ -> CHAR
-- On INT8 reduce production typ -> CHAR
-- On INT64 reduce production typ -> CHAR
-- On INT32 reduce production typ -> CHAR
-- On INT16 reduce production typ -> CHAR
-- On INSTR_VALUETYPE reduce production typ -> CHAR
-- On INSTR_TYPE reduce production typ -> CHAR
-- On INSTR_TOK reduce production typ -> CHAR
-- On INSTR_STRING reduce production typ -> CHAR
-- On INSTR_SIG reduce production typ -> CHAR
-- On INSTR_R reduce production typ -> CHAR
-- On INSTR_NONE reduce production typ -> CHAR
-- On INSTR_METHOD reduce production typ -> CHAR
-- On INSTR_LOC reduce production typ -> CHAR
-- On INSTR_INT_TYPE reduce production typ -> CHAR
-- On INSTR_I8 reduce production typ -> CHAR
-- On INSTR_I32_I32 reduce production typ -> CHAR
-- On INSTR_I reduce production typ -> CHAR
-- On INSTR_FIELD reduce production typ -> CHAR
-- On INSTR_ARG reduce production typ -> CHAR
-- On GREATER reduce production typ -> CHAR
-- On FLOAT64 reduce production typ -> CHAR
-- On FLOAT32 reduce production typ -> CHAR
-- On EOF reduce production typ -> CHAR
-- On DOT_CTOR reduce production typ -> CHAR
-- On DOT_CCTOR reduce production typ -> CHAR
-- On DCOLON reduce production typ -> CHAR
-- On COMMA reduce production typ -> CHAR
-- On CLASS reduce production typ -> CHAR
-- On CHAR reduce production typ -> CHAR
-- On BOOL reduce production typ -> CHAR
-- On BANG reduce production typ -> CHAR
-- On AMP reduce production typ -> CHAR

State 64:
## Known stack suffix:
## BOOL
## LR(1) items:
typ -> BOOL . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> BOOL
-- On VAL_SQSTRING reduce production typ -> BOOL
-- On VAL_ID reduce production typ -> BOOL
-- On VAL_DOTTEDNAME reduce production typ -> BOOL
-- On VALUETYPE reduce production typ -> BOOL
-- On VALUE reduce production typ -> BOOL
-- On UNSIGNED reduce production typ -> BOOL
-- On UINT8 reduce production typ -> BOOL
-- On UINT64 reduce production typ -> BOOL
-- On UINT32 reduce production typ -> BOOL
-- On UINT16 reduce production typ -> BOOL
-- On TYPEDREF reduce production typ -> BOOL
-- On STRING reduce production typ -> BOOL
-- On STAR reduce production typ -> BOOL
-- On RPAREN reduce production typ -> BOOL
-- On OBJECT reduce production typ -> BOOL
-- On NATIVE reduce production typ -> BOOL
-- On METHOD reduce production typ -> BOOL
-- On LPAREN reduce production typ -> BOOL
-- On LBRACK reduce production typ -> BOOL
-- On INT8 reduce production typ -> BOOL
-- On INT64 reduce production typ -> BOOL
-- On INT32 reduce production typ -> BOOL
-- On INT16 reduce production typ -> BOOL
-- On INSTR_VALUETYPE reduce production typ -> BOOL
-- On INSTR_TYPE reduce production typ -> BOOL
-- On INSTR_TOK reduce production typ -> BOOL
-- On INSTR_STRING reduce production typ -> BOOL
-- On INSTR_SIG reduce production typ -> BOOL
-- On INSTR_R reduce production typ -> BOOL
-- On INSTR_NONE reduce production typ -> BOOL
-- On INSTR_METHOD reduce production typ -> BOOL
-- On INSTR_LOC reduce production typ -> BOOL
-- On INSTR_INT_TYPE reduce production typ -> BOOL
-- On INSTR_I8 reduce production typ -> BOOL
-- On INSTR_I32_I32 reduce production typ -> BOOL
-- On INSTR_I reduce production typ -> BOOL
-- On INSTR_FIELD reduce production typ -> BOOL
-- On INSTR_ARG reduce production typ -> BOOL
-- On GREATER reduce production typ -> BOOL
-- On FLOAT64 reduce production typ -> BOOL
-- On FLOAT32 reduce production typ -> BOOL
-- On EOF reduce production typ -> BOOL
-- On DOT_CTOR reduce production typ -> BOOL
-- On DOT_CCTOR reduce production typ -> BOOL
-- On DCOLON reduce production typ -> BOOL
-- On COMMA reduce production typ -> BOOL
-- On CLASS reduce production typ -> BOOL
-- On CHAR reduce production typ -> BOOL
-- On BOOL reduce production typ -> BOOL
-- On BANG reduce production typ -> BOOL
-- On AMP reduce production typ -> BOOL

State 65:
## Known stack suffix:
## BANG
## LR(1) items:
typ -> BANG . int32 [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> BANG . BANG int32 [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On BANG shift to state 67
-- On int32 shift to state 69
## Reductions:

State 66:
## Known stack suffix:
## VAL_INT64
## LR(1) items:
int32 -> VAL_INT64 . [ VOID VAL_SQSTRING VAL_INT64 VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN RBRACK OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF ELIPSES DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production int32 -> VAL_INT64
-- On VAL_SQSTRING reduce production int32 -> VAL_INT64
-- On VAL_INT64 reduce production int32 -> VAL_INT64
-- On VAL_ID reduce production int32 -> VAL_INT64
-- On VAL_DOTTEDNAME reduce production int32 -> VAL_INT64
-- On VALUETYPE reduce production int32 -> VAL_INT64
-- On VALUE reduce production int32 -> VAL_INT64
-- On UNSIGNED reduce production int32 -> VAL_INT64
-- On UINT8 reduce production int32 -> VAL_INT64
-- On UINT64 reduce production int32 -> VAL_INT64
-- On UINT32 reduce production int32 -> VAL_INT64
-- On UINT16 reduce production int32 -> VAL_INT64
-- On TYPEDREF reduce production int32 -> VAL_INT64
-- On STRING reduce production int32 -> VAL_INT64
-- On STAR reduce production int32 -> VAL_INT64
-- On RPAREN reduce production int32 -> VAL_INT64
-- On RBRACK reduce production int32 -> VAL_INT64
-- On OBJECT reduce production int32 -> VAL_INT64
-- On NATIVE reduce production int32 -> VAL_INT64
-- On METHOD reduce production int32 -> VAL_INT64
-- On LPAREN reduce production int32 -> VAL_INT64
-- On LBRACK reduce production int32 -> VAL_INT64
-- On INT8 reduce production int32 -> VAL_INT64
-- On INT64 reduce production int32 -> VAL_INT64
-- On INT32 reduce production int32 -> VAL_INT64
-- On INT16 reduce production int32 -> VAL_INT64
-- On INSTR_VALUETYPE reduce production int32 -> VAL_INT64
-- On INSTR_TYPE reduce production int32 -> VAL_INT64
-- On INSTR_TOK reduce production int32 -> VAL_INT64
-- On INSTR_STRING reduce production int32 -> VAL_INT64
-- On INSTR_SIG reduce production int32 -> VAL_INT64
-- On INSTR_R reduce production int32 -> VAL_INT64
-- On INSTR_NONE reduce production int32 -> VAL_INT64
-- On INSTR_METHOD reduce production int32 -> VAL_INT64
-- On INSTR_LOC reduce production int32 -> VAL_INT64
-- On INSTR_INT_TYPE reduce production int32 -> VAL_INT64
-- On INSTR_I8 reduce production int32 -> VAL_INT64
-- On INSTR_I32_I32 reduce production int32 -> VAL_INT64
-- On INSTR_I reduce production int32 -> VAL_INT64
-- On INSTR_FIELD reduce production int32 -> VAL_INT64
-- On INSTR_ARG reduce production int32 -> VAL_INT64
-- On GREATER reduce production int32 -> VAL_INT64
-- On FLOAT64 reduce production int32 -> VAL_INT64
-- On FLOAT32 reduce production int32 -> VAL_INT64
-- On EOF reduce production int32 -> VAL_INT64
-- On ELIPSES reduce production int32 -> VAL_INT64
-- On DOT_CTOR reduce production int32 -> VAL_INT64
-- On DOT_CCTOR reduce production int32 -> VAL_INT64
-- On DCOLON reduce production int32 -> VAL_INT64
-- On COMMA reduce production int32 -> VAL_INT64
-- On CLASS reduce production int32 -> VAL_INT64
-- On CHAR reduce production int32 -> VAL_INT64
-- On BOOL reduce production int32 -> VAL_INT64
-- On BANG reduce production int32 -> VAL_INT64
-- On AMP reduce production int32 -> VAL_INT64

State 67:
## Known stack suffix:
## BANG BANG
## LR(1) items:
typ -> BANG BANG . int32 [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## BANG BANG int32
## LR(1) items:
typ -> BANG BANG int32 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> BANG BANG int32
-- On VAL_SQSTRING reduce production typ -> BANG BANG int32
-- On VAL_ID reduce production typ -> BANG BANG int32
-- On VAL_DOTTEDNAME reduce production typ -> BANG BANG int32
-- On VALUETYPE reduce production typ -> BANG BANG int32
-- On VALUE reduce production typ -> BANG BANG int32
-- On UNSIGNED reduce production typ -> BANG BANG int32
-- On UINT8 reduce production typ -> BANG BANG int32
-- On UINT64 reduce production typ -> BANG BANG int32
-- On UINT32 reduce production typ -> BANG BANG int32
-- On UINT16 reduce production typ -> BANG BANG int32
-- On TYPEDREF reduce production typ -> BANG BANG int32
-- On STRING reduce production typ -> BANG BANG int32
-- On STAR reduce production typ -> BANG BANG int32
-- On RPAREN reduce production typ -> BANG BANG int32
-- On OBJECT reduce production typ -> BANG BANG int32
-- On NATIVE reduce production typ -> BANG BANG int32
-- On METHOD reduce production typ -> BANG BANG int32
-- On LPAREN reduce production typ -> BANG BANG int32
-- On LBRACK reduce production typ -> BANG BANG int32
-- On INT8 reduce production typ -> BANG BANG int32
-- On INT64 reduce production typ -> BANG BANG int32
-- On INT32 reduce production typ -> BANG BANG int32
-- On INT16 reduce production typ -> BANG BANG int32
-- On INSTR_VALUETYPE reduce production typ -> BANG BANG int32
-- On INSTR_TYPE reduce production typ -> BANG BANG int32
-- On INSTR_TOK reduce production typ -> BANG BANG int32
-- On INSTR_STRING reduce production typ -> BANG BANG int32
-- On INSTR_SIG reduce production typ -> BANG BANG int32
-- On INSTR_R reduce production typ -> BANG BANG int32
-- On INSTR_NONE reduce production typ -> BANG BANG int32
-- On INSTR_METHOD reduce production typ -> BANG BANG int32
-- On INSTR_LOC reduce production typ -> BANG BANG int32
-- On INSTR_INT_TYPE reduce production typ -> BANG BANG int32
-- On INSTR_I8 reduce production typ -> BANG BANG int32
-- On INSTR_I32_I32 reduce production typ -> BANG BANG int32
-- On INSTR_I reduce production typ -> BANG BANG int32
-- On INSTR_FIELD reduce production typ -> BANG BANG int32
-- On INSTR_ARG reduce production typ -> BANG BANG int32
-- On GREATER reduce production typ -> BANG BANG int32
-- On FLOAT64 reduce production typ -> BANG BANG int32
-- On FLOAT32 reduce production typ -> BANG BANG int32
-- On EOF reduce production typ -> BANG BANG int32
-- On DOT_CTOR reduce production typ -> BANG BANG int32
-- On DOT_CCTOR reduce production typ -> BANG BANG int32
-- On DCOLON reduce production typ -> BANG BANG int32
-- On COMMA reduce production typ -> BANG BANG int32
-- On CLASS reduce production typ -> BANG BANG int32
-- On CHAR reduce production typ -> BANG BANG int32
-- On BOOL reduce production typ -> BANG BANG int32
-- On BANG reduce production typ -> BANG BANG int32
-- On AMP reduce production typ -> BANG BANG int32

State 69:
## Known stack suffix:
## BANG int32
## LR(1) items:
typ -> BANG int32 . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> BANG int32
-- On VAL_SQSTRING reduce production typ -> BANG int32
-- On VAL_ID reduce production typ -> BANG int32
-- On VAL_DOTTEDNAME reduce production typ -> BANG int32
-- On VALUETYPE reduce production typ -> BANG int32
-- On VALUE reduce production typ -> BANG int32
-- On UNSIGNED reduce production typ -> BANG int32
-- On UINT8 reduce production typ -> BANG int32
-- On UINT64 reduce production typ -> BANG int32
-- On UINT32 reduce production typ -> BANG int32
-- On UINT16 reduce production typ -> BANG int32
-- On TYPEDREF reduce production typ -> BANG int32
-- On STRING reduce production typ -> BANG int32
-- On STAR reduce production typ -> BANG int32
-- On RPAREN reduce production typ -> BANG int32
-- On OBJECT reduce production typ -> BANG int32
-- On NATIVE reduce production typ -> BANG int32
-- On METHOD reduce production typ -> BANG int32
-- On LPAREN reduce production typ -> BANG int32
-- On LBRACK reduce production typ -> BANG int32
-- On INT8 reduce production typ -> BANG int32
-- On INT64 reduce production typ -> BANG int32
-- On INT32 reduce production typ -> BANG int32
-- On INT16 reduce production typ -> BANG int32
-- On INSTR_VALUETYPE reduce production typ -> BANG int32
-- On INSTR_TYPE reduce production typ -> BANG int32
-- On INSTR_TOK reduce production typ -> BANG int32
-- On INSTR_STRING reduce production typ -> BANG int32
-- On INSTR_SIG reduce production typ -> BANG int32
-- On INSTR_R reduce production typ -> BANG int32
-- On INSTR_NONE reduce production typ -> BANG int32
-- On INSTR_METHOD reduce production typ -> BANG int32
-- On INSTR_LOC reduce production typ -> BANG int32
-- On INSTR_INT_TYPE reduce production typ -> BANG int32
-- On INSTR_I8 reduce production typ -> BANG int32
-- On INSTR_I32_I32 reduce production typ -> BANG int32
-- On INSTR_I reduce production typ -> BANG int32
-- On INSTR_FIELD reduce production typ -> BANG int32
-- On INSTR_ARG reduce production typ -> BANG int32
-- On GREATER reduce production typ -> BANG int32
-- On FLOAT64 reduce production typ -> BANG int32
-- On FLOAT32 reduce production typ -> BANG int32
-- On EOF reduce production typ -> BANG int32
-- On DOT_CTOR reduce production typ -> BANG int32
-- On DOT_CCTOR reduce production typ -> BANG int32
-- On DCOLON reduce production typ -> BANG int32
-- On COMMA reduce production typ -> BANG int32
-- On CLASS reduce production typ -> BANG int32
-- On CHAR reduce production typ -> BANG int32
-- On BOOL reduce production typ -> BANG int32
-- On BANG reduce production typ -> BANG int32
-- On AMP reduce production typ -> BANG int32

State 70:
## Known stack suffix:
## METHOD callConv typ
## LR(1) items:
typ -> typ . LBRACK RBRACK [ STAR LBRACK AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ STAR LBRACK AMP ]
typ -> typ . LBRACK RBRACK BANG [ STAR LBRACK AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ STAR LBRACK AMP ]
typ -> typ . AMP [ STAR LBRACK AMP ]
typ -> typ . STAR [ STAR LBRACK AMP ]
typ -> METHOD callConv typ . STAR LPAREN sigArgs0 RPAREN [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On STAR shift to state 71
-- On LBRACK shift to state 76
-- On AMP shift to state 90
## Reductions:

State 71:
## Known stack suffix:
## METHOD callConv typ STAR
## LR(1) items:
typ -> typ STAR . [ STAR LBRACK AMP ]
typ -> METHOD callConv typ STAR . LPAREN sigArgs0 RPAREN [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On LPAREN shift to state 72
## Reductions:
-- On STAR reduce production typ -> typ STAR
-- On LBRACK reduce production typ -> typ STAR
-- On AMP reduce production typ -> typ STAR

State 72:
## Known stack suffix:
## METHOD callConv typ STAR LPAREN
## LR(1) items:
typ -> METHOD callConv typ STAR LPAREN . sigArgs0 RPAREN [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On ELIPSES shift to state 73
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 74
-- On sigArgs1a shift to state 93
-- On sigArgs1 shift to state 96
-- On sigArgs0 shift to state 97
-- On sigArg shift to state 99
## Reductions:
-- On RPAREN reduce production sigArgs0 ->

State 73:
## Known stack suffix:
## ELIPSES
## LR(1) items:
sigArg -> ELIPSES . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production sigArg -> ELIPSES
-- On COMMA reduce production sigArg -> ELIPSES

State 74:
## Known stack suffix:
## typ
## LR(1) items:
sigArg -> typ . opt_id [ RPAREN COMMA ]
typ -> typ . LBRACK RBRACK [ VAL_SQSTRING VAL_ID STAR RPAREN LBRACK COMMA AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ VAL_SQSTRING VAL_ID STAR RPAREN LBRACK COMMA AMP ]
typ -> typ . LBRACK RBRACK BANG [ VAL_SQSTRING VAL_ID STAR RPAREN LBRACK COMMA AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ VAL_SQSTRING VAL_ID STAR RPAREN LBRACK COMMA AMP ]
typ -> typ . AMP [ VAL_SQSTRING VAL_ID STAR RPAREN LBRACK COMMA AMP ]
typ -> typ . STAR [ VAL_SQSTRING VAL_ID STAR RPAREN LBRACK COMMA AMP ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On STAR shift to state 75
-- On LBRACK shift to state 76
-- On AMP shift to state 90
-- On opt_id shift to state 91
-- On id shift to state 92
## Reductions:
-- On RPAREN reduce production opt_id ->
-- On COMMA reduce production opt_id ->

State 75:
## Known stack suffix:
## typ STAR
## LR(1) items:
typ -> typ STAR . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> typ STAR
-- On VAL_SQSTRING reduce production typ -> typ STAR
-- On VAL_ID reduce production typ -> typ STAR
-- On VAL_DOTTEDNAME reduce production typ -> typ STAR
-- On VALUETYPE reduce production typ -> typ STAR
-- On VALUE reduce production typ -> typ STAR
-- On UNSIGNED reduce production typ -> typ STAR
-- On UINT8 reduce production typ -> typ STAR
-- On UINT64 reduce production typ -> typ STAR
-- On UINT32 reduce production typ -> typ STAR
-- On UINT16 reduce production typ -> typ STAR
-- On TYPEDREF reduce production typ -> typ STAR
-- On STRING reduce production typ -> typ STAR
-- On STAR reduce production typ -> typ STAR
-- On RPAREN reduce production typ -> typ STAR
-- On OBJECT reduce production typ -> typ STAR
-- On NATIVE reduce production typ -> typ STAR
-- On METHOD reduce production typ -> typ STAR
-- On LPAREN reduce production typ -> typ STAR
-- On LBRACK reduce production typ -> typ STAR
-- On INT8 reduce production typ -> typ STAR
-- On INT64 reduce production typ -> typ STAR
-- On INT32 reduce production typ -> typ STAR
-- On INT16 reduce production typ -> typ STAR
-- On INSTR_VALUETYPE reduce production typ -> typ STAR
-- On INSTR_TYPE reduce production typ -> typ STAR
-- On INSTR_TOK reduce production typ -> typ STAR
-- On INSTR_STRING reduce production typ -> typ STAR
-- On INSTR_SIG reduce production typ -> typ STAR
-- On INSTR_R reduce production typ -> typ STAR
-- On INSTR_NONE reduce production typ -> typ STAR
-- On INSTR_METHOD reduce production typ -> typ STAR
-- On INSTR_LOC reduce production typ -> typ STAR
-- On INSTR_INT_TYPE reduce production typ -> typ STAR
-- On INSTR_I8 reduce production typ -> typ STAR
-- On INSTR_I32_I32 reduce production typ -> typ STAR
-- On INSTR_I reduce production typ -> typ STAR
-- On INSTR_FIELD reduce production typ -> typ STAR
-- On INSTR_ARG reduce production typ -> typ STAR
-- On GREATER reduce production typ -> typ STAR
-- On FLOAT64 reduce production typ -> typ STAR
-- On FLOAT32 reduce production typ -> typ STAR
-- On EOF reduce production typ -> typ STAR
-- On DOT_CTOR reduce production typ -> typ STAR
-- On DOT_CCTOR reduce production typ -> typ STAR
-- On DCOLON reduce production typ -> typ STAR
-- On COMMA reduce production typ -> typ STAR
-- On CLASS reduce production typ -> typ STAR
-- On CHAR reduce production typ -> typ STAR
-- On BOOL reduce production typ -> typ STAR
-- On BANG reduce production typ -> typ STAR
-- On AMP reduce production typ -> typ STAR

State 76:
## Known stack suffix:
## typ LBRACK
## LR(1) items:
typ -> typ LBRACK . RBRACK [ VAL_SQSTRING VAL_ID STAR RPAREN LPAREN LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ LBRACK . bounds1 RBRACK [ VAL_SQSTRING VAL_ID STAR RPAREN LPAREN LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ LBRACK . RBRACK BANG [ VAL_SQSTRING VAL_ID STAR RPAREN LPAREN LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ LBRACK . bounds1 RBRACK BANG [ VAL_SQSTRING VAL_ID STAR RPAREN LPAREN LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On VAL_INT32_ELIPSES shift to state 77
-- On RBRACK shift to state 79
-- On int32 shift to state 81
-- On bounds1 shift to state 84
-- On bound shift to state 89
## Reductions:
-- On COMMA reduce production bound ->

State 77:
## Known stack suffix:
## VAL_INT32_ELIPSES
## LR(1) items:
bound -> VAL_INT32_ELIPSES . int32 [ RBRACK COMMA ]
bound -> VAL_INT32_ELIPSES . [ RBRACK COMMA ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 78
## Reductions:
-- On RBRACK reduce production bound -> VAL_INT32_ELIPSES
-- On COMMA reduce production bound -> VAL_INT32_ELIPSES

State 78:
## Known stack suffix:
## VAL_INT32_ELIPSES int32
## LR(1) items:
bound -> VAL_INT32_ELIPSES int32 . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK reduce production bound -> VAL_INT32_ELIPSES int32
-- On COMMA reduce production bound -> VAL_INT32_ELIPSES int32

State 79:
## Known stack suffix:
## typ LBRACK RBRACK
## LR(1) items:
typ -> typ LBRACK RBRACK . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> typ LBRACK RBRACK . BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On BANG shift to state 80
## Reductions:
-- On VOID reduce production typ -> typ LBRACK RBRACK
-- On VAL_SQSTRING reduce production typ -> typ LBRACK RBRACK
-- On VAL_ID reduce production typ -> typ LBRACK RBRACK
-- On VAL_DOTTEDNAME reduce production typ -> typ LBRACK RBRACK
-- On VALUETYPE reduce production typ -> typ LBRACK RBRACK
-- On VALUE reduce production typ -> typ LBRACK RBRACK
-- On UNSIGNED reduce production typ -> typ LBRACK RBRACK
-- On UINT8 reduce production typ -> typ LBRACK RBRACK
-- On UINT64 reduce production typ -> typ LBRACK RBRACK
-- On UINT32 reduce production typ -> typ LBRACK RBRACK
-- On UINT16 reduce production typ -> typ LBRACK RBRACK
-- On TYPEDREF reduce production typ -> typ LBRACK RBRACK
-- On STRING reduce production typ -> typ LBRACK RBRACK
-- On STAR reduce production typ -> typ LBRACK RBRACK
-- On RPAREN reduce production typ -> typ LBRACK RBRACK
-- On OBJECT reduce production typ -> typ LBRACK RBRACK
-- On NATIVE reduce production typ -> typ LBRACK RBRACK
-- On METHOD reduce production typ -> typ LBRACK RBRACK
-- On LPAREN reduce production typ -> typ LBRACK RBRACK
-- On LBRACK reduce production typ -> typ LBRACK RBRACK
-- On INT8 reduce production typ -> typ LBRACK RBRACK
-- On INT64 reduce production typ -> typ LBRACK RBRACK
-- On INT32 reduce production typ -> typ LBRACK RBRACK
-- On INT16 reduce production typ -> typ LBRACK RBRACK
-- On INSTR_VALUETYPE reduce production typ -> typ LBRACK RBRACK
-- On INSTR_TYPE reduce production typ -> typ LBRACK RBRACK
-- On INSTR_TOK reduce production typ -> typ LBRACK RBRACK
-- On INSTR_STRING reduce production typ -> typ LBRACK RBRACK
-- On INSTR_SIG reduce production typ -> typ LBRACK RBRACK
-- On INSTR_R reduce production typ -> typ LBRACK RBRACK
-- On INSTR_NONE reduce production typ -> typ LBRACK RBRACK
-- On INSTR_METHOD reduce production typ -> typ LBRACK RBRACK
-- On INSTR_LOC reduce production typ -> typ LBRACK RBRACK
-- On INSTR_INT_TYPE reduce production typ -> typ LBRACK RBRACK
-- On INSTR_I8 reduce production typ -> typ LBRACK RBRACK
-- On INSTR_I32_I32 reduce production typ -> typ LBRACK RBRACK
-- On INSTR_I reduce production typ -> typ LBRACK RBRACK
-- On INSTR_FIELD reduce production typ -> typ LBRACK RBRACK
-- On INSTR_ARG reduce production typ -> typ LBRACK RBRACK
-- On GREATER reduce production typ -> typ LBRACK RBRACK
-- On FLOAT64 reduce production typ -> typ LBRACK RBRACK
-- On FLOAT32 reduce production typ -> typ LBRACK RBRACK
-- On EOF reduce production typ -> typ LBRACK RBRACK
-- On DOT_CTOR reduce production typ -> typ LBRACK RBRACK
-- On DOT_CCTOR reduce production typ -> typ LBRACK RBRACK
-- On DCOLON reduce production typ -> typ LBRACK RBRACK
-- On COMMA reduce production typ -> typ LBRACK RBRACK
-- On CLASS reduce production typ -> typ LBRACK RBRACK
-- On CHAR reduce production typ -> typ LBRACK RBRACK
-- On BOOL reduce production typ -> typ LBRACK RBRACK
-- On AMP reduce production typ -> typ LBRACK RBRACK

State 80:
## Known stack suffix:
## typ LBRACK RBRACK BANG
## LR(1) items:
typ -> typ LBRACK RBRACK BANG . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> typ LBRACK RBRACK BANG
-- On VAL_SQSTRING reduce production typ -> typ LBRACK RBRACK BANG
-- On VAL_ID reduce production typ -> typ LBRACK RBRACK BANG
-- On VAL_DOTTEDNAME reduce production typ -> typ LBRACK RBRACK BANG
-- On VALUETYPE reduce production typ -> typ LBRACK RBRACK BANG
-- On VALUE reduce production typ -> typ LBRACK RBRACK BANG
-- On UNSIGNED reduce production typ -> typ LBRACK RBRACK BANG
-- On UINT8 reduce production typ -> typ LBRACK RBRACK BANG
-- On UINT64 reduce production typ -> typ LBRACK RBRACK BANG
-- On UINT32 reduce production typ -> typ LBRACK RBRACK BANG
-- On UINT16 reduce production typ -> typ LBRACK RBRACK BANG
-- On TYPEDREF reduce production typ -> typ LBRACK RBRACK BANG
-- On STRING reduce production typ -> typ LBRACK RBRACK BANG
-- On STAR reduce production typ -> typ LBRACK RBRACK BANG
-- On RPAREN reduce production typ -> typ LBRACK RBRACK BANG
-- On OBJECT reduce production typ -> typ LBRACK RBRACK BANG
-- On NATIVE reduce production typ -> typ LBRACK RBRACK BANG
-- On METHOD reduce production typ -> typ LBRACK RBRACK BANG
-- On LPAREN reduce production typ -> typ LBRACK RBRACK BANG
-- On LBRACK reduce production typ -> typ LBRACK RBRACK BANG
-- On INT8 reduce production typ -> typ LBRACK RBRACK BANG
-- On INT64 reduce production typ -> typ LBRACK RBRACK BANG
-- On INT32 reduce production typ -> typ LBRACK RBRACK BANG
-- On INT16 reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_VALUETYPE reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_TYPE reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_TOK reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_STRING reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_SIG reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_R reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_NONE reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_METHOD reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_LOC reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_INT_TYPE reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_I8 reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_I32_I32 reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_I reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_FIELD reduce production typ -> typ LBRACK RBRACK BANG
-- On INSTR_ARG reduce production typ -> typ LBRACK RBRACK BANG
-- On GREATER reduce production typ -> typ LBRACK RBRACK BANG
-- On FLOAT64 reduce production typ -> typ LBRACK RBRACK BANG
-- On FLOAT32 reduce production typ -> typ LBRACK RBRACK BANG
-- On EOF reduce production typ -> typ LBRACK RBRACK BANG
-- On DOT_CTOR reduce production typ -> typ LBRACK RBRACK BANG
-- On DOT_CCTOR reduce production typ -> typ LBRACK RBRACK BANG
-- On DCOLON reduce production typ -> typ LBRACK RBRACK BANG
-- On COMMA reduce production typ -> typ LBRACK RBRACK BANG
-- On CLASS reduce production typ -> typ LBRACK RBRACK BANG
-- On CHAR reduce production typ -> typ LBRACK RBRACK BANG
-- On BOOL reduce production typ -> typ LBRACK RBRACK BANG
-- On BANG reduce production typ -> typ LBRACK RBRACK BANG
-- On AMP reduce production typ -> typ LBRACK RBRACK BANG

State 81:
## Known stack suffix:
## int32
## LR(1) items:
bound -> int32 . [ RBRACK COMMA ]
bound -> int32 . ELIPSES int32 [ RBRACK COMMA ]
bound -> int32 . ELIPSES [ RBRACK COMMA ]
## Transitions:
-- On ELIPSES shift to state 82
## Reductions:
-- On RBRACK reduce production bound -> int32
-- On COMMA reduce production bound -> int32

State 82:
## Known stack suffix:
## int32 ELIPSES
## LR(1) items:
bound -> int32 ELIPSES . int32 [ RBRACK COMMA ]
bound -> int32 ELIPSES . [ RBRACK COMMA ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 83
## Reductions:
-- On RBRACK reduce production bound -> int32 ELIPSES
-- On COMMA reduce production bound -> int32 ELIPSES

State 83:
## Known stack suffix:
## int32 ELIPSES int32
## LR(1) items:
bound -> int32 ELIPSES int32 . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK reduce production bound -> int32 ELIPSES int32
-- On COMMA reduce production bound -> int32 ELIPSES int32

State 84:
## Known stack suffix:
## typ LBRACK bounds1
## LR(1) items:
bounds1 -> bounds1 . COMMA bound [ RBRACK COMMA ]
typ -> typ LBRACK bounds1 . RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> typ LBRACK bounds1 . RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On RBRACK shift to state 85
-- On COMMA shift to state 87
## Reductions:

State 85:
## Known stack suffix:
## typ LBRACK bounds1 RBRACK
## LR(1) items:
typ -> typ LBRACK bounds1 RBRACK . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
typ -> typ LBRACK bounds1 RBRACK . BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On BANG shift to state 86
## Reductions:
-- On VOID reduce production typ -> typ LBRACK bounds1 RBRACK
-- On VAL_SQSTRING reduce production typ -> typ LBRACK bounds1 RBRACK
-- On VAL_ID reduce production typ -> typ LBRACK bounds1 RBRACK
-- On VAL_DOTTEDNAME reduce production typ -> typ LBRACK bounds1 RBRACK
-- On VALUETYPE reduce production typ -> typ LBRACK bounds1 RBRACK
-- On VALUE reduce production typ -> typ LBRACK bounds1 RBRACK
-- On UNSIGNED reduce production typ -> typ LBRACK bounds1 RBRACK
-- On UINT8 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On UINT64 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On UINT32 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On UINT16 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On TYPEDREF reduce production typ -> typ LBRACK bounds1 RBRACK
-- On STRING reduce production typ -> typ LBRACK bounds1 RBRACK
-- On STAR reduce production typ -> typ LBRACK bounds1 RBRACK
-- On RPAREN reduce production typ -> typ LBRACK bounds1 RBRACK
-- On OBJECT reduce production typ -> typ LBRACK bounds1 RBRACK
-- On NATIVE reduce production typ -> typ LBRACK bounds1 RBRACK
-- On METHOD reduce production typ -> typ LBRACK bounds1 RBRACK
-- On LPAREN reduce production typ -> typ LBRACK bounds1 RBRACK
-- On LBRACK reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INT8 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INT64 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INT32 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INT16 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_VALUETYPE reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_TYPE reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_TOK reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_STRING reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_SIG reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_R reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_NONE reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_METHOD reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_LOC reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_INT_TYPE reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_I8 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_I32_I32 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_I reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_FIELD reduce production typ -> typ LBRACK bounds1 RBRACK
-- On INSTR_ARG reduce production typ -> typ LBRACK bounds1 RBRACK
-- On GREATER reduce production typ -> typ LBRACK bounds1 RBRACK
-- On FLOAT64 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On FLOAT32 reduce production typ -> typ LBRACK bounds1 RBRACK
-- On EOF reduce production typ -> typ LBRACK bounds1 RBRACK
-- On DOT_CTOR reduce production typ -> typ LBRACK bounds1 RBRACK
-- On DOT_CCTOR reduce production typ -> typ LBRACK bounds1 RBRACK
-- On DCOLON reduce production typ -> typ LBRACK bounds1 RBRACK
-- On COMMA reduce production typ -> typ LBRACK bounds1 RBRACK
-- On CLASS reduce production typ -> typ LBRACK bounds1 RBRACK
-- On CHAR reduce production typ -> typ LBRACK bounds1 RBRACK
-- On BOOL reduce production typ -> typ LBRACK bounds1 RBRACK
-- On AMP reduce production typ -> typ LBRACK bounds1 RBRACK

State 86:
## Known stack suffix:
## typ LBRACK bounds1 RBRACK BANG
## LR(1) items:
typ -> typ LBRACK bounds1 RBRACK BANG . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On VAL_SQSTRING reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On VAL_ID reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On VAL_DOTTEDNAME reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On VALUETYPE reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On VALUE reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On UNSIGNED reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On UINT8 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On UINT64 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On UINT32 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On UINT16 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On TYPEDREF reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On STRING reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On STAR reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On RPAREN reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On OBJECT reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On NATIVE reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On METHOD reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On LPAREN reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On LBRACK reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INT8 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INT64 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INT32 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INT16 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_VALUETYPE reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_TYPE reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_TOK reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_STRING reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_SIG reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_R reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_NONE reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_METHOD reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_LOC reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_INT_TYPE reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_I8 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_I32_I32 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_I reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_FIELD reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On INSTR_ARG reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On GREATER reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On FLOAT64 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On FLOAT32 reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On EOF reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On DOT_CTOR reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On DOT_CCTOR reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On DCOLON reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On COMMA reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On CLASS reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On CHAR reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On BOOL reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On BANG reduce production typ -> typ LBRACK bounds1 RBRACK BANG
-- On AMP reduce production typ -> typ LBRACK bounds1 RBRACK BANG

State 87:
## Known stack suffix:
## bounds1 COMMA
## LR(1) items:
bounds1 -> bounds1 COMMA . bound [ RBRACK COMMA ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On VAL_INT32_ELIPSES shift to state 77
-- On int32 shift to state 81
-- On bound shift to state 88
## Reductions:
-- On RBRACK reduce production bound ->
-- On COMMA reduce production bound ->

State 88:
## Known stack suffix:
## bounds1 COMMA bound
## LR(1) items:
bounds1 -> bounds1 COMMA bound . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK reduce production bounds1 -> bounds1 COMMA bound
-- On COMMA reduce production bounds1 -> bounds1 COMMA bound

State 89:
## Known stack suffix:
## bound
## LR(1) items:
bounds1 -> bound . [ RBRACK COMMA ]
## Transitions:
## Reductions:
-- On RBRACK reduce production bounds1 -> bound
-- On COMMA reduce production bounds1 -> bound

State 90:
## Known stack suffix:
## typ AMP
## LR(1) items:
typ -> typ AMP . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> typ AMP
-- On VAL_SQSTRING reduce production typ -> typ AMP
-- On VAL_ID reduce production typ -> typ AMP
-- On VAL_DOTTEDNAME reduce production typ -> typ AMP
-- On VALUETYPE reduce production typ -> typ AMP
-- On VALUE reduce production typ -> typ AMP
-- On UNSIGNED reduce production typ -> typ AMP
-- On UINT8 reduce production typ -> typ AMP
-- On UINT64 reduce production typ -> typ AMP
-- On UINT32 reduce production typ -> typ AMP
-- On UINT16 reduce production typ -> typ AMP
-- On TYPEDREF reduce production typ -> typ AMP
-- On STRING reduce production typ -> typ AMP
-- On STAR reduce production typ -> typ AMP
-- On RPAREN reduce production typ -> typ AMP
-- On OBJECT reduce production typ -> typ AMP
-- On NATIVE reduce production typ -> typ AMP
-- On METHOD reduce production typ -> typ AMP
-- On LPAREN reduce production typ -> typ AMP
-- On LBRACK reduce production typ -> typ AMP
-- On INT8 reduce production typ -> typ AMP
-- On INT64 reduce production typ -> typ AMP
-- On INT32 reduce production typ -> typ AMP
-- On INT16 reduce production typ -> typ AMP
-- On INSTR_VALUETYPE reduce production typ -> typ AMP
-- On INSTR_TYPE reduce production typ -> typ AMP
-- On INSTR_TOK reduce production typ -> typ AMP
-- On INSTR_STRING reduce production typ -> typ AMP
-- On INSTR_SIG reduce production typ -> typ AMP
-- On INSTR_R reduce production typ -> typ AMP
-- On INSTR_NONE reduce production typ -> typ AMP
-- On INSTR_METHOD reduce production typ -> typ AMP
-- On INSTR_LOC reduce production typ -> typ AMP
-- On INSTR_INT_TYPE reduce production typ -> typ AMP
-- On INSTR_I8 reduce production typ -> typ AMP
-- On INSTR_I32_I32 reduce production typ -> typ AMP
-- On INSTR_I reduce production typ -> typ AMP
-- On INSTR_FIELD reduce production typ -> typ AMP
-- On INSTR_ARG reduce production typ -> typ AMP
-- On GREATER reduce production typ -> typ AMP
-- On FLOAT64 reduce production typ -> typ AMP
-- On FLOAT32 reduce production typ -> typ AMP
-- On EOF reduce production typ -> typ AMP
-- On DOT_CTOR reduce production typ -> typ AMP
-- On DOT_CCTOR reduce production typ -> typ AMP
-- On DCOLON reduce production typ -> typ AMP
-- On COMMA reduce production typ -> typ AMP
-- On CLASS reduce production typ -> typ AMP
-- On CHAR reduce production typ -> typ AMP
-- On BOOL reduce production typ -> typ AMP
-- On BANG reduce production typ -> typ AMP
-- On AMP reduce production typ -> typ AMP

State 91:
## Known stack suffix:
## typ opt_id
## LR(1) items:
sigArg -> typ opt_id . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production sigArg -> typ opt_id
-- On COMMA reduce production sigArg -> typ opt_id

State 92:
## Known stack suffix:
## id
## LR(1) items:
opt_id -> id . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production opt_id -> id
-- On COMMA reduce production opt_id -> id

State 93:
## Known stack suffix:
## sigArgs1a
## LR(1) items:
sigArgs1 -> sigArgs1a . [ RPAREN ]
sigArgs1a -> sigArgs1a . COMMA sigArg [ RPAREN COMMA ]
## Transitions:
-- On COMMA shift to state 94
## Reductions:
-- On RPAREN reduce production sigArgs1 -> sigArgs1a

State 94:
## Known stack suffix:
## sigArgs1a COMMA
## LR(1) items:
sigArgs1a -> sigArgs1a COMMA . sigArg [ RPAREN COMMA ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On ELIPSES shift to state 73
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 74
-- On sigArg shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## sigArgs1a COMMA sigArg
## LR(1) items:
sigArgs1a -> sigArgs1a COMMA sigArg . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production sigArgs1a -> sigArgs1a COMMA sigArg
-- On COMMA reduce production sigArgs1a -> sigArgs1a COMMA sigArg

State 96:
## Known stack suffix:
## sigArgs1
## LR(1) items:
sigArgs0 -> sigArgs1 . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production sigArgs0 -> sigArgs1

State 97:
## Known stack suffix:
## METHOD callConv typ STAR LPAREN sigArgs0
## LR(1) items:
typ -> METHOD callConv typ STAR LPAREN sigArgs0 . RPAREN [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On RPAREN shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
## LR(1) items:
typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On VAL_SQSTRING reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On VAL_ID reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On VAL_DOTTEDNAME reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On VALUETYPE reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On VALUE reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On UNSIGNED reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On UINT8 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On UINT64 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On UINT32 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On UINT16 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On TYPEDREF reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On STRING reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On STAR reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On RPAREN reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On OBJECT reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On NATIVE reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On METHOD reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On LPAREN reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On LBRACK reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INT8 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INT64 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INT32 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INT16 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_VALUETYPE reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_TYPE reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_TOK reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_STRING reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_SIG reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_R reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_NONE reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_METHOD reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_LOC reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_INT_TYPE reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_I8 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_I32_I32 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_I reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_FIELD reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On INSTR_ARG reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On GREATER reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On FLOAT64 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On FLOAT32 reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On EOF reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On DOT_CTOR reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On DOT_CCTOR reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On DCOLON reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On COMMA reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On CLASS reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On CHAR reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On BOOL reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On BANG reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN
-- On AMP reduce production typ -> METHOD callConv typ STAR LPAREN sigArgs0 RPAREN

State 99:
## Known stack suffix:
## sigArg
## LR(1) items:
sigArgs1a -> sigArg . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production sigArgs1a -> sigArg
-- On COMMA reduce production sigArgs1a -> sigArg

State 100:
## Known stack suffix:
## LPAREN
## LR(1) items:
typSpec -> LPAREN . typ RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## LPAREN typ
## LR(1) items:
typ -> typ . LBRACK RBRACK [ STAR RPAREN LBRACK AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ STAR RPAREN LBRACK AMP ]
typ -> typ . LBRACK RBRACK BANG [ STAR RPAREN LBRACK AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ STAR RPAREN LBRACK AMP ]
typ -> typ . AMP [ STAR RPAREN LBRACK AMP ]
typ -> typ . STAR [ STAR RPAREN LBRACK AMP ]
typSpec -> LPAREN typ . RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
-- On STAR shift to state 75
-- On RPAREN shift to state 102
-- On LBRACK shift to state 76
-- On AMP shift to state 90
## Reductions:

State 102:
## Known stack suffix:
## LPAREN typ RPAREN
## LR(1) items:
typSpec -> LPAREN typ RPAREN . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_TYPE reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_TOK reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_STRING reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_SIG reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_R reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_NONE reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_METHOD reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_LOC reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_INT_TYPE reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_I8 reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_I32_I32 reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_I reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_FIELD reduce production typSpec -> LPAREN typ RPAREN
-- On INSTR_ARG reduce production typSpec -> LPAREN typ RPAREN
-- On GREATER reduce production typSpec -> LPAREN typ RPAREN
-- On EOF reduce production typSpec -> LPAREN typ RPAREN
-- On DCOLON reduce production typSpec -> LPAREN typ RPAREN
-- On COMMA reduce production typSpec -> LPAREN typ RPAREN

State 103:
## Known stack suffix:
## LBRACK
## LR(1) items:
className -> LBRACK . name1 RBRACK slashedName [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF COMMA ]
typeName -> LBRACK . name1 RBRACK [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF COMMA ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On name1 shift to state 104
-- On id shift to state 14
## Reductions:

State 104:
## Known stack suffix:
## LBRACK name1
## LR(1) items:
className -> LBRACK name1 . RBRACK slashedName [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
name1 -> name1 . DOT id [ RBRACK DOT ]
typeName -> LBRACK name1 . RBRACK [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
-- On RBRACK shift to state 105
-- On DOT shift to state 15
## Reductions:

State 105:
## Known stack suffix:
## LBRACK name1 RBRACK
## LR(1) items:
className -> LBRACK name1 RBRACK . slashedName [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
typeName -> LBRACK name1 RBRACK . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On slashedName shift to state 10
-- On name1 shift to state 11
-- On id shift to state 14
## Reductions:
-- On INSTR_VALUETYPE reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_TYPE reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_TOK reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_STRING reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_SIG reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_R reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_NONE reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_METHOD reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_LOC reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_INT_TYPE reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_I8 reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_I32_I32 reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_I reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_FIELD reduce production typeName -> LBRACK name1 RBRACK
-- On INSTR_ARG reduce production typeName -> LBRACK name1 RBRACK
-- On GREATER reduce production typeName -> LBRACK name1 RBRACK
-- On EOF reduce production typeName -> LBRACK name1 RBRACK
-- On DCOLON reduce production typeName -> LBRACK name1 RBRACK
-- On COMMA reduce production typeName -> LBRACK name1 RBRACK

State 106:
## Known stack suffix:
## typeName
## LR(1) items:
typSpec -> typeName . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production typSpec -> typeName
-- On INSTR_TYPE reduce production typSpec -> typeName
-- On INSTR_TOK reduce production typSpec -> typeName
-- On INSTR_STRING reduce production typSpec -> typeName
-- On INSTR_SIG reduce production typSpec -> typeName
-- On INSTR_R reduce production typSpec -> typeName
-- On INSTR_NONE reduce production typSpec -> typeName
-- On INSTR_METHOD reduce production typSpec -> typeName
-- On INSTR_LOC reduce production typSpec -> typeName
-- On INSTR_INT_TYPE reduce production typSpec -> typeName
-- On INSTR_I8 reduce production typSpec -> typeName
-- On INSTR_I32_I32 reduce production typSpec -> typeName
-- On INSTR_I reduce production typSpec -> typeName
-- On INSTR_FIELD reduce production typSpec -> typeName
-- On INSTR_ARG reduce production typSpec -> typeName
-- On GREATER reduce production typSpec -> typeName
-- On EOF reduce production typSpec -> typeName
-- On DCOLON reduce production typSpec -> typeName
-- On COMMA reduce production typSpec -> typeName

State 107:
## Known stack suffix:
## typSpec
## LR(1) items:
actualTypSpecs -> typSpec . [ GREATER COMMA ]
## Transitions:
## Reductions:
-- On GREATER reduce production actualTypSpecs -> typSpec
-- On COMMA reduce production actualTypSpecs -> typSpec

State 108:
## Known stack suffix:
## typ
## LR(1) items:
typ -> typ . LBRACK RBRACK [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ . LBRACK RBRACK BANG [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ . AMP [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typ -> typ . STAR [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA AMP ]
typSpec -> typ . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
-- On STAR shift to state 75
-- On LBRACK shift to state 76
-- On AMP shift to state 90
## Reductions:
-- On INSTR_VALUETYPE reduce production typSpec -> typ
-- On INSTR_TYPE reduce production typSpec -> typ
-- On INSTR_TOK reduce production typSpec -> typ
-- On INSTR_STRING reduce production typSpec -> typ
-- On INSTR_SIG reduce production typSpec -> typ
-- On INSTR_R reduce production typSpec -> typ
-- On INSTR_NONE reduce production typSpec -> typ
-- On INSTR_METHOD reduce production typSpec -> typ
-- On INSTR_LOC reduce production typSpec -> typ
-- On INSTR_INT_TYPE reduce production typSpec -> typ
-- On INSTR_I8 reduce production typSpec -> typ
-- On INSTR_I32_I32 reduce production typSpec -> typ
-- On INSTR_I reduce production typSpec -> typ
-- On INSTR_FIELD reduce production typSpec -> typ
-- On INSTR_ARG reduce production typSpec -> typ
-- On GREATER reduce production typSpec -> typ
-- On EOF reduce production typSpec -> typ
-- On DCOLON reduce production typSpec -> typ
-- On COMMA reduce production typSpec -> typ

State 109:
## Known stack suffix:
## className
## LR(1) items:
typeName -> className . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER EOF DCOLON COMMA ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production typeName -> className
-- On INSTR_TYPE reduce production typeName -> className
-- On INSTR_TOK reduce production typeName -> className
-- On INSTR_STRING reduce production typeName -> className
-- On INSTR_SIG reduce production typeName -> className
-- On INSTR_R reduce production typeName -> className
-- On INSTR_NONE reduce production typeName -> className
-- On INSTR_METHOD reduce production typeName -> className
-- On INSTR_LOC reduce production typeName -> className
-- On INSTR_INT_TYPE reduce production typeName -> className
-- On INSTR_I8 reduce production typeName -> className
-- On INSTR_I32_I32 reduce production typeName -> className
-- On INSTR_I reduce production typeName -> className
-- On INSTR_FIELD reduce production typeName -> className
-- On INSTR_ARG reduce production typeName -> className
-- On GREATER reduce production typeName -> className
-- On EOF reduce production typeName -> className
-- On DCOLON reduce production typeName -> className
-- On COMMA reduce production typeName -> className

State 110:
## Known stack suffix:
## LESS actualTypSpecs
## LR(1) items:
actualTypSpecs -> actualTypSpecs . COMMA typSpec [ GREATER COMMA ]
actual_tyargs -> LESS actualTypSpecs . GREATER [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On GREATER shift to state 111
-- On COMMA shift to state 112
## Reductions:

State 111:
## Known stack suffix:
## LESS actualTypSpecs GREATER
## LR(1) items:
actual_tyargs -> LESS actualTypSpecs GREATER . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On VAL_SQSTRING reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On VAL_ID reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On VAL_DOTTEDNAME reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On VALUETYPE reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On VALUE reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On UNSIGNED reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On UINT8 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On UINT64 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On UINT32 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On UINT16 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On TYPEDREF reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On STRING reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On STAR reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On RPAREN reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On OBJECT reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On NATIVE reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On METHOD reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On LPAREN reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On LBRACK reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INT8 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INT64 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INT32 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INT16 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_VALUETYPE reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_TYPE reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_TOK reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_STRING reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_SIG reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_R reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_NONE reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_METHOD reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_LOC reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_INT_TYPE reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_I8 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_I32_I32 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_I reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_FIELD reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On INSTR_ARG reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On GREATER reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On FLOAT64 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On FLOAT32 reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On EOF reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On DOT_CTOR reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On DOT_CCTOR reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On DCOLON reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On COMMA reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On CLASS reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On CHAR reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On BOOL reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On BANG reduce production actual_tyargs -> LESS actualTypSpecs GREATER
-- On AMP reduce production actual_tyargs -> LESS actualTypSpecs GREATER

State 112:
## Known stack suffix:
## actualTypSpecs COMMA
## LR(1) items:
actualTypSpecs -> actualTypSpecs COMMA . typSpec [ GREATER COMMA ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 103
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typeName shift to state 106
-- On typSpec shift to state 113
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 109
## Reductions:

State 113:
## Known stack suffix:
## actualTypSpecs COMMA typSpec
## LR(1) items:
actualTypSpecs -> actualTypSpecs COMMA typSpec . [ GREATER COMMA ]
## Transitions:
## Reductions:
-- On GREATER reduce production actualTypSpecs -> actualTypSpecs COMMA typSpec
-- On COMMA reduce production actualTypSpecs -> actualTypSpecs COMMA typSpec

State 114:
## Known stack suffix:
## className opt_actual_tyargs
## LR(1) items:
typeNameInst -> className opt_actual_tyargs . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production typeNameInst -> className opt_actual_tyargs
-- On VAL_SQSTRING reduce production typeNameInst -> className opt_actual_tyargs
-- On VAL_ID reduce production typeNameInst -> className opt_actual_tyargs
-- On VAL_DOTTEDNAME reduce production typeNameInst -> className opt_actual_tyargs
-- On VALUETYPE reduce production typeNameInst -> className opt_actual_tyargs
-- On VALUE reduce production typeNameInst -> className opt_actual_tyargs
-- On UNSIGNED reduce production typeNameInst -> className opt_actual_tyargs
-- On UINT8 reduce production typeNameInst -> className opt_actual_tyargs
-- On UINT64 reduce production typeNameInst -> className opt_actual_tyargs
-- On UINT32 reduce production typeNameInst -> className opt_actual_tyargs
-- On UINT16 reduce production typeNameInst -> className opt_actual_tyargs
-- On TYPEDREF reduce production typeNameInst -> className opt_actual_tyargs
-- On STRING reduce production typeNameInst -> className opt_actual_tyargs
-- On STAR reduce production typeNameInst -> className opt_actual_tyargs
-- On RPAREN reduce production typeNameInst -> className opt_actual_tyargs
-- On OBJECT reduce production typeNameInst -> className opt_actual_tyargs
-- On NATIVE reduce production typeNameInst -> className opt_actual_tyargs
-- On METHOD reduce production typeNameInst -> className opt_actual_tyargs
-- On LPAREN reduce production typeNameInst -> className opt_actual_tyargs
-- On LBRACK reduce production typeNameInst -> className opt_actual_tyargs
-- On INT8 reduce production typeNameInst -> className opt_actual_tyargs
-- On INT64 reduce production typeNameInst -> className opt_actual_tyargs
-- On INT32 reduce production typeNameInst -> className opt_actual_tyargs
-- On INT16 reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_VALUETYPE reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_TYPE reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_TOK reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_STRING reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_SIG reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_R reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_NONE reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_METHOD reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_LOC reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_INT_TYPE reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_I8 reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_I32_I32 reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_I reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_FIELD reduce production typeNameInst -> className opt_actual_tyargs
-- On INSTR_ARG reduce production typeNameInst -> className opt_actual_tyargs
-- On GREATER reduce production typeNameInst -> className opt_actual_tyargs
-- On FLOAT64 reduce production typeNameInst -> className opt_actual_tyargs
-- On FLOAT32 reduce production typeNameInst -> className opt_actual_tyargs
-- On EOF reduce production typeNameInst -> className opt_actual_tyargs
-- On DOT_CTOR reduce production typeNameInst -> className opt_actual_tyargs
-- On DOT_CCTOR reduce production typeNameInst -> className opt_actual_tyargs
-- On DCOLON reduce production typeNameInst -> className opt_actual_tyargs
-- On COMMA reduce production typeNameInst -> className opt_actual_tyargs
-- On CLASS reduce production typeNameInst -> className opt_actual_tyargs
-- On CHAR reduce production typeNameInst -> className opt_actual_tyargs
-- On BOOL reduce production typeNameInst -> className opt_actual_tyargs
-- On BANG reduce production typeNameInst -> className opt_actual_tyargs
-- On AMP reduce production typeNameInst -> className opt_actual_tyargs

State 115:
## Known stack suffix:
## actual_tyargs
## LR(1) items:
opt_actual_tyargs -> actual_tyargs . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR RPAREN OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG GREATER FLOAT64 FLOAT32 EOF DOT_CTOR DOT_CCTOR DCOLON COMMA CLASS CHAR BOOL BANG AMP ]
## Transitions:
## Reductions:
-- On VOID reduce production opt_actual_tyargs -> actual_tyargs
-- On VAL_SQSTRING reduce production opt_actual_tyargs -> actual_tyargs
-- On VAL_ID reduce production opt_actual_tyargs -> actual_tyargs
-- On VAL_DOTTEDNAME reduce production opt_actual_tyargs -> actual_tyargs
-- On VALUETYPE reduce production opt_actual_tyargs -> actual_tyargs
-- On VALUE reduce production opt_actual_tyargs -> actual_tyargs
-- On UNSIGNED reduce production opt_actual_tyargs -> actual_tyargs
-- On UINT8 reduce production opt_actual_tyargs -> actual_tyargs
-- On UINT64 reduce production opt_actual_tyargs -> actual_tyargs
-- On UINT32 reduce production opt_actual_tyargs -> actual_tyargs
-- On UINT16 reduce production opt_actual_tyargs -> actual_tyargs
-- On TYPEDREF reduce production opt_actual_tyargs -> actual_tyargs
-- On STRING reduce production opt_actual_tyargs -> actual_tyargs
-- On STAR reduce production opt_actual_tyargs -> actual_tyargs
-- On RPAREN reduce production opt_actual_tyargs -> actual_tyargs
-- On OBJECT reduce production opt_actual_tyargs -> actual_tyargs
-- On NATIVE reduce production opt_actual_tyargs -> actual_tyargs
-- On METHOD reduce production opt_actual_tyargs -> actual_tyargs
-- On LPAREN reduce production opt_actual_tyargs -> actual_tyargs
-- On LBRACK reduce production opt_actual_tyargs -> actual_tyargs
-- On INT8 reduce production opt_actual_tyargs -> actual_tyargs
-- On INT64 reduce production opt_actual_tyargs -> actual_tyargs
-- On INT32 reduce production opt_actual_tyargs -> actual_tyargs
-- On INT16 reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_VALUETYPE reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_TYPE reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_TOK reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_STRING reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_SIG reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_R reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_NONE reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_METHOD reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_LOC reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_INT_TYPE reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_I8 reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_I32_I32 reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_I reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_FIELD reduce production opt_actual_tyargs -> actual_tyargs
-- On INSTR_ARG reduce production opt_actual_tyargs -> actual_tyargs
-- On GREATER reduce production opt_actual_tyargs -> actual_tyargs
-- On FLOAT64 reduce production opt_actual_tyargs -> actual_tyargs
-- On FLOAT32 reduce production opt_actual_tyargs -> actual_tyargs
-- On EOF reduce production opt_actual_tyargs -> actual_tyargs
-- On DOT_CTOR reduce production opt_actual_tyargs -> actual_tyargs
-- On DOT_CCTOR reduce production opt_actual_tyargs -> actual_tyargs
-- On DCOLON reduce production opt_actual_tyargs -> actual_tyargs
-- On COMMA reduce production opt_actual_tyargs -> actual_tyargs
-- On CLASS reduce production opt_actual_tyargs -> actual_tyargs
-- On CHAR reduce production opt_actual_tyargs -> actual_tyargs
-- On BOOL reduce production opt_actual_tyargs -> actual_tyargs
-- On BANG reduce production opt_actual_tyargs -> actual_tyargs
-- On AMP reduce production opt_actual_tyargs -> actual_tyargs

State 116:
## Known stack suffix:
## INSTR_VALUETYPE typSpec
## LR(1) items:
instr -> INSTR_VALUETYPE typSpec . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_TYPE reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_TOK reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_STRING reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_SIG reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_R reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_NONE reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_METHOD reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_LOC reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_INT_TYPE reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_I8 reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_I32_I32 reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_I reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_FIELD reduce production instr -> INSTR_VALUETYPE typSpec
-- On INSTR_ARG reduce production instr -> INSTR_VALUETYPE typSpec
-- On EOF reduce production instr -> INSTR_VALUETYPE typSpec

State 117:
## Known stack suffix:
## INSTR_TYPE
## LR(1) items:
instr -> INSTR_TYPE . typSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 103
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typeName shift to state 106
-- On typSpec shift to state 118
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 109
## Reductions:

State 118:
## Known stack suffix:
## INSTR_TYPE typSpec
## LR(1) items:
instr -> INSTR_TYPE typSpec . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_TYPE reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_TOK reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_STRING reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_SIG reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_R reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_NONE reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_METHOD reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_LOC reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_INT_TYPE reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_I8 reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_I32_I32 reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_I reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_FIELD reduce production instr -> INSTR_TYPE typSpec
-- On INSTR_ARG reduce production instr -> INSTR_TYPE typSpec
-- On EOF reduce production instr -> INSTR_TYPE typSpec

State 119:
## Known stack suffix:
## INSTR_TOK
## LR(1) items:
instr -> INSTR_TOK . typSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
instr -> INSTR_TOK . METHOD methodSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
instr -> INSTR_TOK . FIELD fieldSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 120
-- On LPAREN shift to state 100
-- On LBRACK shift to state 103
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On FIELD shift to state 143
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typeName shift to state 106
-- On typSpec shift to state 150
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 109
## Reductions:

State 120:
## Known stack suffix:
## INSTR_TOK METHOD
## LR(1) items:
instr -> INSTR_TOK METHOD . methodSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
typ -> METHOD . callConv typ STAR LPAREN sigArgs0 RPAREN [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF AMP ]
## Transitions:
-- On VARARG shift to state 42
-- On UNMANAGED shift to state 43
-- On INSTANCE shift to state 48
-- On EXPLICIT shift to state 51
-- On DEFAULT shift to state 49
-- On methodSpecMaybeArrayMethod shift to state 121
-- On methodSpec shift to state 122
-- On callKind shift to state 53
-- On callConv shift to state 123
## Reductions:
-- On VOID reduce production callKind ->
-- On VALUETYPE reduce production callKind ->
-- On VALUE reduce production callKind ->
-- On UNSIGNED reduce production callKind ->
-- On UINT8 reduce production callKind ->
-- On UINT64 reduce production callKind ->
-- On UINT32 reduce production callKind ->
-- On UINT16 reduce production callKind ->
-- On TYPEDREF reduce production callKind ->
-- On STRING reduce production callKind ->
-- On OBJECT reduce production callKind ->
-- On NATIVE reduce production callKind ->
-- On METHOD reduce production callKind ->
-- On INT8 reduce production callKind ->
-- On INT64 reduce production callKind ->
-- On INT32 reduce production callKind ->
-- On INT16 reduce production callKind ->
-- On FLOAT64 reduce production callKind ->
-- On FLOAT32 reduce production callKind ->
-- On CLASS reduce production callKind ->
-- On CHAR reduce production callKind ->
-- On BOOL reduce production callKind ->
-- On BANG reduce production callKind ->

State 121:
## Known stack suffix:
## methodSpecMaybeArrayMethod
## LR(1) items:
methodSpec -> methodSpecMaybeArrayMethod . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_TYPE reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_TOK reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_STRING reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_SIG reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_R reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_NONE reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_METHOD reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_LOC reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_INT_TYPE reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_I8 reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_I32_I32 reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_I reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_FIELD reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On INSTR_ARG reduce production methodSpec -> methodSpecMaybeArrayMethod
-- On EOF reduce production methodSpec -> methodSpecMaybeArrayMethod

State 122:
## Known stack suffix:
## INSTR_TOK METHOD methodSpec
## LR(1) items:
instr -> INSTR_TOK METHOD methodSpec . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_TYPE reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_TOK reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_STRING reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_SIG reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_R reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_NONE reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_METHOD reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_LOC reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_INT_TYPE reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_I8 reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_I32_I32 reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_I reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_FIELD reduce production instr -> INSTR_TOK METHOD methodSpec
-- On INSTR_ARG reduce production instr -> INSTR_TOK METHOD methodSpec
-- On EOF reduce production instr -> INSTR_TOK METHOD methodSpec

State 123:
## Known stack suffix:
## METHOD callConv
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv . typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
methodSpecMaybeArrayMethod -> callConv . typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
typ -> METHOD callConv . typ STAR LPAREN sigArgs0 RPAREN [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF AMP ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## METHOD callConv typ
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ . typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
methodSpecMaybeArrayMethod -> callConv typ . methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
typ -> typ . LBRACK RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . AMP [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . STAR [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> METHOD callConv typ . STAR LPAREN sigArgs0 RPAREN [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF AMP ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On STAR shift to state 125
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 126
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On DOT_CTOR shift to state 127
-- On DOT_CCTOR shift to state 128
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On AMP shift to state 90
-- On typeName shift to state 106
-- On typSpec shift to state 129
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 137
-- On methodName shift to state 138
-- On id shift to state 14
-- On className shift to state 109
## Reductions:

State 125:
## Known stack suffix:
## METHOD callConv typ STAR
## LR(1) items:
typ -> typ STAR . [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> METHOD callConv typ STAR . LPAREN sigArgs0 RPAREN [ STAR LBRACK INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF AMP ]
## Transitions:
-- On LPAREN shift to state 72
## Reductions:
-- On VOID reduce production typ -> typ STAR
-- On VAL_SQSTRING reduce production typ -> typ STAR
-- On VAL_ID reduce production typ -> typ STAR
-- On VAL_DOTTEDNAME reduce production typ -> typ STAR
-- On VALUETYPE reduce production typ -> typ STAR
-- On VALUE reduce production typ -> typ STAR
-- On UNSIGNED reduce production typ -> typ STAR
-- On UINT8 reduce production typ -> typ STAR
-- On UINT64 reduce production typ -> typ STAR
-- On UINT32 reduce production typ -> typ STAR
-- On UINT16 reduce production typ -> typ STAR
-- On TYPEDREF reduce production typ -> typ STAR
-- On STRING reduce production typ -> typ STAR
-- On STAR reduce production typ -> typ STAR
-- On OBJECT reduce production typ -> typ STAR
-- On NATIVE reduce production typ -> typ STAR
-- On METHOD reduce production typ -> typ STAR
-- On LBRACK reduce production typ -> typ STAR
-- On INT8 reduce production typ -> typ STAR
-- On INT64 reduce production typ -> typ STAR
-- On INT32 reduce production typ -> typ STAR
-- On INT16 reduce production typ -> typ STAR
-- On FLOAT64 reduce production typ -> typ STAR
-- On FLOAT32 reduce production typ -> typ STAR
-- On DOT_CTOR reduce production typ -> typ STAR
-- On DOT_CCTOR reduce production typ -> typ STAR
-- On CLASS reduce production typ -> typ STAR
-- On CHAR reduce production typ -> typ STAR
-- On BOOL reduce production typ -> typ STAR
-- On BANG reduce production typ -> typ STAR
-- On AMP reduce production typ -> typ STAR

State 126:
## Known stack suffix:
## typ LBRACK
## LR(1) items:
className -> LBRACK . name1 RBRACK slashedName [ DCOLON ]
typ -> typ LBRACK . RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ LBRACK . bounds1 RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ LBRACK . RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ LBRACK . bounds1 RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typeName -> LBRACK . name1 RBRACK [ DCOLON ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_INT64 shift to state 66
-- On VAL_INT32_ELIPSES shift to state 77
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On RBRACK shift to state 79
-- On name1 shift to state 104
-- On int32 shift to state 81
-- On id shift to state 14
-- On bounds1 shift to state 84
-- On bound shift to state 89
## Reductions:
-- On COMMA reduce production bound ->

State 127:
## Known stack suffix:
## DOT_CTOR
## LR(1) items:
methodName -> DOT_CTOR . [ LPAREN LESS ]
## Transitions:
## Reductions:
-- On LPAREN reduce production methodName -> DOT_CTOR
-- On LESS reduce production methodName -> DOT_CTOR

State 128:
## Known stack suffix:
## DOT_CCTOR
## LR(1) items:
methodName -> DOT_CCTOR . [ LPAREN LESS ]
## Transitions:
## Reductions:
-- On LPAREN reduce production methodName -> DOT_CCTOR
-- On LESS reduce production methodName -> DOT_CCTOR

State 129:
## Known stack suffix:
## callConv typ typSpec
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ typSpec . DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On DCOLON shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## callConv typ typSpec DCOLON
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON . methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On DOT_CTOR shift to state 127
-- On DOT_CCTOR shift to state 128
-- On name1 shift to state 131
-- On methodName shift to state 132
-- On id shift to state 14
## Reductions:

State 131:
## Known stack suffix:
## name1
## LR(1) items:
methodName -> name1 . [ LPAREN LESS ]
name1 -> name1 . DOT id [ LPAREN LESS DOT ]
## Transitions:
-- On DOT shift to state 15
## Reductions:
-- On LPAREN reduce production methodName -> name1
-- On LESS reduce production methodName -> name1

State 132:
## Known stack suffix:
## callConv typ typSpec DCOLON methodName
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName . opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On LESS shift to state 20
-- On opt_actual_tyargs shift to state 133
-- On actual_tyargs shift to state 115
## Reductions:
-- On LPAREN reduce production opt_actual_tyargs ->

State 133:
## Known stack suffix:
## callConv typ typSpec DCOLON methodName opt_actual_tyargs
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs . LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On LPAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN . sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On ELIPSES shift to state 73
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 74
-- On sigArgs1a shift to state 93
-- On sigArgs1 shift to state 96
-- On sigArgs0 shift to state 135
-- On sigArg shift to state 99
## Reductions:
-- On RPAREN reduce production sigArgs0 ->

State 135:
## Known stack suffix:
## callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 . RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On RPAREN shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_TYPE reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_TOK reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_STRING reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_SIG reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_R reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_NONE reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_METHOD reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_LOC reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_INT_TYPE reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_I8 reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_I32_I32 reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_I reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_FIELD reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_ARG reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On EOF reduce production methodSpecMaybeArrayMethod -> callConv typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN

State 137:
## Known stack suffix:
## name1
## LR(1) items:
methodName -> name1 . [ LPAREN LESS ]
name1 -> name1 . DOT id [ SLASH LPAREN LESS DOT DCOLON ]
slashedName -> name1 . [ DCOLON ]
slashedName -> name1 . SLASH slashedName [ DCOLON ]
## Transitions:
-- On SLASH shift to state 12
-- On DOT shift to state 15
## Reductions:
-- On LPAREN reduce production methodName -> name1
-- On LESS reduce production methodName -> name1
-- On DCOLON reduce production slashedName -> name1

State 138:
## Known stack suffix:
## callConv typ methodName
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ methodName . opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On LESS shift to state 20
-- On opt_actual_tyargs shift to state 139
-- On actual_tyargs shift to state 115
## Reductions:
-- On LPAREN reduce production opt_actual_tyargs ->

State 139:
## Known stack suffix:
## callConv typ methodName opt_actual_tyargs
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs . LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On LPAREN shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## callConv typ methodName opt_actual_tyargs LPAREN
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN . sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On ELIPSES shift to state 73
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 74
-- On sigArgs1a shift to state 93
-- On sigArgs1 shift to state 96
-- On sigArgs0 shift to state 141
-- On sigArg shift to state 99
## Reductions:
-- On RPAREN reduce production sigArgs0 ->

State 141:
## Known stack suffix:
## callConv typ methodName opt_actual_tyargs LPAREN sigArgs0
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 . RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On RPAREN shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_TYPE reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_TOK reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_STRING reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_SIG reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_R reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_NONE reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_METHOD reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_LOC reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_INT_TYPE reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_I8 reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_I32_I32 reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_I reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_FIELD reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On INSTR_ARG reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN
-- On EOF reduce production methodSpecMaybeArrayMethod -> callConv typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN

State 143:
## Known stack suffix:
## INSTR_TOK FIELD
## LR(1) items:
instr -> INSTR_TOK FIELD . fieldSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 144
-- On fieldSpec shift to state 149
## Reductions:

State 144:
## Known stack suffix:
## typ
## LR(1) items:
fieldSpec -> typ . typSpec DCOLON id [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
fieldSpec -> typ . id [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
typ -> typ . LBRACK RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG AMP ]
typ -> typ . AMP [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG AMP ]
typ -> typ . STAR [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On STAR shift to state 75
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 126
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On AMP shift to state 90
-- On typeName shift to state 106
-- On typSpec shift to state 145
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 148
-- On className shift to state 109
## Reductions:

State 145:
## Known stack suffix:
## typ typSpec
## LR(1) items:
fieldSpec -> typ typSpec . DCOLON id [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On DCOLON shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## typ typSpec DCOLON
## LR(1) items:
fieldSpec -> typ typSpec DCOLON . id [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On id shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## typ typSpec DCOLON id
## LR(1) items:
fieldSpec -> typ typSpec DCOLON id . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_TYPE reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_TOK reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_STRING reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_SIG reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_R reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_NONE reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_METHOD reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_LOC reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_INT_TYPE reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_I8 reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_I32_I32 reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_I reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_FIELD reduce production fieldSpec -> typ typSpec DCOLON id
-- On INSTR_ARG reduce production fieldSpec -> typ typSpec DCOLON id
-- On EOF reduce production fieldSpec -> typ typSpec DCOLON id

State 148:
## Known stack suffix:
## typ id
## LR(1) items:
fieldSpec -> typ id . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
name1 -> id . [ SLASH DOT DCOLON ]
## Transitions:
## Reductions:
-- On SLASH reduce production name1 -> id
-- On INSTR_VALUETYPE reduce production fieldSpec -> typ id
-- On INSTR_TYPE reduce production fieldSpec -> typ id
-- On INSTR_TOK reduce production fieldSpec -> typ id
-- On INSTR_STRING reduce production fieldSpec -> typ id
-- On INSTR_SIG reduce production fieldSpec -> typ id
-- On INSTR_R reduce production fieldSpec -> typ id
-- On INSTR_NONE reduce production fieldSpec -> typ id
-- On INSTR_METHOD reduce production fieldSpec -> typ id
-- On INSTR_LOC reduce production fieldSpec -> typ id
-- On INSTR_INT_TYPE reduce production fieldSpec -> typ id
-- On INSTR_I8 reduce production fieldSpec -> typ id
-- On INSTR_I32_I32 reduce production fieldSpec -> typ id
-- On INSTR_I reduce production fieldSpec -> typ id
-- On INSTR_FIELD reduce production fieldSpec -> typ id
-- On INSTR_ARG reduce production fieldSpec -> typ id
-- On EOF reduce production fieldSpec -> typ id
-- On DOT reduce production name1 -> id
-- On DCOLON reduce production name1 -> id

State 149:
## Known stack suffix:
## INSTR_TOK FIELD fieldSpec
## LR(1) items:
instr -> INSTR_TOK FIELD fieldSpec . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_TYPE reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_TOK reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_STRING reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_SIG reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_R reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_NONE reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_METHOD reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_LOC reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_INT_TYPE reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_I8 reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_I32_I32 reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_I reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_FIELD reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On INSTR_ARG reduce production instr -> INSTR_TOK FIELD fieldSpec
-- On EOF reduce production instr -> INSTR_TOK FIELD fieldSpec

State 150:
## Known stack suffix:
## INSTR_TOK typSpec
## LR(1) items:
instr -> INSTR_TOK typSpec . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_TOK typSpec
-- On INSTR_TYPE reduce production instr -> INSTR_TOK typSpec
-- On INSTR_TOK reduce production instr -> INSTR_TOK typSpec
-- On INSTR_STRING reduce production instr -> INSTR_TOK typSpec
-- On INSTR_SIG reduce production instr -> INSTR_TOK typSpec
-- On INSTR_R reduce production instr -> INSTR_TOK typSpec
-- On INSTR_NONE reduce production instr -> INSTR_TOK typSpec
-- On INSTR_METHOD reduce production instr -> INSTR_TOK typSpec
-- On INSTR_LOC reduce production instr -> INSTR_TOK typSpec
-- On INSTR_INT_TYPE reduce production instr -> INSTR_TOK typSpec
-- On INSTR_I8 reduce production instr -> INSTR_TOK typSpec
-- On INSTR_I32_I32 reduce production instr -> INSTR_TOK typSpec
-- On INSTR_I reduce production instr -> INSTR_TOK typSpec
-- On INSTR_FIELD reduce production instr -> INSTR_TOK typSpec
-- On INSTR_ARG reduce production instr -> INSTR_TOK typSpec
-- On EOF reduce production instr -> INSTR_TOK typSpec

State 151:
## Known stack suffix:
## INSTR_STRING
## LR(1) items:
instr -> INSTR_STRING . compQstring [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
instr -> INSTR_STRING . bytearrayhead bytes RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_QSTRING shift to state 152
-- On BYTEARRAY shift to state 153
-- On compQstring shift to state 155
-- On bytearrayhead shift to state 158
## Reductions:

State 152:
## Known stack suffix:
## VAL_QSTRING
## LR(1) items:
compQstring -> VAL_QSTRING . [ PLUS INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On PLUS reduce production compQstring -> VAL_QSTRING
-- On INSTR_VALUETYPE reduce production compQstring -> VAL_QSTRING
-- On INSTR_TYPE reduce production compQstring -> VAL_QSTRING
-- On INSTR_TOK reduce production compQstring -> VAL_QSTRING
-- On INSTR_STRING reduce production compQstring -> VAL_QSTRING
-- On INSTR_SIG reduce production compQstring -> VAL_QSTRING
-- On INSTR_R reduce production compQstring -> VAL_QSTRING
-- On INSTR_NONE reduce production compQstring -> VAL_QSTRING
-- On INSTR_METHOD reduce production compQstring -> VAL_QSTRING
-- On INSTR_LOC reduce production compQstring -> VAL_QSTRING
-- On INSTR_INT_TYPE reduce production compQstring -> VAL_QSTRING
-- On INSTR_I8 reduce production compQstring -> VAL_QSTRING
-- On INSTR_I32_I32 reduce production compQstring -> VAL_QSTRING
-- On INSTR_I reduce production compQstring -> VAL_QSTRING
-- On INSTR_FIELD reduce production compQstring -> VAL_QSTRING
-- On INSTR_ARG reduce production compQstring -> VAL_QSTRING
-- On EOF reduce production compQstring -> VAL_QSTRING

State 153:
## Known stack suffix:
## BYTEARRAY
## LR(1) items:
bytearrayhead -> BYTEARRAY . LPAREN [ VAL_HEXBYTE RPAREN ]
## Transitions:
-- On LPAREN shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## BYTEARRAY LPAREN
## LR(1) items:
bytearrayhead -> BYTEARRAY LPAREN . [ VAL_HEXBYTE RPAREN ]
## Transitions:
## Reductions:
-- On VAL_HEXBYTE reduce production bytearrayhead -> BYTEARRAY LPAREN
-- On RPAREN reduce production bytearrayhead -> BYTEARRAY LPAREN

State 155:
## Known stack suffix:
## INSTR_STRING compQstring
## LR(1) items:
compQstring -> compQstring . PLUS VAL_QSTRING [ PLUS INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
instr -> INSTR_STRING compQstring . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On PLUS shift to state 156
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_STRING compQstring
-- On INSTR_TYPE reduce production instr -> INSTR_STRING compQstring
-- On INSTR_TOK reduce production instr -> INSTR_STRING compQstring
-- On INSTR_STRING reduce production instr -> INSTR_STRING compQstring
-- On INSTR_SIG reduce production instr -> INSTR_STRING compQstring
-- On INSTR_R reduce production instr -> INSTR_STRING compQstring
-- On INSTR_NONE reduce production instr -> INSTR_STRING compQstring
-- On INSTR_METHOD reduce production instr -> INSTR_STRING compQstring
-- On INSTR_LOC reduce production instr -> INSTR_STRING compQstring
-- On INSTR_INT_TYPE reduce production instr -> INSTR_STRING compQstring
-- On INSTR_I8 reduce production instr -> INSTR_STRING compQstring
-- On INSTR_I32_I32 reduce production instr -> INSTR_STRING compQstring
-- On INSTR_I reduce production instr -> INSTR_STRING compQstring
-- On INSTR_FIELD reduce production instr -> INSTR_STRING compQstring
-- On INSTR_ARG reduce production instr -> INSTR_STRING compQstring
-- On EOF reduce production instr -> INSTR_STRING compQstring

State 156:
## Known stack suffix:
## compQstring PLUS
## LR(1) items:
compQstring -> compQstring PLUS . VAL_QSTRING [ PLUS INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_QSTRING shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## compQstring PLUS VAL_QSTRING
## LR(1) items:
compQstring -> compQstring PLUS VAL_QSTRING . [ PLUS INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On PLUS reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_VALUETYPE reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_TYPE reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_TOK reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_STRING reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_SIG reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_R reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_NONE reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_METHOD reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_LOC reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_INT_TYPE reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_I8 reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_I32_I32 reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_I reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_FIELD reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On INSTR_ARG reduce production compQstring -> compQstring PLUS VAL_QSTRING
-- On EOF reduce production compQstring -> compQstring PLUS VAL_QSTRING

State 158:
## Known stack suffix:
## INSTR_STRING bytearrayhead
## LR(1) items:
instr -> INSTR_STRING bytearrayhead . bytes RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_HEXBYTE shift to state 159
-- On bytes_aux shift to state 160
-- On bytes shift to state 162
## Reductions:
-- On RPAREN reduce production bytes ->

State 159:
## Known stack suffix:
## VAL_HEXBYTE
## LR(1) items:
bytes_aux -> VAL_HEXBYTE . [ VAL_HEXBYTE RPAREN ]
## Transitions:
## Reductions:
-- On VAL_HEXBYTE reduce production bytes_aux -> VAL_HEXBYTE
-- On RPAREN reduce production bytes_aux -> VAL_HEXBYTE

State 160:
## Known stack suffix:
## bytes_aux
## LR(1) items:
bytes -> bytes_aux . [ RPAREN ]
bytes_aux -> bytes_aux . VAL_HEXBYTE [ VAL_HEXBYTE RPAREN ]
## Transitions:
-- On VAL_HEXBYTE shift to state 161
## Reductions:
-- On RPAREN reduce production bytes -> bytes_aux

State 161:
## Known stack suffix:
## bytes_aux VAL_HEXBYTE
## LR(1) items:
bytes_aux -> bytes_aux VAL_HEXBYTE . [ VAL_HEXBYTE RPAREN ]
## Transitions:
## Reductions:
-- On VAL_HEXBYTE reduce production bytes_aux -> bytes_aux VAL_HEXBYTE
-- On RPAREN reduce production bytes_aux -> bytes_aux VAL_HEXBYTE

State 162:
## Known stack suffix:
## INSTR_STRING bytearrayhead bytes
## LR(1) items:
instr -> INSTR_STRING bytearrayhead bytes . RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On RPAREN shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## INSTR_STRING bytearrayhead bytes RPAREN
## LR(1) items:
instr -> INSTR_STRING bytearrayhead bytes RPAREN . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_TYPE reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_TOK reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_STRING reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_SIG reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_R reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_NONE reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_METHOD reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_LOC reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_INT_TYPE reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_I8 reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_I32_I32 reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_I reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_FIELD reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On INSTR_ARG reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN
-- On EOF reduce production instr -> INSTR_STRING bytearrayhead bytes RPAREN

State 164:
## Known stack suffix:
## INSTR_SIG
## LR(1) items:
instr -> INSTR_SIG . callConv typ LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VARARG shift to state 42
-- On UNMANAGED shift to state 43
-- On INSTANCE shift to state 48
-- On EXPLICIT shift to state 51
-- On DEFAULT shift to state 49
-- On callKind shift to state 53
-- On callConv shift to state 165
## Reductions:
-- On VOID reduce production callKind ->
-- On VALUETYPE reduce production callKind ->
-- On VALUE reduce production callKind ->
-- On UNSIGNED reduce production callKind ->
-- On UINT8 reduce production callKind ->
-- On UINT64 reduce production callKind ->
-- On UINT32 reduce production callKind ->
-- On UINT16 reduce production callKind ->
-- On TYPEDREF reduce production callKind ->
-- On STRING reduce production callKind ->
-- On OBJECT reduce production callKind ->
-- On NATIVE reduce production callKind ->
-- On METHOD reduce production callKind ->
-- On INT8 reduce production callKind ->
-- On INT64 reduce production callKind ->
-- On INT32 reduce production callKind ->
-- On INT16 reduce production callKind ->
-- On FLOAT64 reduce production callKind ->
-- On FLOAT32 reduce production callKind ->
-- On CLASS reduce production callKind ->
-- On CHAR reduce production callKind ->
-- On BOOL reduce production callKind ->
-- On BANG reduce production callKind ->

State 165:
## Known stack suffix:
## INSTR_SIG callConv
## LR(1) items:
instr -> INSTR_SIG callConv . typ LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## INSTR_SIG callConv typ
## LR(1) items:
instr -> INSTR_SIG callConv typ . LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
typ -> typ . LBRACK RBRACK [ STAR LPAREN LBRACK AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ STAR LPAREN LBRACK AMP ]
typ -> typ . LBRACK RBRACK BANG [ STAR LPAREN LBRACK AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ STAR LPAREN LBRACK AMP ]
typ -> typ . AMP [ STAR LPAREN LBRACK AMP ]
typ -> typ . STAR [ STAR LPAREN LBRACK AMP ]
## Transitions:
-- On STAR shift to state 75
-- On LPAREN shift to state 167
-- On LBRACK shift to state 76
-- On AMP shift to state 90
## Reductions:

State 167:
## Known stack suffix:
## INSTR_SIG callConv typ LPAREN
## LR(1) items:
instr -> INSTR_SIG callConv typ LPAREN . sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On ELIPSES shift to state 73
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 74
-- On sigArgs1a shift to state 93
-- On sigArgs1 shift to state 96
-- On sigArgs0 shift to state 168
-- On sigArg shift to state 99
## Reductions:
-- On RPAREN reduce production sigArgs0 ->

State 168:
## Known stack suffix:
## INSTR_SIG callConv typ LPAREN sigArgs0
## LR(1) items:
instr -> INSTR_SIG callConv typ LPAREN sigArgs0 . RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On RPAREN shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
## LR(1) items:
instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_TYPE reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_TOK reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_STRING reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_SIG reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_R reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_NONE reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_METHOD reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_LOC reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_INT_TYPE reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_I8 reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_I32_I32 reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_I reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_FIELD reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On INSTR_ARG reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN
-- On EOF reduce production instr -> INSTR_SIG callConv typ LPAREN sigArgs0 RPAREN

State 170:
## Known stack suffix:
## INSTR_R
## LR(1) items:
instr -> INSTR_R . float64 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
instr -> INSTR_R . int64 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
instr_r_head -> INSTR_R . LPAREN [ VAL_HEXBYTE RPAREN ]
## Transitions:
-- On VAL_INT64 shift to state 171
-- On VAL_FLOAT64 shift to state 172
-- On LPAREN shift to state 173
-- On FLOAT64 shift to state 174
-- On int64 shift to state 178
-- On float64 shift to state 179
## Reductions:

State 171:
## Known stack suffix:
## VAL_INT64
## LR(1) items:
int64 -> VAL_INT64 . [ RPAREN INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On RPAREN reduce production int64 -> VAL_INT64
-- On INSTR_VALUETYPE reduce production int64 -> VAL_INT64
-- On INSTR_TYPE reduce production int64 -> VAL_INT64
-- On INSTR_TOK reduce production int64 -> VAL_INT64
-- On INSTR_STRING reduce production int64 -> VAL_INT64
-- On INSTR_SIG reduce production int64 -> VAL_INT64
-- On INSTR_R reduce production int64 -> VAL_INT64
-- On INSTR_NONE reduce production int64 -> VAL_INT64
-- On INSTR_METHOD reduce production int64 -> VAL_INT64
-- On INSTR_LOC reduce production int64 -> VAL_INT64
-- On INSTR_INT_TYPE reduce production int64 -> VAL_INT64
-- On INSTR_I8 reduce production int64 -> VAL_INT64
-- On INSTR_I32_I32 reduce production int64 -> VAL_INT64
-- On INSTR_I reduce production int64 -> VAL_INT64
-- On INSTR_FIELD reduce production int64 -> VAL_INT64
-- On INSTR_ARG reduce production int64 -> VAL_INT64
-- On EOF reduce production int64 -> VAL_INT64

State 172:
## Known stack suffix:
## VAL_FLOAT64
## LR(1) items:
float64 -> VAL_FLOAT64 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production float64 -> VAL_FLOAT64
-- On INSTR_TYPE reduce production float64 -> VAL_FLOAT64
-- On INSTR_TOK reduce production float64 -> VAL_FLOAT64
-- On INSTR_STRING reduce production float64 -> VAL_FLOAT64
-- On INSTR_SIG reduce production float64 -> VAL_FLOAT64
-- On INSTR_R reduce production float64 -> VAL_FLOAT64
-- On INSTR_NONE reduce production float64 -> VAL_FLOAT64
-- On INSTR_METHOD reduce production float64 -> VAL_FLOAT64
-- On INSTR_LOC reduce production float64 -> VAL_FLOAT64
-- On INSTR_INT_TYPE reduce production float64 -> VAL_FLOAT64
-- On INSTR_I8 reduce production float64 -> VAL_FLOAT64
-- On INSTR_I32_I32 reduce production float64 -> VAL_FLOAT64
-- On INSTR_I reduce production float64 -> VAL_FLOAT64
-- On INSTR_FIELD reduce production float64 -> VAL_FLOAT64
-- On INSTR_ARG reduce production float64 -> VAL_FLOAT64
-- On EOF reduce production float64 -> VAL_FLOAT64

State 173:
## Known stack suffix:
## INSTR_R LPAREN
## LR(1) items:
instr_r_head -> INSTR_R LPAREN . [ VAL_HEXBYTE RPAREN ]
## Transitions:
## Reductions:
-- On VAL_HEXBYTE reduce production instr_r_head -> INSTR_R LPAREN
-- On RPAREN reduce production instr_r_head -> INSTR_R LPAREN

State 174:
## Known stack suffix:
## FLOAT64
## LR(1) items:
float64 -> FLOAT64 . LPAREN int64 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On LPAREN shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## FLOAT64 LPAREN
## LR(1) items:
float64 -> FLOAT64 LPAREN . int64 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 171
-- On int64 shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## FLOAT64 LPAREN int64
## LR(1) items:
float64 -> FLOAT64 LPAREN int64 . RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On RPAREN shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## FLOAT64 LPAREN int64 RPAREN
## LR(1) items:
float64 -> FLOAT64 LPAREN int64 RPAREN . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_TYPE reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_TOK reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_STRING reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_SIG reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_R reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_NONE reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_METHOD reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_LOC reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_INT_TYPE reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_I8 reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_I32_I32 reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_I reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_FIELD reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On INSTR_ARG reduce production float64 -> FLOAT64 LPAREN int64 RPAREN
-- On EOF reduce production float64 -> FLOAT64 LPAREN int64 RPAREN

State 178:
## Known stack suffix:
## INSTR_R int64
## LR(1) items:
instr -> INSTR_R int64 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_R int64
-- On INSTR_TYPE reduce production instr -> INSTR_R int64
-- On INSTR_TOK reduce production instr -> INSTR_R int64
-- On INSTR_STRING reduce production instr -> INSTR_R int64
-- On INSTR_SIG reduce production instr -> INSTR_R int64
-- On INSTR_R reduce production instr -> INSTR_R int64
-- On INSTR_NONE reduce production instr -> INSTR_R int64
-- On INSTR_METHOD reduce production instr -> INSTR_R int64
-- On INSTR_LOC reduce production instr -> INSTR_R int64
-- On INSTR_INT_TYPE reduce production instr -> INSTR_R int64
-- On INSTR_I8 reduce production instr -> INSTR_R int64
-- On INSTR_I32_I32 reduce production instr -> INSTR_R int64
-- On INSTR_I reduce production instr -> INSTR_R int64
-- On INSTR_FIELD reduce production instr -> INSTR_R int64
-- On INSTR_ARG reduce production instr -> INSTR_R int64
-- On EOF reduce production instr -> INSTR_R int64

State 179:
## Known stack suffix:
## INSTR_R float64
## LR(1) items:
instr -> INSTR_R float64 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_R float64
-- On INSTR_TYPE reduce production instr -> INSTR_R float64
-- On INSTR_TOK reduce production instr -> INSTR_R float64
-- On INSTR_STRING reduce production instr -> INSTR_R float64
-- On INSTR_SIG reduce production instr -> INSTR_R float64
-- On INSTR_R reduce production instr -> INSTR_R float64
-- On INSTR_NONE reduce production instr -> INSTR_R float64
-- On INSTR_METHOD reduce production instr -> INSTR_R float64
-- On INSTR_LOC reduce production instr -> INSTR_R float64
-- On INSTR_INT_TYPE reduce production instr -> INSTR_R float64
-- On INSTR_I8 reduce production instr -> INSTR_R float64
-- On INSTR_I32_I32 reduce production instr -> INSTR_R float64
-- On INSTR_I reduce production instr -> INSTR_R float64
-- On INSTR_FIELD reduce production instr -> INSTR_R float64
-- On INSTR_ARG reduce production instr -> INSTR_R float64
-- On EOF reduce production instr -> INSTR_R float64

State 180:
## Known stack suffix:
## INSTR_NONE
## LR(1) items:
instr -> INSTR_NONE . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_NONE
-- On INSTR_TYPE reduce production instr -> INSTR_NONE
-- On INSTR_TOK reduce production instr -> INSTR_NONE
-- On INSTR_STRING reduce production instr -> INSTR_NONE
-- On INSTR_SIG reduce production instr -> INSTR_NONE
-- On INSTR_R reduce production instr -> INSTR_NONE
-- On INSTR_NONE reduce production instr -> INSTR_NONE
-- On INSTR_METHOD reduce production instr -> INSTR_NONE
-- On INSTR_LOC reduce production instr -> INSTR_NONE
-- On INSTR_INT_TYPE reduce production instr -> INSTR_NONE
-- On INSTR_I8 reduce production instr -> INSTR_NONE
-- On INSTR_I32_I32 reduce production instr -> INSTR_NONE
-- On INSTR_I reduce production instr -> INSTR_NONE
-- On INSTR_FIELD reduce production instr -> INSTR_NONE
-- On INSTR_ARG reduce production instr -> INSTR_NONE
-- On EOF reduce production instr -> INSTR_NONE

State 181:
## Known stack suffix:
## INSTR_METHOD
## LR(1) items:
instr -> INSTR_METHOD . methodSpecMaybeArrayMethod [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VARARG shift to state 42
-- On UNMANAGED shift to state 43
-- On INSTANCE shift to state 48
-- On EXPLICIT shift to state 51
-- On DEFAULT shift to state 49
-- On methodSpecMaybeArrayMethod shift to state 182
-- On callKind shift to state 53
-- On callConv shift to state 183
## Reductions:
-- On VOID reduce production callKind ->
-- On VALUETYPE reduce production callKind ->
-- On VALUE reduce production callKind ->
-- On UNSIGNED reduce production callKind ->
-- On UINT8 reduce production callKind ->
-- On UINT64 reduce production callKind ->
-- On UINT32 reduce production callKind ->
-- On UINT16 reduce production callKind ->
-- On TYPEDREF reduce production callKind ->
-- On STRING reduce production callKind ->
-- On OBJECT reduce production callKind ->
-- On NATIVE reduce production callKind ->
-- On METHOD reduce production callKind ->
-- On INT8 reduce production callKind ->
-- On INT64 reduce production callKind ->
-- On INT32 reduce production callKind ->
-- On INT16 reduce production callKind ->
-- On FLOAT64 reduce production callKind ->
-- On FLOAT32 reduce production callKind ->
-- On CLASS reduce production callKind ->
-- On CHAR reduce production callKind ->
-- On BOOL reduce production callKind ->
-- On BANG reduce production callKind ->

State 182:
## Known stack suffix:
## INSTR_METHOD methodSpecMaybeArrayMethod
## LR(1) items:
instr -> INSTR_METHOD methodSpecMaybeArrayMethod . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_TYPE reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_TOK reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_STRING reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_SIG reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_R reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_NONE reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_METHOD reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_LOC reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_INT_TYPE reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_I8 reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_I32_I32 reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_I reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_FIELD reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On INSTR_ARG reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod
-- On EOF reduce production instr -> INSTR_METHOD methodSpecMaybeArrayMethod

State 183:
## Known stack suffix:
## callConv
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv . typ typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
methodSpecMaybeArrayMethod -> callConv . typ methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## callConv typ
## LR(1) items:
methodSpecMaybeArrayMethod -> callConv typ . typSpec DCOLON methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
methodSpecMaybeArrayMethod -> callConv typ . methodName opt_actual_tyargs LPAREN sigArgs0 RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
typ -> typ . LBRACK RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . AMP [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
typ -> typ . STAR [ VOID VAL_SQSTRING VAL_ID VAL_DOTTEDNAME VALUETYPE VALUE UNSIGNED UINT8 UINT64 UINT32 UINT16 TYPEDREF STRING STAR OBJECT NATIVE METHOD LPAREN LBRACK INT8 INT64 INT32 INT16 FLOAT64 FLOAT32 DOT_CTOR DOT_CCTOR CLASS CHAR BOOL BANG AMP ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On STAR shift to state 75
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 126
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On DOT_CTOR shift to state 127
-- On DOT_CCTOR shift to state 128
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On AMP shift to state 90
-- On typeName shift to state 106
-- On typSpec shift to state 129
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 137
-- On methodName shift to state 138
-- On id shift to state 14
-- On className shift to state 109
## Reductions:

State 185:
## Known stack suffix:
## INSTR_LOC
## LR(1) items:
instr -> INSTR_LOC . int32 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## INSTR_LOC int32
## LR(1) items:
instr -> INSTR_LOC int32 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_LOC int32
-- On INSTR_TYPE reduce production instr -> INSTR_LOC int32
-- On INSTR_TOK reduce production instr -> INSTR_LOC int32
-- On INSTR_STRING reduce production instr -> INSTR_LOC int32
-- On INSTR_SIG reduce production instr -> INSTR_LOC int32
-- On INSTR_R reduce production instr -> INSTR_LOC int32
-- On INSTR_NONE reduce production instr -> INSTR_LOC int32
-- On INSTR_METHOD reduce production instr -> INSTR_LOC int32
-- On INSTR_LOC reduce production instr -> INSTR_LOC int32
-- On INSTR_INT_TYPE reduce production instr -> INSTR_LOC int32
-- On INSTR_I8 reduce production instr -> INSTR_LOC int32
-- On INSTR_I32_I32 reduce production instr -> INSTR_LOC int32
-- On INSTR_I reduce production instr -> INSTR_LOC int32
-- On INSTR_FIELD reduce production instr -> INSTR_LOC int32
-- On INSTR_ARG reduce production instr -> INSTR_LOC int32
-- On EOF reduce production instr -> INSTR_LOC int32

State 187:
## Known stack suffix:
## INSTR_INT_TYPE
## LR(1) items:
instr -> INSTR_INT_TYPE . int32 typSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## INSTR_INT_TYPE int32
## LR(1) items:
instr -> INSTR_INT_TYPE int32 . typSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VAL_SQSTRING shift to state 3
-- On VAL_ID shift to state 4
-- On VAL_DOTTEDNAME shift to state 5
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On LPAREN shift to state 100
-- On LBRACK shift to state 103
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typeName shift to state 106
-- On typSpec shift to state 189
-- On typ shift to state 108
-- On slashedName shift to state 18
-- On name1 shift to state 11
-- On id shift to state 14
-- On className shift to state 109
## Reductions:

State 189:
## Known stack suffix:
## INSTR_INT_TYPE int32 typSpec
## LR(1) items:
instr -> INSTR_INT_TYPE int32 typSpec . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_TYPE reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_TOK reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_STRING reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_SIG reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_R reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_NONE reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_METHOD reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_LOC reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_INT_TYPE reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_I8 reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_I32_I32 reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_I reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_FIELD reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On INSTR_ARG reduce production instr -> INSTR_INT_TYPE int32 typSpec
-- On EOF reduce production instr -> INSTR_INT_TYPE int32 typSpec

State 190:
## Known stack suffix:
## INSTR_I8
## LR(1) items:
instr -> INSTR_I8 . int64 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 171
-- On int64 shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## INSTR_I8 int64
## LR(1) items:
instr -> INSTR_I8 int64 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_I8 int64
-- On INSTR_TYPE reduce production instr -> INSTR_I8 int64
-- On INSTR_TOK reduce production instr -> INSTR_I8 int64
-- On INSTR_STRING reduce production instr -> INSTR_I8 int64
-- On INSTR_SIG reduce production instr -> INSTR_I8 int64
-- On INSTR_R reduce production instr -> INSTR_I8 int64
-- On INSTR_NONE reduce production instr -> INSTR_I8 int64
-- On INSTR_METHOD reduce production instr -> INSTR_I8 int64
-- On INSTR_LOC reduce production instr -> INSTR_I8 int64
-- On INSTR_INT_TYPE reduce production instr -> INSTR_I8 int64
-- On INSTR_I8 reduce production instr -> INSTR_I8 int64
-- On INSTR_I32_I32 reduce production instr -> INSTR_I8 int64
-- On INSTR_I reduce production instr -> INSTR_I8 int64
-- On INSTR_FIELD reduce production instr -> INSTR_I8 int64
-- On INSTR_ARG reduce production instr -> INSTR_I8 int64
-- On EOF reduce production instr -> INSTR_I8 int64

State 192:
## Known stack suffix:
## INSTR_I32_I32
## LR(1) items:
instr -> INSTR_I32_I32 . int32 int32 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## INSTR_I32_I32 int32
## LR(1) items:
instr -> INSTR_I32_I32 int32 . int32 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## INSTR_I32_I32 int32 int32
## LR(1) items:
instr -> INSTR_I32_I32 int32 int32 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_TYPE reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_TOK reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_STRING reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_SIG reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_R reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_NONE reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_METHOD reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_LOC reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_INT_TYPE reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_I8 reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_I32_I32 reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_I reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_FIELD reduce production instr -> INSTR_I32_I32 int32 int32
-- On INSTR_ARG reduce production instr -> INSTR_I32_I32 int32 int32
-- On EOF reduce production instr -> INSTR_I32_I32 int32 int32

State 195:
## Known stack suffix:
## INSTR_I
## LR(1) items:
instr -> INSTR_I . int32 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## INSTR_I int32
## LR(1) items:
instr -> INSTR_I int32 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_I int32
-- On INSTR_TYPE reduce production instr -> INSTR_I int32
-- On INSTR_TOK reduce production instr -> INSTR_I int32
-- On INSTR_STRING reduce production instr -> INSTR_I int32
-- On INSTR_SIG reduce production instr -> INSTR_I int32
-- On INSTR_R reduce production instr -> INSTR_I int32
-- On INSTR_NONE reduce production instr -> INSTR_I int32
-- On INSTR_METHOD reduce production instr -> INSTR_I int32
-- On INSTR_LOC reduce production instr -> INSTR_I int32
-- On INSTR_INT_TYPE reduce production instr -> INSTR_I int32
-- On INSTR_I8 reduce production instr -> INSTR_I int32
-- On INSTR_I32_I32 reduce production instr -> INSTR_I int32
-- On INSTR_I reduce production instr -> INSTR_I int32
-- On INSTR_FIELD reduce production instr -> INSTR_I int32
-- On INSTR_ARG reduce production instr -> INSTR_I int32
-- On EOF reduce production instr -> INSTR_I int32

State 197:
## Known stack suffix:
## INSTR_FIELD
## LR(1) items:
instr -> INSTR_FIELD . fieldSpec [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 144
-- On fieldSpec shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## INSTR_FIELD fieldSpec
## LR(1) items:
instr -> INSTR_FIELD fieldSpec . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_TYPE reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_TOK reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_STRING reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_SIG reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_R reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_NONE reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_METHOD reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_LOC reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_INT_TYPE reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_I8 reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_I32_I32 reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_I reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_FIELD reduce production instr -> INSTR_FIELD fieldSpec
-- On INSTR_ARG reduce production instr -> INSTR_FIELD fieldSpec
-- On EOF reduce production instr -> INSTR_FIELD fieldSpec

State 199:
## Known stack suffix:
## INSTR_ARG
## LR(1) items:
instr -> INSTR_ARG . int32 [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_INT64 shift to state 66
-- On int32 shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## INSTR_ARG int32
## LR(1) items:
instr -> INSTR_ARG int32 . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> INSTR_ARG int32
-- On INSTR_TYPE reduce production instr -> INSTR_ARG int32
-- On INSTR_TOK reduce production instr -> INSTR_ARG int32
-- On INSTR_STRING reduce production instr -> INSTR_ARG int32
-- On INSTR_SIG reduce production instr -> INSTR_ARG int32
-- On INSTR_R reduce production instr -> INSTR_ARG int32
-- On INSTR_NONE reduce production instr -> INSTR_ARG int32
-- On INSTR_METHOD reduce production instr -> INSTR_ARG int32
-- On INSTR_LOC reduce production instr -> INSTR_ARG int32
-- On INSTR_INT_TYPE reduce production instr -> INSTR_ARG int32
-- On INSTR_I8 reduce production instr -> INSTR_ARG int32
-- On INSTR_I32_I32 reduce production instr -> INSTR_ARG int32
-- On INSTR_I reduce production instr -> INSTR_ARG int32
-- On INSTR_FIELD reduce production instr -> INSTR_ARG int32
-- On INSTR_ARG reduce production instr -> INSTR_ARG int32
-- On EOF reduce production instr -> INSTR_ARG int32

State 201:
## Known stack suffix:
## top_instrs
## LR(1) items:
top_instrs' -> top_instrs . [ # ]
## Transitions:
## Reductions:
-- On # accept top_instrs

State 202:
## Known stack suffix:
## instrs2
## LR(1) items:
top_instrs -> instrs2 . EOF [ # ]
## Transitions:
-- On EOF shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## instrs2 EOF
## LR(1) items:
top_instrs -> instrs2 EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production top_instrs -> instrs2 EOF

State 204:
## Known stack suffix:
## instr_r_head
## LR(1) items:
instr -> instr_r_head . bytes RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On VAL_HEXBYTE shift to state 159
-- On bytes_aux shift to state 160
-- On bytes shift to state 205
## Reductions:
-- On RPAREN reduce production bytes ->

State 205:
## Known stack suffix:
## instr_r_head bytes
## LR(1) items:
instr -> instr_r_head bytes . RPAREN [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
-- On RPAREN shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## instr_r_head bytes RPAREN
## LR(1) items:
instr -> instr_r_head bytes RPAREN . [ INSTR_VALUETYPE INSTR_TYPE INSTR_TOK INSTR_STRING INSTR_SIG INSTR_R INSTR_NONE INSTR_METHOD INSTR_LOC INSTR_INT_TYPE INSTR_I8 INSTR_I32_I32 INSTR_I INSTR_FIELD INSTR_ARG EOF ]
## Transitions:
## Reductions:
-- On INSTR_VALUETYPE reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_TYPE reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_TOK reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_STRING reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_SIG reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_R reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_NONE reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_METHOD reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_LOC reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_INT_TYPE reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_I8 reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_I32_I32 reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_I reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_FIELD reduce production instr -> instr_r_head bytes RPAREN
-- On INSTR_ARG reduce production instr -> instr_r_head bytes RPAREN
-- On EOF reduce production instr -> instr_r_head bytes RPAREN

State 207:
## Known stack suffix:
## instr
## LR(1) items:
instrs2 -> instr . instrs2 [ EOF ]
## Transitions:
-- On INSTR_VALUETYPE shift to state 1
-- On INSTR_TYPE shift to state 117
-- On INSTR_TOK shift to state 119
-- On INSTR_STRING shift to state 151
-- On INSTR_SIG shift to state 164
-- On INSTR_R shift to state 170
-- On INSTR_NONE shift to state 180
-- On INSTR_METHOD shift to state 181
-- On INSTR_LOC shift to state 185
-- On INSTR_INT_TYPE shift to state 187
-- On INSTR_I8 shift to state 190
-- On INSTR_I32_I32 shift to state 192
-- On INSTR_I shift to state 195
-- On INSTR_FIELD shift to state 197
-- On INSTR_ARG shift to state 199
-- On instrs2 shift to state 208
-- On instr_r_head shift to state 204
-- On instr shift to state 207
## Reductions:
-- On EOF reduce production instrs2 ->

State 208:
## Known stack suffix:
## instr instrs2
## LR(1) items:
instrs2 -> instr instrs2 . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production instrs2 -> instr instrs2

State 209:
## Known stack suffix:
##
## LR(1) items:
top_typ' -> . top_typ [ # ]
## Transitions:
-- On VOID shift to state 2
-- On VALUETYPE shift to state 6
-- On VALUE shift to state 21
-- On UNSIGNED shift to state 24
-- On UINT8 shift to state 29
-- On UINT64 shift to state 30
-- On UINT32 shift to state 31
-- On UINT16 shift to state 32
-- On TYPEDREF shift to state 33
-- On STRING shift to state 34
-- On OBJECT shift to state 35
-- On NATIVE shift to state 36
-- On METHOD shift to state 41
-- On INT8 shift to state 55
-- On INT64 shift to state 56
-- On INT32 shift to state 57
-- On INT16 shift to state 58
-- On FLOAT64 shift to state 59
-- On FLOAT32 shift to state 60
-- On CLASS shift to state 61
-- On CHAR shift to state 63
-- On BOOL shift to state 64
-- On BANG shift to state 65
-- On typ shift to state 210
-- On top_typ shift to state 212
## Reductions:

State 210:
## Known stack suffix:
## typ
## LR(1) items:
top_typ -> typ . EOF [ # ]
typ -> typ . LBRACK RBRACK [ STAR LBRACK EOF AMP ]
typ -> typ . LBRACK bounds1 RBRACK [ STAR LBRACK EOF AMP ]
typ -> typ . LBRACK RBRACK BANG [ STAR LBRACK EOF AMP ]
typ -> typ . LBRACK bounds1 RBRACK BANG [ STAR LBRACK EOF AMP ]
typ -> typ . AMP [ STAR LBRACK EOF AMP ]
typ -> typ . STAR [ STAR LBRACK EOF AMP ]
## Transitions:
-- On STAR shift to state 75
-- On LBRACK shift to state 76
-- On EOF shift to state 211
-- On AMP shift to state 90
## Reductions:

State 211:
## Known stack suffix:
## typ EOF
## LR(1) items:
top_typ -> typ EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production top_typ -> typ EOF

State 212:
## Known stack suffix:
## top_typ
## LR(1) items:
top_typ' -> top_typ . [ # ]
## Transitions:
## Reductions:
-- On # accept top_typ

