File "ilpars.mly", line 93, characters 30-42:
Warning: the token INSTR_SWITCH is unused.
%{
(* (c) Microsoft Corporation 2005-2007.  *)

(*F# open Microsoft.Research.AbstractIL
open Microsoft.Research.AbstractIL.Internal
module Ilascii = Microsoft.Research.AbstractIL.Internal.AsciiConstants
module Ildiag = Microsoft.Research.AbstractIL.Diagnostics
module Il = Microsoft.Research.AbstractIL.IL
module Ilx = Microsoft.Research.AbstractIL.Extensions.ILX.Types
module Il = Microsoft.Research.AbstractIL.IL
module Illib = Microsoft.Research.AbstractIL.Internal.Library
F#*)

open Illib
open Ildiag
open Il
open Nums
open Ilascii
open Ilx

let pfailwith s = prerr_endline ("*** error: "^s); raise Parsing.Parse_error

(*-----------------------------------------------------------------------
 * vararg sentinels
 *----------------------------------------------------------------------*)

type sig_arg = SigArg of (string option * typ)  | Sentinel

let decode_varargs args =
  let rec normals = function
      [] -> ([],None)
    | Sentinel :: t -> ([],Some (varargs t))
    | SigArg (_,p)::t -> let (n,r) = normals t in (p::n, r)
  and varargs = function
      [] -> []
    | SigArg (_,ty):: t ->  let l = varargs t in ty::l
    | Sentinel :: t -> pfailwith "two sentinels in vararg call" in
  normals args;;

(*-----------------------------------------------------------------------
 *
 *----------------------------------------------------------------------*)

type 'a resolved_at_mspec_scope =
    ResolvedAtMethodSpecScope of (genparams -> 'a)

let no_mspec_scope x = ResolvedAtMethodSpecScope (fun cgparams -> x)
let resolve_mspec_scope (ResolvedAtMethodSpecScope f) x = f x
let resolve_mspec_scope_then (ResolvedAtMethodSpecScope f) g =
  ResolvedAtMethodSpecScope (fun x -> resolve_mspec_scope (g(f x)) x)

let resolve_mspec_scope_to_formal_scope tspeco obj =
  match tspeco with
    None ->  resolve_mspec_scope obj mk_empty_gparams
  | Some tspec -> resolve_mspec_scope obj (gparams_of_inst (inst_of_tspec tspec))

let resolve_mspec_scope_to_current_scope obj =
    resolve_mspec_scope obj mk_empty_gparams

(*-----------------------------------------------------------------------
 *
 *----------------------------------------------------------------------*)

let find_mscorlib_aref() =
  match (!parse_ilGlobals).mscorlib_scoref with
  | ScopeRef_assembly aref -> aref
  | _ -> ecma_mscorlib_assref (* drop back to mscorlib, why not error?? *)

let find_aref nm =
  if nm = "mscorlib" then find_mscorlib_aref() else
  pfailwith ("Undefined assembly ref '" ^ nm ^ "'")

%}
%start top_instrs
%start top_typ
%token AMP
%token BANG
%token BOOL
%token BYTEARRAY
%token CDECL
%token CHAR
%token CLASS
%token COMMA
%token DCOLON
%token DEFAULT
%token DOT
%token DOT_CCTOR
%token DOT_CTOR
%token ELIPSES
%token EOF
%token EXPLICIT
%token FASTCALL
%token FIELD
%token FLOAT32
%token FLOAT64
%token GREATER
%token INSTANCE
%token <Ilascii.arg_instr> INSTR_ARG
%token <Ilascii.field_instr> INSTR_FIELD
%token <Ilascii.i32_instr> INSTR_I
%token <Ilascii.i32_i32_instr> INSTR_I32_I32
%token <Ilascii.i64_instr> INSTR_I8
%token <Ilascii.int_type_instr> INSTR_INT_TYPE
%token <Ilascii.loc_instr> INSTR_LOC
%token <Ilascii.method_instr> INSTR_METHOD
%token <Ilascii.none_instr> INSTR_NONE
%token <Ilascii.real_instr> INSTR_R
%token <Ilascii.sig_instr> INSTR_SIG
%token <Ilascii.string_instr> INSTR_STRING
%token <Ilascii.switch_instr> INSTR_SWITCH
%token <Ilascii.tok_instr> INSTR_TOK
%token <Ilascii.type_instr> INSTR_TYPE
%token <Ilascii.valuetype_instr> INSTR_VALUETYPE
%token INT
%token INT16
%token INT32
%token INT64
%token INT8
%token LBRACK
%token LESS
%token LPAREN
%token METHOD
%token NATIVE
%token OBJECT
%token PLUS
%token RBRACK
%token RPAREN
%token SLASH
%token STAR
%token STDCALL
%token STRING
%token THISCALL
%token TYPEDREF
%token UINT
%token UINT16
%token UINT32
%token UINT64
%token UINT8
%token UNMANAGED
%token UNSIGNED
%token VALUE
%token VALUETYPE
%token <string> VAL_DOTTEDNAME
%token <Nums.ieee64> VAL_FLOAT64
%token <int> VAL_HEXBYTE
%token <string> VAL_ID
%token <Nums.i32> VAL_INT32_ELIPSES
%token <Nums.i64> VAL_INT64
%token <string> VAL_QSTRING
%token <string> VAL_SQSTRING
%token VARARG
%token VOID
%type <string> name1
%type <Il.instr array> top_instrs
%type <Il.typ> top_typ
%type <Il.typ resolved_at_mspec_scope> typ
%%

top_typ:
  _1 = typ _2 = EOF
    {       ( resolve_mspec_scope _1 [] )}

top_instrs:
  _1 = instrs2 _2 = EOF
    {       ( Array.of_list _1 )}

compQstring:
  _1 = VAL_QSTRING
    {                 ( _1 )}
| _1 = compQstring _2 = PLUS _3 = VAL_QSTRING
    {                                  ( _1 ^ _3 )}

methodName:
  _1 = DOT_CTOR
    {       ( ".ctor" )}
| _1 = DOT_CCTOR
    {       ( ".cctor" )}
| _1 = name1
    {       ( _1 )}

instrs2:
  _1 = instr _2 = instrs2
    {        ( _1 []  :: _2  )}
| 
    {     ( [] )}

bytearrayhead:
  _1 = BYTEARRAY _2 = LPAREN
    {       ( lexing_bytearray := true )}

bytes:
  _1 = bytes_aux
    {       (  lexing_bytearray := false;
          Bytes.of_intarray (Array.of_list (List.rev _1)) )}
| 
    {       (  lexing_bytearray := false;
          Bytes.of_intarray [| |] )}

bytes_aux:
  _1 = VAL_HEXBYTE
    {       ( [ _1 ] )}
| _1 = bytes_aux _2 = VAL_HEXBYTE
    {       ( _2 :: _1 )}

methodSpec:
  _1 = methodSpecMaybeArrayMethod
    {    ( let  data,varargs = _1 in
      mk_mspec_in_typ data,varargs )}

methodSpecMaybeArrayMethod:
  _1 = callConv _2 = typ _3 = typSpec _4 = DCOLON _5 = methodName _6 = opt_actual_tyargs _7 = LPAREN _8 = sigArgs0 _9 = RPAREN
    {       ( let callee_class_typ = resolve_mspec_scope_to_current_scope _3 in
         let gscope = (if Ilx.gen_is_array_ty callee_class_typ then None else Some (tspec_of_typ callee_class_typ)) in
         let argtys_n_varargs = resolve_mspec_scope_to_formal_scope gscope _8 in
         let (argtys,varargs) = decode_varargs argtys_n_varargs in
         let minst = resolve_mspec_scope_to_current_scope _6 in
         let callee_retty = resolve_mspec_scope_to_formal_scope gscope _2 in
         (callee_class_typ, _1, _5, argtys, callee_retty, minst), varargs )}
| _1 = callConv _2 = typ _3 = methodName _4 = opt_actual_tyargs _5 = LPAREN _6 = sigArgs0 _7 = RPAREN
    {       ( let argtys_n_varargs = resolve_mspec_scope_to_formal_scope None _6 in
         let (argtys,varargs) = decode_varargs argtys_n_varargs in
         let retty = resolve_mspec_scope_to_formal_scope None _2 in
         let minst = resolve_mspec_scope_to_current_scope _4 in
         (typ_for_toplevel ScopeRef_local, _1, _3, argtys, retty, minst), varargs )}

fieldSpec:
  _1 = typ _2 = typSpec _3 = DCOLON _4 = id
    {       ( let callee_class_typ = resolve_mspec_scope_to_current_scope _2 in
         let tspec = tspec_of_typ callee_class_typ in
         let tref = tref_of_tspec tspec in
         let callee_field_typ = resolve_mspec_scope_to_formal_scope (Some tspec) _1 in
         mk_fspec_in_typ (callee_class_typ, _4, callee_field_typ)
       )}
| _1 = typ _2 = id
    {       ( let callee_field_typ = resolve_mspec_scope_to_formal_scope None _1 in
         mk_fspec_in_typ (typ_for_toplevel ScopeRef_local, _2, callee_field_typ)
       )}

instr_r_head:
  _1 = INSTR_R _2 = LPAREN
    {        ( lexing_bytearray := true; _1 )}

instr:
  _1 = INSTR_NONE
    {        (  (_1 ()) )}
| _1 = INSTR_ARG _2 = int32
    {        (  (_1 (int_to_u16 ( (i32_to_int _2)))) )}
| _1 = INSTR_LOC _2 = int32
    {        (  (_1 (int_to_u16 ( (i32_to_int _2)))) )}
| _1 = INSTR_I _2 = int32
    {        (  (_1 _2) )}
| _1 = INSTR_I32_I32 _2 = int32 _3 = int32
    {        (  (_1 (_2,_3)) )}
| _1 = INSTR_I8 _2 = int64
    {        (  (_1 _2) )}
| _1 = INSTR_R _2 = float64
    {        (  (_1 (NUM_R8 _2)) )}
| _1 = INSTR_R _2 = int64
    {        (  (_1 (NUM_R8 (i64_to_ieee64 _2))) )}
| _1 = instr_r_head _2 = bytes _3 = RPAREN
    {        (  let r =
             let b = _2 in
             match Bytes.length b with
               4 -> NUM_R4 (ieee32_of_four_bytes  (Bytes.get b 0) (Bytes.get b 1) (Bytes.get b 2) (Bytes.get b 3))
             | 8 -> NUM_R8 (ieee64_of_eight_bytes  (Bytes.get b 0) (Bytes.get b 1) (Bytes.get b 2) (Bytes.get b 3) (Bytes.get b 4) (Bytes.get b 5) (Bytes.get b 6) (Bytes.get b 7))
             | _ -> pfailwith "you must use exactly four or eight bytes when specifying a float by bytes." in
            (_1 r) )}
| _1 = INSTR_METHOD _2 = methodSpecMaybeArrayMethod
    {        (
             begin
               let  ((encl_typ, cc, nm, argtys, retty, minst) as data),varargs = _2 in
               if Ilx.gen_is_array_ty encl_typ then
                 (fun prefixes ->
                   let (shape,ty,p) = gen_dest_array_ty encl_typ in
                   begin match nm with
                   | "Get" -> if not p then I_ldelem_any(shape,ty) else I_other (mk_ilx_ext_instr (EI_ldelem_any_erasable (shape,ty)))
                   | "Set" ->  if not  p then I_stelem_any(shape,ty) else I_other (mk_ilx_ext_instr (EI_stelem_any_erasable (shape,ty)))
                   | "Address" ->  if not p then I_ldelema((if prefixes=[Prefix_Readonly] then ReadonlyAddress else NormalAddress), shape,ty) else failwith "cannot use ldelema on this kind of array"
                   | ".ctor" ->   if not p then I_newarr(shape,ty) else  I_other (mk_ilx_ext_instr (EI_newarr_erasable (shape,ty)))
                   | _ -> failwith "bad method on array type"
                   end)
               else

                 _1 (mk_mspec_in_typ data, varargs)
             end )}
| _1 = INSTR_FIELD _2 = fieldSpec
    {        (  (_1 _2) )}
| _1 = INSTR_TYPE _2 = typSpec
    {        (  (_1 (resolve_mspec_scope_to_current_scope _2)) )}
| _1 = INSTR_INT_TYPE _2 = int32 _3 = typSpec
    {        (  (_1 (Int32.to_int _2,resolve_mspec_scope_to_current_scope _3)) )}
| _1 = INSTR_VALUETYPE _2 = typSpec
    {        ( let vtr =
             match resolve_mspec_scope_to_current_scope _2 with
               (* Type_boxed tr -> Type_value tr
             | Type_value vtr as typ -> typ
             | *) typ ->  typ in
           (_1 vtr) )}
| _1 = INSTR_STRING _2 = compQstring
    {        (  (_1 (Bytes.string_as_unicode_bytes _2))  )}
| _1 = INSTR_STRING _2 = bytearrayhead _3 = bytes _4 = RPAREN
    {        (  (_1 _3)  )}
| _1 = INSTR_SIG _2 = callConv _3 = typ _4 = LPAREN _5 = sigArgs0 _6 = RPAREN
    {        ( let argtys_n_varargs = resolve_mspec_scope_to_current_scope _5 in
          let (argtys,varargs) = decode_varargs argtys_n_varargs in
          let callee_retty = resolve_mspec_scope_to_current_scope _3 in
          let mref = mk_callsig (_2,argtys,callee_retty) in
           (_1 (mref,varargs))
        )}
| _1 = INSTR_TOK _2 = typSpec
    {        (  (_1 (Token_type (resolve_mspec_scope_to_current_scope _2)))  )}
| _1 = INSTR_TOK _2 = METHOD _3 = methodSpec
    {        ( let (argtys,varargs) = _3 in
           (_1 (Token_method argtys))
        )}
| _1 = INSTR_TOK _2 = FIELD _3 = fieldSpec
    {        (  (_1 (Token_field _3)) )}

sigArgs0:
  
    {        (  no_mspec_scope [] )}
| _1 = sigArgs1
    {                ( _1 )}

sigArgs1:
  _1 = sigArgs1a
    {        ( ResolvedAtMethodSpecScope (fun c -> List.map (fun obj -> resolve_mspec_scope obj c) (List.rev _1)) )}

sigArgs1a:
  _1 = sigArg
    {        ( [_1] )}
| _1 = sigArgs1a _2 = COMMA _3 = sigArg
    {        ( _3:: _1 )}

sigArg:
  _1 = ELIPSES
    {       ( no_mspec_scope Sentinel )}
| _1 = typ _2 = opt_id
    {       ( resolve_mspec_scope_then _1 (fun ty ->
         no_mspec_scope (SigArg(_2, ty))) )}

opt_id:
  
    {                    ( None )}
| _1 = id
    {                                  ( Some _1 )}

name1:
  _1 = id
    {        ( _1 )}
| _1 = VAL_DOTTEDNAME
    {        ( _1 )}
| _1 = name1 _2 = DOT _3 = id
    {        ( _1 ^"."^ _3 )}

className:
  _1 = LBRACK _2 = name1 _3 = RBRACK _4 = slashedName
    {        ( let (enc,nm) = _4 in
          let aref = find_aref _2 in
          ScopeRef_assembly aref, enc, nm )}
| _1 = slashedName
    {        ( let enc, nm = _1 in (ScopeRef_local, enc, nm) )}

slashedName:
  _1 = name1
    {        ( ([],_1) )}
| _1 = name1 _2 = SLASH _3 = slashedName
    {        ( let (enc,nm) = _3 in (_1::enc, nm)  )}

typeNameInst:
  _1 = className _2 = opt_actual_tyargs
    {        ( let (a,b,c) = _1 in
          resolve_mspec_scope_then _2 (fun inst ->
          no_mspec_scope ( (mk_tspec ( (mk_nested_tref (a,b,c)), inst)))) )}

typeName:
  _1 = className
    {        ( let (a,b,c) = _1 in
          no_mspec_scope ( (mk_tspec ( (mk_nested_tref (a,b,c)), mk_empty_gactuals))) )}
| _1 = LBRACK _2 = name1 _3 = RBRACK
    {        ( (* reference to the toplevel constructs of an assembly *)
          let aref = find_aref  _2 in
          no_mspec_scope (tspec_for_toplevel ScopeRef_local) )}

typSpec:
  _1 = typeName
    {        ( resolve_mspec_scope_then _1 (fun tref ->
          no_mspec_scope (Type_boxed tref))  )}
| _1 = typ
    {        ( _1 )}
| _1 = LPAREN _2 = typ _3 = RPAREN
    {        ( _2 )}

callConv:
  _1 = INSTANCE _2 = callKind
    {        ( Callconv (CC_instance,_2) )}
| _1 = EXPLICIT _2 = callKind
    {        ( Callconv (CC_instance_explicit,_2) )}
| _1 = callKind
    {        ( Callconv (CC_static,_1) )}

callKind:
  
    {      ( CC_default )}
| _1 = DEFAULT
    {      ( CC_default )}
| _1 = VARARG
    {      ( CC_vararg )}
| _1 = UNMANAGED _2 = CDECL
    {      ( CC_cdecl )}
| _1 = UNMANAGED _2 = STDCALL
    {      ( CC_stdcall )}
| _1 = UNMANAGED _2 = THISCALL
    {      ( CC_thiscall )}
| _1 = UNMANAGED _2 = FASTCALL
    {      ( CC_fastcall )}

typ:
  _1 = STRING
    {       ( no_mspec_scope (!parse_ilGlobals).typ_String )}
| _1 = OBJECT
    {       ( no_mspec_scope (!parse_ilGlobals).typ_Object )}
| _1 = CLASS _2 = typeNameInst
    {       ( resolve_mspec_scope_then _2 (fun tspec ->
          no_mspec_scope (Type_boxed tspec)) )}
| _1 = VALUE _2 = CLASS _3 = typeNameInst
    {       ( resolve_mspec_scope_then _3 (fun tspec ->
         no_mspec_scope (Type_value tspec)) )}
| _1 = VALUETYPE _2 = typeNameInst
    {       ( resolve_mspec_scope_then _2 (fun tspec ->
         no_mspec_scope (Type_value tspec)) )}
| _1 = typ _2 = LBRACK _3 = RBRACK
    {       ( resolve_mspec_scope_then _1 (fun ty -> no_mspec_scope (mk_sdarray_ty ty)) )}
| _1 = typ _2 = LBRACK _3 = bounds1 _4 = RBRACK
    {       ( resolve_mspec_scope_then _1 (fun ty -> no_mspec_scope (mk_array_ty (ty,ArrayShape _3))) )}
| _1 = typ _2 = LBRACK _3 = RBRACK _4 = BANG
    {       ( resolve_mspec_scope_then _1 (fun ty -> no_mspec_scope (Ilx.mk_array_ty_old (sdshape,ty))) )}
| _1 = typ _2 = LBRACK _3 = bounds1 _4 = RBRACK _5 = BANG
    {       ( resolve_mspec_scope_then _1 (fun ty -> no_mspec_scope (Ilx.mk_array_ty_old (ArrayShape _3,ty))) )}
| _1 = typ _2 = AMP
    {       ( resolve_mspec_scope_then _1 (fun ty -> no_mspec_scope (Type_byref ty)) )}
| _1 = typ _2 = STAR
    {       ( resolve_mspec_scope_then _1 (fun ty -> no_mspec_scope (Type_ptr ty)) )}
| _1 = METHOD _2 = callConv _3 = typ _4 = STAR _5 = LPAREN _6 = sigArgs0 _7 = RPAREN
    {        ( resolve_mspec_scope_then _3 (fun callee_retty ->
          resolve_mspec_scope_then _6 (fun argtys_n_varargs ->
          let (argtys,varargs) = decode_varargs argtys_n_varargs in
          let csig = mk_callsig(_2,
                                    argtys,
                                    callee_retty) in
         no_mspec_scope (Type_fptr csig))) )}
| _1 = TYPEDREF
    {       ( no_mspec_scope (!parse_ilGlobals).typ_TypedReference )}
| _1 = CHAR
    {       ( no_mspec_scope (!parse_ilGlobals).typ_char )}
| _1 = VOID
    {       ( no_mspec_scope Type_void )}
| _1 = BOOL
    {       ( no_mspec_scope (!parse_ilGlobals).typ_bool )}
| _1 = INT8
    {       ( no_mspec_scope (!parse_ilGlobals).typ_int8 )}
| _1 = INT16
    {       ( no_mspec_scope (!parse_ilGlobals).typ_int16 )}
| _1 = INT32
    {       ( no_mspec_scope (!parse_ilGlobals).typ_int32 )}
| _1 = INT64
    {       ( no_mspec_scope (!parse_ilGlobals).typ_int64 )}
| _1 = FLOAT32
    {       ( no_mspec_scope (!parse_ilGlobals).typ_float32 )}
| _1 = FLOAT64
    {       ( no_mspec_scope (!parse_ilGlobals).typ_float64 )}
| _1 = UNSIGNED _2 = INT8
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint8 )}
| _1 = UNSIGNED _2 = INT16
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint16 )}
| _1 = UNSIGNED _2 = INT32
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint32 )}
| _1 = UNSIGNED _2 = INT64
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint64 )}
| _1 = UINT8
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint8 )}
| _1 = UINT16
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint16 )}
| _1 = UINT32
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint32 )}
| _1 = UINT64
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint64 )}
| _1 = NATIVE _2 = INT
    {       ( no_mspec_scope (!parse_ilGlobals).typ_int )}
| _1 = NATIVE _2 = UNSIGNED _3 = INT
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint )}
| _1 = NATIVE _2 = UINT
    {       ( no_mspec_scope (!parse_ilGlobals).typ_uint )}
| _1 = BANG _2 = int32
    {       ( no_mspec_scope (Type_tyvar (int_to_u16 (i32_to_int _2)))  )}
| _1 = BANG _2 = BANG _3 = int32
    {       ( ResolvedAtMethodSpecScope
           (fun cgparams -> Type_tyvar (int_to_u16 (i32_to_int _3 + List.length cgparams)))  )}

bounds1:
  _1 = bound
    {       ( [_1] )}
| _1 = bounds1 _2 = COMMA _3 = bound
    {       ( _1 @ [_3] )}

bound:
  
    {       ( (None, None) )}
| _1 = int32
    {       ( (None, Some _1) )}
| _1 = int32 _2 = ELIPSES _3 = int32
    {       ( (Some _1, Some (Int32.add (Int32.sub _3 _1) (Int32.of_int 1))) )}
| _1 = int32 _2 = ELIPSES
    {       ( (Some _1, None) )}
| _1 = VAL_INT32_ELIPSES _2 = int32
    {       ( (Some _1, Some (Int32.add (Int32.sub _2 _1) (Int32.of_int 1))) )}
| _1 = VAL_INT32_ELIPSES
    {       ( (Some _1, None) )}

id:
  _1 = VAL_ID
    {       ( _1 )}
| _1 = VAL_SQSTRING
    {       ( _1 )}

int32:
  _1 = VAL_INT64
    {       ( i64_to_i32 _1 )}

int64:
  _1 = VAL_INT64
    {       ( _1 )}

float64:
  _1 = VAL_FLOAT64
    {       ( _1 )}
| _1 = FLOAT64 _2 = LPAREN _3 = int64 _4 = RPAREN
    {       ( Nums.bits_to_ieee64 _3 )}

opt_actual_tyargs:
  
    {        ( no_mspec_scope mk_empty_gactuals )}
| _1 = actual_tyargs
    {        ( resolve_mspec_scope_then _1 (fun res ->
          no_mspec_scope  res) )}

actual_tyargs:
  _1 = LESS _2 = actualTypSpecs _3 = GREATER
    {        ( _2 )}

actualTypSpecs:
  _1 = typSpec
    {        ( resolve_mspec_scope_then _1 (fun res ->
          no_mspec_scope [ res]) )}
| _1 = actualTypSpecs _2 = COMMA _3 = typSpec
    {        ( resolve_mspec_scope_then _1 (fun x ->
          resolve_mspec_scope_then _3 (fun y ->
          no_mspec_scope (x @ [ y]))) )}

%%
