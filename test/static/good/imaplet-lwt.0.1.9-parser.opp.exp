%{
open Imaplet_types
let debug format = 
  (*Printf.printf format*) (fun format a -> ())
%}
%start request
%token ALL
%token ANSWERED
%token APPEND
%token <string> ATOM_CHARS
%token AUTHENTICATE
%token BCC
%token BEFORE
%token BODY
%token <string> BODYFETCH
%token <string> BODYPEEK
%token BODYSTRUCTURE
%token CAPABILITY
%token CC
%token CHANGEDSINCE
%token CHARSET
%token CHECK
%token CLOSE
%token CONDSTORE
%token COPY
%token CREATE
%token CRLF
%token <string> DATE
%token DELETE
%token DELETED
%token DONE
%token DRAFT
%token ENABLE
%token ENVELOPE
%token EOF
%token EXAMINE
%token EXPUNGE
%token EXTERNAL
%token FAST
%token FETCH
%token FLAGGED
%token FLAGS
%token FLAGSMIN
%token FLAGSPL
%token FLAGSSILENT
%token FLAGSSILENTMIN
%token FLAGSSILENTPL
%token FLANSWERED
%token FLDELETED
%token FLDRAFT
%token <string> FLEXTENSION
%token FLFLAGGED
%token FLSEEN
%token FROM
%token FULL
%token GSSAPI
%token HEADER
%token HIGHESTMODSEQ
%token ID
%token IDLE
%token INBOX
%token INTERNALDATE
%token KERBEROS_V4
%token KEYWORD
%token LAPPEND
%token LARGER
%token LIST
%token <int> LITERAL
%token <int> LITERALPL
%token LOGIN
%token LOGOUT
%token LP
%token LSUB
%token MESSAGES
%token MODSEQ
%token NEW
%token NOOP
%token NOT
%token OLD
%token ON
%token OR
%token PLAIN
%token PRIV
%token <string> QUOTED_STRING
%token RECENT
%token RENAME
%token RFC822
%token RFC822HEADER
%token RFC822SIZE
%token RFC822TEXT
%token RP
%token SEARCH
%token SEEN
%token SELECT
%token SENTBEFORE
%token SENTON
%token SENTSINCE
%token SHARED
%token SINCE
%token SKEY
%token SMALLER
%token SP
%token STARTTLS
%token STATUS
%token STORE
%token SUBJECT
%token SUBSCRIBE
%token <string> TAG
%token TEXT
%token TO
%token UID
%token UIDNEXT
%token UIDVALIDITY
%token UNANSWERED
%token UNCHANGEDSINCE
%token UNDELETED
%token UNDRAFT
%token UNFLAGGED
%token UNKEYWORD
%token UNSEEN
%token UNSUBSCRIBE
%type <Imaplet_types.clientRequest> request
%%

loption_separated_nonempty_list_SP_fetch_att__:
  
    {    ( [] )}
| x = separated_nonempty_list_SP_fetch_att_
    {    ( x )}

loption_separated_nonempty_list_SP_flag__:
  
    {    ( [] )}
| x = separated_nonempty_list_SP_flag_
    {    ( x )}

loption_separated_nonempty_list_SP_op_search_keys__:
  
    {    ( [] )}
| x = separated_nonempty_list_SP_op_search_keys_
    {    ( x )}

loption_separated_nonempty_list_SP_quoted__:
  
    {    ( [] )}
| x = separated_nonempty_list_SP_quoted_
    {    ( x )}

loption_separated_nonempty_list_SP_status_att__:
  
    {    ( [] )}
| x = separated_nonempty_list_SP_status_att_
    {    ( x )}

separated_nonempty_list_SP_fetch_att_:
  x = fetch_att
    {    ( [ x ] )}
| x = fetch_att _2 = SP xs = separated_nonempty_list_SP_fetch_att_
    {    ( x :: xs )}

separated_nonempty_list_SP_flag_:
  x = flag
    {    ( [ x ] )}
| x = flag _2 = SP xs = separated_nonempty_list_SP_flag_
    {    ( x :: xs )}

separated_nonempty_list_SP_op_search_keys_:
  x = op_search_keys
    {    ( [ x ] )}
| x = op_search_keys _2 = SP xs = separated_nonempty_list_SP_op_search_keys_
    {    ( x :: xs )}

separated_nonempty_list_SP_quoted_:
  x = quoted
    {    ( [ x ] )}
| x = quoted _2 = SP xs = separated_nonempty_list_SP_quoted_
    {    ( x :: xs )}

separated_nonempty_list_SP_status_att_:
  x = status_att
    {    ( [ x ] )}
| x = status_att _2 = SP xs = separated_nonempty_list_SP_status_att_
    {    ( x :: xs )}

request:
  _1 = EOF
    {        ( debug "got end of file
%!"; {tag="";command=Done} )}
| cmd = command
    {                  ( debug "p:request
%!"; (cmd) )}

list_of_quoted_string:
  xs = loption_separated_nonempty_list_SP_quoted__
    {let lqs =     ( xs ) in
                                     ( lqs )}

quoted:
  qs = QUOTED_STRING
    {                       ( qs )}

command:
  t = tag_ _2 = SP c = commands _4 = CRLF
    {                                     ( debug "p:command
%!"; {tag=t;command=c})}
| c = c_done
    {               ( {tag="";command=c} )}

tag_:
  s = TAG
    {            ( s )}

commands:
  c = command_any
    {                    (Any(c))}
| c = command_auth
    {                     (Authenticated(c))}
| c = command_notauth
    {                        (Notauthenticated(c))}
| c = command_select
    {                       (debug "p:commands
%!"; Selected(c))}

command_any:
  _1 = CAPABILITY
    {               ( Cmd_Capability )}
| _1 = LOGOUT
    {           ( Cmd_Logout )}
| _1 = NOOP
    {         ( Cmd_Noop )}
| _1 = ENABLE _2 = SP e = astring
    {                            ( Cmd_Enable e )}
| i = id
    {           ( i )}

id:
  _1 = ID _2 = SP _1_inlined1 = LP x = list_of_quoted_string _3 = RP
    {let l =     ( x ) in
                                                         ( Cmd_Id l )}

command_auth:
  c = c_append
    {                 ( c )}
| c = c_create
    {                 ( c )}
| c = c_delete
    {                 ( c )}
| c = c_examine
    {                  ( c )}
| c = c_idle
    {               ( debug "p:idle command
%!"; c )}
| c = c_list
    {                ( c )}
| c = c_lsub
    {               ( c )}
| c = c_rename
    {                 ( c )}
| c = c_select
    {                 ( c )}
| c = c_status
    {                 ( c )}
| c = c_subscribe
    {                    ( c )}
| c = c_unsubscribe
    {                      ( c )}

c_append:
  m = append_cmd _2 = SP l = flag_list_sp d = date_sp n = literal
    {                                                                  ( Cmd_Append (m, l, d, n) )}

append_cmd:
  _1 = APPEND _2 = SP m = mailbox
    {                            (debug "p:append_cmd %s
%!" m; (m))}

c_lappend:
  _1 = LAPPEND _2 = SP u = user _4 = SP m = mailbox _6 = SP l = literal
    {    (debug "p:c_lappend %s %s
%!" u m; Cmd_Lappend (u,m,l))}

literal:
  n = LITERAL
    {                (debug "p:literal %d
%!" n;Literal(n))}
| n = LITERALPL
    {                  (debug "p:literal plus %d
%!" n;LiteralPlus(n))}

c_create:
  _1 = CREATE _2 = SP m = mailbox
    {                            ( Cmd_Create m )}

c_delete:
  _1 = DELETE _2 = SP m = mailbox
    {                            ( Cmd_Delete m )}

c_idle:
  _1 = IDLE
    {         ( Cmd_Idle )}

c_done:
  _1 = DONE
    {         ( Authenticated(Cmd_Done) )}

c_examine:
  _1 = EXAMINE _2 = SP m = mailbox c = e_condstore
    {                                              ( Cmd_Examine (m,c <> None) )}

c_list:
  _1 = LIST _2 = SP m = mailbox _4 = SP m1 = mailbox
    {                                             ( Cmd_List (m, m1))}

c_lsub:
  _1 = LSUB _2 = SP m = mailbox _4 = SP m1 = mailbox
    {                                            ( Cmd_Lsub (m, m1))}

c_rename:
  _1 = RENAME _2 = SP m = mailbox _4 = SP m1 = mailbox
    {                                              ( Cmd_Rename (m, m1))}

c_select:
  _1 = SELECT _2 = SP m = mailbox c = e_condstore
    {                                             ( Cmd_Select (m, c <> None) )}

e_condstore:
  
    {    (None)}
| _1 = SP _2 = LP _3 = CONDSTORE _4 = RP
    {                          (Some ())}

c_status:
  _1 = STATUS _2 = SP m = mailbox _4 = SP l = status_list
    {                                                  ( Cmd_Status (m, l))}

mailbox:
  _1 = INBOX
    {          ( "INBOX" )}
| s = ATOM_CHARS
    {                   ( debug "p:mailbox
%!"; s )}
| s = quoted
    {               (Regex.dequote s)}

status_list:
  _1 = LP xs = loption_separated_nonempty_list_SP_status_att__ _3 = RP
    {let l =
  let x =     ( xs ) in
      ( x )
in
                                                          ( l )}

status_att:
  _1 = HIGHESTMODSEQ
    {                  ( Stat_Highestmodseq )}
| _1 = MESSAGES
    {             ( Stat_Messages )}
| _1 = RECENT
    {           ( Stat_Recent )}
| _1 = UIDNEXT
    {            ( Stat_Uidnext )}
| _1 = UIDVALIDITY
    {                ( Stat_Uidvalidity )}
| _1 = UNSEEN
    {           ( Stat_Unseen )}

c_subscribe:
  _1 = SUBSCRIBE _2 = SP m = mailbox
    {                               ( Cmd_Subscribe m )}

c_unsubscribe:
  _1 = UNSUBSCRIBE _2 = SP m = mailbox
    {                                 ( Cmd_Unsubscribe m )}

command_notauth:
  c = login
    {              ( c )}
| c = authenticate
    {                     ( c )}
| c = c_lappend
    {                  ( c )}
| _1 = STARTTLS
    {             ( Cmd_Starttls )}

login:
  _1 = LOGIN _2 = SP u = user _4 = SP p = password
    {                                          ( Cmd_Login (u, p) )}

user:
  a = astring
    {                ( Regex.dequote a )}

password:
  a = astring
    {                ( Regex.dequote a )}

astring:
  s = ATOM_CHARS
    {                   ( debug "p:astring
%!"; s )}
| q = quoted
    {               ( q )}

authenticate:
  _1 = AUTHENTICATE _2 = SP a = auth_type _4 = SP s = ATOM_CHARS
    {                                                     ( debug "p:authenticate command
%!"; Cmd_Authenticate (a,s) )}

auth_type:
  _1 = KERBEROS_V4
    {                ( Auth_Kerberos_v4 )}
| _1 = GSSAPI
    {           ( Auth_Gssapi )}
| _1 = SKEY
    {         ( Auth_Skey )}
| _1 = EXTERNAL
    {             ( Auth_External )}
| _1 = PLAIN
    {          ( debug "p:plain authentication
%!"; Auth_Plain )}

command_select:
  _1 = CHECK
    {          ( Cmd_Check )}
| _1 = CLOSE
    {          ( Cmd_Close )}
| _1 = EXPUNGE
    {            ( Cmd_Expunge )}
| c = c_search
    {                 ( debug "p:command_select
%!"; c )}
| c = c_fetch
    {                ( c )}
| c = c_store
    {                ( c )}
| c = c_copy
    {               ( c )}

c_copy:
  _1 = COPY _2 = SP seq = ATOM_CHARS _4 = SP m = mailbox
    {                                                (Cmd_Copy(Interpreter.get_sequence seq,m,false) )}
| _1 = UID _2 = SP _3 = COPY _4 = SP seq = ATOM_CHARS _6 = SP m = mailbox
    {                                                         (Cmd_Copy(Interpreter.get_sequence seq,m,true) )}

c_store:
  _1 = STORE _2 = SP seq = ATOM_CHARS _4 = SP un = unchangedsince_sp f = s_flags _7 = SP v = s_flags_value
    {    ( debug "p:store
%!"; Cmd_Store (Interpreter.get_sequence seq, f, v, un, false) )}
| _1 = UID _2 = SP _3 = STORE _4 = SP seq = ATOM_CHARS _6 = SP un = unchangedsince_sp f = s_flags _9 = SP v = s_flags_value
    {    ( debug "p:store
%!"; Cmd_Store (Interpreter.get_sequence seq, f, v, un, true) )}

unchangedsince_sp:
  
    {    (None)}
| _1 = LP _2 = UNCHANGEDSINCE _3 = SP modseq = ATOM_CHARS _5 = RP _6 = SP
    {                                                        (debug "p:unchangedsince %s
%!" modseq; Some (Int64.of_string modseq))}

s_flags_value:
  l = flag_list
    {                  (l)}
| l = flag_sp_list
    {                     (l)}

s_flags:
  _1 = FLAGS
    {          (Store_Flags)}
| _1 = FLAGSSILENT
    {                (Store_FlagsSilent)}
| _1 = FLAGSPL
    {            (Store_PlusFlags)}
| _1 = FLAGSSILENTPL
    {                  (Store_PlusFlagsSilent)}
| _1 = FLAGSMIN
    {             (Store_MinusFlags)}
| _1 = FLAGSSILENTMIN
    {                   (Store_MinusFlagsSilent)}

c_fetch:
  _1 = FETCH _2 = SP seq = ATOM_CHARS _4 = SP a = fetch_args c = changedsince_sp
    {                                                                         (Cmd_Fetch(Interpreter.get_sequence seq,a,c,false))}
| _1 = UID _2 = SP _3 = FETCH _4 = SP seq = ATOM_CHARS _6 = SP a = fetch_args c = changedsince_sp
    {                                                                                  (Cmd_Fetch(Interpreter.get_sequence seq,a,c,true))}

changedsince_sp:
  
    {    (None)}
| _1 = SP _2 = LP _3 = CHANGEDSINCE _4 = SP modseq = ATOM_CHARS _6 = RP
    {                                                       (debug "p:changedsince %s
%!" modseq; Some (Int64.of_string modseq))}

fetch_args:
  s = fetch_macro
    {                    (FetchMacro(s))}
| s = fetch_att_list
    {                       (s)}

fetch_macro:
  _1 = ALL
    {        (Fetch_All)}
| _1 = FAST
    {         (Fetch_Fast)}
| _1 = FULL
    {         (Fetch_Full)}

fetch_att_list:
  s = fetch_att
    {                  (FetchAtt([s]))}
| _1 = LP xs = loption_separated_nonempty_list_SP_fetch_att__ _3 = RP
    {let s =
  let x =     ( xs ) in
      ( x )
in
                                                         ( debug "p:fetch-att list
%!"; FetchAtt(s) )}

fetch_att:
  _1 = ENVELOPE
    {             (Fetch_Envelope)}
| _1 = FLAGS
    {          (Fetch_Flags)}
| _1 = INTERNALDATE
    {                 (Fetch_Internaldate)}
| _1 = MODSEQ
    {           (Fetch_Modseq)}
| _1 = RFC822
    {           (Fetch_Rfc822)}
| _1 = RFC822HEADER
    {                 (Fetch_Rfc822Header)}
| _1 = RFC822SIZE
    {               (Fetch_Rfc822Size)}
| _1 = RFC822TEXT
    {               (Fetch_Rfc822Text)}
| _1 = BODY
    {         (Fetch_Body)}
| s = BODYFETCH
    {                   (debug "p:fetch_att body %s
%!" s; let (sec,parts) =
    Fetchregex.parse_fetch_section s in Fetch_BodySection(sec,parts))}
| s = BODYPEEK
    {                  (debug "p:fetch_att body %s
%!" s; let (sec,parts) =
    Fetchregex.parse_fetch_section s in Fetch_BodyPeekSection(sec,parts))}
| _1 = BODYSTRUCTURE
    {                  (Fetch_Bodystructure)}
| _1 = UID
    {        (Fetch_Uid)}

c_search:
  _1 = SEARCH _2 = SP c = charset_sp l = search_keys
    {                                                (debug "p:c_search
%!"; Cmd_Search (c,l, false))}
| _1 = UID _2 = SP _3 = SEARCH _4 = SP c = charset_sp l = search_keys
    {                                                         (debug "p:c_search
%!"; Cmd_Search(c,l, true))}

charset_sp:
  
    {    (None)}
| c = charset _2 = SP
    {                    (Some c)}

charset:
  _1 = CHARSET _2 = SP a = ATOM_CHARS
    {                                (a)}

search_keys:
  xs = loption_separated_nonempty_list_SP_op_search_keys__
    {let s =     ( xs ) in
                                          (debug "p:list_search_keys
%!"; KeyList(s))}

op_search_keys:
  s = op_search_key
    {                      (debug "p:key
%!"; s)}
| _1 = LP xs = loption_separated_nonempty_list_SP_op_search_keys__ _3 = RP
    {let s =
  let x =     ( xs ) in
      ( x )
in
                                                              ( debug "p:list key
%!"; KeyList(s) )}
| _1 = NOT _2 = SP s = op_search_keys
    {                                (debug "p:not key
%!"; NotKey(s))}
| _1 = OR _2 = SP s1 = op_search_keys _4 = SP s2 = op_search_keys
    {                                                         (debug "p:or key
%!"; OrKey(s1,s2))}

op_search_key:
  s = search_key
    {                   (debug "p:op_search_key
%!"; Key s)}

search_key:
  _1 = ALL
    {        (Search_All)}
| _1 = ANSWERED
    {             (Search_Answered)}
| _1 = BCC _2 = SP s = ATOM_CHARS
    {                            (Search_Bcc (s))}
| _1 = BEFORE _2 = SP s = s_date
    {                           (Search_Before ( s))}
| _1 = BODY _2 = SP s = ATOM_CHARS
    {                             (Search_Body (s))}
| _1 = CC _2 = SP s = ATOM_CHARS
    {                            (Search_Cc (s))}
| _1 = DELETED
    {            (Search_Deleted)}
| _1 = FLAGGED
    {            (Search_Flagged)}
| _1 = FROM _2 = SP s = ATOM_CHARS
    {                             (Search_From (s) )}
| _1 = KEYWORD s = ATOM_CHARS
    {                            (Search_Keyword (s) )}
| m = modseq
    {               ( debug "p: search_key modseq
%!"; m )}
| _1 = NEW
    {        (Search_New)}
| _1 = OLD
    {        (Search_Old)}
| _1 = ON _2 = SP s = s_date
    {                      (Search_On(s))}
| _1 = RECENT
    {           (Search_Recent)}
| _1 = SEEN
    {         (Search_Seen)}
| _1 = SINCE _2 = SP s = s_date
    {                          (Search_Since(s))}
| _1 = SUBJECT _2 = SP s = ATOM_CHARS
    {                                (Search_Subject (s))}
| _1 = TEXT _2 = SP s = ATOM_CHARS
    {                             (Search_Text (s) )}
| _1 = TO _2 = SP s = ATOM_CHARS
    {                           (Search_To (s) )}
| _1 = UNANSWERED
    {               (Search_Unanswered)}
| _1 = UNDELETED
    {              (Search_Undeleted)}
| _1 = UNFLAGGED
    {              (Search_Unflagged)}
| _1 = UNKEYWORD _2 = SP s = ATOM_CHARS
    {                                  (Search_Unkeyword (s) )}
| _1 = UNSEEN
    {           (Search_Unseen)}
| _1 = DRAFT
    {          (Search_Draft)}
| h = s_header
    {                 (h)}
| _1 = LARGER _2 = SP n = ATOM_CHARS
    {                               (Search_Larger (int_of_string n))}
| _1 = SENTBEFORE _2 = SP s = s_date
    {                               (Search_Sentbefore (s))}
| _1 = SENTON _2 = SP d = s_date
    {                           (debug "p:s_senton
%!"; Search_Senton(d))}
| _1 = SENTSINCE _2 = SP s = s_date
    {                              (Search_Sentsince (s))}
| _1 = SMALLER _2 = SP n = ATOM_CHARS
    {                                (Search_Smaller(int_of_string n))}
| _1 = UID _2 = SP s = ATOM_CHARS
    {                            (Search_UID (Interpreter.get_sequence s))}
| _1 = UNDRAFT
    {            (Search_Undraft)}
| s = ATOM_CHARS
    {                   (Search_SeqSet (Interpreter.get_sequence s))}

modseq:
  _1 = MODSEQ _2 = SP n = ATOM_CHARS
    {                               (debug "p: search modseq %s
%!" n; Search_Modseq (None, Int64.of_string n))}
| _1 = MODSEQ _2 = SP s = astring _4 = SP t = modseq_entry_type _6 = SP n = ATOM_CHARS
    {    ( debug "p: search modseq %s
%!" n; Search_Modseq (Some (s,t), Int64.of_string n))}

modseq_entry_type:
  _1 = SHARED
    {           (debug "p: modseq entry shared
%!"; Entry_Shared)}
| _1 = PRIV
    {         (debug "p: modseq entry priv
%!"; Entry_Priv)}
| _1 = ALL
    {        (debug "p: modseq entry all
%!"; Entry_All)}

s_header:
  _1 = HEADER _2 = SP _3 = SUBJECT _4 = SP s2 = ATOM_CHARS
    {                                             (Search_Header ("SUBJECT",s2))}
| _1 = HEADER _2 = SP s1 = ATOM_CHARS _4 = SP s2 = ATOM_CHARS
    {                                                   (Search_Header (s1,s2))}

s_date:
  q = quoted
    {               (debug "p:s_date %s
%!" q; Dates.imapd_to_date_exn q)}
| s = ATOM_CHARS
    {                   (debug "p:s_date %s
%!" s; Dates.imapd_to_date_exn s)}

flag_list_sp:
  
    {    (None)}
| l = flag_list _2 = SP
    {                      (Some l)}

flag_list:
  _1 = LP x = flag_sp_list _3 = RP
    {let l =     ( x ) in
                                        ( debug "p:flag_list
%!"; l )}

flag_sp_list:
  xs = loption_separated_nonempty_list_SP_flag__
    {let l =     ( xs ) in
                                 ( debug "p:flag_sp_list
%!"; l )}

flag:
  _1 = FLANSWERED
    {               (debug "p:flag 
%!"; Flags_Answered)}
| _1 = FLFLAGGED
    {              (debug "p:flag 
%!"; Flags_Flagged)}
| _1 = FLDELETED
    {              (debug "p:flag 
%!"; Flags_Deleted)}
| _1 = FLSEEN
    {           (debug "p:flag 
%!"; Flags_Seen)}
| _1 = FLDRAFT
    {            (debug "p:flag 
%!"; Flags_Draft)}
| f = FLEXTENSION
    {                    (debug "p:flag 
%!"; Flags_Extention (f) )}
| f = ATOM_CHARS
    {                   (debug "p:flag 
%!"; Flags_Keyword (f) )}

date_sp:
  
    {    (None)}
| d = date _2 = SP
    {                 (debug "p:sp_date %s
%!" d; Some (Dates.imapd_to_date_time_exn d))}

date:
  d = DATE
    {           (debug "p:date %s
%!" d; d)}

%%
