State 0:
## Known stack suffix:
##
## LR(1) items:
s' -> . s [ # ]
## Transitions:
-- On EOF shift to state 1
-- On A shift to state 2
-- On s shift to state 10
## Reductions:

State 1:
## Known stack suffix:
## EOF
## LR(1) items:
s -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production s -> EOF

State 2:
## Known stack suffix:
## A
## LR(1) items:
s -> A . B A EOF [ # ]
s -> A . A B A EOF [ # ]
## Transitions:
-- On B shift to state 3
-- On A shift to state 6
## Reductions:

State 3:
## Known stack suffix:
## A B
## LR(1) items:
s -> A B . A EOF [ # ]
## Transitions:
-- On A shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## A B A
## LR(1) items:
s -> A B A . EOF [ # ]
## Transitions:
-- On EOF shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## A B A EOF
## LR(1) items:
s -> A B A EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production s -> A B A EOF

State 6:
## Known stack suffix:
## A A
## LR(1) items:
s -> A A . B A EOF [ # ]
## Transitions:
-- On B shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## A A B
## LR(1) items:
s -> A A B . A EOF [ # ]
## Transitions:
-- On A shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## A A B A
## LR(1) items:
s -> A A B A . EOF [ # ]
## Transitions:
-- On EOF shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## A A B A EOF
## LR(1) items:
s -> A A B A EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production s -> A A B A EOF

State 10:
## Known stack suffix:
## s
## LR(1) items:
s' -> s . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept s

