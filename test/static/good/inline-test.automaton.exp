State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On INT shift to state 1
-- On prog shift to state 2
-- On exp shift to state 3
## Reductions:

State 1:
## Known stack suffix:
## INT
## LR(1) items:
exp -> INT . [ TIMES PLUS EOF ]
## Transitions:
## Reductions:
-- On TIMES reduce production exp -> INT
-- On PLUS reduce production exp -> INT
-- On EOF reduce production exp -> INT

State 2:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On # accept prog

State 3:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES PLUS EOF ]
exp -> exp . TIMES exp [ TIMES PLUS EOF ]
prog -> exp . EOF [ # ]
## Transitions:
-- On TIMES shift to state 4
-- On PLUS shift to state 6
-- On EOF shift to state 8
## Reductions:

State 4:
## Known stack suffix:
## exp TIMES
## LR(1) items:
exp -> exp TIMES . exp [ TIMES PLUS EOF ]
## Transitions:
-- On INT shift to state 1
-- On exp shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## exp TIMES exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES PLUS EOF ]
exp -> exp . TIMES exp [ TIMES PLUS EOF ]
exp -> exp TIMES exp . [ TIMES PLUS EOF ]
## Transitions:
## Reductions:
-- On TIMES reduce production exp -> exp TIMES exp
-- On PLUS reduce production exp -> exp TIMES exp
-- On EOF reduce production exp -> exp TIMES exp

State 6:
## Known stack suffix:
## exp PLUS
## LR(1) items:
exp -> exp PLUS . exp [ TIMES PLUS EOF ]
## Transitions:
-- On INT shift to state 1
-- On exp shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## exp PLUS exp
## LR(1) items:
exp -> exp . PLUS exp [ TIMES PLUS EOF ]
exp -> exp PLUS exp . [ TIMES PLUS EOF ]
exp -> exp . TIMES exp [ TIMES PLUS EOF ]
## Transitions:
-- On TIMES shift to state 4
## Reductions:
-- On PLUS reduce production exp -> exp PLUS exp
-- On EOF reduce production exp -> exp PLUS exp

State 8:
## Known stack suffix:
## exp EOF
## LR(1) items:
prog -> exp EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production prog -> exp EOF

