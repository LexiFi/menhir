State 0:
## Known stack suffix:
##
## LR(1) items:
commandline' -> . commandline [ # ]
## Transitions:
-- On NUMERAL shift to state 1
-- On LET shift to state 2
-- On term shift to state 30
-- On infix_term_ shift to state 13
-- On infix_term shift to state 14
-- On commandline shift to state 32
## Reductions:

State 1:
## Known stack suffix:
## NUMERAL
## LR(1) items:
infix_term -> NUMERAL . [ INFIXOP0 ]
infix_term_ -> NUMERAL . [ IN EOF AND ]
## Transitions:
## Reductions:
-- On INFIXOP0
--   reduce production infix_term -> NUMERAL
-- On IN EOF AND
--   reduce production infix_term_ -> NUMERAL

State 2:
## Known stack suffix:
## LET
## LR(1) items:
commandline -> LET . NAME EQUAL term EOF [ # ]
term -> LET . NAME EQUAL infix_term IN term [ EOF ]
term -> LET . REC separated_nonempty_list(AND,recursive_clause) IN term [ EOF ]
## Transitions:
-- On REC shift to state 3
-- On NAME shift to state 24
## Reductions:

State 3:
## Known stack suffix:
## LET REC
## LR(1) items:
term -> LET REC . separated_nonempty_list(AND,recursive_clause) IN term [ IN EOF AND ]
## Transitions:
-- On NAME shift to state 4
-- On separated_nonempty_list(AND,recursive_clause) shift to state 18
-- On recursive_clause shift to state 21
## Reductions:

State 4:
## Known stack suffix:
## NAME
## LR(1) items:
recursive_clause -> NAME . EQUAL term [ IN AND ]
## Transitions:
-- On EQUAL shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## NAME EQUAL
## LR(1) items:
recursive_clause -> NAME EQUAL . term [ IN AND ]
## Transitions:
-- On NUMERAL shift to state 1
-- On LET shift to state 6
-- On term shift to state 17
-- On infix_term_ shift to state 13
-- On infix_term shift to state 14
## Reductions:

State 6:
## Known stack suffix:
## LET
## LR(1) items:
term -> LET . NAME EQUAL infix_term IN term [ IN EOF AND ]
term -> LET . REC separated_nonempty_list(AND,recursive_clause) IN term [ IN EOF AND ]
## Transitions:
-- On REC shift to state 3
-- On NAME shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LET NAME
## LR(1) items:
term -> LET NAME . EQUAL infix_term IN term [ IN EOF AND ]
## Transitions:
-- On EQUAL shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## LET NAME EQUAL
## LR(1) items:
term -> LET NAME EQUAL . infix_term IN term [ IN EOF AND ]
## Transitions:
-- On NUMERAL shift to state 9
-- On infix_term shift to state 10
## Reductions:

State 9:
## Known stack suffix:
## NUMERAL
## LR(1) items:
infix_term -> NUMERAL . [ IN EOF AND ]
## Transitions:
## Reductions:
-- On IN EOF AND
--   reduce production infix_term -> NUMERAL

State 10:
## Known stack suffix:
## LET NAME EQUAL infix_term
## LR(1) items:
term -> LET NAME EQUAL infix_term . IN term [ IN EOF AND ]
## Transitions:
-- On IN shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## LET NAME EQUAL infix_term IN
## LR(1) items:
term -> LET NAME EQUAL infix_term IN . term [ IN EOF AND ]
## Transitions:
-- On NUMERAL shift to state 1
-- On LET shift to state 6
-- On term shift to state 12
-- On infix_term_ shift to state 13
-- On infix_term shift to state 14
## Reductions:

State 12:
## Known stack suffix:
## LET NAME EQUAL infix_term IN term
## LR(1) items:
term -> LET NAME EQUAL infix_term IN term . [ IN EOF AND ]
## Transitions:
## Reductions:
-- On IN EOF AND
--   reduce production term -> LET NAME EQUAL infix_term IN term

State 13:
## Known stack suffix:
## infix_term_
## LR(1) items:
term -> infix_term_ . [ IN EOF AND ]
## Transitions:
## Reductions:
-- On IN EOF AND
--   reduce production term -> infix_term_

State 14:
## Known stack suffix:
## infix_term
## LR(1) items:
infix_term_ -> infix_term . INFIXOP0 infix_term [ IN EOF AND ]
## Transitions:
-- On INFIXOP0 shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## infix_term INFIXOP0
## LR(1) items:
infix_term_ -> infix_term INFIXOP0 . infix_term [ IN EOF AND ]
## Transitions:
-- On NUMERAL shift to state 9
-- On infix_term shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## infix_term INFIXOP0 infix_term
## LR(1) items:
infix_term_ -> infix_term INFIXOP0 infix_term . [ IN EOF AND ]
## Transitions:
## Reductions:
-- On IN EOF AND
--   reduce production infix_term_ -> infix_term INFIXOP0 infix_term

State 17:
## Known stack suffix:
## NAME EQUAL term
## LR(1) items:
recursive_clause -> NAME EQUAL term . [ IN AND ]
## Transitions:
## Reductions:
-- On IN AND
--   reduce production recursive_clause -> NAME EQUAL term

State 18:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause)
## LR(1) items:
term -> LET REC separated_nonempty_list(AND,recursive_clause) . IN term [ IN EOF AND ]
## Transitions:
-- On IN shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause) IN
## LR(1) items:
term -> LET REC separated_nonempty_list(AND,recursive_clause) IN . term [ IN EOF AND ]
## Transitions:
-- On NUMERAL shift to state 1
-- On LET shift to state 6
-- On term shift to state 20
-- On infix_term_ shift to state 13
-- On infix_term shift to state 14
## Reductions:

State 20:
## Known stack suffix:
## LET REC separated_nonempty_list(AND,recursive_clause) IN term
## LR(1) items:
term -> LET REC separated_nonempty_list(AND,recursive_clause) IN term . [ IN EOF AND ]
## Transitions:
## Reductions:
-- On IN EOF AND
--   reduce production term -> LET REC separated_nonempty_list(AND,recursive_clause) IN term

State 21:
## Known stack suffix:
## recursive_clause
## LR(1) items:
separated_nonempty_list(AND,recursive_clause) -> recursive_clause . [ IN ]
separated_nonempty_list(AND,recursive_clause) -> recursive_clause . AND separated_nonempty_list(AND,recursive_clause) [ IN ]
## Transitions:
-- On AND shift to state 22
## Reductions:
-- On IN
--   reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause

State 22:
## Known stack suffix:
## recursive_clause AND
## LR(1) items:
separated_nonempty_list(AND,recursive_clause) -> recursive_clause AND . separated_nonempty_list(AND,recursive_clause) [ IN ]
## Transitions:
-- On NAME shift to state 4
-- On separated_nonempty_list(AND,recursive_clause) shift to state 23
-- On recursive_clause shift to state 21
## Reductions:

State 23:
## Known stack suffix:
## recursive_clause AND separated_nonempty_list(AND,recursive_clause)
## LR(1) items:
separated_nonempty_list(AND,recursive_clause) -> recursive_clause AND separated_nonempty_list(AND,recursive_clause) . [ IN ]
## Transitions:
## Reductions:
-- On IN
--   reduce production separated_nonempty_list(AND,recursive_clause) -> recursive_clause AND separated_nonempty_list(AND,recursive_clause)

State 24:
## Known stack suffix:
## LET NAME
## LR(1) items:
commandline -> LET NAME . EQUAL term EOF [ # ]
term -> LET NAME . EQUAL infix_term IN term [ EOF ]
## Transitions:
-- On EQUAL shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## LET NAME EQUAL
## LR(1) items:
commandline -> LET NAME EQUAL . term EOF [ # ]
term -> LET NAME EQUAL . infix_term IN term [ EOF ]
## Transitions:
-- On NUMERAL shift to state 26
-- On LET shift to state 6
-- On term shift to state 27
-- On infix_term_ shift to state 13
-- On infix_term shift to state 29
## Reductions:

State 26:
## Known stack suffix:
## NUMERAL
## LR(1) items:
infix_term -> NUMERAL . [ INFIXOP0 IN ]
infix_term_ -> NUMERAL . [ EOF ]
## Transitions:
## Reductions:
-- On INFIXOP0 IN
--   reduce production infix_term -> NUMERAL
-- On EOF
--   reduce production infix_term_ -> NUMERAL

State 27:
## Known stack suffix:
## LET NAME EQUAL term
## LR(1) items:
commandline -> LET NAME EQUAL term . EOF [ # ]
## Transitions:
-- On EOF shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## LET NAME EQUAL term EOF
## LR(1) items:
commandline -> LET NAME EQUAL term EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production commandline -> LET NAME EQUAL term EOF

State 29:
## Known stack suffix:
## LET NAME EQUAL infix_term
## LR(1) items:
infix_term_ -> infix_term . INFIXOP0 infix_term [ EOF ]
term -> LET NAME EQUAL infix_term . IN term [ EOF ]
## Transitions:
-- On INFIXOP0 shift to state 15
-- On IN shift to state 11
## Reductions:

State 30:
## Known stack suffix:
## term
## LR(1) items:
commandline -> term . EOF [ # ]
## Transitions:
-- On EOF shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## term EOF
## LR(1) items:
commandline -> term EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production commandline -> term EOF

State 32:
## Known stack suffix:
## commandline
## LR(1) items:
commandline' -> commandline . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept commandline

