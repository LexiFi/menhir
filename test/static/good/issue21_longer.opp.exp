%start commandline
%token AND
%token EOF
%token EQUAL
%token IN
%token INFIXOP0
%token LET
%token NAME
%token NUMERAL
%token REC
%type <unit> commandline
%%

separated_nonempty_list_AND_recursive_clause_:
  x = recursive_clause
    {    ( [ x ] )} [@name one_AND_recursive_clause]
| x = recursive_clause _2 = AND xs = separated_nonempty_list_AND_recursive_clause_
    {    ( x :: xs )} [@name more_AND_recursive_clause]

commandline:
  _1 = LET f = NAME _3 = EQUAL e = term _5 = EOF
    {    ( () )}
| _1 = term _2 = EOF
    {    ( () )}

term:
  e = infix_term_
    {    ( e )}
| _1 = LET f = NAME _3 = EQUAL c1 = infix_term _5 = IN c2 = term
    {    ( () )}
| _1 = LET _2 = REC fs = separated_nonempty_list_AND_recursive_clause_ _4 = IN c2 = term
    {    ( () )}

infix_term:
  n = NUMERAL
    {    ( () )}

infix_term_:
  n = NUMERAL
    {    ( () )}
| e2 = infix_term _2 = INFIXOP0 e3 = infix_term
    {    ( () )}

recursive_clause:
  f = NAME _2 = EQUAL c = term
    {    ( () )}

%%
