File "jasmc.mly", line 153, characters 7-10:
Warning: the token EOF is unused.
Grammar has 105 nonterminal symbols, among which 1 start symbols.
Grammar has 71 terminal symbols.
Grammar has 222 productions.
nullable(var_expr) = false
nullable(throws_expr) = false
nullable(table_list) = false
nullable(table_entry) = false
nullable(table_default) = false
nullable(table_args) = false
nullable(table) = false
nullable(super_spec) = false
nullable(stmnt) = true
nullable(statements) = false
nullable(statement) = false
nullable(stackmap) = false
nullable(stack_offset_def) = true
nullable(stack_map_frame_desc) = true
nullable(stack_items) = true
nullable(stack_item_expr) = false
nullable(stack_item) = false
nullable(source_spec) = true
nullable(simple_instruction) = false
nullable(signature_spec) = true
nullable(signature_expr) = false
nullable(set_expr) = false
nullable(sep) = true
nullable(optional_signature) = true
nullable(optional_default) = true
nullable(methods) = true
nullable(method_spec) = false
nullable(method_list) = false
nullable(lookup_list) = false
nullable(lookup_entry) = false
nullable(lookup_default) = false
nullable(lookup_args) = false
nullable(lookup) = false
nullable(line_expr) = false
nullable(limit_expr) = false
nullable(label) = false
nullable(jasmin_header) = false
nullable(jas_file) = false
nullable(item) = false
nullable(instruction) = false
nullable(inners) = true
nullable(inner_spec) = false
nullable(inner_outer) = true
nullable(inner_name) = true
nullable(inner_list) = false
nullable(inner_inner) = true
nullable(implements_spec) = false
nullable(implements_list) = false
nullable(implements) = true
nullable(generic_spec) = false
nullable(generic_list) = false
nullable(generic_expr) = false
nullable(generic_attributes) = true
nullable(fields) = true
nullable(field_start) = false
nullable(field_spec) = false
nullable(field_list) = false
nullable(field_exts) = true
nullable(field_ext_list) = false
nullable(field_ext_expr) = false
nullable(endstack) = false
nullable(endmethod) = false
nullable(endfield) = false
nullable(endannotationsep) = false
nullable(endannotation) = false
nullable(enclosing_spec) = true
nullable(directive) = false
nullable(deprecated_spec) = true
nullable(deprecated_expr) = true
nullable(defstack_same_expr) = true
nullable(defstack_same) = false
nullable(defstack) = false
nullable(defmethod) = false
nullable(debug_spec) = false
nullable(debug_list) = false
nullable(debug_extension) = true
nullable(complex_instruction) = false
nullable(classname) = false
nullable(class_spec) = false
nullable(catch_expr) = false
nullable(bytecode_spec) = true
nullable(any_item) = false
nullable(annotations) = true
nullable(ann_value_list) = false
nullable(ann_value_items) = false
nullable(ann_value) = false
nullable(ann_nest) = false
nullable(ann_met_expr) = false
nullable(ann_def_val) = false
nullable(ann_def_spec) = false
nullable(ann_def_expr) = false
nullable(ann_cls_spec) = false
nullable(ann_cls_list) = false
nullable(ann_cls_expr) = false
nullable(ann_clf_expr) = false
nullable(ann_arglist) = true
nullable(ann_arg_spec) = false
nullable(ann_arg_list) = false
nullable(ann_arg_expr) = false
nullable(ann_ann_value) = false
nullable(ann_ann_list) = false
nullable(access_list) = true
nullable(access_items) = false
nullable(access_item) = false
nullable(access) = true
first(var_expr) = Int
first(throws_expr) = Word
first(table_list) = Word Int
first(table_entry) = Word Int
first(table_default) = DEFAULT
first(table_args) = Int
first(table) = Int
first(super_spec) = DSUPER
first(stmnt) = error Word TABLESWITCH LOOKUPSWITCH Int Insn DVAR DTHROWS DSTACK DSIGNATURE DSET DLINE DLIMIT DDEPRECATED DCATCH DATTRIBUTE DANNOTATION
first(statements) = error Word TABLESWITCH SEP LOOKUPSWITCH Int Insn DVAR DTHROWS DSTACK DSIGNATURE DSET DLINE DLIMIT DDEPRECATED DCATCH DATTRIBUTE DANNOTATION
first(statement) = error Word TABLESWITCH SEP LOOKUPSWITCH Int Insn DVAR DTHROWS DSTACK DSIGNATURE DSET DLINE DLIMIT DDEPRECATED DCATCH DATTRIBUTE DANNOTATION
first(stackmap) = USE SEP
first(stack_offset_def) = OFFSET
first(stack_map_frame_desc) = STACK OFFSET LOCALS
first(stack_items) = STACK LOCALS
first(stack_item_expr) = STACK LOCALS
first(stack_item) = STACK LOCALS
first(source_spec) = DSOURCE
first(simple_instruction) = Insn
first(signature_spec) = DSIGNATURE
first(signature_expr) = Str
first(set_expr) = Word
first(sep) = SEP
first(optional_signature) = SIGNATURE
first(optional_default) = EQ
first(methods) = DMETHOD
first(method_spec) = DMETHOD
first(method_list) = DMETHOD
first(lookup_list) = Int
first(lookup_entry) = Int
first(lookup_default) = DEFAULT
first(lookup_args) = SEP
first(lookup) = SEP
first(line_expr) = Int
first(limit_expr) = Word STACK LOCALS
first(label) = Word Int
first(jasmin_header) = DSOURCE DINTERFACE DCLASS DBYTECODE
first(jas_file) = SEP DSOURCE DINTERFACE DCLASS DBYTECODE
first(item) = Str Num Int
first(instruction) = TABLESWITCH LOOKUPSWITCH Insn
first(inners) = DINNER
first(inner_spec) = DINNER
first(inner_outer) = OUTER
first(inner_name) = Word
first(inner_list) = DINNER
first(inner_inner) = INNER
first(implements_spec) = DIMPLEMENTS
first(implements_list) = DIMPLEMENTS
first(implements) = DIMPLEMENTS
first(generic_spec) = DATTRIBUTE
first(generic_list) = DATTRIBUTE
first(generic_expr) = Word
first(generic_attributes) = DATTRIBUTE
first(fields) = DFIELD
first(field_start) = Word VOLATILE VARARGS TRANSIENT SYNTHETIC SYNCHRONIZED STRICT STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM BRIDGE ANNOTATION ABSTRACT
first(field_spec) = DFIELD
first(field_list) = DFIELD
first(field_exts) = DSIGNATURE DDEPRECATED DATTRIBUTE DANNOTATION
first(field_ext_list) = DSIGNATURE DDEPRECATED DATTRIBUTE DANNOTATION
first(field_ext_expr) = DSIGNATURE DDEPRECATED DATTRIBUTE DANNOTATION
first(endstack) = DEND
first(endmethod) = DEND
first(endfield) = DEND
first(endannotationsep) = DEND
first(endannotation) = DEND
first(enclosing_spec) = DENCLOSING
first(directive) = DVAR DTHROWS DSTACK DSIGNATURE DSET DLINE DLIMIT DDEPRECATED DCATCH DATTRIBUTE DANNOTATION
first(deprecated_spec) = DDEPRECATED
first(deprecated_expr) = 
first(defstack_same_expr) = Int
first(defstack_same) = LOCALS Int
first(defstack) = SEP
first(defmethod) = DMETHOD
first(debug_spec) = DDEBUG
first(debug_list) = DDEBUG
first(debug_extension) = DDEBUG
first(complex_instruction) = TABLESWITCH LOOKUPSWITCH
first(classname) = Word
first(class_spec) = DINTERFACE DCLASS
first(catch_expr) = Word
first(bytecode_spec) = DBYTECODE
first(any_item) = Word Str Num Int
first(annotations) = DANNOTATION
first(ann_value_list) = Word Str Num Int DANNOTATION
first(ann_value_items) = Word Str Num Int
first(ann_value) = Word Str Num Int
first(ann_nest) = SEP
first(ann_met_expr) = VISIBLEPARAM VISIBLE INVISIBLEPARAM INVISIBLE
first(ann_def_val) = Word
first(ann_def_spec) = DEFAULT
first(ann_def_expr) = Word
first(ann_cls_spec) = DANNOTATION
first(ann_cls_list) = DANNOTATION
first(ann_cls_expr) = DANNOTATION
first(ann_clf_expr) = VISIBLE INVISIBLE
first(ann_arglist) = Word
first(ann_arg_spec) = Word
first(ann_arg_list) = Word
first(ann_arg_expr) = Word
first(ann_ann_value) = DANNOTATION
first(ann_ann_list) = DANNOTATION
first(access_list) = VOLATILE VARARGS TRANSIENT SYNTHETIC SYNCHRONIZED STRICT STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM BRIDGE ANNOTATION ABSTRACT
first(access_items) = VOLATILE VARARGS TRANSIENT SYNTHETIC SYNCHRONIZED STRICT STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM BRIDGE ANNOTATION ABSTRACT
first(access_item) = VOLATILE VARARGS TRANSIENT SYNTHETIC SYNCHRONIZED STRICT STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM BRIDGE ANNOTATION ABSTRACT
first(access) = VOLATILE VARARGS TRANSIENT SYNTHETIC SYNCHRONIZED STRICT STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM BRIDGE ANNOTATION ABSTRACT
minimal(var_expr) = (* 4 *) Int IS Word Word
minimal(throws_expr) = (* 1 *) Word
minimal(table_list) = (* 2 *) Word SEP
minimal(table_entry) = (* 2 *) Word SEP
minimal(table_default) = (* 3 *) DEFAULT COLON Word
minimal(table_args) = (* 2 *) Int SEP
minimal(table) = (* 7 *) Int SEP Word SEP DEFAULT COLON Word
minimal(super_spec) = (* 3 *) DSUPER Word SEP
minimal(stmnt) = (* 0 *)
minimal(statements) = (* 1 *) SEP
minimal(statement) = (* 1 *) SEP
minimal(stackmap) = (* 3 *) SEP DEND STACK
minimal(stack_offset_def) = (* 0 *)
minimal(stack_map_frame_desc) = (* 0 *)
minimal(stack_items) = (* 0 *)
minimal(stack_item_expr) = (* 2 *) LOCALS Word
minimal(stack_item) = (* 3 *) LOCALS Word SEP
minimal(source_spec) = (* 0 *)
minimal(simple_instruction) = (* 1 *) Insn
minimal(signature_spec) = (* 0 *)
minimal(signature_expr) = (* 1 *) Str
minimal(set_expr) = (* 2 *) Word Word
minimal(sep) = (* 0 *)
minimal(optional_signature) = (* 0 *)
minimal(optional_default) = (* 0 *)
minimal(methods) = (* 0 *)
minimal(method_spec) = (* 6 *) DMETHOD Word SEP DEND METHOD SEP
minimal(method_list) = (* 6 *) DMETHOD Word SEP DEND METHOD SEP
minimal(lookup_list) = (* 4 *) Int COLON Word SEP
minimal(lookup_entry) = (* 4 *) Int COLON Word SEP
minimal(lookup_default) = (* 3 *) DEFAULT COLON Word
minimal(lookup_args) = (* 1 *) SEP
minimal(lookup) = (* 8 *) SEP Int COLON Word SEP DEFAULT COLON Word
minimal(line_expr) = (* 1 *) Int
minimal(limit_expr) = (* 2 *) LOCALS Int
minimal(label) = (* 2 *) Word COLON
minimal(jasmin_header) = (* 6 *) DCLASS Word SEP DSUPER Word SEP
minimal(jas_file) = (* 6 *) DCLASS Word SEP DSUPER Word SEP
minimal(item) = (* 1 *) Int
minimal(instruction) = (* 1 *) Insn
minimal(inners) = (* 0 *)
minimal(inner_spec) = (* 3 *) DINNER CLASS SEP
minimal(inner_outer) = (* 0 *)
minimal(inner_name) = (* 0 *)
minimal(inner_list) = (* 3 *) DINNER CLASS SEP
minimal(inner_inner) = (* 0 *)
minimal(implements_spec) = (* 3 *) DIMPLEMENTS Word SEP
minimal(implements_list) = (* 3 *) DIMPLEMENTS Word SEP
minimal(implements) = (* 0 *)
minimal(generic_spec) = (* 4 *) DATTRIBUTE Word Str SEP
minimal(generic_list) = (* 4 *) DATTRIBUTE Word Str SEP
minimal(generic_expr) = (* 2 *) Word Str
minimal(generic_attributes) = (* 0 *)
minimal(fields) = (* 0 *)
minimal(field_start) = (* 3 *) Word Word SEP
minimal(field_spec) = (* 4 *) DFIELD Word Word SEP
minimal(field_list) = (* 4 *) DFIELD Word Word SEP
minimal(field_exts) = (* 0 *)
minimal(field_ext_list) = (* 2 *) DDEPRECATED SEP
minimal(field_ext_expr) = (* 2 *) DDEPRECATED SEP
minimal(endstack) = (* 2 *) DEND STACK
minimal(endmethod) = (* 3 *) DEND METHOD SEP
minimal(endfield) = (* 3 *) DEND FIELD SEP
minimal(endannotationsep) = (* 3 *) DEND ANNOTATION SEP
minimal(endannotation) = (* 2 *) DEND ANNOTATION
minimal(enclosing_spec) = (* 0 *)
minimal(directive) = (* 1 *) DDEPRECATED
minimal(deprecated_spec) = (* 0 *)
minimal(deprecated_expr) = (* 0 *)
minimal(defstack_same_expr) = (* 0 *)
minimal(defstack_same) = (* 2 *) LOCALS SEP
minimal(defstack) = (* 1 *) SEP
minimal(defmethod) = (* 3 *) DMETHOD Word SEP
minimal(debug_spec) = (* 3 *) DDEBUG Str SEP
minimal(debug_list) = (* 3 *) DDEBUG Str SEP
minimal(debug_extension) = (* 0 *)
minimal(complex_instruction) = (* 8 *) TABLESWITCH Int SEP Word SEP DEFAULT COLON Word
minimal(classname) = (* 1 *) Word
minimal(class_spec) = (* 3 *) DCLASS Word SEP
minimal(catch_expr) = (* 7 *) Word FROM Word TO Word USING Word
minimal(bytecode_spec) = (* 0 *)
minimal(any_item) = (* 1 *) Word
minimal(annotations) = (* 0 *)
minimal(ann_value_list) = (* 2 *) Word SEP
minimal(ann_value_items) = (* 1 *) Word
minimal(ann_value) = (* 1 *) Word
minimal(ann_nest) = (* 1 *) SEP
minimal(ann_met_expr) = (* 3 *) VISIBLE Word SEP
minimal(ann_def_val) = (* 4 *) Word EQ Word SEP
minimal(ann_def_spec) = (* 2 *) DEFAULT SEP
minimal(ann_def_expr) = (* 1 *) Word
minimal(ann_cls_spec) = (* 7 *) DANNOTATION VISIBLE Word SEP DEND ANNOTATION SEP
minimal(ann_cls_list) = (* 7 *) DANNOTATION VISIBLE Word SEP DEND ANNOTATION SEP
minimal(ann_cls_expr) = (* 4 *) DANNOTATION VISIBLE Word SEP
minimal(ann_clf_expr) = (* 3 *) VISIBLE Word SEP
minimal(ann_arglist) = (* 0 *)
minimal(ann_arg_spec) = (* 5 *) Word Word EQ Word SEP
minimal(ann_arg_list) = (* 5 *) Word Word EQ Word SEP
minimal(ann_arg_expr) = (* 2 *) Word Word
minimal(ann_ann_value) = (* 5 *) DANNOTATION SEP DEND ANNOTATION SEP
minimal(ann_ann_list) = (* 5 *) DANNOTATION SEP DEND ANNOTATION SEP
minimal(access_list) = (* 0 *)
minimal(access_items) = (* 1 *) PUBLIC
minimal(access_item) = (* 1 *) PUBLIC
minimal(access) = (* 0 *)
follow(var_expr) = SEP
follow(throws_expr) = SEP
follow(table_list) = DEFAULT
follow(table_entry) = Word Int DEFAULT
follow(table_default) = SEP
follow(table_args) = Word Int
follow(table) = SEP
follow(super_spec) = DSIGNATURE DMETHOD DINNER DIMPLEMENTS DFIELD DENCLOSING DDEPRECATED DDEBUG DATTRIBUTE DANNOTATION #
follow(stmnt) = SEP
follow(statements) = error Word TABLESWITCH SEP LOOKUPSWITCH Int Insn DVAR DTHROWS DSTACK DSIGNATURE DSET DLINE DLIMIT DEND DDEPRECATED DCATCH DATTRIBUTE DANNOTATION
follow(statement) = error Word TABLESWITCH SEP LOOKUPSWITCH Int Insn DVAR DTHROWS DSTACK DSIGNATURE DSET DLINE DLIMIT DEND DDEPRECATED DCATCH DATTRIBUTE DANNOTATION
follow(stackmap) = SEP
follow(stack_offset_def) = STACK LOCALS DEND
follow(stack_map_frame_desc) = DEND
follow(stack_items) = STACK LOCALS DEND
follow(stack_item_expr) = SEP
follow(stack_item) = STACK LOCALS DEND
follow(source_spec) = DINTERFACE DCLASS
follow(simple_instruction) = SEP
follow(signature_spec) = DMETHOD DINNER DFIELD DENCLOSING DDEPRECATED DDEBUG DATTRIBUTE DANNOTATION #
follow(signature_expr) = SEP
follow(set_expr) = SEP
follow(sep) = DSOURCE DINTERFACE DCLASS DBYTECODE
follow(optional_signature) = SEP FROM
follow(optional_default) = SEP
follow(methods) = #
follow(method_spec) = DMETHOD #
follow(method_list) = DMETHOD #
follow(lookup_list) = DEFAULT
follow(lookup_entry) = Int DEFAULT
follow(lookup_default) = SEP
follow(lookup_args) = Int
follow(lookup) = SEP
follow(line_expr) = SEP
follow(limit_expr) = SEP
follow(label) = SEP
follow(jasmin_header) = DMETHOD DINNER DFIELD #
follow(jas_file) = #
follow(item) = Word Str SEP Num Int
follow(instruction) = SEP
follow(inners) = DMETHOD DFIELD #
follow(inner_spec) = DMETHOD DINNER DFIELD #
follow(inner_outer) = SEP
follow(inner_name) = SEP OUTER INNER
follow(inner_list) = DMETHOD DINNER DFIELD #
follow(inner_inner) = SEP OUTER
follow(implements_spec) = DSIGNATURE DMETHOD DINNER DIMPLEMENTS DFIELD DENCLOSING DDEPRECATED DDEBUG DATTRIBUTE DANNOTATION #
follow(implements_list) = DSIGNATURE DMETHOD DINNER DFIELD DENCLOSING DDEPRECATED DDEBUG DATTRIBUTE DANNOTATION #
follow(implements) = DSIGNATURE DMETHOD DINNER DFIELD DENCLOSING DDEPRECATED DDEBUG DATTRIBUTE DANNOTATION #
follow(generic_spec) = DMETHOD DINNER DFIELD DDEBUG DATTRIBUTE #
follow(generic_list) = DMETHOD DINNER DFIELD DDEBUG DATTRIBUTE #
follow(generic_expr) = SEP
follow(generic_attributes) = DMETHOD DINNER DFIELD DDEBUG #
follow(fields) = DMETHOD #
follow(field_start) = DSIGNATURE DEND DDEPRECATED DATTRIBUTE DANNOTATION
follow(field_spec) = DMETHOD DFIELD #
follow(field_list) = DMETHOD #
follow(field_exts) = DEND
follow(field_ext_list) = DSIGNATURE DEND DDEPRECATED DATTRIBUTE DANNOTATION
follow(field_ext_expr) = DSIGNATURE DEND DDEPRECATED DATTRIBUTE DANNOTATION
follow(endstack) = SEP
follow(endmethod) = DMETHOD #
follow(endfield) = DMETHOD DFIELD #
follow(endannotationsep) = Word DSIGNATURE DMETHOD DINNER DFIELD DEND DDEPRECATED DDEBUG DATTRIBUTE DANNOTATION #
follow(endannotation) = SEP
follow(enclosing_spec) = DMETHOD DINNER DFIELD DDEPRECATED DDEBUG DATTRIBUTE DANNOTATION #
follow(directive) = SEP
follow(deprecated_spec) = DMETHOD DINNER DFIELD DDEBUG DATTRIBUTE DANNOTATION #
follow(deprecated_expr) = SEP
follow(defstack_same_expr) = LOCALS
follow(defstack_same) = STACK OFFSET LOCALS DEND
follow(defstack) = STACK OFFSET LOCALS DEND
follow(defmethod) = error Word TABLESWITCH SEP LOOKUPSWITCH Int Insn DVAR DTHROWS DSTACK DSIGNATURE DSET DLINE DLIMIT DEND DDEPRECATED DCATCH DATTRIBUTE DANNOTATION
follow(debug_spec) = DMETHOD DINNER DFIELD DDEBUG #
follow(debug_list) = DMETHOD DINNER DFIELD DDEBUG #
follow(debug_extension) = DMETHOD DINNER DFIELD #
follow(complex_instruction) = SEP
follow(classname) = SEP OUTER FROM
follow(class_spec) = DSUPER
follow(catch_expr) = SEP
follow(bytecode_spec) = DSOURCE DINTERFACE DCLASS
follow(any_item) = Word Str SEP Num Int
follow(annotations) = DMETHOD DINNER DFIELD DDEBUG DATTRIBUTE #
follow(ann_value_list) = Word DEND
follow(ann_value_items) = Word Str SEP Num Int
follow(ann_value) = Word Str SEP Num Int
follow(ann_nest) = Word DEND
follow(ann_met_expr) = Word DEND
follow(ann_def_val) = DEND
follow(ann_def_spec) = Word
follow(ann_def_expr) = EQ
follow(ann_cls_spec) = DMETHOD DINNER DFIELD DDEBUG DATTRIBUTE DANNOTATION #
follow(ann_cls_list) = DMETHOD DINNER DFIELD DDEBUG DATTRIBUTE DANNOTATION #
follow(ann_cls_expr) = Word DEND
follow(ann_clf_expr) = Word DEND
follow(ann_arglist) = DEND
follow(ann_arg_spec) = Word DEND
follow(ann_arg_list) = Word DEND
follow(ann_arg_expr) = EQ
follow(ann_ann_value) = Word DEND DANNOTATION
follow(ann_ann_list) = Word DEND DANNOTATION
follow(access_list) = Word SEP OUTER INNER
follow(access_items) = Word SEP OUTER INNER
follow(access_item) = Word VOLATILE VARARGS TRANSIENT SYNTHETIC SYNCHRONIZED STRICT STATIC SEP PUBLIC PROTECTED PRIVATE OUTER NATIVE INTERFACE INNER FINAL ENUM BRIDGE ANNOTATION ABSTRACT
follow(access) = Word SEP OUTER INNER
Built an LR(0) automaton with 385 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 385 states.
Warning: 50 end-of-stream conflicts were arbitrarily resolved.
File "jasmc.mly", line 722, characters 4-15:
Warning: production methods -> method_list is never reduced.
File "jasmc.mly", line 723, characters 3-3:
Warning: production methods -> is never reduced.
Warning: in total, 2 productions are never reduced.
177 out of 385 states have a default reduction.
83 out of 385 states are represented.
0 out of 179 symbols keep track of their start position.
0 out of 179 symbols keep track of their end position.
The action table is 27720 entries; 554 non-zero; 768 compressed.
The action table occupies roughly 1632 bytes.
The goto table is 40810 entries; 215 non-zero; 600 compressed.
The goto table occupies roughly 1296 bytes.
The error table occupies roughly 3504 bytes.
The default_reduction table occupies roughly 424 bytes.
The lhs table occupies roughly 256 bytes.
The trace table occupies roughly 8 bytes.
