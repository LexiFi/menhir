State 0:
## Known stack suffix:
##
## LR(1) items:
module_' -> . module_ [ # ]
## Transitions:
-- On error shift to state 1
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On T_INT shift to state 8
-- On T_BOOL shift to state 9
-- On SHARP shift to state 10
-- On PARAM shift to state 43
-- On FROM shift to state 178
-- On EXEC shift to state 180
-- On utype shift to state 44
-- On top_annotation shift to state 192
-- On top shift to state 194
-- On ptype_r shift to state 172
-- On ptype shift to state 195
-- On prequire shift to state 204
-- On pparam shift to state 205
-- On pglobal shift to state 206
-- On pfundef shift to state 207
-- On pexec shift to state 208
-- On option(from) shift to state 209
-- On module_ shift to state 384
-- On list(top_annotation) shift to state 215
-- On list(loc(top)) shift to state 385
-- On from shift to state 217
-- On annotations shift to state 218
## Reductions:
-- On EOF
--   reduce production list(loc(top)) ->
-- On INLINE FN EXPORT
--   reduce production list(top_annotation) ->
-- On REQUIRE
--   reduce production option(from) ->

State 1:
## Known stack suffix:
## error
## LR(1) items:
module_ -> error . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production module_ -> error

State 2:
## Known stack suffix:
## T_U8
## LR(1) items:
utype -> T_U8 . [ WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT
--   reduce production utype -> T_U8

State 3:
## Known stack suffix:
## T_U64
## LR(1) items:
utype -> T_U64 . [ WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT
--   reduce production utype -> T_U64

State 4:
## Known stack suffix:
## T_U32
## LR(1) items:
utype -> T_U32 . [ WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT
--   reduce production utype -> T_U32

State 5:
## Known stack suffix:
## T_U256
## LR(1) items:
utype -> T_U256 . [ WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT
--   reduce production utype -> T_U256

State 6:
## Known stack suffix:
## T_U16
## LR(1) items:
utype -> T_U16 . [ WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT
--   reduce production utype -> T_U16

State 7:
## Known stack suffix:
## T_U128
## LR(1) items:
utype -> T_U128 . [ WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE TRUE STACK SHARP RPAREN REG RBRACKET RBRACE QUESTIONMARK NID MINUS LPAREN LBRACKET LBRACE INT INLINE IF GLOBAL FOR FN FALSE EXPORT COMMA BANG ARRAYINIT
--   reduce production utype -> T_U128

State 8:
## Known stack suffix:
## T_INT
## LR(1) items:
ptype_r -> T_INT . [ RPAREN NID LBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN NID LBRACE COMMA
--   reduce production ptype_r -> T_INT

State 9:
## Known stack suffix:
## T_BOOL
## LR(1) items:
ptype_r -> T_BOOL . [ RPAREN NID LBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN NID LBRACE COMMA
--   reduce production ptype_r -> T_BOOL

State 10:
## Known stack suffix:
## SHARP
## LR(1) items:
top_annotation -> SHARP . annotation [ WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
top_annotation -> SHARP . LBRACKET struct_annot RBRACKET [ WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
-- On STRING shift to state 11
-- On STACK shift to state 12
-- On REG shift to state 13
-- On NID shift to state 14
-- On LBRACKET shift to state 15
-- On INLINE shift to state 16
-- On EXPORT shift to state 17
-- On keyword shift to state 22
-- On annotationlabel shift to state 23
-- On annotation shift to state 42
## Reductions:

State 11:
## Known stack suffix:
## STRING
## LR(1) items:
annotationlabel -> STRING . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT
--   reduce production annotationlabel -> STRING

State 12:
## Known stack suffix:
## STACK
## LR(1) items:
keyword -> STACK . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT
--   reduce production keyword -> STACK

State 13:
## Known stack suffix:
## REG
## LR(1) items:
keyword -> REG . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT
--   reduce production keyword -> REG

State 14:
## Known stack suffix:
## NID
## LR(1) items:
annotationlabel -> NID . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT
--   reduce production annotationlabel -> NID

State 15:
## Known stack suffix:
## SHARP LBRACKET
## LR(1) items:
top_annotation -> SHARP LBRACKET . struct_annot RBRACKET [ WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
-- On STRING shift to state 11
-- On STACK shift to state 12
-- On REG shift to state 13
-- On NID shift to state 14
-- On INLINE shift to state 16
-- On EXPORT shift to state 17
-- On struct_annot shift to state 18
-- On separated_nonempty_list(COMMA,annotation) shift to state 20
-- On loption(separated_nonempty_list(COMMA,annotation)) shift to state 21
-- On keyword shift to state 22
-- On annotationlabel shift to state 23
-- On annotation shift to state 32
## Reductions:
-- On RBRACKET
--   reduce production loption(separated_nonempty_list(COMMA,annotation)) ->

State 16:
## Known stack suffix:
## INLINE
## LR(1) items:
keyword -> INLINE . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT
--   reduce production keyword -> INLINE

State 17:
## Known stack suffix:
## EXPORT
## LR(1) items:
keyword -> EXPORT . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT
--   reduce production keyword -> EXPORT

State 18:
## Known stack suffix:
## SHARP LBRACKET struct_annot
## LR(1) items:
top_annotation -> SHARP LBRACKET struct_annot . RBRACKET [ WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
-- On RBRACKET shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## SHARP LBRACKET struct_annot RBRACKET
## LR(1) items:
top_annotation -> SHARP LBRACKET struct_annot RBRACKET . [ WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT
--   reduce production top_annotation -> SHARP LBRACKET struct_annot RBRACKET

State 20:
## Known stack suffix:
## separated_nonempty_list(COMMA,annotation)
## LR(1) items:
loption(separated_nonempty_list(COMMA,annotation)) -> separated_nonempty_list(COMMA,annotation) . [ RBRACKET RBRACE ]
## Transitions:
## Reductions:
-- On RBRACKET RBRACE
--   reduce production loption(separated_nonempty_list(COMMA,annotation)) -> separated_nonempty_list(COMMA,annotation)

State 21:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,annotation))
## LR(1) items:
struct_annot -> loption(separated_nonempty_list(COMMA,annotation)) . [ RBRACKET RBRACE ]
## Transitions:
## Reductions:
-- On RBRACKET RBRACE
--   reduce production struct_annot -> loption(separated_nonempty_list(COMMA,annotation))

State 22:
## Known stack suffix:
## keyword
## LR(1) items:
annotationlabel -> keyword . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT EQ COMMA ARRAYINIT
--   reduce production annotationlabel -> keyword

State 23:
## Known stack suffix:
## annotationlabel
## LR(1) items:
annotation -> annotationlabel . option(attribute) [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
-- On EQ shift to state 24
-- On option(attribute) shift to state 40
-- On attribute shift to state 41
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production option(attribute) ->

State 24:
## Known stack suffix:
## EQ
## LR(1) items:
attribute -> EQ . simple_attribute [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
attribute -> EQ . LBRACE struct_annot RBRACE [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On STRING shift to state 25
-- On STACK shift to state 12
-- On REG shift to state 13
-- On NID shift to state 26
-- On MINUS shift to state 27
-- On LBRACE shift to state 29
-- On INT shift to state 35
-- On INLINE shift to state 16
-- On EXPORT shift to state 17
-- On utype shift to state 36
-- On simple_attribute shift to state 37
-- On keyword shift to state 38
-- On int shift to state 39
## Reductions:

State 25:
## Known stack suffix:
## STRING
## LR(1) items:
simple_attribute -> STRING . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production simple_attribute -> STRING

State 26:
## Known stack suffix:
## NID
## LR(1) items:
simple_attribute -> NID . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production simple_attribute -> NID

State 27:
## Known stack suffix:
## MINUS
## LR(1) items:
int -> MINUS . INT [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
-- On INT shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## MINUS INT
## LR(1) items:
int -> MINUS INT . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production int -> MINUS INT

State 29:
## Known stack suffix:
## EQ LBRACE
## LR(1) items:
attribute -> EQ LBRACE . struct_annot RBRACE [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
-- On STRING shift to state 11
-- On STACK shift to state 12
-- On REG shift to state 13
-- On NID shift to state 14
-- On INLINE shift to state 16
-- On EXPORT shift to state 17
-- On struct_annot shift to state 30
-- On separated_nonempty_list(COMMA,annotation) shift to state 20
-- On loption(separated_nonempty_list(COMMA,annotation)) shift to state 21
-- On keyword shift to state 22
-- On annotationlabel shift to state 23
-- On annotation shift to state 32
## Reductions:
-- On RBRACE
--   reduce production loption(separated_nonempty_list(COMMA,annotation)) ->

State 30:
## Known stack suffix:
## EQ LBRACE struct_annot
## LR(1) items:
attribute -> EQ LBRACE struct_annot . RBRACE [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
-- On RBRACE shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## EQ LBRACE struct_annot RBRACE
## LR(1) items:
attribute -> EQ LBRACE struct_annot RBRACE . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production attribute -> EQ LBRACE struct_annot RBRACE

State 32:
## Known stack suffix:
## annotation
## LR(1) items:
separated_nonempty_list(COMMA,annotation) -> annotation . [ RBRACKET RBRACE ]
separated_nonempty_list(COMMA,annotation) -> annotation . COMMA separated_nonempty_list(COMMA,annotation) [ RBRACKET RBRACE ]
## Transitions:
-- On COMMA shift to state 33
## Reductions:
-- On RBRACKET RBRACE
--   reduce production separated_nonempty_list(COMMA,annotation) -> annotation

State 33:
## Known stack suffix:
## annotation COMMA
## LR(1) items:
separated_nonempty_list(COMMA,annotation) -> annotation COMMA . separated_nonempty_list(COMMA,annotation) [ RBRACKET RBRACE ]
## Transitions:
-- On STRING shift to state 11
-- On STACK shift to state 12
-- On REG shift to state 13
-- On NID shift to state 14
-- On INLINE shift to state 16
-- On EXPORT shift to state 17
-- On separated_nonempty_list(COMMA,annotation) shift to state 34
-- On keyword shift to state 22
-- On annotationlabel shift to state 23
-- On annotation shift to state 32
## Reductions:

State 34:
## Known stack suffix:
## annotation COMMA separated_nonempty_list(COMMA,annotation)
## LR(1) items:
separated_nonempty_list(COMMA,annotation) -> annotation COMMA separated_nonempty_list(COMMA,annotation) . [ RBRACKET RBRACE ]
## Transitions:
## Reductions:
-- On RBRACKET RBRACE
--   reduce production separated_nonempty_list(COMMA,annotation) -> annotation COMMA separated_nonempty_list(COMMA,annotation)

State 35:
## Known stack suffix:
## INT
## LR(1) items:
int -> INT . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production int -> INT

State 36:
## Known stack suffix:
## utype
## LR(1) items:
simple_attribute -> utype . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production simple_attribute -> utype

State 37:
## Known stack suffix:
## EQ simple_attribute
## LR(1) items:
attribute -> EQ simple_attribute . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production attribute -> EQ simple_attribute

State 38:
## Known stack suffix:
## keyword
## LR(1) items:
simple_attribute -> keyword . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production simple_attribute -> keyword

State 39:
## Known stack suffix:
## int
## LR(1) items:
simple_attribute -> int . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production simple_attribute -> int

State 40:
## Known stack suffix:
## annotationlabel option(attribute)
## LR(1) items:
annotation -> annotationlabel option(attribute) . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production annotation -> annotationlabel option(attribute)

State 41:
## Known stack suffix:
## attribute
## LR(1) items:
option(attribute) -> attribute . [ WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG RBRACKET RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT COMMA ARRAYINIT
--   reduce production option(attribute) -> attribute

State 42:
## Known stack suffix:
## SHARP annotation
## LR(1) items:
top_annotation -> SHARP annotation . [ WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT
--   reduce production top_annotation -> SHARP annotation

State 43:
## Known stack suffix:
## PARAM
## LR(1) items:
pparam -> PARAM . ptype NID EQ pexpr SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On T_INT shift to state 8
-- On T_BOOL shift to state 9
-- On utype shift to state 44
-- On ptype_r shift to state 172
-- On ptype shift to state 173
## Reductions:

State 44:
## Known stack suffix:
## utype
## LR(1) items:
ptype_r -> utype . [ RPAREN NID LBRACE COMMA ]
ptype_r -> utype . LBRACKET pexpr RBRACKET [ RPAREN NID LBRACE COMMA ]
## Transitions:
-- On LBRACKET shift to state 45
## Reductions:
-- On RPAREN NID LBRACE COMMA
--   reduce production ptype_r -> utype

State 45:
## Known stack suffix:
## utype LBRACKET
## LR(1) items:
ptype_r -> utype LBRACKET . pexpr RBRACKET [ RPAREN NID LBRACE COMMA ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 170
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 46:
## Known stack suffix:
## TRUE
## LR(1) items:
pexpr_r -> TRUE . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> TRUE

State 47:
## Known stack suffix:
## SHARP
## LR(1) items:
prim -> SHARP . NID [ LPAREN ]
## Transitions:
-- On NID shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## SHARP NID
## LR(1) items:
prim -> SHARP NID . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production prim -> SHARP NID

State 49:
## Known stack suffix:
## NID
## LR(1) items:
var -> NID . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT NID MINUS LTLT LT LPAREN LE LBRACKET LBRACE IF HAT GTGT GT GE EQEQ EQ DOWNTO DOT COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT NID MINUS LTLT LT LPAREN LE LBRACKET LBRACE IF HAT GTGT GT GE EQEQ EQ DOWNTO DOT COMMA COLON BANGEQ AMPAMP AMP
--   reduce production var -> NID

State 50:
## Known stack suffix:
## MINUS
## LR(1) items:
pexpr_r -> MINUS . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 57
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 51:
## Known stack suffix:
## SWSIZE
## LR(1) items:
swsize -> SWSIZE . [ TRUE SHARP RPAREN NID MINUS LPAREN LBRACKET INT FALSE EQ BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP RPAREN NID MINUS LPAREN LBRACKET INT FALSE EQ BANG
--   reduce production swsize -> SWSIZE

State 52:
## Known stack suffix:
## SVSIZE
## LR(1) items:
svsize -> SVSIZE . [ TRUE SHARP RPAREN NID MINUS LPAREN LBRACKET INT FALSE EQ BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP RPAREN NID MINUS LPAREN LBRACKET INT FALSE EQ BANG
--   reduce production svsize -> SVSIZE

State 53:
## Known stack suffix:
## swsize
## LR(1) items:
castop1 -> swsize . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG
--   reduce production castop1 -> swsize

State 54:
## Known stack suffix:
## svsize
## LR(1) items:
castop1 -> svsize . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG
--   reduce production castop1 -> svsize

State 55:
## Known stack suffix:
## option(loc(castop1))
## LR(1) items:
castop -> option(loc(castop1)) . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG
--   reduce production castop -> option(loc(castop1))

State 56:
## Known stack suffix:
## castop1
## LR(1) items:
option(loc(castop1)) -> castop1 . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE EQ BANG
--   reduce production option(loc(castop1)) -> castop1

State 57:
## Known stack suffix:
## MINUS castop
## LR(1) items:
pexpr_r -> MINUS castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 169
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 58:
## Known stack suffix:
## LPAREN
## LR(1) items:
option(parens(utype)) -> LPAREN . utype RPAREN [ LBRACKET ]
pexpr_r -> LPAREN . svsize RPAREN LBRACKET separated_nonempty_list(COMMA,pexpr) RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> LPAREN . cast RPAREN pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> LPAREN . pexpr RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On T_INT shift to state 59
-- On TRUE shift to state 46
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On utype shift to state 156
-- On swsize shift to state 158
-- On svsize shift to state 159
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 164
-- On option(parens(utype)) shift to state 74
-- On cast shift to state 166
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 59:
## Known stack suffix:
## T_INT
## LR(1) items:
cast -> T_INT . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production cast -> T_INT

State 60:
## Known stack suffix:
## INT
## LR(1) items:
pexpr_r -> INT . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> INT

State 61:
## Known stack suffix:
## FALSE
## LR(1) items:
pexpr_r -> FALSE . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> FALSE

State 62:
## Known stack suffix:
## BANG
## LR(1) items:
pexpr_r -> BANG . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 63
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 63:
## Known stack suffix:
## BANG castop
## LR(1) items:
pexpr_r -> BANG castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 155
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 64:
## Known stack suffix:
## var
## LR(1) items:
pexpr_r -> var . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> var . arr_access [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> var . LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On LPAREN shift to state 65
-- On DOT shift to state 142
-- On option(DOT) shift to state 143
-- On arr_access shift to state 154
## Reductions:
-- On LBRACKET
--   reduce production option(DOT) ->
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> var

State 65:
## Known stack suffix:
## var LPAREN
## LR(1) items:
pexpr_r -> var LPAREN . loption(separated_nonempty_list(COMMA,pexpr)) RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On separated_nonempty_list(COMMA,pexpr) shift to state 66
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 70
-- On option(parens(utype)) shift to state 74
-- On loption(separated_nonempty_list(COMMA,pexpr)) shift to state 140
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pexpr)) ->
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 66:
## Known stack suffix:
## separated_nonempty_list(COMMA,pexpr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,pexpr)) -> separated_nonempty_list(COMMA,pexpr) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pexpr)) -> separated_nonempty_list(COMMA,pexpr)

State 67:
## Known stack suffix:
## prim
## LR(1) items:
pexpr_r -> prim . LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On LPAREN shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## prim LPAREN
## LR(1) items:
pexpr_r -> prim LPAREN . loption(separated_nonempty_list(COMMA,pexpr)) RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On separated_nonempty_list(COMMA,pexpr) shift to state 66
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 70
-- On option(parens(utype)) shift to state 74
-- On loption(separated_nonempty_list(COMMA,pexpr)) shift to state 138
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pexpr)) ->
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 69:
## Known stack suffix:
## pexpr_r
## LR(1) items:
pexpr -> pexpr_r . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr -> pexpr_r

State 70:
## Known stack suffix:
## pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COMMA BANGEQ AMPAMP AMP ]
separated_nonempty_list(COMMA,pexpr) -> pexpr . [ RPAREN RBRACKET RBRACE ]
separated_nonempty_list(COMMA,pexpr) -> pexpr . COMMA separated_nonempty_list(COMMA,pexpr) [ RPAREN RBRACKET RBRACE ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On COMMA shift to state 136
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On RPAREN RBRACKET RBRACE
--   reduce production separated_nonempty_list(COMMA,pexpr) -> pexpr

State 71:
## Known stack suffix:
## pexpr STAR
## LR(1) items:
pexpr_r -> pexpr STAR . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 72
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 72:
## Known stack suffix:
## pexpr STAR castop
## LR(1) items:
pexpr_r -> pexpr STAR castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 73
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 73:
## Known stack suffix:
## pexpr STAR castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr STAR castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr STAR castop pexpr

State 74:
## Known stack suffix:
## option(parens(utype))
## LR(1) items:
pexpr_r -> option(parens(utype)) . LBRACKET var option(mem_ofs) RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On LBRACKET shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## option(parens(utype)) LBRACKET
## LR(1) items:
pexpr_r -> option(parens(utype)) LBRACKET . var option(mem_ofs) RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## option(parens(utype)) LBRACKET var
## LR(1) items:
pexpr_r -> option(parens(utype)) LBRACKET var . option(mem_ofs) RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On PLUS shift to state 77
-- On MINUS shift to state 132
-- On option(mem_ofs) shift to state 134
## Reductions:
-- On RBRACKET
--   reduce production option(mem_ofs) ->

State 77:
## Known stack suffix:
## PLUS
## LR(1) items:
option(mem_ofs) -> PLUS . pexpr [ RBRACKET ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 78
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 78:
## Known stack suffix:
## PLUS pexpr
## LR(1) items:
option(mem_ofs) -> PLUS pexpr . [ RBRACKET ]
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On RBRACKET
--   reduce production option(mem_ofs) -> PLUS pexpr

State 79:
## Known stack suffix:
## pexpr SLASH
## LR(1) items:
pexpr_r -> pexpr SLASH . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 80
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 80:
## Known stack suffix:
## pexpr SLASH castop
## LR(1) items:
pexpr_r -> pexpr SLASH castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 81
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 81:
## Known stack suffix:
## pexpr SLASH castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr SLASH castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr SLASH castop pexpr

State 82:
## Known stack suffix:
## pexpr QUESTIONMARK
## LR(1) items:
pexpr_r -> pexpr QUESTIONMARK . pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 83
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 83:
## Known stack suffix:
## pexpr QUESTIONMARK pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr QUESTIONMARK pexpr . COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On COLON shift to state 130
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:

State 84:
## Known stack suffix:
## pexpr PLUS
## LR(1) items:
pexpr_r -> pexpr PLUS . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 85
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 85:
## Known stack suffix:
## pexpr PLUS castop
## LR(1) items:
pexpr_r -> pexpr PLUS castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 86
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 86:
## Known stack suffix:
## pexpr PLUS castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr PLUS castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PERCENT shift to state 87
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr PLUS castop pexpr

State 87:
## Known stack suffix:
## pexpr PERCENT
## LR(1) items:
pexpr_r -> pexpr PERCENT . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 88
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 88:
## Known stack suffix:
## pexpr PERCENT castop
## LR(1) items:
pexpr_r -> pexpr PERCENT castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 89
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 89:
## Known stack suffix:
## pexpr PERCENT castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr PERCENT castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr PERCENT castop pexpr

State 90:
## Known stack suffix:
## pexpr PIPEPIPE
## LR(1) items:
pexpr_r -> pexpr PIPEPIPE . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 91
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 91:
## Known stack suffix:
## pexpr PIPEPIPE pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr PIPEPIPE pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LBRACE IF DOWNTO COMMA COLON
--   reduce production pexpr_r -> pexpr PIPEPIPE pexpr

State 92:
## Known stack suffix:
## pexpr PIPE
## LR(1) items:
pexpr_r -> pexpr PIPE . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 93
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 93:
## Known stack suffix:
## pexpr PIPE castop
## LR(1) items:
pexpr_r -> pexpr PIPE castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 94
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 94:
## Known stack suffix:
## pexpr PIPE castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr PIPE castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE PIPE LT LE LBRACE IF GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr PIPE castop pexpr

State 95:
## Known stack suffix:
## pexpr MINUS
## LR(1) items:
pexpr_r -> pexpr MINUS . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 96
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 96:
## Known stack suffix:
## pexpr MINUS castop
## LR(1) items:
pexpr_r -> pexpr MINUS castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 97
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 97:
## Known stack suffix:
## pexpr MINUS castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr MINUS castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PERCENT shift to state 87
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr MINUS castop pexpr

State 98:
## Known stack suffix:
## pexpr LTLT
## LR(1) items:
pexpr_r -> pexpr LTLT . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 99
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 99:
## Known stack suffix:
## pexpr LTLT castop
## LR(1) items:
pexpr_r -> pexpr LTLT castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 100
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 100:
## Known stack suffix:
## pexpr LTLT castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr LTLT castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE PIPE LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr LTLT castop pexpr

State 101:
## Known stack suffix:
## pexpr HAT
## LR(1) items:
pexpr_r -> pexpr HAT . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 102
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 102:
## Known stack suffix:
## pexpr HAT castop
## LR(1) items:
pexpr_r -> pexpr HAT castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 103
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 103:
## Known stack suffix:
## pexpr HAT castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr HAT castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On GTGT shift to state 104
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE PIPE LT LE LBRACE IF HAT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr HAT castop pexpr

State 104:
## Known stack suffix:
## pexpr GTGT
## LR(1) items:
pexpr_r -> pexpr GTGT . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 105
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 105:
## Known stack suffix:
## pexpr GTGT castop
## LR(1) items:
pexpr_r -> pexpr GTGT castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 106
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 106:
## Known stack suffix:
## pexpr GTGT castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr GTGT castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE PIPE LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr GTGT castop pexpr

State 107:
## Known stack suffix:
## pexpr AMP
## LR(1) items:
pexpr_r -> pexpr AMP . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 108
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 108:
## Known stack suffix:
## pexpr AMP castop
## LR(1) items:
pexpr_r -> pexpr AMP castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 109
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 109:
## Known stack suffix:
## pexpr AMP castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr AMP castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On GTGT shift to state 104
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE PIPE LT LE LBRACE IF HAT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> pexpr AMP castop pexpr

State 110:
## Known stack suffix:
## pexpr LT
## LR(1) items:
pexpr_r -> pexpr LT . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 111
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 111:
## Known stack suffix:
## pexpr LT castop
## LR(1) items:
pexpr_r -> pexpr LT castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 112
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 112:
## Known stack suffix:
## pexpr LT castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr LT castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LT LE LBRACE IF GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr LT castop pexpr

State 113:
## Known stack suffix:
## pexpr LE
## LR(1) items:
pexpr_r -> pexpr LE . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 114
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 114:
## Known stack suffix:
## pexpr LE castop
## LR(1) items:
pexpr_r -> pexpr LE castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 115
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 115:
## Known stack suffix:
## pexpr LE castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr LE castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LT LE LBRACE IF GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr LE castop pexpr

State 116:
## Known stack suffix:
## pexpr GT
## LR(1) items:
pexpr_r -> pexpr GT . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 117
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 117:
## Known stack suffix:
## pexpr GT castop
## LR(1) items:
pexpr_r -> pexpr GT castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 118
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 118:
## Known stack suffix:
## pexpr GT castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr GT castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LT LE LBRACE IF GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr GT castop pexpr

State 119:
## Known stack suffix:
## pexpr GE
## LR(1) items:
pexpr_r -> pexpr GE . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 120
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 120:
## Known stack suffix:
## pexpr GE castop
## LR(1) items:
pexpr_r -> pexpr GE castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 121
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 121:
## Known stack suffix:
## pexpr GE castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr GE castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LT LE LBRACE IF GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr GE castop pexpr

State 122:
## Known stack suffix:
## pexpr EQEQ
## LR(1) items:
pexpr_r -> pexpr EQEQ . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 123
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 123:
## Known stack suffix:
## pexpr EQEQ castop
## LR(1) items:
pexpr_r -> pexpr EQEQ castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 124
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 124:
## Known stack suffix:
## pexpr EQEQ castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr EQEQ castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LBRACE IF EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr EQEQ castop pexpr

State 125:
## Known stack suffix:
## pexpr BANGEQ
## LR(1) items:
pexpr_r -> pexpr BANGEQ . castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 126
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(loc(castop1)) ->

State 126:
## Known stack suffix:
## pexpr BANGEQ castop
## LR(1) items:
pexpr_r -> pexpr BANGEQ castop . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 127
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 127:
## Known stack suffix:
## pexpr BANGEQ castop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr BANGEQ castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LBRACE IF EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP
--   reduce production pexpr_r -> pexpr BANGEQ castop pexpr

State 128:
## Known stack suffix:
## pexpr AMPAMP
## LR(1) items:
pexpr_r -> pexpr AMPAMP . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 129
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 129:
## Known stack suffix:
## pexpr AMPAMP pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr AMPAMP pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PIPEPIPE LBRACE IF DOWNTO COMMA COLON AMPAMP
--   reduce production pexpr_r -> pexpr AMPAMP pexpr

State 130:
## Known stack suffix:
## pexpr QUESTIONMARK pexpr COLON
## LR(1) items:
pexpr_r -> pexpr QUESTIONMARK pexpr COLON . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 131
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 131:
## Known stack suffix:
## pexpr QUESTIONMARK pexpr COLON pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr QUESTIONMARK pexpr COLON pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE LBRACE IF DOWNTO COMMA COLON
--   reduce production pexpr_r -> pexpr QUESTIONMARK pexpr COLON pexpr

State 132:
## Known stack suffix:
## MINUS
## LR(1) items:
option(mem_ofs) -> MINUS . pexpr [ RBRACKET ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 133
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 133:
## Known stack suffix:
## MINUS pexpr
## LR(1) items:
option(mem_ofs) -> MINUS pexpr . [ RBRACKET ]
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On RBRACKET
--   reduce production option(mem_ofs) -> MINUS pexpr

State 134:
## Known stack suffix:
## option(parens(utype)) LBRACKET var option(mem_ofs)
## LR(1) items:
pexpr_r -> option(parens(utype)) LBRACKET var option(mem_ofs) . RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On RBRACKET shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## option(parens(utype)) LBRACKET var option(mem_ofs) RBRACKET
## LR(1) items:
pexpr_r -> option(parens(utype)) LBRACKET var option(mem_ofs) RBRACKET . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> option(parens(utype)) LBRACKET var option(mem_ofs) RBRACKET

State 136:
## Known stack suffix:
## pexpr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,pexpr) -> pexpr COMMA . separated_nonempty_list(COMMA,pexpr) [ RPAREN RBRACKET RBRACE ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On separated_nonempty_list(COMMA,pexpr) shift to state 137
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 70
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 137:
## Known stack suffix:
## pexpr COMMA separated_nonempty_list(COMMA,pexpr)
## LR(1) items:
separated_nonempty_list(COMMA,pexpr) -> pexpr COMMA separated_nonempty_list(COMMA,pexpr) . [ RPAREN RBRACKET RBRACE ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE
--   reduce production separated_nonempty_list(COMMA,pexpr) -> pexpr COMMA separated_nonempty_list(COMMA,pexpr)

State 138:
## Known stack suffix:
## prim LPAREN loption(separated_nonempty_list(COMMA,pexpr))
## LR(1) items:
pexpr_r -> prim LPAREN loption(separated_nonempty_list(COMMA,pexpr)) . RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On RPAREN shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## prim LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN
## LR(1) items:
pexpr_r -> prim LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> prim LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN

State 140:
## Known stack suffix:
## var LPAREN loption(separated_nonempty_list(COMMA,pexpr))
## LR(1) items:
pexpr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) . RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On RPAREN shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN
## LR(1) items:
pexpr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN

State 142:
## Known stack suffix:
## DOT
## LR(1) items:
option(DOT) -> DOT . [ LBRACKET ]
## Transitions:
## Reductions:
-- On LBRACKET
--   reduce production option(DOT) -> DOT

State 143:
## Known stack suffix:
## option(DOT)
## LR(1) items:
arr_access -> option(DOT) . LBRACKET arr_access_i RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ EQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On LBRACKET shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## option(DOT) LBRACKET
## LR(1) items:
arr_access -> option(DOT) LBRACKET . arr_access_i RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ EQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On utype shift to state 145
-- On option(utype) shift to state 146
-- On arr_access_i shift to state 152
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(utype) ->

State 145:
## Known stack suffix:
## utype
## LR(1) items:
option(utype) -> utype . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production option(utype) -> utype

State 146:
## Known stack suffix:
## option(utype)
## LR(1) items:
arr_access_i -> option(utype) . pexpr option(arr_access_len) [ RBRACKET ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 147
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 147:
## Known stack suffix:
## option(utype) pexpr
## LR(1) items:
arr_access_i -> option(utype) pexpr . option(arr_access_len) [ RBRACKET ]
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On COLON shift to state 148
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
-- On option(arr_access_len) shift to state 150
-- On arr_access_len shift to state 151
## Reductions:
-- On RBRACKET
--   reduce production option(arr_access_len) ->

State 148:
## Known stack suffix:
## COLON
## LR(1) items:
arr_access_len -> COLON . pexpr [ RBRACKET ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 149
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 149:
## Known stack suffix:
## COLON pexpr
## LR(1) items:
arr_access_len -> COLON pexpr . [ RBRACKET ]
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On RBRACKET
--   reduce production arr_access_len -> COLON pexpr

State 150:
## Known stack suffix:
## option(utype) pexpr option(arr_access_len)
## LR(1) items:
arr_access_i -> option(utype) pexpr option(arr_access_len) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production arr_access_i -> option(utype) pexpr option(arr_access_len)

State 151:
## Known stack suffix:
## arr_access_len
## LR(1) items:
option(arr_access_len) -> arr_access_len . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production option(arr_access_len) -> arr_access_len

State 152:
## Known stack suffix:
## option(DOT) LBRACKET arr_access_i
## LR(1) items:
arr_access -> option(DOT) LBRACKET arr_access_i . RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ EQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On RBRACKET shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## option(DOT) LBRACKET arr_access_i RBRACKET
## LR(1) items:
arr_access -> option(DOT) LBRACKET arr_access_i RBRACKET . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ EQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ EQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production arr_access -> option(DOT) LBRACKET arr_access_i RBRACKET

State 154:
## Known stack suffix:
## var arr_access
## LR(1) items:
pexpr_r -> var arr_access . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> var arr_access

State 155:
## Known stack suffix:
## BANG castop pexpr
## LR(1) items:
pexpr_r -> BANG castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> BANG castop pexpr

State 156:
## Known stack suffix:
## LPAREN utype
## LR(1) items:
option(parens(utype)) -> LPAREN utype . RPAREN [ LBRACKET ]
## Transitions:
-- On RPAREN shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## LPAREN utype RPAREN
## LR(1) items:
option(parens(utype)) -> LPAREN utype RPAREN . [ LBRACKET ]
## Transitions:
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) -> LPAREN utype RPAREN

State 158:
## Known stack suffix:
## swsize
## LR(1) items:
cast -> swsize . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production cast -> swsize

State 159:
## Known stack suffix:
## LPAREN svsize
## LR(1) items:
pexpr_r -> LPAREN svsize . RPAREN LBRACKET separated_nonempty_list(COMMA,pexpr) RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On RPAREN shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## LPAREN svsize RPAREN
## LR(1) items:
pexpr_r -> LPAREN svsize RPAREN . LBRACKET separated_nonempty_list(COMMA,pexpr) RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On LBRACKET shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## LPAREN svsize RPAREN LBRACKET
## LR(1) items:
pexpr_r -> LPAREN svsize RPAREN LBRACKET . separated_nonempty_list(COMMA,pexpr) RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On separated_nonempty_list(COMMA,pexpr) shift to state 162
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 70
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 162:
## Known stack suffix:
## LPAREN svsize RPAREN LBRACKET separated_nonempty_list(COMMA,pexpr)
## LR(1) items:
pexpr_r -> LPAREN svsize RPAREN LBRACKET separated_nonempty_list(COMMA,pexpr) . RBRACKET [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On RBRACKET shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## LPAREN svsize RPAREN LBRACKET separated_nonempty_list(COMMA,pexpr) RBRACKET
## LR(1) items:
pexpr_r -> LPAREN svsize RPAREN LBRACKET separated_nonempty_list(COMMA,pexpr) RBRACKET . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> LPAREN svsize RPAREN LBRACKET separated_nonempty_list(COMMA,pexpr) RBRACKET

State 164:
## Known stack suffix:
## LPAREN pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> LPAREN pexpr . RPAREN [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On RPAREN shift to state 165
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:

State 165:
## Known stack suffix:
## LPAREN pexpr RPAREN
## LR(1) items:
pexpr_r -> LPAREN pexpr RPAREN . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> LPAREN pexpr RPAREN

State 166:
## Known stack suffix:
## LPAREN cast
## LR(1) items:
pexpr_r -> LPAREN cast . RPAREN pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On RPAREN shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## LPAREN cast RPAREN
## LR(1) items:
pexpr_r -> LPAREN cast RPAREN . pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 168
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 168:
## Known stack suffix:
## LPAREN cast RPAREN pexpr
## LR(1) items:
pexpr_r -> LPAREN cast RPAREN pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
## Reductions:
-- On TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> LPAREN cast RPAREN pexpr

State 169:
## Known stack suffix:
## MINUS castop pexpr
## LR(1) items:
pexpr_r -> MINUS castop pexpr . [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On PERCENT shift to state 87
## Reductions:
-- On TO SEMICOLON RPAREN RBRACKET RBRACE QUESTIONMARK PLUS PIPEPIPE PIPE MINUS LTLT LT LE LBRACE IF HAT GTGT GT GE EQEQ DOWNTO COMMA COLON BANGEQ AMPAMP AMP
--   reduce production pexpr_r -> MINUS castop pexpr

State 170:
## Known stack suffix:
## utype LBRACKET pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RBRACKET QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
ptype_r -> utype LBRACKET pexpr . RBRACKET [ RPAREN NID LBRACE COMMA ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On RBRACKET shift to state 171
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:

State 171:
## Known stack suffix:
## utype LBRACKET pexpr RBRACKET
## LR(1) items:
ptype_r -> utype LBRACKET pexpr RBRACKET . [ RPAREN NID LBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN NID LBRACE COMMA
--   reduce production ptype_r -> utype LBRACKET pexpr RBRACKET

State 172:
## Known stack suffix:
## ptype_r
## LR(1) items:
ptype -> ptype_r . [ RPAREN NID LBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN NID LBRACE COMMA
--   reduce production ptype -> ptype_r

State 173:
## Known stack suffix:
## PARAM ptype
## LR(1) items:
pparam -> PARAM ptype . NID EQ pexpr SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On NID shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## PARAM ptype NID
## LR(1) items:
pparam -> PARAM ptype NID . EQ pexpr SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On EQ shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## PARAM ptype NID EQ
## LR(1) items:
pparam -> PARAM ptype NID EQ . pexpr SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 176
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 176:
## Known stack suffix:
## PARAM ptype NID EQ pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pparam -> PARAM ptype NID EQ pexpr . SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On SEMICOLON shift to state 177
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:

State 177:
## Known stack suffix:
## PARAM ptype NID EQ pexpr SEMICOLON
## LR(1) items:
pparam -> PARAM ptype NID EQ pexpr SEMICOLON . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production pparam -> PARAM ptype NID EQ pexpr SEMICOLON

State 178:
## Known stack suffix:
## FROM
## LR(1) items:
from -> FROM . NID [ REQUIRE ]
## Transitions:
-- On NID shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## FROM NID
## LR(1) items:
from -> FROM NID . [ REQUIRE ]
## Transitions:
## Reductions:
-- On REQUIRE
--   reduce production from -> FROM NID

State 180:
## Known stack suffix:
## EXEC
## LR(1) items:
pexec -> EXEC . NID LPAREN loption(separated_nonempty_list(COMMA,range)) RPAREN [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On NID shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## EXEC NID
## LR(1) items:
pexec -> EXEC NID . LPAREN loption(separated_nonempty_list(COMMA,range)) RPAREN [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On LPAREN shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## EXEC NID LPAREN
## LR(1) items:
pexec -> EXEC NID LPAREN . loption(separated_nonempty_list(COMMA,range)) RPAREN [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On INT shift to state 183
-- On separated_nonempty_list(COMMA,range) shift to state 186
-- On range shift to state 187
-- On loption(separated_nonempty_list(COMMA,range)) shift to state 190
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,range)) ->

State 183:
## Known stack suffix:
## INT
## LR(1) items:
range -> INT . COLON INT [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 184
## Reductions:

State 184:
## Known stack suffix:
## INT COLON
## LR(1) items:
range -> INT COLON . INT [ RPAREN COMMA ]
## Transitions:
-- On INT shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## INT COLON INT
## LR(1) items:
range -> INT COLON INT . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production range -> INT COLON INT

State 186:
## Known stack suffix:
## separated_nonempty_list(COMMA,range)
## LR(1) items:
loption(separated_nonempty_list(COMMA,range)) -> separated_nonempty_list(COMMA,range) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,range)) -> separated_nonempty_list(COMMA,range)

State 187:
## Known stack suffix:
## range
## LR(1) items:
separated_nonempty_list(COMMA,range) -> range . [ RPAREN ]
separated_nonempty_list(COMMA,range) -> range . COMMA separated_nonempty_list(COMMA,range) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 188
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,range) -> range

State 188:
## Known stack suffix:
## range COMMA
## LR(1) items:
separated_nonempty_list(COMMA,range) -> range COMMA . separated_nonempty_list(COMMA,range) [ RPAREN ]
## Transitions:
-- On INT shift to state 183
-- On separated_nonempty_list(COMMA,range) shift to state 189
-- On range shift to state 187
## Reductions:

State 189:
## Known stack suffix:
## range COMMA separated_nonempty_list(COMMA,range)
## LR(1) items:
separated_nonempty_list(COMMA,range) -> range COMMA separated_nonempty_list(COMMA,range) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,range) -> range COMMA separated_nonempty_list(COMMA,range)

State 190:
## Known stack suffix:
## EXEC NID LPAREN loption(separated_nonempty_list(COMMA,range))
## LR(1) items:
pexec -> EXEC NID LPAREN loption(separated_nonempty_list(COMMA,range)) . RPAREN [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On RPAREN shift to state 191
## Reductions:

State 191:
## Known stack suffix:
## EXEC NID LPAREN loption(separated_nonempty_list(COMMA,range)) RPAREN
## LR(1) items:
pexec -> EXEC NID LPAREN loption(separated_nonempty_list(COMMA,range)) RPAREN . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production pexec -> EXEC NID LPAREN loption(separated_nonempty_list(COMMA,range)) RPAREN

State 192:
## Known stack suffix:
## top_annotation
## LR(1) items:
list(top_annotation) -> top_annotation . list(top_annotation) [ WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On list(top_annotation) shift to state 193
## Reductions:
-- On WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT
--   reduce production list(top_annotation) ->

State 193:
## Known stack suffix:
## top_annotation list(top_annotation)
## LR(1) items:
list(top_annotation) -> top_annotation list(top_annotation) . [ WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT
--   reduce production list(top_annotation) -> top_annotation list(top_annotation)

State 194:
## Known stack suffix:
## top
## LR(1) items:
list(loc(top)) -> top . list(loc(top)) [ EOF ]
## Transitions:
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On T_INT shift to state 8
-- On T_BOOL shift to state 9
-- On SHARP shift to state 10
-- On PARAM shift to state 43
-- On FROM shift to state 178
-- On EXEC shift to state 180
-- On utype shift to state 44
-- On top_annotation shift to state 192
-- On top shift to state 194
-- On ptype_r shift to state 172
-- On ptype shift to state 195
-- On prequire shift to state 204
-- On pparam shift to state 205
-- On pglobal shift to state 206
-- On pfundef shift to state 207
-- On pexec shift to state 208
-- On option(from) shift to state 209
-- On list(top_annotation) shift to state 215
-- On list(loc(top)) shift to state 216
-- On from shift to state 217
-- On annotations shift to state 218
## Reductions:
-- On EOF
--   reduce production list(loc(top)) ->
-- On INLINE FN EXPORT
--   reduce production list(top_annotation) ->
-- On REQUIRE
--   reduce production option(from) ->

State 195:
## Known stack suffix:
## ptype
## LR(1) items:
pglobal -> ptype . NID EQ pgexpr SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On NID shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## ptype NID
## LR(1) items:
pglobal -> ptype NID . EQ pgexpr SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On EQ shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## ptype NID EQ
## LR(1) items:
pglobal -> ptype NID EQ . pgexpr SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On LBRACE shift to state 198
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pgexpr shift to state 201
-- On pexpr_r shift to state 69
-- On pexpr shift to state 203
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 198:
## Known stack suffix:
## LBRACE
## LR(1) items:
pgexpr -> LBRACE . separated_nonempty_list(COMMA,pexpr) RBRACE [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On separated_nonempty_list(COMMA,pexpr) shift to state 199
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 70
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 199:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,pexpr)
## LR(1) items:
pgexpr -> LBRACE separated_nonempty_list(COMMA,pexpr) . RBRACE [ SEMICOLON ]
## Transitions:
-- On RBRACE shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,pexpr) RBRACE
## LR(1) items:
pgexpr -> LBRACE separated_nonempty_list(COMMA,pexpr) RBRACE . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production pgexpr -> LBRACE separated_nonempty_list(COMMA,pexpr) RBRACE

State 201:
## Known stack suffix:
## ptype NID EQ pgexpr
## LR(1) items:
pglobal -> ptype NID EQ pgexpr . SEMICOLON [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On SEMICOLON shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## ptype NID EQ pgexpr SEMICOLON
## LR(1) items:
pglobal -> ptype NID EQ pgexpr SEMICOLON . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production pglobal -> ptype NID EQ pgexpr SEMICOLON

State 203:
## Known stack suffix:
## pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pgexpr -> pexpr . [ SEMICOLON ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On SEMICOLON
--   reduce production pgexpr -> pexpr

State 204:
## Known stack suffix:
## prequire
## LR(1) items:
top -> prequire . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production top -> prequire

State 205:
## Known stack suffix:
## pparam
## LR(1) items:
top -> pparam . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production top -> pparam

State 206:
## Known stack suffix:
## pglobal
## LR(1) items:
top -> pglobal . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production top -> pglobal

State 207:
## Known stack suffix:
## pfundef
## LR(1) items:
top -> pfundef . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production top -> pfundef

State 208:
## Known stack suffix:
## pexec
## LR(1) items:
top -> pexec . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production top -> pexec

State 209:
## Known stack suffix:
## option(from)
## LR(1) items:
prequire -> option(from) . REQUIRE nonempty_list(prequire1) [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On REQUIRE shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## option(from) REQUIRE
## LR(1) items:
prequire -> option(from) REQUIRE . nonempty_list(prequire1) [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On STRING shift to state 211
-- On prequire1 shift to state 212
-- On nonempty_list(prequire1) shift to state 214
## Reductions:

State 211:
## Known stack suffix:
## STRING
## LR(1) items:
prequire1 -> STRING . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL STRING SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL STRING SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production prequire1 -> STRING

State 212:
## Known stack suffix:
## prequire1
## LR(1) items:
nonempty_list(prequire1) -> prequire1 . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
nonempty_list(prequire1) -> prequire1 . nonempty_list(prequire1) [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On STRING shift to state 211
-- On prequire1 shift to state 212
-- On nonempty_list(prequire1) shift to state 213
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production nonempty_list(prequire1) -> prequire1

State 213:
## Known stack suffix:
## prequire1 nonempty_list(prequire1)
## LR(1) items:
nonempty_list(prequire1) -> prequire1 nonempty_list(prequire1) . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production nonempty_list(prequire1) -> prequire1 nonempty_list(prequire1)

State 214:
## Known stack suffix:
## option(from) REQUIRE nonempty_list(prequire1)
## LR(1) items:
prequire -> option(from) REQUIRE nonempty_list(prequire1) . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production prequire -> option(from) REQUIRE nonempty_list(prequire1)

State 215:
## Known stack suffix:
## list(top_annotation)
## LR(1) items:
annotations -> list(top_annotation) . [ WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR FN EXPORT ARRAYINIT
--   reduce production annotations -> list(top_annotation)

State 216:
## Known stack suffix:
## top list(loc(top))
## LR(1) items:
list(loc(top)) -> top list(loc(top)) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(loc(top)) -> top list(loc(top))

State 217:
## Known stack suffix:
## from
## LR(1) items:
option(from) -> from . [ REQUIRE ]
## Transitions:
## Reductions:
-- On REQUIRE
--   reduce production option(from) -> from

State 218:
## Known stack suffix:
## annotations
## LR(1) items:
pfundef -> annotations . option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On INLINE shift to state 219
-- On EXPORT shift to state 220
-- On option(call_conv) shift to state 221
-- On call_conv shift to state 383
## Reductions:
-- On FN
--   reduce production option(call_conv) ->

State 219:
## Known stack suffix:
## INLINE
## LR(1) items:
call_conv -> INLINE . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production call_conv -> INLINE

State 220:
## Known stack suffix:
## EXPORT
## LR(1) items:
call_conv -> EXPORT . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production call_conv -> EXPORT

State 221:
## Known stack suffix:
## annotations option(call_conv)
## LR(1) items:
pfundef -> annotations option(call_conv) . FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On FN shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## annotations option(call_conv) FN
## LR(1) items:
pfundef -> annotations option(call_conv) FN . NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On NID shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## annotations option(call_conv) FN NID
## LR(1) items:
pfundef -> annotations option(call_conv) FN NID . LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On LPAREN shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## annotations option(call_conv) FN NID LPAREN
## LR(1) items:
pfundef -> annotations option(call_conv) FN NID LPAREN . loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On separated_nonempty_list(COMMA,annot_pvardecl) shift to state 225
-- On loption(separated_nonempty_list(COMMA,annot_pvardecl)) shift to state 226
-- On list(top_annotation) shift to state 215
-- On annotations shift to state 375
-- On annot_pvardecl shift to state 380
## Reductions:
-- On STACK REG INLINE GLOBAL
--   reduce production list(top_annotation) ->
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,annot_pvardecl)) ->

State 225:
## Known stack suffix:
## separated_nonempty_list(COMMA,annot_pvardecl)
## LR(1) items:
loption(separated_nonempty_list(COMMA,annot_pvardecl)) -> separated_nonempty_list(COMMA,annot_pvardecl) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,annot_pvardecl)) -> separated_nonempty_list(COMMA,annot_pvardecl)

State 226:
## Known stack suffix:
## annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl))
## LR(1) items:
pfundef -> annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) . RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On RPAREN shift to state 227
## Reductions:

State 227:
## Known stack suffix:
## annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN
## LR(1) items:
pfundef -> annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN . option(prefix(RARROW,tuple(annot_stor_type))) pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On RARROW shift to state 228
-- On option(prefix(RARROW,tuple(annot_stor_type))) shift to state 254
## Reductions:
-- On LBRACE
--   reduce production option(prefix(RARROW,tuple(annot_stor_type))) ->

State 228:
## Known stack suffix:
## RARROW
## LR(1) items:
option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW . LPAREN loption(separated_nonempty_list(COMMA,annot_stor_type)) RPAREN [ LBRACE ]
option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW . loption(separated_nonempty_list(COMMA,annot_stor_type)) [ LBRACE ]
## Transitions:
-- On SHARP shift to state 10
-- On LPAREN shift to state 229
-- On top_annotation shift to state 192
-- On separated_nonempty_list(COMMA,annot_stor_type) shift to state 230
-- On loption(separated_nonempty_list(COMMA,annot_stor_type)) shift to state 253
-- On list(top_annotation) shift to state 215
-- On annotations shift to state 233
-- On annot_stor_type shift to state 250
## Reductions:
-- On STACK REG INLINE GLOBAL
--   reduce production list(top_annotation) ->
-- On LBRACE
--   reduce production loption(separated_nonempty_list(COMMA,annot_stor_type)) ->

State 229:
## Known stack suffix:
## RARROW LPAREN
## LR(1) items:
option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW LPAREN . loption(separated_nonempty_list(COMMA,annot_stor_type)) RPAREN [ LBRACE ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On separated_nonempty_list(COMMA,annot_stor_type) shift to state 230
-- On loption(separated_nonempty_list(COMMA,annot_stor_type)) shift to state 231
-- On list(top_annotation) shift to state 215
-- On annotations shift to state 233
-- On annot_stor_type shift to state 250
## Reductions:
-- On STACK REG INLINE GLOBAL
--   reduce production list(top_annotation) ->
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,annot_stor_type)) ->

State 230:
## Known stack suffix:
## separated_nonempty_list(COMMA,annot_stor_type)
## LR(1) items:
loption(separated_nonempty_list(COMMA,annot_stor_type)) -> separated_nonempty_list(COMMA,annot_stor_type) . [ RPAREN LBRACE ]
## Transitions:
## Reductions:
-- On RPAREN LBRACE
--   reduce production loption(separated_nonempty_list(COMMA,annot_stor_type)) -> separated_nonempty_list(COMMA,annot_stor_type)

State 231:
## Known stack suffix:
## RARROW LPAREN loption(separated_nonempty_list(COMMA,annot_stor_type))
## LR(1) items:
option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW LPAREN loption(separated_nonempty_list(COMMA,annot_stor_type)) . RPAREN [ LBRACE ]
## Transitions:
-- On RPAREN shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## RARROW LPAREN loption(separated_nonempty_list(COMMA,annot_stor_type)) RPAREN
## LR(1) items:
option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW LPAREN loption(separated_nonempty_list(COMMA,annot_stor_type)) RPAREN . [ LBRACE ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW LPAREN loption(separated_nonempty_list(COMMA,annot_stor_type)) RPAREN

State 233:
## Known stack suffix:
## annotations
## LR(1) items:
annot_stor_type -> annotations . stor_type [ RPAREN LBRACE COMMA ]
## Transitions:
-- On STACK shift to state 234
-- On REG shift to state 243
-- On INLINE shift to state 245
-- On GLOBAL shift to state 246
-- On storage shift to state 247
-- On stor_type shift to state 249
## Reductions:

State 234:
## Known stack suffix:
## STACK
## LR(1) items:
storage -> STACK . ptr [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
-- On MUTABLE shift to state 235
-- On CONSTANT shift to state 236
-- On writable shift to state 237
-- On ptr shift to state 238
-- On pointer shift to state 239
-- On option(writable) shift to state 240
-- On option(pointer) shift to state 242
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production option(pointer) ->
-- On POINTER
--   reduce production option(writable) ->

State 235:
## Known stack suffix:
## MUTABLE
## LR(1) items:
writable -> MUTABLE . [ POINTER ]
## Transitions:
## Reductions:
-- On POINTER
--   reduce production writable -> MUTABLE

State 236:
## Known stack suffix:
## CONSTANT
## LR(1) items:
writable -> CONSTANT . [ POINTER ]
## Transitions:
## Reductions:
-- On POINTER
--   reduce production writable -> CONSTANT

State 237:
## Known stack suffix:
## writable
## LR(1) items:
option(writable) -> writable . [ POINTER ]
## Transitions:
## Reductions:
-- On POINTER
--   reduce production option(writable) -> writable

State 238:
## Known stack suffix:
## STACK ptr
## LR(1) items:
storage -> STACK ptr . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production storage -> STACK ptr

State 239:
## Known stack suffix:
## pointer
## LR(1) items:
option(pointer) -> pointer . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production option(pointer) -> pointer

State 240:
## Known stack suffix:
## option(writable)
## LR(1) items:
pointer -> option(writable) . POINTER [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
-- On POINTER shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## option(writable) POINTER
## LR(1) items:
pointer -> option(writable) POINTER . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production pointer -> option(writable) POINTER

State 242:
## Known stack suffix:
## option(pointer)
## LR(1) items:
ptr -> option(pointer) . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production ptr -> option(pointer)

State 243:
## Known stack suffix:
## REG
## LR(1) items:
storage -> REG . ptr [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
-- On MUTABLE shift to state 235
-- On CONSTANT shift to state 236
-- On writable shift to state 237
-- On ptr shift to state 244
-- On pointer shift to state 239
-- On option(writable) shift to state 240
-- On option(pointer) shift to state 242
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production option(pointer) ->
-- On POINTER
--   reduce production option(writable) ->

State 244:
## Known stack suffix:
## REG ptr
## LR(1) items:
storage -> REG ptr . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production storage -> REG ptr

State 245:
## Known stack suffix:
## INLINE
## LR(1) items:
storage -> INLINE . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production storage -> INLINE

State 246:
## Known stack suffix:
## GLOBAL
## LR(1) items:
storage -> GLOBAL . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL
--   reduce production storage -> GLOBAL

State 247:
## Known stack suffix:
## storage
## LR(1) items:
stor_type -> storage . ptype [ RPAREN NID LBRACE COMMA ]
## Transitions:
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On T_INT shift to state 8
-- On T_BOOL shift to state 9
-- On utype shift to state 44
-- On ptype_r shift to state 172
-- On ptype shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## storage ptype
## LR(1) items:
stor_type -> storage ptype . [ RPAREN NID LBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN NID LBRACE COMMA
--   reduce production stor_type -> storage ptype

State 249:
## Known stack suffix:
## annotations stor_type
## LR(1) items:
annot_stor_type -> annotations stor_type . [ RPAREN LBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN LBRACE COMMA
--   reduce production annot_stor_type -> annotations stor_type

State 250:
## Known stack suffix:
## annot_stor_type
## LR(1) items:
separated_nonempty_list(COMMA,annot_stor_type) -> annot_stor_type . [ RPAREN LBRACE ]
separated_nonempty_list(COMMA,annot_stor_type) -> annot_stor_type . COMMA separated_nonempty_list(COMMA,annot_stor_type) [ RPAREN LBRACE ]
## Transitions:
-- On COMMA shift to state 251
## Reductions:
-- On RPAREN LBRACE
--   reduce production separated_nonempty_list(COMMA,annot_stor_type) -> annot_stor_type

State 251:
## Known stack suffix:
## annot_stor_type COMMA
## LR(1) items:
separated_nonempty_list(COMMA,annot_stor_type) -> annot_stor_type COMMA . separated_nonempty_list(COMMA,annot_stor_type) [ RPAREN LBRACE ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On separated_nonempty_list(COMMA,annot_stor_type) shift to state 252
-- On list(top_annotation) shift to state 215
-- On annotations shift to state 233
-- On annot_stor_type shift to state 250
## Reductions:
-- On STACK REG INLINE GLOBAL
--   reduce production list(top_annotation) ->

State 252:
## Known stack suffix:
## annot_stor_type COMMA separated_nonempty_list(COMMA,annot_stor_type)
## LR(1) items:
separated_nonempty_list(COMMA,annot_stor_type) -> annot_stor_type COMMA separated_nonempty_list(COMMA,annot_stor_type) . [ RPAREN LBRACE ]
## Transitions:
## Reductions:
-- On RPAREN LBRACE
--   reduce production separated_nonempty_list(COMMA,annot_stor_type) -> annot_stor_type COMMA separated_nonempty_list(COMMA,annot_stor_type)

State 253:
## Known stack suffix:
## RARROW loption(separated_nonempty_list(COMMA,annot_stor_type))
## LR(1) items:
option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW loption(separated_nonempty_list(COMMA,annot_stor_type)) . [ LBRACE ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production option(prefix(RARROW,tuple(annot_stor_type))) -> RARROW loption(separated_nonempty_list(COMMA,annot_stor_type))

State 254:
## Known stack suffix:
## annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type)))
## LR(1) items:
pfundef -> annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) . pfunbody [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On LBRACE shift to state 255
-- On pfunbody shift to state 374
## Reductions:

State 255:
## Known stack suffix:
## LBRACE
## LR(1) items:
pfunbody -> LBRACE . list(pinstr) option(__anonymous_1) RBRACE [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On pinstr shift to state 256
-- On list(top_annotation) shift to state 215
-- On list(pinstr) shift to state 360
-- On annotations shift to state 258
## Reductions:
-- On RETURN RBRACE
--   reduce production list(pinstr) ->
-- On WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production list(top_annotation) ->

State 256:
## Known stack suffix:
## pinstr
## LR(1) items:
list(pinstr) -> pinstr . list(pinstr) [ RETURN RBRACE ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On pinstr shift to state 256
-- On list(top_annotation) shift to state 215
-- On list(pinstr) shift to state 257
-- On annotations shift to state 258
## Reductions:
-- On RETURN RBRACE
--   reduce production list(pinstr) ->
-- On WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production list(top_annotation) ->

State 257:
## Known stack suffix:
## pinstr list(pinstr)
## LR(1) items:
list(pinstr) -> pinstr list(pinstr) . [ RETURN RBRACE ]
## Transitions:
## Reductions:
-- On RETURN RBRACE
--   reduce production list(pinstr) -> pinstr list(pinstr)

State 258:
## Known stack suffix:
## annotations
## LR(1) items:
pinstr -> annotations . pinstr_r [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On WHILE shift to state 259
-- On UNDERSCORE shift to state 270
-- On STACK shift to state 234
-- On REG shift to state 243
-- On QUESTIONMARK shift to state 271
-- On NID shift to state 49
-- On LPAREN shift to state 275
-- On INLINE shift to state 245
-- On IF shift to state 290
-- On GLOBAL shift to state 246
-- On FOR shift to state 295
-- On ARRAYINIT shift to state 305
-- On var shift to state 310
-- On storage shift to state 247
-- On stor_type shift to state 318
-- On separated_nonempty_list(COMMA,plvalue) shift to state 325
-- On plvalues shift to state 326
-- On plvalue_r shift to state 281
-- On plvalue shift to state 282
-- On pinstr_r shift to state 356
-- On option(parens(utype)) shift to state 285
-- On implicites shift to state 357
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 259:
## Known stack suffix:
## WHILE
## LR(1) items:
pinstr_r -> WHILE . option(pblock) LPAREN pexpr RPAREN [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> WHILE . option(pblock) LPAREN pexpr RPAREN pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On LBRACE shift to state 260
-- On pblock_r shift to state 263
-- On pblock shift to state 264
-- On option(pblock) shift to state 265
## Reductions:
-- On LPAREN
--   reduce production option(pblock) ->

State 260:
## Known stack suffix:
## LBRACE
## LR(1) items:
pblock_r -> LBRACE . list(pinstr) RBRACE [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ELSE ARRAYINIT ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On pinstr shift to state 256
-- On list(top_annotation) shift to state 215
-- On list(pinstr) shift to state 261
-- On annotations shift to state 258
## Reductions:
-- On RBRACE
--   reduce production list(pinstr) ->
-- On WHILE UNDERSCORE STACK REG QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production list(top_annotation) ->

State 261:
## Known stack suffix:
## LBRACE list(pinstr)
## LR(1) items:
pblock_r -> LBRACE list(pinstr) . RBRACE [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ELSE ARRAYINIT ]
## Transitions:
-- On RBRACE shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## LBRACE list(pinstr) RBRACE
## LR(1) items:
pblock_r -> LBRACE list(pinstr) RBRACE . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ELSE ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ELSE ARRAYINIT
--   reduce production pblock_r -> LBRACE list(pinstr) RBRACE

State 263:
## Known stack suffix:
## pblock_r
## LR(1) items:
pblock -> pblock_r . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ELSE ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ELSE ARRAYINIT
--   reduce production pblock -> pblock_r

State 264:
## Known stack suffix:
## pblock
## LR(1) items:
option(pblock) -> pblock . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN
--   reduce production option(pblock) -> pblock

State 265:
## Known stack suffix:
## WHILE option(pblock)
## LR(1) items:
pinstr_r -> WHILE option(pblock) . LPAREN pexpr RPAREN [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> WHILE option(pblock) . LPAREN pexpr RPAREN pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On LPAREN shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## WHILE option(pblock) LPAREN
## LR(1) items:
pinstr_r -> WHILE option(pblock) LPAREN . pexpr RPAREN [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> WHILE option(pblock) LPAREN . pexpr RPAREN pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 267
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 267:
## Known stack suffix:
## WHILE option(pblock) LPAREN pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH RPAREN QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pinstr_r -> WHILE option(pblock) LPAREN pexpr . RPAREN [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> WHILE option(pblock) LPAREN pexpr . RPAREN pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On RPAREN shift to state 268
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:

State 268:
## Known stack suffix:
## WHILE option(pblock) LPAREN pexpr RPAREN
## LR(1) items:
pinstr_r -> WHILE option(pblock) LPAREN pexpr RPAREN . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> WHILE option(pblock) LPAREN pexpr RPAREN . pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On LBRACE shift to state 260
-- On pblock_r shift to state 263
-- On pblock shift to state 269
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> WHILE option(pblock) LPAREN pexpr RPAREN

State 269:
## Known stack suffix:
## WHILE option(pblock) LPAREN pexpr RPAREN pblock
## LR(1) items:
pinstr_r -> WHILE option(pblock) LPAREN pexpr RPAREN pblock . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> WHILE option(pblock) LPAREN pexpr RPAREN pblock

State 270:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
plvalue_r -> UNDERSCORE . [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
## Reductions:
-- On STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP
--   reduce production plvalue_r -> UNDERSCORE

State 271:
## Known stack suffix:
## QUESTIONMARK
## LR(1) items:
implicites -> QUESTIONMARK . LBRACE struct_annot RBRACE [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On LBRACE shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## QUESTIONMARK LBRACE
## LR(1) items:
implicites -> QUESTIONMARK LBRACE . struct_annot RBRACE [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On STRING shift to state 11
-- On STACK shift to state 12
-- On REG shift to state 13
-- On NID shift to state 14
-- On INLINE shift to state 16
-- On EXPORT shift to state 17
-- On struct_annot shift to state 273
-- On separated_nonempty_list(COMMA,annotation) shift to state 20
-- On loption(separated_nonempty_list(COMMA,annotation)) shift to state 21
-- On keyword shift to state 22
-- On annotationlabel shift to state 23
-- On annotation shift to state 32
## Reductions:
-- On RBRACE
--   reduce production loption(separated_nonempty_list(COMMA,annotation)) ->

State 273:
## Known stack suffix:
## QUESTIONMARK LBRACE struct_annot
## LR(1) items:
implicites -> QUESTIONMARK LBRACE struct_annot . RBRACE [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On RBRACE shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## QUESTIONMARK LBRACE struct_annot RBRACE
## LR(1) items:
implicites -> QUESTIONMARK LBRACE struct_annot RBRACE . [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
## Reductions:
-- On STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP
--   reduce production implicites -> QUESTIONMARK LBRACE struct_annot RBRACE

State 275:
## Known stack suffix:
## LPAREN
## LR(1) items:
option(parens(utype)) -> LPAREN . utype RPAREN [ LBRACKET ]
plvalues -> LPAREN . separated_nonempty_list(COMMA,plvalue) RPAREN [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
-- On UNDERSCORE shift to state 270
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On NID shift to state 49
-- On LPAREN shift to state 276
-- On var shift to state 277
-- On utype shift to state 156
-- On separated_nonempty_list(COMMA,plvalue) shift to state 279
-- On plvalue_r shift to state 281
-- On plvalue shift to state 282
-- On option(parens(utype)) shift to state 285
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 276:
## Known stack suffix:
## LPAREN
## LR(1) items:
option(parens(utype)) -> LPAREN . utype RPAREN [ LBRACKET ]
## Transitions:
-- On T_U8 shift to state 2
-- On T_U64 shift to state 3
-- On T_U32 shift to state 4
-- On T_U256 shift to state 5
-- On T_U16 shift to state 6
-- On T_U128 shift to state 7
-- On utype shift to state 156
## Reductions:

State 277:
## Known stack suffix:
## var
## LR(1) items:
plvalue_r -> var . [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
plvalue_r -> var . arr_access [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On DOT shift to state 142
-- On option(DOT) shift to state 143
-- On arr_access shift to state 278
## Reductions:
-- On LBRACKET
--   reduce production option(DOT) ->
-- On STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP
--   reduce production plvalue_r -> var

State 278:
## Known stack suffix:
## var arr_access
## LR(1) items:
plvalue_r -> var arr_access . [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
## Reductions:
-- On STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP
--   reduce production plvalue_r -> var arr_access

State 279:
## Known stack suffix:
## LPAREN separated_nonempty_list(COMMA,plvalue)
## LR(1) items:
plvalues -> LPAREN separated_nonempty_list(COMMA,plvalue) . RPAREN [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
-- On RPAREN shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## LPAREN separated_nonempty_list(COMMA,plvalue) RPAREN
## LR(1) items:
plvalues -> LPAREN separated_nonempty_list(COMMA,plvalue) RPAREN . [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
## Reductions:
-- On STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP
--   reduce production plvalues -> LPAREN separated_nonempty_list(COMMA,plvalue) RPAREN

State 281:
## Known stack suffix:
## plvalue_r
## LR(1) items:
plvalue -> plvalue_r . [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
## Reductions:
-- On STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP
--   reduce production plvalue -> plvalue_r

State 282:
## Known stack suffix:
## plvalue
## LR(1) items:
separated_nonempty_list(COMMA,plvalue) -> plvalue . [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
separated_nonempty_list(COMMA,plvalue) -> plvalue . COMMA separated_nonempty_list(COMMA,plvalue) [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
-- On COMMA shift to state 283
## Reductions:
-- On STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ AMP
--   reduce production separated_nonempty_list(COMMA,plvalue) -> plvalue

State 283:
## Known stack suffix:
## plvalue COMMA
## LR(1) items:
separated_nonempty_list(COMMA,plvalue) -> plvalue COMMA . separated_nonempty_list(COMMA,plvalue) [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
-- On UNDERSCORE shift to state 270
-- On NID shift to state 49
-- On LPAREN shift to state 276
-- On var shift to state 277
-- On separated_nonempty_list(COMMA,plvalue) shift to state 284
-- On plvalue_r shift to state 281
-- On plvalue shift to state 282
-- On option(parens(utype)) shift to state 285
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 284:
## Known stack suffix:
## plvalue COMMA separated_nonempty_list(COMMA,plvalue)
## LR(1) items:
separated_nonempty_list(COMMA,plvalue) -> plvalue COMMA separated_nonempty_list(COMMA,plvalue) . [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
## Reductions:
-- On STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ AMP
--   reduce production separated_nonempty_list(COMMA,plvalue) -> plvalue COMMA separated_nonempty_list(COMMA,plvalue)

State 285:
## Known stack suffix:
## option(parens(utype))
## LR(1) items:
plvalue_r -> option(parens(utype)) . LBRACKET var option(mem_ofs) RBRACKET [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On LBRACKET shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## option(parens(utype)) LBRACKET
## LR(1) items:
plvalue_r -> option(parens(utype)) LBRACKET . var option(mem_ofs) RBRACKET [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## option(parens(utype)) LBRACKET var
## LR(1) items:
plvalue_r -> option(parens(utype)) LBRACKET var . option(mem_ofs) RBRACKET [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On PLUS shift to state 77
-- On MINUS shift to state 132
-- On option(mem_ofs) shift to state 288
## Reductions:
-- On RBRACKET
--   reduce production option(mem_ofs) ->

State 288:
## Known stack suffix:
## option(parens(utype)) LBRACKET var option(mem_ofs)
## LR(1) items:
plvalue_r -> option(parens(utype)) LBRACKET var option(mem_ofs) . RBRACKET [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On RBRACKET shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## option(parens(utype)) LBRACKET var option(mem_ofs) RBRACKET
## LR(1) items:
plvalue_r -> option(parens(utype)) LBRACKET var option(mem_ofs) RBRACKET . [ STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
## Reductions:
-- On STAR RPAREN PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP
--   reduce production plvalue_r -> option(parens(utype)) LBRACKET var option(mem_ofs) RBRACKET

State 290:
## Known stack suffix:
## IF
## LR(1) items:
pinstr_r -> IF . pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> IF . pexpr pblock ELSE pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 291
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 291:
## Known stack suffix:
## IF pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pinstr_r -> IF pexpr . pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> IF pexpr . pblock ELSE pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On LBRACE shift to state 260
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
-- On pblock_r shift to state 263
-- On pblock shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## IF pexpr pblock
## LR(1) items:
pinstr_r -> IF pexpr pblock . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> IF pexpr pblock . ELSE pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On ELSE shift to state 293
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> IF pexpr pblock

State 293:
## Known stack suffix:
## IF pexpr pblock ELSE
## LR(1) items:
pinstr_r -> IF pexpr pblock ELSE . pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On LBRACE shift to state 260
-- On pblock_r shift to state 263
-- On pblock shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## IF pexpr pblock ELSE pblock
## LR(1) items:
pinstr_r -> IF pexpr pblock ELSE pblock . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> IF pexpr pblock ELSE pblock

State 295:
## Known stack suffix:
## FOR
## LR(1) items:
pinstr_r -> FOR . var EQ pexpr TO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> FOR . var EQ pexpr DOWNTO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## FOR var
## LR(1) items:
pinstr_r -> FOR var . EQ pexpr TO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> FOR var . EQ pexpr DOWNTO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On EQ shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## FOR var EQ
## LR(1) items:
pinstr_r -> FOR var EQ . pexpr TO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> FOR var EQ . pexpr DOWNTO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 298
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 298:
## Known stack suffix:
## FOR var EQ pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ TO STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ DOWNTO BANGEQ AMPAMP AMP ]
pinstr_r -> FOR var EQ pexpr . TO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
pinstr_r -> FOR var EQ pexpr . DOWNTO pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TO shift to state 299
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On DOWNTO shift to state 302
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:

State 299:
## Known stack suffix:
## FOR var EQ pexpr TO
## LR(1) items:
pinstr_r -> FOR var EQ pexpr TO . pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 300
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 300:
## Known stack suffix:
## FOR var EQ pexpr TO pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pinstr_r -> FOR var EQ pexpr TO pexpr . pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On LBRACE shift to state 260
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
-- On pblock_r shift to state 263
-- On pblock shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## FOR var EQ pexpr TO pexpr pblock
## LR(1) items:
pinstr_r -> FOR var EQ pexpr TO pexpr pblock . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> FOR var EQ pexpr TO pexpr pblock

State 302:
## Known stack suffix:
## FOR var EQ pexpr DOWNTO
## LR(1) items:
pinstr_r -> FOR var EQ pexpr DOWNTO . pexpr pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 303
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 303:
## Known stack suffix:
## FOR var EQ pexpr DOWNTO pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE LBRACE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pinstr_r -> FOR var EQ pexpr DOWNTO pexpr . pblock [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On LBRACE shift to state 260
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
-- On pblock_r shift to state 263
-- On pblock shift to state 304
## Reductions:

State 304:
## Known stack suffix:
## FOR var EQ pexpr DOWNTO pexpr pblock
## LR(1) items:
pinstr_r -> FOR var EQ pexpr DOWNTO pexpr pblock . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> FOR var EQ pexpr DOWNTO pexpr pblock

State 305:
## Known stack suffix:
## ARRAYINIT
## LR(1) items:
pinstr_r -> ARRAYINIT . LPAREN var RPAREN SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On LPAREN shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## ARRAYINIT LPAREN
## LR(1) items:
pinstr_r -> ARRAYINIT LPAREN . var RPAREN SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## ARRAYINIT LPAREN var
## LR(1) items:
pinstr_r -> ARRAYINIT LPAREN var . RPAREN SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On RPAREN shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## ARRAYINIT LPAREN var RPAREN
## LR(1) items:
pinstr_r -> ARRAYINIT LPAREN var RPAREN . SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On SEMICOLON shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## ARRAYINIT LPAREN var RPAREN SEMICOLON
## LR(1) items:
pinstr_r -> ARRAYINIT LPAREN var RPAREN SEMICOLON . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> ARRAYINIT LPAREN var RPAREN SEMICOLON

State 310:
## Known stack suffix:
## var
## LR(1) items:
pinstr_r -> var . LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN option(prefix(IF,pexpr)) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
plvalue_r -> var . [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
plvalue_r -> var . arr_access [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP ]
## Transitions:
-- On LPAREN shift to state 311
-- On DOT shift to state 142
-- On option(DOT) shift to state 143
-- On arr_access shift to state 278
## Reductions:
-- On LBRACKET
--   reduce production option(DOT) ->
-- On STAR PLUS PIPE MINUS LTLT HAT GTGT EQ COMMA AMP
--   reduce production plvalue_r -> var

State 311:
## Known stack suffix:
## var LPAREN
## LR(1) items:
pinstr_r -> var LPAREN . loption(separated_nonempty_list(COMMA,pexpr)) RPAREN option(prefix(IF,pexpr)) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On separated_nonempty_list(COMMA,pexpr) shift to state 66
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 70
-- On option(parens(utype)) shift to state 74
-- On loption(separated_nonempty_list(COMMA,pexpr)) shift to state 312
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pexpr)) ->
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 312:
## Known stack suffix:
## var LPAREN loption(separated_nonempty_list(COMMA,pexpr))
## LR(1) items:
pinstr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) . RPAREN option(prefix(IF,pexpr)) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On RPAREN shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN
## LR(1) items:
pinstr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN . option(prefix(IF,pexpr)) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On IF shift to state 314
-- On option(prefix(IF,pexpr)) shift to state 316
## Reductions:
-- On SEMICOLON
--   reduce production option(prefix(IF,pexpr)) ->

State 314:
## Known stack suffix:
## IF
## LR(1) items:
option(prefix(IF,pexpr)) -> IF . pexpr [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 315
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 315:
## Known stack suffix:
## IF pexpr
## LR(1) items:
option(prefix(IF,pexpr)) -> IF pexpr . [ SEMICOLON ]
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
## Reductions:
-- On SEMICOLON
--   reduce production option(prefix(IF,pexpr)) -> IF pexpr

State 316:
## Known stack suffix:
## var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN option(prefix(IF,pexpr))
## LR(1) items:
pinstr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN option(prefix(IF,pexpr)) . SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On SEMICOLON shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN option(prefix(IF,pexpr)) SEMICOLON
## LR(1) items:
pinstr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN option(prefix(IF,pexpr)) SEMICOLON . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> var LPAREN loption(separated_nonempty_list(COMMA,pexpr)) RPAREN option(prefix(IF,pexpr)) SEMICOLON

State 318:
## Known stack suffix:
## stor_type
## LR(1) items:
pinstr_r -> stor_type . separated_nonempty_list(option(COMMA),var) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 319
-- On separated_nonempty_list(option(COMMA),var) shift to state 323
## Reductions:

State 319:
## Known stack suffix:
## var
## LR(1) items:
separated_nonempty_list(option(COMMA),var) -> var . [ SEMICOLON ]
separated_nonempty_list(option(COMMA),var) -> var . option(COMMA) separated_nonempty_list(option(COMMA),var) [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 320
-- On option(COMMA) shift to state 321
## Reductions:
-- On NID
--   reduce production option(COMMA) ->
-- On SEMICOLON
--   reduce production separated_nonempty_list(option(COMMA),var) -> var

State 320:
## Known stack suffix:
## COMMA
## LR(1) items:
option(COMMA) -> COMMA . [ NID ]
## Transitions:
## Reductions:
-- On NID
--   reduce production option(COMMA) -> COMMA

State 321:
## Known stack suffix:
## var option(COMMA)
## LR(1) items:
separated_nonempty_list(option(COMMA),var) -> var option(COMMA) . separated_nonempty_list(option(COMMA),var) [ SEMICOLON ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 319
-- On separated_nonempty_list(option(COMMA),var) shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## var option(COMMA) separated_nonempty_list(option(COMMA),var)
## LR(1) items:
separated_nonempty_list(option(COMMA),var) -> var option(COMMA) separated_nonempty_list(option(COMMA),var) . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production separated_nonempty_list(option(COMMA),var) -> var option(COMMA) separated_nonempty_list(option(COMMA),var)

State 323:
## Known stack suffix:
## stor_type separated_nonempty_list(option(COMMA),var)
## LR(1) items:
pinstr_r -> stor_type separated_nonempty_list(option(COMMA),var) . SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On SEMICOLON shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## stor_type separated_nonempty_list(option(COMMA),var) SEMICOLON
## LR(1) items:
pinstr_r -> stor_type separated_nonempty_list(option(COMMA),var) SEMICOLON . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> stor_type separated_nonempty_list(option(COMMA),var) SEMICOLON

State 325:
## Known stack suffix:
## separated_nonempty_list(COMMA,plvalue)
## LR(1) items:
plvalues -> separated_nonempty_list(COMMA,plvalue) . [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
## Reductions:
-- On STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP
--   reduce production plvalues -> separated_nonempty_list(COMMA,plvalue)

State 326:
## Known stack suffix:
## plvalues
## LR(1) items:
pinstr_r -> plvalues . peqop pexpr option(prefix(IF,pexpr)) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On STAR shift to state 327
-- On PLUS shift to state 330
-- On PIPE shift to state 333
-- On MINUS shift to state 336
-- On LTLT shift to state 339
-- On HAT shift to state 342
-- On GTGT shift to state 345
-- On EQ shift to state 348
-- On AMP shift to state 349
-- On peqop shift to state 352
## Reductions:

State 327:
## Known stack suffix:
## STAR
## LR(1) items:
peqop -> STAR . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 328
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 328:
## Known stack suffix:
## STAR castop
## LR(1) items:
peqop -> STAR castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## STAR castop EQ
## LR(1) items:
peqop -> STAR castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> STAR castop EQ

State 330:
## Known stack suffix:
## PLUS
## LR(1) items:
peqop -> PLUS . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 331
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 331:
## Known stack suffix:
## PLUS castop
## LR(1) items:
peqop -> PLUS castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## PLUS castop EQ
## LR(1) items:
peqop -> PLUS castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> PLUS castop EQ

State 333:
## Known stack suffix:
## PIPE
## LR(1) items:
peqop -> PIPE . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 334
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 334:
## Known stack suffix:
## PIPE castop
## LR(1) items:
peqop -> PIPE castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## PIPE castop EQ
## LR(1) items:
peqop -> PIPE castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> PIPE castop EQ

State 336:
## Known stack suffix:
## MINUS
## LR(1) items:
peqop -> MINUS . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 337
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 337:
## Known stack suffix:
## MINUS castop
## LR(1) items:
peqop -> MINUS castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## MINUS castop EQ
## LR(1) items:
peqop -> MINUS castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> MINUS castop EQ

State 339:
## Known stack suffix:
## LTLT
## LR(1) items:
peqop -> LTLT . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 340
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 340:
## Known stack suffix:
## LTLT castop
## LR(1) items:
peqop -> LTLT castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## LTLT castop EQ
## LR(1) items:
peqop -> LTLT castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> LTLT castop EQ

State 342:
## Known stack suffix:
## HAT
## LR(1) items:
peqop -> HAT . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 343
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 343:
## Known stack suffix:
## HAT castop
## LR(1) items:
peqop -> HAT castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## HAT castop EQ
## LR(1) items:
peqop -> HAT castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> HAT castop EQ

State 345:
## Known stack suffix:
## GTGT
## LR(1) items:
peqop -> GTGT . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 346
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 346:
## Known stack suffix:
## GTGT castop
## LR(1) items:
peqop -> GTGT castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## GTGT castop EQ
## LR(1) items:
peqop -> GTGT castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> GTGT castop EQ

State 348:
## Known stack suffix:
## EQ
## LR(1) items:
peqop -> EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> EQ

State 349:
## Known stack suffix:
## AMP
## LR(1) items:
peqop -> AMP . castop EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On SWSIZE shift to state 51
-- On SVSIZE shift to state 52
-- On swsize shift to state 53
-- On svsize shift to state 54
-- On option(loc(castop1)) shift to state 55
-- On castop1 shift to state 56
-- On castop shift to state 350
## Reductions:
-- On EQ
--   reduce production option(loc(castop1)) ->

State 350:
## Known stack suffix:
## AMP castop
## LR(1) items:
peqop -> AMP castop . EQ [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
-- On EQ shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## AMP castop EQ
## LR(1) items:
peqop -> AMP castop EQ . [ TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG ]
## Transitions:
## Reductions:
-- On TRUE SHARP NID MINUS LPAREN LBRACKET INT FALSE BANG
--   reduce production peqop -> AMP castop EQ

State 352:
## Known stack suffix:
## plvalues peqop
## LR(1) items:
pinstr_r -> plvalues peqop . pexpr option(prefix(IF,pexpr)) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On TRUE shift to state 46
-- On SHARP shift to state 47
-- On NID shift to state 49
-- On MINUS shift to state 50
-- On LPAREN shift to state 58
-- On INT shift to state 60
-- On FALSE shift to state 61
-- On BANG shift to state 62
-- On var shift to state 64
-- On prim shift to state 67
-- On pexpr_r shift to state 69
-- On pexpr shift to state 353
-- On option(parens(utype)) shift to state 74
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 353:
## Known stack suffix:
## plvalues peqop pexpr
## LR(1) items:
pexpr_r -> pexpr . AMPAMP pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPEPIPE pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PLUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . MINUS castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . STAR castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . SLASH castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PERCENT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . AMP castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . PIPE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . HAT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LTLT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GTGT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . EQEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . BANGEQ castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . LE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GT castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . GE castop pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pexpr_r -> pexpr . QUESTIONMARK pexpr COLON pexpr [ STAR SLASH SEMICOLON QUESTIONMARK PLUS PIPEPIPE PIPE PERCENT MINUS LTLT LT LE IF HAT GTGT GT GE EQEQ BANGEQ AMPAMP AMP ]
pinstr_r -> plvalues peqop pexpr . option(prefix(IF,pexpr)) SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On STAR shift to state 71
-- On SLASH shift to state 79
-- On QUESTIONMARK shift to state 82
-- On PLUS shift to state 84
-- On PIPEPIPE shift to state 90
-- On PIPE shift to state 92
-- On PERCENT shift to state 87
-- On MINUS shift to state 95
-- On LTLT shift to state 98
-- On LT shift to state 110
-- On LE shift to state 113
-- On IF shift to state 314
-- On HAT shift to state 101
-- On GTGT shift to state 104
-- On GT shift to state 116
-- On GE shift to state 119
-- On EQEQ shift to state 122
-- On BANGEQ shift to state 125
-- On AMPAMP shift to state 128
-- On AMP shift to state 107
-- On option(prefix(IF,pexpr)) shift to state 354
## Reductions:
-- On SEMICOLON
--   reduce production option(prefix(IF,pexpr)) ->

State 354:
## Known stack suffix:
## plvalues peqop pexpr option(prefix(IF,pexpr))
## LR(1) items:
pinstr_r -> plvalues peqop pexpr option(prefix(IF,pexpr)) . SEMICOLON [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
-- On SEMICOLON shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## plvalues peqop pexpr option(prefix(IF,pexpr)) SEMICOLON
## LR(1) items:
pinstr_r -> plvalues peqop pexpr option(prefix(IF,pexpr)) SEMICOLON . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr_r -> plvalues peqop pexpr option(prefix(IF,pexpr)) SEMICOLON

State 356:
## Known stack suffix:
## annotations pinstr_r
## LR(1) items:
pinstr -> annotations pinstr_r . [ WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT ]
## Transitions:
## Reductions:
-- On WHILE UNDERSCORE STACK SHARP RETURN REG RBRACE QUESTIONMARK NID LPAREN LBRACKET INLINE IF GLOBAL FOR ARRAYINIT
--   reduce production pinstr -> annotations pinstr_r

State 357:
## Known stack suffix:
## implicites
## LR(1) items:
plvalues -> implicites . [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
plvalues -> implicites . COMMA separated_nonempty_list(COMMA,plvalue) [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
-- On COMMA shift to state 358
## Reductions:
-- On STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP
--   reduce production plvalues -> implicites

State 358:
## Known stack suffix:
## implicites COMMA
## LR(1) items:
plvalues -> implicites COMMA . separated_nonempty_list(COMMA,plvalue) [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
-- On UNDERSCORE shift to state 270
-- On NID shift to state 49
-- On LPAREN shift to state 276
-- On var shift to state 277
-- On separated_nonempty_list(COMMA,plvalue) shift to state 359
-- On plvalue_r shift to state 281
-- On plvalue shift to state 282
-- On option(parens(utype)) shift to state 285
## Reductions:
-- On LBRACKET
--   reduce production option(parens(utype)) ->

State 359:
## Known stack suffix:
## implicites COMMA separated_nonempty_list(COMMA,plvalue)
## LR(1) items:
plvalues -> implicites COMMA separated_nonempty_list(COMMA,plvalue) . [ STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP ]
## Transitions:
## Reductions:
-- On STAR PLUS PIPE MINUS LTLT HAT GTGT EQ AMP
--   reduce production plvalues -> implicites COMMA separated_nonempty_list(COMMA,plvalue)

State 360:
## Known stack suffix:
## LBRACE list(pinstr)
## LR(1) items:
pfunbody -> LBRACE list(pinstr) . option(__anonymous_1) RBRACE [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On RETURN shift to state 361
-- On option(__anonymous_1) shift to state 372
## Reductions:
-- On RBRACE
--   reduce production option(__anonymous_1) ->

State 361:
## Known stack suffix:
## RETURN
## LR(1) items:
option(__anonymous_1) -> RETURN . LPAREN loption(separated_nonempty_list(COMMA,var)) RPAREN SEMICOLON [ RBRACE ]
option(__anonymous_1) -> RETURN . loption(separated_nonempty_list(COMMA,var)) SEMICOLON [ RBRACE ]
## Transitions:
-- On NID shift to state 49
-- On LPAREN shift to state 362
-- On var shift to state 363
-- On separated_nonempty_list(COMMA,var) shift to state 366
-- On loption(separated_nonempty_list(COMMA,var)) shift to state 370
## Reductions:
-- On SEMICOLON
--   reduce production loption(separated_nonempty_list(COMMA,var)) ->

State 362:
## Known stack suffix:
## RETURN LPAREN
## LR(1) items:
option(__anonymous_1) -> RETURN LPAREN . loption(separated_nonempty_list(COMMA,var)) RPAREN SEMICOLON [ RBRACE ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 363
-- On separated_nonempty_list(COMMA,var) shift to state 366
-- On loption(separated_nonempty_list(COMMA,var)) shift to state 367
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,var)) ->

State 363:
## Known stack suffix:
## var
## LR(1) items:
separated_nonempty_list(COMMA,var) -> var . [ SEMICOLON RPAREN ]
separated_nonempty_list(COMMA,var) -> var . COMMA separated_nonempty_list(COMMA,var) [ SEMICOLON RPAREN ]
## Transitions:
-- On COMMA shift to state 364
## Reductions:
-- On SEMICOLON RPAREN
--   reduce production separated_nonempty_list(COMMA,var) -> var

State 364:
## Known stack suffix:
## var COMMA
## LR(1) items:
separated_nonempty_list(COMMA,var) -> var COMMA . separated_nonempty_list(COMMA,var) [ SEMICOLON RPAREN ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 363
-- On separated_nonempty_list(COMMA,var) shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## var COMMA separated_nonempty_list(COMMA,var)
## LR(1) items:
separated_nonempty_list(COMMA,var) -> var COMMA separated_nonempty_list(COMMA,var) . [ SEMICOLON RPAREN ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN
--   reduce production separated_nonempty_list(COMMA,var) -> var COMMA separated_nonempty_list(COMMA,var)

State 366:
## Known stack suffix:
## separated_nonempty_list(COMMA,var)
## LR(1) items:
loption(separated_nonempty_list(COMMA,var)) -> separated_nonempty_list(COMMA,var) . [ SEMICOLON RPAREN ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,var)) -> separated_nonempty_list(COMMA,var)

State 367:
## Known stack suffix:
## RETURN LPAREN loption(separated_nonempty_list(COMMA,var))
## LR(1) items:
option(__anonymous_1) -> RETURN LPAREN loption(separated_nonempty_list(COMMA,var)) . RPAREN SEMICOLON [ RBRACE ]
## Transitions:
-- On RPAREN shift to state 368
## Reductions:

State 368:
## Known stack suffix:
## RETURN LPAREN loption(separated_nonempty_list(COMMA,var)) RPAREN
## LR(1) items:
option(__anonymous_1) -> RETURN LPAREN loption(separated_nonempty_list(COMMA,var)) RPAREN . SEMICOLON [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## RETURN LPAREN loption(separated_nonempty_list(COMMA,var)) RPAREN SEMICOLON
## LR(1) items:
option(__anonymous_1) -> RETURN LPAREN loption(separated_nonempty_list(COMMA,var)) RPAREN SEMICOLON . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production option(__anonymous_1) -> RETURN LPAREN loption(separated_nonempty_list(COMMA,var)) RPAREN SEMICOLON

State 370:
## Known stack suffix:
## RETURN loption(separated_nonempty_list(COMMA,var))
## LR(1) items:
option(__anonymous_1) -> RETURN loption(separated_nonempty_list(COMMA,var)) . SEMICOLON [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## RETURN loption(separated_nonempty_list(COMMA,var)) SEMICOLON
## LR(1) items:
option(__anonymous_1) -> RETURN loption(separated_nonempty_list(COMMA,var)) SEMICOLON . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production option(__anonymous_1) -> RETURN loption(separated_nonempty_list(COMMA,var)) SEMICOLON

State 372:
## Known stack suffix:
## LBRACE list(pinstr) option(__anonymous_1)
## LR(1) items:
pfunbody -> LBRACE list(pinstr) option(__anonymous_1) . RBRACE [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
-- On RBRACE shift to state 373
## Reductions:

State 373:
## Known stack suffix:
## LBRACE list(pinstr) option(__anonymous_1) RBRACE
## LR(1) items:
pfunbody -> LBRACE list(pinstr) option(__anonymous_1) RBRACE . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production pfunbody -> LBRACE list(pinstr) option(__anonymous_1) RBRACE

State 374:
## Known stack suffix:
## annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody
## LR(1) items:
pfundef -> annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody . [ T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF ]
## Transitions:
## Reductions:
-- On T_U8 T_U64 T_U32 T_U256 T_U16 T_U128 T_INT T_BOOL SHARP REQUIRE PARAM INLINE FROM FN EXPORT EXEC EOF
--   reduce production pfundef -> annotations option(call_conv) FN NID LPAREN loption(separated_nonempty_list(COMMA,annot_pvardecl)) RPAREN option(prefix(RARROW,tuple(annot_stor_type))) pfunbody

State 375:
## Known stack suffix:
## annotations
## LR(1) items:
annot_pvardecl -> annotations . stor_type separated_nonempty_list(empty,var) [ RPAREN COMMA ]
## Transitions:
-- On STACK shift to state 234
-- On REG shift to state 243
-- On INLINE shift to state 245
-- On GLOBAL shift to state 246
-- On storage shift to state 247
-- On stor_type shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## annotations stor_type
## LR(1) items:
annot_pvardecl -> annotations stor_type . separated_nonempty_list(empty,var) [ RPAREN COMMA ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 377
-- On separated_nonempty_list(empty,var) shift to state 379
## Reductions:

State 377:
## Known stack suffix:
## var
## LR(1) items:
separated_nonempty_list(empty,var) -> var . [ RPAREN COMMA ]
separated_nonempty_list(empty,var) -> var . separated_nonempty_list(empty,var) [ RPAREN COMMA ]
## Transitions:
-- On NID shift to state 49
-- On var shift to state 377
-- On separated_nonempty_list(empty,var) shift to state 378
## Reductions:
-- On RPAREN COMMA
--   reduce production separated_nonempty_list(empty,var) -> var

State 378:
## Known stack suffix:
## var separated_nonempty_list(empty,var)
## LR(1) items:
separated_nonempty_list(empty,var) -> var separated_nonempty_list(empty,var) . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production separated_nonempty_list(empty,var) -> var separated_nonempty_list(empty,var)

State 379:
## Known stack suffix:
## annotations stor_type separated_nonempty_list(empty,var)
## LR(1) items:
annot_pvardecl -> annotations stor_type separated_nonempty_list(empty,var) . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production annot_pvardecl -> annotations stor_type separated_nonempty_list(empty,var)

State 380:
## Known stack suffix:
## annot_pvardecl
## LR(1) items:
separated_nonempty_list(COMMA,annot_pvardecl) -> annot_pvardecl . [ RPAREN ]
separated_nonempty_list(COMMA,annot_pvardecl) -> annot_pvardecl . COMMA separated_nonempty_list(COMMA,annot_pvardecl) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 381
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,annot_pvardecl) -> annot_pvardecl

State 381:
## Known stack suffix:
## annot_pvardecl COMMA
## LR(1) items:
separated_nonempty_list(COMMA,annot_pvardecl) -> annot_pvardecl COMMA . separated_nonempty_list(COMMA,annot_pvardecl) [ RPAREN ]
## Transitions:
-- On SHARP shift to state 10
-- On top_annotation shift to state 192
-- On separated_nonempty_list(COMMA,annot_pvardecl) shift to state 382
-- On list(top_annotation) shift to state 215
-- On annotations shift to state 375
-- On annot_pvardecl shift to state 380
## Reductions:
-- On STACK REG INLINE GLOBAL
--   reduce production list(top_annotation) ->

State 382:
## Known stack suffix:
## annot_pvardecl COMMA separated_nonempty_list(COMMA,annot_pvardecl)
## LR(1) items:
separated_nonempty_list(COMMA,annot_pvardecl) -> annot_pvardecl COMMA separated_nonempty_list(COMMA,annot_pvardecl) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,annot_pvardecl) -> annot_pvardecl COMMA separated_nonempty_list(COMMA,annot_pvardecl)

State 383:
## Known stack suffix:
## call_conv
## LR(1) items:
option(call_conv) -> call_conv . [ FN ]
## Transitions:
## Reductions:
-- On FN
--   reduce production option(call_conv) -> call_conv

State 384:
## Known stack suffix:
## module_
## LR(1) items:
module_' -> module_ . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept module_

State 385:
## Known stack suffix:
## list(loc(top))
## LR(1) items:
module_ -> list(loc(top)) . EOF [ # ]
## Transitions:
-- On EOF shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## list(loc(top)) EOF
## LR(1) items:
module_ -> list(loc(top)) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production module_ -> list(loc(top)) EOF

