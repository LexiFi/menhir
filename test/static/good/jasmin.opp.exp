%{
  module L = Location
  module S = Syntax

  open Syntax

  let setsign c s =
    match c with
    | None -> Some (L.mk_loc (L.loc s) (CSS(None, L.unloc s)))
    | _    -> c

%}
%start module_
%token AMP
%token AMPAMP
%token ARRAYINIT
%token BANG
%token BANGEQ
%token COLON
%token COMMA
%token CONSTANT
%token DOT
%token DOWNTO
%token ELSE
%token EOF
%token EQ
%token EQEQ
%token EXEC
%token EXPORT
%token FALSE
%token FN
%token FOR
%token FROM
%token <Syntax.sign> GE
%token GLOBAL
%token <Syntax.sign> GT
%token <Syntax.sign> GTGT
%token HAT
%token IF
%token INLINE
%token <Z.t> INT
%token LBRACE
%token LBRACKET
%token <Syntax.sign> LE
%token LPAREN
%token <Syntax.sign> LT
%token LTLT
%token MINUS
%token MUTABLE
%token <string> NID
%token PARAM
%token PERCENT
%token PIPE
%token PIPEPIPE
%token PLUS
%token POINTER
%token QUESTIONMARK
%token RARROW
%token RBRACE
%token RBRACKET
%token REG
%token REQUIRE
%token RETURN
%token RPAREN
%token SEMICOLON
%token SHARP
%token SLASH
%token STACK
%token STAR
%token <string> STRING
%token <Syntax.svsize> SVSIZE
%token <Syntax.swsize> SWSIZE
%token TO
%token TRUE
%token T_BOOL
%token T_INT
%token T_U128
%token T_U16
%token T_U256
%token T_U32
%token T_U64
%token T_U8
%token UNDERSCORE
%token WHILE
%nonassoc COLON QUESTIONMARK
%left PIPEPIPE
%left AMPAMP
%left BANGEQ EQEQ
%left GE GT LE LT
%left PIPE
%left HAT
%left AMP
%left GTGT LTLT
%left MINUS PLUS
%left PERCENT SLASH STAR
%nonassoc BANG
%type <Syntax.pprogram> module_
%%

option_COMMA_:
  
    {    ( None )} [@name none_COMMA]
| x = COMMA
    {    ( Some x )} [@name some_COMMA]

option_DOT_:
  
    {    ( None )} [@name none_DOT]
| x = DOT
    {    ( Some x )} [@name some_DOT]

option___anonymous_1_:
  
    {    ( None )} [@name none___anonymous_1]
| _1 = RETURN _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_var__ _3_inlined1 = RPAREN _3 = SEMICOLON
    {let x =
  let vs =
    let s =
      let x =
        let x =
          let s =     ( xs ) in
                                       ( s )
        in
            ( x )
      in
                                       ( x )
    in
                                        ( s )
  in
                                                 ( vs )
in
    ( Some x )} [@name some___anonymous_1]
| _1 = RETURN xs = loption_separated_nonempty_list_COMMA_var__ _3 = SEMICOLON
    {let x =
  let vs =
    let s =
      let s =     ( xs ) in
                                   ( s )
    in
                                        ( s )
  in
                                                 ( vs )
in
    ( Some x )} [@name some___anonymous_1]

option_arr_access_len_:
  
    {    ( None )} [@name none_arr_access_len]
| x = arr_access_len
    {    ( Some x )} [@name some_arr_access_len]

option_attribute_:
  
    {    ( None )} [@name none_attribute]
| x = attribute
    {    ( Some x )} [@name some_attribute]

option_call_conv_:
  
    {    ( None )} [@name none_call_conv]
| x = call_conv
    {    ( Some x )} [@name some_call_conv]

option_from_:
  
    {    ( None )} [@name none_from]
| x = from
    {    ( Some x )} [@name some_from]

option_loc_castop1__:
  
    {    ( None )} [@name none_loc_castop1_]
| x = castop1
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
    ( Some x )} [@name some_loc_castop1_]

option_mem_ofs_:
  
    {    ( None )} [@name none_mem_ofs]
| _1 = PLUS e = pexpr
    {let x =                ( `Add, e ) in
    ( Some x )} [@name some_mem_ofs]
| _1 = MINUS e = pexpr
    {let x =                 ( `Sub, e ) in
    ( Some x )} [@name some_mem_ofs]

option_parens_utype__:
  
    {    ( None )} [@name none_parens_utype_]
| _1 = LPAREN x = utype _3 = RPAREN
    {let x =
  let x =     ( x ) in
                                   ( x )
in
    ( Some x )} [@name some_parens_utype_]

option_pblock_:
  
    {    ( None )} [@name none_pblock]
| x = pblock
    {    ( Some x )} [@name some_pblock]

option_pointer_:
  
    {    ( None )} [@name none_pointer]
| x = pointer
    {    ( Some x )} [@name some_pointer]

option_prefix_IF_pexpr__:
  
    {    ( None )} [@name none_prefix_IF_pexpr_]
| _1 = IF x = pexpr
    {let x =         ( x ) in
    ( Some x )} [@name some_prefix_IF_pexpr_]

option_prefix_RARROW_tuple_annot_stor_type___:
  
    {    ( None )} [@name none_prefix_RARROW_tuple_annot_stor_type__]
| _1 = RARROW _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_annot_stor_type__ _3 = RPAREN
    {let x =
  let x =
    let s =
      let x =
        let x =
          let s =     ( xs ) in
                                       ( s )
        in
            ( x )
      in
                                       ( x )
    in
                                        ( s )
  in
          ( x )
in
    ( Some x )} [@name some_prefix_RARROW_tuple_annot_stor_type__]
| _1 = RARROW xs = loption_separated_nonempty_list_COMMA_annot_stor_type__
    {let x =
  let x =
    let s =
      let s =     ( xs ) in
                                   ( s )
    in
                                        ( s )
  in
          ( x )
in
    ( Some x )} [@name some_prefix_RARROW_tuple_annot_stor_type__]

option_utype_:
  
    {    ( None )} [@name none_utype]
| x = utype
    {    ( Some x )} [@name some_utype]

option_writable_:
  
    {    ( None )} [@name none_writable]
| x = writable
    {    ( Some x )} [@name some_writable]

loption_separated_nonempty_list_COMMA_annot_pvardecl__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_annot_pvardecl_]
| x = separated_nonempty_list_COMMA_annot_pvardecl_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_annot_pvardecl_]

loption_separated_nonempty_list_COMMA_annot_stor_type__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_annot_stor_type_]
| x = separated_nonempty_list_COMMA_annot_stor_type_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_annot_stor_type_]

loption_separated_nonempty_list_COMMA_annotation__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_annotation_]
| x = separated_nonempty_list_COMMA_annotation_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_annotation_]

loption_separated_nonempty_list_COMMA_pexpr__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_pexpr_]
| x = separated_nonempty_list_COMMA_pexpr_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_pexpr_]

loption_separated_nonempty_list_COMMA_range__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_range_]
| x = separated_nonempty_list_COMMA_range_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_range_]

loption_separated_nonempty_list_COMMA_var__:
  
    {    ( [] )} [@name none_separated_nonempty_list_COMMA_var_]
| x = separated_nonempty_list_COMMA_var_
    {    ( x )} [@name some_separated_nonempty_list_COMMA_var_]

list_loc_top__:
  
    {    ( [] )} [@name nil_loc_top_]
| x = top xs = list_loc_top__
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
    ( x :: xs )} [@name cons_loc_top_]

list_pinstr_:
  
    {    ( [] )} [@name nil_pinstr]
| x = pinstr xs = list_pinstr_
    {    ( x :: xs )} [@name cons_pinstr]

list_top_annotation_:
  
    {    ( [] )} [@name nil_top_annotation]
| x = top_annotation xs = list_top_annotation_
    {    ( x :: xs )} [@name cons_top_annotation]

nonempty_list_prequire1_:
  x = prequire1
    {    ( [ x ] )} [@name one_prequire1]
| x = prequire1 xs = nonempty_list_prequire1_
    {    ( x :: xs )} [@name more_prequire1]

separated_nonempty_list_COMMA_annot_pvardecl_:
  x = annot_pvardecl
    {    ( [ x ] )} [@name one_COMMA_annot_pvardecl]
| x = annot_pvardecl _2 = COMMA xs = separated_nonempty_list_COMMA_annot_pvardecl_
    {    ( x :: xs )} [@name more_COMMA_annot_pvardecl]

separated_nonempty_list_COMMA_annot_stor_type_:
  x = annot_stor_type
    {    ( [ x ] )} [@name one_COMMA_annot_stor_type]
| x = annot_stor_type _2 = COMMA xs = separated_nonempty_list_COMMA_annot_stor_type_
    {    ( x :: xs )} [@name more_COMMA_annot_stor_type]

separated_nonempty_list_COMMA_annotation_:
  x = annotation
    {    ( [ x ] )} [@name one_COMMA_annotation]
| x = annotation _2 = COMMA xs = separated_nonempty_list_COMMA_annotation_
    {    ( x :: xs )} [@name more_COMMA_annotation]

separated_nonempty_list_COMMA_pexpr_:
  x = pexpr
    {    ( [ x ] )} [@name one_COMMA_pexpr]
| x = pexpr _2 = COMMA xs = separated_nonempty_list_COMMA_pexpr_
    {    ( x :: xs )} [@name more_COMMA_pexpr]

separated_nonempty_list_COMMA_plvalue_:
  x = plvalue
    {    ( [ x ] )} [@name one_COMMA_plvalue]
| x = plvalue _2 = COMMA xs = separated_nonempty_list_COMMA_plvalue_
    {    ( x :: xs )} [@name more_COMMA_plvalue]

separated_nonempty_list_COMMA_range_:
  x = range
    {    ( [ x ] )} [@name one_COMMA_range]
| x = range _2 = COMMA xs = separated_nonempty_list_COMMA_range_
    {    ( x :: xs )} [@name more_COMMA_range]

separated_nonempty_list_COMMA_var_:
  x = var
    {    ( [ x ] )} [@name one_COMMA_var]
| x = var _2 = COMMA xs = separated_nonempty_list_COMMA_var_
    {    ( x :: xs )} [@name more_COMMA_var]

separated_nonempty_list_empty_var_:
  x = var
    {    ( [ x ] )} [@name one_empty_var]
| x = var xs = separated_nonempty_list_empty_var_
    {let _2 =               ( () ) in
    ( x :: xs )} [@name more_empty_var]

separated_nonempty_list_option_COMMA__var_:
  x = var
    {    ( [ x ] )} [@name one_option_COMMA__var]
| x = var _2 = option_COMMA_ xs = separated_nonempty_list_option_COMMA__var_
    {    ( x :: xs )} [@name more_option_COMMA__var]

var:
  x = NID
    {let x =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
          ( x )}

keyword:
  _1 = INLINE
    {           ( "inline" )}
| _1 = EXPORT
    {           ( "export" )}
| _1 = REG
    {           ( "reg" )}
| _1 = STACK
    {           ( "stack" )}

annotationlabel:
  x = NID
    {let id =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
             (id)}
| x = keyword
    {let id =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                    ( id )}
| x = STRING
    {let s =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                  ( s )}

int:
  i = INT
    {                ( i )}
| _1 = MINUS i = INT
    {                ( Z.neg i )}

simple_attribute:
  i = int
    {                   ( Aint i    )}
| id = NID
    {                   ( Aid id    )}
| s = STRING
    {                   ( Astring s )}
| s = keyword
    {                   ( Astring s )}
| ws = utype
    {                   ( Aws ws    )}

attribute:
  _1 = EQ x = simple_attribute
    {let ap =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                                ( ap )}
| _1 = EQ _1_inlined1 = LBRACE x = struct_annot _3 = RBRACE
    {let s =
  let _startpos__1_ = _startpos__1_inlined1_ in
  let x =
    let x =     ( x ) in
                                     ( x )
  in
  let (_endpos_x_, _startpos_x_) = (_endpos__3_, _startpos__1_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                                   ( L.mk_loc (L.loc s) (Astruct (L.unloc s)) )}

annotation:
  k = annotationlabel v = option_attribute_
    {                                   ( k, v )}

struct_annot:
  xs = loption_separated_nonempty_list_COMMA_annotation__
    {let a =     ( xs ) in
                                        ( a )}

top_annotation:
  _1 = SHARP a = annotation
    {                          ( [a] )}
| _1 = SHARP _2 = LBRACKET a = struct_annot _4 = RBRACKET
    {                                           ( a )}

annotations:
  l = list_top_annotation_
    {                           ( List.concat l )}

utype:
  _1 = T_U8
    {         ( `W8   )}
| _1 = T_U16
    {         ( `W16  )}
| _1 = T_U32
    {         ( `W32  )}
| _1 = T_U64
    {         ( `W64  )}
| _1 = T_U128
    {         ( `W128 )}
| _1 = T_U256
    {         ( `W256 )}

ptype_r:
  _1 = T_BOOL
    {    ( TBool )}
| _1 = T_INT
    {    ( TInt )}
| ut = utype
    {    ( TWord ut )}
| ut = utype _1 = LBRACKET x = pexpr _3 = RBRACKET
    {let d =
  let x =     ( x ) in
                                       ( x )
in
    ( TArray (ut, d) )}

ptype:
  x = ptype_r
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                 ( x )}

swsize:
  s = SWSIZE
    {           ( s )}

svsize:
  s = SVSIZE
    {           ( s )}

castop1:
  s = swsize
    {           ( CSS (Some (fst s), snd s) )}
| s = svsize
    {           ( CVS s )}

castop:
  c = option_loc_castop1__
    {                  ( c )}

cast:
  _1 = T_INT
    {           ( `ToInt )}
| s = swsize
    {           ( `ToWord s )}

prim:
  _1 = SHARP x = NID
    {let x =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
                ( x )}

arr_access_len:
  _1 = COLON e = pexpr
    {                ( e )}

arr_access_i:
  ws = option_utype_ e = pexpr len = option_arr_access_len_
    {                                        (ws, e, len)}

arr_access:
  s = option_DOT_ _1 = LBRACKET x = arr_access_i _3 = RBRACKET
    {let i =
  let x =     ( x ) in
                                       ( x )
in
                                    (
   let s = if s = None then Warray_.AAscale else Warray_.AAdirect in
   s, i )}

pexpr_r:
  v = var
    {    ( PEVar v )}
| v = var i = arr_access
    {    ( let aa, (ws, e, len) = i in PEGet (aa, ws, v, e, len) )}
| _1 = TRUE
    {    ( PEBool true )}
| _1 = FALSE
    {    ( PEBool false )}
| i = INT
    {    ( PEInt i )}
| ct = option_parens_utype__ _2 = LBRACKET v = var e = option_mem_ofs_ _5 = RBRACKET
    {let ma =   ( ct, v, e ) in
    ( let ct,v,e = ma in PEFetch (ct, v, e) )}
| _1 = LPAREN x = svsize _3 = RPAREN _2 = LBRACKET s = separated_nonempty_list_COMMA_pexpr_ _4 = RBRACKET
    {let es =                                       ( s ) in
let ct =
  let x =     ( x ) in
                                   ( x )
in
    ( PEpack(ct,es) )}
| _1 = LPAREN x = cast _3 = RPAREN e = pexpr %prec BANG
    {let ct =
  let x =     ( x ) in
                                   ( x )
in
    ( PEOp1 (`Cast(ct), e) )}
| _1 = BANG c = castop e = pexpr
    {let o =                     ( `Not c  ) in
    ( PEOp1 (o, e) )}
| _1 = MINUS c = castop e = pexpr
    {let o =                     ( `Neg c  ) in
    ( PEOp1 (o, e) )}
| e1 = pexpr _1 = AMPAMP e2 = pexpr
    {let o =                        ( `And   ) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = PIPEPIPE e2 = pexpr
    {let o =                        ( `Or    ) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = PLUS c = castop e2 = pexpr
    {let o =                        ( `Add  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = MINUS c = castop e2 = pexpr
    {let o =                        ( `Sub  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = STAR c = castop e2 = pexpr
    {let o =                        ( `Mul  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = SLASH c = castop e2 = pexpr
    {let o =                        ( `Div  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = PERCENT c = castop e2 = pexpr
    {let o =                        ( `Mod  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = AMP c = castop e2 = pexpr
    {let o =                        ( `BAnd c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = PIPE c = castop e2 = pexpr
    {let o =                        ( `BOr  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = HAT c = castop e2 = pexpr
    {let o =                        ( `BXOr c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = LTLT c = castop e2 = pexpr
    {let o =                        ( `ShL  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr x = GTGT c = castop e2 = pexpr
    {let o =
  let s =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
                         ( `ShR (setsign c s))
in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = EQEQ c = castop e2 = pexpr
    {let o =                        ( `Eq   c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr _1 = BANGEQ c = castop e2 = pexpr
    {let o =                        ( `Neq  c) in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr x = LT c = castop e2 = pexpr
    {let o =
  let s =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
                         ( `Lt  (setsign c s))
in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr x = LE c = castop e2 = pexpr
    {let o =
  let s =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
                         ( `Le  (setsign c s))
in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr x = GT c = castop e2 = pexpr
    {let o =
  let s =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
                         ( `Gt  (setsign c s))
in
    ( PEOp2 (o, (e1, e2)) )}
| e1 = pexpr x = GE c = castop e2 = pexpr
    {let o =
  let s =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
                         ( `Ge  (setsign c s))
in
    ( PEOp2 (o, (e1, e2)) )}
| _1 = LPAREN x = pexpr _3 = RPAREN
    {let e =
  let x =     ( x ) in
                                   ( x )
in
    ( PEParens e )}
| f = var _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_pexpr__ _3 = RPAREN
    {let args =
  let s =
    let x =
      let x =
        let s =     ( xs ) in
                                     ( s )
      in
          ( x )
    in
                                     ( x )
  in
                        ( s )
in
    ( PECall (f, args) )}
| f = prim _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_pexpr__ _3 = RPAREN
    {let args =
  let s =
    let x =
      let x =
        let s =     ( xs ) in
                                     ( s )
      in
          ( x )
    in
                                     ( x )
  in
                        ( s )
in
    ( PEPrim (f, args) )}
| e1 = pexpr _2 = QUESTIONMARK e2 = pexpr _4 = COLON e3 = pexpr
    {    ( PEIf(e1, e2, e3) )}

pexpr:
  x = pexpr_r
    {let e =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                 ( e )}

peqop:
  _1 = EQ
    {                     ( `Raw    )}
| _1 = PLUS c = castop _3 = EQ
    {                     ( `Add  c )}
| _1 = MINUS c = castop _3 = EQ
    {                     ( `Sub  c )}
| _1 = STAR c = castop _3 = EQ
    {                     ( `Mul  c )}
| x = GTGT c = castop _3 = EQ
    {let s =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                            ( `ShR  (setsign c s) )}
| _1 = LTLT c = castop _3 = EQ
    {                     ( `ShL  c )}
| _1 = AMP c = castop _3 = EQ
    {                     ( `BAnd c )}
| _1 = HAT c = castop _3 = EQ
    {                     ( `BXOr c )}
| _1 = PIPE c = castop _3 = EQ
    {                     ( `BOr  c )}

plvalue_r:
  _1 = UNDERSCORE
    {    ( PLIgnore )}
| x = var
    {    ( PLVar x )}
| x = var i = arr_access
    {    ( let a,(ws,e,len) = i in PLArray (a, ws, x, e, len) )}
| ct = option_parens_utype__ _2 = LBRACKET v = var e = option_mem_ofs_ _5 = RBRACKET
    {let ma =   ( ct, v, e ) in
    ( let ct,v,e = ma in PLMem (ct, v, e) )}

plvalue:
  x = plvalue_r
    {let x =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                   ( x )}

implicites:
  _1 = QUESTIONMARK _1_inlined1 = LBRACE x = struct_annot _3 = RBRACE
    {let s =
  let _startpos__1_ = _startpos__1_inlined1_ in
  let x =
    let x =     ( x ) in
                                     ( x )
  in
  let (_endpos_x_, _startpos_x_) = (_endpos__3_, _startpos__1_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                                           ( s )}

plvalues:
  _1 = LPAREN s = separated_nonempty_list_COMMA_plvalue_ _3 = RPAREN
    {let lv =
  let s =
    let x =
      let x =                                       ( s ) in
          ( x )
    in
                                     ( x )
  in
                                        ( s )
in
                     ( None, lv )}
| s = separated_nonempty_list_COMMA_plvalue_
    {let lv =
  let s =                                       ( s ) in
                                        ( s )
in
                     ( None, lv )}
| s = implicites
    {               ( Some s, [] )}
| s = implicites _2 = COMMA s_inlined1 = separated_nonempty_list_COMMA_plvalue_
    {let lv =
  let s = s_inlined1 in
                                        ( s )
in
                                         ( Some s, lv )}

pinstr_r:
  _1 = ARRAYINIT _1_inlined1 = LPAREN x = var _3_inlined1 = RPAREN _3 = SEMICOLON
    {let x =
  let x =     ( x ) in
                                   ( x )
in
    ( PIArrayInit x )}
| x = plvalues o = peqop e = pexpr c = option_prefix_IF_pexpr__ _5 = SEMICOLON
    {    ( PIAssign (x, o, e, c) )}
| f = var _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_pexpr__ _3_inlined1 = RPAREN c = option_prefix_IF_pexpr__ _3 = SEMICOLON
    {let fc =
  let _endpos__3_ = _endpos__3_inlined1_ in
  let x =
    let args =
      let s =
        let x =
          let x =
            let s =     ( xs ) in
                                         ( s )
          in
              ( x )
        in
                                         ( x )
      in
                            ( s )
    in
                                            ( (f, args) )
  in
  let (_endpos_x_, _startpos_x_) = (_endpos__3_, _startpos_f_) in
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
    ( let { L.pl_loc = loc; L.pl_desc = (f, args) } = fc in
      PIAssign ((None, []), `Raw, L.mk_loc loc (PECall (f, args)), c) )}
| _1 = IF c = pexpr i1s = pblock
    {    ( PIIf (c, i1s, None) )}
| _1 = IF c = pexpr i1s = pblock _4 = ELSE i2s = pblock
    {    ( PIIf (c, i1s, Some i2s) )}
| _1 = FOR v = var _3 = EQ ce1 = pexpr _5 = TO ce2 = pexpr is = pblock
    {    ( PIFor (v, (`Up, ce1, ce2), is) )}
| _1 = FOR v = var _3 = EQ ce1 = pexpr _5 = DOWNTO ce2 = pexpr is = pblock
    {    ( PIFor (v, (`Down, ce2, ce1), is) )}
| _1 = WHILE is1 = option_pblock_ _3 = LPAREN b = pexpr _5 = RPAREN
    {    ( PIWhile (is1, b, None) )}
| _1 = WHILE is1 = option_pblock_ _3 = LPAREN b = pexpr _5 = RPAREN is2 = pblock
    {    ( PIWhile (is1, b, Some is2) )}
| ty = stor_type vs = separated_nonempty_list_option_COMMA__var_ _2 = SEMICOLON
    {let vd =
  let x =                                                   ( (ty, vs) ) in
          ( x )
in
    ( PIdecl vd )}

pinstr:
  a = annotations x = pinstr_r
    {let i =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                                 ( (a,i) )}

pblock_r:
  _1 = LBRACE x = list_pinstr_ _3 = RBRACE
    {let s =
  let x =     ( x ) in
                                   ( x )
in
                    ( s )}

pblock:
  x = pblock_r
    {let s =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                  ( s )}

stor_type:
  sto = storage ty = ptype
    {                       ( (sto, ty) )}

annot_stor_type:
  a = annotations stoty = stor_type
    {                                ( (a,stoty) )}

writable:
  _1 = CONSTANT
    {              (`Constant )}
| _1 = MUTABLE
    {              (`Writable )}

pointer:
  o = option_writable_ _2 = POINTER
    {                      ( o )}

ptr:
  o = option_pointer_
    {             (
   match o with
   | Some w -> `Pointer w
   | None   -> `Direct
   )}

storage:
  _1 = REG ptr = ptr
    {                 ( `Reg ptr )}
| _1 = STACK ptr = ptr
    {                 ( `Stack ptr )}
| _1 = INLINE
    {                 ( `Inline )}
| _1 = GLOBAL
    {                 ( `Global )}

annot_pvardecl:
  a = annotations ty = stor_type vs = separated_nonempty_list_empty_var_
    {let vd =                                                   ( (ty, vs) ) in
                                   ( (a,vd) )}

pfunbody:
  _1 = LBRACE is = list_pinstr_ rt = option___anonymous_1_ _4 = RBRACE
    {    ( { pdb_instr = is;
        pdb_ret   = rt; } )}

call_conv:
  _1 = EXPORT
    {         ( `Export )}
| _1 = INLINE
    {         ( `Inline )}

pfundef:
  pdf_annot = annotations cc = option_call_conv_ _3 = FN x = NID _1 = LPAREN xs = loption_separated_nonempty_list_COMMA_annot_pvardecl__ _3_inlined1 = RPAREN rty = option_prefix_RARROW_tuple_annot_stor_type___ body = pfunbody
    {let args =
  let s =
    let x =
      let x =
        let s =     ( xs ) in
                                     ( s )
      in
          ( x )
    in
                                     ( x )
  in
                        ( s )
in
let name =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
  ( { pdf_annot;
      pdf_cc   = cc;
      pdf_name = name;
      pdf_args = args;
      pdf_rty  = rty ;
      pdf_body = body; } )}

pparam:
  _1 = PARAM ty = ptype x = NID _4 = EQ pe = pexpr _6 = SEMICOLON
    {let x =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
    ( { ppa_ty = ty; ppa_name = x; ppa_init = pe; } )}

pgexpr:
  e = pexpr
    {          ( GEword e )}
| _1 = LBRACE s = separated_nonempty_list_COMMA_pexpr_ _3 = RBRACE
    {let es =                                       ( s ) in
                                    ( GEarray es )}

pglobal:
  pgd_type = ptype x = NID _3 = EQ pgd_val = pgexpr _5 = SEMICOLON
    {let pgd_name =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
  ( { pgd_type ; pgd_name ; pgd_val  } )}

pexec:
  _1 = EXEC x = NID _1_inlined1 = LPAREN xs = loption_separated_nonempty_list_COMMA_range__ _3 = RPAREN
    {let pex_mem =
  let s =
    let x =
      let x =
        let s =     ( xs ) in
                                     ( s )
      in
          ( x )
    in
                                     ( x )
  in
                        ( s )
in
let pex_name =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
                                                  ( { pex_name ; pex_mem } )}

range:
  ptr = INT _2 = COLON size = INT
    {                         ( ptr, size )}

prequire1:
  x = STRING
    {let s =
  let _endpos = _endpos_x_ in
  let _startpos = _startpos_x_ in
        ( L.mk_loc (L.make _startpos _endpos) x )
in
                ( s )}

from:
  _1 = FROM x = NID
    {let id =
  let x =
    let _endpos = _endpos_x_ in
    let _startpos = _startpos_x_ in
          ( L.mk_loc (L.make _startpos _endpos) x )
  in
               ( x )
in
                ( id )}

prequire:
  f = option_from_ _2 = REQUIRE x = nonempty_list_prequire1_
    {                                             ( f, x )}

top:
  x = pfundef
    {             ( S.PFundef x )}
| x = pparam
    {             ( S.PParam  x )}
| x = pglobal
    {             ( S.PGlobal x )}
| x = pexec
    {             ( S.Pexec   x )}
| x = prequire
    {             ( S.Prequire x)}

module_:
  pfs = list_loc_top__ _2 = EOF
    {    ( pfs )}
| _1 = error
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
   ( S.parse_error (L.make _startpos _endpos) )}

%%
