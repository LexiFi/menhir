State 0:
## Known stack suffix:
##
## LR(1) items:
compilation_unit' -> . compilation_unit [ # ]
## Transitions:
-- On PACKAGE shift to state 1
-- On package_declaration shift to state 8
-- On compilation_unit shift to state 432
## Reductions:
-- On TRANSIENT reduce production package_declaration ->
-- On SYNCHRONIZED reduce production package_declaration ->
-- On STATIC reduce production package_declaration ->
-- On SEMICOLON reduce production package_declaration ->
-- On PUBLIC reduce production package_declaration ->
-- On PROTECTED reduce production package_declaration ->
-- On PRIVATE reduce production package_declaration ->
-- On NATIVE reduce production package_declaration ->
-- On JML_SPEC_PUBLIC reduce production package_declaration ->
-- On JML_PURE reduce production package_declaration ->
-- On INTERFACE reduce production package_declaration ->
-- On IMPORT reduce production package_declaration ->
-- On FINAL reduce production package_declaration ->
-- On EOF reduce production package_declaration ->
-- On DOC_COMMENT reduce production package_declaration ->
-- On CLASS reduce production package_declaration ->
-- On ABSTRACT reduce production package_declaration ->

State 1:
## Known stack suffix:
## PACKAGE
## LR(1) items:
package_declaration -> PACKAGE . name SEMICOLON [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE IMPORT FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On ID shift to state 2
-- On name shift to state 3
-- On ident shift to state 7
## Reductions:

State 2:
## Known stack suffix:
## ID
## LR(1) items:
ident -> ID . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACKET LEFTBRACE INSTANCEOF IMPLEMENTS ID EXTENDS EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> ID

State 3:
## Known stack suffix:
## PACKAGE name
## LR(1) items:
name -> name . DOT ident [ SEMICOLON DOT ]
package_declaration -> PACKAGE name . SEMICOLON [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE IMPORT FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 4
-- On DOT shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## PACKAGE name SEMICOLON
## LR(1) items:
package_declaration -> PACKAGE name SEMICOLON . [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE IMPORT FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production package_declaration -> PACKAGE name SEMICOLON

State 5:
## Known stack suffix:
## name DOT
## LR(1) items:
name -> name DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACKET LEFTBRACE INSTANCEOF IMPLEMENTS ID EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 2
-- On ident shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## name DOT ident
## LR(1) items:
name -> name DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACKET LEFTBRACE INSTANCEOF IMPLEMENTS ID EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> name DOT ident

State 7:
## Known stack suffix:
## ident
## LR(1) items:
name -> ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACKET LEFTBRACE INSTANCEOF IMPLEMENTS ID EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> ident

State 8:
## Known stack suffix:
## package_declaration
## LR(1) items:
compilation_unit -> package_declaration . import_declarations type_declarations EOF [ # ]
## Transitions:
-- On IMPORT shift to state 9
-- On import_declarations shift to state 16
## Reductions:
-- On TRANSIENT reduce production import_declarations ->
-- On SYNCHRONIZED reduce production import_declarations ->
-- On STATIC reduce production import_declarations ->
-- On SEMICOLON reduce production import_declarations ->
-- On PUBLIC reduce production import_declarations ->
-- On PROTECTED reduce production import_declarations ->
-- On PRIVATE reduce production import_declarations ->
-- On NATIVE reduce production import_declarations ->
-- On JML_SPEC_PUBLIC reduce production import_declarations ->
-- On JML_PURE reduce production import_declarations ->
-- On INTERFACE reduce production import_declarations ->
-- On FINAL reduce production import_declarations ->
-- On EOF reduce production import_declarations ->
-- On DOC_COMMENT reduce production import_declarations ->
-- On CLASS reduce production import_declarations ->
-- On ABSTRACT reduce production import_declarations ->

State 9:
## Known stack suffix:
## IMPORT
## LR(1) items:
import_declarations -> IMPORT . import_declaration SEMICOLON import_declarations [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On ID shift to state 2
-- On name shift to state 10
-- On import_declaration shift to state 13
-- On ident shift to state 7
## Reductions:

State 10:
## Known stack suffix:
## name
## LR(1) items:
import_declaration -> name . DOT STAR [ SEMICOLON ]
import_declaration -> name . [ SEMICOLON ]
name -> name . DOT ident [ SEMICOLON DOT ]
## Transitions:
-- On DOT shift to state 11
## Reductions:
-- On SEMICOLON reduce production import_declaration -> name

State 11:
## Known stack suffix:
## name DOT
## LR(1) items:
import_declaration -> name DOT . STAR [ SEMICOLON ]
name -> name DOT . ident [ SEMICOLON DOT ]
## Transitions:
-- On STAR shift to state 12
-- On ID shift to state 2
-- On ident shift to state 6
## Reductions:

State 12:
## Known stack suffix:
## name DOT STAR
## LR(1) items:
import_declaration -> name DOT STAR . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_declaration -> name DOT STAR

State 13:
## Known stack suffix:
## IMPORT import_declaration
## LR(1) items:
import_declarations -> IMPORT import_declaration . SEMICOLON import_declarations [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## IMPORT import_declaration SEMICOLON
## LR(1) items:
import_declarations -> IMPORT import_declaration SEMICOLON . import_declarations [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On IMPORT shift to state 9
-- On import_declarations shift to state 15
## Reductions:
-- On TRANSIENT reduce production import_declarations ->
-- On SYNCHRONIZED reduce production import_declarations ->
-- On STATIC reduce production import_declarations ->
-- On SEMICOLON reduce production import_declarations ->
-- On PUBLIC reduce production import_declarations ->
-- On PROTECTED reduce production import_declarations ->
-- On PRIVATE reduce production import_declarations ->
-- On NATIVE reduce production import_declarations ->
-- On JML_SPEC_PUBLIC reduce production import_declarations ->
-- On JML_PURE reduce production import_declarations ->
-- On INTERFACE reduce production import_declarations ->
-- On FINAL reduce production import_declarations ->
-- On EOF reduce production import_declarations ->
-- On DOC_COMMENT reduce production import_declarations ->
-- On CLASS reduce production import_declarations ->
-- On ABSTRACT reduce production import_declarations ->

State 15:
## Known stack suffix:
## IMPORT import_declaration SEMICOLON import_declarations
## LR(1) items:
import_declarations -> IMPORT import_declaration SEMICOLON import_declarations . [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production import_declarations -> IMPORT import_declaration SEMICOLON import_declarations

State 16:
## Known stack suffix:
## package_declaration import_declarations
## LR(1) items:
compilation_unit -> package_declaration import_declarations . type_declarations EOF [ # ]
## Transitions:
-- On SEMICOLON shift to state 17
-- On DOC_COMMENT shift to state 18
-- On type_declarations shift to state 430
-- On type_declaration shift to state 20
-- On doc_comment shift to state 22
## Reductions:
-- On TRANSIENT reduce production doc_comment ->
-- On SYNCHRONIZED reduce production doc_comment ->
-- On STATIC reduce production doc_comment ->
-- On PUBLIC reduce production doc_comment ->
-- On PROTECTED reduce production doc_comment ->
-- On PRIVATE reduce production doc_comment ->
-- On NATIVE reduce production doc_comment ->
-- On JML_SPEC_PUBLIC reduce production doc_comment ->
-- On JML_PURE reduce production doc_comment ->
-- On INTERFACE reduce production doc_comment ->
-- On FINAL reduce production doc_comment ->
-- On EOF reduce production type_declarations ->
-- On CLASS reduce production doc_comment ->
-- On ABSTRACT reduce production doc_comment ->

State 17:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
type_declarations -> SEMICOLON . type_declarations [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 17
-- On DOC_COMMENT shift to state 18
-- On type_declarations shift to state 19
-- On type_declaration shift to state 20
-- On doc_comment shift to state 22
## Reductions:
-- On TRANSIENT reduce production doc_comment ->
-- On SYNCHRONIZED reduce production doc_comment ->
-- On STATIC reduce production doc_comment ->
-- On PUBLIC reduce production doc_comment ->
-- On PROTECTED reduce production doc_comment ->
-- On PRIVATE reduce production doc_comment ->
-- On NATIVE reduce production doc_comment ->
-- On JML_SPEC_PUBLIC reduce production doc_comment ->
-- On JML_PURE reduce production doc_comment ->
-- On INTERFACE reduce production doc_comment ->
-- On FINAL reduce production doc_comment ->
-- On EOF reduce production type_declarations ->
-- On CLASS reduce production doc_comment ->
-- On ABSTRACT reduce production doc_comment ->

State 18:
## Known stack suffix:
## DOC_COMMENT
## LR(1) items:
doc_comment -> DOC_COMMENT . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production doc_comment -> DOC_COMMENT

State 19:
## Known stack suffix:
## SEMICOLON type_declarations
## LR(1) items:
type_declarations -> SEMICOLON type_declarations . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> SEMICOLON type_declarations

State 20:
## Known stack suffix:
## type_declaration
## LR(1) items:
type_declarations -> type_declaration . type_declarations [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 17
-- On DOC_COMMENT shift to state 18
-- On type_declarations shift to state 21
-- On type_declaration shift to state 20
-- On doc_comment shift to state 22
## Reductions:
-- On TRANSIENT reduce production doc_comment ->
-- On SYNCHRONIZED reduce production doc_comment ->
-- On STATIC reduce production doc_comment ->
-- On PUBLIC reduce production doc_comment ->
-- On PROTECTED reduce production doc_comment ->
-- On PRIVATE reduce production doc_comment ->
-- On NATIVE reduce production doc_comment ->
-- On JML_SPEC_PUBLIC reduce production doc_comment ->
-- On JML_PURE reduce production doc_comment ->
-- On INTERFACE reduce production doc_comment ->
-- On FINAL reduce production doc_comment ->
-- On EOF reduce production type_declarations ->
-- On CLASS reduce production doc_comment ->
-- On ABSTRACT reduce production doc_comment ->

State 21:
## Known stack suffix:
## type_declaration type_declarations
## LR(1) items:
type_declarations -> type_declaration type_declarations . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declaration type_declarations

State 22:
## Known stack suffix:
## doc_comment
## LR(1) items:
type_declaration -> doc_comment . class_declaration [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
type_declaration -> doc_comment . interface_declaration [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On TRANSIENT shift to state 23
-- On SYNCHRONIZED shift to state 24
-- On STATIC shift to state 25
-- On PUBLIC shift to state 26
-- On PROTECTED shift to state 27
-- On PRIVATE shift to state 28
-- On NATIVE shift to state 29
-- On JML_SPEC_PUBLIC shift to state 30
-- On JML_PURE shift to state 31
-- On FINAL shift to state 32
-- On ABSTRACT shift to state 33
-- On modifiers shift to state 34
-- On modifier shift to state 247
-- On interface_declaration shift to state 428
-- On class_declaration shift to state 429
## Reductions:
-- On INTERFACE reduce production modifiers ->
-- On CLASS reduce production modifiers ->

State 23:
## Known stack suffix:
## TRANSIENT
## LR(1) items:
modifier -> TRANSIENT . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> TRANSIENT

State 24:
## Known stack suffix:
## SYNCHRONIZED
## LR(1) items:
modifier -> SYNCHRONIZED . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> SYNCHRONIZED

State 25:
## Known stack suffix:
## STATIC
## LR(1) items:
modifier -> STATIC . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> STATIC

State 26:
## Known stack suffix:
## PUBLIC
## LR(1) items:
modifier -> PUBLIC . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> PUBLIC

State 27:
## Known stack suffix:
## PROTECTED
## LR(1) items:
modifier -> PROTECTED . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> PROTECTED

State 28:
## Known stack suffix:
## PRIVATE
## LR(1) items:
modifier -> PRIVATE . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> PRIVATE

State 29:
## Known stack suffix:
## NATIVE
## LR(1) items:
modifier -> NATIVE . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> NATIVE

State 30:
## Known stack suffix:
## JML_SPEC_PUBLIC
## LR(1) items:
modifier -> JML_SPEC_PUBLIC . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> JML_SPEC_PUBLIC

State 31:
## Known stack suffix:
## JML_PURE
## LR(1) items:
modifier -> JML_PURE . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> JML_PURE

State 32:
## Known stack suffix:
## FINAL
## LR(1) items:
modifier -> FINAL . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> FINAL

State 33:
## Known stack suffix:
## ABSTRACT
## LR(1) items:
modifier -> ABSTRACT . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> ABSTRACT

State 34:
## Known stack suffix:
## modifiers
## LR(1) items:
class_declaration -> modifiers . CLASS ident extends_decl implements_decl LEFTBRACE field_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
interface_declaration -> modifiers . INTERFACE ident extends_interfaces_decl LEFTBRACE interface_member_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On INTERFACE shift to state 35
-- On CLASS shift to state 259
## Reductions:

State 35:
## Known stack suffix:
## modifiers INTERFACE
## LR(1) items:
interface_declaration -> modifiers INTERFACE . ident extends_interfaces_decl LEFTBRACE interface_member_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On ID shift to state 2
-- On ident shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## modifiers INTERFACE ident
## LR(1) items:
interface_declaration -> modifiers INTERFACE ident . extends_interfaces_decl LEFTBRACE interface_member_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On EXTENDS shift to state 37
-- On extends_interfaces_decl shift to state 42
## Reductions:
-- On LEFTBRACE reduce production extends_interfaces_decl ->

State 37:
## Known stack suffix:
## EXTENDS
## LR(1) items:
extends_interfaces_decl -> EXTENDS . name_comma_list [ LEFTBRACE ]
## Transitions:
-- On ID shift to state 2
-- On name_comma_list shift to state 38
-- On name shift to state 39
-- On ident shift to state 7
## Reductions:

State 38:
## Known stack suffix:
## EXTENDS name_comma_list
## LR(1) items:
extends_interfaces_decl -> EXTENDS name_comma_list . [ LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production extends_interfaces_decl -> EXTENDS name_comma_list

State 39:
## Known stack suffix:
## name
## LR(1) items:
name -> name . DOT ident [ SEMICOLON LEFTBRACE DOT COMMA ]
name_comma_list -> name . [ SEMICOLON LEFTBRACE ]
name_comma_list -> name . COMMA name_comma_list [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On DOT shift to state 5
-- On COMMA shift to state 40
## Reductions:
-- On SEMICOLON reduce production name_comma_list -> name
-- On LEFTBRACE reduce production name_comma_list -> name

State 40:
## Known stack suffix:
## name COMMA
## LR(1) items:
name_comma_list -> name COMMA . name_comma_list [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On ID shift to state 2
-- On name_comma_list shift to state 41
-- On name shift to state 39
-- On ident shift to state 7
## Reductions:

State 41:
## Known stack suffix:
## name COMMA name_comma_list
## LR(1) items:
name_comma_list -> name COMMA name_comma_list . [ SEMICOLON LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name_comma_list -> name COMMA name_comma_list

State 42:
## Known stack suffix:
## modifiers INTERFACE ident extends_interfaces_decl
## LR(1) items:
interface_declaration -> modifiers INTERFACE ident extends_interfaces_decl . LEFTBRACE interface_member_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On LEFTBRACE shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## modifiers INTERFACE ident extends_interfaces_decl LEFTBRACE
## LR(1) items:
interface_declaration -> modifiers INTERFACE ident extends_interfaces_decl LEFTBRACE . interface_member_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On DOC_COMMENT shift to state 18
-- On interface_member_declarations shift to state 44
-- On interface_member_declaration shift to state 46
-- On doc_comment shift to state 48
## Reductions:
-- On VOID reduce production doc_comment ->
-- On TRANSIENT reduce production doc_comment ->
-- On SYNCHRONIZED reduce production doc_comment ->
-- On STATIC reduce production doc_comment ->
-- On SHORT reduce production doc_comment ->
-- On RIGHTBRACE reduce production interface_member_declarations ->
-- On PUBLIC reduce production doc_comment ->
-- On PROTECTED reduce production doc_comment ->
-- On PRIVATE reduce production doc_comment ->
-- On NATIVE reduce production doc_comment ->
-- On LONG reduce production doc_comment ->
-- On JML_SPEC_PUBLIC reduce production doc_comment ->
-- On JML_PURE reduce production doc_comment ->
-- On JML_METHOD_SPECIFICATION reduce production doc_comment ->
-- On INT reduce production doc_comment ->
-- On ID reduce production doc_comment ->
-- On FLOAT reduce production doc_comment ->
-- On FINAL reduce production doc_comment ->
-- On DOUBLE reduce production doc_comment ->
-- On CHAR reduce production doc_comment ->
-- On BYTE reduce production doc_comment ->
-- On BOOLEAN reduce production doc_comment ->
-- On ABSTRACT reduce production doc_comment ->

State 44:
## Known stack suffix:
## modifiers INTERFACE ident extends_interfaces_decl LEFTBRACE interface_member_declarations
## LR(1) items:
interface_declaration -> modifiers INTERFACE ident extends_interfaces_decl LEFTBRACE interface_member_declarations . RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On RIGHTBRACE shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## modifiers INTERFACE ident extends_interfaces_decl LEFTBRACE interface_member_declarations RIGHTBRACE
## LR(1) items:
interface_declaration -> modifiers INTERFACE ident extends_interfaces_decl LEFTBRACE interface_member_declarations RIGHTBRACE . [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_declaration -> modifiers INTERFACE ident extends_interfaces_decl LEFTBRACE interface_member_declarations RIGHTBRACE

State 46:
## Known stack suffix:
## interface_member_declaration
## LR(1) items:
interface_member_declarations -> interface_member_declaration . interface_member_declarations [ RIGHTBRACE ]
## Transitions:
-- On DOC_COMMENT shift to state 18
-- On interface_member_declarations shift to state 47
-- On interface_member_declaration shift to state 46
-- On doc_comment shift to state 48
## Reductions:
-- On VOID reduce production doc_comment ->
-- On TRANSIENT reduce production doc_comment ->
-- On SYNCHRONIZED reduce production doc_comment ->
-- On STATIC reduce production doc_comment ->
-- On SHORT reduce production doc_comment ->
-- On RIGHTBRACE reduce production interface_member_declarations ->
-- On PUBLIC reduce production doc_comment ->
-- On PROTECTED reduce production doc_comment ->
-- On PRIVATE reduce production doc_comment ->
-- On NATIVE reduce production doc_comment ->
-- On LONG reduce production doc_comment ->
-- On JML_SPEC_PUBLIC reduce production doc_comment ->
-- On JML_PURE reduce production doc_comment ->
-- On JML_METHOD_SPECIFICATION reduce production doc_comment ->
-- On INT reduce production doc_comment ->
-- On ID reduce production doc_comment ->
-- On FLOAT reduce production doc_comment ->
-- On FINAL reduce production doc_comment ->
-- On DOUBLE reduce production doc_comment ->
-- On CHAR reduce production doc_comment ->
-- On BYTE reduce production doc_comment ->
-- On BOOLEAN reduce production doc_comment ->
-- On ABSTRACT reduce production doc_comment ->

State 47:
## Known stack suffix:
## interface_member_declaration interface_member_declarations
## LR(1) items:
interface_member_declarations -> interface_member_declaration interface_member_declarations . [ RIGHTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_member_declarations -> interface_member_declaration interface_member_declarations

State 48:
## Known stack suffix:
## doc_comment
## LR(1) items:
interface_member_declaration -> doc_comment . variable_declaration [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
interface_member_declaration -> doc_comment . method_header SEMICOLON [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On TRANSIENT shift to state 23
-- On SYNCHRONIZED shift to state 24
-- On STATIC shift to state 25
-- On PUBLIC shift to state 26
-- On PROTECTED shift to state 27
-- On PRIVATE shift to state 28
-- On NATIVE shift to state 29
-- On JML_SPEC_PUBLIC shift to state 30
-- On JML_PURE shift to state 31
-- On JML_METHOD_SPECIFICATION shift to state 49
-- On FINAL shift to state 32
-- On ABSTRACT shift to state 33
-- On variable_declaration shift to state 51
-- On modifiers shift to state 52
-- On modifier shift to state 247
-- On method_specification shift to state 249
-- On method_header shift to state 257
## Reductions:
-- On VOID reduce production modifiers ->
-- On SHORT reduce production modifiers ->
-- On LONG reduce production modifiers ->
-- On INT reduce production modifiers ->
-- On ID reduce production modifiers ->
-- On FLOAT reduce production modifiers ->
-- On DOUBLE reduce production modifiers ->
-- On CHAR reduce production modifiers ->
-- On BYTE reduce production modifiers ->
-- On BOOLEAN reduce production modifiers ->

State 49:
## Known stack suffix:
## JML_METHOD_SPECIFICATION
## LR(1) items:
method_specification -> JML_METHOD_SPECIFICATION . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT ]
method_specification -> JML_METHOD_SPECIFICATION . method_specification [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On JML_METHOD_SPECIFICATION shift to state 49
-- On method_specification shift to state 50
## Reductions:
-- On VOID reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On TRANSIENT reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On SYNCHRONIZED reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On STATIC reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On SHORT reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On PUBLIC reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On PROTECTED reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On PRIVATE reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On NATIVE reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On LONG reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On JML_SPEC_PUBLIC reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On JML_PURE reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On INT reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On ID reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On FLOAT reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On FINAL reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On DOUBLE reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On CHAR reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On BYTE reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On BOOLEAN reduce production method_specification -> JML_METHOD_SPECIFICATION
-- On ABSTRACT reduce production method_specification -> JML_METHOD_SPECIFICATION

State 50:
## Known stack suffix:
## JML_METHOD_SPECIFICATION method_specification
## LR(1) items:
method_specification -> JML_METHOD_SPECIFICATION method_specification . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_specification -> JML_METHOD_SPECIFICATION method_specification

State 51:
## Known stack suffix:
## doc_comment variable_declaration
## LR(1) items:
interface_member_declaration -> doc_comment variable_declaration . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_member_declaration -> doc_comment variable_declaration

State 52:
## Known stack suffix:
## modifiers
## LR(1) items:
method_header -> modifiers . type_expr method_declarator throws_decl [ SEMICOLON ]
method_header -> modifiers . VOID method_declarator throws_decl [ SEMICOLON ]
variable_declaration -> modifiers . type_expr variable_declarators SEMICOLON [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On VOID shift to state 53
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 90
-- On name shift to state 80
-- On ident shift to state 7
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 53:
## Known stack suffix:
## modifiers VOID
## LR(1) items:
method_header -> modifiers VOID . method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On ID shift to state 2
-- On method_declarator shift to state 54
-- On ident shift to state 60
## Reductions:

State 54:
## Known stack suffix:
## modifiers VOID method_declarator
## LR(1) items:
method_declarator -> method_declarator . LEFTBRACKET RIGHTBRACKET [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
method_header -> modifiers VOID method_declarator . throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On THROWS shift to state 55
-- On LEFTBRACKET shift to state 57
-- On throws_decl shift to state 59
## Reductions:
-- On SEMICOLON reduce production throws_decl ->
-- On LEFTBRACE reduce production throws_decl ->

State 55:
## Known stack suffix:
## THROWS
## LR(1) items:
throws_decl -> THROWS . name_comma_list [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On ID shift to state 2
-- On name_comma_list shift to state 56
-- On name shift to state 39
-- On ident shift to state 7
## Reductions:

State 56:
## Known stack suffix:
## THROWS name_comma_list
## LR(1) items:
throws_decl -> THROWS name_comma_list . [ SEMICOLON LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production throws_decl -> THROWS name_comma_list

State 57:
## Known stack suffix:
## method_declarator LEFTBRACKET
## LR(1) items:
method_declarator -> method_declarator LEFTBRACKET . RIGHTBRACKET [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
-- On RIGHTBRACKET shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## method_declarator LEFTBRACKET RIGHTBRACKET
## LR(1) items:
method_declarator -> method_declarator LEFTBRACKET RIGHTBRACKET . [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_declarator -> method_declarator LEFTBRACKET RIGHTBRACKET

State 59:
## Known stack suffix:
## modifiers VOID method_declarator throws_decl
## LR(1) items:
method_header -> modifiers VOID method_declarator throws_decl . [ SEMICOLON LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_header -> modifiers VOID method_declarator throws_decl

State 60:
## Known stack suffix:
## ident
## LR(1) items:
method_declarator -> ident . method_parameters [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
-- On LEFTPAR shift to state 61
-- On method_parameters shift to state 89
## Reductions:

State 61:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
method_parameters -> LEFTPAR . RIGHTPAR [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
method_parameters -> LEFTPAR . parameter_comma_list RIGHTPAR [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
-- On SHORT shift to state 62
-- On RIGHTPAR shift to state 63
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 71
-- On parameter_comma_list shift to state 73
-- On parameter shift to state 75
-- On name shift to state 80
-- On ident shift to state 7
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 62:
## Known stack suffix:
## SHORT
## LR(1) items:
base_type -> SHORT . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> SHORT

State 63:
## Known stack suffix:
## LEFTPAR RIGHTPAR
## LR(1) items:
method_parameters -> LEFTPAR RIGHTPAR . [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_parameters -> LEFTPAR RIGHTPAR

State 64:
## Known stack suffix:
## LONG
## LR(1) items:
base_type -> LONG . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> LONG

State 65:
## Known stack suffix:
## INT
## LR(1) items:
base_type -> INT . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> INT

State 66:
## Known stack suffix:
## FLOAT
## LR(1) items:
base_type -> FLOAT . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> FLOAT

State 67:
## Known stack suffix:
## DOUBLE
## LR(1) items:
base_type -> DOUBLE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> DOUBLE

State 68:
## Known stack suffix:
## CHAR
## LR(1) items:
base_type -> CHAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> CHAR

State 69:
## Known stack suffix:
## BYTE
## LR(1) items:
base_type -> BYTE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> BYTE

State 70:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
base_type -> BOOLEAN . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> BOOLEAN

State 71:
## Known stack suffix:
## type_expr
## LR(1) items:
parameter -> type_expr . ident [ RIGHTPAR LEFTBRACKET COMMA ]
## Transitions:
-- On ID shift to state 2
-- On ident shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## type_expr ident
## LR(1) items:
parameter -> type_expr ident . [ RIGHTPAR LEFTBRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter -> type_expr ident

State 73:
## Known stack suffix:
## LEFTPAR parameter_comma_list
## LR(1) items:
method_parameters -> LEFTPAR parameter_comma_list . RIGHTPAR [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
-- On RIGHTPAR shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## LEFTPAR parameter_comma_list RIGHTPAR
## LR(1) items:
method_parameters -> LEFTPAR parameter_comma_list RIGHTPAR . [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_parameters -> LEFTPAR parameter_comma_list RIGHTPAR

State 75:
## Known stack suffix:
## parameter
## LR(1) items:
parameter -> parameter . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET COMMA ]
parameter_comma_list -> parameter . [ RIGHTPAR ]
parameter_comma_list -> parameter . COMMA parameter_comma_list [ RIGHTPAR ]
## Transitions:
-- On LEFTBRACKET shift to state 76
-- On COMMA shift to state 78
## Reductions:
-- On RIGHTPAR reduce production parameter_comma_list -> parameter

State 76:
## Known stack suffix:
## parameter LEFTBRACKET
## LR(1) items:
parameter -> parameter LEFTBRACKET . RIGHTBRACKET [ RIGHTPAR LEFTBRACKET COMMA ]
## Transitions:
-- On RIGHTBRACKET shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## parameter LEFTBRACKET RIGHTBRACKET
## LR(1) items:
parameter -> parameter LEFTBRACKET RIGHTBRACKET . [ RIGHTPAR LEFTBRACKET COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter -> parameter LEFTBRACKET RIGHTBRACKET

State 78:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
parameter_comma_list -> parameter COMMA . parameter_comma_list [ RIGHTPAR ]
## Transitions:
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 71
-- On parameter_comma_list shift to state 79
-- On parameter shift to state 75
-- On name shift to state 80
-- On ident shift to state 7
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 79:
## Known stack suffix:
## parameter COMMA parameter_comma_list
## LR(1) items:
parameter_comma_list -> parameter COMMA parameter_comma_list . [ RIGHTPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_comma_list -> parameter COMMA parameter_comma_list

State 80:
## Known stack suffix:
## name
## LR(1) items:
array_type_expr -> name . LEFTBRACKET RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
type_expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 81
-- On DOT shift to state 5
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production type_expr -> name
-- On VERTICALBAR reduce production type_expr -> name
-- On STAR reduce production type_expr -> name
-- On SLASH reduce production type_expr -> name
-- On SHIFT reduce production type_expr -> name
-- On SEMICOLON reduce production type_expr -> name
-- On RIGHTPAR reduce production type_expr -> name
-- On RIGHTBRACKET reduce production type_expr -> name
-- On RIGHTBRACE reduce production type_expr -> name
-- On QUESTIONMARK reduce production type_expr -> name
-- On PLUSPLUS reduce production type_expr -> name
-- On PLUS reduce production type_expr -> name
-- On PERCENT reduce production type_expr -> name
-- On MINUSMINUS reduce production type_expr -> name
-- On MINUS reduce production type_expr -> name
-- On INSTANCEOF reduce production type_expr -> name
-- On ID reduce production type_expr -> name
-- On EQOP reduce production type_expr -> name
-- On COMP reduce production type_expr -> name
-- On COMMA reduce production type_expr -> name
-- On COLON reduce production type_expr -> name
-- On CARET reduce production type_expr -> name
-- On AMPERSANDAMPERSAND reduce production type_expr -> name
-- On AMPERSAND reduce production type_expr -> name

State 81:
## Known stack suffix:
## name LEFTBRACKET
## LR(1) items:
array_type_expr -> name LEFTBRACKET . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## name LEFTBRACKET RIGHTBRACKET
## LR(1) items:
array_type_expr -> name LEFTBRACKET RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_type_expr -> name LEFTBRACKET RIGHTBRACKET

State 83:
## Known stack suffix:
## base_type
## LR(1) items:
array_type_expr -> base_type . LEFTBRACKET RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
type_expr -> base_type . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 84
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production type_expr -> base_type
-- On VERTICALBAR reduce production type_expr -> base_type
-- On STAR reduce production type_expr -> base_type
-- On SLASH reduce production type_expr -> base_type
-- On SHIFT reduce production type_expr -> base_type
-- On SEMICOLON reduce production type_expr -> base_type
-- On RIGHTPAR reduce production type_expr -> base_type
-- On RIGHTBRACKET reduce production type_expr -> base_type
-- On RIGHTBRACE reduce production type_expr -> base_type
-- On QUESTIONMARK reduce production type_expr -> base_type
-- On PLUSPLUS reduce production type_expr -> base_type
-- On PLUS reduce production type_expr -> base_type
-- On PERCENT reduce production type_expr -> base_type
-- On MINUSMINUS reduce production type_expr -> base_type
-- On MINUS reduce production type_expr -> base_type
-- On INSTANCEOF reduce production type_expr -> base_type
-- On ID reduce production type_expr -> base_type
-- On EQOP reduce production type_expr -> base_type
-- On COMP reduce production type_expr -> base_type
-- On COMMA reduce production type_expr -> base_type
-- On COLON reduce production type_expr -> base_type
-- On CARET reduce production type_expr -> base_type
-- On AMPERSANDAMPERSAND reduce production type_expr -> base_type
-- On AMPERSAND reduce production type_expr -> base_type

State 84:
## Known stack suffix:
## base_type LEFTBRACKET
## LR(1) items:
array_type_expr -> base_type LEFTBRACKET . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## base_type LEFTBRACKET RIGHTBRACKET
## LR(1) items:
array_type_expr -> base_type LEFTBRACKET RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_type_expr -> base_type LEFTBRACKET RIGHTBRACKET

State 86:
## Known stack suffix:
## array_type_expr
## LR(1) items:
array_type_expr -> array_type_expr . LEFTBRACKET RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
type_expr -> array_type_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 87
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production type_expr -> array_type_expr
-- On VERTICALBAR reduce production type_expr -> array_type_expr
-- On STAR reduce production type_expr -> array_type_expr
-- On SLASH reduce production type_expr -> array_type_expr
-- On SHIFT reduce production type_expr -> array_type_expr
-- On SEMICOLON reduce production type_expr -> array_type_expr
-- On RIGHTPAR reduce production type_expr -> array_type_expr
-- On RIGHTBRACKET reduce production type_expr -> array_type_expr
-- On RIGHTBRACE reduce production type_expr -> array_type_expr
-- On QUESTIONMARK reduce production type_expr -> array_type_expr
-- On PLUSPLUS reduce production type_expr -> array_type_expr
-- On PLUS reduce production type_expr -> array_type_expr
-- On PERCENT reduce production type_expr -> array_type_expr
-- On MINUSMINUS reduce production type_expr -> array_type_expr
-- On MINUS reduce production type_expr -> array_type_expr
-- On INSTANCEOF reduce production type_expr -> array_type_expr
-- On ID reduce production type_expr -> array_type_expr
-- On EQOP reduce production type_expr -> array_type_expr
-- On COMP reduce production type_expr -> array_type_expr
-- On COMMA reduce production type_expr -> array_type_expr
-- On COLON reduce production type_expr -> array_type_expr
-- On CARET reduce production type_expr -> array_type_expr
-- On AMPERSANDAMPERSAND reduce production type_expr -> array_type_expr
-- On AMPERSAND reduce production type_expr -> array_type_expr

State 87:
## Known stack suffix:
## array_type_expr LEFTBRACKET
## LR(1) items:
array_type_expr -> array_type_expr LEFTBRACKET . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## array_type_expr LEFTBRACKET RIGHTBRACKET
## LR(1) items:
array_type_expr -> array_type_expr LEFTBRACKET RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_type_expr -> array_type_expr LEFTBRACKET RIGHTBRACKET

State 89:
## Known stack suffix:
## ident method_parameters
## LR(1) items:
method_declarator -> ident method_parameters . [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_declarator -> ident method_parameters

State 90:
## Known stack suffix:
## modifiers type_expr
## LR(1) items:
method_header -> modifiers type_expr . method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
variable_declaration -> modifiers type_expr . variable_declarators SEMICOLON [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On ID shift to state 2
-- On variable_declarators shift to state 91
-- On variable_declarator_id shift to state 93
-- On variable_declarator shift to state 240
-- On method_declarator shift to state 244
-- On ident shift to state 246
## Reductions:

State 91:
## Known stack suffix:
## modifiers type_expr variable_declarators
## LR(1) items:
variable_declaration -> modifiers type_expr variable_declarators . SEMICOLON [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## modifiers type_expr variable_declarators SEMICOLON
## LR(1) items:
variable_declaration -> modifiers type_expr variable_declarators SEMICOLON . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declaration -> modifiers type_expr variable_declarators SEMICOLON

State 93:
## Known stack suffix:
## variable_declarator_id
## LR(1) items:
variable_declarator -> variable_declarator_id . [ SEMICOLON COMMA ]
variable_declarator -> variable_declarator_id . EQ variable_initializer [ SEMICOLON COMMA ]
variable_declarator_id -> variable_declarator_id . LEFTBRACKET RIGHTBRACKET [ SEMICOLON LEFTBRACKET EQ COMMA ]
## Transitions:
-- On LEFTBRACKET shift to state 94
-- On EQ shift to state 96
## Reductions:
-- On SEMICOLON reduce production variable_declarator -> variable_declarator_id
-- On COMMA reduce production variable_declarator -> variable_declarator_id

State 94:
## Known stack suffix:
## variable_declarator_id LEFTBRACKET
## LR(1) items:
variable_declarator_id -> variable_declarator_id LEFTBRACKET . RIGHTBRACKET [ SEMICOLON LEFTBRACKET EQ COMMA ]
## Transitions:
-- On RIGHTBRACKET shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## variable_declarator_id LEFTBRACKET RIGHTBRACKET
## LR(1) items:
variable_declarator_id -> variable_declarator_id LEFTBRACKET RIGHTBRACKET . [ SEMICOLON LEFTBRACKET EQ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declarator_id -> variable_declarator_id LEFTBRACKET RIGHTBRACKET

State 96:
## Known stack suffix:
## variable_declarator_id EQ
## LR(1) items:
variable_declarator -> variable_declarator_id EQ . variable_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 232
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On variable_initializer shift to state 239
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 238
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 97:
## Known stack suffix:
## TRUE
## LR(1) items:
primary_no_new_array -> TRUE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> TRUE

State 98:
## Known stack suffix:
## TILDA
## LR(1) items:
expr_no_name -> TILDA . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 231
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 99:
## Known stack suffix:
## THIS
## LR(1) items:
primary_no_new_array -> THIS . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> THIS

State 100:
## Known stack suffix:
## SUPER
## LR(1) items:
field_access -> SUPER . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On DOT shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## SUPER DOT
## LR(1) items:
field_access -> SUPER DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 2
-- On ident shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## SUPER DOT ident
## LR(1) items:
field_access -> SUPER DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_access -> SUPER DOT ident

State 103:
## Known stack suffix:
## STRING
## LR(1) items:
primary_no_new_array -> STRING . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> STRING

State 104:
## Known stack suffix:
## REAL
## LR(1) items:
primary_no_new_array -> REAL . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> REAL

State 105:
## Known stack suffix:
## PLUSPLUS
## LR(1) items:
expr_no_name -> PLUSPLUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 230
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 106:
## Known stack suffix:
## PLUS
## LR(1) items:
expr_no_name -> PLUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 229
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 107:
## Known stack suffix:
## NULL
## LR(1) items:
primary_no_new_array -> NULL . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> NULL

State 108:
## Known stack suffix:
## NEW
## LR(1) items:
array_creation_expression -> NEW . base_type array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_creation_expression -> NEW . name array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> NEW . name LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On name shift to state 109
-- On ident shift to state 7
-- On base_type shift to state 227
## Reductions:

State 109:
## Known stack suffix:
## NEW name
## LR(1) items:
array_creation_expression -> NEW name . array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ LEFTPAR LEFTBRACKET DOT ]
primary_no_new_array -> NEW name . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 110
-- On LEFTBRACKET shift to state 217
-- On DOT shift to state 5
-- On array_dims shift to state 226
## Reductions:

State 110:
## Known stack suffix:
## NEW name LEFTPAR
## LR(1) items:
primary_no_new_array -> NEW name LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr_comma_list shift to state 173
-- On expr shift to state 174
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On argument_list shift to state 215
## Reductions:
-- On RIGHTPAR reduce production argument_list ->

State 111:
## Known stack suffix:
## MINUSMINUS
## LR(1) items:
expr_no_name -> MINUSMINUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 214
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 112:
## Known stack suffix:
## MINUS
## LR(1) items:
expr_no_name -> MINUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 213
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 113:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
expr_no_name -> LEFTPAR . base_type RIGHTPAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
non_basic_cast -> LEFTPAR . array_type_expr RIGHTPAR castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
non_basic_cast -> LEFTPAR . name RIGHTPAR castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . expr_no_name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 193
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 196
-- On expr shift to state 198
-- On base_type shift to state 210
-- On array_type_expr shift to state 200
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 114:
## Known stack suffix:
## INTEGER
## LR(1) items:
primary_no_new_array -> INTEGER . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> INTEGER

State 115:
## Known stack suffix:
## FALSE
## LR(1) items:
primary_no_new_array -> FALSE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> FALSE

State 116:
## Known stack suffix:
## CHARACTER
## LR(1) items:
primary_no_new_array -> CHARACTER . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> CHARACTER

State 117:
## Known stack suffix:
## BANG
## LR(1) items:
expr_no_name -> BANG . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 192
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 118:
## Known stack suffix:
## primary_no_new_array
## LR(1) items:
array_access -> primary_no_new_array . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_expr -> primary_no_new_array . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 119
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production primary_expr -> primary_no_new_array
-- On VERTICALBAR reduce production primary_expr -> primary_no_new_array
-- On STAR reduce production primary_expr -> primary_no_new_array
-- On SLASH reduce production primary_expr -> primary_no_new_array
-- On SHIFT reduce production primary_expr -> primary_no_new_array
-- On SEMICOLON reduce production primary_expr -> primary_no_new_array
-- On RIGHTPAR reduce production primary_expr -> primary_no_new_array
-- On RIGHTBRACKET reduce production primary_expr -> primary_no_new_array
-- On RIGHTBRACE reduce production primary_expr -> primary_no_new_array
-- On QUESTIONMARK reduce production primary_expr -> primary_no_new_array
-- On PLUSPLUS reduce production primary_expr -> primary_no_new_array
-- On PLUS reduce production primary_expr -> primary_no_new_array
-- On PERCENT reduce production primary_expr -> primary_no_new_array
-- On MINUSMINUS reduce production primary_expr -> primary_no_new_array
-- On MINUS reduce production primary_expr -> primary_no_new_array
-- On INSTANCEOF reduce production primary_expr -> primary_no_new_array
-- On EQOP reduce production primary_expr -> primary_no_new_array
-- On DOT reduce production primary_expr -> primary_no_new_array
-- On COMP reduce production primary_expr -> primary_no_new_array
-- On COMMA reduce production primary_expr -> primary_no_new_array
-- On COLON reduce production primary_expr -> primary_no_new_array
-- On CARET reduce production primary_expr -> primary_no_new_array
-- On AMPERSANDAMPERSAND reduce production primary_expr -> primary_no_new_array
-- On AMPERSAND reduce production primary_expr -> primary_no_new_array

State 119:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 190
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 120:
## Known stack suffix:
## primary_expr
## LR(1) items:
expr_no_name -> primary_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
field_access -> primary_expr . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On DOT shift to state 121
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> primary_expr
-- On VERTICALBAR reduce production expr_no_name -> primary_expr
-- On STAR reduce production expr_no_name -> primary_expr
-- On SLASH reduce production expr_no_name -> primary_expr
-- On SHIFT reduce production expr_no_name -> primary_expr
-- On SEMICOLON reduce production expr_no_name -> primary_expr
-- On RIGHTPAR reduce production expr_no_name -> primary_expr
-- On RIGHTBRACKET reduce production expr_no_name -> primary_expr
-- On RIGHTBRACE reduce production expr_no_name -> primary_expr
-- On QUESTIONMARK reduce production expr_no_name -> primary_expr
-- On PLUSPLUS reduce production expr_no_name -> primary_expr
-- On PLUS reduce production expr_no_name -> primary_expr
-- On PERCENT reduce production expr_no_name -> primary_expr
-- On MINUSMINUS reduce production expr_no_name -> primary_expr
-- On MINUS reduce production expr_no_name -> primary_expr
-- On INSTANCEOF reduce production expr_no_name -> primary_expr
-- On EQOP reduce production expr_no_name -> primary_expr
-- On COMP reduce production expr_no_name -> primary_expr
-- On COMMA reduce production expr_no_name -> primary_expr
-- On COLON reduce production expr_no_name -> primary_expr
-- On CARET reduce production expr_no_name -> primary_expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> primary_expr
-- On AMPERSAND reduce production expr_no_name -> primary_expr

State 121:
## Known stack suffix:
## primary_expr DOT
## LR(1) items:
field_access -> primary_expr DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr DOT . ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 2
-- On ident shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## primary_expr DOT ident
## LR(1) items:
field_access -> primary_expr DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr DOT ident . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 123
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production field_access -> primary_expr DOT ident
-- On VERTICALBAR reduce production field_access -> primary_expr DOT ident
-- On STAR reduce production field_access -> primary_expr DOT ident
-- On SLASH reduce production field_access -> primary_expr DOT ident
-- On SHIFT reduce production field_access -> primary_expr DOT ident
-- On SEMICOLON reduce production field_access -> primary_expr DOT ident
-- On RIGHTPAR reduce production field_access -> primary_expr DOT ident
-- On RIGHTBRACKET reduce production field_access -> primary_expr DOT ident
-- On RIGHTBRACE reduce production field_access -> primary_expr DOT ident
-- On QUESTIONMARK reduce production field_access -> primary_expr DOT ident
-- On PLUSPLUS reduce production field_access -> primary_expr DOT ident
-- On PLUS reduce production field_access -> primary_expr DOT ident
-- On PERCENT reduce production field_access -> primary_expr DOT ident
-- On MINUSMINUS reduce production field_access -> primary_expr DOT ident
-- On MINUS reduce production field_access -> primary_expr DOT ident
-- On LEFTBRACKET reduce production field_access -> primary_expr DOT ident
-- On INSTANCEOF reduce production field_access -> primary_expr DOT ident
-- On EQOP reduce production field_access -> primary_expr DOT ident
-- On EQ reduce production field_access -> primary_expr DOT ident
-- On DOT reduce production field_access -> primary_expr DOT ident
-- On COMP reduce production field_access -> primary_expr DOT ident
-- On COMMA reduce production field_access -> primary_expr DOT ident
-- On COLON reduce production field_access -> primary_expr DOT ident
-- On CARET reduce production field_access -> primary_expr DOT ident
-- On ASSIGNOP reduce production field_access -> primary_expr DOT ident
-- On AMPERSANDAMPERSAND reduce production field_access -> primary_expr DOT ident
-- On AMPERSAND reduce production field_access -> primary_expr DOT ident

State 123:
## Known stack suffix:
## primary_expr DOT ident LEFTPAR
## LR(1) items:
primary_no_new_array -> primary_expr DOT ident LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr_comma_list shift to state 173
-- On expr shift to state 174
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On argument_list shift to state 188
## Reductions:
-- On RIGHTPAR reduce production argument_list ->

State 124:
## Known stack suffix:
## non_basic_cast
## LR(1) items:
expr_no_name -> non_basic_cast . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_name -> non_basic_cast

State 125:
## Known stack suffix:
## name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> name . assign_op expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 126
-- On EQ shift to state 130
-- On DOT shift to state 181
-- On ASSIGNOP shift to state 131
-- On assign_op shift to state 186
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr -> name
-- On VERTICALBAR reduce production expr -> name
-- On STAR reduce production expr -> name
-- On SLASH reduce production expr -> name
-- On SHIFT reduce production expr -> name
-- On SEMICOLON reduce production expr -> name
-- On RIGHTPAR reduce production expr -> name
-- On RIGHTBRACKET reduce production expr -> name
-- On RIGHTBRACE reduce production expr -> name
-- On QUESTIONMARK reduce production expr -> name
-- On PLUSPLUS reduce production expr -> name
-- On PLUS reduce production expr -> name
-- On PERCENT reduce production expr -> name
-- On MINUSMINUS reduce production expr -> name
-- On MINUS reduce production expr -> name
-- On INSTANCEOF reduce production expr -> name
-- On EQOP reduce production expr -> name
-- On COMP reduce production expr -> name
-- On COMMA reduce production expr -> name
-- On COLON reduce production expr -> name
-- On CARET reduce production expr -> name
-- On AMPERSANDAMPERSAND reduce production expr -> name
-- On AMPERSAND reduce production expr -> name

State 126:
## Known stack suffix:
## name LEFTBRACKET
## LR(1) items:
array_access -> name LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 179
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 127:
## Known stack suffix:
## ident
## LR(1) items:
name -> ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> ident . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 128
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production name -> ident
-- On VERTICALBAR reduce production name -> ident
-- On STAR reduce production name -> ident
-- On SLASH reduce production name -> ident
-- On SHIFT reduce production name -> ident
-- On SEMICOLON reduce production name -> ident
-- On RIGHTPAR reduce production name -> ident
-- On RIGHTBRACKET reduce production name -> ident
-- On RIGHTBRACE reduce production name -> ident
-- On QUESTIONMARK reduce production name -> ident
-- On PLUSPLUS reduce production name -> ident
-- On PLUS reduce production name -> ident
-- On PERCENT reduce production name -> ident
-- On MINUSMINUS reduce production name -> ident
-- On MINUS reduce production name -> ident
-- On LEFTBRACKET reduce production name -> ident
-- On INSTANCEOF reduce production name -> ident
-- On ID reduce production name -> ident
-- On EQOP reduce production name -> ident
-- On EQ reduce production name -> ident
-- On DOT reduce production name -> ident
-- On COMP reduce production name -> ident
-- On COMMA reduce production name -> ident
-- On COLON reduce production name -> ident
-- On CARET reduce production name -> ident
-- On ASSIGNOP reduce production name -> ident
-- On AMPERSANDAMPERSAND reduce production name -> ident
-- On AMPERSAND reduce production name -> ident

State 128:
## Known stack suffix:
## ident LEFTPAR
## LR(1) items:
primary_no_new_array -> ident LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr_comma_list shift to state 173
-- On expr shift to state 174
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On argument_list shift to state 177
## Reductions:
-- On RIGHTPAR reduce production argument_list ->

State 129:
## Known stack suffix:
## field_access
## LR(1) items:
expr_no_name -> field_access . assign_op expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> field_access . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On EQ shift to state 130
-- On ASSIGNOP shift to state 131
-- On assign_op shift to state 132
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production primary_no_new_array -> field_access
-- On VERTICALBAR reduce production primary_no_new_array -> field_access
-- On STAR reduce production primary_no_new_array -> field_access
-- On SLASH reduce production primary_no_new_array -> field_access
-- On SHIFT reduce production primary_no_new_array -> field_access
-- On SEMICOLON reduce production primary_no_new_array -> field_access
-- On RIGHTPAR reduce production primary_no_new_array -> field_access
-- On RIGHTBRACKET reduce production primary_no_new_array -> field_access
-- On RIGHTBRACE reduce production primary_no_new_array -> field_access
-- On QUESTIONMARK reduce production primary_no_new_array -> field_access
-- On PLUSPLUS reduce production primary_no_new_array -> field_access
-- On PLUS reduce production primary_no_new_array -> field_access
-- On PERCENT reduce production primary_no_new_array -> field_access
-- On MINUSMINUS reduce production primary_no_new_array -> field_access
-- On MINUS reduce production primary_no_new_array -> field_access
-- On LEFTBRACKET reduce production primary_no_new_array -> field_access
-- On INSTANCEOF reduce production primary_no_new_array -> field_access
-- On EQOP reduce production primary_no_new_array -> field_access
-- On DOT reduce production primary_no_new_array -> field_access
-- On COMP reduce production primary_no_new_array -> field_access
-- On COMMA reduce production primary_no_new_array -> field_access
-- On COLON reduce production primary_no_new_array -> field_access
-- On CARET reduce production primary_no_new_array -> field_access
-- On AMPERSANDAMPERSAND reduce production primary_no_new_array -> field_access
-- On AMPERSAND reduce production primary_no_new_array -> field_access

State 130:
## Known stack suffix:
## EQ
## LR(1) items:
assign_op -> EQ . [ TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assign_op -> EQ

State 131:
## Known stack suffix:
## ASSIGNOP
## LR(1) items:
assign_op -> ASSIGNOP . [ TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assign_op -> ASSIGNOP

State 132:
## Known stack suffix:
## field_access assign_op
## LR(1) items:
expr_no_name -> field_access assign_op . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 134
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 133:
## Known stack suffix:
## expr_no_name
## LR(1) items:
expr -> expr_no_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr_no_name

State 134:
## Known stack suffix:
## field_access assign_op expr
## LR(1) items:
expr_no_name -> field_access assign_op expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On SEMICOLON reduce production expr_no_name -> field_access assign_op expr
-- On RIGHTPAR reduce production expr_no_name -> field_access assign_op expr
-- On RIGHTBRACKET reduce production expr_no_name -> field_access assign_op expr
-- On RIGHTBRACE reduce production expr_no_name -> field_access assign_op expr
-- On COMMA reduce production expr_no_name -> field_access assign_op expr
-- On COLON reduce production expr_no_name -> field_access assign_op expr

State 135:
## Known stack suffix:
## expr VERTICALBARVERTICALBAR
## LR(1) items:
expr_no_name -> expr VERTICALBARVERTICALBAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 136
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 136:
## Known stack suffix:
## expr VERTICALBARVERTICALBAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr VERTICALBARVERTICALBAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr
-- On SEMICOLON reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr
-- On RIGHTPAR reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr
-- On RIGHTBRACE reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr
-- On QUESTIONMARK reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr
-- On COMMA reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr
-- On COLON reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr

State 137:
## Known stack suffix:
## expr VERTICALBAR
## LR(1) items:
expr_no_name -> expr VERTICALBAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 138
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 138:
## Known stack suffix:
## expr VERTICALBAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr VERTICALBAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSAND shift to state 169
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr VERTICALBAR expr
-- On VERTICALBAR reduce production expr_no_name -> expr VERTICALBAR expr
-- On SEMICOLON reduce production expr_no_name -> expr VERTICALBAR expr
-- On RIGHTPAR reduce production expr_no_name -> expr VERTICALBAR expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr VERTICALBAR expr
-- On RIGHTBRACE reduce production expr_no_name -> expr VERTICALBAR expr
-- On QUESTIONMARK reduce production expr_no_name -> expr VERTICALBAR expr
-- On COMMA reduce production expr_no_name -> expr VERTICALBAR expr
-- On COLON reduce production expr_no_name -> expr VERTICALBAR expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr VERTICALBAR expr

State 139:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr_no_name -> expr STAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 140
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 140:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr STAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr STAR expr
-- On VERTICALBAR reduce production expr_no_name -> expr STAR expr
-- On STAR reduce production expr_no_name -> expr STAR expr
-- On SLASH reduce production expr_no_name -> expr STAR expr
-- On SHIFT reduce production expr_no_name -> expr STAR expr
-- On SEMICOLON reduce production expr_no_name -> expr STAR expr
-- On RIGHTPAR reduce production expr_no_name -> expr STAR expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr STAR expr
-- On RIGHTBRACE reduce production expr_no_name -> expr STAR expr
-- On QUESTIONMARK reduce production expr_no_name -> expr STAR expr
-- On PLUS reduce production expr_no_name -> expr STAR expr
-- On PERCENT reduce production expr_no_name -> expr STAR expr
-- On MINUS reduce production expr_no_name -> expr STAR expr
-- On INSTANCEOF reduce production expr_no_name -> expr STAR expr
-- On EQOP reduce production expr_no_name -> expr STAR expr
-- On COMP reduce production expr_no_name -> expr STAR expr
-- On COMMA reduce production expr_no_name -> expr STAR expr
-- On COLON reduce production expr_no_name -> expr STAR expr
-- On CARET reduce production expr_no_name -> expr STAR expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr STAR expr
-- On AMPERSAND reduce production expr_no_name -> expr STAR expr

State 141:
## Known stack suffix:
## expr PLUSPLUS
## LR(1) items:
expr_no_name -> expr PLUSPLUS . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_name -> expr PLUSPLUS

State 142:
## Known stack suffix:
## expr MINUSMINUS
## LR(1) items:
expr_no_name -> expr MINUSMINUS . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_name -> expr MINUSMINUS

State 143:
## Known stack suffix:
## array_creation_expression
## LR(1) items:
primary_expr -> array_creation_expression . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expr -> array_creation_expression

State 144:
## Known stack suffix:
## array_access
## LR(1) items:
expr_no_name -> array_access . assign_op expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> array_access . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On EQ shift to state 130
-- On ASSIGNOP shift to state 131
-- On assign_op shift to state 145
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production primary_no_new_array -> array_access
-- On VERTICALBAR reduce production primary_no_new_array -> array_access
-- On STAR reduce production primary_no_new_array -> array_access
-- On SLASH reduce production primary_no_new_array -> array_access
-- On SHIFT reduce production primary_no_new_array -> array_access
-- On SEMICOLON reduce production primary_no_new_array -> array_access
-- On RIGHTPAR reduce production primary_no_new_array -> array_access
-- On RIGHTBRACKET reduce production primary_no_new_array -> array_access
-- On RIGHTBRACE reduce production primary_no_new_array -> array_access
-- On QUESTIONMARK reduce production primary_no_new_array -> array_access
-- On PLUSPLUS reduce production primary_no_new_array -> array_access
-- On PLUS reduce production primary_no_new_array -> array_access
-- On PERCENT reduce production primary_no_new_array -> array_access
-- On MINUSMINUS reduce production primary_no_new_array -> array_access
-- On MINUS reduce production primary_no_new_array -> array_access
-- On LEFTBRACKET reduce production primary_no_new_array -> array_access
-- On INSTANCEOF reduce production primary_no_new_array -> array_access
-- On EQOP reduce production primary_no_new_array -> array_access
-- On DOT reduce production primary_no_new_array -> array_access
-- On COMP reduce production primary_no_new_array -> array_access
-- On COMMA reduce production primary_no_new_array -> array_access
-- On COLON reduce production primary_no_new_array -> array_access
-- On CARET reduce production primary_no_new_array -> array_access
-- On AMPERSANDAMPERSAND reduce production primary_no_new_array -> array_access
-- On AMPERSAND reduce production primary_no_new_array -> array_access

State 145:
## Known stack suffix:
## array_access assign_op
## LR(1) items:
expr_no_name -> array_access assign_op . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 146
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 146:
## Known stack suffix:
## array_access assign_op expr
## LR(1) items:
expr_no_name -> array_access assign_op expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On SEMICOLON reduce production expr_no_name -> array_access assign_op expr
-- On RIGHTPAR reduce production expr_no_name -> array_access assign_op expr
-- On RIGHTBRACKET reduce production expr_no_name -> array_access assign_op expr
-- On RIGHTBRACE reduce production expr_no_name -> array_access assign_op expr
-- On COMMA reduce production expr_no_name -> array_access assign_op expr
-- On COLON reduce production expr_no_name -> array_access assign_op expr

State 147:
## Known stack suffix:
## expr SLASH
## LR(1) items:
expr_no_name -> expr SLASH . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 148
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 148:
## Known stack suffix:
## expr SLASH expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr SLASH expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr SLASH expr
-- On VERTICALBAR reduce production expr_no_name -> expr SLASH expr
-- On STAR reduce production expr_no_name -> expr SLASH expr
-- On SLASH reduce production expr_no_name -> expr SLASH expr
-- On SHIFT reduce production expr_no_name -> expr SLASH expr
-- On SEMICOLON reduce production expr_no_name -> expr SLASH expr
-- On RIGHTPAR reduce production expr_no_name -> expr SLASH expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr SLASH expr
-- On RIGHTBRACE reduce production expr_no_name -> expr SLASH expr
-- On QUESTIONMARK reduce production expr_no_name -> expr SLASH expr
-- On PLUS reduce production expr_no_name -> expr SLASH expr
-- On PERCENT reduce production expr_no_name -> expr SLASH expr
-- On MINUS reduce production expr_no_name -> expr SLASH expr
-- On INSTANCEOF reduce production expr_no_name -> expr SLASH expr
-- On EQOP reduce production expr_no_name -> expr SLASH expr
-- On COMP reduce production expr_no_name -> expr SLASH expr
-- On COMMA reduce production expr_no_name -> expr SLASH expr
-- On COLON reduce production expr_no_name -> expr SLASH expr
-- On CARET reduce production expr_no_name -> expr SLASH expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr SLASH expr
-- On AMPERSAND reduce production expr_no_name -> expr SLASH expr

State 149:
## Known stack suffix:
## expr SHIFT
## LR(1) items:
expr_no_name -> expr SHIFT . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 150
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 150:
## Known stack suffix:
## expr SHIFT expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr SHIFT expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr SHIFT expr
-- On VERTICALBAR reduce production expr_no_name -> expr SHIFT expr
-- On SHIFT reduce production expr_no_name -> expr SHIFT expr
-- On SEMICOLON reduce production expr_no_name -> expr SHIFT expr
-- On RIGHTPAR reduce production expr_no_name -> expr SHIFT expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr SHIFT expr
-- On RIGHTBRACE reduce production expr_no_name -> expr SHIFT expr
-- On QUESTIONMARK reduce production expr_no_name -> expr SHIFT expr
-- On INSTANCEOF reduce production expr_no_name -> expr SHIFT expr
-- On EQOP reduce production expr_no_name -> expr SHIFT expr
-- On COMP reduce production expr_no_name -> expr SHIFT expr
-- On COMMA reduce production expr_no_name -> expr SHIFT expr
-- On COLON reduce production expr_no_name -> expr SHIFT expr
-- On CARET reduce production expr_no_name -> expr SHIFT expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr SHIFT expr
-- On AMPERSAND reduce production expr_no_name -> expr SHIFT expr

State 151:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr_no_name -> expr PLUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 152
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 152:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr PLUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On PLUSPLUS shift to state 141
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr PLUS expr
-- On VERTICALBAR reduce production expr_no_name -> expr PLUS expr
-- On SHIFT reduce production expr_no_name -> expr PLUS expr
-- On SEMICOLON reduce production expr_no_name -> expr PLUS expr
-- On RIGHTPAR reduce production expr_no_name -> expr PLUS expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr PLUS expr
-- On RIGHTBRACE reduce production expr_no_name -> expr PLUS expr
-- On QUESTIONMARK reduce production expr_no_name -> expr PLUS expr
-- On PLUS reduce production expr_no_name -> expr PLUS expr
-- On MINUS reduce production expr_no_name -> expr PLUS expr
-- On INSTANCEOF reduce production expr_no_name -> expr PLUS expr
-- On EQOP reduce production expr_no_name -> expr PLUS expr
-- On COMP reduce production expr_no_name -> expr PLUS expr
-- On COMMA reduce production expr_no_name -> expr PLUS expr
-- On COLON reduce production expr_no_name -> expr PLUS expr
-- On CARET reduce production expr_no_name -> expr PLUS expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr PLUS expr
-- On AMPERSAND reduce production expr_no_name -> expr PLUS expr

State 153:
## Known stack suffix:
## expr PERCENT
## LR(1) items:
expr_no_name -> expr PERCENT . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 154
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 154:
## Known stack suffix:
## expr PERCENT expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr PERCENT expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr PERCENT expr
-- On VERTICALBAR reduce production expr_no_name -> expr PERCENT expr
-- On STAR reduce production expr_no_name -> expr PERCENT expr
-- On SLASH reduce production expr_no_name -> expr PERCENT expr
-- On SHIFT reduce production expr_no_name -> expr PERCENT expr
-- On SEMICOLON reduce production expr_no_name -> expr PERCENT expr
-- On RIGHTPAR reduce production expr_no_name -> expr PERCENT expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr PERCENT expr
-- On RIGHTBRACE reduce production expr_no_name -> expr PERCENT expr
-- On QUESTIONMARK reduce production expr_no_name -> expr PERCENT expr
-- On PLUS reduce production expr_no_name -> expr PERCENT expr
-- On PERCENT reduce production expr_no_name -> expr PERCENT expr
-- On MINUS reduce production expr_no_name -> expr PERCENT expr
-- On INSTANCEOF reduce production expr_no_name -> expr PERCENT expr
-- On EQOP reduce production expr_no_name -> expr PERCENT expr
-- On COMP reduce production expr_no_name -> expr PERCENT expr
-- On COMMA reduce production expr_no_name -> expr PERCENT expr
-- On COLON reduce production expr_no_name -> expr PERCENT expr
-- On CARET reduce production expr_no_name -> expr PERCENT expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr PERCENT expr
-- On AMPERSAND reduce production expr_no_name -> expr PERCENT expr

State 155:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr_no_name -> expr MINUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 156
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 156:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr MINUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On PLUSPLUS shift to state 141
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr MINUS expr
-- On VERTICALBAR reduce production expr_no_name -> expr MINUS expr
-- On SHIFT reduce production expr_no_name -> expr MINUS expr
-- On SEMICOLON reduce production expr_no_name -> expr MINUS expr
-- On RIGHTPAR reduce production expr_no_name -> expr MINUS expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr MINUS expr
-- On RIGHTBRACE reduce production expr_no_name -> expr MINUS expr
-- On QUESTIONMARK reduce production expr_no_name -> expr MINUS expr
-- On PLUS reduce production expr_no_name -> expr MINUS expr
-- On MINUS reduce production expr_no_name -> expr MINUS expr
-- On INSTANCEOF reduce production expr_no_name -> expr MINUS expr
-- On EQOP reduce production expr_no_name -> expr MINUS expr
-- On COMP reduce production expr_no_name -> expr MINUS expr
-- On COMMA reduce production expr_no_name -> expr MINUS expr
-- On COLON reduce production expr_no_name -> expr MINUS expr
-- On CARET reduce production expr_no_name -> expr MINUS expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr MINUS expr
-- On AMPERSAND reduce production expr_no_name -> expr MINUS expr

State 157:
## Known stack suffix:
## expr QUESTIONMARK
## LR(1) items:
expr_no_name -> expr QUESTIONMARK . expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 158
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 158:
## Known stack suffix:
## expr QUESTIONMARK expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr QUESTIONMARK expr . COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On COLON shift to state 165
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 159:
## Known stack suffix:
## expr INSTANCEOF
## LR(1) items:
expr_no_name -> expr INSTANCEOF . type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 160
-- On name shift to state 80
-- On ident shift to state 7
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 160:
## Known stack suffix:
## expr INSTANCEOF type_expr
## LR(1) items:
expr_no_name -> expr INSTANCEOF type_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_no_name -> expr INSTANCEOF type_expr

State 161:
## Known stack suffix:
## expr EQOP
## LR(1) items:
expr_no_name -> expr EQOP . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 162
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 162:
## Known stack suffix:
## expr EQOP expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr EQOP expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On COMP shift to state 163
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr EQOP expr
-- On VERTICALBAR reduce production expr_no_name -> expr EQOP expr
-- On SEMICOLON reduce production expr_no_name -> expr EQOP expr
-- On RIGHTPAR reduce production expr_no_name -> expr EQOP expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr EQOP expr
-- On RIGHTBRACE reduce production expr_no_name -> expr EQOP expr
-- On QUESTIONMARK reduce production expr_no_name -> expr EQOP expr
-- On EQOP reduce production expr_no_name -> expr EQOP expr
-- On COMMA reduce production expr_no_name -> expr EQOP expr
-- On COLON reduce production expr_no_name -> expr EQOP expr
-- On CARET reduce production expr_no_name -> expr EQOP expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr EQOP expr
-- On AMPERSAND reduce production expr_no_name -> expr EQOP expr

State 163:
## Known stack suffix:
## expr COMP
## LR(1) items:
expr_no_name -> expr COMP . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 164
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 164:
## Known stack suffix:
## expr COMP expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr COMP expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr COMP expr
-- On VERTICALBAR reduce production expr_no_name -> expr COMP expr
-- On SEMICOLON reduce production expr_no_name -> expr COMP expr
-- On RIGHTPAR reduce production expr_no_name -> expr COMP expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr COMP expr
-- On RIGHTBRACE reduce production expr_no_name -> expr COMP expr
-- On QUESTIONMARK reduce production expr_no_name -> expr COMP expr
-- On INSTANCEOF reduce production expr_no_name -> expr COMP expr
-- On EQOP reduce production expr_no_name -> expr COMP expr
-- On COMP reduce production expr_no_name -> expr COMP expr
-- On COMMA reduce production expr_no_name -> expr COMP expr
-- On COLON reduce production expr_no_name -> expr COMP expr
-- On CARET reduce production expr_no_name -> expr COMP expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr COMP expr
-- On AMPERSAND reduce production expr_no_name -> expr COMP expr

State 165:
## Known stack suffix:
## expr QUESTIONMARK expr COLON
## LR(1) items:
expr_no_name -> expr QUESTIONMARK expr COLON . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 166
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 166:
## Known stack suffix:
## expr QUESTIONMARK expr COLON expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr QUESTIONMARK expr COLON expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On SEMICOLON reduce production expr_no_name -> expr QUESTIONMARK expr COLON expr
-- On RIGHTPAR reduce production expr_no_name -> expr QUESTIONMARK expr COLON expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr QUESTIONMARK expr COLON expr
-- On RIGHTBRACE reduce production expr_no_name -> expr QUESTIONMARK expr COLON expr
-- On COMMA reduce production expr_no_name -> expr QUESTIONMARK expr COLON expr
-- On COLON reduce production expr_no_name -> expr QUESTIONMARK expr COLON expr

State 167:
## Known stack suffix:
## expr CARET
## LR(1) items:
expr_no_name -> expr CARET . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 168
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 168:
## Known stack suffix:
## expr CARET expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr CARET expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On AMPERSAND shift to state 169
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr CARET expr
-- On VERTICALBAR reduce production expr_no_name -> expr CARET expr
-- On SEMICOLON reduce production expr_no_name -> expr CARET expr
-- On RIGHTPAR reduce production expr_no_name -> expr CARET expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr CARET expr
-- On RIGHTBRACE reduce production expr_no_name -> expr CARET expr
-- On QUESTIONMARK reduce production expr_no_name -> expr CARET expr
-- On COMMA reduce production expr_no_name -> expr CARET expr
-- On COLON reduce production expr_no_name -> expr CARET expr
-- On CARET reduce production expr_no_name -> expr CARET expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr CARET expr

State 169:
## Known stack suffix:
## expr AMPERSAND
## LR(1) items:
expr_no_name -> expr AMPERSAND . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 170
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 170:
## Known stack suffix:
## expr AMPERSAND expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr AMPERSAND expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr AMPERSAND expr
-- On VERTICALBAR reduce production expr_no_name -> expr AMPERSAND expr
-- On SEMICOLON reduce production expr_no_name -> expr AMPERSAND expr
-- On RIGHTPAR reduce production expr_no_name -> expr AMPERSAND expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr AMPERSAND expr
-- On RIGHTBRACE reduce production expr_no_name -> expr AMPERSAND expr
-- On QUESTIONMARK reduce production expr_no_name -> expr AMPERSAND expr
-- On COMMA reduce production expr_no_name -> expr AMPERSAND expr
-- On COLON reduce production expr_no_name -> expr AMPERSAND expr
-- On CARET reduce production expr_no_name -> expr AMPERSAND expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr AMPERSAND expr
-- On AMPERSAND reduce production expr_no_name -> expr AMPERSAND expr

State 171:
## Known stack suffix:
## expr AMPERSANDAMPERSAND
## LR(1) items:
expr_no_name -> expr AMPERSANDAMPERSAND . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 172
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 172:
## Known stack suffix:
## expr AMPERSANDAMPERSAND expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr AMPERSANDAMPERSAND expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSAND shift to state 169
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On SEMICOLON reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On RIGHTPAR reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On RIGHTBRACKET reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On RIGHTBRACE reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On QUESTIONMARK reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On COMMA reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On COLON reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr

State 173:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
argument_list -> expr_comma_list . [ RIGHTPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument_list -> expr_comma_list

State 174:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list -> expr . [ RIGHTPAR ]
expr_comma_list -> expr . COMMA expr_comma_list [ RIGHTPAR ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On COMMA shift to state 175
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On RIGHTPAR reduce production expr_comma_list -> expr

State 175:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr_comma_list [ RIGHTPAR ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr_comma_list shift to state 176
-- On expr shift to state 174
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 176:
## Known stack suffix:
## expr COMMA expr_comma_list
## LR(1) items:
expr_comma_list -> expr COMMA expr_comma_list . [ RIGHTPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_comma_list -> expr COMMA expr_comma_list

State 177:
## Known stack suffix:
## ident LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> ident LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## ident LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> ident LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> ident LEFTPAR argument_list RIGHTPAR

State 179:
## Known stack suffix:
## name LEFTBRACKET expr
## LR(1) items:
array_access -> name LEFTBRACKET expr . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTBRACKET shift to state 180
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 180:
## Known stack suffix:
## name LEFTBRACKET expr RIGHTBRACKET
## LR(1) items:
array_access -> name LEFTBRACKET expr RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_access -> name LEFTBRACKET expr RIGHTBRACKET

State 181:
## Known stack suffix:
## name DOT
## LR(1) items:
name -> name DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name DOT . ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 2
-- On ident shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## name DOT ident
## LR(1) items:
name -> name DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name DOT ident . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 183
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production name -> name DOT ident
-- On VERTICALBAR reduce production name -> name DOT ident
-- On STAR reduce production name -> name DOT ident
-- On SLASH reduce production name -> name DOT ident
-- On SHIFT reduce production name -> name DOT ident
-- On SEMICOLON reduce production name -> name DOT ident
-- On RIGHTPAR reduce production name -> name DOT ident
-- On RIGHTBRACKET reduce production name -> name DOT ident
-- On RIGHTBRACE reduce production name -> name DOT ident
-- On QUESTIONMARK reduce production name -> name DOT ident
-- On PLUSPLUS reduce production name -> name DOT ident
-- On PLUS reduce production name -> name DOT ident
-- On PERCENT reduce production name -> name DOT ident
-- On MINUSMINUS reduce production name -> name DOT ident
-- On MINUS reduce production name -> name DOT ident
-- On LEFTBRACKET reduce production name -> name DOT ident
-- On INSTANCEOF reduce production name -> name DOT ident
-- On ID reduce production name -> name DOT ident
-- On EQOP reduce production name -> name DOT ident
-- On EQ reduce production name -> name DOT ident
-- On DOT reduce production name -> name DOT ident
-- On COMP reduce production name -> name DOT ident
-- On COMMA reduce production name -> name DOT ident
-- On COLON reduce production name -> name DOT ident
-- On CARET reduce production name -> name DOT ident
-- On ASSIGNOP reduce production name -> name DOT ident
-- On AMPERSANDAMPERSAND reduce production name -> name DOT ident
-- On AMPERSAND reduce production name -> name DOT ident

State 183:
## Known stack suffix:
## name DOT ident LEFTPAR
## LR(1) items:
primary_no_new_array -> name DOT ident LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr_comma_list shift to state 173
-- On expr shift to state 174
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On argument_list shift to state 184
## Reductions:
-- On RIGHTPAR reduce production argument_list ->

State 184:
## Known stack suffix:
## name DOT ident LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> name DOT ident LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## name DOT ident LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> name DOT ident LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> name DOT ident LEFTPAR argument_list RIGHTPAR

State 186:
## Known stack suffix:
## name assign_op
## LR(1) items:
expr_no_name -> name assign_op . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 187
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 187:
## Known stack suffix:
## name assign_op expr
## LR(1) items:
expr_no_name -> name assign_op expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On SEMICOLON reduce production expr_no_name -> name assign_op expr
-- On RIGHTPAR reduce production expr_no_name -> name assign_op expr
-- On RIGHTBRACKET reduce production expr_no_name -> name assign_op expr
-- On RIGHTBRACE reduce production expr_no_name -> name assign_op expr
-- On COMMA reduce production expr_no_name -> name assign_op expr
-- On COLON reduce production expr_no_name -> name assign_op expr

State 188:
## Known stack suffix:
## primary_expr DOT ident LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> primary_expr DOT ident LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## primary_expr DOT ident LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> primary_expr DOT ident LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> primary_expr DOT ident LEFTPAR argument_list RIGHTPAR

State 190:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET expr
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET expr . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTBRACKET shift to state 191
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 191:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET expr RIGHTBRACKET
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET expr RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_access -> primary_no_new_array LEFTBRACKET expr RIGHTBRACKET

State 192:
## Known stack suffix:
## BANG expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> BANG expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> BANG expr
-- On VERTICALBAR reduce production expr_no_name -> BANG expr
-- On STAR reduce production expr_no_name -> BANG expr
-- On SLASH reduce production expr_no_name -> BANG expr
-- On SHIFT reduce production expr_no_name -> BANG expr
-- On SEMICOLON reduce production expr_no_name -> BANG expr
-- On RIGHTPAR reduce production expr_no_name -> BANG expr
-- On RIGHTBRACKET reduce production expr_no_name -> BANG expr
-- On RIGHTBRACE reduce production expr_no_name -> BANG expr
-- On QUESTIONMARK reduce production expr_no_name -> BANG expr
-- On PLUS reduce production expr_no_name -> BANG expr
-- On PERCENT reduce production expr_no_name -> BANG expr
-- On MINUS reduce production expr_no_name -> BANG expr
-- On INSTANCEOF reduce production expr_no_name -> BANG expr
-- On EQOP reduce production expr_no_name -> BANG expr
-- On COMP reduce production expr_no_name -> BANG expr
-- On COMMA reduce production expr_no_name -> BANG expr
-- On COLON reduce production expr_no_name -> BANG expr
-- On CARET reduce production expr_no_name -> BANG expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> BANG expr
-- On AMPERSAND reduce production expr_no_name -> BANG expr

State 193:
## Known stack suffix:
## LEFTPAR name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
array_type_expr -> name . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> name . assign_op expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
non_basic_cast -> LEFTPAR name . RIGHTPAR castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR name . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 194
-- On LEFTBRACKET shift to state 209
-- On EQ shift to state 130
-- On DOT shift to state 181
-- On ASSIGNOP shift to state 131
-- On assign_op shift to state 186
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr -> name
-- On VERTICALBAR reduce production expr -> name
-- On STAR reduce production expr -> name
-- On SLASH reduce production expr -> name
-- On SHIFT reduce production expr -> name
-- On QUESTIONMARK reduce production expr -> name
-- On PLUSPLUS reduce production expr -> name
-- On PLUS reduce production expr -> name
-- On PERCENT reduce production expr -> name
-- On MINUSMINUS reduce production expr -> name
-- On MINUS reduce production expr -> name
-- On INSTANCEOF reduce production expr -> name
-- On EQOP reduce production expr -> name
-- On COMP reduce production expr -> name
-- On CARET reduce production expr -> name
-- On AMPERSANDAMPERSAND reduce production expr -> name
-- On AMPERSAND reduce production expr -> name

State 194:
## Known stack suffix:
## LEFTPAR name RIGHTPAR
## LR(1) items:
non_basic_cast -> LEFTPAR name RIGHTPAR . castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR name RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On LEFTPAR shift to state 195
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 202
-- On non_basic_cast shift to state 203
-- On name shift to state 204
-- On ident shift to state 127
-- On field_access shift to state 205
-- On castable_expr shift to state 208
-- On array_creation_expression shift to state 143
-- On array_access shift to state 207
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On VERTICALBAR reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On STAR reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On SLASH reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On SHIFT reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On SEMICOLON reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On RIGHTPAR reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On RIGHTBRACKET reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On RIGHTBRACE reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On QUESTIONMARK reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On PLUSPLUS reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On PLUS reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On PERCENT reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On MINUSMINUS reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On MINUS reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On LEFTBRACKET reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On INSTANCEOF reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On EQOP reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On DOT reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On COMP reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On COMMA reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On COLON reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On CARET reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On AMPERSANDAMPERSAND reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR
-- On AMPERSAND reduce production primary_no_new_array -> LEFTPAR name RIGHTPAR

State 195:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
non_basic_cast -> LEFTPAR . array_type_expr RIGHTPAR castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
non_basic_cast -> LEFTPAR . name RIGHTPAR castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . expr_no_name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 193
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 196
-- On expr shift to state 198
-- On base_type shift to state 199
-- On array_type_expr shift to state 200
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 196:
## Known stack suffix:
## LEFTPAR expr_no_name
## LR(1) items:
expr -> expr_no_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR expr_no_name . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 197
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr -> expr_no_name
-- On VERTICALBAR reduce production expr -> expr_no_name
-- On STAR reduce production expr -> expr_no_name
-- On SLASH reduce production expr -> expr_no_name
-- On SHIFT reduce production expr -> expr_no_name
-- On QUESTIONMARK reduce production expr -> expr_no_name
-- On PLUSPLUS reduce production expr -> expr_no_name
-- On PLUS reduce production expr -> expr_no_name
-- On PERCENT reduce production expr -> expr_no_name
-- On MINUSMINUS reduce production expr -> expr_no_name
-- On MINUS reduce production expr -> expr_no_name
-- On INSTANCEOF reduce production expr -> expr_no_name
-- On EQOP reduce production expr -> expr_no_name
-- On COMP reduce production expr -> expr_no_name
-- On CARET reduce production expr -> expr_no_name
-- On AMPERSANDAMPERSAND reduce production expr -> expr_no_name
-- On AMPERSAND reduce production expr -> expr_no_name

State 197:
## Known stack suffix:
## LEFTPAR expr_no_name RIGHTPAR
## LR(1) items:
primary_no_new_array -> LEFTPAR expr_no_name RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> LEFTPAR expr_no_name RIGHTPAR

State 198:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 199:
## Known stack suffix:
## base_type
## LR(1) items:
array_type_expr -> base_type . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
## Transitions:
-- On LEFTBRACKET shift to state 84
## Reductions:

State 200:
## Known stack suffix:
## LEFTPAR array_type_expr
## LR(1) items:
array_type_expr -> array_type_expr . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
non_basic_cast -> LEFTPAR array_type_expr . RIGHTPAR castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 201
-- On LEFTBRACKET shift to state 87
## Reductions:

State 201:
## Known stack suffix:
## LEFTPAR array_type_expr RIGHTPAR
## LR(1) items:
non_basic_cast -> LEFTPAR array_type_expr RIGHTPAR . castable_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On LEFTPAR shift to state 195
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 202
-- On non_basic_cast shift to state 203
-- On name shift to state 204
-- On ident shift to state 127
-- On field_access shift to state 205
-- On castable_expr shift to state 206
-- On array_creation_expression shift to state 143
-- On array_access shift to state 207
## Reductions:

State 202:
## Known stack suffix:
## primary_expr
## LR(1) items:
castable_expr -> primary_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
field_access -> primary_expr . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On DOT shift to state 121
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production castable_expr -> primary_expr
-- On VERTICALBAR reduce production castable_expr -> primary_expr
-- On STAR reduce production castable_expr -> primary_expr
-- On SLASH reduce production castable_expr -> primary_expr
-- On SHIFT reduce production castable_expr -> primary_expr
-- On SEMICOLON reduce production castable_expr -> primary_expr
-- On RIGHTPAR reduce production castable_expr -> primary_expr
-- On RIGHTBRACKET reduce production castable_expr -> primary_expr
-- On RIGHTBRACE reduce production castable_expr -> primary_expr
-- On QUESTIONMARK reduce production castable_expr -> primary_expr
-- On PLUSPLUS reduce production castable_expr -> primary_expr
-- On PLUS reduce production castable_expr -> primary_expr
-- On PERCENT reduce production castable_expr -> primary_expr
-- On MINUSMINUS reduce production castable_expr -> primary_expr
-- On MINUS reduce production castable_expr -> primary_expr
-- On INSTANCEOF reduce production castable_expr -> primary_expr
-- On EQOP reduce production castable_expr -> primary_expr
-- On COMP reduce production castable_expr -> primary_expr
-- On COMMA reduce production castable_expr -> primary_expr
-- On COLON reduce production castable_expr -> primary_expr
-- On CARET reduce production castable_expr -> primary_expr
-- On AMPERSANDAMPERSAND reduce production castable_expr -> primary_expr
-- On AMPERSAND reduce production castable_expr -> primary_expr

State 203:
## Known stack suffix:
## non_basic_cast
## LR(1) items:
castable_expr -> non_basic_cast . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production castable_expr -> non_basic_cast

State 204:
## Known stack suffix:
## name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
castable_expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 126
-- On DOT shift to state 181
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production castable_expr -> name
-- On VERTICALBAR reduce production castable_expr -> name
-- On STAR reduce production castable_expr -> name
-- On SLASH reduce production castable_expr -> name
-- On SHIFT reduce production castable_expr -> name
-- On SEMICOLON reduce production castable_expr -> name
-- On RIGHTPAR reduce production castable_expr -> name
-- On RIGHTBRACKET reduce production castable_expr -> name
-- On RIGHTBRACE reduce production castable_expr -> name
-- On QUESTIONMARK reduce production castable_expr -> name
-- On PLUSPLUS reduce production castable_expr -> name
-- On PLUS reduce production castable_expr -> name
-- On PERCENT reduce production castable_expr -> name
-- On MINUSMINUS reduce production castable_expr -> name
-- On MINUS reduce production castable_expr -> name
-- On INSTANCEOF reduce production castable_expr -> name
-- On EQOP reduce production castable_expr -> name
-- On COMP reduce production castable_expr -> name
-- On COMMA reduce production castable_expr -> name
-- On COLON reduce production castable_expr -> name
-- On CARET reduce production castable_expr -> name
-- On AMPERSANDAMPERSAND reduce production castable_expr -> name
-- On AMPERSAND reduce production castable_expr -> name

State 205:
## Known stack suffix:
## field_access
## LR(1) items:
primary_no_new_array -> field_access . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> field_access

State 206:
## Known stack suffix:
## LEFTPAR array_type_expr RIGHTPAR castable_expr
## LR(1) items:
non_basic_cast -> LEFTPAR array_type_expr RIGHTPAR castable_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_basic_cast -> LEFTPAR array_type_expr RIGHTPAR castable_expr

State 207:
## Known stack suffix:
## array_access
## LR(1) items:
primary_no_new_array -> array_access . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> array_access

State 208:
## Known stack suffix:
## LEFTPAR name RIGHTPAR castable_expr
## LR(1) items:
non_basic_cast -> LEFTPAR name RIGHTPAR castable_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production non_basic_cast -> LEFTPAR name RIGHTPAR castable_expr

State 209:
## Known stack suffix:
## name LEFTBRACKET
## LR(1) items:
array_access -> name LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
array_type_expr -> name LEFTBRACKET . RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ID ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On RIGHTBRACKET shift to state 82
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 179
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 210:
## Known stack suffix:
## LEFTPAR base_type
## LR(1) items:
array_type_expr -> base_type . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
expr_no_name -> LEFTPAR base_type . RIGHTPAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 211
-- On LEFTBRACKET shift to state 84
## Reductions:

State 211:
## Known stack suffix:
## LEFTPAR base_type RIGHTPAR
## LR(1) items:
expr_no_name -> LEFTPAR base_type RIGHTPAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 212
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 212:
## Known stack suffix:
## LEFTPAR base_type RIGHTPAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> LEFTPAR base_type RIGHTPAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On VERTICALBAR reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On STAR reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On SLASH reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On SHIFT reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On SEMICOLON reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On RIGHTPAR reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On RIGHTBRACKET reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On RIGHTBRACE reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On QUESTIONMARK reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On PLUS reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On PERCENT reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On MINUS reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On INSTANCEOF reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On EQOP reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On COMP reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On COMMA reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On COLON reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On CARET reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr
-- On AMPERSAND reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr

State 213:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> MINUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> MINUS expr
-- On VERTICALBAR reduce production expr_no_name -> MINUS expr
-- On STAR reduce production expr_no_name -> MINUS expr
-- On SLASH reduce production expr_no_name -> MINUS expr
-- On SHIFT reduce production expr_no_name -> MINUS expr
-- On SEMICOLON reduce production expr_no_name -> MINUS expr
-- On RIGHTPAR reduce production expr_no_name -> MINUS expr
-- On RIGHTBRACKET reduce production expr_no_name -> MINUS expr
-- On RIGHTBRACE reduce production expr_no_name -> MINUS expr
-- On QUESTIONMARK reduce production expr_no_name -> MINUS expr
-- On PLUS reduce production expr_no_name -> MINUS expr
-- On PERCENT reduce production expr_no_name -> MINUS expr
-- On MINUS reduce production expr_no_name -> MINUS expr
-- On INSTANCEOF reduce production expr_no_name -> MINUS expr
-- On EQOP reduce production expr_no_name -> MINUS expr
-- On COMP reduce production expr_no_name -> MINUS expr
-- On COMMA reduce production expr_no_name -> MINUS expr
-- On COLON reduce production expr_no_name -> MINUS expr
-- On CARET reduce production expr_no_name -> MINUS expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> MINUS expr
-- On AMPERSAND reduce production expr_no_name -> MINUS expr

State 214:
## Known stack suffix:
## MINUSMINUS expr
## LR(1) items:
expr_no_name -> MINUSMINUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> MINUSMINUS expr
-- On VERTICALBAR reduce production expr_no_name -> MINUSMINUS expr
-- On STAR reduce production expr_no_name -> MINUSMINUS expr
-- On SLASH reduce production expr_no_name -> MINUSMINUS expr
-- On SHIFT reduce production expr_no_name -> MINUSMINUS expr
-- On SEMICOLON reduce production expr_no_name -> MINUSMINUS expr
-- On RIGHTPAR reduce production expr_no_name -> MINUSMINUS expr
-- On RIGHTBRACKET reduce production expr_no_name -> MINUSMINUS expr
-- On RIGHTBRACE reduce production expr_no_name -> MINUSMINUS expr
-- On QUESTIONMARK reduce production expr_no_name -> MINUSMINUS expr
-- On PLUS reduce production expr_no_name -> MINUSMINUS expr
-- On PERCENT reduce production expr_no_name -> MINUSMINUS expr
-- On MINUS reduce production expr_no_name -> MINUSMINUS expr
-- On INSTANCEOF reduce production expr_no_name -> MINUSMINUS expr
-- On EQOP reduce production expr_no_name -> MINUSMINUS expr
-- On COMP reduce production expr_no_name -> MINUSMINUS expr
-- On COMMA reduce production expr_no_name -> MINUSMINUS expr
-- On COLON reduce production expr_no_name -> MINUSMINUS expr
-- On CARET reduce production expr_no_name -> MINUSMINUS expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> MINUSMINUS expr
-- On AMPERSAND reduce production expr_no_name -> MINUSMINUS expr

State 215:
## Known stack suffix:
## NEW name LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> NEW name LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## NEW name LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> NEW name LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_no_new_array -> NEW name LEFTPAR argument_list RIGHTPAR

State 217:
## Known stack suffix:
## LEFTBRACKET
## LR(1) items:
array_dims -> LEFTBRACKET . expr RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET . expr RIGHTBRACKET array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 218
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 218:
## Known stack suffix:
## LEFTBRACKET expr
## LR(1) items:
array_dims -> LEFTBRACKET expr . RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET expr . RIGHTBRACKET array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTBRACKET shift to state 219
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 219:
## Known stack suffix:
## LEFTBRACKET expr RIGHTBRACKET
## LR(1) items:
array_dims -> LEFTBRACKET expr RIGHTBRACKET . implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET expr RIGHTBRACKET . array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 220
-- On implicit_dims shift to state 224
-- On array_dims shift to state 225
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production implicit_dims ->
-- On VERTICALBAR reduce production implicit_dims ->
-- On STAR reduce production implicit_dims ->
-- On SLASH reduce production implicit_dims ->
-- On SHIFT reduce production implicit_dims ->
-- On SEMICOLON reduce production implicit_dims ->
-- On RIGHTPAR reduce production implicit_dims ->
-- On RIGHTBRACKET reduce production implicit_dims ->
-- On RIGHTBRACE reduce production implicit_dims ->
-- On QUESTIONMARK reduce production implicit_dims ->
-- On PLUSPLUS reduce production implicit_dims ->
-- On PLUS reduce production implicit_dims ->
-- On PERCENT reduce production implicit_dims ->
-- On MINUSMINUS reduce production implicit_dims ->
-- On MINUS reduce production implicit_dims ->
-- On INSTANCEOF reduce production implicit_dims ->
-- On EQOP reduce production implicit_dims ->
-- On DOT reduce production implicit_dims ->
-- On COMP reduce production implicit_dims ->
-- On COMMA reduce production implicit_dims ->
-- On COLON reduce production implicit_dims ->
-- On CARET reduce production implicit_dims ->
-- On AMPERSANDAMPERSAND reduce production implicit_dims ->
-- On AMPERSAND reduce production implicit_dims ->

State 220:
## Known stack suffix:
## LEFTBRACKET
## LR(1) items:
array_dims -> LEFTBRACKET . expr RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET . expr RIGHTBRACKET array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
implicit_dims -> LEFTBRACKET . RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On RIGHTBRACKET shift to state 221
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 218
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 221:
## Known stack suffix:
## LEFTBRACKET RIGHTBRACKET
## LR(1) items:
implicit_dims -> LEFTBRACKET RIGHTBRACKET . implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 222
-- On implicit_dims shift to state 223
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production implicit_dims ->
-- On VERTICALBAR reduce production implicit_dims ->
-- On STAR reduce production implicit_dims ->
-- On SLASH reduce production implicit_dims ->
-- On SHIFT reduce production implicit_dims ->
-- On SEMICOLON reduce production implicit_dims ->
-- On RIGHTPAR reduce production implicit_dims ->
-- On RIGHTBRACKET reduce production implicit_dims ->
-- On RIGHTBRACE reduce production implicit_dims ->
-- On QUESTIONMARK reduce production implicit_dims ->
-- On PLUSPLUS reduce production implicit_dims ->
-- On PLUS reduce production implicit_dims ->
-- On PERCENT reduce production implicit_dims ->
-- On MINUSMINUS reduce production implicit_dims ->
-- On MINUS reduce production implicit_dims ->
-- On INSTANCEOF reduce production implicit_dims ->
-- On EQOP reduce production implicit_dims ->
-- On DOT reduce production implicit_dims ->
-- On COMP reduce production implicit_dims ->
-- On COMMA reduce production implicit_dims ->
-- On COLON reduce production implicit_dims ->
-- On CARET reduce production implicit_dims ->
-- On AMPERSANDAMPERSAND reduce production implicit_dims ->
-- On AMPERSAND reduce production implicit_dims ->

State 222:
## Known stack suffix:
## LEFTBRACKET
## LR(1) items:
implicit_dims -> LEFTBRACKET . RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 221
## Reductions:

State 223:
## Known stack suffix:
## LEFTBRACKET RIGHTBRACKET implicit_dims
## LR(1) items:
implicit_dims -> LEFTBRACKET RIGHTBRACKET implicit_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production implicit_dims -> LEFTBRACKET RIGHTBRACKET implicit_dims

State 224:
## Known stack suffix:
## LEFTBRACKET expr RIGHTBRACKET implicit_dims
## LR(1) items:
array_dims -> LEFTBRACKET expr RIGHTBRACKET implicit_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_dims -> LEFTBRACKET expr RIGHTBRACKET implicit_dims

State 225:
## Known stack suffix:
## LEFTBRACKET expr RIGHTBRACKET array_dims
## LR(1) items:
array_dims -> LEFTBRACKET expr RIGHTBRACKET array_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_dims -> LEFTBRACKET expr RIGHTBRACKET array_dims

State 226:
## Known stack suffix:
## NEW name array_dims
## LR(1) items:
array_creation_expression -> NEW name array_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_creation_expression -> NEW name array_dims

State 227:
## Known stack suffix:
## NEW base_type
## LR(1) items:
array_creation_expression -> NEW base_type . array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 217
-- On array_dims shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## NEW base_type array_dims
## LR(1) items:
array_creation_expression -> NEW base_type array_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_creation_expression -> NEW base_type array_dims

State 229:
## Known stack suffix:
## PLUS expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> PLUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> PLUS expr
-- On VERTICALBAR reduce production expr_no_name -> PLUS expr
-- On STAR reduce production expr_no_name -> PLUS expr
-- On SLASH reduce production expr_no_name -> PLUS expr
-- On SHIFT reduce production expr_no_name -> PLUS expr
-- On SEMICOLON reduce production expr_no_name -> PLUS expr
-- On RIGHTPAR reduce production expr_no_name -> PLUS expr
-- On RIGHTBRACKET reduce production expr_no_name -> PLUS expr
-- On RIGHTBRACE reduce production expr_no_name -> PLUS expr
-- On QUESTIONMARK reduce production expr_no_name -> PLUS expr
-- On PLUS reduce production expr_no_name -> PLUS expr
-- On PERCENT reduce production expr_no_name -> PLUS expr
-- On MINUS reduce production expr_no_name -> PLUS expr
-- On INSTANCEOF reduce production expr_no_name -> PLUS expr
-- On EQOP reduce production expr_no_name -> PLUS expr
-- On COMP reduce production expr_no_name -> PLUS expr
-- On COMMA reduce production expr_no_name -> PLUS expr
-- On COLON reduce production expr_no_name -> PLUS expr
-- On CARET reduce production expr_no_name -> PLUS expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> PLUS expr
-- On AMPERSAND reduce production expr_no_name -> PLUS expr

State 230:
## Known stack suffix:
## PLUSPLUS expr
## LR(1) items:
expr_no_name -> PLUSPLUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> PLUSPLUS expr
-- On VERTICALBAR reduce production expr_no_name -> PLUSPLUS expr
-- On STAR reduce production expr_no_name -> PLUSPLUS expr
-- On SLASH reduce production expr_no_name -> PLUSPLUS expr
-- On SHIFT reduce production expr_no_name -> PLUSPLUS expr
-- On SEMICOLON reduce production expr_no_name -> PLUSPLUS expr
-- On RIGHTPAR reduce production expr_no_name -> PLUSPLUS expr
-- On RIGHTBRACKET reduce production expr_no_name -> PLUSPLUS expr
-- On RIGHTBRACE reduce production expr_no_name -> PLUSPLUS expr
-- On QUESTIONMARK reduce production expr_no_name -> PLUSPLUS expr
-- On PLUS reduce production expr_no_name -> PLUSPLUS expr
-- On PERCENT reduce production expr_no_name -> PLUSPLUS expr
-- On MINUS reduce production expr_no_name -> PLUSPLUS expr
-- On INSTANCEOF reduce production expr_no_name -> PLUSPLUS expr
-- On EQOP reduce production expr_no_name -> PLUSPLUS expr
-- On COMP reduce production expr_no_name -> PLUSPLUS expr
-- On COMMA reduce production expr_no_name -> PLUSPLUS expr
-- On COLON reduce production expr_no_name -> PLUSPLUS expr
-- On CARET reduce production expr_no_name -> PLUSPLUS expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> PLUSPLUS expr
-- On AMPERSAND reduce production expr_no_name -> PLUSPLUS expr

State 231:
## Known stack suffix:
## TILDA expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> TILDA expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On PLUSPLUS shift to state 141
-- On MINUSMINUS shift to state 142
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr_no_name -> TILDA expr
-- On VERTICALBAR reduce production expr_no_name -> TILDA expr
-- On STAR reduce production expr_no_name -> TILDA expr
-- On SLASH reduce production expr_no_name -> TILDA expr
-- On SHIFT reduce production expr_no_name -> TILDA expr
-- On SEMICOLON reduce production expr_no_name -> TILDA expr
-- On RIGHTPAR reduce production expr_no_name -> TILDA expr
-- On RIGHTBRACKET reduce production expr_no_name -> TILDA expr
-- On RIGHTBRACE reduce production expr_no_name -> TILDA expr
-- On QUESTIONMARK reduce production expr_no_name -> TILDA expr
-- On PLUS reduce production expr_no_name -> TILDA expr
-- On PERCENT reduce production expr_no_name -> TILDA expr
-- On MINUS reduce production expr_no_name -> TILDA expr
-- On INSTANCEOF reduce production expr_no_name -> TILDA expr
-- On EQOP reduce production expr_no_name -> TILDA expr
-- On COMP reduce production expr_no_name -> TILDA expr
-- On COMMA reduce production expr_no_name -> TILDA expr
-- On COLON reduce production expr_no_name -> TILDA expr
-- On CARET reduce production expr_no_name -> TILDA expr
-- On AMPERSANDAMPERSAND reduce production expr_no_name -> TILDA expr
-- On AMPERSAND reduce production expr_no_name -> TILDA expr

State 232:
## Known stack suffix:
## LEFTBRACE
## LR(1) items:
variable_initializer -> LEFTBRACE . variable_initializers RIGHTBRACE [ SEMICOLON RIGHTBRACE COMMA ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 232
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On variable_initializers shift to state 233
-- On variable_initializer shift to state 235
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 238
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:
-- On RIGHTBRACE reduce production variable_initializers ->

State 233:
## Known stack suffix:
## LEFTBRACE variable_initializers
## LR(1) items:
variable_initializer -> LEFTBRACE variable_initializers . RIGHTBRACE [ SEMICOLON RIGHTBRACE COMMA ]
## Transitions:
-- On RIGHTBRACE shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## LEFTBRACE variable_initializers RIGHTBRACE
## LR(1) items:
variable_initializer -> LEFTBRACE variable_initializers RIGHTBRACE . [ SEMICOLON RIGHTBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_initializer -> LEFTBRACE variable_initializers RIGHTBRACE

State 235:
## Known stack suffix:
## variable_initializer
## LR(1) items:
variable_initializers -> variable_initializer . [ RIGHTBRACE ]
variable_initializers -> variable_initializer . COMMA variable_initializers [ RIGHTBRACE ]
## Transitions:
-- On COMMA shift to state 236
## Reductions:
-- On RIGHTBRACE reduce production variable_initializers -> variable_initializer

State 236:
## Known stack suffix:
## variable_initializer COMMA
## LR(1) items:
variable_initializers -> variable_initializer COMMA . variable_initializers [ RIGHTBRACE ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 232
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On variable_initializers shift to state 237
-- On variable_initializer shift to state 235
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 238
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:
-- On RIGHTBRACE reduce production variable_initializers ->

State 237:
## Known stack suffix:
## variable_initializer COMMA variable_initializers
## LR(1) items:
variable_initializers -> variable_initializer COMMA variable_initializers . [ RIGHTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_initializers -> variable_initializer COMMA variable_initializers

State 238:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
variable_initializer -> expr . [ SEMICOLON RIGHTBRACE COMMA ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On SEMICOLON reduce production variable_initializer -> expr
-- On RIGHTBRACE reduce production variable_initializer -> expr
-- On COMMA reduce production variable_initializer -> expr

State 239:
## Known stack suffix:
## variable_declarator_id EQ variable_initializer
## LR(1) items:
variable_declarator -> variable_declarator_id EQ variable_initializer . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declarator -> variable_declarator_id EQ variable_initializer

State 240:
## Known stack suffix:
## variable_declarator
## LR(1) items:
variable_declarators -> variable_declarator . [ SEMICOLON ]
variable_declarators -> variable_declarator . COMMA variable_declarators [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 241
## Reductions:
-- On SEMICOLON reduce production variable_declarators -> variable_declarator

State 241:
## Known stack suffix:
## variable_declarator COMMA
## LR(1) items:
variable_declarators -> variable_declarator COMMA . variable_declarators [ SEMICOLON ]
## Transitions:
-- On ID shift to state 2
-- On variable_declarators shift to state 242
-- On variable_declarator_id shift to state 93
-- On variable_declarator shift to state 240
-- On ident shift to state 243
## Reductions:

State 242:
## Known stack suffix:
## variable_declarator COMMA variable_declarators
## LR(1) items:
variable_declarators -> variable_declarator COMMA variable_declarators . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declarators -> variable_declarator COMMA variable_declarators

State 243:
## Known stack suffix:
## ident
## LR(1) items:
variable_declarator_id -> ident . [ SEMICOLON LEFTBRACKET EQ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable_declarator_id -> ident

State 244:
## Known stack suffix:
## modifiers type_expr method_declarator
## LR(1) items:
method_declarator -> method_declarator . LEFTBRACKET RIGHTBRACKET [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
method_header -> modifiers type_expr method_declarator . throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On THROWS shift to state 55
-- On LEFTBRACKET shift to state 57
-- On throws_decl shift to state 245
## Reductions:
-- On SEMICOLON reduce production throws_decl ->
-- On LEFTBRACE reduce production throws_decl ->

State 245:
## Known stack suffix:
## modifiers type_expr method_declarator throws_decl
## LR(1) items:
method_header -> modifiers type_expr method_declarator throws_decl . [ SEMICOLON LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_header -> modifiers type_expr method_declarator throws_decl

State 246:
## Known stack suffix:
## ident
## LR(1) items:
method_declarator -> ident . method_parameters [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
variable_declarator_id -> ident . [ SEMICOLON LEFTBRACKET EQ COMMA ]
## Transitions:
-- On LEFTPAR shift to state 61
-- On method_parameters shift to state 89
## Reductions:
-- On SEMICOLON reduce production variable_declarator_id -> ident
-- On LEFTBRACKET reduce production variable_declarator_id -> ident
-- On EQ reduce production variable_declarator_id -> ident
-- On COMMA reduce production variable_declarator_id -> ident

State 247:
## Known stack suffix:
## modifier
## LR(1) items:
modifiers -> modifier . modifiers [ VOID SHORT LONG INTERFACE INT ID FLOAT DOUBLE CLASS CHAR BYTE BOOLEAN ]
## Transitions:
-- On TRANSIENT shift to state 23
-- On SYNCHRONIZED shift to state 24
-- On STATIC shift to state 25
-- On PUBLIC shift to state 26
-- On PROTECTED shift to state 27
-- On PRIVATE shift to state 28
-- On NATIVE shift to state 29
-- On JML_SPEC_PUBLIC shift to state 30
-- On JML_PURE shift to state 31
-- On FINAL shift to state 32
-- On ABSTRACT shift to state 33
-- On modifiers shift to state 248
-- On modifier shift to state 247
## Reductions:
-- On VOID reduce production modifiers ->
-- On SHORT reduce production modifiers ->
-- On LONG reduce production modifiers ->
-- On INTERFACE reduce production modifiers ->
-- On INT reduce production modifiers ->
-- On ID reduce production modifiers ->
-- On FLOAT reduce production modifiers ->
-- On DOUBLE reduce production modifiers ->
-- On CLASS reduce production modifiers ->
-- On CHAR reduce production modifiers ->
-- On BYTE reduce production modifiers ->
-- On BOOLEAN reduce production modifiers ->

State 248:
## Known stack suffix:
## modifier modifiers
## LR(1) items:
modifiers -> modifier modifiers . [ VOID SHORT LONG INTERFACE INT ID FLOAT DOUBLE CLASS CHAR BYTE BOOLEAN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifiers -> modifier modifiers

State 249:
## Known stack suffix:
## method_specification
## LR(1) items:
method_header -> method_specification . modifiers type_expr method_declarator throws_decl [ SEMICOLON ]
method_header -> method_specification . modifiers VOID method_declarator throws_decl [ SEMICOLON ]
## Transitions:
-- On TRANSIENT shift to state 23
-- On SYNCHRONIZED shift to state 24
-- On STATIC shift to state 25
-- On PUBLIC shift to state 26
-- On PROTECTED shift to state 27
-- On PRIVATE shift to state 28
-- On NATIVE shift to state 29
-- On JML_SPEC_PUBLIC shift to state 30
-- On JML_PURE shift to state 31
-- On FINAL shift to state 32
-- On ABSTRACT shift to state 33
-- On modifiers shift to state 250
-- On modifier shift to state 247
## Reductions:
-- On VOID reduce production modifiers ->
-- On SHORT reduce production modifiers ->
-- On LONG reduce production modifiers ->
-- On INT reduce production modifiers ->
-- On ID reduce production modifiers ->
-- On FLOAT reduce production modifiers ->
-- On DOUBLE reduce production modifiers ->
-- On CHAR reduce production modifiers ->
-- On BYTE reduce production modifiers ->
-- On BOOLEAN reduce production modifiers ->

State 250:
## Known stack suffix:
## method_specification modifiers
## LR(1) items:
method_header -> method_specification modifiers . type_expr method_declarator throws_decl [ SEMICOLON ]
method_header -> method_specification modifiers . VOID method_declarator throws_decl [ SEMICOLON ]
## Transitions:
-- On VOID shift to state 251
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 254
-- On name shift to state 80
-- On ident shift to state 7
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 251:
## Known stack suffix:
## method_specification modifiers VOID
## LR(1) items:
method_header -> method_specification modifiers VOID . method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On ID shift to state 2
-- On method_declarator shift to state 252
-- On ident shift to state 60
## Reductions:

State 252:
## Known stack suffix:
## method_specification modifiers VOID method_declarator
## LR(1) items:
method_declarator -> method_declarator . LEFTBRACKET RIGHTBRACKET [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
method_header -> method_specification modifiers VOID method_declarator . throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On THROWS shift to state 55
-- On LEFTBRACKET shift to state 57
-- On throws_decl shift to state 253
## Reductions:
-- On SEMICOLON reduce production throws_decl ->
-- On LEFTBRACE reduce production throws_decl ->

State 253:
## Known stack suffix:
## method_specification modifiers VOID method_declarator throws_decl
## LR(1) items:
method_header -> method_specification modifiers VOID method_declarator throws_decl . [ SEMICOLON LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_header -> method_specification modifiers VOID method_declarator throws_decl

State 254:
## Known stack suffix:
## method_specification modifiers type_expr
## LR(1) items:
method_header -> method_specification modifiers type_expr . method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On ID shift to state 2
-- On method_declarator shift to state 255
-- On ident shift to state 60
## Reductions:

State 255:
## Known stack suffix:
## method_specification modifiers type_expr method_declarator
## LR(1) items:
method_declarator -> method_declarator . LEFTBRACKET RIGHTBRACKET [ THROWS SEMICOLON LEFTBRACKET LEFTBRACE ]
method_header -> method_specification modifiers type_expr method_declarator . throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On THROWS shift to state 55
-- On LEFTBRACKET shift to state 57
-- On throws_decl shift to state 256
## Reductions:
-- On SEMICOLON reduce production throws_decl ->
-- On LEFTBRACE reduce production throws_decl ->

State 256:
## Known stack suffix:
## method_specification modifiers type_expr method_declarator throws_decl
## LR(1) items:
method_header -> method_specification modifiers type_expr method_declarator throws_decl . [ SEMICOLON LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_header -> method_specification modifiers type_expr method_declarator throws_decl

State 257:
## Known stack suffix:
## doc_comment method_header
## LR(1) items:
interface_member_declaration -> doc_comment method_header . SEMICOLON [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## doc_comment method_header SEMICOLON
## LR(1) items:
interface_member_declaration -> doc_comment method_header SEMICOLON . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production interface_member_declaration -> doc_comment method_header SEMICOLON

State 259:
## Known stack suffix:
## modifiers CLASS
## LR(1) items:
class_declaration -> modifiers CLASS . ident extends_decl implements_decl LEFTBRACE field_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On ID shift to state 2
-- On ident shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## modifiers CLASS ident
## LR(1) items:
class_declaration -> modifiers CLASS ident . extends_decl implements_decl LEFTBRACE field_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On EXTENDS shift to state 261
-- On extends_decl shift to state 263
## Reductions:
-- On LEFTBRACE reduce production extends_decl ->
-- On IMPLEMENTS reduce production extends_decl ->

State 261:
## Known stack suffix:
## EXTENDS
## LR(1) items:
extends_decl -> EXTENDS . name [ LEFTBRACE IMPLEMENTS ]
## Transitions:
-- On ID shift to state 2
-- On name shift to state 262
-- On ident shift to state 7
## Reductions:

State 262:
## Known stack suffix:
## EXTENDS name
## LR(1) items:
extends_decl -> EXTENDS name . [ LEFTBRACE IMPLEMENTS ]
name -> name . DOT ident [ LEFTBRACE IMPLEMENTS DOT ]
## Transitions:
-- On DOT shift to state 5
## Reductions:
-- On LEFTBRACE reduce production extends_decl -> EXTENDS name
-- On IMPLEMENTS reduce production extends_decl -> EXTENDS name

State 263:
## Known stack suffix:
## modifiers CLASS ident extends_decl
## LR(1) items:
class_declaration -> modifiers CLASS ident extends_decl . implements_decl LEFTBRACE field_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On IMPLEMENTS shift to state 264
-- On implements_decl shift to state 266
## Reductions:
-- On LEFTBRACE reduce production implements_decl ->

State 264:
## Known stack suffix:
## IMPLEMENTS
## LR(1) items:
implements_decl -> IMPLEMENTS . name_comma_list [ LEFTBRACE ]
## Transitions:
-- On ID shift to state 2
-- On name_comma_list shift to state 265
-- On name shift to state 39
-- On ident shift to state 7
## Reductions:

State 265:
## Known stack suffix:
## IMPLEMENTS name_comma_list
## LR(1) items:
implements_decl -> IMPLEMENTS name_comma_list . [ LEFTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production implements_decl -> IMPLEMENTS name_comma_list

State 266:
## Known stack suffix:
## modifiers CLASS ident extends_decl implements_decl
## LR(1) items:
class_declaration -> modifiers CLASS ident extends_decl implements_decl . LEFTBRACE field_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On LEFTBRACE shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## modifiers CLASS ident extends_decl implements_decl LEFTBRACE
## LR(1) items:
class_declaration -> modifiers CLASS ident extends_decl implements_decl LEFTBRACE . field_declarations RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On DOC_COMMENT shift to state 18
-- On field_declarations shift to state 268
-- On field_declaration shift to state 270
-- On doc_comment shift to state 272
## Reductions:
-- On VOID reduce production doc_comment ->
-- On TRANSIENT reduce production doc_comment ->
-- On SYNCHRONIZED reduce production doc_comment ->
-- On STATIC reduce production doc_comment ->
-- On SHORT reduce production doc_comment ->
-- On RIGHTBRACE reduce production field_declarations ->
-- On PUBLIC reduce production doc_comment ->
-- On PROTECTED reduce production doc_comment ->
-- On PRIVATE reduce production doc_comment ->
-- On NATIVE reduce production doc_comment ->
-- On LONG reduce production doc_comment ->
-- On JML_SPEC_PUBLIC reduce production doc_comment ->
-- On JML_PURE reduce production doc_comment ->
-- On JML_METHOD_SPECIFICATION reduce production doc_comment ->
-- On JML_DECLARATIONS reduce production doc_comment ->
-- On INT reduce production doc_comment ->
-- On ID reduce production doc_comment ->
-- On FLOAT reduce production doc_comment ->
-- On FINAL reduce production doc_comment ->
-- On DOUBLE reduce production doc_comment ->
-- On CHAR reduce production doc_comment ->
-- On BYTE reduce production doc_comment ->
-- On BOOLEAN reduce production doc_comment ->
-- On ABSTRACT reduce production doc_comment ->

State 268:
## Known stack suffix:
## modifiers CLASS ident extends_decl implements_decl LEFTBRACE field_declarations
## LR(1) items:
class_declaration -> modifiers CLASS ident extends_decl implements_decl LEFTBRACE field_declarations . RIGHTBRACE [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
-- On RIGHTBRACE shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## modifiers CLASS ident extends_decl implements_decl LEFTBRACE field_declarations RIGHTBRACE
## LR(1) items:
class_declaration -> modifiers CLASS ident extends_decl implements_decl LEFTBRACE field_declarations RIGHTBRACE . [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_declaration -> modifiers CLASS ident extends_decl implements_decl LEFTBRACE field_declarations RIGHTBRACE

State 270:
## Known stack suffix:
## field_declaration
## LR(1) items:
field_declarations -> field_declaration . field_declarations [ RIGHTBRACE ]
## Transitions:
-- On DOC_COMMENT shift to state 18
-- On field_declarations shift to state 271
-- On field_declaration shift to state 270
-- On doc_comment shift to state 272
## Reductions:
-- On VOID reduce production doc_comment ->
-- On TRANSIENT reduce production doc_comment ->
-- On SYNCHRONIZED reduce production doc_comment ->
-- On STATIC reduce production doc_comment ->
-- On SHORT reduce production doc_comment ->
-- On RIGHTBRACE reduce production field_declarations ->
-- On PUBLIC reduce production doc_comment ->
-- On PROTECTED reduce production doc_comment ->
-- On PRIVATE reduce production doc_comment ->
-- On NATIVE reduce production doc_comment ->
-- On LONG reduce production doc_comment ->
-- On JML_SPEC_PUBLIC reduce production doc_comment ->
-- On JML_PURE reduce production doc_comment ->
-- On JML_METHOD_SPECIFICATION reduce production doc_comment ->
-- On JML_DECLARATIONS reduce production doc_comment ->
-- On INT reduce production doc_comment ->
-- On ID reduce production doc_comment ->
-- On FLOAT reduce production doc_comment ->
-- On FINAL reduce production doc_comment ->
-- On DOUBLE reduce production doc_comment ->
-- On CHAR reduce production doc_comment ->
-- On BYTE reduce production doc_comment ->
-- On BOOLEAN reduce production doc_comment ->
-- On ABSTRACT reduce production doc_comment ->

State 271:
## Known stack suffix:
## field_declaration field_declarations
## LR(1) items:
field_declarations -> field_declaration field_declarations . [ RIGHTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_declarations -> field_declaration field_declarations

State 272:
## Known stack suffix:
## doc_comment
## LR(1) items:
field_declaration -> doc_comment . method_declaration [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
field_declaration -> doc_comment . constructor_declaration [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
field_declaration -> doc_comment . variable_declaration [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
field_declaration -> doc_comment . static_initializer [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
field_declaration -> doc_comment . jml_declaration [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On TRANSIENT shift to state 23
-- On SYNCHRONIZED shift to state 24
-- On STATIC shift to state 273
-- On PUBLIC shift to state 26
-- On PROTECTED shift to state 27
-- On PRIVATE shift to state 28
-- On NATIVE shift to state 29
-- On JML_SPEC_PUBLIC shift to state 30
-- On JML_PURE shift to state 31
-- On JML_METHOD_SPECIFICATION shift to state 49
-- On JML_DECLARATIONS shift to state 390
-- On FINAL shift to state 32
-- On ABSTRACT shift to state 33
-- On variable_declaration shift to state 391
-- On static_initializer shift to state 392
-- On modifiers shift to state 393
-- On modifier shift to state 247
-- On method_specification shift to state 415
-- On method_header shift to state 421
-- On method_declaration shift to state 425
-- On jml_declaration shift to state 426
-- On constructor_declaration shift to state 427
## Reductions:
-- On VOID reduce production modifiers ->
-- On SHORT reduce production modifiers ->
-- On LONG reduce production modifiers ->
-- On INT reduce production modifiers ->
-- On ID reduce production modifiers ->
-- On FLOAT reduce production modifiers ->
-- On DOUBLE reduce production modifiers ->
-- On CHAR reduce production modifiers ->
-- On BYTE reduce production modifiers ->
-- On BOOLEAN reduce production modifiers ->

State 273:
## Known stack suffix:
## STATIC
## LR(1) items:
modifier -> STATIC . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT ]
static_initializer -> STATIC . block [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On LEFTBRACE shift to state 274
-- On block shift to state 389
## Reductions:
-- On VOID reduce production modifier -> STATIC
-- On TRANSIENT reduce production modifier -> STATIC
-- On SYNCHRONIZED reduce production modifier -> STATIC
-- On STATIC reduce production modifier -> STATIC
-- On SHORT reduce production modifier -> STATIC
-- On PUBLIC reduce production modifier -> STATIC
-- On PROTECTED reduce production modifier -> STATIC
-- On PRIVATE reduce production modifier -> STATIC
-- On NATIVE reduce production modifier -> STATIC
-- On LONG reduce production modifier -> STATIC
-- On JML_SPEC_PUBLIC reduce production modifier -> STATIC
-- On JML_PURE reduce production modifier -> STATIC
-- On INT reduce production modifier -> STATIC
-- On ID reduce production modifier -> STATIC
-- On FLOAT reduce production modifier -> STATIC
-- On FINAL reduce production modifier -> STATIC
-- On DOUBLE reduce production modifier -> STATIC
-- On CHAR reduce production modifier -> STATIC
-- On BYTE reduce production modifier -> STATIC
-- On BOOLEAN reduce production modifier -> STATIC
-- On ABSTRACT reduce production modifier -> STATIC

State 274:
## Known stack suffix:
## LEFTBRACE
## LR(1) items:
block -> LEFTBRACE . statements RIGHTBRACE [ WHILE VOID TRY TRUE TRANSIENT TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING STATIC SHORT SEMICOLON RIGHTBRACE RETURN REAL PUBLIC PROTECTED PRIVATE PLUSPLUS PLUS NULL NEW NATIVE MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_DECLARATIONS JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FINAL FALSE ELSE DOUBLE DOC_COMMENT DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ABSTRACT ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statements shift to state 387
-- On statement shift to state 383
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On RIGHTBRACE reduce production statements ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 275:
## Known stack suffix:
## TRY
## LR(1) items:
other_statement -> TRY . block catch_clauses [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> TRY . block catch_clauses FINALLY block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> TRY . block FINALLY block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTBRACE shift to state 274
-- On block shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## TRY block
## LR(1) items:
other_statement -> TRY block . catch_clauses [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> TRY block . catch_clauses FINALLY block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> TRY block . FINALLY block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On FINALLY shift to state 277
-- On CATCH shift to state 279
-- On catch_clauses shift to state 284
-- On catch_clause shift to state 287
## Reductions:

State 277:
## Known stack suffix:
## TRY block FINALLY
## LR(1) items:
other_statement -> TRY block FINALLY . block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTBRACE shift to state 274
-- On block shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## TRY block FINALLY block
## LR(1) items:
other_statement -> TRY block FINALLY block . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> TRY block FINALLY block

State 279:
## Known stack suffix:
## CATCH
## LR(1) items:
catch_clause -> CATCH . LEFTPAR parameter RIGHTPAR block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTPAR shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## CATCH LEFTPAR
## LR(1) items:
catch_clause -> CATCH LEFTPAR . parameter RIGHTPAR block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 71
-- On parameter shift to state 281
-- On name shift to state 80
-- On ident shift to state 7
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 281:
## Known stack suffix:
## CATCH LEFTPAR parameter
## LR(1) items:
catch_clause -> CATCH LEFTPAR parameter . RIGHTPAR block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ]
parameter -> parameter . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
## Transitions:
-- On RIGHTPAR shift to state 282
-- On LEFTBRACKET shift to state 76
## Reductions:

State 282:
## Known stack suffix:
## CATCH LEFTPAR parameter RIGHTPAR
## LR(1) items:
catch_clause -> CATCH LEFTPAR parameter RIGHTPAR . block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTBRACE shift to state 274
-- On block shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## CATCH LEFTPAR parameter RIGHTPAR block
## LR(1) items:
catch_clause -> CATCH LEFTPAR parameter RIGHTPAR block . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch_clause -> CATCH LEFTPAR parameter RIGHTPAR block

State 284:
## Known stack suffix:
## TRY block catch_clauses
## LR(1) items:
other_statement -> TRY block catch_clauses . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> TRY block catch_clauses . FINALLY block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On FINALLY shift to state 285
## Reductions:
-- On WHILE reduce production other_statement -> TRY block catch_clauses
-- On TRY reduce production other_statement -> TRY block catch_clauses
-- On TRUE reduce production other_statement -> TRY block catch_clauses
-- On TILDA reduce production other_statement -> TRY block catch_clauses
-- On THROW reduce production other_statement -> TRY block catch_clauses
-- On THIS reduce production other_statement -> TRY block catch_clauses
-- On SYNCHRONIZED reduce production other_statement -> TRY block catch_clauses
-- On SWITCH reduce production other_statement -> TRY block catch_clauses
-- On SUPER reduce production other_statement -> TRY block catch_clauses
-- On STRING reduce production other_statement -> TRY block catch_clauses
-- On SHORT reduce production other_statement -> TRY block catch_clauses
-- On SEMICOLON reduce production other_statement -> TRY block catch_clauses
-- On RIGHTBRACE reduce production other_statement -> TRY block catch_clauses
-- On RETURN reduce production other_statement -> TRY block catch_clauses
-- On REAL reduce production other_statement -> TRY block catch_clauses
-- On PLUSPLUS reduce production other_statement -> TRY block catch_clauses
-- On PLUS reduce production other_statement -> TRY block catch_clauses
-- On NULL reduce production other_statement -> TRY block catch_clauses
-- On NEW reduce production other_statement -> TRY block catch_clauses
-- On MINUSMINUS reduce production other_statement -> TRY block catch_clauses
-- On MINUS reduce production other_statement -> TRY block catch_clauses
-- On LONG reduce production other_statement -> TRY block catch_clauses
-- On LEFTPAR reduce production other_statement -> TRY block catch_clauses
-- On LEFTBRACE reduce production other_statement -> TRY block catch_clauses
-- On JML_METHOD_SPECIFICATION reduce production other_statement -> TRY block catch_clauses
-- On JML_LOOP_ANNOTATION reduce production other_statement -> TRY block catch_clauses
-- On JML_ASSERTION reduce production other_statement -> TRY block catch_clauses
-- On INTEGER reduce production other_statement -> TRY block catch_clauses
-- On INT reduce production other_statement -> TRY block catch_clauses
-- On IF reduce production other_statement -> TRY block catch_clauses
-- On ID reduce production other_statement -> TRY block catch_clauses
-- On FOR reduce production other_statement -> TRY block catch_clauses
-- On FLOAT reduce production other_statement -> TRY block catch_clauses
-- On FALSE reduce production other_statement -> TRY block catch_clauses
-- On ELSE reduce production other_statement -> TRY block catch_clauses
-- On DOUBLE reduce production other_statement -> TRY block catch_clauses
-- On DO reduce production other_statement -> TRY block catch_clauses
-- On DEFAULT reduce production other_statement -> TRY block catch_clauses
-- On CONTINUE reduce production other_statement -> TRY block catch_clauses
-- On CHARACTER reduce production other_statement -> TRY block catch_clauses
-- On CHAR reduce production other_statement -> TRY block catch_clauses
-- On CASE reduce production other_statement -> TRY block catch_clauses
-- On BYTE reduce production other_statement -> TRY block catch_clauses
-- On BREAK reduce production other_statement -> TRY block catch_clauses
-- On BOOLEAN reduce production other_statement -> TRY block catch_clauses
-- On BANG reduce production other_statement -> TRY block catch_clauses

State 285:
## Known stack suffix:
## TRY block catch_clauses FINALLY
## LR(1) items:
other_statement -> TRY block catch_clauses FINALLY . block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTBRACE shift to state 274
-- On block shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## TRY block catch_clauses FINALLY block
## LR(1) items:
other_statement -> TRY block catch_clauses FINALLY block . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> TRY block catch_clauses FINALLY block

State 287:
## Known stack suffix:
## catch_clause
## LR(1) items:
catch_clauses -> catch_clause . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
catch_clauses -> catch_clause . catch_clauses [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On CATCH shift to state 279
-- On catch_clauses shift to state 288
-- On catch_clause shift to state 287
## Reductions:
-- On WHILE reduce production catch_clauses -> catch_clause
-- On TRY reduce production catch_clauses -> catch_clause
-- On TRUE reduce production catch_clauses -> catch_clause
-- On TILDA reduce production catch_clauses -> catch_clause
-- On THROW reduce production catch_clauses -> catch_clause
-- On THIS reduce production catch_clauses -> catch_clause
-- On SYNCHRONIZED reduce production catch_clauses -> catch_clause
-- On SWITCH reduce production catch_clauses -> catch_clause
-- On SUPER reduce production catch_clauses -> catch_clause
-- On STRING reduce production catch_clauses -> catch_clause
-- On SHORT reduce production catch_clauses -> catch_clause
-- On SEMICOLON reduce production catch_clauses -> catch_clause
-- On RIGHTBRACE reduce production catch_clauses -> catch_clause
-- On RETURN reduce production catch_clauses -> catch_clause
-- On REAL reduce production catch_clauses -> catch_clause
-- On PLUSPLUS reduce production catch_clauses -> catch_clause
-- On PLUS reduce production catch_clauses -> catch_clause
-- On NULL reduce production catch_clauses -> catch_clause
-- On NEW reduce production catch_clauses -> catch_clause
-- On MINUSMINUS reduce production catch_clauses -> catch_clause
-- On MINUS reduce production catch_clauses -> catch_clause
-- On LONG reduce production catch_clauses -> catch_clause
-- On LEFTPAR reduce production catch_clauses -> catch_clause
-- On LEFTBRACE reduce production catch_clauses -> catch_clause
-- On JML_METHOD_SPECIFICATION reduce production catch_clauses -> catch_clause
-- On JML_LOOP_ANNOTATION reduce production catch_clauses -> catch_clause
-- On JML_ASSERTION reduce production catch_clauses -> catch_clause
-- On INTEGER reduce production catch_clauses -> catch_clause
-- On INT reduce production catch_clauses -> catch_clause
-- On IF reduce production catch_clauses -> catch_clause
-- On ID reduce production catch_clauses -> catch_clause
-- On FOR reduce production catch_clauses -> catch_clause
-- On FLOAT reduce production catch_clauses -> catch_clause
-- On FINALLY reduce production catch_clauses -> catch_clause
-- On FALSE reduce production catch_clauses -> catch_clause
-- On ELSE reduce production catch_clauses -> catch_clause
-- On DOUBLE reduce production catch_clauses -> catch_clause
-- On DO reduce production catch_clauses -> catch_clause
-- On DEFAULT reduce production catch_clauses -> catch_clause
-- On CONTINUE reduce production catch_clauses -> catch_clause
-- On CHARACTER reduce production catch_clauses -> catch_clause
-- On CHAR reduce production catch_clauses -> catch_clause
-- On CASE reduce production catch_clauses -> catch_clause
-- On BYTE reduce production catch_clauses -> catch_clause
-- On BREAK reduce production catch_clauses -> catch_clause
-- On BOOLEAN reduce production catch_clauses -> catch_clause
-- On BANG reduce production catch_clauses -> catch_clause

State 288:
## Known stack suffix:
## catch_clause catch_clauses
## LR(1) items:
catch_clauses -> catch_clause catch_clauses . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch_clauses -> catch_clause catch_clauses

State 289:
## Known stack suffix:
## THROW
## LR(1) items:
other_statement -> THROW . expr SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 290
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 290:
## Known stack suffix:
## THROW expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
other_statement -> THROW expr . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On SEMICOLON shift to state 291
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 291:
## Known stack suffix:
## THROW expr SEMICOLON
## LR(1) items:
other_statement -> THROW expr SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> THROW expr SEMICOLON

State 292:
## Known stack suffix:
## SYNCHRONIZED
## LR(1) items:
other_statement -> SYNCHRONIZED . LEFTPAR expr RIGHTPAR block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTPAR shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## SYNCHRONIZED LEFTPAR
## LR(1) items:
other_statement -> SYNCHRONIZED LEFTPAR . expr RIGHTPAR block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 294
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 294:
## Known stack suffix:
## SYNCHRONIZED LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
other_statement -> SYNCHRONIZED LEFTPAR expr . RIGHTPAR block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTPAR shift to state 295
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 295:
## Known stack suffix:
## SYNCHRONIZED LEFTPAR expr RIGHTPAR
## LR(1) items:
other_statement -> SYNCHRONIZED LEFTPAR expr RIGHTPAR . block [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTBRACE shift to state 274
-- On block shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## SYNCHRONIZED LEFTPAR expr RIGHTPAR block
## LR(1) items:
other_statement -> SYNCHRONIZED LEFTPAR expr RIGHTPAR block . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> SYNCHRONIZED LEFTPAR expr RIGHTPAR block

State 297:
## Known stack suffix:
## SWITCH
## LR(1) items:
other_statement -> SWITCH . LEFTPAR expr RIGHTPAR LEFTBRACE switch_block RIGHTBRACE [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTPAR shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## SWITCH LEFTPAR
## LR(1) items:
other_statement -> SWITCH LEFTPAR . expr RIGHTPAR LEFTBRACE switch_block RIGHTBRACE [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 299
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 299:
## Known stack suffix:
## SWITCH LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
other_statement -> SWITCH LEFTPAR expr . RIGHTPAR LEFTBRACE switch_block RIGHTBRACE [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTPAR shift to state 300
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 300:
## Known stack suffix:
## SWITCH LEFTPAR expr RIGHTPAR
## LR(1) items:
other_statement -> SWITCH LEFTPAR expr RIGHTPAR . LEFTBRACE switch_block RIGHTBRACE [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTBRACE shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## SWITCH LEFTPAR expr RIGHTPAR LEFTBRACE
## LR(1) items:
other_statement -> SWITCH LEFTPAR expr RIGHTPAR LEFTBRACE . switch_block RIGHTBRACE [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On DEFAULT shift to state 302
-- On CASE shift to state 304
-- On switch_labels shift to state 307
-- On switch_label shift to state 380
-- On switch_block shift to state 385
## Reductions:
-- On RIGHTBRACE reduce production switch_block ->

State 302:
## Known stack suffix:
## DEFAULT
## LR(1) items:
switch_label -> DEFAULT . COLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On COLON shift to state 303
## Reductions:

State 303:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
switch_label -> DEFAULT COLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_label -> DEFAULT COLON

State 304:
## Known stack suffix:
## CASE
## LR(1) items:
switch_label -> CASE . expr COLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 305
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 305:
## Known stack suffix:
## CASE expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
switch_label -> CASE expr . COLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On COLON shift to state 306
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 306:
## Known stack suffix:
## CASE expr COLON
## LR(1) items:
switch_label -> CASE expr COLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_label -> CASE expr COLON

State 307:
## Known stack suffix:
## switch_labels
## LR(1) items:
switch_block -> switch_labels . [ RIGHTBRACE ]
switch_block -> switch_labels . statement statements switch_block [ RIGHTBRACE ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 378
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On RIGHTBRACE reduce production switch_block -> switch_labels
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 308:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
other_statement -> SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> SEMICOLON

State 309:
## Known stack suffix:
## RETURN
## LR(1) items:
other_statement -> RETURN . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> RETURN . expr SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SEMICOLON shift to state 310
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 311
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 310:
## Known stack suffix:
## RETURN SEMICOLON
## LR(1) items:
other_statement -> RETURN SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> RETURN SEMICOLON

State 311:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
other_statement -> RETURN expr . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On SEMICOLON shift to state 312
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 312:
## Known stack suffix:
## RETURN expr SEMICOLON
## LR(1) items:
other_statement -> RETURN expr SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> RETURN expr SEMICOLON

State 313:
## Known stack suffix:
## JML_METHOD_SPECIFICATION
## LR(1) items:
annotated_statement -> JML_METHOD_SPECIFICATION . other_statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 377
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 314:
## Known stack suffix:
## IF
## LR(1) items:
other_statement -> IF . LEFTPAR expr RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> IF . LEFTPAR expr RIGHTPAR statement ELSE statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTPAR shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## IF LEFTPAR
## LR(1) items:
other_statement -> IF LEFTPAR . expr RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> IF LEFTPAR . expr RIGHTPAR statement ELSE statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 316
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 316:
## Known stack suffix:
## IF LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
other_statement -> IF LEFTPAR expr . RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> IF LEFTPAR expr . RIGHTPAR statement ELSE statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTPAR shift to state 317
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 317:
## Known stack suffix:
## IF LEFTPAR expr RIGHTPAR
## LR(1) items:
other_statement -> IF LEFTPAR expr RIGHTPAR . statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> IF LEFTPAR expr RIGHTPAR . statement ELSE statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 330
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 318:
## Known stack suffix:
## JML_LOOP_ANNOTATION
## LR(1) items:
jml_loop_annot -> JML_LOOP_ANNOTATION . [ WHILE FOR DO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jml_loop_annot -> JML_LOOP_ANNOTATION

State 319:
## Known stack suffix:
## JML_ASSERTION
## LR(1) items:
statement -> JML_ASSERTION . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> JML_ASSERTION

State 320:
## Known stack suffix:
## CONTINUE
## LR(1) items:
other_statement -> CONTINUE . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> CONTINUE . ident SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 321
-- On ID shift to state 2
-- On ident shift to state 322
## Reductions:

State 321:
## Known stack suffix:
## CONTINUE SEMICOLON
## LR(1) items:
other_statement -> CONTINUE SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> CONTINUE SEMICOLON

State 322:
## Known stack suffix:
## CONTINUE ident
## LR(1) items:
other_statement -> CONTINUE ident . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 323
## Reductions:

State 323:
## Known stack suffix:
## CONTINUE ident SEMICOLON
## LR(1) items:
other_statement -> CONTINUE ident SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> CONTINUE ident SEMICOLON

State 324:
## Known stack suffix:
## BREAK
## LR(1) items:
other_statement -> BREAK . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> BREAK . ident SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 325
-- On ID shift to state 2
-- On ident shift to state 326
## Reductions:

State 325:
## Known stack suffix:
## BREAK SEMICOLON
## LR(1) items:
other_statement -> BREAK SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> BREAK SEMICOLON

State 326:
## Known stack suffix:
## BREAK ident
## LR(1) items:
other_statement -> BREAK ident . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## BREAK ident SEMICOLON
## LR(1) items:
other_statement -> BREAK ident SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> BREAK ident SEMICOLON

State 328:
## Known stack suffix:
## type_expr
## LR(1) items:
local_variable_declaration -> type_expr . variable_declarators [ SEMICOLON ]
## Transitions:
-- On ID shift to state 2
-- On variable_declarators shift to state 329
-- On variable_declarator_id shift to state 93
-- On variable_declarator shift to state 240
-- On ident shift to state 243
## Reductions:

State 329:
## Known stack suffix:
## type_expr variable_declarators
## LR(1) items:
local_variable_declaration -> type_expr variable_declarators . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_variable_declaration -> type_expr variable_declarators

State 330:
## Known stack suffix:
## IF LEFTPAR expr RIGHTPAR statement
## LR(1) items:
other_statement -> IF LEFTPAR expr RIGHTPAR statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
other_statement -> IF LEFTPAR expr RIGHTPAR statement . ELSE statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On ELSE shift to state 331
## Reductions:
-- On WHILE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On TRY reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On TRUE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On TILDA reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On THROW reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On THIS reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On SYNCHRONIZED reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On SWITCH reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On SUPER reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On STRING reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On SHORT reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On SEMICOLON reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On RIGHTBRACE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On RETURN reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On REAL reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On PLUSPLUS reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On PLUS reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On NULL reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On NEW reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On MINUSMINUS reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On MINUS reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On LONG reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On LEFTPAR reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On LEFTBRACE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On JML_METHOD_SPECIFICATION reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On JML_LOOP_ANNOTATION reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On JML_ASSERTION reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On INTEGER reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On INT reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On IF reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On ID reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On FOR reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On FLOAT reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On FALSE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On DOUBLE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On DO reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On DEFAULT reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On CONTINUE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On CHARACTER reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On CHAR reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On CASE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On BYTE reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On BREAK reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On BOOLEAN reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement
-- On BANG reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement

State 331:
## Known stack suffix:
## IF LEFTPAR expr RIGHTPAR statement ELSE
## LR(1) items:
other_statement -> IF LEFTPAR expr RIGHTPAR statement ELSE . statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 332
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 332:
## Known stack suffix:
## IF LEFTPAR expr RIGHTPAR statement ELSE statement
## LR(1) items:
other_statement -> IF LEFTPAR expr RIGHTPAR statement ELSE statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> IF LEFTPAR expr RIGHTPAR statement ELSE statement

State 333:
## Known stack suffix:
## other_statement
## LR(1) items:
annotated_statement -> other_statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotated_statement -> other_statement

State 334:
## Known stack suffix:
## name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
array_type_expr -> name . LEFTBRACKET RIGHTBRACKET [ LEFTBRACKET ID ]
expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> name . assign_op expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP EQ DOT COMP COMMA CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
type_expr -> name . [ ID ]
## Transitions:
-- On LEFTBRACKET shift to state 209
-- On EQ shift to state 130
-- On DOT shift to state 181
-- On ASSIGNOP shift to state 131
-- On assign_op shift to state 186
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production expr -> name
-- On VERTICALBAR reduce production expr -> name
-- On STAR reduce production expr -> name
-- On SLASH reduce production expr -> name
-- On SHIFT reduce production expr -> name
-- On SEMICOLON reduce production expr -> name
-- On QUESTIONMARK reduce production expr -> name
-- On PLUSPLUS reduce production expr -> name
-- On PLUS reduce production expr -> name
-- On PERCENT reduce production expr -> name
-- On MINUSMINUS reduce production expr -> name
-- On MINUS reduce production expr -> name
-- On INSTANCEOF reduce production expr -> name
-- On ID reduce production type_expr -> name
-- On EQOP reduce production expr -> name
-- On COMP reduce production expr -> name
-- On COMMA reduce production expr -> name
-- On CARET reduce production expr -> name
-- On AMPERSANDAMPERSAND reduce production expr -> name
-- On AMPERSAND reduce production expr -> name

State 335:
## Known stack suffix:
## local_variable_declaration
## LR(1) items:
other_statement -> local_variable_declaration . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## local_variable_declaration SEMICOLON
## LR(1) items:
other_statement -> local_variable_declaration SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> local_variable_declaration SEMICOLON

State 337:
## Known stack suffix:
## jml_loop_annot
## LR(1) items:
statement -> jml_loop_annot . WHILE LEFTPAR expr RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
statement -> jml_loop_annot . DO statement WHILE LEFTPAR expr RIGHTPAR [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
statement -> jml_loop_annot . FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
statement -> jml_loop_annot . FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On WHILE shift to state 338
-- On FOR shift to state 350
-- On DO shift to state 371
## Reductions:

State 338:
## Known stack suffix:
## jml_loop_annot WHILE
## LR(1) items:
statement -> jml_loop_annot WHILE . LEFTPAR expr RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTPAR shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## jml_loop_annot WHILE LEFTPAR
## LR(1) items:
statement -> jml_loop_annot WHILE LEFTPAR . expr RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 340
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 340:
## Known stack suffix:
## jml_loop_annot WHILE LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
statement -> jml_loop_annot WHILE LEFTPAR expr . RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTPAR shift to state 341
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 341:
## Known stack suffix:
## jml_loop_annot WHILE LEFTPAR expr RIGHTPAR
## LR(1) items:
statement -> jml_loop_annot WHILE LEFTPAR expr RIGHTPAR . statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 342
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 342:
## Known stack suffix:
## jml_loop_annot WHILE LEFTPAR expr RIGHTPAR statement
## LR(1) items:
statement -> jml_loop_annot WHILE LEFTPAR expr RIGHTPAR statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> jml_loop_annot WHILE LEFTPAR expr RIGHTPAR statement

State 343:
## Known stack suffix:
## ident
## LR(1) items:
name -> ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP EQ DOT COMP CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
other_statement -> ident . COLON statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
primary_no_new_array -> ident . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 128
-- On COLON shift to state 344
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production name -> ident
-- On VERTICALBAR reduce production name -> ident
-- On STAR reduce production name -> ident
-- On SLASH reduce production name -> ident
-- On SHIFT reduce production name -> ident
-- On SEMICOLON reduce production name -> ident
-- On QUESTIONMARK reduce production name -> ident
-- On PLUSPLUS reduce production name -> ident
-- On PLUS reduce production name -> ident
-- On PERCENT reduce production name -> ident
-- On MINUSMINUS reduce production name -> ident
-- On MINUS reduce production name -> ident
-- On LEFTBRACKET reduce production name -> ident
-- On INSTANCEOF reduce production name -> ident
-- On ID reduce production name -> ident
-- On EQOP reduce production name -> ident
-- On EQ reduce production name -> ident
-- On DOT reduce production name -> ident
-- On COMP reduce production name -> ident
-- On CARET reduce production name -> ident
-- On ASSIGNOP reduce production name -> ident
-- On AMPERSANDAMPERSAND reduce production name -> ident
-- On AMPERSAND reduce production name -> ident

State 344:
## Known stack suffix:
## ident COLON
## LR(1) items:
other_statement -> ident COLON . statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 345
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 345:
## Known stack suffix:
## ident COLON statement
## LR(1) items:
other_statement -> ident COLON statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> ident COLON statement

State 346:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
other_statement -> expr . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On SEMICOLON shift to state 347
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 347:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
other_statement -> expr SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> expr SEMICOLON

State 348:
## Known stack suffix:
## block
## LR(1) items:
other_statement -> block . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> block

State 349:
## Known stack suffix:
## annotated_statement
## LR(1) items:
statement -> annotated_statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> annotated_statement

State 350:
## Known stack suffix:
## jml_loop_annot FOR
## LR(1) items:
statement -> jml_loop_annot FOR . LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
statement -> jml_loop_annot FOR . LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTPAR shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR . statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
statement -> jml_loop_annot FOR LEFTPAR . local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement_expr_ne_list shift to state 352
-- On statement_expr_list shift to state 353
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 364
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 360
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:
-- On SEMICOLON reduce production statement_expr_list ->

State 352:
## Known stack suffix:
## statement_expr_ne_list
## LR(1) items:
statement_expr_list -> statement_expr_ne_list . [ SEMICOLON RIGHTPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_expr_list -> statement_expr_ne_list

State 353:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR statement_expr_list
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR statement_expr_list . SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON . for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On for_cond shift to state 355
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 363
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:
-- On SEMICOLON reduce production for_cond ->

State 355:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond . SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 356
## Reductions:

State 356:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON . statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On statement_expr_ne_list shift to state 352
-- On statement_expr_list shift to state 357
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 360
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:
-- On RIGHTPAR reduce production statement_expr_list ->

State 357:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list . RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On RIGHTPAR shift to state 358
## Reductions:

State 358:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR . statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 359
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 359:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> jml_loop_annot FOR LEFTPAR statement_expr_list SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement

State 360:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
statement_expr_ne_list -> expr . [ SEMICOLON RIGHTPAR ]
statement_expr_ne_list -> expr . COMMA statement_expr_ne_list [ SEMICOLON RIGHTPAR ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On COMMA shift to state 361
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On SEMICOLON reduce production statement_expr_ne_list -> expr
-- On RIGHTPAR reduce production statement_expr_ne_list -> expr

State 361:
## Known stack suffix:
## expr COMMA
## LR(1) items:
statement_expr_ne_list -> expr COMMA . statement_expr_ne_list [ SEMICOLON RIGHTPAR ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On statement_expr_ne_list shift to state 362
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 360
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 362:
## Known stack suffix:
## expr COMMA statement_expr_ne_list
## LR(1) items:
statement_expr_ne_list -> expr COMMA statement_expr_ne_list . [ SEMICOLON RIGHTPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement_expr_ne_list -> expr COMMA statement_expr_ne_list

State 363:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
for_cond -> expr . [ SEMICOLON ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:
-- On SEMICOLON reduce production for_cond -> expr

State 364:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR local_variable_declaration
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration . SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON . for_cond SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On for_cond shift to state 366
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 363
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:
-- On SEMICOLON reduce production for_cond ->

State 366:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond . SEMICOLON statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON . statement_expr_list RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On statement_expr_ne_list shift to state 352
-- On statement_expr_list shift to state 368
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 360
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:
-- On RIGHTPAR reduce production statement_expr_list ->

State 368:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list . RIGHTPAR statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On RIGHTPAR shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR . statement [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 370
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 370:
## Known stack suffix:
## jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement
## LR(1) items:
statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> jml_loop_annot FOR LEFTPAR local_variable_declaration SEMICOLON for_cond SEMICOLON statement_expr_list RIGHTPAR statement

State 371:
## Known stack suffix:
## jml_loop_annot DO
## LR(1) items:
statement -> jml_loop_annot DO . statement WHILE LEFTPAR expr RIGHTPAR [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statement shift to state 372
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 372:
## Known stack suffix:
## jml_loop_annot DO statement
## LR(1) items:
statement -> jml_loop_annot DO statement . WHILE LEFTPAR expr RIGHTPAR [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On WHILE shift to state 373
## Reductions:

State 373:
## Known stack suffix:
## jml_loop_annot DO statement WHILE
## LR(1) items:
statement -> jml_loop_annot DO statement WHILE . LEFTPAR expr RIGHTPAR [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On LEFTPAR shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## jml_loop_annot DO statement WHILE LEFTPAR
## LR(1) items:
statement -> jml_loop_annot DO statement WHILE LEFTPAR . expr RIGHTPAR [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 375
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
## Reductions:

State 375:
## Known stack suffix:
## jml_loop_annot DO statement WHILE LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . PLUSPLUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUSMINUS [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
statement -> jml_loop_annot DO statement WHILE LEFTPAR expr . RIGHTPAR [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 135
-- On VERTICALBAR shift to state 137
-- On STAR shift to state 139
-- On SLASH shift to state 147
-- On SHIFT shift to state 149
-- On RIGHTPAR shift to state 376
-- On QUESTIONMARK shift to state 157
-- On PLUSPLUS shift to state 141
-- On PLUS shift to state 151
-- On PERCENT shift to state 153
-- On MINUSMINUS shift to state 142
-- On MINUS shift to state 155
-- On INSTANCEOF shift to state 159
-- On EQOP shift to state 161
-- On COMP shift to state 163
-- On CARET shift to state 167
-- On AMPERSANDAMPERSAND shift to state 171
-- On AMPERSAND shift to state 169
## Reductions:

State 376:
## Known stack suffix:
## jml_loop_annot DO statement WHILE LEFTPAR expr RIGHTPAR
## LR(1) items:
statement -> jml_loop_annot DO statement WHILE LEFTPAR expr RIGHTPAR . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> jml_loop_annot DO statement WHILE LEFTPAR expr RIGHTPAR

State 377:
## Known stack suffix:
## JML_METHOD_SPECIFICATION other_statement
## LR(1) items:
annotated_statement -> JML_METHOD_SPECIFICATION other_statement . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production annotated_statement -> JML_METHOD_SPECIFICATION other_statement

State 378:
## Known stack suffix:
## switch_labels statement
## LR(1) items:
switch_block -> switch_labels statement . statements switch_block [ RIGHTBRACE ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statements shift to state 379
-- On statement shift to state 383
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On RIGHTBRACE reduce production statements ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->
-- On DEFAULT reduce production statements ->
-- On CASE reduce production statements ->

State 379:
## Known stack suffix:
## switch_labels statement statements
## LR(1) items:
switch_block -> switch_labels statement statements . switch_block [ RIGHTBRACE ]
## Transitions:
-- On DEFAULT shift to state 302
-- On CASE shift to state 304
-- On switch_labels shift to state 307
-- On switch_label shift to state 380
-- On switch_block shift to state 382
## Reductions:
-- On RIGHTBRACE reduce production switch_block ->

State 380:
## Known stack suffix:
## switch_label
## LR(1) items:
switch_labels -> switch_label . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
switch_labels -> switch_label . switch_labels [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On DEFAULT shift to state 302
-- On CASE shift to state 304
-- On switch_labels shift to state 381
-- On switch_label shift to state 380
## Reductions:
-- On WHILE reduce production switch_labels -> switch_label
-- On TRY reduce production switch_labels -> switch_label
-- On TRUE reduce production switch_labels -> switch_label
-- On TILDA reduce production switch_labels -> switch_label
-- On THROW reduce production switch_labels -> switch_label
-- On THIS reduce production switch_labels -> switch_label
-- On SYNCHRONIZED reduce production switch_labels -> switch_label
-- On SWITCH reduce production switch_labels -> switch_label
-- On SUPER reduce production switch_labels -> switch_label
-- On STRING reduce production switch_labels -> switch_label
-- On SHORT reduce production switch_labels -> switch_label
-- On SEMICOLON reduce production switch_labels -> switch_label
-- On RIGHTBRACE reduce production switch_labels -> switch_label
-- On RETURN reduce production switch_labels -> switch_label
-- On REAL reduce production switch_labels -> switch_label
-- On PLUSPLUS reduce production switch_labels -> switch_label
-- On PLUS reduce production switch_labels -> switch_label
-- On NULL reduce production switch_labels -> switch_label
-- On NEW reduce production switch_labels -> switch_label
-- On MINUSMINUS reduce production switch_labels -> switch_label
-- On MINUS reduce production switch_labels -> switch_label
-- On LONG reduce production switch_labels -> switch_label
-- On LEFTPAR reduce production switch_labels -> switch_label
-- On LEFTBRACE reduce production switch_labels -> switch_label
-- On JML_METHOD_SPECIFICATION reduce production switch_labels -> switch_label
-- On JML_LOOP_ANNOTATION reduce production switch_labels -> switch_label
-- On JML_ASSERTION reduce production switch_labels -> switch_label
-- On INTEGER reduce production switch_labels -> switch_label
-- On INT reduce production switch_labels -> switch_label
-- On IF reduce production switch_labels -> switch_label
-- On ID reduce production switch_labels -> switch_label
-- On FOR reduce production switch_labels -> switch_label
-- On FLOAT reduce production switch_labels -> switch_label
-- On FALSE reduce production switch_labels -> switch_label
-- On DOUBLE reduce production switch_labels -> switch_label
-- On DO reduce production switch_labels -> switch_label
-- On CONTINUE reduce production switch_labels -> switch_label
-- On CHARACTER reduce production switch_labels -> switch_label
-- On CHAR reduce production switch_labels -> switch_label
-- On BYTE reduce production switch_labels -> switch_label
-- On BREAK reduce production switch_labels -> switch_label
-- On BOOLEAN reduce production switch_labels -> switch_label
-- On BANG reduce production switch_labels -> switch_label

State 381:
## Known stack suffix:
## switch_label switch_labels
## LR(1) items:
switch_labels -> switch_label switch_labels . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_labels -> switch_label switch_labels

State 382:
## Known stack suffix:
## switch_labels statement statements switch_block
## LR(1) items:
switch_block -> switch_labels statement statements switch_block . [ RIGHTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production switch_block -> switch_labels statement statements switch_block

State 383:
## Known stack suffix:
## statement
## LR(1) items:
statements -> statement . statements [ RIGHTBRACE DEFAULT CASE ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statements shift to state 384
-- On statement shift to state 383
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On RIGHTBRACE reduce production statements ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->
-- On DEFAULT reduce production statements ->
-- On CASE reduce production statements ->

State 384:
## Known stack suffix:
## statement statements
## LR(1) items:
statements -> statement statements . [ RIGHTBRACE DEFAULT CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statements -> statement statements

State 385:
## Known stack suffix:
## SWITCH LEFTPAR expr RIGHTPAR LEFTBRACE switch_block
## LR(1) items:
other_statement -> SWITCH LEFTPAR expr RIGHTPAR LEFTBRACE switch_block . RIGHTBRACE [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On RIGHTBRACE shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## SWITCH LEFTPAR expr RIGHTPAR LEFTBRACE switch_block RIGHTBRACE
## LR(1) items:
other_statement -> SWITCH LEFTPAR expr RIGHTPAR LEFTBRACE switch_block RIGHTBRACE . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production other_statement -> SWITCH LEFTPAR expr RIGHTPAR LEFTBRACE switch_block RIGHTBRACE

State 387:
## Known stack suffix:
## LEFTBRACE statements
## LR(1) items:
block -> LEFTBRACE statements . RIGHTBRACE [ WHILE VOID TRY TRUE TRANSIENT TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING STATIC SHORT SEMICOLON RIGHTBRACE RETURN REAL PUBLIC PROTECTED PRIVATE PLUSPLUS PLUS NULL NEW NATIVE MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_DECLARATIONS JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FINAL FALSE ELSE DOUBLE DOC_COMMENT DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ABSTRACT ]
## Transitions:
-- On RIGHTBRACE shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## LEFTBRACE statements RIGHTBRACE
## LR(1) items:
block -> LEFTBRACE statements RIGHTBRACE . [ WHILE VOID TRY TRUE TRANSIENT TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING STATIC SHORT SEMICOLON RIGHTBRACE RETURN REAL PUBLIC PROTECTED PRIVATE PLUSPLUS PLUS NULL NEW NATIVE MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_DECLARATIONS JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FINAL FALSE ELSE DOUBLE DOC_COMMENT DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block -> LEFTBRACE statements RIGHTBRACE

State 389:
## Known stack suffix:
## STATIC block
## LR(1) items:
static_initializer -> STATIC block . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_initializer -> STATIC block

State 390:
## Known stack suffix:
## JML_DECLARATIONS
## LR(1) items:
jml_declaration -> JML_DECLARATIONS . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jml_declaration -> JML_DECLARATIONS

State 391:
## Known stack suffix:
## doc_comment variable_declaration
## LR(1) items:
field_declaration -> doc_comment variable_declaration . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_declaration -> doc_comment variable_declaration

State 392:
## Known stack suffix:
## doc_comment static_initializer
## LR(1) items:
field_declaration -> doc_comment static_initializer . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_declaration -> doc_comment static_initializer

State 393:
## Known stack suffix:
## modifiers
## LR(1) items:
constructor_declaration -> modifiers . ident method_parameters throws_decl constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
method_header -> modifiers . type_expr method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
method_header -> modifiers . VOID method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
variable_declaration -> modifiers . type_expr variable_declarators SEMICOLON [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On VOID shift to state 53
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 90
-- On name shift to state 80
-- On ident shift to state 394
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 394:
## Known stack suffix:
## modifiers ident
## LR(1) items:
constructor_declaration -> modifiers ident . method_parameters throws_decl constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
name -> ident . [ LEFTBRACKET ID DOT ]
## Transitions:
-- On LEFTPAR shift to state 61
-- On method_parameters shift to state 395
## Reductions:
-- On LEFTBRACKET reduce production name -> ident
-- On ID reduce production name -> ident
-- On DOT reduce production name -> ident

State 395:
## Known stack suffix:
## modifiers ident method_parameters
## LR(1) items:
constructor_declaration -> modifiers ident method_parameters . throws_decl constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On THROWS shift to state 55
-- On throws_decl shift to state 396
## Reductions:
-- On SEMICOLON reduce production throws_decl ->
-- On LEFTBRACE reduce production throws_decl ->

State 396:
## Known stack suffix:
## modifiers ident method_parameters throws_decl
## LR(1) items:
constructor_declaration -> modifiers ident method_parameters throws_decl . constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 397
-- On LEFTBRACE shift to state 398
-- On constructor_body shift to state 414
## Reductions:

State 397:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
constructor_body -> SEMICOLON . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_body -> SEMICOLON

State 398:
## Known stack suffix:
## LEFTBRACE
## LR(1) items:
constructor_body -> LEFTBRACE . explicit_constructor_invocation statements RIGHTBRACE [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
constructor_body -> LEFTBRACE . statements RIGHTBRACE [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 399
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 404
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statements shift to state 409
-- On statement shift to state 383
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On explicit_constructor_invocation shift to state 411
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On RIGHTBRACE reduce production statements ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 399:
## Known stack suffix:
## THIS
## LR(1) items:
explicit_constructor_invocation -> THIS . LEFTPAR argument_list RIGHTPAR SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
primary_no_new_array -> THIS . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 400
## Reductions:
-- On VERTICALBARVERTICALBAR reduce production primary_no_new_array -> THIS
-- On VERTICALBAR reduce production primary_no_new_array -> THIS
-- On STAR reduce production primary_no_new_array -> THIS
-- On SLASH reduce production primary_no_new_array -> THIS
-- On SHIFT reduce production primary_no_new_array -> THIS
-- On SEMICOLON reduce production primary_no_new_array -> THIS
-- On QUESTIONMARK reduce production primary_no_new_array -> THIS
-- On PLUSPLUS reduce production primary_no_new_array -> THIS
-- On PLUS reduce production primary_no_new_array -> THIS
-- On PERCENT reduce production primary_no_new_array -> THIS
-- On MINUSMINUS reduce production primary_no_new_array -> THIS
-- On MINUS reduce production primary_no_new_array -> THIS
-- On LEFTBRACKET reduce production primary_no_new_array -> THIS
-- On INSTANCEOF reduce production primary_no_new_array -> THIS
-- On EQOP reduce production primary_no_new_array -> THIS
-- On DOT reduce production primary_no_new_array -> THIS
-- On COMP reduce production primary_no_new_array -> THIS
-- On CARET reduce production primary_no_new_array -> THIS
-- On AMPERSANDAMPERSAND reduce production primary_no_new_array -> THIS
-- On AMPERSAND reduce production primary_no_new_array -> THIS

State 400:
## Known stack suffix:
## THIS LEFTPAR
## LR(1) items:
explicit_constructor_invocation -> THIS LEFTPAR . argument_list RIGHTPAR SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr_comma_list shift to state 173
-- On expr shift to state 174
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On argument_list shift to state 401
## Reductions:
-- On RIGHTPAR reduce production argument_list ->

State 401:
## Known stack suffix:
## THIS LEFTPAR argument_list
## LR(1) items:
explicit_constructor_invocation -> THIS LEFTPAR argument_list . RIGHTPAR SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On RIGHTPAR shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## THIS LEFTPAR argument_list RIGHTPAR
## LR(1) items:
explicit_constructor_invocation -> THIS LEFTPAR argument_list RIGHTPAR . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## THIS LEFTPAR argument_list RIGHTPAR SEMICOLON
## LR(1) items:
explicit_constructor_invocation -> THIS LEFTPAR argument_list RIGHTPAR SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production explicit_constructor_invocation -> THIS LEFTPAR argument_list RIGHTPAR SEMICOLON

State 404:
## Known stack suffix:
## SUPER
## LR(1) items:
explicit_constructor_invocation -> SUPER . LEFTPAR argument_list RIGHTPAR SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
field_access -> SUPER . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 405
-- On DOT shift to state 101
## Reductions:

State 405:
## Known stack suffix:
## SUPER LEFTPAR
## LR(1) items:
explicit_constructor_invocation -> SUPER LEFTPAR . argument_list RIGHTPAR SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THIS shift to state 99
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LEFTPAR shift to state 113
-- On INTEGER shift to state 114
-- On ID shift to state 2
-- On FALSE shift to state 115
-- On CHARACTER shift to state 116
-- On BANG shift to state 117
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On non_basic_cast shift to state 124
-- On name shift to state 125
-- On ident shift to state 127
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr_comma_list shift to state 173
-- On expr shift to state 174
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On argument_list shift to state 406
## Reductions:
-- On RIGHTPAR reduce production argument_list ->

State 406:
## Known stack suffix:
## SUPER LEFTPAR argument_list
## LR(1) items:
explicit_constructor_invocation -> SUPER LEFTPAR argument_list . RIGHTPAR SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On RIGHTPAR shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## SUPER LEFTPAR argument_list RIGHTPAR
## LR(1) items:
explicit_constructor_invocation -> SUPER LEFTPAR argument_list RIGHTPAR . SEMICOLON [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
-- On SEMICOLON shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## SUPER LEFTPAR argument_list RIGHTPAR SEMICOLON
## LR(1) items:
explicit_constructor_invocation -> SUPER LEFTPAR argument_list RIGHTPAR SEMICOLON . [ WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production explicit_constructor_invocation -> SUPER LEFTPAR argument_list RIGHTPAR SEMICOLON

State 409:
## Known stack suffix:
## LEFTBRACE statements
## LR(1) items:
constructor_body -> LEFTBRACE statements . RIGHTBRACE [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On RIGHTBRACE shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## LEFTBRACE statements RIGHTBRACE
## LR(1) items:
constructor_body -> LEFTBRACE statements RIGHTBRACE . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_body -> LEFTBRACE statements RIGHTBRACE

State 411:
## Known stack suffix:
## LEFTBRACE explicit_constructor_invocation
## LR(1) items:
constructor_body -> LEFTBRACE explicit_constructor_invocation . statements RIGHTBRACE [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On TRY shift to state 275
-- On TRUE shift to state 97
-- On TILDA shift to state 98
-- On THROW shift to state 289
-- On THIS shift to state 99
-- On SYNCHRONIZED shift to state 292
-- On SWITCH shift to state 297
-- On SUPER shift to state 100
-- On STRING shift to state 103
-- On SHORT shift to state 62
-- On SEMICOLON shift to state 308
-- On RETURN shift to state 309
-- On REAL shift to state 104
-- On PLUSPLUS shift to state 105
-- On PLUS shift to state 106
-- On NULL shift to state 107
-- On NEW shift to state 108
-- On MINUSMINUS shift to state 111
-- On MINUS shift to state 112
-- On LONG shift to state 64
-- On LEFTPAR shift to state 113
-- On LEFTBRACE shift to state 274
-- On JML_METHOD_SPECIFICATION shift to state 313
-- On JML_LOOP_ANNOTATION shift to state 318
-- On JML_ASSERTION shift to state 319
-- On INTEGER shift to state 114
-- On INT shift to state 65
-- On IF shift to state 314
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On FALSE shift to state 115
-- On DOUBLE shift to state 67
-- On CONTINUE shift to state 320
-- On CHARACTER shift to state 116
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BREAK shift to state 324
-- On BOOLEAN shift to state 70
-- On BANG shift to state 117
-- On type_expr shift to state 328
-- On statements shift to state 412
-- On statement shift to state 383
-- On primary_no_new_array shift to state 118
-- On primary_expr shift to state 120
-- On other_statement shift to state 333
-- On non_basic_cast shift to state 124
-- On name shift to state 334
-- On local_variable_declaration shift to state 335
-- On jml_loop_annot shift to state 337
-- On ident shift to state 343
-- On field_access shift to state 129
-- On expr_no_name shift to state 133
-- On expr shift to state 346
-- On block shift to state 348
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
-- On array_creation_expression shift to state 143
-- On array_access shift to state 144
-- On annotated_statement shift to state 349
## Reductions:
-- On WHILE reduce production jml_loop_annot ->
-- On RIGHTBRACE reduce production statements ->
-- On FOR reduce production jml_loop_annot ->
-- On DO reduce production jml_loop_annot ->

State 412:
## Known stack suffix:
## LEFTBRACE explicit_constructor_invocation statements
## LR(1) items:
constructor_body -> LEFTBRACE explicit_constructor_invocation statements . RIGHTBRACE [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On RIGHTBRACE shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## LEFTBRACE explicit_constructor_invocation statements RIGHTBRACE
## LR(1) items:
constructor_body -> LEFTBRACE explicit_constructor_invocation statements RIGHTBRACE . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_body -> LEFTBRACE explicit_constructor_invocation statements RIGHTBRACE

State 414:
## Known stack suffix:
## modifiers ident method_parameters throws_decl constructor_body
## LR(1) items:
constructor_declaration -> modifiers ident method_parameters throws_decl constructor_body . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declaration -> modifiers ident method_parameters throws_decl constructor_body

State 415:
## Known stack suffix:
## method_specification
## LR(1) items:
constructor_declaration -> method_specification . modifiers ident method_parameters throws_decl constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
method_header -> method_specification . modifiers type_expr method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
method_header -> method_specification . modifiers VOID method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On TRANSIENT shift to state 23
-- On SYNCHRONIZED shift to state 24
-- On STATIC shift to state 25
-- On PUBLIC shift to state 26
-- On PROTECTED shift to state 27
-- On PRIVATE shift to state 28
-- On NATIVE shift to state 29
-- On JML_SPEC_PUBLIC shift to state 30
-- On JML_PURE shift to state 31
-- On FINAL shift to state 32
-- On ABSTRACT shift to state 33
-- On modifiers shift to state 416
-- On modifier shift to state 247
## Reductions:
-- On VOID reduce production modifiers ->
-- On SHORT reduce production modifiers ->
-- On LONG reduce production modifiers ->
-- On INT reduce production modifiers ->
-- On ID reduce production modifiers ->
-- On FLOAT reduce production modifiers ->
-- On DOUBLE reduce production modifiers ->
-- On CHAR reduce production modifiers ->
-- On BYTE reduce production modifiers ->
-- On BOOLEAN reduce production modifiers ->

State 416:
## Known stack suffix:
## method_specification modifiers
## LR(1) items:
constructor_declaration -> method_specification modifiers . ident method_parameters throws_decl constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
method_header -> method_specification modifiers . type_expr method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
method_header -> method_specification modifiers . VOID method_declarator throws_decl [ SEMICOLON LEFTBRACE ]
## Transitions:
-- On VOID shift to state 251
-- On SHORT shift to state 62
-- On LONG shift to state 64
-- On INT shift to state 65
-- On ID shift to state 2
-- On FLOAT shift to state 66
-- On DOUBLE shift to state 67
-- On CHAR shift to state 68
-- On BYTE shift to state 69
-- On BOOLEAN shift to state 70
-- On type_expr shift to state 254
-- On name shift to state 80
-- On ident shift to state 417
-- On base_type shift to state 83
-- On array_type_expr shift to state 86
## Reductions:

State 417:
## Known stack suffix:
## method_specification modifiers ident
## LR(1) items:
constructor_declaration -> method_specification modifiers ident . method_parameters throws_decl constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
name -> ident . [ LEFTBRACKET ID DOT ]
## Transitions:
-- On LEFTPAR shift to state 61
-- On method_parameters shift to state 418
## Reductions:
-- On LEFTBRACKET reduce production name -> ident
-- On ID reduce production name -> ident
-- On DOT reduce production name -> ident

State 418:
## Known stack suffix:
## method_specification modifiers ident method_parameters
## LR(1) items:
constructor_declaration -> method_specification modifiers ident method_parameters . throws_decl constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On THROWS shift to state 55
-- On throws_decl shift to state 419
## Reductions:
-- On SEMICOLON reduce production throws_decl ->
-- On LEFTBRACE reduce production throws_decl ->

State 419:
## Known stack suffix:
## method_specification modifiers ident method_parameters throws_decl
## LR(1) items:
constructor_declaration -> method_specification modifiers ident method_parameters throws_decl . constructor_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 397
-- On LEFTBRACE shift to state 398
-- On constructor_body shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## method_specification modifiers ident method_parameters throws_decl constructor_body
## LR(1) items:
constructor_declaration -> method_specification modifiers ident method_parameters throws_decl constructor_body . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declaration -> method_specification modifiers ident method_parameters throws_decl constructor_body

State 421:
## Known stack suffix:
## method_header
## LR(1) items:
method_declaration -> method_header . method_body [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 422
-- On LEFTBRACE shift to state 274
-- On method_body shift to state 423
-- On block shift to state 424
## Reductions:

State 422:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
method_body -> SEMICOLON . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_body -> SEMICOLON

State 423:
## Known stack suffix:
## method_header method_body
## LR(1) items:
method_declaration -> method_header method_body . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_declaration -> method_header method_body

State 424:
## Known stack suffix:
## block
## LR(1) items:
method_body -> block . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_body -> block

State 425:
## Known stack suffix:
## doc_comment method_declaration
## LR(1) items:
field_declaration -> doc_comment method_declaration . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_declaration -> doc_comment method_declaration

State 426:
## Known stack suffix:
## doc_comment jml_declaration
## LR(1) items:
field_declaration -> doc_comment jml_declaration . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_declaration -> doc_comment jml_declaration

State 427:
## Known stack suffix:
## doc_comment constructor_declaration
## LR(1) items:
field_declaration -> doc_comment constructor_declaration . [ VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_declaration -> doc_comment constructor_declaration

State 428:
## Known stack suffix:
## doc_comment interface_declaration
## LR(1) items:
type_declaration -> doc_comment interface_declaration . [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> doc_comment interface_declaration

State 429:
## Known stack suffix:
## doc_comment class_declaration
## LR(1) items:
type_declaration -> doc_comment class_declaration . [ TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declaration -> doc_comment class_declaration

State 430:
## Known stack suffix:
## package_declaration import_declarations type_declarations
## LR(1) items:
compilation_unit -> package_declaration import_declarations type_declarations . EOF [ # ]
## Transitions:
-- On EOF shift to state 431
## Reductions:

State 431:
## Known stack suffix:
## package_declaration import_declarations type_declarations EOF
## LR(1) items:
compilation_unit -> package_declaration import_declarations type_declarations EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production compilation_unit -> package_declaration import_declarations type_declarations EOF

State 432:
## Known stack suffix:
## compilation_unit
## LR(1) items:
compilation_unit' -> compilation_unit . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept compilation_unit

