File "java.mly", line 53, characters 29-36:
Warning: the token BYVALUE is unused.
File "java.mly", line 54, characters 18-23:
Warning: the token CONST is unused.
File "java.mly", line 55, characters 27-33:
Warning: the token FUTURE is unused.
File "java.mly", line 55, characters 34-41:
Warning: the token GENERIC is unused.
File "java.mly", line 55, characters 42-46:
Warning: the token GOTO is unused.
File "java.mly", line 56, characters 25-30:
Warning: the token INNER is unused.
File "java.mly", line 71, characters 43-70:
Warning: the token JML_STATEMENT_SPECIFICATION is unused.
File "java.mly", line 57, characters 14-22:
Warning: the token OPERATOR is unused.
File "java.mly", line 57, characters 23-28:
Warning: the token OUTER is unused.
File "java.mly", line 58, characters 14-18:
Warning: the token REST is unused.
File "java.mly", line 59, characters 24-27:
Warning: the token VAR is unused.
File "java.mly", line 59, characters 33-41:
Warning: the token VOLATILE is unused.
Grammar has 73 nonterminal symbols, among which 1 start symbols.
Grammar has 103 terminal symbols.
Grammar has 224 productions.
nullable(variable_initializers) = true
nullable(variable_initializer) = false
nullable(variable_declarators) = false
nullable(variable_declarator_id) = false
nullable(variable_declarator) = false
nullable(variable_declaration) = false
nullable(type_expr) = false
nullable(type_declarations) = true
nullable(type_declaration) = false
nullable(throws_decl) = true
nullable(switch_labels) = false
nullable(switch_label) = false
nullable(switch_block) = true
nullable(static_initializer) = false
nullable(statements) = true
nullable(statement_expr_ne_list) = false
nullable(statement_expr_list) = true
nullable(statement) = false
nullable(primary_no_new_array) = false
nullable(primary_expr) = false
nullable(parameter_comma_list) = false
nullable(parameter) = false
nullable(package_declaration) = true
nullable(other_statement) = false
nullable(non_basic_cast) = false
nullable(name_comma_list) = false
nullable(name) = false
nullable(modifiers) = true
nullable(modifier) = false
nullable(method_specification) = false
nullable(method_parameters) = false
nullable(method_header) = false
nullable(method_declarator) = false
nullable(method_declaration) = false
nullable(method_body) = false
nullable(local_variable_declaration) = false
nullable(jml_loop_annot) = true
nullable(jml_declaration) = false
nullable(interface_member_declarations) = true
nullable(interface_member_declaration) = false
nullable(interface_declaration) = false
nullable(import_declarations) = true
nullable(import_declaration) = false
nullable(implicit_dims) = true
nullable(implements_decl) = true
nullable(ident) = false
nullable(for_cond) = true
nullable(field_declarations) = true
nullable(field_declaration) = false
nullable(field_access) = false
nullable(extends_interfaces_decl) = true
nullable(extends_decl) = true
nullable(expr_no_name) = false
nullable(expr_comma_list) = false
nullable(expr) = false
nullable(explicit_constructor_invocation) = false
nullable(doc_comment) = true
nullable(constructor_declaration) = false
nullable(constructor_body) = false
nullable(compilation_unit) = false
nullable(class_declaration) = false
nullable(catch_clauses) = false
nullable(catch_clause) = false
nullable(castable_expr) = false
nullable(block) = false
nullable(base_type) = false
nullable(assign_op) = false
nullable(array_type_expr) = false
nullable(array_dims) = false
nullable(array_creation_expression) = false
nullable(array_access) = false
nullable(argument_list) = true
nullable(annotated_statement) = false
first(variable_initializers) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR LEFTBRACE INTEGER ID FALSE CHARACTER BANG
first(variable_initializer) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR LEFTBRACE INTEGER ID FALSE CHARACTER BANG
first(variable_declarators) = ID
first(variable_declarator_id) = ID
first(variable_declarator) = ID
first(variable_declaration) = TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT
first(type_expr) = SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
first(type_declarations) = TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL DOC_COMMENT CLASS ABSTRACT
first(type_declaration) = TRANSIENT SYNCHRONIZED STATIC PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL DOC_COMMENT CLASS ABSTRACT
first(throws_decl) = THROWS
first(switch_labels) = DEFAULT CASE
first(switch_label) = DEFAULT CASE
first(switch_block) = DEFAULT CASE
first(static_initializer) = STATIC
first(statements) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG
first(statement_expr_ne_list) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
first(statement_expr_list) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
first(statement) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG
first(primary_no_new_array) = TRUE THIS SUPER STRING REAL NULL NEW LEFTPAR INTEGER ID FALSE CHARACTER
first(primary_expr) = TRUE THIS SUPER STRING REAL NULL NEW LEFTPAR INTEGER ID FALSE CHARACTER
first(parameter_comma_list) = SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
first(parameter) = SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
first(package_declaration) = PACKAGE
first(other_statement) = TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE INTEGER INT IF ID FLOAT FALSE DOUBLE CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG
first(non_basic_cast) = LEFTPAR
first(name_comma_list) = ID
first(name) = ID
first(modifiers) = TRANSIENT SYNCHRONIZED STATIC PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE FINAL ABSTRACT
first(modifier) = TRANSIENT SYNCHRONIZED STATIC PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE FINAL ABSTRACT
first(method_specification) = JML_METHOD_SPECIFICATION
first(method_parameters) = LEFTPAR
first(method_header) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT
first(method_declarator) = ID
first(method_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT
first(method_body) = SEMICOLON LEFTBRACE
first(local_variable_declaration) = SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
first(jml_loop_annot) = JML_LOOP_ANNOTATION
first(jml_declaration) = JML_DECLARATIONS
first(interface_member_declarations) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
first(interface_member_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
first(interface_declaration) = TRANSIENT SYNCHRONIZED STATIC PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL ABSTRACT
first(import_declarations) = IMPORT
first(import_declaration) = ID
first(implicit_dims) = LEFTBRACKET
first(implements_decl) = IMPLEMENTS
first(ident) = ID
first(for_cond) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
first(field_declarations) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
first(field_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
first(field_access) = TRUE THIS SUPER STRING REAL NULL NEW LEFTPAR INTEGER ID FALSE CHARACTER
first(extends_interfaces_decl) = EXTENDS
first(extends_decl) = EXTENDS
first(expr_no_name) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
first(expr_comma_list) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
first(expr) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
first(explicit_constructor_invocation) = THIS SUPER
first(doc_comment) = DOC_COMMENT
first(constructor_declaration) = TRANSIENT SYNCHRONIZED STATIC PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION ID FINAL ABSTRACT
first(constructor_body) = SEMICOLON LEFTBRACE
first(compilation_unit) = TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE PACKAGE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE IMPORT FINAL EOF DOC_COMMENT CLASS ABSTRACT
first(class_declaration) = TRANSIENT SYNCHRONIZED STATIC PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE FINAL CLASS ABSTRACT
first(catch_clauses) = CATCH
first(catch_clause) = CATCH
first(castable_expr) = TRUE THIS SUPER STRING REAL NULL NEW LEFTPAR INTEGER ID FALSE CHARACTER
first(block) = LEFTBRACE
first(base_type) = SHORT LONG INT FLOAT DOUBLE CHAR BYTE BOOLEAN
first(assign_op) = EQ ASSIGNOP
first(array_type_expr) = SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
first(array_dims) = LEFTBRACKET
first(array_creation_expression) = NEW
first(array_access) = TRUE THIS SUPER STRING REAL NULL NEW LEFTPAR INTEGER ID FALSE CHARACTER
first(argument_list) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
first(annotated_statement) = TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION INTEGER INT IF ID FLOAT FALSE DOUBLE CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG
minimal(variable_initializers) = (* 0 *)
minimal(variable_initializer) = (* 1 *) ID
minimal(variable_declarators) = (* 1 *) ID
minimal(variable_declarator_id) = (* 1 *) ID
minimal(variable_declarator) = (* 1 *) ID
minimal(variable_declaration) = (* 3 *) ID ID SEMICOLON
minimal(type_expr) = (* 1 *) ID
minimal(type_declarations) = (* 0 *)
minimal(type_declaration) = (* 4 *) CLASS ID LEFTBRACE RIGHTBRACE
minimal(throws_decl) = (* 0 *)
minimal(switch_labels) = (* 2 *) DEFAULT COLON
minimal(switch_label) = (* 2 *) DEFAULT COLON
minimal(switch_block) = (* 0 *)
minimal(static_initializer) = (* 3 *) STATIC LEFTBRACE RIGHTBRACE
minimal(statements) = (* 0 *)
minimal(statement_expr_ne_list) = (* 1 *) ID
minimal(statement_expr_list) = (* 0 *)
minimal(statement) = (* 1 *) SEMICOLON
minimal(primary_no_new_array) = (* 1 *) INTEGER
minimal(primary_expr) = (* 1 *) INTEGER
minimal(parameter_comma_list) = (* 2 *) ID ID
minimal(parameter) = (* 2 *) ID ID
minimal(package_declaration) = (* 0 *)
minimal(other_statement) = (* 1 *) SEMICOLON
minimal(non_basic_cast) = (* 4 *) LEFTPAR ID RIGHTPAR INTEGER
minimal(name_comma_list) = (* 1 *) ID
minimal(name) = (* 1 *) ID
minimal(modifiers) = (* 0 *)
minimal(modifier) = (* 1 *) STATIC
minimal(method_specification) = (* 1 *) JML_METHOD_SPECIFICATION
minimal(method_parameters) = (* 2 *) LEFTPAR RIGHTPAR
minimal(method_header) = (* 4 *) ID ID LEFTPAR RIGHTPAR
minimal(method_declarator) = (* 3 *) ID LEFTPAR RIGHTPAR
minimal(method_declaration) = (* 5 *) ID ID LEFTPAR RIGHTPAR SEMICOLON
minimal(method_body) = (* 1 *) SEMICOLON
minimal(local_variable_declaration) = (* 2 *) ID ID
minimal(jml_loop_annot) = (* 0 *)
minimal(jml_declaration) = (* 1 *) JML_DECLARATIONS
minimal(interface_member_declarations) = (* 0 *)
minimal(interface_member_declaration) = (* 3 *) ID ID SEMICOLON
minimal(interface_declaration) = (* 4 *) INTERFACE ID LEFTBRACE RIGHTBRACE
minimal(import_declarations) = (* 0 *)
minimal(import_declaration) = (* 1 *) ID
minimal(implicit_dims) = (* 0 *)
minimal(implements_decl) = (* 0 *)
minimal(ident) = (* 1 *) ID
minimal(for_cond) = (* 0 *)
minimal(field_declarations) = (* 0 *)
minimal(field_declaration) = (* 1 *) JML_DECLARATIONS
minimal(field_access) = (* 3 *) SUPER DOT ID
minimal(extends_interfaces_decl) = (* 0 *)
minimal(extends_decl) = (* 0 *)
minimal(expr_no_name) = (* 1 *) INTEGER
minimal(expr_comma_list) = (* 1 *) ID
minimal(expr) = (* 1 *) ID
minimal(explicit_constructor_invocation) = (* 4 *) THIS LEFTPAR RIGHTPAR SEMICOLON
minimal(doc_comment) = (* 0 *)
minimal(constructor_declaration) = (* 4 *) ID LEFTPAR RIGHTPAR SEMICOLON
minimal(constructor_body) = (* 1 *) SEMICOLON
minimal(compilation_unit) = (* 1 *) EOF
minimal(class_declaration) = (* 4 *) CLASS ID LEFTBRACE RIGHTBRACE
minimal(catch_clauses) = (* 7 *) CATCH LEFTPAR ID ID RIGHTPAR LEFTBRACE RIGHTBRACE
minimal(catch_clause) = (* 7 *) CATCH LEFTPAR ID ID RIGHTPAR LEFTBRACE RIGHTBRACE
minimal(castable_expr) = (* 1 *) INTEGER
minimal(block) = (* 2 *) LEFTBRACE RIGHTBRACE
minimal(base_type) = (* 1 *) SHORT
minimal(assign_op) = (* 1 *) EQ
minimal(array_type_expr) = (* 3 *) SHORT LEFTBRACKET RIGHTBRACKET
minimal(array_dims) = (* 3 *) LEFTBRACKET ID RIGHTBRACKET
minimal(array_creation_expression) = (* 5 *) NEW SHORT LEFTBRACKET ID RIGHTBRACKET
minimal(array_access) = (* 4 *) INTEGER LEFTBRACKET ID RIGHTBRACKET
minimal(argument_list) = (* 0 *)
minimal(annotated_statement) = (* 1 *) SEMICOLON
follow(variable_initializers) = RIGHTBRACE
follow(variable_initializer) = SEMICOLON RIGHTBRACE COMMA
follow(variable_declarators) = SEMICOLON
follow(variable_declarator_id) = SEMICOLON LEFTBRACKET EQ COMMA
follow(variable_declarator) = SEMICOLON COMMA
follow(variable_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(type_expr) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(type_declarations) = EOF
follow(type_declaration) = TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT
follow(throws_decl) = SEMICOLON LEFTBRACE
follow(switch_labels) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG
follow(switch_label) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG
follow(switch_block) = RIGHTBRACE
follow(static_initializer) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(statements) = RIGHTBRACE DEFAULT CASE
follow(statement_expr_ne_list) = SEMICOLON RIGHTPAR
follow(statement_expr_list) = SEMICOLON RIGHTPAR
follow(statement) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG
follow(primary_no_new_array) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(primary_expr) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(parameter_comma_list) = RIGHTPAR
follow(parameter) = RIGHTPAR LEFTBRACKET COMMA
follow(package_declaration) = TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE IMPORT FINAL EOF DOC_COMMENT CLASS ABSTRACT
follow(other_statement) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG
follow(non_basic_cast) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(name_comma_list) = SEMICOLON LEFTBRACE
follow(name) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACKET LEFTBRACE INSTANCEOF IMPLEMENTS ID EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND
follow(modifiers) = VOID SHORT LONG INTERFACE INT ID FLOAT DOUBLE CLASS CHAR BYTE BOOLEAN
follow(modifier) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT
follow(method_specification) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ABSTRACT
follow(method_parameters) = THROWS SEMICOLON LEFTBRACKET LEFTBRACE
follow(method_header) = SEMICOLON LEFTBRACE
follow(method_declarator) = THROWS SEMICOLON LEFTBRACKET LEFTBRACE
follow(method_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(method_body) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(local_variable_declaration) = SEMICOLON
follow(jml_loop_annot) = WHILE FOR DO
follow(jml_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(interface_member_declarations) = RIGHTBRACE
follow(interface_member_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(interface_declaration) = TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT
follow(import_declarations) = TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT
follow(import_declaration) = SEMICOLON
follow(implicit_dims) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(implements_decl) = LEFTBRACE
follow(ident) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTPAR LEFTBRACKET LEFTBRACE INSTANCEOF IMPLEMENTS ID EXTENDS EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND
follow(for_cond) = SEMICOLON
follow(field_declarations) = RIGHTBRACE
follow(field_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(field_access) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND
follow(extends_interfaces_decl) = LEFTBRACE
follow(extends_decl) = LEFTBRACE IMPLEMENTS
follow(expr_no_name) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(expr_comma_list) = RIGHTPAR
follow(expr) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(explicit_constructor_invocation) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE DOUBLE DO CONTINUE CHARACTER CHAR BYTE BREAK BOOLEAN BANG
follow(doc_comment) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INTERFACE INT ID FLOAT FINAL DOUBLE CLASS CHAR BYTE BOOLEAN ABSTRACT
follow(constructor_declaration) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(constructor_body) = VOID TRANSIENT SYNCHRONIZED STATIC SHORT RIGHTBRACE PUBLIC PROTECTED PRIVATE NATIVE LONG JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_DECLARATIONS INT ID FLOAT FINAL DOUBLE DOC_COMMENT CHAR BYTE BOOLEAN ABSTRACT
follow(compilation_unit) = #
follow(class_declaration) = TRANSIENT SYNCHRONIZED STATIC SEMICOLON PUBLIC PROTECTED PRIVATE NATIVE JML_SPEC_PUBLIC JML_PURE INTERFACE FINAL EOF DOC_COMMENT CLASS ABSTRACT
follow(catch_clauses) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG
follow(catch_clause) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG
follow(castable_expr) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(block) = WHILE VOID TRY TRUE TRANSIENT TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING STATIC SHORT SEMICOLON RIGHTBRACE RETURN REAL PUBLIC PROTECTED PRIVATE PLUSPLUS PLUS NULL NEW NATIVE MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_SPEC_PUBLIC JML_PURE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_DECLARATIONS JML_ASSERTION INTEGER INT IF ID FOR FLOAT FINALLY FINAL FALSE ELSE DOUBLE DOC_COMMENT DO DEFAULT CONTINUE CHARACTER CHAR CATCH CASE BYTE BREAK BOOLEAN BANG ABSTRACT
follow(base_type) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(assign_op) = TRUE TILDA THIS SUPER STRING REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LEFTPAR INTEGER ID FALSE CHARACTER BANG
follow(array_type_expr) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF ID EQOP COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(array_dims) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(array_creation_expression) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS INSTANCEOF EQOP DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
follow(array_access) = VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET RIGHTBRACE QUESTIONMARK PLUSPLUS PLUS PERCENT MINUSMINUS MINUS LEFTBRACKET INSTANCEOF EQOP EQ DOT COMP COMMA COLON CARET ASSIGNOP AMPERSANDAMPERSAND AMPERSAND
follow(argument_list) = RIGHTPAR
follow(annotated_statement) = WHILE TRY TRUE TILDA THROW THIS SYNCHRONIZED SWITCH SUPER STRING SHORT SEMICOLON RIGHTBRACE RETURN REAL PLUSPLUS PLUS NULL NEW MINUSMINUS MINUS LONG LEFTPAR LEFTBRACE JML_METHOD_SPECIFICATION JML_LOOP_ANNOTATION JML_ASSERTION INTEGER INT IF ID FOR FLOAT FALSE ELSE DOUBLE DO DEFAULT CONTINUE CHARACTER CHAR CASE BYTE BREAK BOOLEAN BANG
Built an LR(0) automaton with 433 states.
The grammar is not SLR(1) -- 33 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 433 states.
409 shift/reduce conflicts were silently solved.
File "java.mly", line 97, characters 0-6:
Warning: the precedence level assigned to EQ is never useful.
File "java.mly", line 788, characters 55-59:
Warning: this %prec declaration is never useful.
File "java.mly", line 793, characters 44-48:
Warning: this %prec declaration is never useful.
File "java.mly", line 593, characters 58-62:
Warning: this %prec declaration is never useful.
File "java.mly", line 562, characters 61-66:
Warning: this %prec declaration is never useful.
155 out of 433 states have a default reduction.
161 out of 433 states are represented.
0 out of 179 symbols keep track of their start position.
0 out of 179 symbols keep track of their end position.
111 out of 225 productions exploit shiftreduce optimization.
0 out of 433 states can peek at an error.
1170 functions before inlining, 189 functions after inlining.
