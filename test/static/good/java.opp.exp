File "java.mly", line 53, characters 29-36:
Warning: the token BYVALUE is unused.
File "java.mly", line 54, characters 18-23:
Warning: the token CONST is unused.
File "java.mly", line 55, characters 27-33:
Warning: the token FUTURE is unused.
File "java.mly", line 55, characters 34-41:
Warning: the token GENERIC is unused.
File "java.mly", line 55, characters 42-46:
Warning: the token GOTO is unused.
File "java.mly", line 56, characters 25-30:
Warning: the token INNER is unused.
File "java.mly", line 71, characters 43-70:
Warning: the token JML_STATEMENT_SPECIFICATION is unused.
File "java.mly", line 57, characters 14-22:
Warning: the token OPERATOR is unused.
File "java.mly", line 57, characters 23-28:
Warning: the token OUTER is unused.
File "java.mly", line 58, characters 14-18:
Warning: the token REST is unused.
File "java.mly", line 59, characters 24-27:
Warning: the token VAR is unused.
File "java.mly", line 59, characters 33-41:
Warning: the token VOLATILE is unused.
%{

  open Location
  open Ast_types
  open Ast

  let rec build_array_type t n =
    if n=0 then t else Array_type_expr(build_array_type t (pred n))

  let rec build_array_creation_expr t (l,n) =
    match l with
      | [] ->
	  Implicit_array_creation(build_array_type t n)
      | a::b ->
	  Explicit_array_creation(a,(build_array_creation_expr t (b,n)))

  let extend_loc l =
    Location.extend_loc !Java_parser_base.cur_base l (symbol_end())

%}
%start compilation_unit
%token ABSTRACT
%token AMPERSAND
%token AMPERSANDAMPERSAND
%token <string> ASSIGNOP
%token <Location.t> BANG
%token BOOLEAN
%token <Location.t> BREAK
%token BYTE
%token BYVALUE
%token CARET
%token CASE
%token CAST
%token CATCH
%token CHAR
%token <Location.t * char> CHARACTER
%token CLASS
%token COLON
%token COMMA
%token <string> COMP
%token CONST
%token <Location.t> CONTINUE
%token DEFAULT
%token <Location.t> DO
%token <string> DOC_COMMENT
%token DOT
%token DOUBLE
%token ELSE
%token EOF
%token EQ
%token <string> EQOP
%token EXTENDS
%token <Location.t> FALSE
%token FINAL
%token FINALLY
%token FLOAT
%token <Location.t> FOR
%token FUTURE
%token GENERIC
%token GOTO
%token <Location.t * string> ID
%token <Location.t> IF
%token IMPLEMENTS
%token IMPORT
%token INNER
%token INSTANCEOF
%token INT
%token <Location.t * int> INTEGER
%token INTERFACE
%token <Ast_types.expr> JML_ASSERTION
%token <Ast_types.jml_declaration list> JML_DECLARATIONS
%token <Ast_types.loop_annotation> JML_LOOP_ANNOTATION
%token <Ast_types.method_specification> JML_METHOD_SPECIFICATION
%token JML_PURE
%token JML_SPEC_PUBLIC
%token <Ast_types.statement_specification> JML_STATEMENT_SPECIFICATION
%token LEFTBRACE
%token LEFTBRACKET
%token <Location.t> LEFTPAR
%token LONG
%token <Location.t> MINUS
%token <Location.t> MINUSMINUS
%token NATIVE
%token <Location.t> NEW
%token <Location.t> NULL
%token OPERATOR
%token OUTER
%token PACKAGE
%token PERCENT
%token <Location.t> PLUS
%token <Location.t> PLUSPLUS
%token PRIVATE
%token PROTECTED
%token PUBLIC
%token QUESTIONMARK
%token <Location.t * Why.float_repr> REAL
%token REST
%token <Location.t> RETURN
%token RIGHTBRACE
%token RIGHTBRACKET
%token RIGHTPAR
%token SEMICOLON
%token <string> SHIFT
%token SHORT
%token SLASH
%token STAR
%token STATIC
%token <Location.t * string> STRING
%token <Location.t> SUPER
%token <Location.t> SWITCH
%token <Location.t> SYNCHRONIZED
%token <Location.t> THIS
%token <Location.t> THROW
%token THROWS
%token <Location.t> TILDA
%token TRANSIENT
%token <Location.t> TRUE
%token <Location.t> TRY
%token VAR
%token VERTICALBAR
%token VERTICALBARVERTICALBAR
%token VOID
%token VOLATILE
%token <Location.t> WHILE
%nonassoc THEN
%nonassoc ELSE
%right ASSIGNOP EQ
%right IFEXPR QUESTIONMARK
%left VERTICALBARVERTICALBAR
%left AMPERSANDAMPERSAND
%left VERTICALBAR
%left CARET
%left AMPERSAND
%left EQOP
%left COMP INSTANCEOF
%left SHIFT
%left MINUS PLUS
%left PERCENT SLASH STAR
%right BANG CAST MINUSMINUS PLUSPLUS TILDA UMINUS UPLUS
%type <Ast_types.compilation_unit> compilation_unit
%type <Ast_types.qualified_ident> name
%%

compilation_unit:
  _1 = package_declaration _2 = import_declarations _3 = type_declarations _4 = EOF
    {    ( { cu_package = _1 ;
	cu_imports = _2 ;
	cu_type_decls = _3} )}

package_declaration:
  
    {    ( [] )}
| _1 = PACKAGE _2 = name _3 = SEMICOLON
    {    ( _2 )}

import_declarations:
  
    {    ( [] )}
| _1 = IMPORT _2 = import_declaration _3 = SEMICOLON _4 = import_declarations
    {    ( _2::_4 )}

import_declaration:
  _1 = name _2 = DOT _3 = STAR
    {    ( Import_package(_1) )}
| _1 = name
    {    ( Import_class_or_interface(_1) )}

type_declarations:
  
    {    ( [] )}
| _1 = type_declaration _2 = type_declarations
    {    ( _1::_2 )}
| _1 = SEMICOLON _2 = type_declarations
    {    ( _2 )}

doc_comment:
  
    {    ( "" )}
| _1 = DOC_COMMENT
    {    ( _1 )}

jml_loop_annot:
  
    {    ( default_loop_annotation )}
| _1 = JML_LOOP_ANNOTATION
    {    ( _1 )}

type_declaration:
  _1 = doc_comment _2 = class_declaration
    {    ( (_1,Class(_2)) )}
| _1 = doc_comment _2 = interface_declaration
    {    ( (_1,Interface(_2)) )}

class_declaration:
  _1 = modifiers _2 = CLASS _3 = ident _4 = extends_decl _5 = implements_decl _6 = LEFTBRACE _7 = field_declarations _8 = RIGHTBRACE
    {    ( { class_modifiers = _1;
	class_name = _3;
	class_extends = _4;
	class_implements = _5;
	class_fields = _7 })}

extends_decl:
  
    {    ( None )}
| _1 = EXTENDS _2 = name
    {    ( Some _2 )}

implements_decl:
  
    {    ( [] )}
| _1 = IMPLEMENTS _2 = name_comma_list
    {    ( _2 )}

field_declarations:
  
    {    ( [] )}
| _1 = field_declaration _2 = field_declarations
    {    ( _1::_2 )}

field_declaration:
  _1 = doc_comment _2 = method_declaration
    {    ( (_1,_2) )}
| _1 = doc_comment _2 = constructor_declaration
    {    ( (_1,Constructor(_2)) )}
| _1 = doc_comment _2 = variable_declaration
    {    ( (_1,Variable(_2)) )}
| _1 = doc_comment _2 = static_initializer
    {    ( (_1,Static_initializer(_2)) )}
| _1 = doc_comment _2 = jml_declaration
    {    ( (_1,Specification(_2)) )}

jml_declaration:
  _1 = JML_DECLARATIONS
    {    ( _1 )}

variable_declaration:
  _1 = modifiers _2 = type_expr _3 = variable_declarators _4 = SEMICOLON
    {    ( { variable_modifiers = _1 ;
	variable_type = _2 ;
	variable_decls = _3 } )}

variable_declarators:
  _1 = variable_declarator
    {    ( [_1] )}
| _1 = variable_declarator _2 = COMMA _3 = variable_declarators
    {    ( _1::_3 )}

variable_declarator:
  _1 = variable_declarator_id
    {    ( { variable_id = _1 ;
	variable_initializer = None } )}
| _1 = variable_declarator_id _2 = EQ _3 = variable_initializer
    {    ( { variable_id = _1 ;
	variable_initializer = Some _3 } )}

variable_declarator_id:
  _1 = ident
    {    ( let (loc,id)=_1 in Simple_id(loc,id) )}
| _1 = variable_declarator_id _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Array_id(_1) )}

variable_initializer:
  _1 = expr
    {    ( Simple_initializer(_1) )}
| _1 = LEFTBRACE _2 = variable_initializers _3 = RIGHTBRACE
    {    ( Array_initializer(_2) )}

variable_initializers:
  
    {    ( [] )}
| _1 = variable_initializer
    {    ( [_1] )}
| _1 = variable_initializer _2 = COMMA _3 = variable_initializers
    {    ( _1::_3 )}

static_initializer:
  _1 = STATIC _2 = block
    {    ( _2 )}

method_declaration:
  _1 = method_header _2 = method_body
    {    ( Method(_1,_2) )}

method_header:
  _1 = method_specification _2 = modifiers _3 = type_expr _4 = method_declarator _5 = throws_decl
    {    ( { method_specification = _1 ;
	method_modifiers = _2 ;
	method_return_type = Some(_3) ;
	method_declarator = _4 ;
	method_throws = _5 } )}
| _1 = modifiers _2 = type_expr _3 = method_declarator _4 = throws_decl
    {    ( { method_specification = default_method_specification ;
	method_modifiers = _1 ;
	method_return_type = Some(_2) ;
	method_declarator = _3 ;
	method_throws = _4 } )}
| _1 = method_specification _2 = modifiers _3 = VOID _4 = method_declarator _5 = throws_decl
    {    ( { method_specification = _1 ;
	method_modifiers = _2 ;
	method_return_type = None ;
	method_declarator = _4 ;
	method_throws = _5 } )}
| _1 = modifiers _2 = VOID _3 = method_declarator _4 = throws_decl
    {    ( { method_specification = default_method_specification ;
	method_modifiers = _1 ;
	method_return_type = None ;
	method_declarator = _3 ;
	method_throws = _4 } )}

method_specification:
  _1 = JML_METHOD_SPECIFICATION
    {    ( _1 )}
| _1 = JML_METHOD_SPECIFICATION _2 = method_specification
    {    ( concat_specs _1 _2 )}

method_declarator:
  _1 = ident _2 = method_parameters
    {    ( Simple_method_declarator(_1,_2) )}
| _1 = method_declarator _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Array_method_declarator(_1) )}

method_parameters:
  _1 = LEFTPAR _2 = RIGHTPAR
    {    ( [] )}
| _1 = LEFTPAR _2 = parameter_comma_list _3 = RIGHTPAR
    {    ( _2 )}

parameter_comma_list:
  _1 = parameter
    {    ( [_1] )}
| _1 = parameter _2 = COMMA _3 = parameter_comma_list
    {    ( _1::_3 )}

parameter:
  _1 = type_expr _2 = ident
    {    ( Simple_parameter(_1,_2) )}
| _1 = parameter _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Array_parameter(_1) )}

throws_decl:
  
    {    ( [] )}
| _1 = THROWS _2 = name_comma_list
    {    ( _2 )}

method_body:
  _1 = block
    {    ( Some(_1) )}
| _1 = SEMICOLON
    {    ( None )}

constructor_declaration:
  _1 = method_specification _2 = modifiers _3 = ident _4 = method_parameters _5 = throws_decl _6 = constructor_body
    {    ( { constr_specification = _1 ;
	constr_modifiers = _2 ;
	constr_name = _3 ;
	constr_parameters = _4 ;
	constr_throws = _5 ;
	constr_body = _6 } )}
| _1 = modifiers _2 = ident _3 = method_parameters _4 = throws_decl _5 = constructor_body
    {    ( { constr_specification = default_method_specification ;
	constr_modifiers = _1 ;
	constr_name = _2 ;
	constr_parameters = _3 ;
	constr_throws = _4 ;
	constr_body = _5 } )}

constructor_body:
  _1 = LEFTBRACE _2 = explicit_constructor_invocation _3 = statements _4 = RIGHTBRACE
    {    ( (_2,_3) )}
| _1 = LEFTBRACE _2 = statements _3 = RIGHTBRACE
    {    ( (Invoke_none,_2) )}
| _1 = SEMICOLON
    {    ( (Invoke_none,[]) )}

explicit_constructor_invocation:
  _1 = THIS _2 = LEFTPAR _3 = argument_list _4 = RIGHTPAR _5 = SEMICOLON
    {    ( Invoke_this(_3) )}
| _1 = SUPER _2 = LEFTPAR _3 = argument_list _4 = RIGHTPAR _5 = SEMICOLON
    {    ( Invoke_super(_3) )}

argument_list:
  
    {    ( [] )}
| _1 = expr_comma_list
    {    ( _1 )}

interface_declaration:
  _1 = modifiers _2 = INTERFACE _3 = ident _4 = extends_interfaces_decl _5 = LEFTBRACE _6 = interface_member_declarations _7 = RIGHTBRACE
    {    ( { interface_modifiers = _1;
	interface_name = _3;
	interface_extends = _4;
	interface_members = _6 })}

extends_interfaces_decl:
  
    {    ( [] )}
| _1 = EXTENDS _2 = name_comma_list
    {    ( _2 )}

interface_member_declarations:
  
    {    ( [] )}
| _1 = interface_member_declaration _2 = interface_member_declarations
    {    ( _1::_2 )}

interface_member_declaration:
  _1 = doc_comment _2 = variable_declaration
    {    ( (_1,Constant_declaration(_2)) )}
| _1 = doc_comment _2 = method_header _3 = SEMICOLON
    {    ( (_1,Method_header(_2)) )}

base_type:
  _1 = SHORT
    {    ( "short" )}
| _1 = BOOLEAN
    {    ( "boolean" )}
| _1 = BYTE
    {    ( "byte" )}
| _1 = CHAR
    {    ( "char" )}
| _1 = INT
    {    ( "int" )}
| _1 = FLOAT
    {    ( "float" )}
| _1 = LONG
    {    ( "long" )}
| _1 = DOUBLE
    {    ( "double" )}

type_expr:
  _1 = name
    {    ( Type_name(_1) )}
| _1 = base_type
    {    ( Base_type(_1) )}
| _1 = array_type_expr
    {    ( Array_type_expr(_1) )}

array_type_expr:
  _1 = base_type _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Base_type(_1) )}
| _1 = name _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Type_name(_1) )}
| _1 = array_type_expr _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Array_type_expr(_1) )}

modifiers:
  
    {    ( [] )}
| _1 = modifier _2 = modifiers
    {    ( _1::_2 )}

modifier:
  _1 = STATIC
    {    ( `STATIC )}
| _1 = FINAL
    {    ( `FINAL )}
| _1 = PUBLIC
    {    ( `PUBLIC )}
| _1 = PRIVATE
    {    ( `PRIVATE )}
| _1 = PROTECTED
    {    ( `PROTECTED )}
| _1 = NATIVE
    {    ( `NATIVE )}
| _1 = SYNCHRONIZED
    {    ( `SYNCHRONIZED )}
| _1 = ABSTRACT
    {    ( `ABSTRACT )}
| _1 = TRANSIENT
    {    ( `TRANSIENT )}
| _1 = JML_PURE
    {    ( `PURE )}
| _1 = JML_SPEC_PUBLIC
    {    ( `SPEC_PUBLIC )}

block:
  _1 = LEFTBRACE _2 = statements _3 = RIGHTBRACE
    {    ( _2 )}

statements:
  _1 = statement _2 = statements
    {    ( _1::_2 )}
| 
    {    ( [] )}

local_variable_declaration:
  _1 = type_expr _2 = variable_declarators
    {    ( { variable_modifiers = [] ;
	variable_type = _1 ;
	variable_decls = _2 } )}

statement:
  _1 = annotated_statement
    {                      ( _1 )}
| _1 = jml_loop_annot _2 = WHILE _3 = LEFTPAR _4 = expr _5 = RIGHTPAR _6 = statement %prec WHILE
    {    ( mk_statement (extend_loc _2) (While(_1,_4,_6)) )}
| _1 = jml_loop_annot _2 = DO _3 = statement _4 = WHILE _5 = LEFTPAR _6 = expr _7 = RIGHTPAR
    {    ( mk_statement (extend_loc _2) (Do(_1,_3,_6)) )}
| _1 = jml_loop_annot _2 = FOR _3 = LEFTPAR _4 = statement_expr_list _5 = SEMICOLON _6 = for_cond _7 = SEMICOLON _8 = statement_expr_list _9 = RIGHTPAR _10 = statement
    {    ( mk_statement (extend_loc _2) (For(_1,_4,_6,_8,_10)) )}
| _1 = jml_loop_annot _2 = FOR _3 = LEFTPAR _4 = local_variable_declaration _5 = SEMICOLON _6 = for_cond _7 = SEMICOLON _8 = statement_expr_list _9 = RIGHTPAR _10 = statement
    {    ( mk_statement (extend_loc _2) (For_decl(_1,_4,_6,_8,_10)) )}
| _1 = JML_ASSERTION
    {    ( mk_statement_no_loc (Jml_assert(_1)) )}

annotated_statement:
  _1 = JML_METHOD_SPECIFICATION _2 = other_statement
    {    ( mk_statement _2.statement_loc
	(Annotated(to_statement_spec _1,_2)) )}
| _1 = other_statement
    {    ( _1 )}

other_statement:
  _1 = expr _2 = SEMICOLON
    {    ( mk_statement _1.expr_loc (Expr(_1)) )}
| _1 = SEMICOLON
    {    ( mk_statement_no_loc Skip )}
| _1 = local_variable_declaration _2 = SEMICOLON
    {    ( mk_statement_no_loc (Var_decl(_1)) )}
| _1 = IF _2 = LEFTPAR _3 = expr _4 = RIGHTPAR _5 = statement %prec THEN
    {    ( mk_statement (extend_loc _1)
	(If_statement(_3,_5,mk_statement_no_loc Skip)) )}
| _1 = IF _2 = LEFTPAR _3 = expr _4 = RIGHTPAR _5 = statement _6 = ELSE _7 = statement %prec ELSE
    {    ( mk_statement (extend_loc _1)
	(If_statement(_3,_5,_7)) )}
| _1 = SWITCH _2 = LEFTPAR _3 = expr _4 = RIGHTPAR _5 = LEFTBRACE _6 = switch_block _7 = RIGHTBRACE
    {    ( mk_statement (extend_loc _1)
	(Switch(_3,_6)) )}
| _1 = block
    {    ( make_block(_1) )}
| _1 = ident _2 = COLON _3 = statement
    {    ( mk_statement (extend_loc (fst _1)) (Label(snd _1,_3)) )}
| _1 = BREAK _2 = SEMICOLON
    {    ( mk_statement (extend_loc _1) (Break("")) )}
| _1 = BREAK _2 = ident _3 = SEMICOLON
    {    ( mk_statement (extend_loc _1) (Break(snd _2)) )}
| _1 = CONTINUE _2 = SEMICOLON
    {    ( mk_statement (extend_loc _1) (Continue("")) )}
| _1 = CONTINUE _2 = ident _3 = SEMICOLON
    {    ( mk_statement (extend_loc _1) (Continue(snd _2)) )}
| _1 = RETURN _2 = SEMICOLON
    {    ( mk_statement (extend_loc _1) (Return(None)) )}
| _1 = RETURN _2 = expr _3 = SEMICOLON
    {    ( mk_statement (extend_loc _1) (Return(Some(_2))) )}
| _1 = THROW _2 = expr _3 = SEMICOLON
    {    ( mk_statement (extend_loc _1) (Throw(_2)) )}
| _1 = TRY _2 = block _3 = catch_clauses
    {    ( mk_statement (extend_loc _1) (Try(_2,_3,None)) )}
| _1 = TRY _2 = block _3 = catch_clauses _4 = FINALLY _5 = block
    {    ( mk_statement (extend_loc _1) (Try(_2,_3,Some(_5))) )}
| _1 = TRY _2 = block _3 = FINALLY _4 = block
    {    ( mk_statement (extend_loc _1) (Try(_2,[],Some(_4))) )}
| _1 = SYNCHRONIZED _2 = LEFTPAR _3 = expr _4 = RIGHTPAR _5 = block
    {    ( mk_statement (extend_loc _1) (Synchronized(_3,_5)) )}

for_cond:
  _1 = expr
    {    ( _1 )}
| 
    {    ( mk_expr_no_loc (Lit(Bool(true))) )}

switch_block:
  
    {    ( [] )}
| _1 = switch_labels
    {    ( [(_1,[])] )}
| _1 = switch_labels _2 = statement _3 = statements _4 = switch_block
    {    ( (_1,_2::_3)::_4 )}

switch_labels:
  _1 = switch_label
    {    ( [_1] )}
| _1 = switch_label _2 = switch_labels
    {    ( _1::_2 )}

switch_label:
  _1 = CASE _2 = expr _3 = COLON
    {    ( Case(_2) )}
| _1 = DEFAULT _2 = COLON
    {    ( Default )}

catch_clauses:
  _1 = catch_clause
    {    ( [_1] )}
| _1 = catch_clause _2 = catch_clauses
    {    ( _1::_2 )}

catch_clause:
  _1 = CATCH _2 = LEFTPAR _3 = parameter _4 = RIGHTPAR _5 = block
    {    ( (_3,_5) )}

field_access:
  _1 = SUPER _2 = DOT _3 = ident
    {    ( let (l,_) as id = _3 in
      (merge_locs _1 l, Super_access(id)) )}
| _1 = primary_expr _2 = DOT _3 = ident
    {    ( let e = _1 and (l,_) as id = _3 in
      (merge_locs e.expr_loc l,Primary_access(e,id)) )}

primary_expr:
  _1 = primary_no_new_array
    {    ( _1 )}
| _1 = array_creation_expression
    {    ( _1 )}

primary_no_new_array:
  _1 = INTEGER
    {    ( let (loc,n)=_1 in mk_lit loc (Int(n)) )}
| _1 = REAL
    {    ( let (loc,r)=_1 in mk_lit loc (Float(r)) )}
| _1 = TRUE
    {    ( let loc=_1 in mk_lit loc (Bool(true)) )}
| _1 = FALSE
    {    ( let loc=_1 in mk_lit loc (Bool(false)) )}
| _1 = STRING
    {    ( let (loc,n)=_1 in mk_lit loc (String(n)) )}
| _1 = NULL
    {    ( let loc=_1 in mk_lit loc Null )}
| _1 = CHARACTER
    {    ( let (loc,n)=_1 in mk_lit loc (Char(n)) )}
| _1 = THIS
    {    ( let loc=_1 in mk_expr loc This )}
| _1 = LEFTPAR _2 = expr_no_name _3 = RIGHTPAR
    {    ( _2 )}
| _1 = LEFTPAR _2 = name _3 = RIGHTPAR
    {    ( expand_name _2 )}
| _1 = field_access
    {    ( let (loc,fa)=_1 in mk_expr loc (Field_access(fa)) )}
| _1 = ident _2 = LEFTPAR _3 = argument_list _4 = RIGHTPAR
    {    ( let (l,_) as id = _1 in
      mk_expr
	(extend_loc l)
	(Method_call(None,id,_3)) )}
| _1 = name _2 = DOT _3 = ident _4 = LEFTPAR _5 = argument_list _6 = RIGHTPAR
    {    ( let n = expand_name _1 in
      mk_expr
	(extend_loc n.expr_loc)
	(Method_call(Some n,_3,_5)) )}
| _1 = primary_expr _2 = DOT _3 = ident _4 = LEFTPAR _5 = argument_list _6 = RIGHTPAR
    {    ( let e = _1 in
      mk_expr
	(extend_loc e.expr_loc)
	(Method_call(Some e,_3,_5)) )}
| _1 = NEW _2 = name _3 = LEFTPAR _4 = argument_list _5 = RIGHTPAR
    {    ( let l = _1 in
      mk_expr
	(extend_loc l)
	(Class_instance_creation(_2,_4)) )}
| _1 = array_access
    {    ( let (l,a,b)=_1 in
      mk_expr l (Array_access(a,b)) )}

array_access:
  _1 = primary_no_new_array _2 = LEFTBRACKET _3 = expr _4 = RIGHTBRACKET
    {    ( let e=_1 in
      (extend_loc e.expr_loc,e,_3) )}
| _1 = name _2 = LEFTBRACKET _3 = expr _4 = RIGHTBRACKET
    {    ( let e = expand_name _1 in
      (extend_loc e.expr_loc,e,_3) )}

array_creation_expression:
  _1 = NEW _2 = base_type _3 = array_dims
    {    ( let l = _1 in
      mk_expr
	(extend_loc l)
	(Array_creation(build_array_creation_expr (Base_type(_2)) _3)) )}
| _1 = NEW _2 = name _3 = array_dims
    {    ( let l = _1 in
      mk_expr
	(extend_loc l)
	(Array_creation(build_array_creation_expr (Type_name(_2)) _3)) )}

array_dims:
  _1 = LEFTBRACKET _2 = expr _3 = RIGHTBRACKET _4 = implicit_dims
    {    ( ([_2],_4) )}
| _1 = LEFTBRACKET _2 = expr _3 = RIGHTBRACKET _4 = array_dims
    {    ( let (a,b) = _4 in (_2::a,b) )}

implicit_dims:
  
    {    ( 0 )}
| _1 = LEFTBRACKET _2 = RIGHTBRACKET _3 = implicit_dims
    {    ( succ _3 )}

castable_expr:
  _1 = primary_expr
    {    ( _1 )}
| _1 = name
    {    ( expand_name _1 )}
| _1 = non_basic_cast
    {    ( _1 )}

non_basic_cast:
  _1 = LEFTPAR _2 = array_type_expr _3 = RIGHTPAR _4 = castable_expr %prec CAST
    {    ( let l=_1 and e=_4 in
      mk_expr
	(merge_locs l e.expr_loc)
	(Cast(Array_type_expr(_2),e)) )}
| _1 = LEFTPAR _2 = name _3 = RIGHTPAR _4 = castable_expr %prec CAST
    {    ( let l=_1 and e=_4 in
      mk_expr
	(merge_locs l e.expr_loc)
	(Cast(Type_name(_2),e)) )}

statement_expr_list:
  
    {    ( [] )}
| _1 = statement_expr_ne_list
    {    ( _1 )}

statement_expr_ne_list:
  _1 = expr
    {    ( [mk_statement _1.expr_loc (Expr(_1))] )}
| _1 = expr _2 = COMMA _3 = statement_expr_ne_list
    {    ( (mk_statement _1.expr_loc (Expr(_1)))::_3 )}

expr:
  _1 = name
    {    ( expand_name _1 )}
| _1 = expr_no_name
    {    ( _1 )}

expr_no_name:
  _1 = name _2 = assign_op _3 = expr %prec ASSIGNOP
    {    ( let n = _1 in
      let e = expand_name n in
      mk_expr
	(extend_loc e.expr_loc)
	(Assign_name(n,_2,_3)) )}
| _1 = field_access _2 = assign_op _3 = expr %prec ASSIGNOP
    {    ( let (l,f) = _1 in
      mk_expr
	(extend_loc l)
	(Assign_field(f,_2,_3)) )}
| _1 = array_access _2 = assign_op _3 = expr %prec ASSIGNOP
    {    ( let (l,a,b)=_1 in
      mk_expr
	(extend_loc l)
	(Assign_array(a,b,_2,_3)) )}
| _1 = PLUSPLUS _2 = expr
    {    ( let l=_1 and e=_2 in
      mk_prepost (merge_locs l e.expr_loc) `PREINCR e )}
| _1 = MINUSMINUS _2 = expr
    {    ( let l=_1 and e=_2 in
      mk_prepost (merge_locs l e.expr_loc) `PREDECR e )}
| _1 = expr _2 = PLUSPLUS
    {    ( let e = _1 and l=_2 in
      mk_prepost (merge_locs e.expr_loc l) `POSTINCR e )}
| _1 = expr _2 = MINUSMINUS
    {    ( let e = _1 and l=_2 in
      mk_prepost (merge_locs e.expr_loc l) `POSTDECR e )}
| _1 = primary_expr
    {    ( _1 )}
| _1 = expr _2 = QUESTIONMARK _3 = expr _4 = COLON _5 = expr %prec IFEXPR
    {    ( let e1=_1 and e3=_5 in
      mk_expr
	(merge_locs e1.expr_loc e3.expr_loc)
	(If_expr(e1,_3,e3)) )}
| _1 = expr _2 = VERTICALBARVERTICALBAR _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "||" e2 )}
| _1 = expr _2 = AMPERSANDAMPERSAND _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "&&" e2 )}
| _1 = expr _2 = VERTICALBAR _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "|" e2 )}
| _1 = expr _2 = CARET _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "^" e2 )}
| _1 = expr _2 = AMPERSAND _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "&" e2 )}
| _1 = expr _2 = EQOP _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 _2 e2 )}
| _1 = expr _2 = COMP _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 _2 e2 )}
| _1 = expr _2 = SHIFT _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 _2 e2  )}
| _1 = expr _2 = PLUS _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "+" e2 )}
| _1 = expr _2 = MINUS _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "-" e2 )}
| _1 = expr _2 = STAR _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "*" e2 )}
| _1 = expr _2 = SLASH _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "/" e2 )}
| _1 = expr _2 = PERCENT _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "%" e2 )}
| _1 = PLUS _2 = expr %prec UPLUS
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "+" e )}
| _1 = MINUS _2 = expr %prec UMINUS
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "-" e )}
| _1 = BANG _2 = expr
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "!" e )}
| _1 = TILDA _2 = expr
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "~" e )}
| _1 = LEFTPAR _2 = base_type _3 = RIGHTPAR _4 = expr %prec CAST
    {    ( let l=_1 and e=_4 in
      mk_expr
	(merge_locs l e.expr_loc)
	(Cast(Base_type(_2),e)) )}
| _1 = non_basic_cast
    {    ( _1 )}
| _1 = expr _2 = INSTANCEOF _3 = type_expr
    {    ( let e=_1 in
      mk_expr
	(extend_loc e.expr_loc)
	(Instanceof(e,_3)) )}

expr_comma_list:
  _1 = expr
    {    ( [_1] )}
| _1 = expr _2 = COMMA _3 = expr_comma_list
    {    ( _1::_3 )}

assign_op:
  _1 = EQ
    {    ( "=" )}
| _1 = ASSIGNOP
    {    ( _1 )}

name:
  _1 = ident
    {    ( [_1] )}
| _1 = name _2 = DOT _3 = ident
    {    ( _3::_1 )}

name_comma_list:
  _1 = name
    {    ( [_1] )}
| _1 = name _2 = COMMA _3 = name_comma_list
    {    ( _1::_3 )}

ident:
  _1 = ID
    {    ( _1 )}

%%
