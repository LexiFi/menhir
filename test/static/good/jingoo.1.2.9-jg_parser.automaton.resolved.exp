State 0:
## Known stack suffix:
##
## LR(1) items:
input' -> . input [ # ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On EOF shift to state 289
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 290
-- On stmt shift to state 260
-- On input shift to state 292
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 1:
## Known stack suffix:
## error
## LR(1) items:
stmt -> error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> error

State 2:
## Known stack suffix:
## WITH
## LR(1) items:
stmt -> WITH . expr_list stmts ENDWITH [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> WITH . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 3
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr_list shift to state 180
-- On expr shift to state 226
## Reductions:
-- On WITH TEXT SET RAWINCLUDE MACRO INCLUDE IMPORT IF FROM FOR FILTER EXTENDS CALL BLOCK AUTOESCAPE
--   reduce production expr_list ->

State 3:
## Known stack suffix:
## WITH error
## LR(1) items:
stmt -> WITH error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> WITH error

State 4:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRUE

State 5:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> STRING

State 6:
## Known stack suffix:
## NULL
## LR(1) items:
expr -> NULL . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> NULL

State 7:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 179
## Reductions:

State 8:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 178
## Reductions:

State 9:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LPAREN . expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LPAREN . error [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On error shift to state 10
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 176
-- On expr shift to state 153
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 10:
## Known stack suffix:
## LPAREN error
## LR(1) items:
expr -> LPAREN error . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN error

State 11:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRUE

State 12:
## Known stack suffix:
## STRING
## LR(1) items:
expr -> STRING . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> STRING

State 13:
## Known stack suffix:
## NULL
## LR(1) items:
expr -> NULL . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> NULL

State 14:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 175
## Reductions:

State 15:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 174
## Reductions:

State 16:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN . expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN . error [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On error shift to state 17
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 172
-- On expr shift to state 78
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 17:
## Known stack suffix:
## LPAREN error
## LR(1) items:
expr -> LPAREN error . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN error

State 18:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . expr_list RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 85
-- On expr shift to state 30
## Reductions:
-- On RBRACKET
--   reduce production expr_list ->

State 19:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . assoc_list RBRACE [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 160
-- On assoc_list shift to state 170
-- On assoc shift to state 166
## Reductions:

State 20:
## Known stack suffix:
## LBRACKET
## LR(1) items:
expr -> LBRACKET . expr_list RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 92
-- On expr shift to state 30
## Reductions:
-- On RBRACKET
--   reduce production expr_list ->

State 21:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INT

State 22:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ EQ DOT DIV COMMA AS AND ]
ident -> IDENT . error [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ EQ DOT DIV COMMA AS AND ]
## Transitions:
-- On error shift to state 23
## Reductions:
-- On VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ EQ DOT DIV COMMA AS AND
--   reduce production ident -> IDENT

State 23:
## Known stack suffix:
## IDENT error
## LR(1) items:
ident -> IDENT error . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ EQ DOT DIV COMMA AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT error

State 24:
## Known stack suffix:
## FLOAT
## LR(1) items:
expr -> FLOAT . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FLOAT

State 25:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FALSE

State 26:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> ident . EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> ident . AS ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> ident . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On LPAREN shift to state 27
-- On EQ shift to state 88
-- On AS shift to state 90
## Reductions:
-- On VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND
--   reduce production expr -> ident

State 27:
## Known stack suffix:
## ident LPAREN
## LR(1) items:
expr -> ident LPAREN . expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 28
-- On expr shift to state 30
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 28:
## Known stack suffix:
## ident LPAREN expr_list
## LR(1) items:
expr -> ident LPAREN expr_list . RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RPAREN shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## ident LPAREN expr_list RPAREN
## LR(1) items:
expr -> ident LPAREN expr_list RPAREN . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident LPAREN expr_list RPAREN

State 30:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TIMES RPAREN RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr_list -> expr . [ RPAREN RBRACKET ]
expr_list -> expr . COMMA expr_list [ RPAREN RBRACKET ]
expr_list -> expr . COMMA error [ RPAREN RBRACKET ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On COMMA shift to state 80
-- On AND shift to state 71
## Reductions:
-- On RPAREN RBRACKET
--   reduce production expr_list -> expr

State 31:
## Known stack suffix:
## expr VLINE
## LR(1) items:
expr -> expr VLINE . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## expr VLINE expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr VLINE expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On POWER shift to state 33
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
## Reductions:
-- On VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ DIV COMMA AND
--   reduce production expr -> expr VLINE expr

State 33:
## Known stack suffix:
## expr POWER
## LR(1) items:
expr -> expr POWER . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## expr POWER expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr POWER expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On POWER shift to state 33
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
## Reductions:
-- On VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ DIV COMMA AND
--   reduce production expr -> expr POWER expr

State 35:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 36
-- On expr shift to state 30
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 36:
## Known stack suffix:
## expr LPAREN expr_list
## LR(1) items:
expr -> expr LPAREN expr_list . RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RPAREN shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr LPAREN expr_list RPAREN
## LR(1) items:
expr -> expr LPAREN expr_list RPAREN . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LPAREN expr_list RPAREN

State 38:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On STRING shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr LBRACKET STRING
## LR(1) items:
expr -> expr LBRACKET STRING . RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RBRACKET shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## expr LBRACKET STRING RBRACKET
## LR(1) items:
expr -> expr LBRACKET STRING RBRACKET . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LBRACKET STRING RBRACKET

State 41:
## Known stack suffix:
## expr IS
## LR(1) items:
expr -> expr IS . expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr IS . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## expr IS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr IS expr . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr IS expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TRUE shift to state 11
-- On TIMES shift to state 43
-- On STRING shift to state 12
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 73
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 75
-- On LBRACKET shift to state 83
-- On LBRACE shift to state 19
-- On IS shift to state 41
-- On INT shift to state 21
-- On IN shift to state 45
-- On IDENT shift to state 22
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
-- On ident shift to state 26
-- On expr shift to state 87
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production expr -> expr IS expr

State 43:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr TIMES expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On POWER shift to state 33
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
## Reductions:
-- On TRUE TIMES STRING RPAREN RBRACKET RBRACE PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ DIV COMMA AND
--   reduce production expr -> expr TIMES expr

State 45:
## Known stack suffix:
## expr IN
## LR(1) items:
expr -> expr IN . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## expr IN expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr IN expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE NULL NOT LBRACE INT IDENT FLOAT FALSE COMMA
--   reduce production expr -> expr IN expr

State 47:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr PLUS expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On MOD shift to state 49
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE PLUS OR NULL NOT NEQ MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr PLUS expr

State 49:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr MOD expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On POWER shift to state 33
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
## Reductions:
-- On TRUE TIMES STRING RPAREN RBRACKET RBRACE PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ DIV COMMA AND
--   reduce production expr -> expr MOD expr

State 51:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On IDENT shift to state 22
-- On ident shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expr DOT ident
## LR(1) items:
expr -> expr DOT ident . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr DOT ident

State 53:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr DIV expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On POWER shift to state 33
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
## Reductions:
-- On TRUE TIMES STRING RPAREN RBRACKET RBRACE PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ DIV COMMA AND
--   reduce production expr -> expr DIV expr

State 55:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr OR expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT LBRACE INT IDENT FLOAT FALSE COMMA
--   reduce production expr -> expr OR expr

State 57:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr NEQ expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT NEQ LBRACE INT IDENT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr NEQ expr

State 59:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr MINUS expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On MOD shift to state 49
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE PLUS OR NULL NOT NEQ MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr MINUS expr

State 61:
## Known stack suffix:
## expr LT_EQ
## LR(1) items:
expr -> expr LT_EQ . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## expr LT_EQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr LT_EQ expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT NEQ LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr LT_EQ expr

State 63:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr LT expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT NEQ LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr LT expr

State 65:
## Known stack suffix:
## expr GT_EQ
## LR(1) items:
expr -> expr GT_EQ . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## expr GT_EQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr GT_EQ expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT NEQ LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr GT_EQ expr

State 67:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr GT expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT NEQ LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr GT expr

State 69:
## Known stack suffix:
## expr EQ_EQ
## LR(1) items:
expr -> expr EQ_EQ . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## expr EQ_EQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr EQ_EQ expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT NEQ LBRACE INT IDENT FLOAT FALSE EQ_EQ COMMA AND
--   reduce production expr -> expr EQ_EQ expr

State 71:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr AND expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE OR NULL NOT LBRACE INT IDENT FLOAT FALSE COMMA AND
--   reduce production expr -> expr AND expr

State 73:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> MINUS . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr MINUS . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> MINUS expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr MINUS expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE NULL NOT LBRACE INT IDENT FLOAT FALSE COMMA
--   reduce production expr -> MINUS expr

State 75:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN . expr RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN . expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN . error [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On error shift to state 17
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 76
-- On expr shift to state 78
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 76:
## Known stack suffix:
## expr LPAREN expr_list
## LR(1) items:
expr -> expr LPAREN expr_list . RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN expr_list . RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RPAREN shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## expr LPAREN expr_list RPAREN
## LR(1) items:
expr -> expr LPAREN expr_list RPAREN . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN expr_list RPAREN . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LPAREN expr_list RPAREN

State 78:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN expr . RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr_list -> expr . [ RPAREN ]
expr_list -> expr . COMMA expr_list [ RPAREN ]
expr_list -> expr . COMMA error [ RPAREN ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On RPAREN shift to state 79
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On COMMA shift to state 80
-- On AND shift to state 71
## Reductions:

State 79:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr RPAREN

State 80:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_list -> expr COMMA . expr_list [ RPAREN RBRACKET ]
expr_list -> expr COMMA . error [ RPAREN RBRACKET ]
## Transitions:
-- On error shift to state 81
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 82
-- On expr shift to state 30
## Reductions:
-- On RPAREN RBRACKET
--   reduce production expr_list ->

State 81:
## Known stack suffix:
## expr COMMA error
## LR(1) items:
expr_list -> expr COMMA error . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> expr COMMA error

State 82:
## Known stack suffix:
## expr COMMA expr_list
## LR(1) items:
expr_list -> expr COMMA expr_list . [ RPAREN RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> expr COMMA expr_list

State 83:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> LBRACKET . expr_list RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 84
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 85
-- On expr shift to state 30
## Reductions:
-- On RBRACKET
--   reduce production expr_list ->

State 84:
## Known stack suffix:
## expr LBRACKET STRING
## LR(1) items:
expr -> STRING . [ VLINE TIMES RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr LBRACKET STRING . RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RBRACKET shift to state 40
## Reductions:
-- On VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND
--   reduce production expr -> STRING

State 85:
## Known stack suffix:
## LBRACKET expr_list
## LR(1) items:
expr -> LBRACKET expr_list . RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RBRACKET shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## LBRACKET expr_list RBRACKET
## LR(1) items:
expr -> LBRACKET expr_list RBRACKET . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACKET expr_list RBRACKET

State 87:
## Known stack suffix:
## expr IS expr expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr IS expr expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE NULL NOT LBRACE INT IDENT FLOAT FALSE COMMA
--   reduce production expr -> expr IS expr expr

State 88:
## Known stack suffix:
## ident EQ
## LR(1) items:
expr -> ident EQ . expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## ident EQ expr
## LR(1) items:
expr -> ident EQ expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
## Reductions:
-- On TRUE STRING RPAREN RBRACKET RBRACE NULL NOT LBRACE INT IDENT FLOAT FALSE COMMA
--   reduce production expr -> ident EQ expr

State 90:
## Known stack suffix:
## ident AS
## LR(1) items:
expr -> ident AS . ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On IDENT shift to state 22
-- On ident shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## ident AS ident
## LR(1) items:
expr -> ident AS ident . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident AS ident

State 92:
## Known stack suffix:
## LBRACKET expr_list
## LR(1) items:
expr -> LBRACKET expr_list . RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RBRACKET shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## LBRACKET expr_list RBRACKET
## LR(1) items:
expr -> LBRACKET expr_list RBRACKET . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACKET expr_list RBRACKET

State 94:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . assoc_list RBRACE [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 160
-- On assoc_list shift to state 164
-- On assoc shift to state 166
## Reductions:

State 95:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> INT

State 96:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AS AND ]
ident -> IDENT . error [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AS AND ]
## Transitions:
-- On error shift to state 97
## Reductions:
-- On WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AS AND
--   reduce production ident -> IDENT

State 97:
## Known stack suffix:
## IDENT error
## LR(1) items:
ident -> IDENT error . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT error

State 98:
## Known stack suffix:
## FLOAT
## LR(1) items:
expr -> FLOAT . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FLOAT

State 99:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FALSE

State 100:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> ident . EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> ident . AS ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> ident . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On LPAREN shift to state 101
-- On EQ shift to state 104
-- On AS shift to state 158
## Reductions:
-- On error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> ident

State 101:
## Known stack suffix:
## ident LPAREN
## LR(1) items:
expr -> ident LPAREN . expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 102
-- On expr shift to state 30
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 102:
## Known stack suffix:
## ident LPAREN expr_list
## LR(1) items:
expr -> ident LPAREN expr_list . RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RPAREN shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## ident LPAREN expr_list RPAREN
## LR(1) items:
expr -> ident LPAREN expr_list RPAREN . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident LPAREN expr_list RPAREN

State 104:
## Known stack suffix:
## ident EQ
## LR(1) items:
expr -> ident EQ . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## ident EQ expr
## LR(1) items:
expr -> ident EQ expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE
--   reduce production expr -> ident EQ expr

State 106:
## Known stack suffix:
## expr VLINE
## LR(1) items:
expr -> expr VLINE . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## expr VLINE expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr VLINE expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On POWER shift to state 108
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
## Reductions:
-- On error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr VLINE expr

State 108:
## Known stack suffix:
## expr POWER
## LR(1) items:
expr -> expr POWER . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## expr POWER expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr POWER expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On POWER shift to state 108
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
## Reductions:
-- On error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr POWER expr

State 110:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 111
-- On expr shift to state 30
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 111:
## Known stack suffix:
## expr LPAREN expr_list
## LR(1) items:
expr -> expr LPAREN expr_list . RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RPAREN shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## expr LPAREN expr_list RPAREN
## LR(1) items:
expr -> expr LPAREN expr_list RPAREN . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LPAREN expr_list RPAREN

State 113:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On STRING shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## expr LBRACKET STRING
## LR(1) items:
expr -> expr LBRACKET STRING . RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RBRACKET shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## expr LBRACKET STRING RBRACKET
## LR(1) items:
expr -> expr LBRACKET STRING RBRACKET . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LBRACKET STRING RBRACKET

State 116:
## Known stack suffix:
## expr IS
## LR(1) items:
expr -> expr IS . expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr IS . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## expr IS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr IS expr . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr IS expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TRUE shift to state 4
-- On TIMES shift to state 118
-- On STRING shift to state 5
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 148
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 150
-- On LBRACKET shift to state 155
-- On LBRACE shift to state 94
-- On IS shift to state 116
-- On INT shift to state 95
-- On IN shift to state 120
-- On IDENT shift to state 96
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
-- On ident shift to state 100
-- On expr shift to state 157
## Reductions:
-- On error WITHOUT WITH TEXT SET RAWINCLUDE MACRO INCLUDE IMPORT IF FROM FOR FILTER EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE
--   reduce production expr -> expr IS expr

State 118:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr TIMES expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On POWER shift to state 108
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
## Reductions:
-- On error WITHOUT WITH TRUE TIMES TEXT STRING SET RAWINCLUDE PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr TIMES expr

State 120:
## Known stack suffix:
## expr IN
## LR(1) items:
expr -> expr IN . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## expr IN expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr IN expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE
--   reduce production expr -> expr IN expr

State 122:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr PLUS expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On MOD shift to state 124
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE PLUS OR NULL NOT NEQ MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr PLUS expr

State 124:
## Known stack suffix:
## expr MOD
## LR(1) items:
expr -> expr MOD . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## expr MOD expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr MOD expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On POWER shift to state 108
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
## Reductions:
-- On error WITHOUT WITH TRUE TIMES TEXT STRING SET RAWINCLUDE PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr MOD expr

State 126:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On IDENT shift to state 96
-- On ident shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## expr DOT ident
## LR(1) items:
expr -> expr DOT ident . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr DOT ident

State 128:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr DIV expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On POWER shift to state 108
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
## Reductions:
-- On error WITHOUT WITH TRUE TIMES TEXT STRING SET RAWINCLUDE PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr DIV expr

State 130:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr OR expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE
--   reduce production expr -> expr OR expr

State 132:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr NEQ expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT NEQ MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr NEQ expr

State 134:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr MINUS expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On MOD shift to state 124
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE PLUS OR NULL NOT NEQ MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr MINUS expr

State 136:
## Known stack suffix:
## expr LT_EQ
## LR(1) items:
expr -> expr LT_EQ . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## expr LT_EQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr LT_EQ expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT NEQ MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr LT_EQ expr

State 138:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr LT expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT NEQ MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr LT expr

State 140:
## Known stack suffix:
## expr GT_EQ
## LR(1) items:
expr -> expr GT_EQ . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## expr GT_EQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr GT_EQ expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT NEQ MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr GT_EQ expr

State 142:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr GT expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT NEQ MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr GT expr

State 144:
## Known stack suffix:
## expr EQ_EQ
## LR(1) items:
expr -> expr EQ_EQ . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## expr EQ_EQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr EQ_EQ expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT NEQ MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr EQ_EQ expr

State 146:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr AND expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE OR NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> expr AND expr

State 148:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> MINUS . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr MINUS . expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> MINUS expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr MINUS expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE
--   reduce production expr -> MINUS expr

State 150:
## Known stack suffix:
## expr LPAREN
## LR(1) items:
expr -> expr LPAREN . expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LPAREN . expr RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LPAREN . expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LPAREN . error [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On error shift to state 10
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 151
-- On expr shift to state 153
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 151:
## Known stack suffix:
## expr LPAREN expr_list
## LR(1) items:
expr -> expr LPAREN expr_list . RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LPAREN expr_list . RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RPAREN shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## expr LPAREN expr_list RPAREN
## LR(1) items:
expr -> expr LPAREN expr_list RPAREN . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LPAREN expr_list RPAREN . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr LPAREN expr_list RPAREN

State 153:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TIMES RPAREN POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> LPAREN expr . RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr_list -> expr . [ RPAREN ]
expr_list -> expr . COMMA expr_list [ RPAREN ]
expr_list -> expr . COMMA error [ RPAREN ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On RPAREN shift to state 154
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On COMMA shift to state 80
-- On AND shift to state 71
## Reductions:

State 154:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr RPAREN

State 155:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> LBRACKET . expr_list RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 156
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 92
-- On expr shift to state 30
## Reductions:
-- On RBRACKET
--   reduce production expr_list ->

State 156:
## Known stack suffix:
## expr LBRACKET STRING
## LR(1) items:
expr -> STRING . [ VLINE TIMES RBRACKET POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr LBRACKET STRING . RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RBRACKET shift to state 115
## Reductions:
-- On VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND
--   reduce production expr -> STRING

State 157:
## Known stack suffix:
## expr IS expr expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr IS expr expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITHOUT WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE COMMA COLON CALL BLOCK AUTOESCAPE
--   reduce production expr -> expr IS expr expr

State 158:
## Known stack suffix:
## ident AS
## LR(1) items:
expr -> ident AS . ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On IDENT shift to state 96
-- On ident shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## ident AS ident
## LR(1) items:
expr -> ident AS ident . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> ident AS ident

State 160:
## Known stack suffix:
## expr
## LR(1) items:
assoc -> expr . COLON expr [ RBRACE COMMA ]
assoc -> expr . error [ RBRACE COMMA ]
expr -> expr . LPAREN expr_list RPAREN [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . DOT ident [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . PLUS expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . MINUS expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . DIV expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . MOD expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . TIMES expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . POWER expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . AND expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . OR expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . EQ_EQ expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . NEQ expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . LT expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . GT expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . LT_EQ expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . GT_EQ expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . IN expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . VLINE expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . IS expr expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
expr -> expr . IS expr [ error VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COLON AND ]
## Transitions:
-- On error shift to state 161
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On COLON shift to state 162
-- On AND shift to state 146
## Reductions:

State 161:
## Known stack suffix:
## expr error
## LR(1) items:
assoc -> expr error . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc -> expr error

State 162:
## Known stack suffix:
## expr COLON
## LR(1) items:
assoc -> expr COLON . expr [ RBRACE COMMA ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## expr COLON expr
## LR(1) items:
assoc -> expr COLON expr . [ RBRACE COMMA ]
expr -> expr . LPAREN expr_list RPAREN [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TIMES RBRACE POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
## Reductions:
-- On RBRACE COMMA
--   reduce production assoc -> expr COLON expr

State 164:
## Known stack suffix:
## LBRACE assoc_list
## LR(1) items:
expr -> LBRACE assoc_list . RBRACE [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RBRACE shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## LBRACE assoc_list RBRACE
## LR(1) items:
expr -> LBRACE assoc_list RBRACE . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACE assoc_list RBRACE

State 166:
## Known stack suffix:
## assoc
## LR(1) items:
assoc_list -> assoc . [ RBRACE ]
assoc_list -> assoc . COMMA assoc_list [ RBRACE ]
assoc_list -> assoc . COMMA error [ RBRACE ]
## Transitions:
-- On COMMA shift to state 167
## Reductions:
-- On RBRACE
--   reduce production assoc_list -> assoc

State 167:
## Known stack suffix:
## assoc COMMA
## LR(1) items:
assoc_list -> assoc COMMA . assoc_list [ RBRACE ]
assoc_list -> assoc COMMA . error [ RBRACE ]
## Transitions:
-- On error shift to state 168
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 160
-- On assoc_list shift to state 169
-- On assoc shift to state 166
## Reductions:

State 168:
## Known stack suffix:
## assoc COMMA error
## LR(1) items:
assoc_list -> assoc COMMA error . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_list -> assoc COMMA error

State 169:
## Known stack suffix:
## assoc COMMA assoc_list
## LR(1) items:
assoc_list -> assoc COMMA assoc_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assoc_list -> assoc COMMA assoc_list

State 170:
## Known stack suffix:
## LBRACE assoc_list
## LR(1) items:
expr -> LBRACE assoc_list . RBRACE [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RBRACE shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## LBRACE assoc_list RBRACE
## LR(1) items:
expr -> LBRACE assoc_list RBRACE . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACE assoc_list RBRACE

State 172:
## Known stack suffix:
## LPAREN expr_list
## LR(1) items:
expr -> LPAREN expr_list . RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On RPAREN shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## LPAREN expr_list RPAREN
## LR(1) items:
expr -> LPAREN expr_list RPAREN . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr_list RPAREN

State 174:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> MINUS expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
## Reductions:
-- On VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ DIV COMMA AND
--   reduce production expr -> MINUS expr

State 175:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DOT ident [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> NOT expr . [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . PLUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MINUS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . DIV expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . MOD expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . TIMES expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . POWER expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . AND expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . OR expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . EQ_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . NEQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . LT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . GT_EQ expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IN expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . VLINE expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
expr -> expr . IS expr [ VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET LBRACE IS INT IN IDENT GT_EQ GT FLOAT FALSE EQ_EQ DOT DIV COMMA AND ]
## Transitions:
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 45
-- On DOT shift to state 51
## Reductions:
-- On VLINE TRUE TIMES STRING RPAREN RBRACKET RBRACE POWER PLUS OR NULL NOT NEQ MOD MINUS LT_EQ LT LBRACE INT IDENT GT_EQ GT FLOAT FALSE EQ_EQ DIV COMMA AND
--   reduce production expr -> NOT expr

State 176:
## Known stack suffix:
## LPAREN expr_list
## LR(1) items:
expr -> LPAREN expr_list . RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On RPAREN shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## LPAREN expr_list RPAREN
## LR(1) items:
expr -> LPAREN expr_list RPAREN . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LPAREN expr_list RPAREN

State 178:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> MINUS expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
## Reductions:
-- On error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> MINUS expr

State 179:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> NOT expr . [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND ]
## Transitions:
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On DOT shift to state 126
## Reductions:
-- On error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LBRACE INT INCLUDE IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
--   reduce production expr -> NOT expr

State 180:
## Known stack suffix:
## WITH expr_list
## LR(1) items:
stmt -> WITH expr_list . stmts ENDWITH [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 287
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 181:
## Known stack suffix:
## TEXT
## LR(1) items:
stmt -> TEXT . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> TEXT . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 182
## Reductions:
-- On WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production stmt -> TEXT

State 182:
## Known stack suffix:
## TEXT error
## LR(1) items:
stmt -> TEXT error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> TEXT error

State 183:
## Known stack suffix:
## SET
## LR(1) items:
stmt -> SET . ident_list EQ expr [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> SET . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 184
-- On IDENT shift to state 22
-- On ident_list shift to state 185
-- On ident shift to state 188
## Reductions:

State 184:
## Known stack suffix:
## SET error
## LR(1) items:
stmt -> SET error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> SET error

State 185:
## Known stack suffix:
## SET ident_list
## LR(1) items:
stmt -> SET ident_list . EQ expr [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On EQ shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## SET ident_list EQ
## LR(1) items:
stmt -> SET ident_list EQ . expr [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 187
## Reductions:

State 187:
## Known stack suffix:
## SET ident_list EQ expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
stmt -> SET ident_list EQ expr . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production stmt -> SET ident_list EQ expr

State 188:
## Known stack suffix:
## ident
## LR(1) items:
ident_list -> ident . [ IN EQ ]
ident_list -> ident . COMMA ident_list [ IN EQ ]
ident_list -> ident . COMMA error [ IN EQ ]
## Transitions:
-- On COMMA shift to state 189
## Reductions:
-- On IN EQ
--   reduce production ident_list -> ident

State 189:
## Known stack suffix:
## ident COMMA
## LR(1) items:
ident_list -> ident COMMA . ident_list [ IN EQ ]
ident_list -> ident COMMA . error [ IN EQ ]
## Transitions:
-- On error shift to state 190
-- On IDENT shift to state 22
-- On ident_list shift to state 191
-- On ident shift to state 188
## Reductions:

State 190:
## Known stack suffix:
## ident COMMA error
## LR(1) items:
ident_list -> ident COMMA error . [ IN EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_list -> ident COMMA error

State 191:
## Known stack suffix:
## ident COMMA ident_list
## LR(1) items:
ident_list -> ident COMMA ident_list . [ IN EQ ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident_list -> ident COMMA ident_list

State 192:
## Known stack suffix:
## RAWINCLUDE
## LR(1) items:
stmt -> RAWINCLUDE . expr [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> RAWINCLUDE . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 193
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 194
## Reductions:

State 193:
## Known stack suffix:
## RAWINCLUDE error
## LR(1) items:
stmt -> RAWINCLUDE error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> RAWINCLUDE error

State 194:
## Known stack suffix:
## RAWINCLUDE expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
stmt -> RAWINCLUDE expr . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production stmt -> RAWINCLUDE expr

State 195:
## Known stack suffix:
## MACRO
## LR(1) items:
stmt -> MACRO . ident LPAREN expr_list RPAREN stmts ENDMACRO [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> MACRO . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 196
-- On IDENT shift to state 22
-- On ident shift to state 197
## Reductions:

State 196:
## Known stack suffix:
## MACRO error
## LR(1) items:
stmt -> MACRO error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> MACRO error

State 197:
## Known stack suffix:
## MACRO ident
## LR(1) items:
stmt -> MACRO ident . LPAREN expr_list RPAREN stmts ENDMACRO [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On LPAREN shift to state 198
## Reductions:

State 198:
## Known stack suffix:
## MACRO ident LPAREN
## LR(1) items:
stmt -> MACRO ident LPAREN . expr_list RPAREN stmts ENDMACRO [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 199
-- On expr shift to state 30
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 199:
## Known stack suffix:
## MACRO ident LPAREN expr_list
## LR(1) items:
stmt -> MACRO ident LPAREN expr_list . RPAREN stmts ENDMACRO [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On RPAREN shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## MACRO ident LPAREN expr_list RPAREN
## LR(1) items:
stmt -> MACRO ident LPAREN expr_list RPAREN . stmts ENDMACRO [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 285
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 201:
## Known stack suffix:
## INCLUDE
## LR(1) items:
stmt -> INCLUDE . expr context_part [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> INCLUDE . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 202
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 203
## Reductions:

State 202:
## Known stack suffix:
## INCLUDE error
## LR(1) items:
stmt -> INCLUDE error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> INCLUDE error

State 203:
## Known stack suffix:
## INCLUDE expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
stmt -> INCLUDE expr . context_part [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On WITHOUT shift to state 204
-- On WITH shift to state 206
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
-- On context_part shift to state 208
## Reductions:
-- On error TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production context_part ->

State 204:
## Known stack suffix:
## WITHOUT
## LR(1) items:
context_part -> WITHOUT . CONTEXT [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On CONTEXT shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## WITHOUT CONTEXT
## LR(1) items:
context_part -> WITHOUT CONTEXT . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production context_part -> WITHOUT CONTEXT

State 206:
## Known stack suffix:
## WITH
## LR(1) items:
context_part -> WITH . CONTEXT [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On CONTEXT shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## WITH CONTEXT
## LR(1) items:
context_part -> WITH CONTEXT . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production context_part -> WITH CONTEXT

State 208:
## Known stack suffix:
## INCLUDE expr context_part
## LR(1) items:
stmt -> INCLUDE expr context_part . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> INCLUDE expr context_part

State 209:
## Known stack suffix:
## IMPORT
## LR(1) items:
stmt -> IMPORT . STRING as_part [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> IMPORT . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 210
-- On STRING shift to state 211
## Reductions:

State 210:
## Known stack suffix:
## IMPORT error
## LR(1) items:
stmt -> IMPORT error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> IMPORT error

State 211:
## Known stack suffix:
## IMPORT STRING
## LR(1) items:
stmt -> IMPORT STRING . as_part [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On AS shift to state 212
-- On as_part shift to state 215
## Reductions:
-- On error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production as_part ->

State 212:
## Known stack suffix:
## AS
## LR(1) items:
as_part -> AS . ident [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
as_part -> AS . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 213
-- On IDENT shift to state 96
-- On ident shift to state 214
## Reductions:

State 213:
## Known stack suffix:
## AS error
## LR(1) items:
as_part -> AS error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production as_part -> AS error

State 214:
## Known stack suffix:
## AS ident
## LR(1) items:
as_part -> AS ident . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production as_part -> AS ident

State 215:
## Known stack suffix:
## IMPORT STRING as_part
## LR(1) items:
stmt -> IMPORT STRING as_part . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> IMPORT STRING as_part

State 216:
## Known stack suffix:
## IF
## LR(1) items:
stmt -> IF . if_chain else_part ENDIF [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> IF . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 217
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On if_chain shift to state 218
-- On ident shift to state 100
-- On expr shift to state 280
## Reductions:

State 217:
## Known stack suffix:
## IF error
## LR(1) items:
stmt -> IF error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> IF error

State 218:
## Known stack suffix:
## IF if_chain
## LR(1) items:
stmt -> IF if_chain . else_part ENDIF [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ELSE shift to state 219
-- On else_part shift to state 278
## Reductions:
-- On ENDIF
--   reduce production else_part ->

State 219:
## Known stack suffix:
## ELSE
## LR(1) items:
else_part -> ELSE . stmts [ ENDIF ]
else_part -> ELSE . error [ ENDIF ]
## Transitions:
-- On error shift to state 220
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 277
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 220:
## Known stack suffix:
## ELSE error
## LR(1) items:
else_part -> ELSE error . [ ENDIF ]
stmt -> error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS ENDIF CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> error

State 221:
## Known stack suffix:
## FROM
## LR(1) items:
stmt -> FROM . STRING IMPORT expr_list [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> FROM . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 222
-- On STRING shift to state 223
## Reductions:

State 222:
## Known stack suffix:
## FROM error
## LR(1) items:
stmt -> FROM error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FROM error

State 223:
## Known stack suffix:
## FROM STRING
## LR(1) items:
stmt -> FROM STRING . IMPORT expr_list [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On IMPORT shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## FROM STRING IMPORT
## LR(1) items:
stmt -> FROM STRING IMPORT . expr_list [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr_list shift to state 225
-- On expr shift to state 226
## Reductions:
-- On error WITH TEXT SET RAWINCLUDE MACRO INCLUDE IMPORT IF FROM FOR FILTER EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production expr_list ->

State 225:
## Known stack suffix:
## FROM STRING IMPORT expr_list
## LR(1) items:
stmt -> FROM STRING IMPORT expr_list . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FROM STRING IMPORT expr_list

State 226:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA CALL BLOCK AUTOESCAPE AND ]
expr_list -> expr . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
expr_list -> expr . COMMA expr_list [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
expr_list -> expr . COMMA error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On COMMA shift to state 227
-- On AND shift to state 146
## Reductions:
-- On error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production expr_list -> expr

State 227:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_list -> expr COMMA . expr_list [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
expr_list -> expr COMMA . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 228
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr_list shift to state 229
-- On expr shift to state 226
## Reductions:
-- On WITH TEXT SET RAWINCLUDE MACRO INCLUDE IMPORT IF FROM FOR FILTER EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production expr_list ->

State 228:
## Known stack suffix:
## expr COMMA error
## LR(1) items:
expr_list -> expr COMMA error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> expr COMMA error

State 229:
## Known stack suffix:
## expr COMMA expr_list
## LR(1) items:
expr_list -> expr COMMA expr_list . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_list -> expr COMMA expr_list

State 230:
## Known stack suffix:
## FOR
## LR(1) items:
stmt -> FOR . ident_list IN expr stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> FOR . expr IN expr stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> FOR . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 231
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident_list shift to state 232
-- On ident shift to state 271
-- On expr shift to state 272
## Reductions:

State 231:
## Known stack suffix:
## FOR error
## LR(1) items:
stmt -> FOR error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FOR error

State 232:
## Known stack suffix:
## FOR ident_list
## LR(1) items:
stmt -> FOR ident_list . IN expr stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On IN shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## FOR ident_list IN
## LR(1) items:
stmt -> FOR ident_list IN . expr stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## FOR ident_list IN expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
stmt -> FOR ident_list IN expr . stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On VLINE shift to state 106
-- On TRUE shift to state 4
-- On TIMES shift to state 118
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 148
-- On MACRO shift to state 195
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 150
-- On LBRACKET shift to state 155
-- On LBRACE shift to state 94
-- On IS shift to state 116
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IN shift to state 120
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On AND shift to state 146
-- On stmts shift to state 269
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 235:
## Known stack suffix:
## FILTER
## LR(1) items:
stmt -> FILTER . ident stmts ENDFILTER [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> FILTER . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 236
-- On IDENT shift to state 96
-- On ident shift to state 237
## Reductions:

State 236:
## Known stack suffix:
## FILTER error
## LR(1) items:
stmt -> FILTER error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FILTER error

State 237:
## Known stack suffix:
## FILTER ident
## LR(1) items:
stmt -> FILTER ident . stmts ENDFILTER [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 267
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 238:
## Known stack suffix:
## EXTENDS
## LR(1) items:
stmt -> EXTENDS . STRING [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> EXTENDS . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 239
-- On STRING shift to state 240
## Reductions:

State 239:
## Known stack suffix:
## EXTENDS error
## LR(1) items:
stmt -> EXTENDS error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> EXTENDS error

State 240:
## Known stack suffix:
## EXTENDS STRING
## LR(1) items:
stmt -> EXTENDS STRING . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> EXTENDS STRING

State 241:
## Known stack suffix:
## CALL
## LR(1) items:
stmt -> CALL . opt_args ident LPAREN expr_list RPAREN stmts ENDCALL [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> CALL . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 242
-- On LPAREN shift to state 243
-- On opt_args shift to state 246
## Reductions:
-- On IDENT
--   reduce production opt_args ->

State 242:
## Known stack suffix:
## CALL error
## LR(1) items:
stmt -> CALL error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> CALL error

State 243:
## Known stack suffix:
## LPAREN
## LR(1) items:
opt_args -> LPAREN . expr_list RPAREN [ IDENT ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 244
-- On expr shift to state 30
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 244:
## Known stack suffix:
## LPAREN expr_list
## LR(1) items:
opt_args -> LPAREN expr_list . RPAREN [ IDENT ]
## Transitions:
-- On RPAREN shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## LPAREN expr_list RPAREN
## LR(1) items:
opt_args -> LPAREN expr_list RPAREN . [ IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_args -> LPAREN expr_list RPAREN

State 246:
## Known stack suffix:
## CALL opt_args
## LR(1) items:
stmt -> CALL opt_args . ident LPAREN expr_list RPAREN stmts ENDCALL [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On IDENT shift to state 22
-- On ident shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## CALL opt_args ident
## LR(1) items:
stmt -> CALL opt_args ident . LPAREN expr_list RPAREN stmts ENDCALL [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On LPAREN shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## CALL opt_args ident LPAREN
## LR(1) items:
stmt -> CALL opt_args ident LPAREN . expr_list RPAREN stmts ENDCALL [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On TRUE shift to state 11
-- On STRING shift to state 12
-- On NULL shift to state 13
-- On NOT shift to state 14
-- On MINUS shift to state 15
-- On LPAREN shift to state 16
-- On LBRACKET shift to state 18
-- On LBRACE shift to state 19
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On FLOAT shift to state 24
-- On FALSE shift to state 25
-- On ident shift to state 26
-- On expr_list shift to state 249
-- On expr shift to state 30
## Reductions:
-- On RPAREN
--   reduce production expr_list ->

State 249:
## Known stack suffix:
## CALL opt_args ident LPAREN expr_list
## LR(1) items:
stmt -> CALL opt_args ident LPAREN expr_list . RPAREN stmts ENDCALL [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On RPAREN shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## CALL opt_args ident LPAREN expr_list RPAREN
## LR(1) items:
stmt -> CALL opt_args ident LPAREN expr_list RPAREN . stmts ENDCALL [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 265
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 251:
## Known stack suffix:
## BLOCK
## LR(1) items:
stmt -> BLOCK . ident ENDBLOCK [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> BLOCK . ident stmts ENDBLOCK [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> BLOCK . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 252
-- On IDENT shift to state 96
-- On ident shift to state 253
## Reductions:

State 252:
## Known stack suffix:
## BLOCK error
## LR(1) items:
stmt -> BLOCK error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> BLOCK error

State 253:
## Known stack suffix:
## BLOCK ident
## LR(1) items:
stmt -> BLOCK ident . ENDBLOCK [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> BLOCK ident . stmts ENDBLOCK [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On ENDBLOCK shift to state 254
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 263
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 254:
## Known stack suffix:
## BLOCK ident ENDBLOCK
## LR(1) items:
stmt -> BLOCK ident ENDBLOCK . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> BLOCK ident ENDBLOCK

State 255:
## Known stack suffix:
## AUTOESCAPE
## LR(1) items:
stmt -> AUTOESCAPE . expr stmts ENDAUTOESCAPE [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
stmt -> AUTOESCAPE . error [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 256
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 257
## Reductions:

State 256:
## Known stack suffix:
## AUTOESCAPE error
## LR(1) items:
stmt -> AUTOESCAPE error . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> AUTOESCAPE error

State 257:
## Known stack suffix:
## AUTOESCAPE expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
stmt -> AUTOESCAPE expr . stmts ENDAUTOESCAPE [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On VLINE shift to state 106
-- On TRUE shift to state 4
-- On TIMES shift to state 118
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 148
-- On MACRO shift to state 195
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 150
-- On LBRACKET shift to state 155
-- On LBRACE shift to state 94
-- On IS shift to state 116
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IN shift to state 120
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On AND shift to state 146
-- On stmts shift to state 258
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 258:
## Known stack suffix:
## AUTOESCAPE expr stmts
## LR(1) items:
stmt -> AUTOESCAPE expr stmts . ENDAUTOESCAPE [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDAUTOESCAPE shift to state 259
## Reductions:

State 259:
## Known stack suffix:
## AUTOESCAPE expr stmts ENDAUTOESCAPE
## LR(1) items:
stmt -> AUTOESCAPE expr stmts ENDAUTOESCAPE . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> AUTOESCAPE expr stmts ENDAUTOESCAPE

State 260:
## Known stack suffix:
## stmt
## LR(1) items:
stmts -> stmt . [ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE ]
stmts -> stmt . stmts [ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On TRUE shift to state 4
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On MACRO shift to state 195
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On stmts shift to state 261
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:
-- On EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE
--   reduce production stmts -> stmt

State 261:
## Known stack suffix:
## stmt stmts
## LR(1) items:
stmts -> stmt stmts . [ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmts -> stmt stmts

State 262:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV CALL BLOCK AUTOESCAPE AND ]
stmt -> expr . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On VLINE shift to state 106
-- On TIMES shift to state 118
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 134
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 110
-- On LBRACKET shift to state 113
-- On IS shift to state 116
-- On IN shift to state 120
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On AND shift to state 146
## Reductions:
-- On error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MACRO LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
--   reduce production stmt -> expr

State 263:
## Known stack suffix:
## BLOCK ident stmts
## LR(1) items:
stmt -> BLOCK ident stmts . ENDBLOCK [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDBLOCK shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## BLOCK ident stmts ENDBLOCK
## LR(1) items:
stmt -> BLOCK ident stmts ENDBLOCK . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> BLOCK ident stmts ENDBLOCK

State 265:
## Known stack suffix:
## CALL opt_args ident LPAREN expr_list RPAREN stmts
## LR(1) items:
stmt -> CALL opt_args ident LPAREN expr_list RPAREN stmts . ENDCALL [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDCALL shift to state 266
## Reductions:

State 266:
## Known stack suffix:
## CALL opt_args ident LPAREN expr_list RPAREN stmts ENDCALL
## LR(1) items:
stmt -> CALL opt_args ident LPAREN expr_list RPAREN stmts ENDCALL . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> CALL opt_args ident LPAREN expr_list RPAREN stmts ENDCALL

State 267:
## Known stack suffix:
## FILTER ident stmts
## LR(1) items:
stmt -> FILTER ident stmts . ENDFILTER [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDFILTER shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## FILTER ident stmts ENDFILTER
## LR(1) items:
stmt -> FILTER ident stmts ENDFILTER . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FILTER ident stmts ENDFILTER

State 269:
## Known stack suffix:
## FOR ident_list IN expr stmts
## LR(1) items:
stmt -> FOR ident_list IN expr stmts . ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDFOR shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## FOR ident_list IN expr stmts ENDFOR
## LR(1) items:
stmt -> FOR ident_list IN expr stmts ENDFOR . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FOR ident_list IN expr stmts ENDFOR

State 271:
## Known stack suffix:
## ident
## LR(1) items:
expr -> ident . [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> ident . EQ expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> ident . AS ident [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> ident . LPAREN expr_list RPAREN [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
ident_list -> ident . [ IN ]
ident_list -> ident . COMMA ident_list [ IN ]
ident_list -> ident . COMMA error [ IN ]
## Transitions:
-- On LPAREN shift to state 27
-- On EQ shift to state 88
-- On COMMA shift to state 189
-- On AS shift to state 90
## Reductions:
-- On VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LBRACKET IS GT_EQ GT EQ_EQ DOT DIV AND
--   reduce production expr -> ident
-- On IN
--   reduce production ident_list -> ident

State 272:
## Known stack suffix:
## FOR expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . DOT ident [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . LBRACKET STRING RBRACKET [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . PLUS expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . MINUS expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . DIV expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . MOD expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . TIMES expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . POWER expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . AND expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . OR expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . EQ_EQ expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . NEQ expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . LT expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . GT expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . LT_EQ expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . GT_EQ expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . IN expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . VLINE expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . IS expr expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . IS expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
stmt -> FOR expr . IN expr stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On VLINE shift to state 31
-- On TIMES shift to state 43
-- On POWER shift to state 33
-- On PLUS shift to state 47
-- On OR shift to state 55
-- On NEQ shift to state 57
-- On MOD shift to state 49
-- On MINUS shift to state 59
-- On LT_EQ shift to state 61
-- On LT shift to state 63
-- On LPAREN shift to state 35
-- On LBRACKET shift to state 38
-- On IS shift to state 41
-- On IN shift to state 273
-- On GT_EQ shift to state 65
-- On GT shift to state 67
-- On EQ_EQ shift to state 69
-- On DOT shift to state 51
-- On DIV shift to state 53
-- On AND shift to state 71
## Reductions:

State 273:
## Known stack suffix:
## FOR expr IN
## LR(1) items:
expr -> expr IN . expr [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
stmt -> FOR expr IN . expr stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On ident shift to state 100
-- On expr shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## FOR expr IN expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr IN expr . [ VLINE TIMES POWER PLUS OR NEQ MOD MINUS LT_EQ LT LPAREN LBRACKET IS IN GT_EQ GT EQ_EQ DOT DIV AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
stmt -> FOR expr IN expr . stmts ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On VLINE shift to state 106
-- On TRUE shift to state 4
-- On TIMES shift to state 118
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 148
-- On MACRO shift to state 195
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 150
-- On LBRACKET shift to state 155
-- On LBRACE shift to state 94
-- On IS shift to state 116
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IN shift to state 120
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On AND shift to state 146
-- On stmts shift to state 275
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 275:
## Known stack suffix:
## FOR expr IN expr stmts
## LR(1) items:
stmt -> FOR expr IN expr stmts . ENDFOR [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDFOR shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## FOR expr IN expr stmts ENDFOR
## LR(1) items:
stmt -> FOR expr IN expr stmts ENDFOR . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> FOR expr IN expr stmts ENDFOR

State 277:
## Known stack suffix:
## ELSE stmts
## LR(1) items:
else_part -> ELSE stmts . [ ENDIF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production else_part -> ELSE stmts

State 278:
## Known stack suffix:
## IF if_chain else_part
## LR(1) items:
stmt -> IF if_chain else_part . ENDIF [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDIF shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## IF if_chain else_part ENDIF
## LR(1) items:
stmt -> IF if_chain else_part ENDIF . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> IF if_chain else_part ENDIF

State 280:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . LPAREN expr_list RPAREN [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DOT ident [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LBRACKET STRING RBRACKET [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . PLUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MINUS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . DIV expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . MOD expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . TIMES expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . POWER expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . AND expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . OR expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . EQ_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . NEQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . LT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . GT_EQ expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IN expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . VLINE expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
expr -> expr . IS expr [ error WITH VLINE TRUE TIMES TEXT STRING SET RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ DOT DIV CALL BLOCK AUTOESCAPE AND ]
if_chain -> expr . stmts [ ENDIF ELSE ]
if_chain -> expr . stmts ELSEIF if_chain [ ENDIF ELSE ]
if_chain -> expr . stmts ELSEIF error [ ENDIF ELSE ]
## Transitions:
-- On error shift to state 1
-- On WITH shift to state 2
-- On VLINE shift to state 106
-- On TRUE shift to state 4
-- On TIMES shift to state 118
-- On TEXT shift to state 181
-- On STRING shift to state 5
-- On SET shift to state 183
-- On RAWINCLUDE shift to state 192
-- On POWER shift to state 108
-- On PLUS shift to state 122
-- On OR shift to state 130
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On NEQ shift to state 132
-- On MOD shift to state 124
-- On MINUS shift to state 148
-- On MACRO shift to state 195
-- On LT_EQ shift to state 136
-- On LT shift to state 138
-- On LPAREN shift to state 150
-- On LBRACKET shift to state 155
-- On LBRACE shift to state 94
-- On IS shift to state 116
-- On INT shift to state 95
-- On INCLUDE shift to state 201
-- On IN shift to state 120
-- On IMPORT shift to state 209
-- On IF shift to state 216
-- On IDENT shift to state 96
-- On GT_EQ shift to state 140
-- On GT shift to state 142
-- On FROM shift to state 221
-- On FOR shift to state 230
-- On FLOAT shift to state 98
-- On FILTER shift to state 235
-- On FALSE shift to state 99
-- On EXTENDS shift to state 238
-- On EQ_EQ shift to state 144
-- On DOT shift to state 126
-- On DIV shift to state 128
-- On CALL shift to state 241
-- On BLOCK shift to state 251
-- On AUTOESCAPE shift to state 255
-- On AND shift to state 146
-- On stmts shift to state 281
-- On stmt shift to state 260
-- On ident shift to state 100
-- On expr shift to state 262
## Reductions:

State 281:
## Known stack suffix:
## expr stmts
## LR(1) items:
if_chain -> expr stmts . [ ENDIF ELSE ]
if_chain -> expr stmts . ELSEIF if_chain [ ENDIF ELSE ]
if_chain -> expr stmts . ELSEIF error [ ENDIF ELSE ]
## Transitions:
-- On ELSEIF shift to state 282
## Reductions:
-- On ENDIF ELSE
--   reduce production if_chain -> expr stmts

State 282:
## Known stack suffix:
## expr stmts ELSEIF
## LR(1) items:
if_chain -> expr stmts ELSEIF . if_chain [ ENDIF ELSE ]
if_chain -> expr stmts ELSEIF . error [ ENDIF ELSE ]
## Transitions:
-- On error shift to state 283
-- On TRUE shift to state 4
-- On STRING shift to state 5
-- On NULL shift to state 6
-- On NOT shift to state 7
-- On MINUS shift to state 8
-- On LPAREN shift to state 9
-- On LBRACKET shift to state 20
-- On LBRACE shift to state 94
-- On INT shift to state 95
-- On IDENT shift to state 96
-- On FLOAT shift to state 98
-- On FALSE shift to state 99
-- On if_chain shift to state 284
-- On ident shift to state 100
-- On expr shift to state 280
## Reductions:

State 283:
## Known stack suffix:
## expr stmts ELSEIF error
## LR(1) items:
if_chain -> expr stmts ELSEIF error . [ ENDIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_chain -> expr stmts ELSEIF error

State 284:
## Known stack suffix:
## expr stmts ELSEIF if_chain
## LR(1) items:
if_chain -> expr stmts ELSEIF if_chain . [ ENDIF ELSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production if_chain -> expr stmts ELSEIF if_chain

State 285:
## Known stack suffix:
## MACRO ident LPAREN expr_list RPAREN stmts
## LR(1) items:
stmt -> MACRO ident LPAREN expr_list RPAREN stmts . ENDMACRO [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDMACRO shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## MACRO ident LPAREN expr_list RPAREN stmts ENDMACRO
## LR(1) items:
stmt -> MACRO ident LPAREN expr_list RPAREN stmts ENDMACRO . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> MACRO ident LPAREN expr_list RPAREN stmts ENDMACRO

State 287:
## Known stack suffix:
## WITH expr_list stmts
## LR(1) items:
stmt -> WITH expr_list stmts . ENDWITH [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
-- On ENDWITH shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## WITH expr_list stmts ENDWITH
## LR(1) items:
stmt -> WITH expr_list stmts ENDWITH . [ error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> WITH expr_list stmts ENDWITH

State 289:
## Known stack suffix:
## EOF
## LR(1) items:
input -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production input -> EOF

State 290:
## Known stack suffix:
## stmts
## LR(1) items:
input -> stmts . EOF [ # ]
## Transitions:
-- On EOF shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## stmts EOF
## LR(1) items:
input -> stmts EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production input -> stmts EOF

State 292:
## Known stack suffix:
## input
## LR(1) items:
input' -> input . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept input

