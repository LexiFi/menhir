Grammar has 14 nonterminal symbols, among which 1 start symbols.
Grammar has 64 terminal symbols.
Grammar has 104 productions.
nullable(stmts) = false
nullable(stmt) = false
nullable(opt_args) = true
nullable(input) = false
nullable(if_chain) = false
nullable(ident_list) = false
nullable(ident) = false
nullable(expr_list) = true
nullable(expr) = false
nullable(else_part) = true
nullable(context_part) = true
nullable(assoc_list) = false
nullable(assoc) = false
nullable(as_part) = true
first(stmts) = error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS CALL BLOCK AUTOESCAPE
first(stmt) = error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS CALL BLOCK AUTOESCAPE
first(opt_args) = LPAREN
first(input) = error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF CALL BLOCK AUTOESCAPE
first(if_chain) = TRUE STRING NULL NOT MINUS LPAREN LBRACKET LBRACE INT IDENT FLOAT FALSE
first(ident_list) = IDENT
first(ident) = IDENT
first(expr_list) = TRUE STRING NULL NOT MINUS LPAREN LBRACKET LBRACE INT IDENT FLOAT FALSE
first(expr) = TRUE STRING NULL NOT MINUS LPAREN LBRACKET LBRACE INT IDENT FLOAT FALSE
first(else_part) = ELSE
first(context_part) = WITHOUT WITH
first(assoc_list) = TRUE STRING NULL NOT MINUS LPAREN LBRACKET LBRACE INT IDENT FLOAT FALSE
first(assoc) = TRUE STRING NULL NOT MINUS LPAREN LBRACKET LBRACE INT IDENT FLOAT FALSE
first(as_part) = AS
minimal(stmts) = (* 1 *) IDENT
minimal(stmt) = (* 1 *) IDENT
minimal(opt_args) = (* 0 *)
minimal(input) = (* 1 *) EOF
minimal(if_chain) = (* 2 *) IDENT IDENT
minimal(ident_list) = (* 1 *) IDENT
minimal(ident) = (* 1 *) IDENT
minimal(expr_list) = (* 0 *)
minimal(expr) = (* 1 *) IDENT
minimal(else_part) = (* 0 *)
minimal(context_part) = (* 0 *)
minimal(assoc_list) = (* 2 *) IDENT error
minimal(assoc) = (* 2 *) IDENT error
minimal(as_part) = (* 0 *)
maximal(stmts) = infinity
maximal(stmt) = infinity
maximal(opt_args) = infinity
maximal(input) = infinity
maximal(if_chain) = infinity
maximal(ident_list) = infinity
maximal(ident) = 2
maximal(expr_list) = infinity
maximal(expr) = infinity
maximal(else_part) = infinity
maximal(context_part) = 2
maximal(assoc_list) = infinity
maximal(assoc) = infinity
maximal(as_part) = 3
follow(stmts) = EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE
follow(stmt) = error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
follow(opt_args) = IDENT
follow(input) = #
follow(if_chain) = ENDIF ELSE
follow(ident_list) = IN EQ
follow(ident) = error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RPAREN RBRACKET RBRACE RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AS AND
follow(expr_list) = error WITH TRUE TEXT STRING SET RPAREN RBRACKET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
follow(expr) = error WITHOUT WITH VLINE TRUE TIMES TEXT STRING SET RPAREN RBRACKET RBRACE RAWINCLUDE POWER PLUS OR NULL NOT NEQ MOD MINUS MACRO LT_EQ LT LPAREN LBRACKET LBRACE IS INT INCLUDE IN IMPORT IF IDENT GT_EQ GT FROM FOR FLOAT FILTER FALSE EXTENDS EQ_EQ EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE DOT DIV COMMA COLON CALL BLOCK AUTOESCAPE AND
follow(else_part) = ENDIF
follow(context_part) = error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
follow(assoc_list) = RBRACE
follow(assoc) = RBRACE COMMA
follow(as_part) = error WITH TRUE TEXT STRING SET RAWINCLUDE NULL NOT MINUS MACRO LPAREN LBRACKET LBRACE INT INCLUDE IMPORT IF IDENT FROM FOR FLOAT FILTER FALSE EXTENDS EOF ENDWITH ENDMACRO ENDIF ENDFOR ENDFILTER ENDCALL ENDBLOCK ENDAUTOESCAPE ELSEIF ELSE CALL BLOCK AUTOESCAPE
Built an LR(0) automaton with 207 states.
The grammar is not SLR(1) -- 48 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 293 states.
581 shift/reduce conflicts were silently solved.
Warning: 62 states have shift/reduce conflicts.
Warning: 6 states have reduce/reduce conflicts.
Warning: 440 shift/reduce conflicts were arbitrarily resolved.
Warning: 146 reduce/reduce conflicts were arbitrarily resolved.
File "jingoo.1.2.9-jg_parser.mly", line 159, characters 2-12:
Warning: production else_part -> ELSE error is never reduced.
Warning: in total, 1 production is never reduced.
88 out of 293 states have a default reduction.
154 out of 293 states are represented.
0 out of 81 symbols keep track of their start position.
0 out of 81 symbols keep track of their end position.
56 out of 105 productions exploit shiftreduce optimization.
82 out of 293 states can peek at an error.
The generated parser cannot raise Error.
709 functions before inlining, 182 functions after inlining.
