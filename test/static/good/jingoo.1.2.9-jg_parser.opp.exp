%{
(*
  jg_parser.mly

  Copyright (c) 2011- by Masaki WATANABE

  License: see LICENSE
*)
  open Jg_utils
  open Jg_types

  let debug = false

  let pel x = if debug then print_endline x else ()
  let pelspf fmt x = if debug then print_endline (Printf.sprintf fmt x) else ()
  let ident_name = function IdentExpr(name) -> name | _ -> raise @@ SyntaxError "type error:ident_name"
%}
%start input
%token AND
%token AS
%token AUTOESCAPE
%token BLOCK
%token CALL
%token COLON
%token COMMA
%token CONTEXT
%token DIV
%token DOT
%token ELSE
%token ELSEIF
%token ENDAUTOESCAPE
%token ENDBLOCK
%token ENDCALL
%token ENDFILTER
%token ENDFOR
%token ENDIF
%token ENDMACRO
%token ENDWITH
%token EOF
%token EQ
%token EQ_EQ
%token EXTENDS
%token FALSE
%token FILTER
%token <float> FLOAT
%token FOR
%token FROM
%token GT
%token GT_EQ
%token <string> IDENT
%token IF
%token IMPORT
%token IN
%token INCLUDE
%token <int> INT
%token IS
%token LBRACE
%token LBRACKET
%token LPAREN
%token LT
%token LT_EQ
%token MACRO
%token MINUS
%token MOD
%token NEQ
%token NOT
%token NULL
%token OR
%token PLUS
%token POWER
%token RAWINCLUDE
%token RBRACE
%token RBRACKET
%token RPAREN
%token SET
%token <string> STRING
%token <string> TEXT
%token TIMES
%token TRUE
%token VLINE
%token WITH
%token WITHOUT
%left EQ
%left OR
%left AND
%left EQ_EQ NEQ
%left GT GT_EQ LT LT_EQ
%left MINUS PLUS
%left DIV MOD TIMES
%left VLINE
%right POWER
%nonassoc NOT UMINUS
%left DOT
%type <Jg_types.ast> input
%%

input:
  _1 = EOF
    {      ( [] )}
| _1 = stmts _2 = EOF
    {            ( _1 )}

stmts:
  _1 = stmt
    {       ( [_1] )}
| _1 = stmt _2 = stmts
    {             ( _1 :: _2 )}

stmt:
  _1 = expr
    {       ( pel "expand expr"; ExpandStatement(_1) )}
| _1 = error
    {        ( raise @@ SyntaxError "expand stmt error" )}
| _1 = SET _2 = ident_list _3 = EQ _4 = expr
    {                         ( pel "set sts"; SetStatement(SetExpr(_2), _4) )}
| _1 = SET _2 = error
    {            ( raise @@ SyntaxError "set" )}
| _1 = EXTENDS _2 = STRING
    {                 ( pel "extends sts"; ExtendsStatement(_2) )}
| _1 = EXTENDS _2 = error
    {                ( raise @@ SyntaxError "extends" )}
| _1 = BLOCK _2 = ident _3 = ENDBLOCK
    {                       ( pel "block sts"; BlockStatement(_2, []) )}
| _1 = BLOCK _2 = ident _3 = stmts _4 = ENDBLOCK
    {                             ( pel "block sts2"; BlockStatement(_2, _3) )}
| _1 = BLOCK _2 = error
    {              ( raise @@ SyntaxError "block" )}
| _1 = FILTER _2 = ident _3 = stmts _4 = ENDFILTER
    {                               ( pel "filter sts"; FilterStatement(_2, _3) )}
| _1 = FILTER _2 = error
    {               ( raise @@ SyntaxError "filter" )}
| _1 = INCLUDE _2 = expr _3 = context_part
    {                           ( pel "include sts"; IncludeStatement(_2, _3) )}
| _1 = INCLUDE _2 = error
    {                ( raise @@ SyntaxError "include" )}
| _1 = RAWINCLUDE _2 = expr
    {                  ( pel "raw include sts"; RawIncludeStatement(_2) )}
| _1 = RAWINCLUDE _2 = error
    {                   ( raise @@ SyntaxError "rawinclude" )}
| _1 = IMPORT _2 = STRING _3 = as_part
    {                        ( pel "import sts"; ImportStatement(_2, _3) )}
| _1 = IMPORT _2 = error
    {              ( raise @@ SyntaxError "import error" )}
| _1 = FROM _2 = STRING _3 = IMPORT _4 = expr_list
    {                               ( pel "from import sts"; FromImportStatement(_2, _4) )}
| _1 = FROM _2 = error
    {            ( raise @@ SyntaxError "from import error" )}
| _1 = MACRO _2 = ident _3 = LPAREN _4 = expr_list _5 = RPAREN _6 = stmts _7 = ENDMACRO
    {                                                     ( pel "macro sts"; MacroStatement(_2, _4, _6) )}
| _1 = MACRO _2 = error
    {              ( raise @@ SyntaxError "macro" )}
| _1 = CALL _2 = opt_args _3 = ident _4 = LPAREN _5 = expr_list _6 = RPAREN _7 = stmts _8 = ENDCALL
    {                                                            ( pel "call sts"; CallStatement(_3, _2, _5, _7) )}
| _1 = CALL _2 = error
    {             ( raise @@ SyntaxError "call error" )}
| _1 = IF _2 = if_chain _3 = else_part _4 = ENDIF
    {                              ( pel "if sts"; IfStatement(_2, _3) )}
| _1 = IF _2 = error
    {           ( raise @@ SyntaxError "if" )}
| _1 = FOR _2 = ident_list _3 = IN _4 = expr _5 = stmts _6 = ENDFOR
    {                                      ( pel "for sts"; ForStatement(SetExpr(_2), _4, _5) )}
| _1 = FOR _2 = expr _3 = IN _4 = expr _5 = stmts _6 = ENDFOR
    {                                ( pel "for sts"; ForStatement(_2, _4, _5) )}
| _1 = FOR _2 = error
    {            ( raise @@ SyntaxError "for" )}
| _1 = WITH _2 = expr_list _3 = stmts _4 = ENDWITH
    {                               ( pel "with sts1"; WithStatement(_2, _3) )}
| _1 = WITH _2 = error
    {             ( raise @@ SyntaxError "with" )}
| _1 = AUTOESCAPE _2 = expr _3 = stmts _4 = ENDAUTOESCAPE
    {                                      ( pel "autoescape"; AutoEscapeStatement(_2, _3) )}
| _1 = AUTOESCAPE _2 = error
    {                   ( raise @@ SyntaxError "autoescape" )}
| _1 = TEXT
    {       ( pel "text sts"; TextStatement(_1) )}
| _1 = TEXT _2 = error
    {             ( raise @@ SyntaxError "text" )}

if_chain:
  _1 = expr _2 = stmts
    {             ( pel "if chain"; [(_1, _2)] )}
| _1 = expr _2 = stmts _3 = ELSEIF _4 = if_chain
    {                             ( pel "if chain2"; (_1, _2) :: _4 )}
| _1 = expr _2 = stmts _3 = ELSEIF _4 = error
    {                          ( raise @@ SyntaxError "if_chain" )}

else_part:
  
    {            ( pel "else part empty"; [] )}
| _1 = ELSE _2 = stmts
    {             ( pel "else part"; _2 )}
| _1 = ELSE _2 = error
    {             ( raise @@ SyntaxError "else_part" )}

as_part:
  
    {            ( None )}
| _1 = AS _2 = ident
    {           ( Some (ident_name _2) )}
| _1 = AS _2 = error
    {           ( raise @@ SyntaxError "as_part" )}

context_part:
  
    {            ( true )}
| _1 = WITH _2 = CONTEXT
    {               ( true )}
| _1 = WITHOUT _2 = CONTEXT
    {                  ( false )}

ident:
  _1 = IDENT
    {        ( pelspf "ident(%s)" _1; IdentExpr(_1) )}
| _1 = IDENT _2 = error
    {              ( raise @@ SyntaxError "ident" )}

ident_list:
  _1 = ident
    {        ( pel "ident list"; [_1] )}
| _1 = ident _2 = COMMA _3 = ident_list
    {                         ( pel "iden list commna"; _1 :: _3 )}
| _1 = ident _2 = COMMA _3 = error
    {                    ( raise @@ SyntaxError "ident_list" )}

expr_list:
  
    {            ( pel "empty expr list"; [] )}
| _1 = expr
    {       ( pel "expr list"; [_1] )}
| _1 = expr _2 = COMMA _3 = expr_list
    {                       ( pel "expr list comma"; _1 :: _3 )}
| _1 = expr _2 = COMMA _3 = error
    {                   ( raise @@ SyntaxError "expr_list" )}

expr:
  _1 = ident
    {        ( pel "ident"; _1 )}
| _1 = ident _2 = EQ _3 = expr
    {                ( pel "keyword"; KeywordExpr(_1, _3) )}
| _1 = ident _2 = AS _3 = ident
    {                 ( pel "alias"; AliasExpr(_1, _3) )}
| _1 = ident _2 = LPAREN _3 = expr_list _4 = RPAREN
    {                                ( pel "apply(expr_list)"; ApplyExpr(_1, _3) )}
| _1 = expr _2 = LPAREN _3 = expr_list _4 = RPAREN
    {                               ( pel "apply(expr_list)"; ApplyExpr(_1, _3) )}
| _1 = INT
    {      ( pel "int"; LiteralExpr (Tint _1) )}
| _1 = FLOAT
    {        ( pel "float"; LiteralExpr (Tfloat _1) )}
| _1 = TRUE
    {       ( pel "true"; LiteralExpr (Tbool true) )}
| _1 = FALSE
    {        ( pel "false"; LiteralExpr (Tbool false) )}
| _1 = STRING
    {         ( pel "string"; LiteralExpr (Tstr _1) )}
| _1 = NULL
    {       ( pel "null"; LiteralExpr Tnull )}
| _1 = expr _2 = DOT _3 = ident
    {                 ( pel "dot_lookup"; DotExpr(_1, _3) )}
| _1 = expr _2 = LBRACKET _3 = STRING _4 = RBRACKET
    {                                ( pel "dot_lookup(dict)"; DotExpr(_1, IdentExpr(_3)) )}
| _1 = NOT _2 = expr
    {           ( pel "not expr"; NotOpExpr(_2) )}
| _1 = MINUS _2 = expr %prec UMINUS
    {                          ( pel "negative"; NegativeOpExpr(_2) )}
| _1 = LBRACKET _2 = expr_list _3 = RBRACKET
    {                              ( pel "list expr"; ListExpr(_2) )}
| _1 = LBRACE _2 = assoc_list _3 = RBRACE
    {                           ( pel "obj expr"; ObjExpr(_2) )}
| _1 = expr _2 = PLUS _3 = expr
    {                 ( pel "plus"; PlusOpExpr(_1, _3) )}
| _1 = expr _2 = MINUS _3 = expr
    {                  ( pel "minus"; MinusOpExpr(_1, _3) )}
| _1 = expr _2 = DIV _3 = expr
    {                ( pel "div"; DivOpExpr(_1, _3) )}
| _1 = expr _2 = MOD _3 = expr
    {                ( pel "mod"; ModOpExpr(_1, _3) )}
| _1 = expr _2 = TIMES _3 = expr
    {                  ( pel "times"; TimesOpExpr(_1, _3) )}
| _1 = expr _2 = POWER _3 = expr
    {                  ( pel "power"; PowerOpExpr(_1, _3) )}
| _1 = expr _2 = AND _3 = expr
    {                ( pel "and"; AndOpExpr(_1, _3) )}
| _1 = expr _2 = OR _3 = expr
    {               ( pel "or"; OrOpExpr(_1, _3) )}
| _1 = expr _2 = EQ_EQ _3 = expr
    {                  ( pel "eqeq"; EqEqOpExpr(_1, _3) )}
| _1 = expr _2 = NEQ _3 = expr
    {                ( pel "noteq"; NotEqOpExpr(_1, _3) )}
| _1 = expr _2 = LT _3 = expr
    {               ( pel "lt"; LtOpExpr(_1, _3) )}
| _1 = expr _2 = GT _3 = expr
    {               ( pel "gt"; GtOpExpr(_1, _3) )}
| _1 = expr _2 = LT_EQ _3 = expr
    {                  ( pel "lteq"; LtEqOpExpr(_1, _3) )}
| _1 = expr _2 = GT_EQ _3 = expr
    {                  ( pel "gteq"; GtEqOpExpr(_1, _3) )}
| _1 = expr _2 = IN _3 = expr
    {               ( pel "inop"; InOpExpr(_1, _3) )}
| _1 = expr _2 = VLINE _3 = expr
    {                  ( pel "expr|expr -> ApplyExpr"; ApplyExpr(_3, [_1]) )}
| _1 = expr _2 = IS _3 = expr _4 = expr
    {                   (
  (** when expr1 is fun and expr2 is args with out LPAREN and RPAREN. *)
  (** for example, 'a is divisableby 2' *)
  pel "test(apply)";
  TestOpExpr(_1, ApplyExpr(_3, [_4]))
)}
| _1 = expr _2 = IS _3 = expr
    {               ( pel "test"; TestOpExpr(_1,_3) )}
| _1 = LPAREN _2 = expr _3 = RPAREN
    {                     ( pel "(expr)"; _2 )}
| _1 = LPAREN _2 = expr_list _3 = RPAREN
    {                          ( pel "set expr"; SetExpr(_2) )}
| _1 = LPAREN _2 = error
    {               ( raise @@ SyntaxError "expr" )}

assoc_list:
  _1 = assoc
    {        ( pel "assoc list1"; [_1] )}
| _1 = assoc _2 = COMMA _3 = assoc_list
    {                         ( pel "assoc list2"; _1 :: _3 )}
| _1 = assoc _2 = COMMA _3 = error
    {                    ( raise @@ SyntaxError "assoc list error" )}

assoc:
  _1 = expr _2 = COLON _3 = expr
    {                  ( (_1, _3) )}
| _1 = expr _2 = error
    {             ( raise @@ SyntaxError "assoc error" )}

opt_args:
  
    {            ( pel "opt_args empty"; [] )}
| _1 = LPAREN _2 = expr_list _3 = RPAREN
    {                          ( _2 )}

%%
