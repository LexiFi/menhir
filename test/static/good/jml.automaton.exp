State 0:
## Known stack suffix:
##
## LR(1) items:
jml_specification_eof' -> . jml_specification_eof [ # ]
## Transitions:
-- On STATIC shift to state 1
-- On SPEC_PUBLIC shift to state 2
-- On REPRESENTS shift to state 3
-- On PURE shift to state 206
-- On PUBLIC shift to state 207
-- On PROTECTED shift to state 208
-- On PRIVATE shift to state 209
-- On MODEL shift to state 210
-- On LOOP_INVARIANT shift to state 211
-- On FORALL shift to state 260
-- On FINAL shift to state 263
-- On ASSERT shift to state 264
-- On AND shift to state 266
-- On ALSO shift to state 343
-- On spec_var_decls shift to state 344
-- On spec_case_seq shift to state 403
-- On spec_case shift to state 370
-- On privacy shift to state 404
-- On non_extending_specification shift to state 407
-- On modifiers shift to state 408
-- On modifier shift to state 412
-- On method_specification shift to state 417
-- On loop_annotation shift to state 418
-- On jml_specification_eof shift to state 419
-- On jml_specification shift to state 420
-- On jml_declarations shift to state 422
-- On jml_declaration shift to state 423
-- On generic_spec_case shift to state 400
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On extending_specification shift to state 426
-- On behavior_spec shift to state 401
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->
-- On EOF
--   reduce production jml_declarations ->
-- On SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifiers ->
-- On NORMAL_BEHAVIOR INVARIANT EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy ->

State 1:
## Known stack suffix:
## STATIC
## LR(1) items:
modifier -> STATIC . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> STATIC

State 2:
## Known stack suffix:
## SPEC_PUBLIC
## LR(1) items:
jml_specification -> SPEC_PUBLIC . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production jml_specification -> SPEC_PUBLIC

State 3:
## Known stack suffix:
## REPRESENTS
## LR(1) items:
jml_declaration -> REPRESENTS . ident LEFTARROW expr SEMICOLON [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On ID shift to state 4
-- On ident shift to state 5
## Reductions:

State 4:
## Known stack suffix:
## ID
## LR(1) items:
ident -> ID . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTPAR LEFTBRACKET LEFTARROW INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTPAR LEFTBRACKET LEFTARROW INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production ident -> ID

State 5:
## Known stack suffix:
## REPRESENTS ident
## LR(1) items:
jml_declaration -> REPRESENTS ident . LEFTARROW expr SEMICOLON [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On LEFTARROW shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## REPRESENTS ident LEFTARROW
## LR(1) items:
jml_declaration -> REPRESENTS ident LEFTARROW . expr SEMICOLON [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 204
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 7:
## Known stack suffix:
## TRUE
## LR(1) items:
primary_no_new_array -> TRUE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> TRUE

State 8:
## Known stack suffix:
## TILDA
## LR(1) items:
expr_no_name -> TILDA . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 203
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 9:
## Known stack suffix:
## THIS
## LR(1) items:
primary_no_new_array -> THIS . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> THIS

State 10:
## Known stack suffix:
## SUPER
## LR(1) items:
field_access -> SUPER . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On DOT shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## SUPER DOT
## LR(1) items:
field_access -> SUPER DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 4
-- On ident shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## SUPER DOT ident
## LR(1) items:
field_access -> SUPER DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production field_access -> SUPER DOT ident

State 13:
## Known stack suffix:
## STRING
## LR(1) items:
primary_no_new_array -> STRING . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> STRING

State 14:
## Known stack suffix:
## REAL
## LR(1) items:
primary_no_new_array -> REAL . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> REAL

State 15:
## Known stack suffix:
## PLUS
## LR(1) items:
expr_no_name -> PLUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 202
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 16:
## Known stack suffix:
## NULL
## LR(1) items:
primary_no_new_array -> NULL . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> NULL

State 17:
## Known stack suffix:
## NEW
## LR(1) items:
array_creation_expression -> NEW . base_type array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_creation_expression -> NEW . name array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> NEW . name LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On name shift to state 26
-- On ident shift to state 45
-- On base_type shift to state 200
## Reductions:

State 18:
## Known stack suffix:
## SHORT
## LR(1) items:
base_type -> SHORT . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> SHORT

State 19:
## Known stack suffix:
## LONG
## LR(1) items:
base_type -> LONG . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> LONG

State 20:
## Known stack suffix:
## INT
## LR(1) items:
base_type -> INT . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> INT

State 21:
## Known stack suffix:
## FLOAT
## LR(1) items:
base_type -> FLOAT . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> FLOAT

State 22:
## Known stack suffix:
## DOUBLE
## LR(1) items:
base_type -> DOUBLE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> DOUBLE

State 23:
## Known stack suffix:
## CHAR
## LR(1) items:
base_type -> CHAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> CHAR

State 24:
## Known stack suffix:
## BYTE
## LR(1) items:
base_type -> BYTE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> BYTE

State 25:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
base_type -> BOOLEAN . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production base_type -> BOOLEAN

State 26:
## Known stack suffix:
## NEW name
## LR(1) items:
array_creation_expression -> NEW name . array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ LEFTPAR LEFTBRACKET DOT ]
primary_no_new_array -> NEW name . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 27
-- On LEFTBRACKET shift to state 190
-- On DOT shift to state 43
-- On array_dims shift to state 199
## Reductions:

State 27:
## Known stack suffix:
## NEW name LEFTPAR
## LR(1) items:
primary_no_new_array -> NEW name LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr_comma_list shift to state 73
-- On expr shift to state 74
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
-- On argument_list shift to state 188
## Reductions:
-- On RIGHTPAR
--   reduce production argument_list ->

State 28:
## Known stack suffix:
## MINUS
## LR(1) items:
expr_no_name -> MINUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 187
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 29:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
expr_no_name -> LEFTPAR . base_type RIGHTPAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> LEFTPAR . array_type_expr RIGHTPAR primary_expr_or_name [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> LEFTPAR . name RIGHTPAR primary_expr_or_name [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
parenthesized_name -> LEFTPAR . name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSFORALL variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSFORALL variable_declaration SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSEXISTS variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSEXISTS variable_declaration SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . expr_no_name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On SHORT shift to state 18
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LONG shift to state 19
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On FALSE shift to state 31
-- On DOUBLE shift to state 22
-- On CHARACTER shift to state 32
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BSFORALL shift to state 145
-- On BSEXISTS shift to state 161
-- On BOOLEAN shift to state 25
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 169
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 174
-- On expr shift to state 176
-- On base_type shift to state 181
-- On array_type_expr shift to state 184
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 30:
## Known stack suffix:
## INTEGER
## LR(1) items:
primary_no_new_array -> INTEGER . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> INTEGER

State 31:
## Known stack suffix:
## FALSE
## LR(1) items:
primary_no_new_array -> FALSE . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> FALSE

State 32:
## Known stack suffix:
## CHARACTER
## LR(1) items:
primary_no_new_array -> CHARACTER . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> CHARACTER

State 33:
## Known stack suffix:
## BSTYPEOF
## LR(1) items:
primary_no_new_array -> BSTYPEOF . LEFTPAR expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## BSTYPEOF LEFTPAR
## LR(1) items:
primary_no_new_array -> BSTYPEOF LEFTPAR . expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 143
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 35:
## Known stack suffix:
## BSTYPE
## LR(1) items:
primary_no_new_array -> BSTYPE . LEFTPAR type_expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## BSTYPE LEFTPAR
## LR(1) items:
primary_no_new_array -> BSTYPE LEFTPAR . type_expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 38
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 37:
## Known stack suffix:
## type_expr_no_name
## LR(1) items:
type_expr -> type_expr_no_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production type_expr -> type_expr_no_name

State 38:
## Known stack suffix:
## BSTYPE LEFTPAR type_expr
## LR(1) items:
primary_no_new_array -> BSTYPE LEFTPAR type_expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## BSTYPE LEFTPAR type_expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> BSTYPE LEFTPAR type_expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> BSTYPE LEFTPAR type_expr RIGHTPAR

State 40:
## Known stack suffix:
## name
## LR(1) items:
array_type_expr -> name . LEFTBRACKET RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
type_expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 41
-- On DOT shift to state 43
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production type_expr -> name

State 41:
## Known stack suffix:
## name LEFTBRACKET
## LR(1) items:
array_type_expr -> name LEFTBRACKET . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## name LEFTBRACKET RIGHTBRACKET
## LR(1) items:
array_type_expr -> name LEFTBRACKET RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_type_expr -> name LEFTBRACKET RIGHTBRACKET

State 43:
## Known stack suffix:
## name DOT
## LR(1) items:
name -> name DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTPAR LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 4
-- On ident shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## name DOT ident
## LR(1) items:
name -> name DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTPAR LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTPAR LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production name -> name DOT ident

State 45:
## Known stack suffix:
## ident
## LR(1) items:
name -> ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTPAR LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTPAR LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production name -> ident

State 46:
## Known stack suffix:
## base_type
## LR(1) items:
array_type_expr -> base_type . LEFTBRACKET RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
type_expr_no_name -> base_type . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 47
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production type_expr_no_name -> base_type

State 47:
## Known stack suffix:
## base_type LEFTBRACKET
## LR(1) items:
array_type_expr -> base_type LEFTBRACKET . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## base_type LEFTBRACKET RIGHTBRACKET
## LR(1) items:
array_type_expr -> base_type LEFTBRACKET RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_type_expr -> base_type LEFTBRACKET RIGHTBRACKET

State 49:
## Known stack suffix:
## array_type_expr
## LR(1) items:
array_type_expr -> array_type_expr . LEFTBRACKET RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
type_expr_no_name -> array_type_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 50
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production type_expr_no_name -> array_type_expr

State 50:
## Known stack suffix:
## array_type_expr LEFTBRACKET
## LR(1) items:
array_type_expr -> array_type_expr LEFTBRACKET . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## array_type_expr LEFTBRACKET RIGHTBRACKET
## LR(1) items:
array_type_expr -> array_type_expr LEFTBRACKET RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF ID EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_type_expr -> array_type_expr LEFTBRACKET RIGHTBRACKET

State 52:
## Known stack suffix:
## BSRESULT
## LR(1) items:
primary_no_new_array -> BSRESULT . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> BSRESULT

State 53:
## Known stack suffix:
## BSOLD
## LR(1) items:
primary_no_new_array -> BSOLD . LEFTPAR expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## BSOLD LEFTPAR
## LR(1) items:
primary_no_new_array -> BSOLD LEFTPAR . expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 141
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 55:
## Known stack suffix:
## BSFRESH
## LR(1) items:
primary_no_new_array -> BSFRESH . LEFTPAR expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## BSFRESH LEFTPAR
## LR(1) items:
primary_no_new_array -> BSFRESH LEFTPAR . expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 139
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 57:
## Known stack suffix:
## BSFPI
## LR(1) items:
primary_no_new_array -> BSFPI . LEFTPAR expr COMMA REAL COMMA REAL RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## BSFPI LEFTPAR
## LR(1) items:
primary_no_new_array -> BSFPI LEFTPAR . expr COMMA REAL COMMA REAL RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 133
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 59:
## Known stack suffix:
## BANG
## LR(1) items:
expr_no_name -> BANG . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 132
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 60:
## Known stack suffix:
## primary_no_new_array
## LR(1) items:
array_access -> primary_no_new_array . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_expr -> primary_no_new_array . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 61
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_expr -> primary_no_new_array

State 61:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 130
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 62:
## Known stack suffix:
## primary_expr
## LR(1) items:
expr_no_name -> primary_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
field_access -> primary_expr . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On DOT shift to state 63
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> primary_expr

State 63:
## Known stack suffix:
## primary_expr DOT
## LR(1) items:
field_access -> primary_expr DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr DOT . ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 4
-- On ident shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## primary_expr DOT ident
## LR(1) items:
field_access -> primary_expr DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr DOT ident . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 65
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production field_access -> primary_expr DOT ident

State 65:
## Known stack suffix:
## primary_expr DOT ident LEFTPAR
## LR(1) items:
primary_no_new_array -> primary_expr DOT ident LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr_comma_list shift to state 73
-- On expr shift to state 74
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
-- On argument_list shift to state 128
## Reductions:
-- On RIGHTPAR
--   reduce production argument_list ->

State 66:
## Known stack suffix:
## parenthesized_name
## LR(1) items:
primary_no_new_array -> parenthesized_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> parenthesized_name

State 67:
## Known stack suffix:
## name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 68
-- On DOT shift to state 123
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr -> name

State 68:
## Known stack suffix:
## name LEFTBRACKET
## LR(1) items:
array_access -> name LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 121
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 69:
## Known stack suffix:
## ident
## LR(1) items:
name -> ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> ident . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 70
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production name -> ident

State 70:
## Known stack suffix:
## ident LEFTPAR
## LR(1) items:
primary_no_new_array -> ident LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr_comma_list shift to state 73
-- On expr shift to state 74
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
-- On argument_list shift to state 119
## Reductions:
-- On RIGHTPAR
--   reduce production argument_list ->

State 71:
## Known stack suffix:
## field_access
## LR(1) items:
primary_no_new_array -> field_access . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> field_access

State 72:
## Known stack suffix:
## expr_no_name
## LR(1) items:
expr -> expr_no_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr -> expr_no_name

State 73:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
argument_list -> expr_comma_list . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production argument_list -> expr_comma_list

State 74:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list -> expr . [ RIGHTPAR ]
expr_comma_list -> expr . COMMA expr_comma_list [ RIGHTPAR ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On COMMA shift to state 117
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On RIGHTPAR
--   reduce production expr_comma_list -> expr

State 75:
## Known stack suffix:
## expr VERTICALBARVERTICALBAR
## LR(1) items:
expr_no_name -> expr VERTICALBARVERTICALBAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 76
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 76:
## Known stack suffix:
## expr VERTICALBARVERTICALBAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr VERTICALBARVERTICALBAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On VERTICALBARVERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT IF EQEQGT DOTDOT COMMA COLON
--   reduce production expr_no_name -> expr VERTICALBARVERTICALBAR expr

State 77:
## Known stack suffix:
## expr VERTICALBAR
## LR(1) items:
expr_no_name -> expr VERTICALBAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 78
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 78:
## Known stack suffix:
## expr VERTICALBAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr VERTICALBAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSAND shift to state 101
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT IF EQEQGT DOTDOT COMMA COLON AMPERSANDAMPERSAND
--   reduce production expr_no_name -> expr VERTICALBAR expr

State 79:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr_no_name -> expr STAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 80
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 80:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr STAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr STAR expr

State 81:
## Known stack suffix:
## array_creation_expression
## LR(1) items:
primary_expr -> array_creation_expression . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_expr -> array_creation_expression

State 82:
## Known stack suffix:
## array_access
## LR(1) items:
primary_no_new_array -> array_access . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> array_access

State 83:
## Known stack suffix:
## expr SLASH
## LR(1) items:
expr_no_name -> expr SLASH . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 84
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 84:
## Known stack suffix:
## expr SLASH expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr SLASH expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr SLASH expr

State 85:
## Known stack suffix:
## expr SHIFT
## LR(1) items:
expr_no_name -> expr SHIFT . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 86
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 86:
## Known stack suffix:
## expr SHIFT expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr SHIFT expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr SHIFT expr

State 87:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr_no_name -> expr PLUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 88
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 88:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr PLUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On PERCENT shift to state 89
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr PLUS expr

State 89:
## Known stack suffix:
## expr PERCENT
## LR(1) items:
expr_no_name -> expr PERCENT . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 90
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 90:
## Known stack suffix:
## expr PERCENT expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr PERCENT expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr PERCENT expr

State 91:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr_no_name -> expr MINUS . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 92
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 92:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr MINUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On PERCENT shift to state 89
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr MINUS expr

State 93:
## Known stack suffix:
## expr INSTANCEOF
## LR(1) items:
expr_no_name -> expr INSTANCEOF . type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 94
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 94:
## Known stack suffix:
## expr INSTANCEOF type_expr
## LR(1) items:
expr_no_name -> expr INSTANCEOF type_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr INSTANCEOF type_expr

State 95:
## Known stack suffix:
## expr EQOP
## LR(1) items:
expr_no_name -> expr EQOP . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 96
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 96:
## Known stack suffix:
## expr EQOP expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr EQOP expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On INSTANCEOF shift to state 93
-- On COMP shift to state 97
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT IF EQOP EQEQGT DOTDOT COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr EQOP expr

State 97:
## Known stack suffix:
## expr COMP
## LR(1) items:
expr_no_name -> expr COMP . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 98
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 98:
## Known stack suffix:
## expr COMP expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr COMP expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr COMP expr

State 99:
## Known stack suffix:
## expr CARET
## LR(1) items:
expr_no_name -> expr CARET . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 100
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 100:
## Known stack suffix:
## expr CARET expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr CARET expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On COMP shift to state 97
-- On AMPERSAND shift to state 101
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT IF EQEQGT DOTDOT COMMA COLON CARET AMPERSANDAMPERSAND
--   reduce production expr_no_name -> expr CARET expr

State 101:
## Known stack suffix:
## expr AMPERSAND
## LR(1) items:
expr_no_name -> expr AMPERSAND . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 102
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 102:
## Known stack suffix:
## expr AMPERSAND expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr AMPERSAND expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On COMP shift to state 97
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT IF EQEQGT DOTDOT COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> expr AMPERSAND expr

State 103:
## Known stack suffix:
## expr AMPERSANDAMPERSAND
## LR(1) items:
expr_no_name -> expr AMPERSANDAMPERSAND . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 104
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 104:
## Known stack suffix:
## expr AMPERSANDAMPERSAND expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr AMPERSANDAMPERSAND expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSAND shift to state 101
## Reductions:
-- On VERTICALBARVERTICALBAR SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQEQ LTEQBANGEQGT IF EQEQGT DOTDOT COMMA COLON AMPERSANDAMPERSAND
--   reduce production expr_no_name -> expr AMPERSANDAMPERSAND expr

State 105:
## Known stack suffix:
## expr QUESTIONMARK
## LR(1) items:
expr_no_name -> expr QUESTIONMARK . expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 106
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 106:
## Known stack suffix:
## expr QUESTIONMARK expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr QUESTIONMARK expr . COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On COLON shift to state 115
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 107:
## Known stack suffix:
## expr LTEQEQGT
## LR(1) items:
expr_no_name -> expr LTEQEQGT . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 108
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 108:
## Known stack suffix:
## expr LTEQEQGT expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr LTEQEQGT expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK IF DOTDOT COMMA COLON
--   reduce production expr_no_name -> expr LTEQEQGT expr

State 109:
## Known stack suffix:
## expr LTEQEQ
## LR(1) items:
expr_no_name -> expr LTEQEQ . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 110
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 110:
## Known stack suffix:
## expr LTEQEQ expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr LTEQEQ expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQ shift to state 109
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQBANGEQGT IF DOTDOT COMMA COLON
--   reduce production expr_no_name -> expr LTEQEQ expr

State 111:
## Known stack suffix:
## expr EQEQGT
## LR(1) items:
expr_no_name -> expr EQEQGT . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 112
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 112:
## Known stack suffix:
## expr EQEQGT expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr EQEQGT expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQ shift to state 109
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK LTEQEQGT LTEQBANGEQGT IF DOTDOT COMMA COLON
--   reduce production expr_no_name -> expr EQEQGT expr

State 113:
## Known stack suffix:
## expr LTEQBANGEQGT
## LR(1) items:
expr_no_name -> expr LTEQBANGEQGT . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 114
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 114:
## Known stack suffix:
## expr LTEQBANGEQGT expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr LTEQBANGEQGT expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK IF DOTDOT COMMA COLON
--   reduce production expr_no_name -> expr LTEQBANGEQGT expr

State 115:
## Known stack suffix:
## expr QUESTIONMARK expr COLON
## LR(1) items:
expr_no_name -> expr QUESTIONMARK expr COLON . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 116
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 116:
## Known stack suffix:
## expr QUESTIONMARK expr COLON expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr QUESTIONMARK expr COLON expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On SEMICOLON RIGHTPAR RIGHTBRACKET IF DOTDOT COMMA COLON
--   reduce production expr_no_name -> expr QUESTIONMARK expr COLON expr

State 117:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr_comma_list [ RIGHTPAR ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr_comma_list shift to state 118
-- On expr shift to state 74
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 118:
## Known stack suffix:
## expr COMMA expr_comma_list
## LR(1) items:
expr_comma_list -> expr COMMA expr_comma_list . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production expr_comma_list -> expr COMMA expr_comma_list

State 119:
## Known stack suffix:
## ident LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> ident LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## ident LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> ident LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> ident LEFTPAR argument_list RIGHTPAR

State 121:
## Known stack suffix:
## name LEFTBRACKET expr
## LR(1) items:
array_access -> name LEFTBRACKET expr . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTBRACKET shift to state 122
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 122:
## Known stack suffix:
## name LEFTBRACKET expr RIGHTBRACKET
## LR(1) items:
array_access -> name LEFTBRACKET expr RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_access -> name LEFTBRACKET expr RIGHTBRACKET

State 123:
## Known stack suffix:
## name DOT
## LR(1) items:
name -> name DOT . ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name DOT . ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On ID shift to state 4
-- On ident shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## name DOT ident
## LR(1) items:
name -> name DOT ident . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name DOT ident . LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTPAR shift to state 125
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production name -> name DOT ident

State 125:
## Known stack suffix:
## name DOT ident LEFTPAR
## LR(1) items:
primary_no_new_array -> name DOT ident LEFTPAR . argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr_comma_list shift to state 73
-- On expr shift to state 74
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
-- On argument_list shift to state 126
## Reductions:
-- On RIGHTPAR
--   reduce production argument_list ->

State 126:
## Known stack suffix:
## name DOT ident LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> name DOT ident LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## name DOT ident LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> name DOT ident LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> name DOT ident LEFTPAR argument_list RIGHTPAR

State 128:
## Known stack suffix:
## primary_expr DOT ident LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> primary_expr DOT ident LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## primary_expr DOT ident LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> primary_expr DOT ident LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> primary_expr DOT ident LEFTPAR argument_list RIGHTPAR

State 130:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET expr
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET expr . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTBRACKET shift to state 131
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 131:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET expr RIGHTBRACKET
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET expr RIGHTBRACKET . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_access -> primary_no_new_array LEFTBRACKET expr RIGHTBRACKET

State 132:
## Known stack suffix:
## BANG expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> BANG expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> BANG expr

State 133:
## Known stack suffix:
## BSFPI LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> BSFPI LEFTPAR expr . COMMA REAL COMMA REAL RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On COMMA shift to state 134
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 134:
## Known stack suffix:
## BSFPI LEFTPAR expr COMMA
## LR(1) items:
primary_no_new_array -> BSFPI LEFTPAR expr COMMA . REAL COMMA REAL RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On REAL shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## BSFPI LEFTPAR expr COMMA REAL
## LR(1) items:
primary_no_new_array -> BSFPI LEFTPAR expr COMMA REAL . COMMA REAL RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On COMMA shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## BSFPI LEFTPAR expr COMMA REAL COMMA
## LR(1) items:
primary_no_new_array -> BSFPI LEFTPAR expr COMMA REAL COMMA . REAL RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On REAL shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## BSFPI LEFTPAR expr COMMA REAL COMMA REAL
## LR(1) items:
primary_no_new_array -> BSFPI LEFTPAR expr COMMA REAL COMMA REAL . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## BSFPI LEFTPAR expr COMMA REAL COMMA REAL RIGHTPAR
## LR(1) items:
primary_no_new_array -> BSFPI LEFTPAR expr COMMA REAL COMMA REAL RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> BSFPI LEFTPAR expr COMMA REAL COMMA REAL RIGHTPAR

State 139:
## Known stack suffix:
## BSFRESH LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> BSFRESH LEFTPAR expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTPAR shift to state 140
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 140:
## Known stack suffix:
## BSFRESH LEFTPAR expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> BSFRESH LEFTPAR expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> BSFRESH LEFTPAR expr RIGHTPAR

State 141:
## Known stack suffix:
## BSOLD LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> BSOLD LEFTPAR expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTPAR shift to state 142
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 142:
## Known stack suffix:
## BSOLD LEFTPAR expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> BSOLD LEFTPAR expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> BSOLD LEFTPAR expr RIGHTPAR

State 143:
## Known stack suffix:
## BSTYPEOF LEFTPAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> BSTYPEOF LEFTPAR expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTPAR shift to state 144
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 144:
## Known stack suffix:
## BSTYPEOF LEFTPAR expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> BSTYPEOF LEFTPAR expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> BSTYPEOF LEFTPAR expr RIGHTPAR

State 145:
## Known stack suffix:
## LEFTPAR BSFORALL
## LR(1) items:
primary_no_new_array -> LEFTPAR BSFORALL . variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSFORALL . variable_declaration SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On variable_declaration shift to state 146
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 153
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 146:
## Known stack suffix:
## LEFTPAR BSFORALL variable_declaration
## LR(1) items:
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration . SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration . SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## LEFTPAR BSFORALL variable_declaration SEMICOLON
## LR(1) items:
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON . expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON . expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 148
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 148:
## Known stack suffix:
## LEFTPAR BSFORALL variable_declaration SEMICOLON expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr . SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On SEMICOLON shift to state 149
-- On RIGHTPAR shift to state 152
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 149:
## Known stack suffix:
## LEFTPAR BSFORALL variable_declaration SEMICOLON expr SEMICOLON
## LR(1) items:
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr SEMICOLON . expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 150
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 150:
## Known stack suffix:
## LEFTPAR BSFORALL variable_declaration SEMICOLON expr SEMICOLON expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr SEMICOLON expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTPAR shift to state 151
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 151:
## Known stack suffix:
## LEFTPAR BSFORALL variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR

State 152:
## Known stack suffix:
## LEFTPAR BSFORALL variable_declaration SEMICOLON expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> LEFTPAR BSFORALL variable_declaration SEMICOLON expr RIGHTPAR

State 153:
## Known stack suffix:
## type_expr
## LR(1) items:
variable_declaration -> type_expr . variable_declarators [ SEMICOLON ]
## Transitions:
-- On ID shift to state 4
-- On variable_declarators shift to state 154
-- On variable_declarator_id shift to state 155
-- On ident shift to state 160
## Reductions:

State 154:
## Known stack suffix:
## type_expr variable_declarators
## LR(1) items:
variable_declaration -> type_expr variable_declarators . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production variable_declaration -> type_expr variable_declarators

State 155:
## Known stack suffix:
## variable_declarator_id
## LR(1) items:
variable_declarator_id -> variable_declarator_id . LEFTBRACKET RIGHTBRACKET [ SEMICOLON LEFTBRACKET COMMA ]
variable_declarators -> variable_declarator_id . [ SEMICOLON ]
variable_declarators -> variable_declarator_id . COMMA variable_declarators [ SEMICOLON ]
## Transitions:
-- On LEFTBRACKET shift to state 156
-- On COMMA shift to state 158
## Reductions:
-- On SEMICOLON
--   reduce production variable_declarators -> variable_declarator_id

State 156:
## Known stack suffix:
## variable_declarator_id LEFTBRACKET
## LR(1) items:
variable_declarator_id -> variable_declarator_id LEFTBRACKET . RIGHTBRACKET [ SEMICOLON LEFTBRACKET COMMA ]
## Transitions:
-- On RIGHTBRACKET shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## variable_declarator_id LEFTBRACKET RIGHTBRACKET
## LR(1) items:
variable_declarator_id -> variable_declarator_id LEFTBRACKET RIGHTBRACKET . [ SEMICOLON LEFTBRACKET COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACKET COMMA
--   reduce production variable_declarator_id -> variable_declarator_id LEFTBRACKET RIGHTBRACKET

State 158:
## Known stack suffix:
## variable_declarator_id COMMA
## LR(1) items:
variable_declarators -> variable_declarator_id COMMA . variable_declarators [ SEMICOLON ]
## Transitions:
-- On ID shift to state 4
-- On variable_declarators shift to state 159
-- On variable_declarator_id shift to state 155
-- On ident shift to state 160
## Reductions:

State 159:
## Known stack suffix:
## variable_declarator_id COMMA variable_declarators
## LR(1) items:
variable_declarators -> variable_declarator_id COMMA variable_declarators . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production variable_declarators -> variable_declarator_id COMMA variable_declarators

State 160:
## Known stack suffix:
## ident
## LR(1) items:
variable_declarator_id -> ident . [ SEMICOLON LEFTBRACKET COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACKET COMMA
--   reduce production variable_declarator_id -> ident

State 161:
## Known stack suffix:
## LEFTPAR BSEXISTS
## LR(1) items:
primary_no_new_array -> LEFTPAR BSEXISTS . variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSEXISTS . variable_declaration SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On variable_declaration shift to state 162
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 153
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 162:
## Known stack suffix:
## LEFTPAR BSEXISTS variable_declaration
## LR(1) items:
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration . SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration . SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On SEMICOLON shift to state 163
## Reductions:

State 163:
## Known stack suffix:
## LEFTPAR BSEXISTS variable_declaration SEMICOLON
## LR(1) items:
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON . expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON . expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 164
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 164:
## Known stack suffix:
## LEFTPAR BSEXISTS variable_declaration SEMICOLON expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr . SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On SEMICOLON shift to state 165
-- On RIGHTPAR shift to state 168
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 165:
## Known stack suffix:
## LEFTPAR BSEXISTS variable_declaration SEMICOLON expr SEMICOLON
## LR(1) items:
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr SEMICOLON . expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 166
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 166:
## Known stack suffix:
## LEFTPAR BSEXISTS variable_declaration SEMICOLON expr SEMICOLON expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr SEMICOLON expr . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTPAR shift to state 167
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 167:
## Known stack suffix:
## LEFTPAR BSEXISTS variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR

State 168:
## Known stack suffix:
## LEFTPAR BSEXISTS variable_declaration SEMICOLON expr RIGHTPAR
## LR(1) items:
primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> LEFTPAR BSEXISTS variable_declaration SEMICOLON expr RIGHTPAR

State 169:
## Known stack suffix:
## LEFTPAR name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF EQOP EQEQGT DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
array_type_expr -> name . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> LEFTPAR name . RIGHTPAR primary_expr_or_name [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF EQOP EQEQGT DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
parenthesized_name -> LEFTPAR name . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF EQOP EQEQGT DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 170
-- On LEFTBRACKET shift to state 180
-- On DOT shift to state 123
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr -> name

State 170:
## Known stack suffix:
## LEFTPAR name RIGHTPAR
## LR(1) items:
expr_no_name -> LEFTPAR name RIGHTPAR . primary_expr_or_name [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
parenthesized_name -> LEFTPAR name RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On LEFTPAR shift to state 171
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On primary_no_new_array shift to state 60
-- On primary_expr_or_name shift to state 177
-- On primary_expr shift to state 178
-- On parenthesized_name shift to state 66
-- On name shift to state 179
-- On ident shift to state 69
-- On field_access shift to state 71
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production parenthesized_name -> LEFTPAR name RIGHTPAR

State 171:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
parenthesized_name -> LEFTPAR . name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSFORALL variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSFORALL variable_declaration SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSEXISTS variable_declaration SEMICOLON expr SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . BSEXISTS variable_declaration SEMICOLON expr RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR . expr_no_name RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BSFORALL shift to state 145
-- On BSEXISTS shift to state 161
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 172
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 174
-- On expr shift to state 176
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 172:
## Known stack suffix:
## LEFTPAR name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF EQOP EQEQGT DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF EQOP EQEQGT DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
parenthesized_name -> LEFTPAR name . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF EQOP EQEQGT DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 173
-- On LEFTBRACKET shift to state 68
-- On DOT shift to state 123
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr -> name

State 173:
## Known stack suffix:
## LEFTPAR name RIGHTPAR
## LR(1) items:
parenthesized_name -> LEFTPAR name RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production parenthesized_name -> LEFTPAR name RIGHTPAR

State 174:
## Known stack suffix:
## LEFTPAR expr_no_name
## LR(1) items:
expr -> expr_no_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> LEFTPAR expr_no_name . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 175
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr -> expr_no_name

State 175:
## Known stack suffix:
## LEFTPAR expr_no_name RIGHTPAR
## LR(1) items:
primary_no_new_array -> LEFTPAR expr_no_name RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> LEFTPAR expr_no_name RIGHTPAR

State 176:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 177:
## Known stack suffix:
## LEFTPAR name RIGHTPAR primary_expr_or_name
## LR(1) items:
expr_no_name -> LEFTPAR name RIGHTPAR primary_expr_or_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> LEFTPAR name RIGHTPAR primary_expr_or_name

State 178:
## Known stack suffix:
## primary_expr
## LR(1) items:
field_access -> primary_expr . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_expr_or_name -> primary_expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> primary_expr . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On DOT shift to state 63
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_expr_or_name -> primary_expr

State 179:
## Known stack suffix:
## name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_expr_or_name -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 68
-- On DOT shift to state 123
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_expr_or_name -> name

State 180:
## Known stack suffix:
## name LEFTBRACKET
## LR(1) items:
array_access -> name LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF EQOP EQEQGT DOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
array_type_expr -> name LEFTBRACKET . RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On RIGHTBRACKET shift to state 42
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 121
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 181:
## Known stack suffix:
## LEFTPAR base_type
## LR(1) items:
array_type_expr -> base_type . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
expr_no_name -> LEFTPAR base_type . RIGHTPAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 182
-- On LEFTBRACKET shift to state 47
## Reductions:

State 182:
## Known stack suffix:
## LEFTPAR base_type RIGHTPAR
## LR(1) items:
expr_no_name -> LEFTPAR base_type RIGHTPAR . expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 183
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 183:
## Known stack suffix:
## LEFTPAR base_type RIGHTPAR expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> LEFTPAR base_type RIGHTPAR expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> LEFTPAR base_type RIGHTPAR expr

State 184:
## Known stack suffix:
## LEFTPAR array_type_expr
## LR(1) items:
array_type_expr -> array_type_expr . LEFTBRACKET RIGHTBRACKET [ RIGHTPAR LEFTBRACKET ]
expr_no_name -> LEFTPAR array_type_expr . RIGHTPAR primary_expr_or_name [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 185
-- On LEFTBRACKET shift to state 50
## Reductions:

State 185:
## Known stack suffix:
## LEFTPAR array_type_expr RIGHTPAR
## LR(1) items:
expr_no_name -> LEFTPAR array_type_expr RIGHTPAR . primary_expr_or_name [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On LEFTPAR shift to state 171
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On primary_no_new_array shift to state 60
-- On primary_expr_or_name shift to state 186
-- On primary_expr shift to state 178
-- On parenthesized_name shift to state 66
-- On name shift to state 179
-- On ident shift to state 69
-- On field_access shift to state 71
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 186:
## Known stack suffix:
## LEFTPAR array_type_expr RIGHTPAR primary_expr_or_name
## LR(1) items:
expr_no_name -> LEFTPAR array_type_expr RIGHTPAR primary_expr_or_name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> LEFTPAR array_type_expr RIGHTPAR primary_expr_or_name

State 187:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> MINUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> MINUS expr

State 188:
## Known stack suffix:
## NEW name LEFTPAR argument_list
## LR(1) items:
primary_no_new_array -> NEW name LEFTPAR argument_list . RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTPAR shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## NEW name LEFTPAR argument_list RIGHTPAR
## LR(1) items:
primary_no_new_array -> NEW name LEFTPAR argument_list RIGHTPAR . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_no_new_array -> NEW name LEFTPAR argument_list RIGHTPAR

State 190:
## Known stack suffix:
## LEFTBRACKET
## LR(1) items:
array_dims -> LEFTBRACKET . expr RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET . expr RIGHTBRACKET array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 191
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 191:
## Known stack suffix:
## LEFTBRACKET expr
## LR(1) items:
array_dims -> LEFTBRACKET expr . RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET expr . RIGHTBRACKET array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTBRACKET shift to state 192
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 192:
## Known stack suffix:
## LEFTBRACKET expr RIGHTBRACKET
## LR(1) items:
array_dims -> LEFTBRACKET expr RIGHTBRACKET . implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET expr RIGHTBRACKET . array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 193
-- On implicit_dims shift to state 197
-- On array_dims shift to state 198
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production implicit_dims ->

State 193:
## Known stack suffix:
## LEFTBRACKET
## LR(1) items:
array_dims -> LEFTBRACKET . expr RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
array_dims -> LEFTBRACKET . expr RIGHTBRACKET array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
implicit_dims -> LEFTBRACKET . RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On RIGHTBRACKET shift to state 194
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 191
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 194:
## Known stack suffix:
## LEFTBRACKET RIGHTBRACKET
## LR(1) items:
implicit_dims -> LEFTBRACKET RIGHTBRACKET . implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 195
-- On implicit_dims shift to state 196
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production implicit_dims ->

State 195:
## Known stack suffix:
## LEFTBRACKET
## LR(1) items:
implicit_dims -> LEFTBRACKET . RIGHTBRACKET implicit_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On RIGHTBRACKET shift to state 194
## Reductions:

State 196:
## Known stack suffix:
## LEFTBRACKET RIGHTBRACKET implicit_dims
## LR(1) items:
implicit_dims -> LEFTBRACKET RIGHTBRACKET implicit_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production implicit_dims -> LEFTBRACKET RIGHTBRACKET implicit_dims

State 197:
## Known stack suffix:
## LEFTBRACKET expr RIGHTBRACKET implicit_dims
## LR(1) items:
array_dims -> LEFTBRACKET expr RIGHTBRACKET implicit_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_dims -> LEFTBRACKET expr RIGHTBRACKET implicit_dims

State 198:
## Known stack suffix:
## LEFTBRACKET expr RIGHTBRACKET array_dims
## LR(1) items:
array_dims -> LEFTBRACKET expr RIGHTBRACKET array_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_dims -> LEFTBRACKET expr RIGHTBRACKET array_dims

State 199:
## Known stack suffix:
## NEW name array_dims
## LR(1) items:
array_creation_expression -> NEW name array_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_creation_expression -> NEW name array_dims

State 200:
## Known stack suffix:
## NEW base_type
## LR(1) items:
array_creation_expression -> NEW base_type . array_dims [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 190
-- On array_dims shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## NEW base_type array_dims
## LR(1) items:
array_creation_expression -> NEW base_type array_dims . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT DOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production array_creation_expression -> NEW base_type array_dims

State 202:
## Known stack suffix:
## PLUS expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> PLUS expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> PLUS expr

State 203:
## Known stack suffix:
## TILDA expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> TILDA expr . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON RIGHTPAR RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOTDOT COMP COMMA COLON CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr_no_name -> TILDA expr

State 204:
## Known stack suffix:
## REPRESENTS ident LEFTARROW expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
jml_declaration -> REPRESENTS ident LEFTARROW expr . SEMICOLON [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On SEMICOLON shift to state 205
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 205:
## Known stack suffix:
## REPRESENTS ident LEFTARROW expr SEMICOLON
## LR(1) items:
jml_declaration -> REPRESENTS ident LEFTARROW expr SEMICOLON . [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN
--   reduce production jml_declaration -> REPRESENTS ident LEFTARROW expr SEMICOLON

State 206:
## Known stack suffix:
## PURE
## LR(1) items:
jml_specification -> PURE . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production jml_specification -> PURE

State 207:
## Known stack suffix:
## PUBLIC
## LR(1) items:
modifier -> PUBLIC . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
privacy -> PUBLIC . [ NORMAL_BEHAVIOR INVARIANT EXCEPTIONAL_BEHAVIOR BEHAVIOR ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> PUBLIC
-- On NORMAL_BEHAVIOR INVARIANT EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy -> PUBLIC

State 208:
## Known stack suffix:
## PROTECTED
## LR(1) items:
modifier -> PROTECTED . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
privacy -> PROTECTED . [ NORMAL_BEHAVIOR INVARIANT EXCEPTIONAL_BEHAVIOR BEHAVIOR ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> PROTECTED
-- On NORMAL_BEHAVIOR INVARIANT EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy -> PROTECTED

State 209:
## Known stack suffix:
## PRIVATE
## LR(1) items:
modifier -> PRIVATE . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
privacy -> PRIVATE . [ NORMAL_BEHAVIOR INVARIANT EXCEPTIONAL_BEHAVIOR BEHAVIOR ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> PRIVATE
-- On NORMAL_BEHAVIOR INVARIANT EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy -> PRIVATE

State 210:
## Known stack suffix:
## MODEL
## LR(1) items:
modifier -> MODEL . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> MODEL

State 211:
## Known stack suffix:
## LOOP_INVARIANT
## LR(1) items:
loop_annotation -> LOOP_INVARIANT . expr_semicolon assignable_clauses decreases_clause [ EOF ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 212
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 212:
## Known stack suffix:
## LOOP_INVARIANT expr_semicolon
## LR(1) items:
loop_annotation -> LOOP_INVARIANT expr_semicolon . assignable_clauses decreases_clause [ EOF ]
## Transitions:
-- On ASSIGNABLE shift to state 213
-- On assignable_clauses shift to state 252
-- On assignable_clause shift to state 258
## Reductions:
-- On EOF DECREASES
--   reduce production assignable_clauses ->

State 213:
## Known stack suffix:
## ASSIGNABLE
## LR(1) items:
assignable_clause -> ASSIGNABLE . assignable_objects SEMICOLON [ SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSNOTHING shift to state 214
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BSFIELDSOF shift to state 215
-- On BSEVERYTHING shift to state 219
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 220
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 238
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 243
-- On assignable_objects shift to state 244
-- On assignable_entry shift to state 246
-- On assignable_any_object shift to state 249
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 214:
## Known stack suffix:
## BSNOTHING
## LR(1) items:
assignable_any_object -> BSNOTHING . [ SEMICOLON IF COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production assignable_any_object -> BSNOTHING

State 215:
## Known stack suffix:
## BSFIELDSOF
## LR(1) items:
assignable_any_object -> BSFIELDSOF . LEFTPAR expr RIGHTPAR [ SEMICOLON IF COMMA ]
## Transitions:
-- On LEFTPAR shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## BSFIELDSOF LEFTPAR
## LR(1) items:
assignable_any_object -> BSFIELDSOF LEFTPAR . expr RIGHTPAR [ SEMICOLON IF COMMA ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 217
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 217:
## Known stack suffix:
## BSFIELDSOF LEFTPAR expr
## LR(1) items:
assignable_any_object -> BSFIELDSOF LEFTPAR expr . RIGHTPAR [ SEMICOLON IF COMMA ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTPAR QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTPAR shift to state 218
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 218:
## Known stack suffix:
## BSFIELDSOF LEFTPAR expr RIGHTPAR
## LR(1) items:
assignable_any_object -> BSFIELDSOF LEFTPAR expr RIGHTPAR . [ SEMICOLON IF COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production assignable_any_object -> BSFIELDSOF LEFTPAR expr RIGHTPAR

State 219:
## Known stack suffix:
## BSEVERYTHING
## LR(1) items:
assignable_any_object -> BSEVERYTHING . [ SEMICOLON IF COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production assignable_any_object -> BSEVERYTHING

State 220:
## Known stack suffix:
## primary_no_new_array
## LR(1) items:
array_access -> primary_no_new_array . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
assignable_any_object -> primary_no_new_array . set_ref_sep set_ref_list [ SEMICOLON IF COMMA ]
primary_expr -> primary_no_new_array . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 221
-- On set_ref_sep shift to state 228
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production primary_expr -> primary_no_new_array

State 221:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
set_ref_sep -> LEFTBRACKET . expr DOTDOT expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
set_ref_sep -> LEFTBRACKET . STAR RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On STAR shift to state 222
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 224
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 222:
## Known stack suffix:
## LEFTBRACKET STAR
## LR(1) items:
set_ref_sep -> LEFTBRACKET STAR . RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On RIGHTBRACKET shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## LEFTBRACKET STAR RIGHTBRACKET
## LR(1) items:
set_ref_sep -> LEFTBRACKET STAR RIGHTBRACKET . [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACKET IF DOT COMMA
--   reduce production set_ref_sep -> LEFTBRACKET STAR RIGHTBRACKET

State 224:
## Known stack suffix:
## primary_no_new_array LEFTBRACKET expr
## LR(1) items:
array_access -> primary_no_new_array LEFTBRACKET expr . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
set_ref_sep -> LEFTBRACKET expr . DOTDOT expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTBRACKET shift to state 131
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On DOTDOT shift to state 225
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 225:
## Known stack suffix:
## LEFTBRACKET expr DOTDOT
## LR(1) items:
set_ref_sep -> LEFTBRACKET expr DOTDOT . expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 226
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 226:
## Known stack suffix:
## LEFTBRACKET expr DOTDOT expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
set_ref_sep -> LEFTBRACKET expr DOTDOT expr . RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTBRACKET shift to state 227
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 227:
## Known stack suffix:
## LEFTBRACKET expr DOTDOT expr RIGHTBRACKET
## LR(1) items:
set_ref_sep -> LEFTBRACKET expr DOTDOT expr RIGHTBRACKET . [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACKET IF DOT COMMA
--   reduce production set_ref_sep -> LEFTBRACKET expr DOTDOT expr RIGHTBRACKET

State 228:
## Known stack suffix:
## primary_no_new_array set_ref_sep
## LR(1) items:
assignable_any_object -> primary_no_new_array set_ref_sep . set_ref_list [ SEMICOLON IF COMMA ]
## Transitions:
-- On LEFTBRACKET shift to state 229
-- On DOT shift to state 232
-- On set_ref_sep shift to state 234
-- On set_ref_list shift to state 235
-- On set_ref shift to state 236
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production set_ref_list ->

State 229:
## Known stack suffix:
## LEFTBRACKET
## LR(1) items:
set_ref -> LEFTBRACKET . expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
set_ref_sep -> LEFTBRACKET . expr DOTDOT expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
set_ref_sep -> LEFTBRACKET . STAR RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On STAR shift to state 222
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 230
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 230:
## Known stack suffix:
## LEFTBRACKET expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
set_ref -> LEFTBRACKET expr . RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
set_ref_sep -> LEFTBRACKET expr . DOTDOT expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTBRACKET shift to state 231
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On DOTDOT shift to state 225
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 231:
## Known stack suffix:
## LEFTBRACKET expr RIGHTBRACKET
## LR(1) items:
set_ref -> LEFTBRACKET expr RIGHTBRACKET . [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACKET IF DOT COMMA
--   reduce production set_ref -> LEFTBRACKET expr RIGHTBRACKET

State 232:
## Known stack suffix:
## DOT
## LR(1) items:
set_ref -> DOT . ident [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On ID shift to state 4
-- On ident shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## DOT ident
## LR(1) items:
set_ref -> DOT ident . [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACKET IF DOT COMMA
--   reduce production set_ref -> DOT ident

State 234:
## Known stack suffix:
## set_ref_sep
## LR(1) items:
set_ref -> set_ref_sep . [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON LEFTBRACKET IF DOT COMMA
--   reduce production set_ref -> set_ref_sep

State 235:
## Known stack suffix:
## primary_no_new_array set_ref_sep set_ref_list
## LR(1) items:
assignable_any_object -> primary_no_new_array set_ref_sep set_ref_list . [ SEMICOLON IF COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production assignable_any_object -> primary_no_new_array set_ref_sep set_ref_list

State 236:
## Known stack suffix:
## set_ref
## LR(1) items:
set_ref_list -> set_ref . set_ref_list [ SEMICOLON IF COMMA ]
## Transitions:
-- On LEFTBRACKET shift to state 229
-- On DOT shift to state 232
-- On set_ref_sep shift to state 234
-- On set_ref_list shift to state 237
-- On set_ref shift to state 236
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production set_ref_list ->

State 237:
## Known stack suffix:
## set_ref set_ref_list
## LR(1) items:
set_ref_list -> set_ref set_ref_list . [ SEMICOLON IF COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production set_ref_list -> set_ref set_ref_list

State 238:
## Known stack suffix:
## name
## LR(1) items:
array_access -> name . LEFTBRACKET expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
assignable_any_object -> name . set_ref_sep set_ref_list [ SEMICOLON IF COMMA ]
expr -> name . [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
name -> name . DOT ident [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
primary_no_new_array -> name . DOT ident LEFTPAR argument_list RIGHTPAR [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On LEFTBRACKET shift to state 239
-- On DOT shift to state 123
-- On set_ref_sep shift to state 241
## Reductions:
-- On VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND
--   reduce production expr -> name

State 239:
## Known stack suffix:
## name LEFTBRACKET
## LR(1) items:
array_access -> name LEFTBRACKET . expr RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
set_ref_sep -> LEFTBRACKET . expr DOTDOT expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
set_ref_sep -> LEFTBRACKET . STAR RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On STAR shift to state 222
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 240
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 240:
## Known stack suffix:
## name LEFTBRACKET expr
## LR(1) items:
array_access -> name LEFTBRACKET expr . RIGHTBRACKET [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT LEFTBRACKET INSTANCEOF IF EQOP EQEQGT DOT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT RIGHTBRACKET QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT DOTDOT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
set_ref_sep -> LEFTBRACKET expr . DOTDOT expr RIGHTBRACKET [ SEMICOLON LEFTBRACKET IF DOT COMMA ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On RIGHTBRACKET shift to state 122
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On DOTDOT shift to state 225
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 241:
## Known stack suffix:
## name set_ref_sep
## LR(1) items:
assignable_any_object -> name set_ref_sep . set_ref_list [ SEMICOLON IF COMMA ]
## Transitions:
-- On LEFTBRACKET shift to state 229
-- On DOT shift to state 232
-- On set_ref_sep shift to state 234
-- On set_ref_list shift to state 242
-- On set_ref shift to state 236
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production set_ref_list ->

State 242:
## Known stack suffix:
## name set_ref_sep set_ref_list
## LR(1) items:
assignable_any_object -> name set_ref_sep set_ref_list . [ SEMICOLON IF COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production assignable_any_object -> name set_ref_sep set_ref_list

State 243:
## Known stack suffix:
## expr
## LR(1) items:
assignable_any_object -> expr . [ SEMICOLON IF COMMA ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF IF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On SEMICOLON IF COMMA
--   reduce production assignable_any_object -> expr

State 244:
## Known stack suffix:
## ASSIGNABLE assignable_objects
## LR(1) items:
assignable_clause -> ASSIGNABLE assignable_objects . SEMICOLON [ SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On SEMICOLON shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## ASSIGNABLE assignable_objects SEMICOLON
## LR(1) items:
assignable_clause -> ASSIGNABLE assignable_objects SEMICOLON . [ SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production assignable_clause -> ASSIGNABLE assignable_objects SEMICOLON

State 246:
## Known stack suffix:
## assignable_entry
## LR(1) items:
assignable_objects -> assignable_entry . [ SEMICOLON ]
assignable_objects -> assignable_entry . COMMA assignable_objects [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 247
## Reductions:
-- On SEMICOLON
--   reduce production assignable_objects -> assignable_entry

State 247:
## Known stack suffix:
## assignable_entry COMMA
## LR(1) items:
assignable_objects -> assignable_entry COMMA . assignable_objects [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSNOTHING shift to state 214
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BSFIELDSOF shift to state 215
-- On BSEVERYTHING shift to state 219
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 220
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 238
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 243
-- On assignable_objects shift to state 248
-- On assignable_entry shift to state 246
-- On assignable_any_object shift to state 249
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 248:
## Known stack suffix:
## assignable_entry COMMA assignable_objects
## LR(1) items:
assignable_objects -> assignable_entry COMMA assignable_objects . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production assignable_objects -> assignable_entry COMMA assignable_objects

State 249:
## Known stack suffix:
## assignable_any_object
## LR(1) items:
assignable_entry -> assignable_any_object . [ SEMICOLON COMMA ]
assignable_entry -> assignable_any_object . IF expr [ SEMICOLON COMMA ]
## Transitions:
-- On IF shift to state 250
## Reductions:
-- On SEMICOLON COMMA
--   reduce production assignable_entry -> assignable_any_object

State 250:
## Known stack suffix:
## assignable_any_object IF
## LR(1) items:
assignable_entry -> assignable_any_object IF . expr [ SEMICOLON COMMA ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 251
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 251:
## Known stack suffix:
## assignable_any_object IF expr
## LR(1) items:
assignable_entry -> assignable_any_object IF expr . [ SEMICOLON COMMA ]
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP COMMA CARET AMPERSANDAMPERSAND AMPERSAND ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:
-- On SEMICOLON COMMA
--   reduce production assignable_entry -> assignable_any_object IF expr

State 252:
## Known stack suffix:
## LOOP_INVARIANT expr_semicolon assignable_clauses
## LR(1) items:
loop_annotation -> LOOP_INVARIANT expr_semicolon assignable_clauses . decreases_clause [ EOF ]
## Transitions:
-- On DECREASES shift to state 253
-- On decreases_clause shift to state 257
## Reductions:
-- On EOF
--   reduce production decreases_clause ->

State 253:
## Known stack suffix:
## DECREASES
## LR(1) items:
decreases_clause -> DECREASES . expr_semicolon [ EOF ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 254
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 254:
## Known stack suffix:
## DECREASES expr_semicolon
## LR(1) items:
decreases_clause -> DECREASES expr_semicolon . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production decreases_clause -> DECREASES expr_semicolon

State 255:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_semicolon -> expr . SEMICOLON [ WHEN STATIC SIGNALS SHORT REQUIRES REPRESENTS PUBLIC PROTECTED PRIVATE MODEL MEASURED_BY LONG LEFTBRACEBAR INVARIANT INT ID FLOAT FINAL EOF ENSURES DOUBLE DIVERGES DECREASES CHAR BYTE BOOLEAN BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On SEMICOLON shift to state 256
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 256:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
expr_semicolon -> expr SEMICOLON . [ WHEN STATIC SIGNALS SHORT REQUIRES REPRESENTS PUBLIC PROTECTED PRIVATE MODEL MEASURED_BY LONG LEFTBRACEBAR INVARIANT INT ID FLOAT FINAL EOF ENSURES DOUBLE DIVERGES DECREASES CHAR BYTE BOOLEAN BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN STATIC SIGNALS SHORT REQUIRES REPRESENTS PUBLIC PROTECTED PRIVATE MODEL MEASURED_BY LONG LEFTBRACEBAR INVARIANT INT ID FLOAT FINAL EOF ENSURES DOUBLE DIVERGES DECREASES CHAR BYTE BOOLEAN BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production expr_semicolon -> expr SEMICOLON

State 257:
## Known stack suffix:
## LOOP_INVARIANT expr_semicolon assignable_clauses decreases_clause
## LR(1) items:
loop_annotation -> LOOP_INVARIANT expr_semicolon assignable_clauses decreases_clause . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production loop_annotation -> LOOP_INVARIANT expr_semicolon assignable_clauses decreases_clause

State 258:
## Known stack suffix:
## assignable_clause
## LR(1) items:
assignable_clauses -> assignable_clause . assignable_clauses [ SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On ASSIGNABLE shift to state 213
-- On assignable_clauses shift to state 259
-- On assignable_clause shift to state 258
## Reductions:
-- On SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE AND ALSO
--   reduce production assignable_clauses ->

State 259:
## Known stack suffix:
## assignable_clause assignable_clauses
## LR(1) items:
assignable_clauses -> assignable_clause assignable_clauses . [ SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF ENSURES DIVERGES DECREASES BARRIGHTBRACE AND ALSO
--   reduce production assignable_clauses -> assignable_clause assignable_clauses

State 260:
## Known stack suffix:
## FORALL
## LR(1) items:
forall_var_decl -> FORALL . variable_declaration SEMICOLON [ WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR FORALL EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On variable_declaration shift to state 261
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 153
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 261:
## Known stack suffix:
## FORALL variable_declaration
## LR(1) items:
forall_var_decl -> FORALL variable_declaration . SEMICOLON [ WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR FORALL EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On SEMICOLON shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## FORALL variable_declaration SEMICOLON
## LR(1) items:
forall_var_decl -> FORALL variable_declaration SEMICOLON . [ WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR FORALL EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR FORALL EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production forall_var_decl -> FORALL variable_declaration SEMICOLON

State 263:
## Known stack suffix:
## FINAL
## LR(1) items:
modifier -> FINAL . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> FINAL

State 264:
## Known stack suffix:
## ASSERT
## LR(1) items:
jml_specification -> ASSERT . expr_semicolon [ EOF ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 265
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 265:
## Known stack suffix:
## ASSERT expr_semicolon
## LR(1) items:
jml_specification -> ASSERT expr_semicolon . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production jml_specification -> ASSERT expr_semicolon

State 266:
## Known stack suffix:
## AND
## LR(1) items:
extending_specification -> AND . conjoinable_spec_seq [ EOF ]
## Transitions:
-- On PUBLIC shift to state 267
-- On PROTECTED shift to state 268
-- On PRIVATE shift to state 269
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 270
-- On privacy shift to state 307
-- On generic_conjoinable_spec shift to state 337
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On conjoinable_spec_seq shift to state 338
-- On conjoinable_spec shift to state 339
-- On behavior_conjoinable_spec shift to state 342
## Reductions:
-- On SIGNALS OLD ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->
-- On NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy ->

State 267:
## Known stack suffix:
## PUBLIC
## LR(1) items:
privacy -> PUBLIC . [ NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR ]
## Transitions:
## Reductions:
-- On NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy -> PUBLIC

State 268:
## Known stack suffix:
## PROTECTED
## LR(1) items:
privacy -> PROTECTED . [ NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR ]
## Transitions:
## Reductions:
-- On NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy -> PROTECTED

State 269:
## Known stack suffix:
## PRIVATE
## LR(1) items:
privacy -> PRIVATE . [ NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR ]
## Transitions:
## Reductions:
-- On NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy -> PRIVATE

State 270:
## Known stack suffix:
## spec_var_decls
## LR(1) items:
generic_conjoinable_spec -> spec_var_decls . simple_spec_body [ EOF AND ]
## Transitions:
-- On SIGNALS shift to state 271
-- On ENSURES shift to state 282
-- On DIVERGES shift to state 284
-- On ASSIGNABLE shift to state 213
-- On simple_spec_body shift to state 286
-- On signals_clause shift to state 287
-- On ensures_clause shift to state 294
-- On diverges_clause shift to state 300
-- On assignable_clause shift to state 302
## Reductions:

State 271:
## Known stack suffix:
## SIGNALS
## LR(1) items:
signals_clause -> SIGNALS . LEFTPAR type_expr ident RIGHTPAR opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
signals_clause -> SIGNALS . LEFTPAR type_expr RIGHTPAR opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On LEFTPAR shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## SIGNALS LEFTPAR
## LR(1) items:
signals_clause -> SIGNALS LEFTPAR . type_expr ident RIGHTPAR opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
signals_clause -> SIGNALS LEFTPAR . type_expr RIGHTPAR opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 273
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 273:
## Known stack suffix:
## SIGNALS LEFTPAR type_expr
## LR(1) items:
signals_clause -> SIGNALS LEFTPAR type_expr . ident RIGHTPAR opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
signals_clause -> SIGNALS LEFTPAR type_expr . RIGHTPAR opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On RIGHTPAR shift to state 274
-- On ID shift to state 4
-- On ident shift to state 279
## Reductions:

State 274:
## Known stack suffix:
## SIGNALS LEFTPAR type_expr RIGHTPAR
## LR(1) items:
signals_clause -> SIGNALS LEFTPAR type_expr RIGHTPAR . opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On SEMICOLON shift to state 275
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On opt_expr_semicolon shift to state 276
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 277
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 275:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
opt_expr_semicolon -> SEMICOLON . [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production opt_expr_semicolon -> SEMICOLON

State 276:
## Known stack suffix:
## SIGNALS LEFTPAR type_expr RIGHTPAR opt_expr_semicolon
## LR(1) items:
signals_clause -> SIGNALS LEFTPAR type_expr RIGHTPAR opt_expr_semicolon . [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clause -> SIGNALS LEFTPAR type_expr RIGHTPAR opt_expr_semicolon

State 277:
## Known stack suffix:
## expr
## LR(1) items:
expr_no_name -> expr . QUESTIONMARK expr COLON expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQ expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . LTEQBANGEQGT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBARVERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSANDAMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . VERTICALBAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . CARET expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . AMPERSAND expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . EQOP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . COMP expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SHIFT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PLUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . MINUS expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . STAR expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . SLASH expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . PERCENT expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
expr_no_name -> expr . INSTANCEOF type_expr [ VERTICALBARVERTICALBAR VERTICALBAR STAR SLASH SHIFT SEMICOLON QUESTIONMARK PLUS PERCENT MINUS LTEQEQGT LTEQEQ LTEQBANGEQGT INSTANCEOF EQOP EQEQGT COMP CARET AMPERSANDAMPERSAND AMPERSAND ]
opt_expr_semicolon -> expr . SEMICOLON [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On VERTICALBARVERTICALBAR shift to state 75
-- On VERTICALBAR shift to state 77
-- On STAR shift to state 79
-- On SLASH shift to state 83
-- On SHIFT shift to state 85
-- On SEMICOLON shift to state 278
-- On QUESTIONMARK shift to state 105
-- On PLUS shift to state 87
-- On PERCENT shift to state 89
-- On MINUS shift to state 91
-- On LTEQEQGT shift to state 107
-- On LTEQEQ shift to state 109
-- On LTEQBANGEQGT shift to state 113
-- On INSTANCEOF shift to state 93
-- On EQOP shift to state 95
-- On EQEQGT shift to state 111
-- On COMP shift to state 97
-- On CARET shift to state 99
-- On AMPERSANDAMPERSAND shift to state 103
-- On AMPERSAND shift to state 101
## Reductions:

State 278:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
opt_expr_semicolon -> expr SEMICOLON . [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production opt_expr_semicolon -> expr SEMICOLON

State 279:
## Known stack suffix:
## SIGNALS LEFTPAR type_expr ident
## LR(1) items:
signals_clause -> SIGNALS LEFTPAR type_expr ident . RIGHTPAR opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On RIGHTPAR shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## SIGNALS LEFTPAR type_expr ident RIGHTPAR
## LR(1) items:
signals_clause -> SIGNALS LEFTPAR type_expr ident RIGHTPAR . opt_expr_semicolon [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On SEMICOLON shift to state 275
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On opt_expr_semicolon shift to state 281
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_no_name shift to state 72
-- On expr shift to state 277
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 281:
## Known stack suffix:
## SIGNALS LEFTPAR type_expr ident RIGHTPAR opt_expr_semicolon
## LR(1) items:
signals_clause -> SIGNALS LEFTPAR type_expr ident RIGHTPAR opt_expr_semicolon . [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clause -> SIGNALS LEFTPAR type_expr ident RIGHTPAR opt_expr_semicolon

State 282:
## Known stack suffix:
## ENSURES
## LR(1) items:
ensures_clause -> ENSURES . expr_semicolon [ SIGNALS EOF ENSURES DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 283
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 283:
## Known stack suffix:
## ENSURES expr_semicolon
## LR(1) items:
ensures_clause -> ENSURES expr_semicolon . [ SIGNALS EOF ENSURES DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF ENSURES DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production ensures_clause -> ENSURES expr_semicolon

State 284:
## Known stack suffix:
## DIVERGES
## LR(1) items:
diverges_clause -> DIVERGES . expr_semicolon [ EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 285
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 285:
## Known stack suffix:
## DIVERGES expr_semicolon
## LR(1) items:
diverges_clause -> DIVERGES expr_semicolon . [ EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production diverges_clause -> DIVERGES expr_semicolon

State 286:
## Known stack suffix:
## spec_var_decls simple_spec_body
## LR(1) items:
generic_conjoinable_spec -> spec_var_decls simple_spec_body . [ EOF AND ]
## Transitions:
## Reductions:
-- On EOF AND
--   reduce production generic_conjoinable_spec -> spec_var_decls simple_spec_body

State 287:
## Known stack suffix:
## signals_clause
## LR(1) items:
simple_spec_body -> signals_clause . signals_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On SIGNALS shift to state 271
-- On signals_clauses shift to state 288
-- On signals_clause shift to state 292
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clauses ->

State 288:
## Known stack suffix:
## signals_clause signals_clauses
## LR(1) items:
simple_spec_body -> signals_clause signals_clauses . diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On DIVERGES shift to state 284
-- On diverges_clauses shift to state 289
-- On diverges_clause shift to state 290
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses ->

State 289:
## Known stack suffix:
## signals_clause signals_clauses diverges_clauses
## LR(1) items:
simple_spec_body -> signals_clause signals_clauses diverges_clauses . [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production simple_spec_body -> signals_clause signals_clauses diverges_clauses

State 290:
## Known stack suffix:
## diverges_clause
## LR(1) items:
diverges_clauses -> diverges_clause . diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On DIVERGES shift to state 284
-- On diverges_clauses shift to state 291
-- On diverges_clause shift to state 290
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses ->

State 291:
## Known stack suffix:
## diverges_clause diverges_clauses
## LR(1) items:
diverges_clauses -> diverges_clause diverges_clauses . [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses -> diverges_clause diverges_clauses

State 292:
## Known stack suffix:
## signals_clause
## LR(1) items:
signals_clauses -> signals_clause . signals_clauses [ EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On SIGNALS shift to state 271
-- On signals_clauses shift to state 293
-- On signals_clause shift to state 292
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clauses ->

State 293:
## Known stack suffix:
## signals_clause signals_clauses
## LR(1) items:
signals_clauses -> signals_clause signals_clauses . [ EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clauses -> signals_clause signals_clauses

State 294:
## Known stack suffix:
## ensures_clause
## LR(1) items:
simple_spec_body -> ensures_clause . ensures_clauses signals_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On ENSURES shift to state 282
-- On ensures_clauses shift to state 295
-- On ensures_clause shift to state 298
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production ensures_clauses ->

State 295:
## Known stack suffix:
## ensures_clause ensures_clauses
## LR(1) items:
simple_spec_body -> ensures_clause ensures_clauses . signals_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On SIGNALS shift to state 271
-- On signals_clauses shift to state 296
-- On signals_clause shift to state 292
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clauses ->

State 296:
## Known stack suffix:
## ensures_clause ensures_clauses signals_clauses
## LR(1) items:
simple_spec_body -> ensures_clause ensures_clauses signals_clauses . diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On DIVERGES shift to state 284
-- On diverges_clauses shift to state 297
-- On diverges_clause shift to state 290
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses ->

State 297:
## Known stack suffix:
## ensures_clause ensures_clauses signals_clauses diverges_clauses
## LR(1) items:
simple_spec_body -> ensures_clause ensures_clauses signals_clauses diverges_clauses . [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production simple_spec_body -> ensures_clause ensures_clauses signals_clauses diverges_clauses

State 298:
## Known stack suffix:
## ensures_clause
## LR(1) items:
ensures_clauses -> ensures_clause . ensures_clauses [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On ENSURES shift to state 282
-- On ensures_clauses shift to state 299
-- On ensures_clause shift to state 298
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production ensures_clauses ->

State 299:
## Known stack suffix:
## ensures_clause ensures_clauses
## LR(1) items:
ensures_clauses -> ensures_clause ensures_clauses . [ SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production ensures_clauses -> ensures_clause ensures_clauses

State 300:
## Known stack suffix:
## diverges_clause
## LR(1) items:
simple_spec_body -> diverges_clause . diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On DIVERGES shift to state 284
-- On diverges_clauses shift to state 301
-- On diverges_clause shift to state 290
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses ->

State 301:
## Known stack suffix:
## diverges_clause diverges_clauses
## LR(1) items:
simple_spec_body -> diverges_clause diverges_clauses . [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production simple_spec_body -> diverges_clause diverges_clauses

State 302:
## Known stack suffix:
## assignable_clause
## LR(1) items:
simple_spec_body -> assignable_clause . assignable_clauses ensures_clauses signals_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On ASSIGNABLE shift to state 213
-- On assignable_clauses shift to state 303
-- On assignable_clause shift to state 258
## Reductions:
-- On SIGNALS EOF ENSURES DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production assignable_clauses ->

State 303:
## Known stack suffix:
## assignable_clause assignable_clauses
## LR(1) items:
simple_spec_body -> assignable_clause assignable_clauses . ensures_clauses signals_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On ENSURES shift to state 282
-- On ensures_clauses shift to state 304
-- On ensures_clause shift to state 298
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production ensures_clauses ->

State 304:
## Known stack suffix:
## assignable_clause assignable_clauses ensures_clauses
## LR(1) items:
simple_spec_body -> assignable_clause assignable_clauses ensures_clauses . signals_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On SIGNALS shift to state 271
-- On signals_clauses shift to state 305
-- On signals_clause shift to state 292
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clauses ->

State 305:
## Known stack suffix:
## assignable_clause assignable_clauses ensures_clauses signals_clauses
## LR(1) items:
simple_spec_body -> assignable_clause assignable_clauses ensures_clauses signals_clauses . diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On DIVERGES shift to state 284
-- On diverges_clauses shift to state 306
-- On diverges_clause shift to state 290
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses ->

State 306:
## Known stack suffix:
## assignable_clause assignable_clauses ensures_clauses signals_clauses diverges_clauses
## LR(1) items:
simple_spec_body -> assignable_clause assignable_clauses ensures_clauses signals_clauses diverges_clauses . [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production simple_spec_body -> assignable_clause assignable_clauses ensures_clauses signals_clauses diverges_clauses

State 307:
## Known stack suffix:
## privacy
## LR(1) items:
behavior_conjoinable_spec -> privacy . BEHAVIOR spec_var_decls simple_spec_body [ EOF AND ]
behavior_conjoinable_spec -> privacy . EXCEPTIONAL_BEHAVIOR spec_var_decls exceptional_simple_spec_body [ EOF AND ]
behavior_conjoinable_spec -> privacy . NORMAL_BEHAVIOR spec_var_decls normal_simple_spec_body [ EOF AND ]
## Transitions:
-- On NORMAL_BEHAVIOR shift to state 308
-- On EXCEPTIONAL_BEHAVIOR shift to state 328
-- On BEHAVIOR shift to state 334
## Reductions:

State 308:
## Known stack suffix:
## privacy NORMAL_BEHAVIOR
## LR(1) items:
behavior_conjoinable_spec -> privacy NORMAL_BEHAVIOR . spec_var_decls normal_simple_spec_body [ EOF AND ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 309
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On OLD EOF ENSURES DIVERGES ASSIGNABLE AND
--   reduce production forall_var_decls ->

State 309:
## Known stack suffix:
## privacy NORMAL_BEHAVIOR spec_var_decls
## LR(1) items:
behavior_conjoinable_spec -> privacy NORMAL_BEHAVIOR spec_var_decls . normal_simple_spec_body [ EOF AND ]
## Transitions:
-- On ASSIGNABLE shift to state 213
-- On normal_simple_spec_body shift to state 310
-- On assignable_clauses shift to state 311
-- On assignable_clause shift to state 258
## Reductions:
-- On EOF ENSURES DIVERGES AND
--   reduce production assignable_clauses ->

State 310:
## Known stack suffix:
## privacy NORMAL_BEHAVIOR spec_var_decls normal_simple_spec_body
## LR(1) items:
behavior_conjoinable_spec -> privacy NORMAL_BEHAVIOR spec_var_decls normal_simple_spec_body . [ EOF AND ]
## Transitions:
## Reductions:
-- On EOF AND
--   reduce production behavior_conjoinable_spec -> privacy NORMAL_BEHAVIOR spec_var_decls normal_simple_spec_body

State 311:
## Known stack suffix:
## assignable_clauses
## LR(1) items:
normal_simple_spec_body -> assignable_clauses . ensures_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On ENSURES shift to state 282
-- On ensures_clauses shift to state 312
-- On ensures_clause shift to state 298
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production ensures_clauses ->

State 312:
## Known stack suffix:
## assignable_clauses ensures_clauses
## LR(1) items:
normal_simple_spec_body -> assignable_clauses ensures_clauses . diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On DIVERGES shift to state 284
-- On diverges_clauses shift to state 313
-- On diverges_clause shift to state 290
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses ->

State 313:
## Known stack suffix:
## assignable_clauses ensures_clauses diverges_clauses
## LR(1) items:
normal_simple_spec_body -> assignable_clauses ensures_clauses diverges_clauses . [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production normal_simple_spec_body -> assignable_clauses ensures_clauses diverges_clauses

State 314:
## Known stack suffix:
## forall_var_decls
## LR(1) items:
spec_var_decls -> forall_var_decls . let_var_decls [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On OLD shift to state 315
-- On let_var_decls shift to state 325
## Reductions:
-- On WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production let_var_decls ->

State 315:
## Known stack suffix:
## OLD
## LR(1) items:
let_var_decls -> OLD . local_spec_var_decls [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On MODEL shift to state 316
-- On GHOST shift to state 319
-- On local_spec_var_decls shift to state 322
-- On local_spec_var_decl shift to state 323
## Reductions:

State 316:
## Known stack suffix:
## MODEL
## LR(1) items:
local_spec_var_decl -> MODEL . variable_declaration SEMICOLON [ WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On variable_declaration shift to state 317
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 153
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 317:
## Known stack suffix:
## MODEL variable_declaration
## LR(1) items:
local_spec_var_decl -> MODEL variable_declaration . SEMICOLON [ WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On SEMICOLON shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## MODEL variable_declaration SEMICOLON
## LR(1) items:
local_spec_var_decl -> MODEL variable_declaration SEMICOLON . [ WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production local_spec_var_decl -> MODEL variable_declaration SEMICOLON

State 319:
## Known stack suffix:
## GHOST
## LR(1) items:
local_spec_var_decl -> GHOST . variable_declaration SEMICOLON [ WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On variable_declaration shift to state 320
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 153
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 320:
## Known stack suffix:
## GHOST variable_declaration
## LR(1) items:
local_spec_var_decl -> GHOST variable_declaration . SEMICOLON [ WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On SEMICOLON shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## GHOST variable_declaration SEMICOLON
## LR(1) items:
local_spec_var_decl -> GHOST variable_declaration SEMICOLON . [ WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES MODEL MEASURED_BY LEFTBRACEBAR GHOST EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production local_spec_var_decl -> GHOST variable_declaration SEMICOLON

State 322:
## Known stack suffix:
## OLD local_spec_var_decls
## LR(1) items:
let_var_decls -> OLD local_spec_var_decls . [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production let_var_decls -> OLD local_spec_var_decls

State 323:
## Known stack suffix:
## local_spec_var_decl
## LR(1) items:
local_spec_var_decls -> local_spec_var_decl . [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
local_spec_var_decls -> local_spec_var_decl . local_spec_var_decls [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On MODEL shift to state 316
-- On GHOST shift to state 319
-- On local_spec_var_decls shift to state 324
-- On local_spec_var_decl shift to state 323
## Reductions:
-- On WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production local_spec_var_decls -> local_spec_var_decl

State 324:
## Known stack suffix:
## local_spec_var_decl local_spec_var_decls
## LR(1) items:
local_spec_var_decls -> local_spec_var_decl local_spec_var_decls . [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production local_spec_var_decls -> local_spec_var_decl local_spec_var_decls

State 325:
## Known stack suffix:
## forall_var_decls let_var_decls
## LR(1) items:
spec_var_decls -> forall_var_decls let_var_decls . [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production spec_var_decls -> forall_var_decls let_var_decls

State 326:
## Known stack suffix:
## forall_var_decl
## LR(1) items:
forall_var_decls -> forall_var_decl . forall_var_decls [ WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
-- On FORALL shift to state 260
-- On forall_var_decls shift to state 327
-- On forall_var_decl shift to state 326
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production forall_var_decls ->

State 327:
## Known stack suffix:
## forall_var_decl forall_var_decls
## LR(1) items:
forall_var_decls -> forall_var_decl forall_var_decls . [ WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE AND ALSO
--   reduce production forall_var_decls -> forall_var_decl forall_var_decls

State 328:
## Known stack suffix:
## privacy EXCEPTIONAL_BEHAVIOR
## LR(1) items:
behavior_conjoinable_spec -> privacy EXCEPTIONAL_BEHAVIOR . spec_var_decls exceptional_simple_spec_body [ EOF AND ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 329
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On SIGNALS OLD EOF DIVERGES ASSIGNABLE AND
--   reduce production forall_var_decls ->

State 329:
## Known stack suffix:
## privacy EXCEPTIONAL_BEHAVIOR spec_var_decls
## LR(1) items:
behavior_conjoinable_spec -> privacy EXCEPTIONAL_BEHAVIOR spec_var_decls . exceptional_simple_spec_body [ EOF AND ]
## Transitions:
-- On ASSIGNABLE shift to state 213
-- On exceptional_simple_spec_body shift to state 330
-- On assignable_clauses shift to state 331
-- On assignable_clause shift to state 258
## Reductions:
-- On SIGNALS EOF DIVERGES AND
--   reduce production assignable_clauses ->

State 330:
## Known stack suffix:
## privacy EXCEPTIONAL_BEHAVIOR spec_var_decls exceptional_simple_spec_body
## LR(1) items:
behavior_conjoinable_spec -> privacy EXCEPTIONAL_BEHAVIOR spec_var_decls exceptional_simple_spec_body . [ EOF AND ]
## Transitions:
## Reductions:
-- On EOF AND
--   reduce production behavior_conjoinable_spec -> privacy EXCEPTIONAL_BEHAVIOR spec_var_decls exceptional_simple_spec_body

State 331:
## Known stack suffix:
## assignable_clauses
## LR(1) items:
exceptional_simple_spec_body -> assignable_clauses . signals_clauses diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On SIGNALS shift to state 271
-- On signals_clauses shift to state 332
-- On signals_clause shift to state 292
## Reductions:
-- On EOF DIVERGES BARRIGHTBRACE AND ALSO
--   reduce production signals_clauses ->

State 332:
## Known stack suffix:
## assignable_clauses signals_clauses
## LR(1) items:
exceptional_simple_spec_body -> assignable_clauses signals_clauses . diverges_clauses [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
-- On DIVERGES shift to state 284
-- On diverges_clauses shift to state 333
-- On diverges_clause shift to state 290
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production diverges_clauses ->

State 333:
## Known stack suffix:
## assignable_clauses signals_clauses diverges_clauses
## LR(1) items:
exceptional_simple_spec_body -> assignable_clauses signals_clauses diverges_clauses . [ EOF BARRIGHTBRACE AND ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE AND ALSO
--   reduce production exceptional_simple_spec_body -> assignable_clauses signals_clauses diverges_clauses

State 334:
## Known stack suffix:
## privacy BEHAVIOR
## LR(1) items:
behavior_conjoinable_spec -> privacy BEHAVIOR . spec_var_decls simple_spec_body [ EOF AND ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 335
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On SIGNALS OLD ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->

State 335:
## Known stack suffix:
## privacy BEHAVIOR spec_var_decls
## LR(1) items:
behavior_conjoinable_spec -> privacy BEHAVIOR spec_var_decls . simple_spec_body [ EOF AND ]
## Transitions:
-- On SIGNALS shift to state 271
-- On ENSURES shift to state 282
-- On DIVERGES shift to state 284
-- On ASSIGNABLE shift to state 213
-- On simple_spec_body shift to state 336
-- On signals_clause shift to state 287
-- On ensures_clause shift to state 294
-- On diverges_clause shift to state 300
-- On assignable_clause shift to state 302
## Reductions:

State 336:
## Known stack suffix:
## privacy BEHAVIOR spec_var_decls simple_spec_body
## LR(1) items:
behavior_conjoinable_spec -> privacy BEHAVIOR spec_var_decls simple_spec_body . [ EOF AND ]
## Transitions:
## Reductions:
-- On EOF AND
--   reduce production behavior_conjoinable_spec -> privacy BEHAVIOR spec_var_decls simple_spec_body

State 337:
## Known stack suffix:
## generic_conjoinable_spec
## LR(1) items:
conjoinable_spec -> generic_conjoinable_spec . [ EOF AND ]
## Transitions:
## Reductions:
-- On EOF AND
--   reduce production conjoinable_spec -> generic_conjoinable_spec

State 338:
## Known stack suffix:
## AND conjoinable_spec_seq
## LR(1) items:
extending_specification -> AND conjoinable_spec_seq . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production extending_specification -> AND conjoinable_spec_seq

State 339:
## Known stack suffix:
## conjoinable_spec
## LR(1) items:
conjoinable_spec_seq -> conjoinable_spec . [ EOF ]
conjoinable_spec_seq -> conjoinable_spec . AND conjoinable_spec_seq [ EOF ]
## Transitions:
-- On AND shift to state 340
## Reductions:
-- On EOF
--   reduce production conjoinable_spec_seq -> conjoinable_spec

State 340:
## Known stack suffix:
## conjoinable_spec AND
## LR(1) items:
conjoinable_spec_seq -> conjoinable_spec AND . conjoinable_spec_seq [ EOF ]
## Transitions:
-- On PUBLIC shift to state 267
-- On PROTECTED shift to state 268
-- On PRIVATE shift to state 269
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 270
-- On privacy shift to state 307
-- On generic_conjoinable_spec shift to state 337
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On conjoinable_spec_seq shift to state 341
-- On conjoinable_spec shift to state 339
-- On behavior_conjoinable_spec shift to state 342
## Reductions:
-- On SIGNALS OLD ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->
-- On NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy ->

State 341:
## Known stack suffix:
## conjoinable_spec AND conjoinable_spec_seq
## LR(1) items:
conjoinable_spec_seq -> conjoinable_spec AND conjoinable_spec_seq . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production conjoinable_spec_seq -> conjoinable_spec AND conjoinable_spec_seq

State 342:
## Known stack suffix:
## behavior_conjoinable_spec
## LR(1) items:
conjoinable_spec -> behavior_conjoinable_spec . [ EOF AND ]
## Transitions:
## Reductions:
-- On EOF AND
--   reduce production conjoinable_spec -> behavior_conjoinable_spec

State 343:
## Known stack suffix:
## ALSO
## LR(1) items:
extending_specification -> ALSO . additive_specification [ EOF ]
## Transitions:
-- On PUBLIC shift to state 267
-- On PROTECTED shift to state 268
-- On PRIVATE shift to state 269
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 344
-- On spec_case_seq shift to state 369
-- On spec_case shift to state 370
-- On privacy shift to state 373
-- On generic_spec_case shift to state 400
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On behavior_spec shift to state 401
-- On additive_specification shift to state 402
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->
-- On NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy ->

State 344:
## Known stack suffix:
## spec_var_decls
## LR(1) items:
generic_spec_case -> spec_var_decls . spec_header generic_spec_body [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On REQUIRES shift to state 345
-- On spec_header shift to state 347
-- On requires_clauses shift to state 356
-- On requires_clause shift to state 367
## Reductions:
-- On WHEN SIGNALS MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES ASSIGNABLE
--   reduce production requires_clauses ->

State 345:
## Known stack suffix:
## REQUIRES
## LR(1) items:
requires_clause -> REQUIRES . expr_semicolon [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 346
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 346:
## Known stack suffix:
## REQUIRES expr_semicolon
## LR(1) items:
requires_clause -> REQUIRES expr_semicolon . [ WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS REQUIRES MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production requires_clause -> REQUIRES expr_semicolon

State 347:
## Known stack suffix:
## spec_var_decls spec_header
## LR(1) items:
generic_spec_case -> spec_var_decls spec_header . generic_spec_body [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On SIGNALS shift to state 271
-- On LEFTBRACEBAR shift to state 348
-- On ENSURES shift to state 282
-- On DIVERGES shift to state 284
-- On ASSIGNABLE shift to state 213
-- On simple_spec_body shift to state 354
-- On signals_clause shift to state 287
-- On generic_spec_body shift to state 355
-- On ensures_clause shift to state 294
-- On diverges_clause shift to state 300
-- On assignable_clause shift to state 302
## Reductions:

State 348:
## Known stack suffix:
## LEFTBRACEBAR
## LR(1) items:
generic_spec_body -> LEFTBRACEBAR . generic_spec_case_seq BARRIGHTBRACE [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 344
-- On generic_spec_case_seq shift to state 349
-- On generic_spec_case shift to state 351
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->

State 349:
## Known stack suffix:
## LEFTBRACEBAR generic_spec_case_seq
## LR(1) items:
generic_spec_body -> LEFTBRACEBAR generic_spec_case_seq . BARRIGHTBRACE [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On BARRIGHTBRACE shift to state 350
## Reductions:

State 350:
## Known stack suffix:
## LEFTBRACEBAR generic_spec_case_seq BARRIGHTBRACE
## LR(1) items:
generic_spec_body -> LEFTBRACEBAR generic_spec_case_seq BARRIGHTBRACE . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production generic_spec_body -> LEFTBRACEBAR generic_spec_case_seq BARRIGHTBRACE

State 351:
## Known stack suffix:
## generic_spec_case
## LR(1) items:
generic_spec_case_seq -> generic_spec_case . [ BARRIGHTBRACE ]
generic_spec_case_seq -> generic_spec_case . ALSO generic_spec_case_seq [ BARRIGHTBRACE ]
## Transitions:
-- On ALSO shift to state 352
## Reductions:
-- On BARRIGHTBRACE
--   reduce production generic_spec_case_seq -> generic_spec_case

State 352:
## Known stack suffix:
## generic_spec_case ALSO
## LR(1) items:
generic_spec_case_seq -> generic_spec_case ALSO . generic_spec_case_seq [ BARRIGHTBRACE ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 344
-- On generic_spec_case_seq shift to state 353
-- On generic_spec_case shift to state 351
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->

State 353:
## Known stack suffix:
## generic_spec_case ALSO generic_spec_case_seq
## LR(1) items:
generic_spec_case_seq -> generic_spec_case ALSO generic_spec_case_seq . [ BARRIGHTBRACE ]
## Transitions:
## Reductions:
-- On BARRIGHTBRACE
--   reduce production generic_spec_case_seq -> generic_spec_case ALSO generic_spec_case_seq

State 354:
## Known stack suffix:
## simple_spec_body
## LR(1) items:
generic_spec_body -> simple_spec_body . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production generic_spec_body -> simple_spec_body

State 355:
## Known stack suffix:
## spec_var_decls spec_header generic_spec_body
## LR(1) items:
generic_spec_case -> spec_var_decls spec_header generic_spec_body . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production generic_spec_case -> spec_var_decls spec_header generic_spec_body

State 356:
## Known stack suffix:
## requires_clauses
## LR(1) items:
spec_header -> requires_clauses . when_clauses measured_clauses [ SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On WHEN shift to state 357
-- On when_clauses shift to state 359
-- On when_clause shift to state 365
## Reductions:
-- On SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production when_clauses ->

State 357:
## Known stack suffix:
## WHEN
## LR(1) items:
when_clause -> WHEN . expr_semicolon [ WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 358
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 358:
## Known stack suffix:
## WHEN expr_semicolon
## LR(1) items:
when_clause -> WHEN expr_semicolon . [ WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production when_clause -> WHEN expr_semicolon

State 359:
## Known stack suffix:
## requires_clauses when_clauses
## LR(1) items:
spec_header -> requires_clauses when_clauses . measured_clauses [ SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On MEASURED_BY shift to state 360
-- On measured_clauses shift to state 362
-- On measured_clause shift to state 363
## Reductions:
-- On SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production measured_clauses ->

State 360:
## Known stack suffix:
## MEASURED_BY
## LR(1) items:
measured_clause -> MEASURED_BY . expr_semicolon [ SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 361
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 361:
## Known stack suffix:
## MEASURED_BY expr_semicolon
## LR(1) items:
measured_clause -> MEASURED_BY expr_semicolon . [ SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production measured_clause -> MEASURED_BY expr_semicolon

State 362:
## Known stack suffix:
## requires_clauses when_clauses measured_clauses
## LR(1) items:
spec_header -> requires_clauses when_clauses measured_clauses . [ SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production spec_header -> requires_clauses when_clauses measured_clauses

State 363:
## Known stack suffix:
## measured_clause
## LR(1) items:
measured_clauses -> measured_clause . measured_clauses [ SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On MEASURED_BY shift to state 360
-- On measured_clauses shift to state 364
-- On measured_clause shift to state 363
## Reductions:
-- On SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production measured_clauses ->

State 364:
## Known stack suffix:
## measured_clause measured_clauses
## LR(1) items:
measured_clauses -> measured_clause measured_clauses . [ SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production measured_clauses -> measured_clause measured_clauses

State 365:
## Known stack suffix:
## when_clause
## LR(1) items:
when_clauses -> when_clause . when_clauses [ SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On WHEN shift to state 357
-- On when_clauses shift to state 366
-- On when_clause shift to state 365
## Reductions:
-- On SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production when_clauses ->

State 366:
## Known stack suffix:
## when_clause when_clauses
## LR(1) items:
when_clauses -> when_clause when_clauses . [ SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
## Reductions:
-- On SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production when_clauses -> when_clause when_clauses

State 367:
## Known stack suffix:
## requires_clause
## LR(1) items:
requires_clauses -> requires_clause . requires_clauses [ WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
-- On REQUIRES shift to state 345
-- On requires_clauses shift to state 368
-- On requires_clause shift to state 367
## Reductions:
-- On WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production requires_clauses ->

State 368:
## Known stack suffix:
## requires_clause requires_clauses
## LR(1) items:
requires_clauses -> requires_clause requires_clauses . [ WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO ]
## Transitions:
## Reductions:
-- On WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production requires_clauses -> requires_clause requires_clauses

State 369:
## Known stack suffix:
## spec_case_seq
## LR(1) items:
additive_specification -> spec_case_seq . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production additive_specification -> spec_case_seq

State 370:
## Known stack suffix:
## spec_case
## LR(1) items:
spec_case_seq -> spec_case . [ EOF ]
spec_case_seq -> spec_case . ALSO spec_case_seq [ EOF ]
## Transitions:
-- On ALSO shift to state 371
## Reductions:
-- On EOF
--   reduce production spec_case_seq -> spec_case

State 371:
## Known stack suffix:
## spec_case ALSO
## LR(1) items:
spec_case_seq -> spec_case ALSO . spec_case_seq [ EOF ]
## Transitions:
-- On PUBLIC shift to state 267
-- On PROTECTED shift to state 268
-- On PRIVATE shift to state 269
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 344
-- On spec_case_seq shift to state 372
-- On spec_case shift to state 370
-- On privacy shift to state 373
-- On generic_spec_case shift to state 400
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On behavior_spec shift to state 401
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->
-- On NORMAL_BEHAVIOR EXCEPTIONAL_BEHAVIOR BEHAVIOR
--   reduce production privacy ->

State 372:
## Known stack suffix:
## spec_case ALSO spec_case_seq
## LR(1) items:
spec_case_seq -> spec_case ALSO spec_case_seq . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production spec_case_seq -> spec_case ALSO spec_case_seq

State 373:
## Known stack suffix:
## privacy
## LR(1) items:
behavior_spec -> privacy . BEHAVIOR generic_spec_case [ EOF ALSO ]
behavior_spec -> privacy . EXCEPTIONAL_BEHAVIOR exceptional_spec_case [ EOF ALSO ]
behavior_spec -> privacy . NORMAL_BEHAVIOR normal_spec_case [ EOF ALSO ]
## Transitions:
-- On NORMAL_BEHAVIOR shift to state 374
-- On EXCEPTIONAL_BEHAVIOR shift to state 386
-- On BEHAVIOR shift to state 398
## Reductions:

State 374:
## Known stack suffix:
## privacy NORMAL_BEHAVIOR
## LR(1) items:
behavior_spec -> privacy NORMAL_BEHAVIOR . normal_spec_case [ EOF ALSO ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 375
-- On normal_spec_case shift to state 385
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On WHEN REQUIRES OLD MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES ASSIGNABLE ALSO
--   reduce production forall_var_decls ->

State 375:
## Known stack suffix:
## spec_var_decls
## LR(1) items:
normal_spec_case -> spec_var_decls . spec_header normal_spec_body [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On REQUIRES shift to state 345
-- On spec_header shift to state 376
-- On requires_clauses shift to state 356
-- On requires_clause shift to state 367
## Reductions:
-- On WHEN MEASURED_BY LEFTBRACEBAR EOF ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production requires_clauses ->

State 376:
## Known stack suffix:
## spec_var_decls spec_header
## LR(1) items:
normal_spec_case -> spec_var_decls spec_header . normal_spec_body [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On LEFTBRACEBAR shift to state 377
-- On ASSIGNABLE shift to state 213
-- On normal_spec_body shift to state 383
-- On normal_simple_spec_body shift to state 384
-- On assignable_clauses shift to state 311
-- On assignable_clause shift to state 258
## Reductions:
-- On EOF ENSURES DIVERGES BARRIGHTBRACE ALSO
--   reduce production assignable_clauses ->

State 377:
## Known stack suffix:
## LEFTBRACEBAR
## LR(1) items:
normal_spec_body -> LEFTBRACEBAR . normal_spec_case_seq BARRIGHTBRACE [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 375
-- On normal_spec_case_seq shift to state 378
-- On normal_spec_case shift to state 380
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On WHEN REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production forall_var_decls ->

State 378:
## Known stack suffix:
## LEFTBRACEBAR normal_spec_case_seq
## LR(1) items:
normal_spec_body -> LEFTBRACEBAR normal_spec_case_seq . BARRIGHTBRACE [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On BARRIGHTBRACE shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## LEFTBRACEBAR normal_spec_case_seq BARRIGHTBRACE
## LR(1) items:
normal_spec_body -> LEFTBRACEBAR normal_spec_case_seq BARRIGHTBRACE . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production normal_spec_body -> LEFTBRACEBAR normal_spec_case_seq BARRIGHTBRACE

State 380:
## Known stack suffix:
## normal_spec_case
## LR(1) items:
normal_spec_case_seq -> normal_spec_case . [ BARRIGHTBRACE ]
normal_spec_case_seq -> normal_spec_case . ALSO normal_spec_case_seq [ BARRIGHTBRACE ]
## Transitions:
-- On ALSO shift to state 381
## Reductions:
-- On BARRIGHTBRACE
--   reduce production normal_spec_case_seq -> normal_spec_case

State 381:
## Known stack suffix:
## normal_spec_case ALSO
## LR(1) items:
normal_spec_case_seq -> normal_spec_case ALSO . normal_spec_case_seq [ BARRIGHTBRACE ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 375
-- On normal_spec_case_seq shift to state 382
-- On normal_spec_case shift to state 380
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On WHEN REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production forall_var_decls ->

State 382:
## Known stack suffix:
## normal_spec_case ALSO normal_spec_case_seq
## LR(1) items:
normal_spec_case_seq -> normal_spec_case ALSO normal_spec_case_seq . [ BARRIGHTBRACE ]
## Transitions:
## Reductions:
-- On BARRIGHTBRACE
--   reduce production normal_spec_case_seq -> normal_spec_case ALSO normal_spec_case_seq

State 383:
## Known stack suffix:
## spec_var_decls spec_header normal_spec_body
## LR(1) items:
normal_spec_case -> spec_var_decls spec_header normal_spec_body . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production normal_spec_case -> spec_var_decls spec_header normal_spec_body

State 384:
## Known stack suffix:
## normal_simple_spec_body
## LR(1) items:
normal_spec_body -> normal_simple_spec_body . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production normal_spec_body -> normal_simple_spec_body

State 385:
## Known stack suffix:
## privacy NORMAL_BEHAVIOR normal_spec_case
## LR(1) items:
behavior_spec -> privacy NORMAL_BEHAVIOR normal_spec_case . [ EOF ALSO ]
## Transitions:
## Reductions:
-- On EOF ALSO
--   reduce production behavior_spec -> privacy NORMAL_BEHAVIOR normal_spec_case

State 386:
## Known stack suffix:
## privacy EXCEPTIONAL_BEHAVIOR
## LR(1) items:
behavior_spec -> privacy EXCEPTIONAL_BEHAVIOR . exceptional_spec_case [ EOF ALSO ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 387
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On exceptional_spec_case shift to state 397
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR EOF DIVERGES ASSIGNABLE ALSO
--   reduce production forall_var_decls ->

State 387:
## Known stack suffix:
## spec_var_decls
## LR(1) items:
exceptional_spec_case -> spec_var_decls . spec_header exceptional_spec_body [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On REQUIRES shift to state 345
-- On spec_header shift to state 388
-- On requires_clauses shift to state 356
-- On requires_clause shift to state 367
## Reductions:
-- On WHEN SIGNALS MEASURED_BY LEFTBRACEBAR EOF DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production requires_clauses ->

State 388:
## Known stack suffix:
## spec_var_decls spec_header
## LR(1) items:
exceptional_spec_case -> spec_var_decls spec_header . exceptional_spec_body [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On LEFTBRACEBAR shift to state 389
-- On ASSIGNABLE shift to state 213
-- On exceptional_spec_body shift to state 395
-- On exceptional_simple_spec_body shift to state 396
-- On assignable_clauses shift to state 331
-- On assignable_clause shift to state 258
## Reductions:
-- On SIGNALS EOF DIVERGES BARRIGHTBRACE ALSO
--   reduce production assignable_clauses ->

State 389:
## Known stack suffix:
## LEFTBRACEBAR
## LR(1) items:
exceptional_spec_body -> LEFTBRACEBAR . exceptional_spec_case_seq BARRIGHTBRACE [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 387
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On exceptional_spec_case_seq shift to state 390
-- On exceptional_spec_case shift to state 392
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production forall_var_decls ->

State 390:
## Known stack suffix:
## LEFTBRACEBAR exceptional_spec_case_seq
## LR(1) items:
exceptional_spec_body -> LEFTBRACEBAR exceptional_spec_case_seq . BARRIGHTBRACE [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
-- On BARRIGHTBRACE shift to state 391
## Reductions:

State 391:
## Known stack suffix:
## LEFTBRACEBAR exceptional_spec_case_seq BARRIGHTBRACE
## LR(1) items:
exceptional_spec_body -> LEFTBRACEBAR exceptional_spec_case_seq BARRIGHTBRACE . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production exceptional_spec_body -> LEFTBRACEBAR exceptional_spec_case_seq BARRIGHTBRACE

State 392:
## Known stack suffix:
## exceptional_spec_case
## LR(1) items:
exceptional_spec_case_seq -> exceptional_spec_case . [ BARRIGHTBRACE ]
exceptional_spec_case_seq -> exceptional_spec_case . ALSO exceptional_spec_case_seq [ BARRIGHTBRACE ]
## Transitions:
-- On ALSO shift to state 393
## Reductions:
-- On BARRIGHTBRACE
--   reduce production exceptional_spec_case_seq -> exceptional_spec_case

State 393:
## Known stack suffix:
## exceptional_spec_case ALSO
## LR(1) items:
exceptional_spec_case_seq -> exceptional_spec_case ALSO . exceptional_spec_case_seq [ BARRIGHTBRACE ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 387
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
-- On exceptional_spec_case_seq shift to state 394
-- On exceptional_spec_case shift to state 392
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR DIVERGES BARRIGHTBRACE ASSIGNABLE ALSO
--   reduce production forall_var_decls ->

State 394:
## Known stack suffix:
## exceptional_spec_case ALSO exceptional_spec_case_seq
## LR(1) items:
exceptional_spec_case_seq -> exceptional_spec_case ALSO exceptional_spec_case_seq . [ BARRIGHTBRACE ]
## Transitions:
## Reductions:
-- On BARRIGHTBRACE
--   reduce production exceptional_spec_case_seq -> exceptional_spec_case ALSO exceptional_spec_case_seq

State 395:
## Known stack suffix:
## spec_var_decls spec_header exceptional_spec_body
## LR(1) items:
exceptional_spec_case -> spec_var_decls spec_header exceptional_spec_body . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production exceptional_spec_case -> spec_var_decls spec_header exceptional_spec_body

State 396:
## Known stack suffix:
## exceptional_simple_spec_body
## LR(1) items:
exceptional_spec_body -> exceptional_simple_spec_body . [ EOF BARRIGHTBRACE ALSO ]
## Transitions:
## Reductions:
-- On EOF BARRIGHTBRACE ALSO
--   reduce production exceptional_spec_body -> exceptional_simple_spec_body

State 397:
## Known stack suffix:
## privacy EXCEPTIONAL_BEHAVIOR exceptional_spec_case
## LR(1) items:
behavior_spec -> privacy EXCEPTIONAL_BEHAVIOR exceptional_spec_case . [ EOF ALSO ]
## Transitions:
## Reductions:
-- On EOF ALSO
--   reduce production behavior_spec -> privacy EXCEPTIONAL_BEHAVIOR exceptional_spec_case

State 398:
## Known stack suffix:
## privacy BEHAVIOR
## LR(1) items:
behavior_spec -> privacy BEHAVIOR . generic_spec_case [ EOF ALSO ]
## Transitions:
-- On FORALL shift to state 260
-- On spec_var_decls shift to state 344
-- On generic_spec_case shift to state 399
-- On forall_var_decls shift to state 314
-- On forall_var_decl shift to state 326
## Reductions:
-- On WHEN SIGNALS REQUIRES OLD MEASURED_BY LEFTBRACEBAR ENSURES DIVERGES ASSIGNABLE
--   reduce production forall_var_decls ->

State 399:
## Known stack suffix:
## privacy BEHAVIOR generic_spec_case
## LR(1) items:
behavior_spec -> privacy BEHAVIOR generic_spec_case . [ EOF ALSO ]
## Transitions:
## Reductions:
-- On EOF ALSO
--   reduce production behavior_spec -> privacy BEHAVIOR generic_spec_case

State 400:
## Known stack suffix:
## generic_spec_case
## LR(1) items:
spec_case -> generic_spec_case . [ EOF ALSO ]
## Transitions:
## Reductions:
-- On EOF ALSO
--   reduce production spec_case -> generic_spec_case

State 401:
## Known stack suffix:
## behavior_spec
## LR(1) items:
spec_case -> behavior_spec . [ EOF ALSO ]
## Transitions:
## Reductions:
-- On EOF ALSO
--   reduce production spec_case -> behavior_spec

State 402:
## Known stack suffix:
## ALSO additive_specification
## LR(1) items:
extending_specification -> ALSO additive_specification . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production extending_specification -> ALSO additive_specification

State 403:
## Known stack suffix:
## spec_case_seq
## LR(1) items:
non_extending_specification -> spec_case_seq . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production non_extending_specification -> spec_case_seq

State 404:
## Known stack suffix:
## privacy
## LR(1) items:
behavior_spec -> privacy . BEHAVIOR generic_spec_case [ EOF ALSO ]
behavior_spec -> privacy . EXCEPTIONAL_BEHAVIOR exceptional_spec_case [ EOF ALSO ]
behavior_spec -> privacy . NORMAL_BEHAVIOR normal_spec_case [ EOF ALSO ]
jml_declaration -> privacy . INVARIANT expr_semicolon [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On NORMAL_BEHAVIOR shift to state 374
-- On INVARIANT shift to state 405
-- On EXCEPTIONAL_BEHAVIOR shift to state 386
-- On BEHAVIOR shift to state 398
## Reductions:

State 405:
## Known stack suffix:
## privacy INVARIANT
## LR(1) items:
jml_declaration -> privacy INVARIANT . expr_semicolon [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On TRUE shift to state 7
-- On TILDA shift to state 8
-- On THIS shift to state 9
-- On SUPER shift to state 10
-- On STRING shift to state 13
-- On REAL shift to state 14
-- On PLUS shift to state 15
-- On NULL shift to state 16
-- On NEW shift to state 17
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 29
-- On INTEGER shift to state 30
-- On ID shift to state 4
-- On FALSE shift to state 31
-- On CHARACTER shift to state 32
-- On BSTYPEOF shift to state 33
-- On BSTYPE shift to state 35
-- On BSRESULT shift to state 52
-- On BSOLD shift to state 53
-- On BSFRESH shift to state 55
-- On BSFPI shift to state 57
-- On BANG shift to state 59
-- On primary_no_new_array shift to state 60
-- On primary_expr shift to state 62
-- On parenthesized_name shift to state 66
-- On name shift to state 67
-- On ident shift to state 69
-- On field_access shift to state 71
-- On expr_semicolon shift to state 406
-- On expr_no_name shift to state 72
-- On expr shift to state 255
-- On array_creation_expression shift to state 81
-- On array_access shift to state 82
## Reductions:

State 406:
## Known stack suffix:
## privacy INVARIANT expr_semicolon
## LR(1) items:
jml_declaration -> privacy INVARIANT expr_semicolon . [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN
--   reduce production jml_declaration -> privacy INVARIANT expr_semicolon

State 407:
## Known stack suffix:
## non_extending_specification
## LR(1) items:
method_specification -> non_extending_specification . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production method_specification -> non_extending_specification

State 408:
## Known stack suffix:
## modifiers
## LR(1) items:
jml_declaration -> modifiers . type_expr variable_declarators SEMICOLON [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On SHORT shift to state 18
-- On LONG shift to state 19
-- On INT shift to state 20
-- On ID shift to state 4
-- On FLOAT shift to state 21
-- On DOUBLE shift to state 22
-- On CHAR shift to state 23
-- On BYTE shift to state 24
-- On BOOLEAN shift to state 25
-- On type_expr_no_name shift to state 37
-- On type_expr shift to state 409
-- On name shift to state 40
-- On ident shift to state 45
-- On base_type shift to state 46
-- On array_type_expr shift to state 49
## Reductions:

State 409:
## Known stack suffix:
## modifiers type_expr
## LR(1) items:
jml_declaration -> modifiers type_expr . variable_declarators SEMICOLON [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On ID shift to state 4
-- On variable_declarators shift to state 410
-- On variable_declarator_id shift to state 155
-- On ident shift to state 160
## Reductions:

State 410:
## Known stack suffix:
## modifiers type_expr variable_declarators
## LR(1) items:
jml_declaration -> modifiers type_expr variable_declarators . SEMICOLON [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On SEMICOLON shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## modifiers type_expr variable_declarators SEMICOLON
## LR(1) items:
jml_declaration -> modifiers type_expr variable_declarators SEMICOLON . [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN
--   reduce production jml_declaration -> modifiers type_expr variable_declarators SEMICOLON

State 412:
## Known stack suffix:
## modifier
## LR(1) items:
modifiers -> modifier . modifiers [ SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On STATIC shift to state 1
-- On PUBLIC shift to state 413
-- On PROTECTED shift to state 414
-- On PRIVATE shift to state 415
-- On MODEL shift to state 210
-- On FINAL shift to state 263
-- On modifiers shift to state 416
-- On modifier shift to state 412
## Reductions:
-- On SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifiers ->

State 413:
## Known stack suffix:
## PUBLIC
## LR(1) items:
modifier -> PUBLIC . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> PUBLIC

State 414:
## Known stack suffix:
## PROTECTED
## LR(1) items:
modifier -> PROTECTED . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> PROTECTED

State 415:
## Known stack suffix:
## PRIVATE
## LR(1) items:
modifier -> PRIVATE . [ STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On STATIC SHORT PUBLIC PROTECTED PRIVATE MODEL LONG INT ID FLOAT FINAL DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifier -> PRIVATE

State 416:
## Known stack suffix:
## modifier modifiers
## LR(1) items:
modifiers -> modifier modifiers . [ SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
## Reductions:
-- On SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifiers -> modifier modifiers

State 417:
## Known stack suffix:
## method_specification
## LR(1) items:
jml_specification -> method_specification . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production jml_specification -> method_specification

State 418:
## Known stack suffix:
## loop_annotation
## LR(1) items:
jml_specification -> loop_annotation . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production jml_specification -> loop_annotation

State 419:
## Known stack suffix:
## jml_specification_eof
## LR(1) items:
jml_specification_eof' -> jml_specification_eof . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept jml_specification_eof

State 420:
## Known stack suffix:
## jml_specification
## LR(1) items:
jml_specification_eof -> jml_specification . EOF [ # ]
## Transitions:
-- On EOF shift to state 421
## Reductions:

State 421:
## Known stack suffix:
## jml_specification EOF
## LR(1) items:
jml_specification_eof -> jml_specification EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production jml_specification_eof -> jml_specification EOF

State 422:
## Known stack suffix:
## jml_declarations
## LR(1) items:
jml_specification -> jml_declarations . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production jml_specification -> jml_declarations

State 423:
## Known stack suffix:
## jml_declaration
## LR(1) items:
jml_declarations -> jml_declaration . jml_declarations [ EOF ]
## Transitions:
-- On STATIC shift to state 1
-- On REPRESENTS shift to state 3
-- On PUBLIC shift to state 207
-- On PROTECTED shift to state 208
-- On PRIVATE shift to state 209
-- On MODEL shift to state 210
-- On FINAL shift to state 263
-- On privacy shift to state 424
-- On modifiers shift to state 408
-- On modifier shift to state 412
-- On jml_declarations shift to state 425
-- On jml_declaration shift to state 423
## Reductions:
-- On EOF
--   reduce production jml_declarations ->
-- On SHORT LONG INT ID FLOAT DOUBLE CHAR BYTE BOOLEAN
--   reduce production modifiers ->
-- On INVARIANT
--   reduce production privacy ->

State 424:
## Known stack suffix:
## privacy
## LR(1) items:
jml_declaration -> privacy . INVARIANT expr_semicolon [ STATIC SHORT REPRESENTS PUBLIC PROTECTED PRIVATE MODEL LONG INVARIANT INT ID FLOAT FINAL EOF DOUBLE CHAR BYTE BOOLEAN ]
## Transitions:
-- On INVARIANT shift to state 405
## Reductions:

State 425:
## Known stack suffix:
## jml_declaration jml_declarations
## LR(1) items:
jml_declarations -> jml_declaration jml_declarations . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production jml_declarations -> jml_declaration jml_declarations

State 426:
## Known stack suffix:
## extending_specification
## LR(1) items:
method_specification -> extending_specification . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production method_specification -> extending_specification

