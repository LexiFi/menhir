File "jml.mly", line 69, characters 16-24:
Warning: the token ASSIGNOP is unused.
File "jml.mly", line 87, characters 10-14:
Warning: the token ELSE is unused.
File "jml.mly", line 70, characters 7-9:
Warning: the token EQ is unused.
File "jml.mly", line 61, characters 16-25:
Warning: the token LEFTBRACE is unused.
File "jml.mly", line 82, characters 29-39:
Warning: the token MINUSMINUS is unused.
File "jml.mly", line 82, characters 20-28:
Warning: the token PLUSPLUS is unused.
File "jml.mly", line 61, characters 26-36:
Warning: the token RIGHTBRACE is unused.
File "jml.mly", line 86, characters 10-14:
Warning: the token THEN is unused.
%{

  open Location
  open Ast_types
  open Ast

  let extend_loc l =
    Location.extend_loc !Jml_parser_base.cur_base l (symbol_end())

%}
%start jml_specification_eof
%token ALSO
%token AMPERSAND
%token AMPERSANDAMPERSAND
%token AND
%token ASSERT
%token ASSIGNABLE
%token <string> ASSIGNOP
%token <Location.t> BANG
%token BARRIGHTBRACE
%token BEHAVIOR
%token BOOLEAN
%token BSEVERYTHING
%token BSEXISTS
%token BSFIELDSOF
%token BSFORALL
%token <Location.t> BSFPI
%token <Location.t> BSFRESH
%token BSNOTHING
%token <Location.t> BSOLD
%token <Location.t> BSRESULT
%token <Location.t> BSTYPE
%token <Location.t> BSTYPEOF
%token BYTE
%token CARET
%token CHAR
%token <Location.t * char> CHARACTER
%token COLON
%token COMMA
%token <string> COMP
%token DECREASES
%token DIVERGES
%token DOT
%token DOTDOT
%token DOUBLE
%token ENSURES
%token EOF
%token EQ
%token EQEQGT
%token <string> EQOP
%token EXCEPTIONAL_BEHAVIOR
%token <Location.t> FALSE
%token FINAL
%token FLOAT
%token FORALL
%token GHOST
%token <Location.t * string> ID
%token IF
%token INSTANCEOF
%token INT
%token <Location.t * int> INTEGER
%token INVARIANT
%token LEFTARROW
%token LEFTBRACE
%token LEFTBRACEBAR
%token LEFTBRACKET
%token <Location.t> LEFTPAR
%token LONG
%token LOOP_INVARIANT
%token LTEQBANGEQGT
%token LTEQEQ
%token LTEQEQGT
%token MEASURED_BY
%token <Location.t> MINUS
%token <Location.t> MINUSMINUS
%token MODEL
%token <Location.t> NEW
%token NORMAL_BEHAVIOR
%token <Location.t> NULL
%token OLD
%token PERCENT
%token <Location.t> PLUS
%token <Location.t> PLUSPLUS
%token PRIVATE
%token PROTECTED
%token PUBLIC
%token PURE
%token QUESTIONMARK
%token <Location.t * Why.float_repr> REAL
%token REPRESENTS
%token REQUIRES
%token RIGHTBRACE
%token RIGHTBRACKET
%token RIGHTPAR
%token SEMICOLON
%token <string> SHIFT
%token SHORT
%token SIGNALS
%token SLASH
%token SPEC_PUBLIC
%token STAR
%token STATIC
%token <Location.t * string> STRING
%token <Location.t> SUPER
%token <Location.t> THIS
%token <Location.t> TILDA
%token <Location.t> TRUE
%token VERTICALBAR
%token VERTICALBARVERTICALBAR
%token WHEN
%nonassoc THEN
%nonassoc ELSE
%right ASSIGNOP EQ
%right IFEXPR QUESTIONMARK
%right LTEQBANGEQGT LTEQEQGT
%right EQEQGT LTEQEQ
%left VERTICALBARVERTICALBAR
%left AMPERSANDAMPERSAND
%left VERTICALBAR
%left CARET
%left AMPERSAND
%left EQOP
%left COMP INSTANCEOF
%left SHIFT
%left MINUS PLUS
%left PERCENT SLASH STAR
%right BANG CAST MINUSMINUS PLUSPLUS TILDA UMINUS UPLUS
%type <Ast_types.jml_specification> jml_specification_eof
%%

jml_specification_eof:
  _1 = jml_specification _2 = EOF
    {    ( _1 )}

jml_specification:
  _1 = PURE
    {    ( Jml_pure )}
| _1 = SPEC_PUBLIC
    {    ( Jml_spec_public )}
| _1 = method_specification
    {    ( Jml_method_specification(_1) )}
| _1 = jml_declarations
    {    ( Jml_declaration(_1) )}
| _1 = loop_annotation
    {    ( Jml_loop_annotation(_1) )}
| _1 = ASSERT _2 = expr_semicolon
    {    ( Jml_assertion(_2) )}

loop_annotation:
  _1 = LOOP_INVARIANT _2 = expr_semicolon _3 = assignable_clauses _4 = decreases_clause
    {    (
      let m = _3 in
      { loop_invariant = _2 ;
	loop_modifies = if m=[] then None else Some m;
	typed_loop_modifies = None;
	loop_decreases = _4} )}

decreases_clause:
  
    {                         ( expr_zero )}
| _1 = DECREASES _2 = expr_semicolon
    {                           ( _2 )}

method_specification:
  _1 = non_extending_specification
    {    ( Non_extending(_1) )}
| _1 = extending_specification
    {    ( _1 )}

extending_specification:
  _1 = ALSO _2 = additive_specification
    {    ( Extending_also(_2) )}
| _1 = AND _2 = conjoinable_spec_seq
    {    ( Extending_and(_2) )}

non_extending_specification:
  _1 = spec_case_seq
    {    ( _1 )}

spec_case_seq:
  _1 = spec_case
    {    ( [_1] )}
| _1 = spec_case _2 = ALSO _3 = spec_case_seq
    {    ( _1::_3 )}

spec_case:
  _1 = generic_spec_case
    {    ( Generic(_1) )}
| _1 = behavior_spec
    {    ( _1 )}

additive_specification:
  _1 = spec_case_seq
    {    ( _1 )}

generic_spec_case:
  _1 = spec_var_decls _2 = spec_header _3 = generic_spec_body
    {    ( { generic_spec_var_decls = _1 ;
	  generic_spec_header = _2 ;
	  generic_spec_body = _3 } )}

spec_header:
  _1 = requires_clauses _2 = when_clauses _3 = measured_clauses
    {    ( { requires_clauses = _1 ;
	when_clauses = _2 ;
	measured_clauses = _3 } )}

generic_spec_body:
  _1 = simple_spec_body
    {    ( Simple_spec_body(_1) )}
| _1 = LEFTBRACEBAR _2 = generic_spec_case_seq _3 = BARRIGHTBRACE
    {    ( Nested_spec_body(_2) )}

generic_spec_case_seq:
  _1 = generic_spec_case
    {    ( [_1] )}
| _1 = generic_spec_case _2 = ALSO _3 = generic_spec_case_seq
    {    ( _1::_3 )}

simple_spec_body:
  _1 = assignable_clause _2 = assignable_clauses _3 = ensures_clauses _4 = signals_clauses _5 = diverges_clauses
    {    ( { assignable_clauses = _1::_2 ;
	ensures_clauses = _3 ;
	signals_clauses = _4 ;
	diverges_clauses = _5 } )}
| _1 = ensures_clause _2 = ensures_clauses _3 = signals_clauses _4 = diverges_clauses
    {    ( { assignable_clauses = [] ;
	ensures_clauses = _1::_2 ;
	signals_clauses = _3 ;
	diverges_clauses = _4 } )}
| _1 = signals_clause _2 = signals_clauses _3 = diverges_clauses
    {    ( { assignable_clauses = [] ;
	ensures_clauses = [] ;
	signals_clauses = _1::_2 ;
	diverges_clauses = _3 } )}
| _1 = diverges_clause _2 = diverges_clauses
    {    ( { assignable_clauses = [] ;
	ensures_clauses = [] ;
	signals_clauses = [] ;
	diverges_clauses = _1::_2 } )}

behavior_spec:
  _1 = privacy _2 = BEHAVIOR _3 = generic_spec_case
    {    ( Behavior(_1,_3) )}
| _1 = privacy _2 = EXCEPTIONAL_BEHAVIOR _3 = exceptional_spec_case
    {    ( Exceptional_behavior(_1,_3) )}
| _1 = privacy _2 = NORMAL_BEHAVIOR _3 = normal_spec_case
    {    ( Normal_behavior(_1,_3) )}

exceptional_spec_case:
  _1 = spec_var_decls _2 = spec_header _3 = exceptional_spec_body
    {    ( { exceptional_spec_var_decls = _1 ;
	exceptional_spec_header = _2 ;
	exceptional_spec_body = _3 } )}

privacy:
  
    {    ( Privacy_none )}
| _1 = PUBLIC
    {    ( Privacy_public )}
| _1 = PROTECTED
    {    ( Privacy_protected )}
| _1 = PRIVATE
    {    ( Privacy_private )}

exceptional_spec_body:
  _1 = exceptional_simple_spec_body
    {    ( Simple_exceptional_spec_body(_1) )}
| _1 = LEFTBRACEBAR _2 = exceptional_spec_case_seq _3 = BARRIGHTBRACE
    {    ( Nested_exceptional_spec_body(_2) )}

exceptional_simple_spec_body:
  _1 = assignable_clauses _2 = signals_clauses _3 = diverges_clauses
    {    ( { exceptional_assignable_clauses = _1 ;
	exceptional_signals_clauses = _2 ;
	exceptional_diverges_clauses = _3 } )}

exceptional_spec_case_seq:
  _1 = exceptional_spec_case
    {    ( [_1] )}
| _1 = exceptional_spec_case _2 = ALSO _3 = exceptional_spec_case_seq
    {    ( _1::_3 )}

normal_spec_case:
  _1 = spec_var_decls _2 = spec_header _3 = normal_spec_body
    {    ( { normal_spec_var_decls = _1 ;
	normal_spec_header = _2 ;
	normal_spec_body = _3 } )}

normal_spec_body:
  _1 = normal_simple_spec_body
    {    ( Simple_normal_spec_body(_1) )}
| _1 = LEFTBRACEBAR _2 = normal_spec_case_seq _3 = BARRIGHTBRACE
    {    ( Nested_normal_spec_body(_2) )}

normal_simple_spec_body:
  _1 = assignable_clauses _2 = ensures_clauses _3 = diverges_clauses
    {    ( { normal_assignable_clauses = _1 ;
	normal_ensures_clauses = _2 ;
	normal_diverges_clauses = _3 } )}

normal_spec_case_seq:
  _1 = normal_spec_case
    {    ( [_1] )}
| _1 = normal_spec_case _2 = ALSO _3 = normal_spec_case_seq
    {    ( _1::_3 )}

conjoinable_spec_seq:
  _1 = conjoinable_spec
    {    ( [_1] )}
| _1 = conjoinable_spec _2 = AND _3 = conjoinable_spec_seq
    {    ( _1::_3 )}

conjoinable_spec:
  _1 = generic_conjoinable_spec
    {    ( Generic_conjoinable_spec(_1) )}
| _1 = behavior_conjoinable_spec
    {    ( Behavior_conjoinable_spec(_1) )}

generic_conjoinable_spec:
  _1 = spec_var_decls _2 = simple_spec_body
    {    ( { conjoinable_spec_var_decls = _1 ;
	conjoinable_spec_body = _2 } )}

behavior_conjoinable_spec:
  _1 = privacy _2 = BEHAVIOR _3 = spec_var_decls _4 = simple_spec_body
    {    ( Behavior(_1,
	       { generic_spec_var_decls = _3 ;
		 generic_spec_header = default_spec_header ;
		 generic_spec_body = Simple_spec_body(_4) } ) )}
| _1 = privacy _2 = EXCEPTIONAL_BEHAVIOR _3 = spec_var_decls _4 = exceptional_simple_spec_body
    {    ( Exceptional_behavior(_1,
	       { exceptional_spec_var_decls = _3 ;
		 exceptional_spec_header = default_spec_header ;
		 exceptional_spec_body = Simple_exceptional_spec_body(_4) } ) )}
| _1 = privacy _2 = NORMAL_BEHAVIOR _3 = spec_var_decls _4 = normal_simple_spec_body
    {    ( Normal_behavior(_1,
	       { normal_spec_var_decls = _3 ;
		 normal_spec_header = default_spec_header ;
		 normal_spec_body = Simple_normal_spec_body(_4) } ) )}

spec_var_decls:
  _1 = forall_var_decls _2 = let_var_decls
    {    ( { forall_var_decls = _1 ;
	let_var_decls = _2 } )}

forall_var_decls:
  
    {    ( [] )}
| _1 = forall_var_decl _2 = forall_var_decls
    {    ( _1::_2 )}

forall_var_decl:
  _1 = FORALL _2 = variable_declaration _3 = SEMICOLON
    {    ( _2 )}

let_var_decls:
  
    {    ( [] )}
| _1 = OLD _2 = local_spec_var_decls
    {    ( _2 )}

local_spec_var_decls:
  _1 = local_spec_var_decl
    {    ( [_1] )}
| _1 = local_spec_var_decl _2 = local_spec_var_decls
    {    ( _1::_2 )}

local_spec_var_decl:
  _1 = MODEL _2 = variable_declaration _3 = SEMICOLON
    {    ( let (t,idl) = _2 in Local_spec_var_decl_model(t,idl) )}
| _1 = GHOST _2 = variable_declaration _3 = SEMICOLON
    {    ( let (t,idl)=_2 in Local_spec_var_decl_ghost(t,idl) )}

requires_clauses:
  
    {    ( [] )}
| _1 = requires_clause _2 = requires_clauses
    {    ( _1::_2 )}

requires_clause:
  _1 = REQUIRES _2 = expr_semicolon
    {    ( _2 )}

when_clauses:
  
    {    ( [] )}
| _1 = when_clause _2 = when_clauses
    {    ( _1::_2 )}

when_clause:
  _1 = WHEN _2 = expr_semicolon
    {    ( _2 )}

measured_clauses:
  
    {    ( [] )}
| _1 = measured_clause _2 = measured_clauses
    {    ( _1::_2 )}

measured_clause:
  _1 = MEASURED_BY _2 = expr_semicolon
    {    ( _2 )}

assignable_clauses:
  
    {    ( [] )}
| _1 = assignable_clause _2 = assignable_clauses
    {    ( _1::_2 )}

assignable_clause:
  _1 = ASSIGNABLE _2 = assignable_objects _3 = SEMICOLON
    {                                          ( _2 )}

assignable_objects:
  _1 = assignable_entry
    {    ( [_1] )}
| _1 = assignable_entry _2 = COMMA _3 = assignable_objects
    {    ( _1::_3 )}

assignable_entry:
  _1 = assignable_any_object
    {    ( (_1,None) )}
| _1 = assignable_any_object _2 = IF _3 = expr
    {    ( (_1,Some _3) )}

assignable_any_object:
  _1 = BSEVERYTHING
    {    ( Assignable_everything )}
| _1 = BSNOTHING
    {    ( Assignable_nothing )}
| _1 = BSFIELDSOF _2 = LEFTPAR _3 = expr _4 = RIGHTPAR
    {    (Assignable_all_fields (_3))}
| _1 = expr
    {    (Assignable_set_ref (_1,[]))}
| _1 = primary_no_new_array _2 = set_ref_sep _3 = set_ref_list
    {                                                (Assignable_set_ref (_1,_2::_3))}
| _1 = name _2 = set_ref_sep _3 = set_ref_list
    {                                (let e = expand_name _1 in Assignable_set_ref (e,_2::_3))}

set_ref_sep:
  _1 = LEFTBRACKET _2 = expr _3 = DOTDOT _4 = expr _5 = RIGHTBRACKET
    {    (Set_array_interval(_2,_4))}
| _1 = LEFTBRACKET _2 = STAR _3 = RIGHTBRACKET
    {    (Set_array)}

set_ref:
  _1 = set_ref_sep
    {              (_1)}
| _1 = LEFTBRACKET _2 = expr _3 = RIGHTBRACKET
    {    (Set_array_index(_2))}
| _1 = DOT _2 = ident
    {    (Set_fieldraw(_2))}

set_ref_list:
  
    {   ([])}
| _1 = set_ref _2 = set_ref_list
    {                       (_1::_2)}

ensures_clauses:
  
    {    ( [] )}
| _1 = ensures_clause _2 = ensures_clauses
    {    ( _1::_2 )}

ensures_clause:
  _1 = ENSURES _2 = expr_semicolon
    {    ( _2 )}

signals_clauses:
  
    {    ( [] )}
| _1 = signals_clause _2 = signals_clauses
    {    ( _1::_2 )}

signals_clause:
  _1 = SIGNALS _2 = LEFTPAR _3 = type_expr _4 = ident _5 = RIGHTPAR _6 = opt_expr_semicolon
    {   ( { signals_exception = _3 ;
       signals_variable = Some _4 ;
       signals_post = match _6 with | None -> expr_true | Some e -> e ; } )}
| _1 = SIGNALS _2 = LEFTPAR _3 = type_expr _4 = RIGHTPAR _5 = opt_expr_semicolon
    {   ( { signals_exception = _3 ;
       signals_variable = None ;
       signals_post = match _5 with | None -> expr_true | Some e -> e ; } )}

diverges_clauses:
  
    {    ( [] )}
| _1 = diverges_clause _2 = diverges_clauses
    {    ( _1::_2 )}

diverges_clause:
  _1 = DIVERGES _2 = expr_semicolon
    {    ( _2 )}

jml_declarations:
  
    {    ( [] )}
| _1 = jml_declaration _2 = jml_declarations
    {    ( _1::_2 )}

jml_declaration:
  _1 = privacy _2 = INVARIANT _3 = expr_semicolon
    {      ( Invariant(_3) )}
| _1 = modifiers _2 = type_expr _3 = variable_declarators _4 = SEMICOLON
    {    ( Jml_variable_declaration(
      { jml_variable_modifiers = _1;
	jml_variable_type = _2;
	jml_variable_decls = _3 } ) )}
| _1 = REPRESENTS _2 = ident _3 = LEFTARROW _4 = expr _5 = SEMICOLON
    {    ( Represents(_2,_4) )}

modifiers:
  
    {    ( [] )}
| _1 = modifier _2 = modifiers
    {    ( _1::_2 )}

modifier:
  _1 = MODEL
    {    ( `MODEL )}
| _1 = FINAL
    {    ( `FINAL )}
| _1 = STATIC
    {    ( `STATIC )}
| _1 = PUBLIC
    {    ( `PUBLIC )}
| _1 = PRIVATE
    {    ( `PRIVATE )}
| _1 = PROTECTED
    {    ( `PROTECTED )}

expr_semicolon:
  _1 = expr _2 = SEMICOLON
    {    ( _1 )}

opt_expr_semicolon:
  _1 = expr _2 = SEMICOLON
    {    ( Some(_1) )}
| _1 = SEMICOLON
    {    ( None )}

field_access:
  _1 = SUPER _2 = DOT _3 = ident
    {    ( let (l,_) as id = _3 in
      (merge_locs _1 l, Super_access(id)) )}
| _1 = primary_expr _2 = DOT _3 = ident
    {    ( let e = _1 and (l,_) as id = _3 in
      (merge_locs e.expr_loc l,Primary_access(e,id)) )}

primary_expr:
  _1 = primary_no_new_array
    {    ( _1 )}
| _1 = array_creation_expression
    {    ( _1 )}

primary_no_new_array:
  _1 = INTEGER
    {    ( let (loc,n)=_1 in mk_lit loc (Int(n)) )}
| _1 = REAL
    {    ( let (loc,r)=_1 in mk_lit loc (Float(r)) )}
| _1 = TRUE
    {    ( let loc=_1 in mk_lit loc (Bool(true)) )}
| _1 = FALSE
    {    ( let loc=_1 in mk_lit loc (Bool(false)) )}
| _1 = STRING
    {    ( let (loc,n)=_1 in mk_lit loc (String(n)) )}
| _1 = NULL
    {    ( let loc=_1 in mk_lit loc Null )}
| _1 = CHARACTER
    {    ( let (loc,n)=_1 in mk_lit loc (Char(n)) )}
| _1 = THIS
    {    ( let loc=_1 in mk_expr loc This )}
| _1 = BSRESULT
    {    ( let loc=_1 in mk_expr loc Result )}
| _1 = BSOLD _2 = LEFTPAR _3 = expr _4 = RIGHTPAR
    {    ( let loc=_1 and e = _3 in
      mk_expr (extend_loc loc) (Old(e)) )}
| _1 = BSFRESH _2 = LEFTPAR _3 = expr _4 = RIGHTPAR
    {    ( let loc=_1 and e = _3 in
      mk_expr (extend_loc loc) (Fresh(e)) )}
| _1 = BSTYPE _2 = LEFTPAR _3 = type_expr _4 = RIGHTPAR
    {    ( let loc=_1 and te = _3 in
      mk_expr (extend_loc loc) (Type(te)) )}
| _1 = BSTYPEOF _2 = LEFTPAR _3 = expr _4 = RIGHTPAR
    {    ( let loc=_1 and e = _3 in
      mk_expr (extend_loc loc) (Typeof(e)) )}
| _1 = BSFPI _2 = LEFTPAR _3 = expr _4 = COMMA _5 = REAL _6 = COMMA _7 = REAL _8 = RIGHTPAR
    {    ( let loc = _1 and (_,f1) = _5 and (_,f2) = _7 in
      mk_expr (extend_loc loc) (Fpi(_3,f1,f2)) )}
| _1 = LEFTPAR _2 = BSFORALL _3 = variable_declaration _4 = SEMICOLON _5 = expr _6 = SEMICOLON _7 = expr _8 = RIGHTPAR
    {    ( let loc=_1 and (t,idl)=_3 in
      mk_expr
	(extend_loc loc)
	(Quantifier(Forall,t,idl,_5,_7)) )}
| _1 = LEFTPAR _2 = BSFORALL _3 = variable_declaration _4 = SEMICOLON _5 = expr _6 = RIGHTPAR
    {    ( let loc=_1 and (t,idl)=_3 in
      mk_expr
	(extend_loc loc)
	(Quantifier(Forall,t,idl,expr_true,_5)) )}
| _1 = LEFTPAR _2 = BSEXISTS _3 = variable_declaration _4 = SEMICOLON _5 = expr _6 = SEMICOLON _7 = expr _8 = RIGHTPAR
    {    ( let loc=_1 and (t,idl)=_3 in
      mk_expr
	(extend_loc loc)
	(Quantifier(Exists,t,idl,_5,_7)) )}
| _1 = LEFTPAR _2 = BSEXISTS _3 = variable_declaration _4 = SEMICOLON _5 = expr _6 = RIGHTPAR
    {    ( let loc=_1 and (t,idl)=_3 in
      mk_expr
	(extend_loc loc)
	(Quantifier(Exists,t,idl,mk_expr_no_loc (Lit(Bool(true))),_5)) )}
| _1 = LEFTPAR _2 = expr_no_name _3 = RIGHTPAR
    {    ( _2 )}
| _1 = parenthesized_name
    {    ( expand_name _1 )}
| _1 = field_access
    {    ( let (l,f)=_1 in mk_expr l (Field_access(f)) )}
| _1 = ident _2 = LEFTPAR _3 = argument_list _4 = RIGHTPAR
    {    ( let (l,_) as id = _1 in
      mk_expr
	(extend_loc l)
	(Method_call(None,id,_3)) )}
| _1 = name _2 = DOT _3 = ident _4 = LEFTPAR _5 = argument_list _6 = RIGHTPAR
    {    ( let e = expand_name _1 in
      mk_expr
	(extend_loc e.expr_loc)
	(Method_call(Some e,_3,_5)) )}
| _1 = primary_expr _2 = DOT _3 = ident _4 = LEFTPAR _5 = argument_list _6 = RIGHTPAR
    {    ( let e = _1 in
      mk_expr
	(extend_loc e.expr_loc)
	(Method_call(Some e,_3,_5)) )}
| _1 = NEW _2 = name _3 = LEFTPAR _4 = argument_list _5 = RIGHTPAR
    {    ( let l=_1 in
      mk_expr
	(extend_loc l)
	(Class_instance_creation(_2,_4)) )}
| _1 = array_access
    {    ( _1 )}

array_access:
  _1 = primary_no_new_array _2 = LEFTBRACKET _3 = expr _4 = RIGHTBRACKET
    {    ( let e=_1 in
      let eend = symbol_end() in
      (*i
	Format.printf "Array_access : symbol_end = %d@." eend;
	i*)
      mk_expr
	(extend_loc e.expr_loc)
	(Array_access(e,_3)) )}
| _1 = name _2 = LEFTBRACKET _3 = expr _4 = RIGHTBRACKET
    {    ( let e = expand_name _1 in
      mk_expr
	(extend_loc e.expr_loc)
	(Array_access(e,_3)) )}

array_creation_expression:
  _1 = NEW _2 = base_type _3 = array_dims
    {    ( let l = _1 in
      mk_expr
	(extend_loc l)
	(Array_creation(build_array_creation_expr (Base_type(_2)) _3)) )}
| _1 = NEW _2 = name _3 = array_dims
    {    ( let l = _1 in
      mk_expr
	(extend_loc l)
	(Array_creation(build_array_creation_expr (Type_name(_2)) _3)) )}

array_dims:
  _1 = LEFTBRACKET _2 = expr _3 = RIGHTBRACKET _4 = implicit_dims
    {    ( ([_2],_4) )}
| _1 = LEFTBRACKET _2 = expr _3 = RIGHTBRACKET _4 = array_dims
    {    ( let (a,b) = _4 in (_2::a,b) )}

implicit_dims:
  
    {    ( 0 )}
| _1 = LEFTBRACKET _2 = RIGHTBRACKET _3 = implicit_dims
    {    ( succ _3 )}

primary_expr_or_name:
  _1 = primary_expr
    {    ( _1 )}
| _1 = name
    {    ( expand_name _1 )}

expr:
  _1 = name
    {    ( expand_name _1 )}
| _1 = expr_no_name
    {    ( _1 )}

expr_no_name:
  _1 = primary_expr
    {    ( _1 )}
| _1 = expr _2 = QUESTIONMARK _3 = expr _4 = COLON _5 = expr %prec IFEXPR
    {    ( let e1=_1 and e3=_5 in
      mk_expr
	(merge_locs e1.expr_loc e3.expr_loc)
	(If_expr(e1,_3,e3)) )}
| _1 = expr _2 = EQEQGT _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "==>" e2 )}
| _1 = expr _2 = LTEQEQ _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "<==" e2 )}
| _1 = expr _2 = LTEQEQGT _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "<==>" e2 )}
| _1 = expr _2 = LTEQBANGEQGT _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "<=!=>" e2 )}
| _1 = expr _2 = VERTICALBARVERTICALBAR _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "||" e2 )}
| _1 = expr _2 = AMPERSANDAMPERSAND _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "&&" e2 )}
| _1 = expr _2 = VERTICALBAR _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "|" e2 )}
| _1 = expr _2 = CARET _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "^" e2 )}
| _1 = expr _2 = AMPERSAND _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "&" e2 )}
| _1 = expr _2 = EQOP _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 _2 e2 )}
| _1 = expr _2 = COMP _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 _2 e2 )}
| _1 = expr _2 = SHIFT _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 _2 e2 )}
| _1 = expr _2 = PLUS _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "+" e2 )}
| _1 = expr _2 = MINUS _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "-" e2 )}
| _1 = expr _2 = STAR _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "*" e2 )}
| _1 = expr _2 = SLASH _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "/" e2 )}
| _1 = expr _2 = PERCENT _3 = expr
    {    ( let e1=_1 and e2=_3 in
      mk_bin
	(merge_locs e1.expr_loc e2.expr_loc)
	e1 "%" e2 )}
| _1 = PLUS _2 = expr %prec UPLUS
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "+" e )}
| _1 = MINUS _2 = expr %prec UMINUS
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "-" e )}
| _1 = BANG _2 = expr
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "!" e )}
| _1 = TILDA _2 = expr
    {    ( let l = _1 and e=_2 in
      mk_un (merge_locs l e.expr_loc) "~" e )}
| _1 = LEFTPAR _2 = base_type _3 = RIGHTPAR _4 = expr %prec CAST
    {    ( let l=_1 and e=_4 in
      mk_expr
	(merge_locs l e.expr_loc)
	(Cast(Base_type(_2),e)) )}
| _1 = LEFTPAR _2 = array_type_expr _3 = RIGHTPAR _4 = primary_expr_or_name %prec CAST
    {    ( let l=_1 and e=_4 in
      mk_expr
	(merge_locs l e.expr_loc)
	(Cast(Array_type_expr(_2),e)) )}
| _1 = LEFTPAR _2 = name _3 = RIGHTPAR _4 = primary_expr_or_name %prec CAST
    {    ( let l=_1 and e=_4 in
      mk_expr
	(merge_locs l e.expr_loc)
	(Cast(Type_name(_2),e)) )}
| _1 = expr _2 = INSTANCEOF _3 = type_expr
    {    ( let e=_1 in
      mk_expr
	(extend_loc e.expr_loc)
	(Instanceof(e,_3)) )}

parenthesized_name:
  _1 = LEFTPAR _2 = name _3 = RIGHTPAR
    {    ( _2 )}

name:
  _1 = ident
    {    ( [_1] )}
| _1 = name _2 = DOT _3 = ident
    {    ( _3::_1 )}

argument_list:
  
    {    ( [] )}
| _1 = expr_comma_list
    {    ( _1 )}

expr_comma_list:
  _1 = expr
    {    ( [_1] )}
| _1 = expr _2 = COMMA _3 = expr_comma_list
    {    ( _1::_3 )}

variable_declaration:
  _1 = type_expr _2 = variable_declarators
    {    ( (_1,_2) )}

variable_declarators:
  _1 = variable_declarator_id
    {    ( [_1] )}
| _1 = variable_declarator_id _2 = COMMA _3 = variable_declarators
    {    ( _1::_3 )}

variable_declarator_id:
  _1 = ident
    {    ( let (loc,id)=_1 in Simple_id(loc,id) )}
| _1 = variable_declarator_id _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Array_id(_1) )}

base_type:
  _1 = SHORT
    {    ( "short" )}
| _1 = BOOLEAN
    {    ( "boolean" )}
| _1 = BYTE
    {    ( "byte" )}
| _1 = CHAR
    {    ( "char" )}
| _1 = INT
    {    ( "int" )}
| _1 = FLOAT
    {    ( "float" )}
| _1 = LONG
    {    ( "long" )}
| _1 = DOUBLE
    {    ( "double" )}

type_expr:
  _1 = name
    {    ( Type_name(_1) )}
| _1 = type_expr_no_name
    {    ( _1 )}

type_expr_no_name:
  _1 = base_type
    {    ( Base_type(_1) )}
| _1 = array_type_expr
    {    ( Array_type_expr(_1) )}

array_type_expr:
  _1 = base_type _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Base_type(_1) )}
| _1 = name _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Type_name(_1) )}
| _1 = array_type_expr _2 = LEFTBRACKET _3 = RIGHTBRACKET
    {    ( Array_type_expr(_1) )}

ident:
  _1 = ID
    {    ( _1 )}

%%
