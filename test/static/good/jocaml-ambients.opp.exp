%{
open Syntax;;
%}
%start main
%token BANG
%token DOLLAR
%token DOT
%token <string> IDENT
%token IN
%token LBRACKET
%token LPAREN
%token LPOINT
%token NEW
%token OPEN
%token OUT
%token PAR
%token RBRACKET
%token RPAREN
%token RPOINT
%token SEMISEMI
%token <string> STRING
%token ZERO
%right PAR
%nonassoc BANG
%right DOT
%nonassoc DOLLAR
%type <Syntax.process> main
%%

main:
  _1 = proc _2 = SEMISEMI
    {                                        ( _1 )}

proc:
  _1 = proc _2 = PAR _3 = proc
    {                                        ( Par (_1, _3) )}
| _1 = LPAREN _2 = proc _3 = RPAREN
    {                                        ( _2 )}
| _1 = capa _2 = DOT _3 = proc
    {                                        ( Seq (_1, _3) )}
| _1 = DOLLAR _2 = ident _3 = LBRACKET _4 = proc _5 = RBRACKET
    {                                        ( Amb (_2, _4, true) )}
| _1 = ident _2 = LBRACKET _3 = proc _4 = RBRACKET
    {                                        ( Amb (_1, _3, false) )}
| _1 = NEW _2 = str _3 = DOT _4 = proc
    {                                        ( New (_2, _4) )}
| _1 = BANG _2 = proc
    {                                        ( Bang _2 )}
| _1 = LPAREN _2 = str _3 = RPAREN _4 = DOT _5 = proc
    {                                        ( Comm_in (_2, _5) )}
| _1 = LPOINT _2 = capa _3 = RPOINT
    {                                        ( Comm_out _2 )}
| _1 = ZERO
    {                                        ( Zero )}

capa:
  _1 = IN _2 = ident
    {                                        ( In _2 )}
| _1 = OUT _2 = ident
    {                                        ( Out _2 )}
| _1 = OPEN _2 = ident
    {                                        ( Open _2 )}
| _1 = ident
    {                                        ( Name _1 )}
| _1 = STRING
    {                                        ( Yell _1 )}
| _1 = capa _2 = DOT _3 = capa
    {                                        ( Seq_capa (_1, _3) )}

ident:
  _1 = IDENT
    {                                        ( Ident _1 )}

str:
  _1 = IDENT
    {                                        ( _1 )}

%%
