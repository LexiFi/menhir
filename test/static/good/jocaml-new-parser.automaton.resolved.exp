State 0:
## Known stack suffix:
##
## LR(1) items:
implementation' -> . implementation [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 967
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SEMISEMI shift to state 1032
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On OPEN shift to state 1033
-- On NEW shift to state 9
-- On MODULE shift to state 1035
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 1492
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On DEF shift to state 1506
-- On CLASS shift to state 1508
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On structure_tail shift to state 1523
-- On structure_item shift to state 1519
-- On structure shift to state 1524
-- On simple_expr shift to state 640
-- On seq_expr shift to state 1526
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On implementation shift to state 1528
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On EOF reduce production structure_tail ->

State 1:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . seq_expr DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE . seq_expr DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 962
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 2:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_longident -> UIDENT . [ WITH WHILE WHEN VAL UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> UIDENT

State 3:
## Known stack suffix:
## TRY
## LR(1) items:
expr -> TRY . seq_expr WITH opt_bar match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY . seq_expr WITH error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 956
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 4:
## Known stack suffix:
## WHILE
## LR(1) items:
expr -> WHILE . seq_expr DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE . seq_expr DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 951
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 5:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_longident -> TRUE . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> TRUE

State 6:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
expr -> SUBTRACTIVE . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 950
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 7:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRING

State 8:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On NEW shift to state 9
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 246
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACE shift to state 441
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 949
-- On mod_longident shift to state 378
-- On constr_longident shift to state 622
-- On constant shift to state 623
## Reductions:

State 9:
## Known stack suffix:
## NEW
## LR(1) items:
simple_expr -> NEW . class_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 15
## Reductions:

State 10:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_longident -> LIDENT . [ WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END ELSE DOWNTO DOT DO DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> LIDENT

State 11:
## Known stack suffix:
## mod_longident
## LR(1) items:
class_longident -> mod_longident . DOT LIDENT [ WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END ELSE DOWNTO DOT DO DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
class_longident -> mod_longident DOT . LIDENT [ WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END ELSE DOWNTO DOT DO DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 13
-- On LIDENT shift to state 14
## Reductions:

State 13:
## Known stack suffix:
## mod_longident DOT UIDENT
## LR(1) items:
mod_longident -> mod_longident DOT UIDENT . [ WITH WHILE WHEN VAL UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> mod_longident DOT UIDENT

State 14:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
class_longident -> mod_longident DOT LIDENT . [ WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END ELSE DOWNTO DOT DO DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> mod_longident DOT LIDENT

State 15:
## Known stack suffix:
## NEW class_longident
## LR(1) items:
simple_expr -> NEW class_longident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> NEW class_longident

State 16:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr type_constraint RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . SHARP label RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 30
-- On STRING shift to state 21
-- On STAR shift to state 41
-- On SHARP shift to state 941
-- On RPAREN shift to state 42
-- On PREFIXOP shift to state 488
-- On PARSER shift to state 31
-- On OR shift to state 44
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On IF shift to state 417
-- On GREATER shift to state 95
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EQUAL shift to state 96
-- On DEF shift to state 448
-- On COLONEQUAL shift to state 97
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On BARBAR shift to state 98
-- On ASSERT shift to state 473
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 944
-- On operator shift to state 244
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 17:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_longident -> UIDENT . [ error WITH WHILE WHEN VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> UIDENT

State 18:
## Known stack suffix:
## TRY
## LR(1) items:
expr -> TRY . seq_expr WITH opt_bar match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY . seq_expr WITH error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 935
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 19:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_longident -> TRUE . [ error WITH WHILE WHEN VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> TRUE

State 20:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
expr -> SUBTRACTIVE . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 934
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 21:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ error WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> STRING

State 22:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 489
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:

State 23:
## Known stack suffix:
## NEW
## LR(1) items:
simple_expr -> NEW . class_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 24
-- On mod_longident shift to state 25
-- On class_longident shift to state 28
## Reductions:

State 24:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_longident -> LIDENT . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> LIDENT

State 25:
## Known stack suffix:
## mod_longident
## LR(1) items:
class_longident -> mod_longident . DOT LIDENT [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
class_longident -> mod_longident DOT . LIDENT [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 13
-- On LIDENT shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
class_longident -> mod_longident DOT LIDENT . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_longident -> mod_longident DOT LIDENT

State 28:
## Known stack suffix:
## NEW class_longident
## LR(1) items:
simple_expr -> NEW class_longident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> NEW class_longident

State 29:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr type_constraint RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . SHARP label RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 30
-- On STRING shift to state 21
-- On STAR shift to state 41
-- On SHARP shift to state 485
-- On RPAREN shift to state 46
-- On PREFIXOP shift to state 488
-- On PARSER shift to state 31
-- On OR shift to state 44
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On IF shift to state 417
-- On GREATER shift to state 95
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EQUAL shift to state 96
-- On DEF shift to state 448
-- On COLONEQUAL shift to state 97
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On BARBAR shift to state 98
-- On ASSERT shift to state 473
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 492
-- On operator shift to state 101
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 30:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
expr -> SUBTRACTIVE . expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
operator -> SUBTRACTIVE . [ RPAREN ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 934
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:
-- On RPAREN reduce production operator -> SUBTRACTIVE

State 31:
## Known stack suffix:
## PARSER
## LR(1) items:
expr -> PARSER . opt_pat opt_bar parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 267
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On LBRACKETLESS reduce production opt_pat ->
-- On BAR reduce production opt_pat ->

State 32:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> UNDERSCORE

State 33:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
signed_constant -> SUBTRACTIVE . INT [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
signed_constant -> SUBTRACTIVE . FLOAT [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On INT shift to state 34
-- On FLOAT shift to state 35
## Reductions:

State 34:
## Known stack suffix:
## SUBTRACTIVE INT
## LR(1) items:
signed_constant -> SUBTRACTIVE INT . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> SUBTRACTIVE INT

State 35:
## Known stack suffix:
## SUBTRACTIVE FLOAT
## LR(1) items:
signed_constant -> SUBTRACTIVE FLOAT . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> SUBTRACTIVE FLOAT

State 36:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
val_ident -> LPAREN . operator RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 21
-- On STAR shift to state 41
-- On RPAREN shift to state 42
-- On PREFIXOP shift to state 43
-- On OR shift to state 44
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On GREATER shift to state 95
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EQUAL shift to state 96
-- On COLONEQUAL shift to state 97
-- On CHAR shift to state 65
-- On BARBAR shift to state 98
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 237
-- On operator shift to state 244
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 37:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> UNDERSCORE

State 38:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
operator -> SUBTRACTIVE . [ RPAREN ]
signed_constant -> SUBTRACTIVE . INT [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
signed_constant -> SUBTRACTIVE . FLOAT [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On INT shift to state 39
-- On FLOAT shift to state 40
## Reductions:
-- On RPAREN reduce production operator -> SUBTRACTIVE

State 39:
## Known stack suffix:
## SUBTRACTIVE INT
## LR(1) items:
signed_constant -> SUBTRACTIVE INT . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> SUBTRACTIVE INT

State 40:
## Known stack suffix:
## SUBTRACTIVE FLOAT
## LR(1) items:
signed_constant -> SUBTRACTIVE FLOAT . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> SUBTRACTIVE FLOAT

State 41:
## Known stack suffix:
## STAR
## LR(1) items:
operator -> STAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> STAR

State 42:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_longident -> LPAREN RPAREN . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LPAREN RPAREN

State 43:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> PREFIXOP

State 44:
## Known stack suffix:
## OR
## LR(1) items:
operator -> OR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> OR

State 45:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN . pattern error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
val_ident -> LPAREN . operator RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 38
-- On STRING shift to state 21
-- On STAR shift to state 41
-- On RPAREN shift to state 46
-- On PREFIXOP shift to state 43
-- On OR shift to state 44
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On GREATER shift to state 95
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EQUAL shift to state 96
-- On COLONEQUAL shift to state 97
-- On CHAR shift to state 65
-- On BARBAR shift to state 98
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 117
-- On operator shift to state 101
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 46:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_longident -> LPAREN RPAREN . [ error WITH WHILE WHEN VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LPAREN RPAREN

State 47:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ error WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LIDENT

State 48:
## Known stack suffix:
## LESSGREATER
## LR(1) items:
operator -> LESSGREATER . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> LESSGREATER

State 49:
## Known stack suffix:
## LESS
## LR(1) items:
operator -> LESS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> LESS

State 50:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On RBRACKET shift to state 52
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_semi_list shift to state 110
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 116
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 51:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
signed_constant -> SUBTRACTIVE . INT [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
signed_constant -> SUBTRACTIVE . FLOAT [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On INT shift to state 39
-- On FLOAT shift to state 40
## Reductions:

State 52:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_longident -> LBRACKET RBRACKET . [ error WITH WHILE WHEN VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LBRACKET RBRACKET

State 53:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On lbl_pattern_list shift to state 58
-- On label_longident shift to state 107
## Reductions:

State 54:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> LIDENT

State 55:
## Known stack suffix:
## mod_longident
## LR(1) items:
label_longident -> mod_longident . DOT LIDENT [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
label_longident -> mod_longident DOT . LIDENT [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 13
-- On LIDENT shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
label_longident -> mod_longident DOT LIDENT . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> mod_longident DOT LIDENT

State 58:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . SEMI label_longident EQUAL pattern [ error SEMI RBRACE ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi RBRACE [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On SEMI shift to state 59
-- On opt_semi shift to state 104
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACE reduce production opt_semi ->

State 59:
## Known stack suffix:
## lbl_pattern_list SEMI
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI . label_longident EQUAL pattern [ error SEMI RBRACE ]
opt_semi -> SEMI . [ error RBRACE ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On label_longident shift to state 60
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On RBRACE reduce production opt_semi -> SEMI

State 60:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident . EQUAL pattern [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident EQUAL
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL . pattern [ error SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 82
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 62:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ error WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT

State 63:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ error WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FLOAT

State 64:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_longident -> FALSE . [ error WITH WHILE WHEN VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> FALSE

State 65:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On DOTDOT shift to state 66
## Reductions:
-- On error reduce production constant -> CHAR
-- On WHEN reduce production constant -> CHAR
-- On SEMI reduce production constant -> CHAR
-- On RPAREN reduce production constant -> CHAR
-- On RBRACKET reduce production constant -> CHAR
-- On RBRACE reduce production constant -> CHAR
-- On QUESTION reduce production constant -> CHAR
-- On GREATERRBRACKET reduce production constant -> CHAR
-- On EQUAL reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLONCOLON reduce production constant -> CHAR
-- On COLON reduce production constant -> CHAR
-- On BAR reduce production constant -> CHAR
-- On AS reduce production constant -> CHAR

State 66:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On CHAR shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> CHAR DOTDOT CHAR

State 68:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> val_ident

State 69:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> simple_pattern

State 70:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> signed_constant

State 71:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
pattern -> pattern_comma_list . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern_comma_list . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COMMA shift to state 72
## Reductions:
-- On error reduce production pattern -> pattern_comma_list
-- On WHEN reduce production pattern -> pattern_comma_list
-- On SEMI reduce production pattern -> pattern_comma_list
-- On RPAREN reduce production pattern -> pattern_comma_list
-- On RBRACKET reduce production pattern -> pattern_comma_list
-- On RBRACE reduce production pattern -> pattern_comma_list
-- On QUESTION reduce production pattern -> pattern_comma_list
-- On GREATERRBRACKET reduce production pattern -> pattern_comma_list
-- On EQUAL reduce production pattern -> pattern_comma_list
-- On COLONCOLON reduce production pattern -> pattern_comma_list
-- On COLON reduce production pattern -> pattern_comma_list
-- On BAR reduce production pattern -> pattern_comma_list
-- On AS reduce production pattern -> pattern_comma_list

State 72:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 73
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 73:
## Known stack suffix:
## pattern_comma_list COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern_comma_list COMMA pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 74
## Reductions:
-- On error reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On WHEN reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On SEMI reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On RPAREN reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On RBRACKET reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On RBRACE reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On QUESTION reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On GREATERRBRACKET reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On EQUAL reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On COMMA reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On COLON reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On BAR reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On AS reduce production pattern_comma_list -> pattern_comma_list COMMA pattern

State 74:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 75
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 75:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern COLONCOLON pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 74
## Reductions:
-- On error reduce production pattern -> pattern COLONCOLON pattern
-- On WHEN reduce production pattern -> pattern COLONCOLON pattern
-- On SEMI reduce production pattern -> pattern COLONCOLON pattern
-- On RPAREN reduce production pattern -> pattern COLONCOLON pattern
-- On RBRACKET reduce production pattern -> pattern COLONCOLON pattern
-- On RBRACE reduce production pattern -> pattern COLONCOLON pattern
-- On QUESTION reduce production pattern -> pattern COLONCOLON pattern
-- On GREATERRBRACKET reduce production pattern -> pattern COLONCOLON pattern
-- On EQUAL reduce production pattern -> pattern COLONCOLON pattern
-- On COMMA reduce production pattern -> pattern COLONCOLON pattern
-- On COLON reduce production pattern -> pattern COLONCOLON pattern
-- On BAR reduce production pattern -> pattern COLONCOLON pattern
-- On AS reduce production pattern -> pattern COLONCOLON pattern

State 76:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHAR BAR AS ]
mod_longident -> mod_longident . DOT UIDENT [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL DOT COMMA COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On DOT shift to state 77
## Reductions:
-- On error reduce production constr_longident -> mod_longident
-- On WHEN reduce production constr_longident -> mod_longident
-- On UNDERSCORE reduce production constr_longident -> mod_longident
-- On UIDENT reduce production constr_longident -> mod_longident
-- On TRUE reduce production constr_longident -> mod_longident
-- On SUBTRACTIVE reduce production constr_longident -> mod_longident
-- On STRING reduce production constr_longident -> mod_longident
-- On SEMI reduce production constr_longident -> mod_longident
-- On RPAREN reduce production constr_longident -> mod_longident
-- On RBRACKET reduce production constr_longident -> mod_longident
-- On RBRACE reduce production constr_longident -> mod_longident
-- On QUESTION reduce production constr_longident -> mod_longident
-- On LPAREN reduce production constr_longident -> mod_longident
-- On LIDENT reduce production constr_longident -> mod_longident
-- On LBRACKET reduce production constr_longident -> mod_longident
-- On LBRACE reduce production constr_longident -> mod_longident
-- On INT reduce production constr_longident -> mod_longident
-- On GREATERRBRACKET reduce production constr_longident -> mod_longident
-- On FLOAT reduce production constr_longident -> mod_longident
-- On FALSE reduce production constr_longident -> mod_longident
-- On EQUAL reduce production constr_longident -> mod_longident
-- On COMMA reduce production constr_longident -> mod_longident
-- On COLONCOLON reduce production constr_longident -> mod_longident
-- On COLON reduce production constr_longident -> mod_longident
-- On CHAR reduce production constr_longident -> mod_longident
-- On BAR reduce production constr_longident -> mod_longident
-- On AS reduce production constr_longident -> mod_longident

State 77:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ error WHEN VAL UNDERSCORE UIDENT TYPE TRUE SUBTRACTIVE STRING SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OPEN MODULE LPAREN LIDENT LET LBRACKET LBRACE INT INCLUDE GREATERRBRACKET FLOAT FALSE EXTERNAL EXCEPTION EQUAL END DOT DEF COMMA COLONCOLON COLON CLASS CHAR BAR AS ]
## Transitions:
-- On UIDENT shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## mod_longident DOT UIDENT
## LR(1) items:
mod_longident -> mod_longident DOT UIDENT . [ error WITH WHILE WHEN VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_longident -> mod_longident DOT UIDENT

State 79:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> constr_longident . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 80
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:
-- On error reduce production simple_pattern -> constr_longident
-- On WHEN reduce production simple_pattern -> constr_longident
-- On SEMI reduce production simple_pattern -> constr_longident
-- On RPAREN reduce production simple_pattern -> constr_longident
-- On RBRACKET reduce production simple_pattern -> constr_longident
-- On RBRACE reduce production simple_pattern -> constr_longident
-- On QUESTION reduce production simple_pattern -> constr_longident
-- On GREATERRBRACKET reduce production simple_pattern -> constr_longident
-- On EQUAL reduce production simple_pattern -> constr_longident
-- On COMMA reduce production simple_pattern -> constr_longident
-- On COLONCOLON reduce production simple_pattern -> constr_longident
-- On COLON reduce production simple_pattern -> constr_longident
-- On BAR reduce production simple_pattern -> constr_longident
-- On AS reduce production simple_pattern -> constr_longident

State 80:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> constr_longident pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> constr_longident pattern

State 81:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> constant

State 82:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident EQUAL pattern
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern . [ error SEMI RBRACE ]
pattern -> pattern . AS val_ident [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:
-- On error reduce production lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern
-- On SEMI reduce production lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern
-- On RBRACE reduce production lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern

State 83:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
pattern_comma_list -> pattern COMMA . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 84
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 84:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern COMMA pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 74
## Reductions:
-- On error reduce production pattern_comma_list -> pattern COMMA pattern
-- On WHEN reduce production pattern_comma_list -> pattern COMMA pattern
-- On SEMI reduce production pattern_comma_list -> pattern COMMA pattern
-- On RPAREN reduce production pattern_comma_list -> pattern COMMA pattern
-- On RBRACKET reduce production pattern_comma_list -> pattern COMMA pattern
-- On RBRACE reduce production pattern_comma_list -> pattern COMMA pattern
-- On QUESTION reduce production pattern_comma_list -> pattern COMMA pattern
-- On GREATERRBRACKET reduce production pattern_comma_list -> pattern COMMA pattern
-- On EQUAL reduce production pattern_comma_list -> pattern COMMA pattern
-- On COMMA reduce production pattern_comma_list -> pattern COMMA pattern
-- On COLON reduce production pattern_comma_list -> pattern COMMA pattern
-- On BAR reduce production pattern_comma_list -> pattern COMMA pattern
-- On AS reduce production pattern_comma_list -> pattern COMMA pattern

State 85:
## Known stack suffix:
## pattern BAR
## LR(1) items:
pattern -> pattern BAR . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 86
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 86:
## Known stack suffix:
## pattern BAR pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern BAR pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
## Reductions:
-- On error reduce production pattern -> pattern BAR pattern
-- On WHEN reduce production pattern -> pattern BAR pattern
-- On SEMI reduce production pattern -> pattern BAR pattern
-- On RPAREN reduce production pattern -> pattern BAR pattern
-- On RBRACKET reduce production pattern -> pattern BAR pattern
-- On RBRACE reduce production pattern -> pattern BAR pattern
-- On QUESTION reduce production pattern -> pattern BAR pattern
-- On GREATERRBRACKET reduce production pattern -> pattern BAR pattern
-- On EQUAL reduce production pattern -> pattern BAR pattern
-- On COLON reduce production pattern -> pattern BAR pattern
-- On BAR reduce production pattern -> pattern BAR pattern
-- On AS reduce production pattern -> pattern BAR pattern

State 87:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On LPAREN shift to state 88
-- On LIDENT shift to state 47
-- On val_ident shift to state 103
## Reductions:

State 88:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ error WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 89
-- On STAR shift to state 41
-- On PREFIXOP shift to state 43
-- On OR shift to state 44
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On GREATER shift to state 95
-- On EQUAL shift to state 96
-- On COLONEQUAL shift to state 97
-- On BARBAR shift to state 98
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On operator shift to state 101
## Reductions:

State 89:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
operator -> SUBTRACTIVE . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> SUBTRACTIVE

State 90:
## Known stack suffix:
## INFIXOP4
## LR(1) items:
operator -> INFIXOP4 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP4

State 91:
## Known stack suffix:
## INFIXOP3
## LR(1) items:
operator -> INFIXOP3 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP3

State 92:
## Known stack suffix:
## INFIXOP2
## LR(1) items:
operator -> INFIXOP2 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP2

State 93:
## Known stack suffix:
## INFIXOP1
## LR(1) items:
operator -> INFIXOP1 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP1

State 94:
## Known stack suffix:
## INFIXOP0
## LR(1) items:
operator -> INFIXOP0 . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> INFIXOP0

State 95:
## Known stack suffix:
## GREATER
## LR(1) items:
operator -> GREATER . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> GREATER

State 96:
## Known stack suffix:
## EQUAL
## LR(1) items:
operator -> EQUAL . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> EQUAL

State 97:
## Known stack suffix:
## COLONEQUAL
## LR(1) items:
operator -> COLONEQUAL . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> COLONEQUAL

State 98:
## Known stack suffix:
## BARBAR
## LR(1) items:
operator -> BARBAR . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> BARBAR

State 99:
## Known stack suffix:
## AMPERSAND
## LR(1) items:
operator -> AMPERSAND . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> AMPERSAND

State 100:
## Known stack suffix:
## AMPERAMPER
## LR(1) items:
operator -> AMPERAMPER . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production operator -> AMPERAMPER

State 101:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ error WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ error WITH WHILE WHEN VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LPAREN operator RPAREN

State 103:
## Known stack suffix:
## pattern AS val_ident
## LR(1) items:
pattern -> pattern AS val_ident . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> pattern AS val_ident

State 104:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi . RBRACE [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list opt_semi . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 105
-- On RBRACE shift to state 106
## Reductions:

State 105:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi error

State 106:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE

State 107:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_pattern_list -> label_longident . EQUAL pattern [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## label_longident EQUAL
## LR(1) items:
lbl_pattern_list -> label_longident EQUAL . pattern [ error SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 109
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 109:
## Known stack suffix:
## label_longident EQUAL pattern
## LR(1) items:
lbl_pattern_list -> label_longident EQUAL pattern . [ error SEMI RBRACE ]
pattern -> pattern . AS val_ident [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:
-- On error reduce production lbl_pattern_list -> label_longident EQUAL pattern
-- On SEMI reduce production lbl_pattern_list -> label_longident EQUAL pattern
-- On RBRACE reduce production lbl_pattern_list -> label_longident EQUAL pattern

State 110:
## Known stack suffix:
## LBRACKET pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI RBRACKET ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi RBRACKET [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On SEMI shift to state 111
-- On opt_semi shift to state 113
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACKET reduce production opt_semi ->

State 111:
## Known stack suffix:
## pattern_semi_list SEMI
## LR(1) items:
opt_semi -> SEMI . [ error RBRACKET ]
pattern_semi_list -> pattern_semi_list SEMI . pattern [ error SEMI RBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 112
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On RBRACKET reduce production opt_semi -> SEMI

State 112:
## Known stack suffix:
## pattern_semi_list SEMI pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_semi_list -> pattern_semi_list SEMI pattern . [ error SEMI RBRACKET ]
## Transitions:
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:
-- On error reduce production pattern_semi_list -> pattern_semi_list SEMI pattern
-- On SEMI reduce production pattern_semi_list -> pattern_semi_list SEMI pattern
-- On RBRACKET reduce production pattern_semi_list -> pattern_semi_list SEMI pattern

State 113:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi . RBRACKET [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list opt_semi . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 114
-- On RBRACKET shift to state 115
## Reductions:

State 114:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi error

State 115:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi RBRACKET
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET

State 116:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_semi_list -> pattern . [ error SEMI RBRACKET ]
## Transitions:
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:
-- On error reduce production pattern_semi_list -> pattern
-- On SEMI reduce production pattern_semi_list -> pattern
-- On RBRACKET reduce production pattern_semi_list -> pattern

State 117:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 118
-- On RPAREN shift to state 119
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On COLON shift to state 120
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:

State 118:
## Known stack suffix:
## LPAREN pattern error
## LR(1) items:
simple_pattern -> LPAREN pattern error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern error

State 119:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern RPAREN . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern RPAREN

State 120:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
simple_pattern -> LPAREN pattern COLON . core_type RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern COLON . core_type error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 228
## Reductions:

State 121:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_core_type -> UNDERSCORE . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> UNDERSCORE

State 122:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_ext_longident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> UIDENT

State 123:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_core_type -> SHARP . class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 24
-- On mod_longident shift to state 25
-- On class_longident shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## SHARP class_longident
## LR(1) items:
simple_core_type -> SHARP class_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> SHARP class_longident

State 125:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type -> QUOTE . ident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 126
-- On LIDENT shift to state 127
-- On ident shift to state 128
## Reductions:

State 126:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> UIDENT

State 127:
## Known stack suffix:
## LIDENT
## LR(1) items:
ident -> LIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> LIDENT

State 128:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type -> QUOTE ident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> QUOTE ident

State 129:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type_comma_list shift to state 197
-- On core_type shift to state 206
## Reductions:

State 130:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_core_type -> UNDERSCORE . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> UNDERSCORE

State 131:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_core_type -> SHARP . class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## SHARP class_longident
## LR(1) items:
simple_core_type -> SHARP class_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> SHARP class_longident

State 133:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type -> QUOTE . ident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 134
-- On LIDENT shift to state 135
-- On ident shift to state 136
## Reductions:

State 134:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LPAREN LIDENT LET INT INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> UIDENT

State 135:
## Known stack suffix:
## LIDENT
## LR(1) items:
ident -> LIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LPAREN LIDENT LET INT INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> LIDENT

State 136:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type -> QUOTE ident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> QUOTE ident

State 137:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type_comma_list shift to state 186
-- On core_type shift to state 193
## Reductions:

State 138:
## Known stack suffix:
## LIDENT
## LR(1) items:
type_longident -> LIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> LIDENT

State 139:
## Known stack suffix:
## LESSLESS
## LR(1) items:
core_type -> LESSLESS . channel_type GREATERGREATER [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type -> LESSLESS . channel_type EQUALGREATER core_type GREATERGREATER [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 177
-- On channel_type shift to state 178
-- On channel_tuple shift to state 183
## Reductions:
-- On GREATERGREATER reduce production channel_type ->
-- On EQUALGREATER reduce production channel_type ->

State 140:
## Known stack suffix:
## LESS
## LR(1) items:
simple_core_type -> LESS . meth_list GREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LESS . GREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On LIDENT shift to state 141
-- On GREATER shift to state 142
-- On DOTDOT shift to state 143
-- On meth_list shift to state 144
-- On label shift to state 146
-- On field shift to state 173
## Reductions:

State 141:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ WITH WHILE VIRTUAL VAL UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> LIDENT

State 142:
## Known stack suffix:
## LESS GREATER
## LR(1) items:
simple_core_type -> LESS GREATER . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LESS GREATER

State 143:
## Known stack suffix:
## DOTDOT
## LR(1) items:
meth_list -> DOTDOT . [ GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_list -> DOTDOT

State 144:
## Known stack suffix:
## LESS meth_list
## LR(1) items:
simple_core_type -> LESS meth_list . GREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On GREATER shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## LESS meth_list GREATER
## LR(1) items:
simple_core_type -> LESS meth_list GREATER . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LESS meth_list GREATER

State 146:
## Known stack suffix:
## label
## LR(1) items:
field -> label . COLON core_type [ SEMI GREATER ]
## Transitions:
-- On COLON shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## label COLON
## LR(1) items:
field -> label COLON . core_type [ SEMI GREATER ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 166
## Reductions:

State 148:
## Known stack suffix:
## type_longident
## LR(1) items:
simple_core_type -> type_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> type_longident

State 149:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type -> simple_core_type . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type_tuple -> simple_core_type . STAR simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On STAR shift to state 150
-- On SHARP shift to state 152
-- On LIDENT shift to state 138
-- On type_longident shift to state 154
-- On mod_ext_longident shift to state 155
## Reductions:
-- On WITH reduce production core_type -> simple_core_type
-- On VIRTUAL reduce production core_type -> simple_core_type
-- On VAL reduce production core_type -> simple_core_type
-- On TYPE reduce production core_type -> simple_core_type
-- On SEMISEMI reduce production core_type -> simple_core_type
-- On SEMI reduce production core_type -> simple_core_type
-- On RPAREN reduce production core_type -> simple_core_type
-- On RBRACE reduce production core_type -> simple_core_type
-- On OPEN reduce production core_type -> simple_core_type
-- On MODULE reduce production core_type -> simple_core_type
-- On MINUSGREATER reduce production core_type -> simple_core_type
-- On METHOD reduce production core_type -> simple_core_type
-- On LET reduce production core_type -> simple_core_type
-- On INHERIT reduce production core_type -> simple_core_type
-- On INCLUDE reduce production core_type -> simple_core_type
-- On GREATERGREATER reduce production core_type -> simple_core_type
-- On GREATER reduce production core_type -> simple_core_type
-- On EXTERNAL reduce production core_type -> simple_core_type
-- On EXCEPTION reduce production core_type -> simple_core_type
-- On EQUALGREATER reduce production core_type -> simple_core_type
-- On EQUAL reduce production core_type -> simple_core_type
-- On EOF reduce production core_type -> simple_core_type
-- On END reduce production core_type -> simple_core_type
-- On DEF reduce production core_type -> simple_core_type
-- On CONSTRAINT reduce production core_type -> simple_core_type
-- On COMMA reduce production core_type -> simple_core_type
-- On COLONGREATER reduce production core_type -> simple_core_type
-- On CLASS reduce production core_type -> simple_core_type
-- On AS reduce production core_type -> simple_core_type
-- On AND reduce production core_type -> simple_core_type

State 150:
## Known stack suffix:
## simple_core_type STAR
## LR(1) items:
core_type_tuple -> simple_core_type STAR . simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 151
-- On mod_ext_longident shift to state 155
## Reductions:

State 151:
## Known stack suffix:
## simple_core_type STAR simple_core_type
## LR(1) items:
core_type_tuple -> simple_core_type STAR simple_core_type . [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 152
-- On LIDENT shift to state 138
-- On type_longident shift to state 154
-- On mod_ext_longident shift to state 155
## Reductions:
-- On WITH reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On VIRTUAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On VAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On TYPE reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On STAR reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On SEMISEMI reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On SEMI reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On RPAREN reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On RBRACE reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On OPEN reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On MODULE reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On MINUSGREATER reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On METHOD reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On LET reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On INHERIT reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On INCLUDE reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On GREATERGREATER reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On GREATER reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EXTERNAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EXCEPTION reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EQUALGREATER reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EQUAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EOF reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On END reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On DEF reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On CONSTRAINT reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On COMMA reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On COLONGREATER reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On CLASS reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On AS reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On AND reduce production core_type_tuple -> simple_core_type STAR simple_core_type

State 152:
## Known stack suffix:
## simple_core_type SHARP
## LR(1) items:
simple_core_type -> simple_core_type SHARP . class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## simple_core_type SHARP class_longident
## LR(1) items:
simple_core_type -> simple_core_type SHARP class_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> simple_core_type SHARP class_longident

State 154:
## Known stack suffix:
## simple_core_type type_longident
## LR(1) items:
simple_core_type -> simple_core_type type_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> simple_core_type type_longident

State 155:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On LPAREN shift to state 156
-- On DOT shift to state 161
## Reductions:

State 156:
## Known stack suffix:
## mod_ext_longident LPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN . mod_ext_longident RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On mod_ext_longident shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident . RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
## Transitions:
-- On RPAREN shift to state 158
-- On LPAREN shift to state 156
-- On DOT shift to state 159
## Reductions:

State 158:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident RPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN

State 159:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 161:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 160
-- On LIDENT shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
type_longident -> mod_ext_longident DOT LIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> mod_ext_longident DOT LIDENT

State 163:
## Known stack suffix:
## core_type_tuple
## LR(1) items:
core_type -> core_type_tuple . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type_tuple -> core_type_tuple . STAR simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On STAR shift to state 164
## Reductions:
-- On WITH reduce production core_type -> core_type_tuple
-- On VIRTUAL reduce production core_type -> core_type_tuple
-- On VAL reduce production core_type -> core_type_tuple
-- On TYPE reduce production core_type -> core_type_tuple
-- On SHARP reduce production core_type -> core_type_tuple
-- On SEMISEMI reduce production core_type -> core_type_tuple
-- On SEMI reduce production core_type -> core_type_tuple
-- On RPAREN reduce production core_type -> core_type_tuple
-- On RBRACE reduce production core_type -> core_type_tuple
-- On OPEN reduce production core_type -> core_type_tuple
-- On MODULE reduce production core_type -> core_type_tuple
-- On MINUSGREATER reduce production core_type -> core_type_tuple
-- On METHOD reduce production core_type -> core_type_tuple
-- On LET reduce production core_type -> core_type_tuple
-- On INHERIT reduce production core_type -> core_type_tuple
-- On INCLUDE reduce production core_type -> core_type_tuple
-- On GREATERGREATER reduce production core_type -> core_type_tuple
-- On GREATER reduce production core_type -> core_type_tuple
-- On EXTERNAL reduce production core_type -> core_type_tuple
-- On EXCEPTION reduce production core_type -> core_type_tuple
-- On EQUALGREATER reduce production core_type -> core_type_tuple
-- On EQUAL reduce production core_type -> core_type_tuple
-- On EOF reduce production core_type -> core_type_tuple
-- On END reduce production core_type -> core_type_tuple
-- On DEF reduce production core_type -> core_type_tuple
-- On CONSTRAINT reduce production core_type -> core_type_tuple
-- On COMMA reduce production core_type -> core_type_tuple
-- On COLONGREATER reduce production core_type -> core_type_tuple
-- On CLASS reduce production core_type -> core_type_tuple
-- On AS reduce production core_type -> core_type_tuple
-- On AND reduce production core_type -> core_type_tuple

State 164:
## Known stack suffix:
## core_type_tuple STAR
## LR(1) items:
core_type_tuple -> core_type_tuple STAR . simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 165
-- On mod_ext_longident shift to state 155
## Reductions:

State 165:
## Known stack suffix:
## core_type_tuple STAR simple_core_type
## LR(1) items:
core_type_tuple -> core_type_tuple STAR simple_core_type . [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 152
-- On LIDENT shift to state 138
-- On type_longident shift to state 154
-- On mod_ext_longident shift to state 155
## Reductions:
-- On WITH reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On VIRTUAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On VAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On TYPE reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On STAR reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On SEMISEMI reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On SEMI reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On RPAREN reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On RBRACE reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On OPEN reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On MODULE reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On MINUSGREATER reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On METHOD reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On LET reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On INHERIT reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On INCLUDE reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On GREATERGREATER reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On GREATER reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EXTERNAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EXCEPTION reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EQUALGREATER reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EQUAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EOF reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On END reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On DEF reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On CONSTRAINT reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On COMMA reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On COLONGREATER reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On CLASS reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On AS reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On AND reduce production core_type_tuple -> core_type_tuple STAR simple_core_type

State 166:
## Known stack suffix:
## label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ SEMI MINUSGREATER GREATER AS ]
core_type -> core_type . AS type_parameter [ SEMI MINUSGREATER GREATER AS ]
field -> label COLON core_type . [ SEMI GREATER ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On SEMI reduce production field -> label COLON core_type
-- On GREATER reduce production field -> label COLON core_type

State 167:
## Known stack suffix:
## core_type MINUSGREATER
## LR(1) items:
core_type -> core_type MINUSGREATER . core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## core_type MINUSGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type -> core_type MINUSGREATER core_type . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type -> core_type . AS type_parameter [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 167
## Reductions:
-- On WITH reduce production core_type -> core_type MINUSGREATER core_type
-- On VIRTUAL reduce production core_type -> core_type MINUSGREATER core_type
-- On VAL reduce production core_type -> core_type MINUSGREATER core_type
-- On TYPE reduce production core_type -> core_type MINUSGREATER core_type
-- On SHARP reduce production core_type -> core_type MINUSGREATER core_type
-- On SEMISEMI reduce production core_type -> core_type MINUSGREATER core_type
-- On SEMI reduce production core_type -> core_type MINUSGREATER core_type
-- On RPAREN reduce production core_type -> core_type MINUSGREATER core_type
-- On RBRACE reduce production core_type -> core_type MINUSGREATER core_type
-- On OPEN reduce production core_type -> core_type MINUSGREATER core_type
-- On MODULE reduce production core_type -> core_type MINUSGREATER core_type
-- On METHOD reduce production core_type -> core_type MINUSGREATER core_type
-- On LET reduce production core_type -> core_type MINUSGREATER core_type
-- On INHERIT reduce production core_type -> core_type MINUSGREATER core_type
-- On INCLUDE reduce production core_type -> core_type MINUSGREATER core_type
-- On GREATERGREATER reduce production core_type -> core_type MINUSGREATER core_type
-- On GREATER reduce production core_type -> core_type MINUSGREATER core_type
-- On EXTERNAL reduce production core_type -> core_type MINUSGREATER core_type
-- On EXCEPTION reduce production core_type -> core_type MINUSGREATER core_type
-- On EQUALGREATER reduce production core_type -> core_type MINUSGREATER core_type
-- On EQUAL reduce production core_type -> core_type MINUSGREATER core_type
-- On EOF reduce production core_type -> core_type MINUSGREATER core_type
-- On END reduce production core_type -> core_type MINUSGREATER core_type
-- On DEF reduce production core_type -> core_type MINUSGREATER core_type
-- On CONSTRAINT reduce production core_type -> core_type MINUSGREATER core_type
-- On COMMA reduce production core_type -> core_type MINUSGREATER core_type
-- On COLONGREATER reduce production core_type -> core_type MINUSGREATER core_type
-- On CLASS reduce production core_type -> core_type MINUSGREATER core_type
-- On AS reduce production core_type -> core_type MINUSGREATER core_type
-- On AND reduce production core_type -> core_type MINUSGREATER core_type

State 169:
## Known stack suffix:
## core_type AS
## LR(1) items:
core_type -> core_type AS . type_parameter [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On type_parameter shift to state 172
## Reductions:

State 170:
## Known stack suffix:
## QUOTE
## LR(1) items:
type_parameter -> QUOTE . ident [ WITH VIRTUAL VAL UIDENT TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 134
-- On LIDENT shift to state 135
-- On ident shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
type_parameter -> QUOTE ident . [ WITH VIRTUAL VAL UIDENT TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter -> QUOTE ident

State 172:
## Known stack suffix:
## core_type AS type_parameter
## LR(1) items:
core_type -> core_type AS type_parameter . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> core_type AS type_parameter

State 173:
## Known stack suffix:
## field
## LR(1) items:
meth_list -> field . SEMI meth_list [ GREATER ]
meth_list -> field . opt_semi [ GREATER ]
## Transitions:
-- On SEMI shift to state 174
-- On opt_semi shift to state 176
## Reductions:
-- On GREATER reduce production opt_semi ->

State 174:
## Known stack suffix:
## field SEMI
## LR(1) items:
meth_list -> field SEMI . meth_list [ GREATER ]
opt_semi -> SEMI . [ GREATER ]
## Transitions:
-- On LIDENT shift to state 141
-- On DOTDOT shift to state 143
-- On meth_list shift to state 175
-- On label shift to state 146
-- On field shift to state 173
## Reductions:
-- On GREATER reduce production opt_semi -> SEMI

State 175:
## Known stack suffix:
## field SEMI meth_list
## LR(1) items:
meth_list -> field SEMI meth_list . [ GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_list -> field SEMI meth_list

State 176:
## Known stack suffix:
## field opt_semi
## LR(1) items:
meth_list -> field opt_semi . [ GREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_list -> field opt_semi

State 177:
## Known stack suffix:
## core_type
## LR(1) items:
channel_tuple -> core_type . [ GREATERGREATER EQUALGREATER COMMA ]
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER GREATERGREATER EQUALGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER GREATERGREATER EQUALGREATER COMMA AS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On GREATERGREATER reduce production channel_tuple -> core_type
-- On EQUALGREATER reduce production channel_tuple -> core_type
-- On COMMA reduce production channel_tuple -> core_type

State 178:
## Known stack suffix:
## LESSLESS channel_type
## LR(1) items:
core_type -> LESSLESS channel_type . GREATERGREATER [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type -> LESSLESS channel_type . EQUALGREATER core_type GREATERGREATER [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On GREATERGREATER shift to state 179
-- On EQUALGREATER shift to state 180
## Reductions:

State 179:
## Known stack suffix:
## LESSLESS channel_type GREATERGREATER
## LR(1) items:
core_type -> LESSLESS channel_type GREATERGREATER . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> LESSLESS channel_type GREATERGREATER

State 180:
## Known stack suffix:
## LESSLESS channel_type EQUALGREATER
## LR(1) items:
core_type -> LESSLESS channel_type EQUALGREATER . core_type GREATERGREATER [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## LESSLESS channel_type EQUALGREATER core_type
## LR(1) items:
core_type -> LESSLESS channel_type EQUALGREATER core_type . GREATERGREATER [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER GREATERGREATER AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER GREATERGREATER AS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On GREATERGREATER shift to state 182
-- On AS shift to state 169
## Reductions:

State 182:
## Known stack suffix:
## LESSLESS channel_type EQUALGREATER core_type GREATERGREATER
## LR(1) items:
core_type -> LESSLESS channel_type EQUALGREATER core_type GREATERGREATER . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> LESSLESS channel_type EQUALGREATER core_type GREATERGREATER

State 183:
## Known stack suffix:
## channel_tuple
## LR(1) items:
channel_tuple -> channel_tuple . COMMA core_type [ GREATERGREATER EQUALGREATER COMMA ]
channel_type -> channel_tuple . [ GREATERGREATER EQUALGREATER ]
## Transitions:
-- On COMMA shift to state 184
## Reductions:
-- On GREATERGREATER reduce production channel_type -> channel_tuple
-- On EQUALGREATER reduce production channel_type -> channel_tuple

State 184:
## Known stack suffix:
## channel_tuple COMMA
## LR(1) items:
channel_tuple -> channel_tuple COMMA . core_type [ GREATERGREATER EQUALGREATER COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 185
## Reductions:

State 185:
## Known stack suffix:
## channel_tuple COMMA core_type
## LR(1) items:
channel_tuple -> channel_tuple COMMA core_type . [ GREATERGREATER EQUALGREATER COMMA ]
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER GREATERGREATER EQUALGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER GREATERGREATER EQUALGREATER COMMA AS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On GREATERGREATER reduce production channel_tuple -> channel_tuple COMMA core_type
-- On EQUALGREATER reduce production channel_tuple -> channel_tuple COMMA core_type
-- On COMMA reduce production channel_tuple -> channel_tuple COMMA core_type

State 186:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 187
-- On COMMA shift to state 191
## Reductions:

State 187:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list RPAREN . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 188
-- On LIDENT shift to state 138
-- On type_longident shift to state 190
-- On mod_ext_longident shift to state 155
## Reductions:

State 188:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP . class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident

State 190:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN type_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident

State 191:
## Known stack suffix:
## core_type_comma_list COMMA
## LR(1) items:
core_type_comma_list -> core_type_comma_list COMMA . core_type [ RPAREN COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## core_type_comma_list COMMA core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type_comma_list COMMA core_type . [ RPAREN COMMA ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On RPAREN reduce production core_type_comma_list -> core_type_comma_list COMMA core_type
-- On COMMA reduce production core_type_comma_list -> core_type_comma_list COMMA core_type

State 193:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type . RPAREN [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 194
-- On MINUSGREATER shift to state 167
-- On COMMA shift to state 195
-- On AS shift to state 169
## Reductions:

State 194:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type RPAREN . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUALGREATER EQUAL EOF END DEF CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LPAREN core_type RPAREN

State 195:
## Known stack suffix:
## core_type COMMA
## LR(1) items:
core_type_comma_list -> core_type COMMA . core_type [ RPAREN COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## core_type COMMA core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type COMMA core_type . [ RPAREN COMMA ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On RPAREN reduce production core_type_comma_list -> core_type COMMA core_type
-- On COMMA reduce production core_type_comma_list -> core_type COMMA core_type

State 197:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 198
-- On COMMA shift to state 191
## Reductions:

State 198:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list RPAREN . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 199
-- On LIDENT shift to state 201
-- On type_longident shift to state 202
-- On mod_ext_longident shift to state 203
## Reductions:

State 199:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP . class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 24
-- On mod_longident shift to state 25
-- On class_longident shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident

State 201:
## Known stack suffix:
## LIDENT
## LR(1) items:
type_longident -> LIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> LIDENT

State 202:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN type_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident

State 203:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LPAREN shift to state 156
-- On DOT shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 160
-- On LIDENT shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
type_longident -> mod_ext_longident DOT LIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_longident -> mod_ext_longident DOT LIDENT

State 206:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type . RPAREN [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 207
-- On MINUSGREATER shift to state 167
-- On COMMA shift to state 195
-- On AS shift to state 169
## Reductions:

State 207:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type RPAREN . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LPAREN core_type RPAREN

State 208:
## Known stack suffix:
## LESSLESS
## LR(1) items:
core_type -> LESSLESS . channel_type GREATERGREATER [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type -> LESSLESS . channel_type EQUALGREATER core_type GREATERGREATER [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 177
-- On channel_type shift to state 209
-- On channel_tuple shift to state 183
## Reductions:
-- On GREATERGREATER reduce production channel_type ->
-- On EQUALGREATER reduce production channel_type ->

State 209:
## Known stack suffix:
## LESSLESS channel_type
## LR(1) items:
core_type -> LESSLESS channel_type . GREATERGREATER [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type -> LESSLESS channel_type . EQUALGREATER core_type GREATERGREATER [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On GREATERGREATER shift to state 210
-- On EQUALGREATER shift to state 211
## Reductions:

State 210:
## Known stack suffix:
## LESSLESS channel_type GREATERGREATER
## LR(1) items:
core_type -> LESSLESS channel_type GREATERGREATER . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> LESSLESS channel_type GREATERGREATER

State 211:
## Known stack suffix:
## LESSLESS channel_type EQUALGREATER
## LR(1) items:
core_type -> LESSLESS channel_type EQUALGREATER . core_type GREATERGREATER [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## LESSLESS channel_type EQUALGREATER core_type
## LR(1) items:
core_type -> LESSLESS channel_type EQUALGREATER core_type . GREATERGREATER [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER GREATERGREATER AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER GREATERGREATER AS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On GREATERGREATER shift to state 213
-- On AS shift to state 169
## Reductions:

State 213:
## Known stack suffix:
## LESSLESS channel_type EQUALGREATER core_type GREATERGREATER
## LR(1) items:
core_type -> LESSLESS channel_type EQUALGREATER core_type GREATERGREATER . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> LESSLESS channel_type EQUALGREATER core_type GREATERGREATER

State 214:
## Known stack suffix:
## LESS
## LR(1) items:
simple_core_type -> LESS . meth_list GREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LESS . GREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LIDENT shift to state 141
-- On GREATER shift to state 215
-- On DOTDOT shift to state 143
-- On meth_list shift to state 216
-- On label shift to state 146
-- On field shift to state 173
## Reductions:

State 215:
## Known stack suffix:
## LESS GREATER
## LR(1) items:
simple_core_type -> LESS GREATER . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LESS GREATER

State 216:
## Known stack suffix:
## LESS meth_list
## LR(1) items:
simple_core_type -> LESS meth_list . GREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On GREATER shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## LESS meth_list GREATER
## LR(1) items:
simple_core_type -> LESS meth_list GREATER . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> LESS meth_list GREATER

State 218:
## Known stack suffix:
## type_longident
## LR(1) items:
simple_core_type -> type_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> type_longident

State 219:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type -> simple_core_type . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type_tuple -> simple_core_type . STAR simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On STAR shift to state 220
-- On SHARP shift to state 222
-- On LIDENT shift to state 201
-- On type_longident shift to state 224
-- On mod_ext_longident shift to state 203
## Reductions:
-- On error reduce production core_type -> simple_core_type
-- On WITH reduce production core_type -> simple_core_type
-- On VIRTUAL reduce production core_type -> simple_core_type
-- On VAL reduce production core_type -> simple_core_type
-- On TYPE reduce production core_type -> simple_core_type
-- On SEMISEMI reduce production core_type -> simple_core_type
-- On RPAREN reduce production core_type -> simple_core_type
-- On OPEN reduce production core_type -> simple_core_type
-- On MODULE reduce production core_type -> simple_core_type
-- On MINUSGREATER reduce production core_type -> simple_core_type
-- On METHOD reduce production core_type -> simple_core_type
-- On LET reduce production core_type -> simple_core_type
-- On INHERIT reduce production core_type -> simple_core_type
-- On INCLUDE reduce production core_type -> simple_core_type
-- On EXTERNAL reduce production core_type -> simple_core_type
-- On EXCEPTION reduce production core_type -> simple_core_type
-- On EQUAL reduce production core_type -> simple_core_type
-- On END reduce production core_type -> simple_core_type
-- On DEF reduce production core_type -> simple_core_type
-- On CONSTRAINT reduce production core_type -> simple_core_type
-- On CLASS reduce production core_type -> simple_core_type
-- On AS reduce production core_type -> simple_core_type
-- On AND reduce production core_type -> simple_core_type

State 220:
## Known stack suffix:
## simple_core_type STAR
## LR(1) items:
core_type_tuple -> simple_core_type STAR . simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 221
-- On mod_ext_longident shift to state 203
## Reductions:

State 221:
## Known stack suffix:
## simple_core_type STAR simple_core_type
## LR(1) items:
core_type_tuple -> simple_core_type STAR simple_core_type . [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 222
-- On LIDENT shift to state 201
-- On type_longident shift to state 224
-- On mod_ext_longident shift to state 203
## Reductions:
-- On error reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On WITH reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On VIRTUAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On VAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On TYPE reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On STAR reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On SEMISEMI reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On RPAREN reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On OPEN reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On MODULE reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On MINUSGREATER reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On METHOD reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On LET reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On INHERIT reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On INCLUDE reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EXTERNAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EXCEPTION reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On EQUAL reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On END reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On DEF reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On CONSTRAINT reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On CLASS reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On AS reduce production core_type_tuple -> simple_core_type STAR simple_core_type
-- On AND reduce production core_type_tuple -> simple_core_type STAR simple_core_type

State 222:
## Known stack suffix:
## simple_core_type SHARP
## LR(1) items:
simple_core_type -> simple_core_type SHARP . class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 24
-- On mod_longident shift to state 25
-- On class_longident shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## simple_core_type SHARP class_longident
## LR(1) items:
simple_core_type -> simple_core_type SHARP class_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> simple_core_type SHARP class_longident

State 224:
## Known stack suffix:
## simple_core_type type_longident
## LR(1) items:
simple_core_type -> simple_core_type type_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_core_type -> simple_core_type type_longident

State 225:
## Known stack suffix:
## core_type_tuple
## LR(1) items:
core_type -> core_type_tuple . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type_tuple -> core_type_tuple . STAR simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On STAR shift to state 226
## Reductions:
-- On error reduce production core_type -> core_type_tuple
-- On WITH reduce production core_type -> core_type_tuple
-- On VIRTUAL reduce production core_type -> core_type_tuple
-- On VAL reduce production core_type -> core_type_tuple
-- On TYPE reduce production core_type -> core_type_tuple
-- On SEMISEMI reduce production core_type -> core_type_tuple
-- On RPAREN reduce production core_type -> core_type_tuple
-- On OPEN reduce production core_type -> core_type_tuple
-- On MODULE reduce production core_type -> core_type_tuple
-- On MINUSGREATER reduce production core_type -> core_type_tuple
-- On METHOD reduce production core_type -> core_type_tuple
-- On LET reduce production core_type -> core_type_tuple
-- On INHERIT reduce production core_type -> core_type_tuple
-- On INCLUDE reduce production core_type -> core_type_tuple
-- On EXTERNAL reduce production core_type -> core_type_tuple
-- On EXCEPTION reduce production core_type -> core_type_tuple
-- On EQUAL reduce production core_type -> core_type_tuple
-- On END reduce production core_type -> core_type_tuple
-- On DEF reduce production core_type -> core_type_tuple
-- On CONSTRAINT reduce production core_type -> core_type_tuple
-- On CLASS reduce production core_type -> core_type_tuple
-- On AS reduce production core_type -> core_type_tuple
-- On AND reduce production core_type -> core_type_tuple

State 226:
## Known stack suffix:
## core_type_tuple STAR
## LR(1) items:
core_type_tuple -> core_type_tuple STAR . simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 227
-- On mod_ext_longident shift to state 203
## Reductions:

State 227:
## Known stack suffix:
## core_type_tuple STAR simple_core_type
## LR(1) items:
core_type_tuple -> core_type_tuple STAR simple_core_type . [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 222
-- On LIDENT shift to state 201
-- On type_longident shift to state 224
-- On mod_ext_longident shift to state 203
## Reductions:
-- On error reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On WITH reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On VIRTUAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On VAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On TYPE reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On STAR reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On SEMISEMI reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On RPAREN reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On OPEN reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On MODULE reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On MINUSGREATER reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On METHOD reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On LET reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On INHERIT reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On INCLUDE reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EXTERNAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EXCEPTION reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On EQUAL reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On END reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On DEF reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On CONSTRAINT reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On CLASS reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On AS reduce production core_type_tuple -> core_type_tuple STAR simple_core_type
-- On AND reduce production core_type_tuple -> core_type_tuple STAR simple_core_type

State 228:
## Known stack suffix:
## LPAREN pattern COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error RPAREN MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ error RPAREN MINUSGREATER AS ]
simple_pattern -> LPAREN pattern COLON core_type . RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern COLON core_type . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 229
-- On RPAREN shift to state 230
-- On MINUSGREATER shift to state 231
-- On AS shift to state 233
## Reductions:

State 229:
## Known stack suffix:
## LPAREN pattern COLON core_type error
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type error

State 230:
## Known stack suffix:
## LPAREN pattern COLON core_type RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type RPAREN . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type RPAREN

State 231:
## Known stack suffix:
## core_type MINUSGREATER
## LR(1) items:
core_type -> core_type MINUSGREATER . core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## core_type MINUSGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type MINUSGREATER core_type . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 231
## Reductions:
-- On error reduce production core_type -> core_type MINUSGREATER core_type
-- On WITH reduce production core_type -> core_type MINUSGREATER core_type
-- On VIRTUAL reduce production core_type -> core_type MINUSGREATER core_type
-- On VAL reduce production core_type -> core_type MINUSGREATER core_type
-- On TYPE reduce production core_type -> core_type MINUSGREATER core_type
-- On SEMISEMI reduce production core_type -> core_type MINUSGREATER core_type
-- On RPAREN reduce production core_type -> core_type MINUSGREATER core_type
-- On OPEN reduce production core_type -> core_type MINUSGREATER core_type
-- On MODULE reduce production core_type -> core_type MINUSGREATER core_type
-- On METHOD reduce production core_type -> core_type MINUSGREATER core_type
-- On LET reduce production core_type -> core_type MINUSGREATER core_type
-- On INHERIT reduce production core_type -> core_type MINUSGREATER core_type
-- On INCLUDE reduce production core_type -> core_type MINUSGREATER core_type
-- On EXTERNAL reduce production core_type -> core_type MINUSGREATER core_type
-- On EXCEPTION reduce production core_type -> core_type MINUSGREATER core_type
-- On EQUAL reduce production core_type -> core_type MINUSGREATER core_type
-- On END reduce production core_type -> core_type MINUSGREATER core_type
-- On DEF reduce production core_type -> core_type MINUSGREATER core_type
-- On CONSTRAINT reduce production core_type -> core_type MINUSGREATER core_type
-- On CLASS reduce production core_type -> core_type MINUSGREATER core_type
-- On AS reduce production core_type -> core_type MINUSGREATER core_type
-- On AND reduce production core_type -> core_type MINUSGREATER core_type

State 233:
## Known stack suffix:
## core_type AS
## LR(1) items:
core_type -> core_type AS . type_parameter [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On QUOTE shift to state 234
-- On type_parameter shift to state 236
## Reductions:

State 234:
## Known stack suffix:
## QUOTE
## LR(1) items:
type_parameter -> QUOTE . ident [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 126
-- On LIDENT shift to state 127
-- On ident shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
type_parameter -> QUOTE ident . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter -> QUOTE ident

State 236:
## Known stack suffix:
## core_type AS type_parameter
## LR(1) items:
core_type -> core_type AS type_parameter . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_type -> core_type AS type_parameter

State 237:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 238
-- On RPAREN shift to state 239
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On COLON shift to state 240
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:

State 238:
## Known stack suffix:
## LPAREN pattern error
## LR(1) items:
simple_pattern -> LPAREN pattern error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern error

State 239:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern RPAREN . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern RPAREN

State 240:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
simple_pattern -> LPAREN pattern COLON . core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern COLON . core_type error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## LPAREN pattern COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error RPAREN MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ error RPAREN MINUSGREATER AS ]
simple_pattern -> LPAREN pattern COLON core_type . RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern COLON core_type . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 242
-- On RPAREN shift to state 243
-- On MINUSGREATER shift to state 231
-- On AS shift to state 233
## Reductions:

State 242:
## Known stack suffix:
## LPAREN pattern COLON core_type error
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type error

State 243:
## Known stack suffix:
## LPAREN pattern COLON core_type RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type RPAREN . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LPAREN pattern COLON core_type RPAREN

State 244:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 245
## Reductions:

State 245:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LPAREN operator RPAREN

State 246:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_ident -> LIDENT

State 247:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On RBRACKET shift to state 248
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_semi_list shift to state 249
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 116
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 248:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_longident -> LBRACKET RBRACKET . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> LBRACKET RBRACKET

State 249:
## Known stack suffix:
## LBRACKET pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI RBRACKET ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On SEMI shift to state 111
-- On opt_semi shift to state 250
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACKET reduce production opt_semi ->

State 250:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi . RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list opt_semi . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 251
-- On RBRACKET shift to state 252
## Reductions:

State 251:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi error

State 252:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi RBRACKET
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET

State 253:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On lbl_pattern_list shift to state 254
-- On label_longident shift to state 107
## Reductions:

State 254:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . SEMI label_longident EQUAL pattern [ error SEMI RBRACE ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi RBRACE [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On SEMI shift to state 59
-- On opt_semi shift to state 255
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACE reduce production opt_semi ->

State 255:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi . RBRACE [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list opt_semi . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 256
-- On RBRACE shift to state 257
## Reductions:

State 256:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi error

State 257:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE

State 258:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> INT

State 259:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> FLOAT

State 260:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_longident -> FALSE . [ WITH WHILE WHEN UNDERSCORE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_longident -> FALSE

State 261:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On DOTDOT shift to state 262
## Reductions:
-- On WHEN reduce production constant -> CHAR
-- On UNDERSCORE reduce production constant -> CHAR
-- On UIDENT reduce production constant -> CHAR
-- On TRUE reduce production constant -> CHAR
-- On SUBTRACTIVE reduce production constant -> CHAR
-- On STRING reduce production constant -> CHAR
-- On MINUSGREATER reduce production constant -> CHAR
-- On LPAREN reduce production constant -> CHAR
-- On LIDENT reduce production constant -> CHAR
-- On LBRACKETLESS reduce production constant -> CHAR
-- On LBRACKET reduce production constant -> CHAR
-- On LBRACE reduce production constant -> CHAR
-- On INT reduce production constant -> CHAR
-- On GREATERGREATER reduce production constant -> CHAR
-- On GREATER reduce production constant -> CHAR
-- On FLOAT reduce production constant -> CHAR
-- On FALSE reduce production constant -> CHAR
-- On EQUAL reduce production constant -> CHAR
-- On COMMA reduce production constant -> CHAR
-- On COLONGREATER reduce production constant -> CHAR
-- On COLONEQUAL reduce production constant -> CHAR
-- On COLONCOLON reduce production constant -> CHAR
-- On COLON reduce production constant -> CHAR
-- On CHAR reduce production constant -> CHAR
-- On BAR reduce production constant -> CHAR
-- On AS reduce production constant -> CHAR

State 262:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On CHAR shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> CHAR DOTDOT CHAR

State 264:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> val_ident

State 265:
## Known stack suffix:
## simple_pattern
## LR(1) items:
opt_pat -> simple_pattern . [ MINUSGREATER LBRACKETLESS BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_pat -> simple_pattern

State 266:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> signed_constant

State 267:
## Known stack suffix:
## PARSER opt_pat
## LR(1) items:
expr -> PARSER opt_pat . opt_bar parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 268
-- On opt_bar shift to state 269
## Reductions:
-- On LBRACKETLESS reduce production opt_bar ->

State 268:
## Known stack suffix:
## BAR
## LR(1) items:
opt_bar -> BAR . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE COLONCOLON CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production opt_bar -> BAR

State 269:
## Known stack suffix:
## PARSER opt_pat opt_bar
## LR(1) items:
expr -> PARSER opt_pat opt_bar . parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 270
-- On parser_cases shift to state 933
-- On parser_case shift to state 918
## Reductions:

State 270:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
parser_case -> LBRACKETLESS . stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . stream_pattern opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On QUOTE shift to state 271
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On GREATERRBRACKET shift to state 922
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On stream_pattern_component shift to state 892
-- On stream_pattern shift to state 926
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 900
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 271:
## Known stack suffix:
## QUOTE
## LR(1) items:
stream_pattern_component -> QUOTE . pattern [ error SEMI QUESTION GREATERRBRACKET ]
stream_pattern_component -> QUOTE . pattern WHEN expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 272
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 272:
## Known stack suffix:
## QUOTE pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
stream_pattern_component -> QUOTE pattern . [ error SEMI QUESTION GREATERRBRACKET ]
stream_pattern_component -> QUOTE pattern . WHEN expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On WHEN shift to state 273
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:
-- On error reduce production stream_pattern_component -> QUOTE pattern
-- On SEMI reduce production stream_pattern_component -> QUOTE pattern
-- On QUESTION reduce production stream_pattern_component -> QUOTE pattern
-- On GREATERRBRACKET reduce production stream_pattern_component -> QUOTE pattern

State 273:
## Known stack suffix:
## QUOTE pattern WHEN
## LR(1) items:
stream_pattern_component -> QUOTE pattern WHEN . expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 921
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 274:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . seq_expr WITH opt_bar match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> MATCH . seq_expr WITH PARSER opt_pat opt_bar parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 910
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 275:
## Known stack suffix:
## PARSER
## LR(1) items:
expr -> PARSER . opt_pat opt_bar parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 276
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On LBRACKETLESS reduce production opt_pat ->
-- On BAR reduce production opt_pat ->

State 276:
## Known stack suffix:
## PARSER opt_pat
## LR(1) items:
expr -> PARSER opt_pat . opt_bar parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 268
-- On opt_bar shift to state 277
## Reductions:
-- On LBRACKETLESS reduce production opt_bar ->

State 277:
## Known stack suffix:
## PARSER opt_pat opt_bar
## LR(1) items:
expr -> PARSER opt_pat opt_bar . parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 278
-- On parser_cases shift to state 909
-- On parser_case shift to state 888
## Reductions:

State 278:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
parser_case -> LBRACKETLESS . stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . stream_pattern opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On QUOTE shift to state 271
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On GREATERRBRACKET shift to state 279
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On stream_pattern_component shift to state 892
-- On stream_pattern shift to state 896
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 900
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:

State 279:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 280
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On MINUSGREATER reduce production opt_pat ->

State 280:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 891
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 282:
## Known stack suffix:
## MATCH
## LR(1) items:
expr -> MATCH . seq_expr WITH opt_bar match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> MATCH . seq_expr WITH PARSER opt_pat opt_bar parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 880
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 283:
## Known stack suffix:
## LOC
## LR(1) items:
simple_expr -> LOC . location END [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SEMISEMI shift to state 284
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 286
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 858
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 860
-- On mod_longident shift to state 378
-- On location_tail shift to state 865
-- On location_item shift to state 862
-- On location shift to state 878
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On END reduce production location_tail ->

State 284:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
location_tail -> SEMISEMI . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
location_tail -> SEMISEMI . location_item [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 286
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 858
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 860
-- On mod_longident shift to state 378
-- On location_item shift to state 877
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On SEMISEMI reduce production location_tail -> SEMISEMI
-- On END reduce production location_tail -> SEMISEMI

State 285:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ LESSMINUS ]
val_ident -> LIDENT . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH reduce production val_ident -> LIDENT
-- On WHILE reduce production val_ident -> LIDENT
-- On UIDENT reduce production val_ident -> LIDENT
-- On TYPE reduce production val_ident -> LIDENT
-- On TRY reduce production val_ident -> LIDENT
-- On TRUE reduce production val_ident -> LIDENT
-- On TO reduce production val_ident -> LIDENT
-- On THEN reduce production val_ident -> LIDENT
-- On SUBTRACTIVE reduce production val_ident -> LIDENT
-- On STRING reduce production val_ident -> LIDENT
-- On STAR reduce production val_ident -> LIDENT
-- On SHARP reduce production val_ident -> LIDENT
-- On SEMISEMI reduce production val_ident -> LIDENT
-- On SEMI reduce production val_ident -> LIDENT
-- On PREFIXOP reduce production val_ident -> LIDENT
-- On PARSER reduce production val_ident -> LIDENT
-- On OR reduce production val_ident -> LIDENT
-- On OPEN reduce production val_ident -> LIDENT
-- On NEW reduce production val_ident -> LIDENT
-- On MODULE reduce production val_ident -> LIDENT
-- On MINUSGREATER reduce production val_ident -> LIDENT
-- On MATCH reduce production val_ident -> LIDENT
-- On LPAREN reduce production val_ident -> LIDENT
-- On LOC reduce production val_ident -> LIDENT
-- On LIDENT reduce production val_ident -> LIDENT
-- On LET reduce production val_ident -> LIDENT
-- On LESSMINUS reduce production label -> LIDENT
-- On LESSLESSGREATERGREATER reduce production val_ident -> LIDENT
-- On LESSLESS reduce production val_ident -> LIDENT
-- On LESSGREATER reduce production val_ident -> LIDENT
-- On LESS reduce production val_ident -> LIDENT
-- On LBRACKETLESS reduce production val_ident -> LIDENT
-- On LBRACKETBAR reduce production val_ident -> LIDENT
-- On LBRACKET reduce production val_ident -> LIDENT
-- On LBRACELESS reduce production val_ident -> LIDENT
-- On LBRACEBAR reduce production val_ident -> LIDENT
-- On LBRACE reduce production val_ident -> LIDENT
-- On LAZY reduce production val_ident -> LIDENT
-- On INT reduce production val_ident -> LIDENT
-- On INFIXOP4 reduce production val_ident -> LIDENT
-- On INFIXOP3 reduce production val_ident -> LIDENT
-- On INFIXOP2 reduce production val_ident -> LIDENT
-- On INFIXOP1 reduce production val_ident -> LIDENT
-- On INFIXOP0 reduce production val_ident -> LIDENT
-- On IN reduce production val_ident -> LIDENT
-- On IF reduce production val_ident -> LIDENT
-- On GREATER reduce production val_ident -> LIDENT
-- On FUNCTION reduce production val_ident -> LIDENT
-- On FUN reduce production val_ident -> LIDENT
-- On FOR reduce production val_ident -> LIDENT
-- On FLOAT reduce production val_ident -> LIDENT
-- On FALSE reduce production val_ident -> LIDENT
-- On EXTERNAL reduce production val_ident -> LIDENT
-- On EXCEPTION reduce production val_ident -> LIDENT
-- On EQUAL reduce production val_ident -> LIDENT
-- On EOF reduce production val_ident -> LIDENT
-- On END reduce production val_ident -> LIDENT
-- On ELSE reduce production val_ident -> LIDENT
-- On DOWNTO reduce production val_ident -> LIDENT
-- On DOT reduce production val_ident -> LIDENT
-- On DO reduce production val_ident -> LIDENT
-- On DEF reduce production val_ident -> LIDENT
-- On COMMA reduce production val_ident -> LIDENT
-- On COLONEQUAL reduce production val_ident -> LIDENT
-- On COLONCOLON reduce production val_ident -> LIDENT
-- On CLASS reduce production val_ident -> LIDENT
-- On CHAR reduce production val_ident -> LIDENT
-- On BEGIN reduce production val_ident -> LIDENT
-- On BARBAR reduce production val_ident -> LIDENT
-- On BAR reduce production val_ident -> LIDENT
-- On ASSERT reduce production val_ident -> LIDENT
-- On AND reduce production val_ident -> LIDENT
-- On AMPERSAND reduce production val_ident -> LIDENT
-- On AMPERAMPER reduce production val_ident -> LIDENT

State 286:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings IN error [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings error [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
location_item -> LET . rec_flag let_bindings location_tail [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 288
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 287:
## Known stack suffix:
## REC
## LR(1) items:
rec_flag -> REC . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rec_flag -> REC

State 288:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings IN error [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings error [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
location_item -> LET rec_flag . let_bindings location_tail [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 289
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 308
-- On mod_longident shift to state 303
-- On let_bindings shift to state 875
-- On let_binding shift to state 801
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 289:
## Known stack suffix:
## val_ident
## LR(1) items:
let_binding -> val_ident . fun_binding [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
simple_pattern -> val_ident . [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 290
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On type_constraint shift to state 869
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On fun_binding shift to state 874
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On COMMA reduce production simple_pattern -> val_ident
-- On COLONEQUAL reduce production simple_pattern -> val_ident
-- On COLONCOLON reduce production simple_pattern -> val_ident
-- On BAR reduce production simple_pattern -> val_ident
-- On AS reduce production simple_pattern -> val_ident

State 290:
## Known stack suffix:
## EQUAL
## LR(1) items:
fun_binding -> EQUAL . seq_expr [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 868
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 291:
## Known stack suffix:
## LOC
## LR(1) items:
simple_expr -> LOC . location END [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SEMISEMI shift to state 284
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 286
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 858
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 860
-- On mod_longident shift to state 378
-- On location_tail shift to state 865
-- On location_item shift to state 862
-- On location shift to state 866
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On END reduce production location_tail ->

State 292:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
simple_expr -> LBRACKETLESS . stream_expr opt_semi GREATERRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . stream_expr opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . GREATERRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On QUOTE shift to state 293
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On GREATERRBRACKET shift to state 853
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On stream_expr_component shift to state 836
-- On stream_expr shift to state 854
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 840
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 293:
## Known stack suffix:
## QUOTE
## LR(1) items:
stream_expr_component -> QUOTE . expr [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 852
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 294:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ LESSMINUS ]
val_ident -> LIDENT . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error reduce production val_ident -> LIDENT
-- On WITH reduce production val_ident -> LIDENT
-- On WHILE reduce production val_ident -> LIDENT
-- On VIRTUAL reduce production val_ident -> LIDENT
-- On VAL reduce production val_ident -> LIDENT
-- On UIDENT reduce production val_ident -> LIDENT
-- On TYPE reduce production val_ident -> LIDENT
-- On TRY reduce production val_ident -> LIDENT
-- On TRUE reduce production val_ident -> LIDENT
-- On SUBTRACTIVE reduce production val_ident -> LIDENT
-- On STRING reduce production val_ident -> LIDENT
-- On STAR reduce production val_ident -> LIDENT
-- On SHARP reduce production val_ident -> LIDENT
-- On SEMISEMI reduce production val_ident -> LIDENT
-- On SEMI reduce production val_ident -> LIDENT
-- On RPAREN reduce production val_ident -> LIDENT
-- On RBRACKET reduce production val_ident -> LIDENT
-- On RBRACE reduce production val_ident -> LIDENT
-- On QUESTION reduce production val_ident -> LIDENT
-- On PREFIXOP reduce production val_ident -> LIDENT
-- On PARSER reduce production val_ident -> LIDENT
-- On OR reduce production val_ident -> LIDENT
-- On OPEN reduce production val_ident -> LIDENT
-- On NEW reduce production val_ident -> LIDENT
-- On MODULE reduce production val_ident -> LIDENT
-- On METHOD reduce production val_ident -> LIDENT
-- On MATCH reduce production val_ident -> LIDENT
-- On LPAREN reduce production val_ident -> LIDENT
-- On LOC reduce production val_ident -> LIDENT
-- On LIDENT reduce production val_ident -> LIDENT
-- On LET reduce production val_ident -> LIDENT
-- On LESSMINUS reduce production label -> LIDENT
-- On LESSLESSGREATERGREATER reduce production val_ident -> LIDENT
-- On LESSLESS reduce production val_ident -> LIDENT
-- On LESSGREATER reduce production val_ident -> LIDENT
-- On LESS reduce production val_ident -> LIDENT
-- On LBRACKETLESS reduce production val_ident -> LIDENT
-- On LBRACKETBAR reduce production val_ident -> LIDENT
-- On LBRACKET reduce production val_ident -> LIDENT
-- On LBRACELESS reduce production val_ident -> LIDENT
-- On LBRACEBAR reduce production val_ident -> LIDENT
-- On LBRACE reduce production val_ident -> LIDENT
-- On LAZY reduce production val_ident -> LIDENT
-- On INT reduce production val_ident -> LIDENT
-- On INHERIT reduce production val_ident -> LIDENT
-- On INFIXOP4 reduce production val_ident -> LIDENT
-- On INFIXOP3 reduce production val_ident -> LIDENT
-- On INFIXOP2 reduce production val_ident -> LIDENT
-- On INFIXOP1 reduce production val_ident -> LIDENT
-- On INFIXOP0 reduce production val_ident -> LIDENT
-- On IN reduce production val_ident -> LIDENT
-- On IF reduce production val_ident -> LIDENT
-- On GREATERRBRACKET reduce production val_ident -> LIDENT
-- On GREATERRBRACE reduce production val_ident -> LIDENT
-- On GREATERGREATER reduce production val_ident -> LIDENT
-- On GREATER reduce production val_ident -> LIDENT
-- On FUNCTION reduce production val_ident -> LIDENT
-- On FUN reduce production val_ident -> LIDENT
-- On FOR reduce production val_ident -> LIDENT
-- On FLOAT reduce production val_ident -> LIDENT
-- On FALSE reduce production val_ident -> LIDENT
-- On EXTERNAL reduce production val_ident -> LIDENT
-- On EXCEPTION reduce production val_ident -> LIDENT
-- On EQUAL reduce production val_ident -> LIDENT
-- On EOF reduce production val_ident -> LIDENT
-- On END reduce production val_ident -> LIDENT
-- On ELSE reduce production val_ident -> LIDENT
-- On DOT reduce production val_ident -> LIDENT
-- On DONE reduce production val_ident -> LIDENT
-- On DEF reduce production val_ident -> LIDENT
-- On COMMA reduce production val_ident -> LIDENT
-- On COLONGREATER reduce production val_ident -> LIDENT
-- On COLONEQUAL reduce production val_ident -> LIDENT
-- On COLONCOLON reduce production val_ident -> LIDENT
-- On COLON reduce production val_ident -> LIDENT
-- On CLASS reduce production val_ident -> LIDENT
-- On CHAR reduce production val_ident -> LIDENT
-- On BEGIN reduce production val_ident -> LIDENT
-- On BARRBRACKET reduce production val_ident -> LIDENT
-- On BARBAR reduce production val_ident -> LIDENT
-- On BAR reduce production val_ident -> LIDENT
-- On ASSERT reduce production val_ident -> LIDENT
-- On AND reduce production val_ident -> LIDENT
-- On AMPERSAND reduce production val_ident -> LIDENT
-- On AMPERAMPER reduce production val_ident -> LIDENT

State 295:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings IN error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 296
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 296:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings IN error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 289
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 308
-- On mod_longident shift to state 303
-- On let_bindings shift to state 847
-- On let_binding shift to state 801
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 297:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> simple_pattern

State 298:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
pattern -> pattern_comma_list . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern_comma_list . COMMA pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 299
## Reductions:
-- On WHEN reduce production pattern -> pattern_comma_list
-- On MINUSGREATER reduce production pattern -> pattern_comma_list
-- On GREATERGREATER reduce production pattern -> pattern_comma_list
-- On GREATER reduce production pattern -> pattern_comma_list
-- On EQUAL reduce production pattern -> pattern_comma_list
-- On COLONEQUAL reduce production pattern -> pattern_comma_list
-- On COLONCOLON reduce production pattern -> pattern_comma_list
-- On BAR reduce production pattern -> pattern_comma_list
-- On AS reduce production pattern -> pattern_comma_list

State 299:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA . pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 300
-- On mod_longident shift to state 303
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 300:
## Known stack suffix:
## pattern_comma_list COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern_comma_list COMMA pattern . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 301
## Reductions:
-- On WHEN reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On MINUSGREATER reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On GREATERGREATER reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On GREATER reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On EQUAL reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On COMMA reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On COLONEQUAL reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On BAR reduce production pattern_comma_list -> pattern_comma_list COMMA pattern
-- On AS reduce production pattern_comma_list -> pattern_comma_list COMMA pattern

State 301:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 302
-- On mod_longident shift to state 303
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 302:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern COLONCOLON pattern . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 301
## Reductions:
-- On WHEN reduce production pattern -> pattern COLONCOLON pattern
-- On MINUSGREATER reduce production pattern -> pattern COLONCOLON pattern
-- On GREATERGREATER reduce production pattern -> pattern COLONCOLON pattern
-- On GREATER reduce production pattern -> pattern COLONCOLON pattern
-- On EQUAL reduce production pattern -> pattern COLONCOLON pattern
-- On COMMA reduce production pattern -> pattern COLONCOLON pattern
-- On COLONEQUAL reduce production pattern -> pattern COLONCOLON pattern
-- On BAR reduce production pattern -> pattern COLONCOLON pattern
-- On AS reduce production pattern -> pattern COLONCOLON pattern

State 303:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
mod_longident -> mod_longident . DOT UIDENT [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL DOT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On DOT shift to state 304
## Reductions:
-- On WHEN reduce production constr_longident -> mod_longident
-- On UNDERSCORE reduce production constr_longident -> mod_longident
-- On UIDENT reduce production constr_longident -> mod_longident
-- On TRUE reduce production constr_longident -> mod_longident
-- On SUBTRACTIVE reduce production constr_longident -> mod_longident
-- On STRING reduce production constr_longident -> mod_longident
-- On MINUSGREATER reduce production constr_longident -> mod_longident
-- On LPAREN reduce production constr_longident -> mod_longident
-- On LIDENT reduce production constr_longident -> mod_longident
-- On LBRACKETLESS reduce production constr_longident -> mod_longident
-- On LBRACKET reduce production constr_longident -> mod_longident
-- On LBRACE reduce production constr_longident -> mod_longident
-- On INT reduce production constr_longident -> mod_longident
-- On GREATERGREATER reduce production constr_longident -> mod_longident
-- On GREATER reduce production constr_longident -> mod_longident
-- On FLOAT reduce production constr_longident -> mod_longident
-- On FALSE reduce production constr_longident -> mod_longident
-- On EQUAL reduce production constr_longident -> mod_longident
-- On COMMA reduce production constr_longident -> mod_longident
-- On COLONGREATER reduce production constr_longident -> mod_longident
-- On COLONEQUAL reduce production constr_longident -> mod_longident
-- On COLONCOLON reduce production constr_longident -> mod_longident
-- On COLON reduce production constr_longident -> mod_longident
-- On CHAR reduce production constr_longident -> mod_longident
-- On BAR reduce production constr_longident -> mod_longident
-- On AS reduce production constr_longident -> mod_longident

State 304:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ WHEN VAL UNDERSCORE UIDENT TYPE TRUE SUBTRACTIVE STRING SHARP SEMISEMI OPEN MODULE MINUSGREATER LPAREN LIDENT LET LBRACKETLESS LBRACKET LBRACE INT INCLUDE GREATERGREATER GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF DOT DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BAR AS ]
## Transitions:
-- On UIDENT shift to state 13
## Reductions:

State 305:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
simple_pattern -> constr_longident . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 306
-- On mod_longident shift to state 303
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:
-- On WHEN reduce production simple_pattern -> constr_longident
-- On MINUSGREATER reduce production simple_pattern -> constr_longident
-- On GREATERGREATER reduce production simple_pattern -> constr_longident
-- On GREATER reduce production simple_pattern -> constr_longident
-- On EQUAL reduce production simple_pattern -> constr_longident
-- On COMMA reduce production simple_pattern -> constr_longident
-- On COLONEQUAL reduce production simple_pattern -> constr_longident
-- On COLONCOLON reduce production simple_pattern -> constr_longident
-- On BAR reduce production simple_pattern -> constr_longident
-- On AS reduce production simple_pattern -> constr_longident

State 306:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> constr_longident pattern . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> constr_longident pattern

State 307:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT GREATERGREATER GREATER FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signed_constant -> constant

State 308:
## Known stack suffix:
## pattern
## LR(1) items:
let_binding -> pattern . EQUAL seq_expr [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
let_binding -> pattern . COLONEQUAL seq_expr [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
pattern -> pattern . AS val_ident [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On EQUAL shift to state 309
-- On COMMA shift to state 455
-- On COLONEQUAL shift to state 845
-- On COLONCOLON shift to state 301
-- On BAR shift to state 457
-- On AS shift to state 459
## Reductions:

State 309:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
let_binding -> pattern EQUAL . seq_expr [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 844
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 310:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
simple_expr -> LBRACKETLESS . stream_expr opt_semi GREATERRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . stream_expr opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . GREATERRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On QUOTE shift to state 293
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On GREATERRBRACKET shift to state 835
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On stream_expr_component shift to state 836
-- On stream_expr shift to state 837
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 840
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 311:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi BARRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . BARRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On BARRBRACKET shift to state 830
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_semi_list shift to state 831
-- On expr_comma_list shift to state 499
-- On expr shift to state 779
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 312:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On RBRACKET shift to state 52
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_semi_list shift to state 826
-- On expr_comma_list shift to state 499
-- On expr shift to state 779
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 313:
## Known stack suffix:
## LBRACELESS
## LR(1) items:
simple_expr -> LBRACELESS . label_expr_list opt_semi GREATERRBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . label_expr_list opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . GREATERRBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 141
-- On GREATERRBRACE shift to state 314
-- On label_expr_list shift to state 315
-- On label shift to state 429
## Reductions:

State 314:
## Known stack suffix:
## LBRACELESS GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS GREATERRBRACE . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS GREATERRBRACE

State 315:
## Known stack suffix:
## LBRACELESS label_expr_list
## LR(1) items:
label_expr_list -> label_expr_list . SEMI label EQUAL expr [ error SEMI GREATERRBRACE ]
simple_expr -> LBRACELESS label_expr_list . opt_semi GREATERRBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list . opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 316
-- On opt_semi shift to state 823
## Reductions:
-- On error reduce production opt_semi ->
-- On GREATERRBRACE reduce production opt_semi ->

State 316:
## Known stack suffix:
## label_expr_list SEMI
## LR(1) items:
label_expr_list -> label_expr_list SEMI . label EQUAL expr [ error SEMI GREATERRBRACE ]
opt_semi -> SEMI . [ error GREATERRBRACE ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 317
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On GREATERRBRACE reduce production opt_semi -> SEMI

State 317:
## Known stack suffix:
## label_expr_list SEMI label
## LR(1) items:
label_expr_list -> label_expr_list SEMI label . EQUAL expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On EQUAL shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## label_expr_list SEMI label EQUAL
## LR(1) items:
label_expr_list -> label_expr_list SEMI label EQUAL . expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 822
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 319:
## Known stack suffix:
## LBRACEBAR
## LR(1) items:
expr -> LBRACEBAR . process BARRBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 820
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On BARRBRACE reduce production process ->

State 320:
## Known stack suffix:
## REPLY
## LR(1) items:
process0 -> REPLY . static_expr to_ident [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 395
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 321:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LPAREN . static_expr type_constraint RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LPAREN . static_expr RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LPAREN . static_comma_list RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
val_ident -> LPAREN . operator RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 89
-- On STRING shift to state 7
-- On STAR shift to state 41
-- On RPAREN shift to state 42
-- On PREFIXOP shift to state 43
-- On OR shift to state 44
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On INT shift to state 258
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On GREATER shift to state 95
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 96
-- On COLONEQUAL shift to state 97
-- On CHAR shift to state 357
-- On BARBAR shift to state 98
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 389
-- On static_comma_list shift to state 393
-- On operator shift to state 244
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 322:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
static_expr -> LBRACKETBAR . static_semi_list opt_semi BARRBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKETBAR . static_semi_list opt_semi error [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKETBAR . BARRBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BARRBRACKET shift to state 384
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_semi_list shift to state 385
-- On static_expr shift to state 347
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 323:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LPAREN . static_expr type_constraint RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LPAREN . static_expr RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LPAREN . static_comma_list RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
val_ident -> LPAREN . operator RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 89
-- On STRING shift to state 7
-- On STAR shift to state 41
-- On RPAREN shift to state 46
-- On PREFIXOP shift to state 43
-- On OR shift to state 44
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On INT shift to state 258
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On GREATER shift to state 95
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 96
-- On COLONEQUAL shift to state 97
-- On CHAR shift to state 357
-- On BARBAR shift to state 98
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 360
-- On static_comma_list shift to state 374
-- On operator shift to state 101
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 324:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKET . static_semi_list opt_semi RBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKET . static_semi_list opt_semi error [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On RBRACKET shift to state 248
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_semi_list shift to state 353
-- On static_expr shift to state 347
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 325:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
static_expr -> LBRACKETBAR . static_semi_list opt_semi BARRBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKETBAR . static_semi_list opt_semi error [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKETBAR . BARRBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BARRBRACKET shift to state 348
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_semi_list shift to state 349
-- On static_expr shift to state 347
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 326:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKET . static_semi_list opt_semi RBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKET . static_semi_list opt_semi error [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On RBRACKET shift to state 52
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_semi_list shift to state 330
-- On static_expr shift to state 347
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 327:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHAR

State 328:
## Known stack suffix:
## val_longident
## LR(1) items:
static_expr -> val_longident . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> val_longident

State 329:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> val_ident

State 330:
## Known stack suffix:
## LBRACKET static_semi_list
## LR(1) items:
static_expr -> LBRACKET static_semi_list . opt_semi RBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKET static_semi_list . opt_semi error [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_semi_list -> static_semi_list . SEMI static_expr [ error SEMI RBRACKET ]
## Transitions:
-- On SEMI shift to state 331
-- On opt_semi shift to state 344
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACKET reduce production opt_semi ->

State 331:
## Known stack suffix:
## static_semi_list SEMI
## LR(1) items:
opt_semi -> SEMI . [ error RBRACKET BARRBRACKET ]
static_semi_list -> static_semi_list SEMI . static_expr [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_expr shift to state 332
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On RBRACKET reduce production opt_semi -> SEMI
-- On BARRBRACKET reduce production opt_semi -> SEMI

State 332:
## Known stack suffix:
## static_semi_list SEMI static_expr
## LR(1) items:
static_expr -> static_expr . DOT label_longident [ error SEMI RBRACKET DOT BARRBRACKET ]
static_semi_list -> static_semi_list SEMI static_expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On DOT shift to state 333
## Reductions:
-- On error reduce production static_semi_list -> static_semi_list SEMI static_expr
-- On SEMI reduce production static_semi_list -> static_semi_list SEMI static_expr
-- On RBRACKET reduce production static_semi_list -> static_semi_list SEMI static_expr
-- On BARRBRACKET reduce production static_semi_list -> static_semi_list SEMI static_expr

State 333:
## Known stack suffix:
## static_expr DOT
## LR(1) items:
static_expr -> static_expr DOT . label_longident [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 334
-- On mod_longident shift to state 335
-- On label_longident shift to state 338
## Reductions:

State 334:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> LIDENT

State 335:
## Known stack suffix:
## mod_longident
## LR(1) items:
label_longident -> mod_longident . DOT LIDENT [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
label_longident -> mod_longident DOT . LIDENT [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 13
-- On LIDENT shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
label_longident -> mod_longident DOT LIDENT . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSMINUS LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_longident -> mod_longident DOT LIDENT

State 338:
## Known stack suffix:
## static_expr DOT label_longident
## LR(1) items:
static_expr -> static_expr DOT label_longident . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> static_expr DOT label_longident

State 339:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident . DOT val_ident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DOT shift to state 340
## Reductions:
-- On error reduce production constr_longident -> mod_longident
-- On WITH reduce production constr_longident -> mod_longident
-- On WHILE reduce production constr_longident -> mod_longident
-- On VIRTUAL reduce production constr_longident -> mod_longident
-- On VAL reduce production constr_longident -> mod_longident
-- On UIDENT reduce production constr_longident -> mod_longident
-- On TYPE reduce production constr_longident -> mod_longident
-- On TRY reduce production constr_longident -> mod_longident
-- On TRUE reduce production constr_longident -> mod_longident
-- On TO reduce production constr_longident -> mod_longident
-- On SUBTRACTIVE reduce production constr_longident -> mod_longident
-- On STRING reduce production constr_longident -> mod_longident
-- On STAR reduce production constr_longident -> mod_longident
-- On SHARP reduce production constr_longident -> mod_longident
-- On SEMISEMI reduce production constr_longident -> mod_longident
-- On SEMI reduce production constr_longident -> mod_longident
-- On RPAREN reduce production constr_longident -> mod_longident
-- On RBRACKET reduce production constr_longident -> mod_longident
-- On RBRACE reduce production constr_longident -> mod_longident
-- On QUESTION reduce production constr_longident -> mod_longident
-- On PREFIXOP reduce production constr_longident -> mod_longident
-- On PARSER reduce production constr_longident -> mod_longident
-- On OR reduce production constr_longident -> mod_longident
-- On OPEN reduce production constr_longident -> mod_longident
-- On NEW reduce production constr_longident -> mod_longident
-- On MODULE reduce production constr_longident -> mod_longident
-- On METHOD reduce production constr_longident -> mod_longident
-- On MATCH reduce production constr_longident -> mod_longident
-- On LPAREN reduce production constr_longident -> mod_longident
-- On LOC reduce production constr_longident -> mod_longident
-- On LIDENT reduce production constr_longident -> mod_longident
-- On LET reduce production constr_longident -> mod_longident
-- On LESSLESSGREATERGREATER reduce production constr_longident -> mod_longident
-- On LESSLESS reduce production constr_longident -> mod_longident
-- On LESSGREATER reduce production constr_longident -> mod_longident
-- On LESS reduce production constr_longident -> mod_longident
-- On LBRACKETLESS reduce production constr_longident -> mod_longident
-- On LBRACKETBAR reduce production constr_longident -> mod_longident
-- On LBRACKET reduce production constr_longident -> mod_longident
-- On LBRACELESS reduce production constr_longident -> mod_longident
-- On LBRACEBAR reduce production constr_longident -> mod_longident
-- On LBRACE reduce production constr_longident -> mod_longident
-- On LAZY reduce production constr_longident -> mod_longident
-- On INT reduce production constr_longident -> mod_longident
-- On INHERIT reduce production constr_longident -> mod_longident
-- On INFIXOP4 reduce production constr_longident -> mod_longident
-- On INFIXOP3 reduce production constr_longident -> mod_longident
-- On INFIXOP2 reduce production constr_longident -> mod_longident
-- On INFIXOP1 reduce production constr_longident -> mod_longident
-- On INFIXOP0 reduce production constr_longident -> mod_longident
-- On IN reduce production constr_longident -> mod_longident
-- On IF reduce production constr_longident -> mod_longident
-- On GREATERRBRACKET reduce production constr_longident -> mod_longident
-- On GREATERRBRACE reduce production constr_longident -> mod_longident
-- On GREATERGREATER reduce production constr_longident -> mod_longident
-- On GREATER reduce production constr_longident -> mod_longident
-- On FUNCTION reduce production constr_longident -> mod_longident
-- On FUN reduce production constr_longident -> mod_longident
-- On FOR reduce production constr_longident -> mod_longident
-- On FLOAT reduce production constr_longident -> mod_longident
-- On FALSE reduce production constr_longident -> mod_longident
-- On EXTERNAL reduce production constr_longident -> mod_longident
-- On EXCEPTION reduce production constr_longident -> mod_longident
-- On EQUAL reduce production constr_longident -> mod_longident
-- On EOF reduce production constr_longident -> mod_longident
-- On END reduce production constr_longident -> mod_longident
-- On ELSE reduce production constr_longident -> mod_longident
-- On DONE reduce production constr_longident -> mod_longident
-- On DEF reduce production constr_longident -> mod_longident
-- On COMMA reduce production constr_longident -> mod_longident
-- On COLONGREATER reduce production constr_longident -> mod_longident
-- On COLONEQUAL reduce production constr_longident -> mod_longident
-- On COLONCOLON reduce production constr_longident -> mod_longident
-- On COLON reduce production constr_longident -> mod_longident
-- On CLASS reduce production constr_longident -> mod_longident
-- On CHAR reduce production constr_longident -> mod_longident
-- On BEGIN reduce production constr_longident -> mod_longident
-- On BARRBRACKET reduce production constr_longident -> mod_longident
-- On BARBAR reduce production constr_longident -> mod_longident
-- On BAR reduce production constr_longident -> mod_longident
-- On ASSERT reduce production constr_longident -> mod_longident
-- On AS reduce production constr_longident -> mod_longident
-- On AND reduce production constr_longident -> mod_longident
-- On AMPERSAND reduce production constr_longident -> mod_longident
-- On AMPERAMPER reduce production constr_longident -> mod_longident

State 340:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident DOT . val_ident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 78
-- On LPAREN shift to state 88
-- On LIDENT shift to state 47
-- On val_ident shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## mod_longident DOT val_ident
## LR(1) items:
val_longident -> mod_longident DOT val_ident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> mod_longident DOT val_ident

State 342:
## Known stack suffix:
## constr_longident
## LR(1) items:
static_expr -> constr_longident . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> constr_longident

State 343:
## Known stack suffix:
## constant
## LR(1) items:
static_expr -> constant . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> constant

State 344:
## Known stack suffix:
## LBRACKET static_semi_list opt_semi
## LR(1) items:
static_expr -> LBRACKET static_semi_list opt_semi . RBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKET static_semi_list opt_semi . error [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On error shift to state 345
-- On RBRACKET shift to state 346
## Reductions:

State 345:
## Known stack suffix:
## LBRACKET static_semi_list opt_semi error
## LR(1) items:
static_expr -> LBRACKET static_semi_list opt_semi error . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKET static_semi_list opt_semi error

State 346:
## Known stack suffix:
## LBRACKET static_semi_list opt_semi RBRACKET
## LR(1) items:
static_expr -> LBRACKET static_semi_list opt_semi RBRACKET . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKET static_semi_list opt_semi RBRACKET

State 347:
## Known stack suffix:
## static_expr
## LR(1) items:
static_expr -> static_expr . DOT label_longident [ error SEMI RBRACKET DOT BARRBRACKET ]
static_semi_list -> static_expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On DOT shift to state 333
## Reductions:
-- On error reduce production static_semi_list -> static_expr
-- On SEMI reduce production static_semi_list -> static_expr
-- On RBRACKET reduce production static_semi_list -> static_expr
-- On BARRBRACKET reduce production static_semi_list -> static_expr

State 348:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
static_expr -> LBRACKETBAR BARRBRACKET . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKETBAR BARRBRACKET

State 349:
## Known stack suffix:
## LBRACKETBAR static_semi_list
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list . opt_semi BARRBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKETBAR static_semi_list . opt_semi error [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_semi_list -> static_semi_list . SEMI static_expr [ error SEMI BARRBRACKET ]
## Transitions:
-- On SEMI shift to state 331
-- On opt_semi shift to state 350
## Reductions:
-- On error reduce production opt_semi ->
-- On BARRBRACKET reduce production opt_semi ->

State 350:
## Known stack suffix:
## LBRACKETBAR static_semi_list opt_semi
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list opt_semi . BARRBRACKET [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LBRACKETBAR static_semi_list opt_semi . error [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On error shift to state 351
-- On BARRBRACKET shift to state 352
## Reductions:

State 351:
## Known stack suffix:
## LBRACKETBAR static_semi_list opt_semi error
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list opt_semi error . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKETBAR static_semi_list opt_semi error

State 352:
## Known stack suffix:
## LBRACKETBAR static_semi_list opt_semi BARRBRACKET
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list opt_semi BARRBRACKET . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKETBAR static_semi_list opt_semi BARRBRACKET

State 353:
## Known stack suffix:
## LBRACKET static_semi_list
## LR(1) items:
static_expr -> LBRACKET static_semi_list . opt_semi RBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKET static_semi_list . opt_semi error [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_semi_list -> static_semi_list . SEMI static_expr [ error SEMI RBRACKET ]
## Transitions:
-- On SEMI shift to state 331
-- On opt_semi shift to state 354
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACKET reduce production opt_semi ->

State 354:
## Known stack suffix:
## LBRACKET static_semi_list opt_semi
## LR(1) items:
static_expr -> LBRACKET static_semi_list opt_semi . RBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKET static_semi_list opt_semi . error [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On error shift to state 355
-- On RBRACKET shift to state 356
## Reductions:

State 355:
## Known stack suffix:
## LBRACKET static_semi_list opt_semi error
## LR(1) items:
static_expr -> LBRACKET static_semi_list opt_semi error . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKET static_semi_list opt_semi error

State 356:
## Known stack suffix:
## LBRACKET static_semi_list opt_semi RBRACKET
## LR(1) items:
static_expr -> LBRACKET static_semi_list opt_semi RBRACKET . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKET static_semi_list opt_semi RBRACKET

State 357:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CHAR

State 358:
## Known stack suffix:
## val_longident
## LR(1) items:
static_expr -> val_longident . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> val_longident

State 359:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> val_ident

State 360:
## Known stack suffix:
## LPAREN static_expr
## LR(1) items:
static_comma_list -> static_expr . [ RPAREN COMMA ]
static_expr -> static_expr . DOT label_longident [ RPAREN DOT COMMA COLONGREATER COLON ]
static_expr -> LPAREN static_expr . type_constraint RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
static_expr -> LPAREN static_expr . RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On RPAREN shift to state 361
-- On DOT shift to state 362
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On type_constraint shift to state 372
## Reductions:
-- On COMMA reduce production static_comma_list -> static_expr

State 361:
## Known stack suffix:
## LPAREN static_expr RPAREN
## LR(1) items:
static_expr -> LPAREN static_expr RPAREN . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LPAREN static_expr RPAREN

State 362:
## Known stack suffix:
## static_expr DOT
## LR(1) items:
static_expr -> static_expr DOT . label_longident [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On label_longident shift to state 363
## Reductions:

State 363:
## Known stack suffix:
## static_expr DOT label_longident
## LR(1) items:
static_expr -> static_expr DOT label_longident . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> static_expr DOT label_longident

State 364:
## Known stack suffix:
## COLONGREATER
## LR(1) items:
type_constraint -> COLONGREATER . core_type [ RPAREN EQUAL ]
type_constraint -> COLONGREATER . error [ RPAREN EQUAL ]
## Transitions:
-- On error shift to state 365
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 366
## Reductions:

State 365:
## Known stack suffix:
## COLONGREATER error
## LR(1) items:
type_constraint -> COLONGREATER error . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_constraint -> COLONGREATER error

State 366:
## Known stack suffix:
## COLONGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER EQUAL AS ]
type_constraint -> COLONGREATER core_type . [ RPAREN EQUAL ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On RPAREN reduce production type_constraint -> COLONGREATER core_type
-- On EQUAL reduce production type_constraint -> COLONGREATER core_type

State 367:
## Known stack suffix:
## COLON
## LR(1) items:
type_constraint -> COLON . core_type [ RPAREN EQUAL ]
type_constraint -> COLON . core_type COLONGREATER core_type [ RPAREN EQUAL ]
type_constraint -> COLON . error [ RPAREN EQUAL ]
## Transitions:
-- On error shift to state 368
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 369
## Reductions:

State 368:
## Known stack suffix:
## COLON error
## LR(1) items:
type_constraint -> COLON error . [ RPAREN EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_constraint -> COLON error

State 369:
## Known stack suffix:
## COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER EQUAL COLONGREATER AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER EQUAL COLONGREATER AS ]
type_constraint -> COLON core_type . [ RPAREN EQUAL ]
type_constraint -> COLON core_type . COLONGREATER core_type [ RPAREN EQUAL ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On COLONGREATER shift to state 370
-- On AS shift to state 169
## Reductions:
-- On RPAREN reduce production type_constraint -> COLON core_type
-- On EQUAL reduce production type_constraint -> COLON core_type

State 370:
## Known stack suffix:
## COLON core_type COLONGREATER
## LR(1) items:
type_constraint -> COLON core_type COLONGREATER . core_type [ RPAREN EQUAL ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## COLON core_type COLONGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER EQUAL AS ]
type_constraint -> COLON core_type COLONGREATER core_type . [ RPAREN EQUAL ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On RPAREN reduce production type_constraint -> COLON core_type COLONGREATER core_type
-- On EQUAL reduce production type_constraint -> COLON core_type COLONGREATER core_type

State 372:
## Known stack suffix:
## LPAREN static_expr type_constraint
## LR(1) items:
static_expr -> LPAREN static_expr type_constraint . RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On RPAREN shift to state 373
## Reductions:

State 373:
## Known stack suffix:
## LPAREN static_expr type_constraint RPAREN
## LR(1) items:
static_expr -> LPAREN static_expr type_constraint RPAREN . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LPAREN static_expr type_constraint RPAREN

State 374:
## Known stack suffix:
## LPAREN static_comma_list
## LR(1) items:
static_comma_list -> static_comma_list . COMMA static_expr [ RPAREN COMMA ]
static_expr -> LPAREN static_comma_list . RPAREN [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
-- On RPAREN shift to state 375
-- On COMMA shift to state 376
## Reductions:

State 375:
## Known stack suffix:
## LPAREN static_comma_list RPAREN
## LR(1) items:
static_expr -> LPAREN static_comma_list RPAREN . [ error TYPE TO SEMISEMI SEMI RBRACKET OPEN MODULE LET IN GREATERGREATER EXTERNAL EXCEPTION END ELSE DOT DEF COMMA CLASS BARRBRACKET BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LPAREN static_comma_list RPAREN

State 376:
## Known stack suffix:
## static_comma_list COMMA
## LR(1) items:
static_comma_list -> static_comma_list COMMA . static_expr [ RPAREN COMMA ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 377
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 377:
## Known stack suffix:
## static_comma_list COMMA static_expr
## LR(1) items:
static_comma_list -> static_comma_list COMMA static_expr . [ RPAREN COMMA ]
static_expr -> static_expr . DOT label_longident [ RPAREN DOT COMMA ]
## Transitions:
-- On DOT shift to state 362
## Reductions:
-- On RPAREN reduce production static_comma_list -> static_comma_list COMMA static_expr
-- On COMMA reduce production static_comma_list -> static_comma_list COMMA static_expr

State 378:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident . DOT val_ident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DOT shift to state 379
## Reductions:
-- On WITH reduce production constr_longident -> mod_longident
-- On WHILE reduce production constr_longident -> mod_longident
-- On UIDENT reduce production constr_longident -> mod_longident
-- On TYPE reduce production constr_longident -> mod_longident
-- On TRY reduce production constr_longident -> mod_longident
-- On TRUE reduce production constr_longident -> mod_longident
-- On TO reduce production constr_longident -> mod_longident
-- On THEN reduce production constr_longident -> mod_longident
-- On SUBTRACTIVE reduce production constr_longident -> mod_longident
-- On STRING reduce production constr_longident -> mod_longident
-- On STAR reduce production constr_longident -> mod_longident
-- On SHARP reduce production constr_longident -> mod_longident
-- On SEMISEMI reduce production constr_longident -> mod_longident
-- On SEMI reduce production constr_longident -> mod_longident
-- On RPAREN reduce production constr_longident -> mod_longident
-- On PREFIXOP reduce production constr_longident -> mod_longident
-- On PARSER reduce production constr_longident -> mod_longident
-- On OR reduce production constr_longident -> mod_longident
-- On OPEN reduce production constr_longident -> mod_longident
-- On NEW reduce production constr_longident -> mod_longident
-- On MODULE reduce production constr_longident -> mod_longident
-- On MINUSGREATER reduce production constr_longident -> mod_longident
-- On MATCH reduce production constr_longident -> mod_longident
-- On LPAREN reduce production constr_longident -> mod_longident
-- On LOC reduce production constr_longident -> mod_longident
-- On LIDENT reduce production constr_longident -> mod_longident
-- On LET reduce production constr_longident -> mod_longident
-- On LESSLESSGREATERGREATER reduce production constr_longident -> mod_longident
-- On LESSLESS reduce production constr_longident -> mod_longident
-- On LESSGREATER reduce production constr_longident -> mod_longident
-- On LESS reduce production constr_longident -> mod_longident
-- On LBRACKETLESS reduce production constr_longident -> mod_longident
-- On LBRACKETBAR reduce production constr_longident -> mod_longident
-- On LBRACKET reduce production constr_longident -> mod_longident
-- On LBRACELESS reduce production constr_longident -> mod_longident
-- On LBRACEBAR reduce production constr_longident -> mod_longident
-- On LBRACE reduce production constr_longident -> mod_longident
-- On LAZY reduce production constr_longident -> mod_longident
-- On INT reduce production constr_longident -> mod_longident
-- On INFIXOP4 reduce production constr_longident -> mod_longident
-- On INFIXOP3 reduce production constr_longident -> mod_longident
-- On INFIXOP2 reduce production constr_longident -> mod_longident
-- On INFIXOP1 reduce production constr_longident -> mod_longident
-- On INFIXOP0 reduce production constr_longident -> mod_longident
-- On IN reduce production constr_longident -> mod_longident
-- On IF reduce production constr_longident -> mod_longident
-- On GREATER reduce production constr_longident -> mod_longident
-- On FUNCTION reduce production constr_longident -> mod_longident
-- On FUN reduce production constr_longident -> mod_longident
-- On FOR reduce production constr_longident -> mod_longident
-- On FLOAT reduce production constr_longident -> mod_longident
-- On FALSE reduce production constr_longident -> mod_longident
-- On EXTERNAL reduce production constr_longident -> mod_longident
-- On EXCEPTION reduce production constr_longident -> mod_longident
-- On EQUAL reduce production constr_longident -> mod_longident
-- On EOF reduce production constr_longident -> mod_longident
-- On END reduce production constr_longident -> mod_longident
-- On ELSE reduce production constr_longident -> mod_longident
-- On DOWNTO reduce production constr_longident -> mod_longident
-- On DO reduce production constr_longident -> mod_longident
-- On DEF reduce production constr_longident -> mod_longident
-- On COMMA reduce production constr_longident -> mod_longident
-- On COLONGREATER reduce production constr_longident -> mod_longident
-- On COLONEQUAL reduce production constr_longident -> mod_longident
-- On COLONCOLON reduce production constr_longident -> mod_longident
-- On COLON reduce production constr_longident -> mod_longident
-- On CLASS reduce production constr_longident -> mod_longident
-- On CHAR reduce production constr_longident -> mod_longident
-- On BEGIN reduce production constr_longident -> mod_longident
-- On BARRBRACE reduce production constr_longident -> mod_longident
-- On BARBAR reduce production constr_longident -> mod_longident
-- On BAR reduce production constr_longident -> mod_longident
-- On ASSERT reduce production constr_longident -> mod_longident
-- On AND reduce production constr_longident -> mod_longident
-- On AMPERSAND reduce production constr_longident -> mod_longident
-- On AMPERAMPER reduce production constr_longident -> mod_longident

State 379:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident DOT . val_ident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 13
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 381
## Reductions:

State 380:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ WITH WHILE WHEN UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 89
-- On STAR shift to state 41
-- On PREFIXOP shift to state 43
-- On OR shift to state 44
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On GREATER shift to state 95
-- On EQUAL shift to state 96
-- On COLONEQUAL shift to state 97
-- On BARBAR shift to state 98
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On operator shift to state 244
## Reductions:

State 381:
## Known stack suffix:
## mod_longident DOT val_ident
## LR(1) items:
val_longident -> mod_longident DOT val_ident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACE BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production val_longident -> mod_longident DOT val_ident

State 382:
## Known stack suffix:
## constr_longident
## LR(1) items:
static_expr -> constr_longident . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> constr_longident

State 383:
## Known stack suffix:
## constant
## LR(1) items:
static_expr -> constant . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> constant

State 384:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
static_expr -> LBRACKETBAR BARRBRACKET . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKETBAR BARRBRACKET

State 385:
## Known stack suffix:
## LBRACKETBAR static_semi_list
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list . opt_semi BARRBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKETBAR static_semi_list . opt_semi error [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_semi_list -> static_semi_list . SEMI static_expr [ error SEMI BARRBRACKET ]
## Transitions:
-- On SEMI shift to state 331
-- On opt_semi shift to state 386
## Reductions:
-- On error reduce production opt_semi ->
-- On BARRBRACKET reduce production opt_semi ->

State 386:
## Known stack suffix:
## LBRACKETBAR static_semi_list opt_semi
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list opt_semi . BARRBRACKET [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LBRACKETBAR static_semi_list opt_semi . error [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On error shift to state 387
-- On BARRBRACKET shift to state 388
## Reductions:

State 387:
## Known stack suffix:
## LBRACKETBAR static_semi_list opt_semi error
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list opt_semi error . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKETBAR static_semi_list opt_semi error

State 388:
## Known stack suffix:
## LBRACKETBAR static_semi_list opt_semi BARRBRACKET
## LR(1) items:
static_expr -> LBRACKETBAR static_semi_list opt_semi BARRBRACKET . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LBRACKETBAR static_semi_list opt_semi BARRBRACKET

State 389:
## Known stack suffix:
## LPAREN static_expr
## LR(1) items:
static_comma_list -> static_expr . [ RPAREN COMMA ]
static_expr -> static_expr . DOT label_longident [ RPAREN DOT COMMA COLONGREATER COLON ]
static_expr -> LPAREN static_expr . type_constraint RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> LPAREN static_expr . RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On RPAREN shift to state 390
-- On DOT shift to state 362
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On type_constraint shift to state 391
## Reductions:
-- On COMMA reduce production static_comma_list -> static_expr

State 390:
## Known stack suffix:
## LPAREN static_expr RPAREN
## LR(1) items:
static_expr -> LPAREN static_expr RPAREN . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LPAREN static_expr RPAREN

State 391:
## Known stack suffix:
## LPAREN static_expr type_constraint
## LR(1) items:
static_expr -> LPAREN static_expr type_constraint . RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On RPAREN shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## LPAREN static_expr type_constraint RPAREN
## LR(1) items:
static_expr -> LPAREN static_expr type_constraint RPAREN . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LPAREN static_expr type_constraint RPAREN

State 393:
## Known stack suffix:
## LPAREN static_comma_list
## LR(1) items:
static_comma_list -> static_comma_list . COMMA static_expr [ RPAREN COMMA ]
static_expr -> LPAREN static_comma_list . RPAREN [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On RPAREN shift to state 394
-- On COMMA shift to state 376
## Reductions:

State 394:
## Known stack suffix:
## LPAREN static_comma_list RPAREN
## LR(1) items:
static_expr -> LPAREN static_comma_list RPAREN . [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI RPAREN PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF COMMA COLONGREATER COLON CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production static_expr -> LPAREN static_comma_list RPAREN

State 395:
## Known stack suffix:
## REPLY static_expr
## LR(1) items:
process0 -> REPLY static_expr . to_ident [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> static_expr . DOT label_longident [ WHILE UIDENT TYPE TRY TRUE TO SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On TO shift to state 396
-- On DOT shift to state 362
-- On to_ident shift to state 398
## Reductions:
-- On WHILE reduce production to_ident ->
-- On UIDENT reduce production to_ident ->
-- On TYPE reduce production to_ident ->
-- On TRY reduce production to_ident ->
-- On TRUE reduce production to_ident ->
-- On SUBTRACTIVE reduce production to_ident ->
-- On STRING reduce production to_ident ->
-- On SHARP reduce production to_ident ->
-- On SEMISEMI reduce production to_ident ->
-- On PREFIXOP reduce production to_ident ->
-- On PARSER reduce production to_ident ->
-- On OPEN reduce production to_ident ->
-- On NEW reduce production to_ident ->
-- On MODULE reduce production to_ident ->
-- On MATCH reduce production to_ident ->
-- On LPAREN reduce production to_ident ->
-- On LOC reduce production to_ident ->
-- On LIDENT reduce production to_ident ->
-- On LET reduce production to_ident ->
-- On LBRACKETLESS reduce production to_ident ->
-- On LBRACKETBAR reduce production to_ident ->
-- On LBRACKET reduce production to_ident ->
-- On LBRACELESS reduce production to_ident ->
-- On LBRACEBAR reduce production to_ident ->
-- On LBRACE reduce production to_ident ->
-- On LAZY reduce production to_ident ->
-- On INT reduce production to_ident ->
-- On IN reduce production to_ident ->
-- On IF reduce production to_ident ->
-- On FUNCTION reduce production to_ident ->
-- On FUN reduce production to_ident ->
-- On FOR reduce production to_ident ->
-- On FLOAT reduce production to_ident ->
-- On FALSE reduce production to_ident ->
-- On EXTERNAL reduce production to_ident ->
-- On EXCEPTION reduce production to_ident ->
-- On EOF reduce production to_ident ->
-- On END reduce production to_ident ->
-- On ELSE reduce production to_ident ->
-- On DEF reduce production to_ident ->
-- On CLASS reduce production to_ident ->
-- On CHAR reduce production to_ident ->
-- On BEGIN reduce production to_ident ->
-- On BARRBRACE reduce production to_ident ->
-- On BAR reduce production to_ident ->
-- On ASSERT reduce production to_ident ->
-- On AND reduce production to_ident ->

State 396:
## Known stack suffix:
## TO
## LR(1) items:
to_ident -> TO . LIDENT [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On LIDENT shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## TO LIDENT
## LR(1) items:
to_ident -> TO LIDENT . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production to_ident -> TO LIDENT

State 398:
## Known stack suffix:
## REPLY static_expr to_ident
## LR(1) items:
process0 -> REPLY static_expr to_ident . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> REPLY static_expr to_ident

State 399:
## Known stack suffix:
## LET
## LR(1) items:
process -> LET . rec_flag let_bindings IN process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 400
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 400:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
process -> LET rec_flag . let_bindings IN process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 401
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 809
-- On mod_longident shift to state 303
-- On let_bindings shift to state 814
-- On let_binding shift to state 819
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 401:
## Known stack suffix:
## val_ident
## LR(1) items:
let_binding -> val_ident . fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
simple_pattern -> val_ident . [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 402
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On type_constraint shift to state 803
-- On simple_pattern shift to state 806
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On fun_binding shift to state 808
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On COMMA reduce production simple_pattern -> val_ident
-- On COLONEQUAL reduce production simple_pattern -> val_ident
-- On COLONCOLON reduce production simple_pattern -> val_ident
-- On BAR reduce production simple_pattern -> val_ident
-- On AS reduce production simple_pattern -> val_ident

State 402:
## Known stack suffix:
## EQUAL
## LR(1) items:
fun_binding -> EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 802
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 403:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings IN error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 404
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 404:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings IN error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 289
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 308
-- On mod_longident shift to state 303
-- On let_bindings shift to state 405
-- On let_binding shift to state 801
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 405:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . IN error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error IN AND ]
## Transitions:
-- On error shift to state 406
-- On IN shift to state 407
-- On AND shift to state 799
## Reductions:

State 406:
## Known stack suffix:
## LET rec_flag let_bindings error
## LR(1) items:
expr -> LET rec_flag let_bindings error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings error

State 407:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
expr -> LET rec_flag let_bindings IN . seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings IN . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 408
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 798
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 408:
## Known stack suffix:
## LET rec_flag let_bindings IN error
## LR(1) items:
expr -> LET rec_flag let_bindings IN error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings IN error

State 409:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi BARRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . BARRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On BARRBRACKET shift to state 793
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_semi_list shift to state 794
-- On expr_comma_list shift to state 499
-- On expr shift to state 779
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 410:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_expr -> LBRACE . lbl_expr_list opt_semi RBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On lbl_expr_list shift to state 411
-- On label_longident shift to state 446
## Reductions:

State 411:
## Known stack suffix:
## LBRACE lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ error SEMI RBRACE ]
simple_expr -> LBRACE lbl_expr_list . opt_semi RBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list . opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 412
-- On opt_semi shift to state 790
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACE reduce production opt_semi ->

State 412:
## Known stack suffix:
## lbl_expr_list SEMI
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI . label_longident EQUAL expr [ error SEMI RBRACE ]
opt_semi -> SEMI . [ error RBRACE ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On label_longident shift to state 413
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On RBRACE reduce production opt_semi -> SEMI

State 413:
## Known stack suffix:
## lbl_expr_list SEMI label_longident
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident . EQUAL expr [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 414
## Reductions:

State 414:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL . expr [ error SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 789
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 415:
## Known stack suffix:
## LAZY
## LR(1) items:
expr -> LAZY . simple_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 788
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:

State 416:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 785
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 417:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . seq_expr THEN expr ELSE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF . seq_expr THEN expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 780
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 418:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On RBRACKET shift to state 248
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_semi_list shift to state 773
-- On expr_comma_list shift to state 499
-- On expr shift to state 779
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 419:
## Known stack suffix:
## FUNCTION
## LR(1) items:
expr -> FUNCTION . opt_bar match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 268
-- On opt_bar shift to state 420
## Reductions:
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On SUBTRACTIVE reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->

State 420:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
expr -> FUNCTION opt_bar . match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 421
-- On mod_longident shift to state 303
-- On match_cases shift to state 769
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 421:
## Known stack suffix:
## pattern
## LR(1) items:
match_cases -> pattern . match_action [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 422
-- On MINUSGREATER shift to state 433
-- On COMMA shift to state 455
-- On COLONCOLON shift to state 301
-- On BAR shift to state 457
-- On AS shift to state 459
-- On match_action shift to state 768
## Reductions:

State 422:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . seq_expr MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 765
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 423:
## Known stack suffix:
## LBRACELESS
## LR(1) items:
simple_expr -> LBRACELESS . label_expr_list opt_semi GREATERRBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . label_expr_list opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . GREATERRBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 141
-- On GREATERRBRACE shift to state 424
-- On label_expr_list shift to state 425
-- On label shift to state 429
## Reductions:

State 424:
## Known stack suffix:
## LBRACELESS GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS GREATERRBRACE . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS GREATERRBRACE

State 425:
## Known stack suffix:
## LBRACELESS label_expr_list
## LR(1) items:
label_expr_list -> label_expr_list . SEMI label EQUAL expr [ error SEMI GREATERRBRACE ]
simple_expr -> LBRACELESS label_expr_list . opt_semi GREATERRBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list . opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 316
-- On opt_semi shift to state 426
## Reductions:
-- On error reduce production opt_semi ->
-- On GREATERRBRACE reduce production opt_semi ->

State 426:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi . GREATERRBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list opt_semi . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 427
-- On GREATERRBRACE shift to state 428
## Reductions:

State 427:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS label_expr_list opt_semi error

State 428:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE

State 429:
## Known stack suffix:
## label
## LR(1) items:
label_expr_list -> label . EQUAL expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On EQUAL shift to state 430
## Reductions:

State 430:
## Known stack suffix:
## label EQUAL
## LR(1) items:
label_expr_list -> label EQUAL . expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 764
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 431:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . simple_pattern fun_def [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 432
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 432:
## Known stack suffix:
## FUN simple_pattern
## LR(1) items:
expr -> FUN simple_pattern . fun_def [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 422
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On MINUSGREATER shift to state 433
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 760
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On match_action shift to state 761
-- On fun_def shift to state 763
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 433:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 759
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 434:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## FOR val_ident
## LR(1) items:
expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On EQUAL shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## FOR val_ident EQUAL
## LR(1) items:
expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 752
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 437:
## Known stack suffix:
## LBRACEBAR
## LR(1) items:
expr -> LBRACEBAR . process BARRBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 750
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On BARRBRACE reduce production process ->

State 438:
## Known stack suffix:
## LBRACEBARBARRBRACE
## LR(1) items:
process0 -> LBRACEBARBARRBRACE . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> LBRACEBARBARRBRACE

State 439:
## Known stack suffix:
## LBRACEBAR
## LR(1) items:
process0 -> LBRACEBAR . process BARRBRACE [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 748
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On BARRBRACE reduce production process ->

State 440:
## Known stack suffix:
## IF
## LR(1) items:
process -> IF . expr THEN process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
process0 -> IF . expr THEN process0 ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 739
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 441:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_expr -> LBRACE . lbl_expr_list opt_semi RBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On lbl_expr_list shift to state 442
-- On label_longident shift to state 446
## Reductions:

State 442:
## Known stack suffix:
## LBRACE lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ error SEMI RBRACE ]
simple_expr -> LBRACE lbl_expr_list . opt_semi RBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list . opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 412
-- On opt_semi shift to state 443
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACE reduce production opt_semi ->

State 443:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi . RBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list opt_semi . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 444
-- On RBRACE shift to state 445
## Reductions:

State 444:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE lbl_expr_list opt_semi error

State 445:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi RBRACE
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE

State 446:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_expr_list -> label_longident . EQUAL expr [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 447
## Reductions:

State 447:
## Known stack suffix:
## label_longident EQUAL
## LR(1) items:
lbl_expr_list -> label_longident EQUAL . expr [ error SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 602
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 448:
## Known stack suffix:
## DEF
## LR(1) items:
expr -> DEF . def_bindings IN seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_bindings shift to state 599
-- On def_binding shift to state 595
## Reductions:

State 449:
## Known stack suffix:
## LIDENT
## LR(1) items:
join_pattern -> LIDENT . LESS join_args GREATER [ EQUAL BAR ]
join_pattern -> LIDENT . LESSGREATER [ EQUAL BAR ]
join_pattern -> LIDENT . LESSLESS join_args GREATERGREATER [ EQUAL BAR ]
join_pattern -> LIDENT . LESSLESSGREATERGREATER [ EQUAL BAR ]
## Transitions:
-- On LESSLESSGREATERGREATER shift to state 450
-- On LESSLESS shift to state 451
-- On LESSGREATER shift to state 463
-- On LESS shift to state 464
## Reductions:

State 450:
## Known stack suffix:
## LIDENT LESSLESSGREATERGREATER
## LR(1) items:
join_pattern -> LIDENT LESSLESSGREATERGREATER . [ EQUAL BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production join_pattern -> LIDENT LESSLESSGREATERGREATER

State 451:
## Known stack suffix:
## LIDENT LESSLESS
## LR(1) items:
join_pattern -> LIDENT LESSLESS . join_args GREATERGREATER [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 452
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 453
-- On pattern shift to state 454
-- On mod_longident shift to state 303
-- On join_args shift to state 461
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:
-- On GREATERGREATER reduce production join_args ->

State 452:
## Known stack suffix:
## simple_pattern
## LR(1) items:
join_args -> simple_pattern . [ GREATERGREATER GREATER ]
pattern -> simple_pattern . [ COMMA COLONCOLON BAR AS ]
## Transitions:
## Reductions:
-- On GREATERGREATER reduce production join_args -> simple_pattern
-- On GREATER reduce production join_args -> simple_pattern
-- On COMMA reduce production pattern -> simple_pattern
-- On COLONCOLON reduce production pattern -> simple_pattern
-- On BAR reduce production pattern -> simple_pattern
-- On AS reduce production pattern -> simple_pattern

State 453:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
join_args -> pattern_comma_list . [ GREATERGREATER GREATER ]
pattern -> pattern_comma_list . [ COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern_comma_list . COMMA pattern [ GREATERGREATER GREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 299
## Reductions:
-- On GREATERGREATER reduce production join_args -> pattern_comma_list
-- On GREATER reduce production join_args -> pattern_comma_list
-- On COLONCOLON reduce production pattern -> pattern_comma_list
-- On BAR reduce production pattern -> pattern_comma_list
-- On AS reduce production pattern -> pattern_comma_list

State 454:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ GREATERGREATER GREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 455
-- On COLONCOLON shift to state 301
-- On BAR shift to state 457
-- On AS shift to state 459
## Reductions:

State 455:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
pattern_comma_list -> pattern COMMA . pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 456
-- On mod_longident shift to state 303
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 456:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern COMMA pattern . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 301
## Reductions:
-- On WHEN reduce production pattern_comma_list -> pattern COMMA pattern
-- On MINUSGREATER reduce production pattern_comma_list -> pattern COMMA pattern
-- On GREATERGREATER reduce production pattern_comma_list -> pattern COMMA pattern
-- On GREATER reduce production pattern_comma_list -> pattern COMMA pattern
-- On EQUAL reduce production pattern_comma_list -> pattern COMMA pattern
-- On COMMA reduce production pattern_comma_list -> pattern COMMA pattern
-- On COLONEQUAL reduce production pattern_comma_list -> pattern COMMA pattern
-- On BAR reduce production pattern_comma_list -> pattern COMMA pattern
-- On AS reduce production pattern_comma_list -> pattern COMMA pattern

State 457:
## Known stack suffix:
## pattern BAR
## LR(1) items:
pattern -> pattern BAR . pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 458
-- On mod_longident shift to state 303
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 458:
## Known stack suffix:
## pattern BAR pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern BAR pattern . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 455
-- On COLONCOLON shift to state 301
## Reductions:
-- On WHEN reduce production pattern -> pattern BAR pattern
-- On MINUSGREATER reduce production pattern -> pattern BAR pattern
-- On GREATERGREATER reduce production pattern -> pattern BAR pattern
-- On GREATER reduce production pattern -> pattern BAR pattern
-- On EQUAL reduce production pattern -> pattern BAR pattern
-- On COLONEQUAL reduce production pattern -> pattern BAR pattern
-- On BAR reduce production pattern -> pattern BAR pattern
-- On AS reduce production pattern -> pattern BAR pattern

State 459:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . val_ident [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 460
## Reductions:

State 460:
## Known stack suffix:
## pattern AS val_ident
## LR(1) items:
pattern -> pattern AS val_ident . [ WHEN MINUSGREATER GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern -> pattern AS val_ident

State 461:
## Known stack suffix:
## LIDENT LESSLESS join_args
## LR(1) items:
join_pattern -> LIDENT LESSLESS join_args . GREATERGREATER [ EQUAL BAR ]
## Transitions:
-- On GREATERGREATER shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## LIDENT LESSLESS join_args GREATERGREATER
## LR(1) items:
join_pattern -> LIDENT LESSLESS join_args GREATERGREATER . [ EQUAL BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production join_pattern -> LIDENT LESSLESS join_args GREATERGREATER

State 463:
## Known stack suffix:
## LIDENT LESSGREATER
## LR(1) items:
join_pattern -> LIDENT LESSGREATER . [ EQUAL BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production join_pattern -> LIDENT LESSGREATER

State 464:
## Known stack suffix:
## LIDENT LESS
## LR(1) items:
join_pattern -> LIDENT LESS . join_args GREATER [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 452
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 453
-- On pattern shift to state 454
-- On mod_longident shift to state 303
-- On join_args shift to state 465
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:
-- On GREATER reduce production join_args ->

State 465:
## Known stack suffix:
## LIDENT LESS join_args
## LR(1) items:
join_pattern -> LIDENT LESS join_args . GREATER [ EQUAL BAR ]
## Transitions:
-- On GREATER shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## LIDENT LESS join_args GREATER
## LR(1) items:
join_pattern -> LIDENT LESS join_args GREATER . [ EQUAL BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production join_pattern -> LIDENT LESS join_args GREATER

State 467:
## Known stack suffix:
## join_pattern
## LR(1) items:
def_binding -> join_pattern . EQUAL process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
join_pattern -> join_pattern . BAR join_pattern [ EQUAL BAR ]
## Transitions:
-- On EQUAL shift to state 468
-- On BAR shift to state 597
## Reductions:

State 468:
## Known stack suffix:
## join_pattern EQUAL
## LR(1) items:
def_binding -> join_pattern EQUAL . process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 596
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On WHILE reduce production process ->
-- On TYPE reduce production process ->
-- On TRY reduce production process ->
-- On SUBTRACTIVE reduce production process ->
-- On SHARP reduce production process ->
-- On SEMISEMI reduce production process ->
-- On PREFIXOP reduce production process ->
-- On PARSER reduce production process ->
-- On OPEN reduce production process ->
-- On NEW reduce production process ->
-- On MODULE reduce production process ->
-- On MATCH reduce production process ->
-- On LOC reduce production process ->
-- On LBRACKETLESS reduce production process ->
-- On LBRACELESS reduce production process ->
-- On LBRACE reduce production process ->
-- On LAZY reduce production process ->
-- On IN reduce production process ->
-- On FUNCTION reduce production process ->
-- On FUN reduce production process ->
-- On FOR reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On EOF reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On ASSERT reduce production process ->
-- On AND reduce production process ->

State 469:
## Known stack suffix:
## DEF
## LR(1) items:
process -> DEF . def_bindings IN process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_bindings shift to state 470
-- On def_binding shift to state 595
## Reductions:

State 470:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ IN AND ]
process -> DEF def_bindings . IN process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On IN shift to state 471
-- On AND shift to state 593
## Reductions:

State 471:
## Known stack suffix:
## DEF def_bindings IN
## LR(1) items:
process -> DEF def_bindings IN . process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 592
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On WHILE reduce production process ->
-- On TYPE reduce production process ->
-- On TRY reduce production process ->
-- On SUBTRACTIVE reduce production process ->
-- On SHARP reduce production process ->
-- On SEMISEMI reduce production process ->
-- On PREFIXOP reduce production process ->
-- On PARSER reduce production process ->
-- On OPEN reduce production process ->
-- On NEW reduce production process ->
-- On MODULE reduce production process ->
-- On MATCH reduce production process ->
-- On LOC reduce production process ->
-- On LBRACKETLESS reduce production process ->
-- On LBRACELESS reduce production process ->
-- On LBRACE reduce production process ->
-- On LAZY reduce production process ->
-- On IN reduce production process ->
-- On FUNCTION reduce production process ->
-- On FUN reduce production process ->
-- On FOR reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On EOF reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On BARRBRACE reduce production process ->
-- On ASSERT reduce production process ->
-- On AND reduce production process ->

State 472:
## Known stack suffix:
## BEGIN
## LR(1) items:
process -> BEGIN . seq_expr END SEMI process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
process -> BEGIN . seq_expr error [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 575
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 473:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . simple_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 475
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:

State 474:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> val_longident

State 475:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
expr -> ASSERT simple_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 476
-- On DOT shift to state 479
## Reductions:
-- On error reduce production expr -> ASSERT simple_expr
-- On WITH reduce production expr -> ASSERT simple_expr
-- On WHILE reduce production expr -> ASSERT simple_expr
-- On VIRTUAL reduce production expr -> ASSERT simple_expr
-- On VAL reduce production expr -> ASSERT simple_expr
-- On UIDENT reduce production expr -> ASSERT simple_expr
-- On TYPE reduce production expr -> ASSERT simple_expr
-- On TRY reduce production expr -> ASSERT simple_expr
-- On TRUE reduce production expr -> ASSERT simple_expr
-- On SUBTRACTIVE reduce production expr -> ASSERT simple_expr
-- On STRING reduce production expr -> ASSERT simple_expr
-- On STAR reduce production expr -> ASSERT simple_expr
-- On SEMISEMI reduce production expr -> ASSERT simple_expr
-- On SEMI reduce production expr -> ASSERT simple_expr
-- On RPAREN reduce production expr -> ASSERT simple_expr
-- On RBRACKET reduce production expr -> ASSERT simple_expr
-- On RBRACE reduce production expr -> ASSERT simple_expr
-- On QUESTION reduce production expr -> ASSERT simple_expr
-- On PREFIXOP reduce production expr -> ASSERT simple_expr
-- On PARSER reduce production expr -> ASSERT simple_expr
-- On OR reduce production expr -> ASSERT simple_expr
-- On OPEN reduce production expr -> ASSERT simple_expr
-- On NEW reduce production expr -> ASSERT simple_expr
-- On MODULE reduce production expr -> ASSERT simple_expr
-- On METHOD reduce production expr -> ASSERT simple_expr
-- On MATCH reduce production expr -> ASSERT simple_expr
-- On LPAREN reduce production expr -> ASSERT simple_expr
-- On LOC reduce production expr -> ASSERT simple_expr
-- On LIDENT reduce production expr -> ASSERT simple_expr
-- On LET reduce production expr -> ASSERT simple_expr
-- On LESSGREATER reduce production expr -> ASSERT simple_expr
-- On LESS reduce production expr -> ASSERT simple_expr
-- On LBRACKETLESS reduce production expr -> ASSERT simple_expr
-- On LBRACKETBAR reduce production expr -> ASSERT simple_expr
-- On LBRACKET reduce production expr -> ASSERT simple_expr
-- On LBRACELESS reduce production expr -> ASSERT simple_expr
-- On LBRACEBAR reduce production expr -> ASSERT simple_expr
-- On LBRACE reduce production expr -> ASSERT simple_expr
-- On LAZY reduce production expr -> ASSERT simple_expr
-- On INT reduce production expr -> ASSERT simple_expr
-- On INHERIT reduce production expr -> ASSERT simple_expr
-- On INFIXOP4 reduce production expr -> ASSERT simple_expr
-- On INFIXOP3 reduce production expr -> ASSERT simple_expr
-- On INFIXOP2 reduce production expr -> ASSERT simple_expr
-- On INFIXOP1 reduce production expr -> ASSERT simple_expr
-- On INFIXOP0 reduce production expr -> ASSERT simple_expr
-- On IN reduce production expr -> ASSERT simple_expr
-- On IF reduce production expr -> ASSERT simple_expr
-- On GREATERRBRACKET reduce production expr -> ASSERT simple_expr
-- On GREATERRBRACE reduce production expr -> ASSERT simple_expr
-- On GREATERGREATER reduce production expr -> ASSERT simple_expr
-- On GREATER reduce production expr -> ASSERT simple_expr
-- On FUNCTION reduce production expr -> ASSERT simple_expr
-- On FUN reduce production expr -> ASSERT simple_expr
-- On FOR reduce production expr -> ASSERT simple_expr
-- On FLOAT reduce production expr -> ASSERT simple_expr
-- On FALSE reduce production expr -> ASSERT simple_expr
-- On EXTERNAL reduce production expr -> ASSERT simple_expr
-- On EXCEPTION reduce production expr -> ASSERT simple_expr
-- On EQUAL reduce production expr -> ASSERT simple_expr
-- On EOF reduce production expr -> ASSERT simple_expr
-- On END reduce production expr -> ASSERT simple_expr
-- On ELSE reduce production expr -> ASSERT simple_expr
-- On DONE reduce production expr -> ASSERT simple_expr
-- On DEF reduce production expr -> ASSERT simple_expr
-- On COMMA reduce production expr -> ASSERT simple_expr
-- On COLONGREATER reduce production expr -> ASSERT simple_expr
-- On COLONEQUAL reduce production expr -> ASSERT simple_expr
-- On COLONCOLON reduce production expr -> ASSERT simple_expr
-- On COLON reduce production expr -> ASSERT simple_expr
-- On CLASS reduce production expr -> ASSERT simple_expr
-- On CHAR reduce production expr -> ASSERT simple_expr
-- On BEGIN reduce production expr -> ASSERT simple_expr
-- On BARRBRACKET reduce production expr -> ASSERT simple_expr
-- On BARBAR reduce production expr -> ASSERT simple_expr
-- On BAR reduce production expr -> ASSERT simple_expr
-- On ASSERT reduce production expr -> ASSERT simple_expr
-- On AND reduce production expr -> ASSERT simple_expr
-- On AMPERSAND reduce production expr -> ASSERT simple_expr
-- On AMPERAMPER reduce production expr -> ASSERT simple_expr

State 476:
## Known stack suffix:
## simple_expr SHARP
## LR(1) items:
simple_expr -> simple_expr SHARP . label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 477
-- On label shift to state 478
## Reductions:

State 477:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label -> LIDENT

State 478:
## Known stack suffix:
## simple_expr SHARP label
## LR(1) items:
simple_expr -> simple_expr SHARP label . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr SHARP label

State 479:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 480
-- On LIDENT shift to state 334
-- On LBRACKET shift to state 571
-- On mod_longident shift to state 335
-- On label_longident shift to state 574
## Reductions:

State 480:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 569
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 481:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr -> simple_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . simple_expr_list [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . LESSLESS list_of_exprs GREATERGREATER [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . LESSLESS list_of_exprs error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . LESSLESSGREATERGREATER [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT label_longident LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On SHARP shift to state 476
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LESSLESSGREATERGREATER shift to state 482
-- On LESSLESS shift to state 483
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DOT shift to state 550
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr_list shift to state 566
-- On simple_expr shift to state 568
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:
-- On error reduce production expr -> simple_expr
-- On WITH reduce production expr -> simple_expr
-- On WHILE reduce production expr -> simple_expr
-- On VIRTUAL reduce production expr -> simple_expr
-- On VAL reduce production expr -> simple_expr
-- On TYPE reduce production expr -> simple_expr
-- On TRY reduce production expr -> simple_expr
-- On SUBTRACTIVE reduce production expr -> simple_expr
-- On STAR reduce production expr -> simple_expr
-- On SEMISEMI reduce production expr -> simple_expr
-- On SEMI reduce production expr -> simple_expr
-- On RPAREN reduce production expr -> simple_expr
-- On RBRACKET reduce production expr -> simple_expr
-- On RBRACE reduce production expr -> simple_expr
-- On QUESTION reduce production expr -> simple_expr
-- On PARSER reduce production expr -> simple_expr
-- On OR reduce production expr -> simple_expr
-- On OPEN reduce production expr -> simple_expr
-- On MODULE reduce production expr -> simple_expr
-- On METHOD reduce production expr -> simple_expr
-- On MATCH reduce production expr -> simple_expr
-- On LET reduce production expr -> simple_expr
-- On LESSGREATER reduce production expr -> simple_expr
-- On LESS reduce production expr -> simple_expr
-- On LBRACEBAR reduce production expr -> simple_expr
-- On LAZY reduce production expr -> simple_expr
-- On INHERIT reduce production expr -> simple_expr
-- On INFIXOP4 reduce production expr -> simple_expr
-- On INFIXOP3 reduce production expr -> simple_expr
-- On INFIXOP2 reduce production expr -> simple_expr
-- On INFIXOP1 reduce production expr -> simple_expr
-- On INFIXOP0 reduce production expr -> simple_expr
-- On IN reduce production expr -> simple_expr
-- On IF reduce production expr -> simple_expr
-- On GREATERRBRACKET reduce production expr -> simple_expr
-- On GREATERRBRACE reduce production expr -> simple_expr
-- On GREATERGREATER reduce production expr -> simple_expr
-- On GREATER reduce production expr -> simple_expr
-- On FUNCTION reduce production expr -> simple_expr
-- On FUN reduce production expr -> simple_expr
-- On FOR reduce production expr -> simple_expr
-- On EXTERNAL reduce production expr -> simple_expr
-- On EXCEPTION reduce production expr -> simple_expr
-- On EQUAL reduce production expr -> simple_expr
-- On EOF reduce production expr -> simple_expr
-- On END reduce production expr -> simple_expr
-- On ELSE reduce production expr -> simple_expr
-- On DONE reduce production expr -> simple_expr
-- On DEF reduce production expr -> simple_expr
-- On COMMA reduce production expr -> simple_expr
-- On COLONGREATER reduce production expr -> simple_expr
-- On COLONEQUAL reduce production expr -> simple_expr
-- On COLONCOLON reduce production expr -> simple_expr
-- On COLON reduce production expr -> simple_expr
-- On CLASS reduce production expr -> simple_expr
-- On BARRBRACKET reduce production expr -> simple_expr
-- On BARBAR reduce production expr -> simple_expr
-- On BAR reduce production expr -> simple_expr
-- On ASSERT reduce production expr -> simple_expr
-- On AND reduce production expr -> simple_expr
-- On AMPERSAND reduce production expr -> simple_expr
-- On AMPERAMPER reduce production expr -> simple_expr

State 482:
## Known stack suffix:
## simple_expr LESSLESSGREATERGREATER
## LR(1) items:
expr -> simple_expr LESSLESSGREATERGREATER . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> simple_expr LESSLESSGREATERGREATER

State 483:
## Known stack suffix:
## simple_expr LESSLESS
## LR(1) items:
expr -> simple_expr LESSLESS . list_of_exprs GREATERGREATER [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr LESSLESS . list_of_exprs error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 484
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On list_of_exprs shift to state 546
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 549
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 484:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error UIDENT TRUE SUBTRACTIVE STRING STAR SHARP PREFIXOP OR NEW LPAREN LOC LIDENT LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER FLOAT FALSE EQUAL DOT COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
list_of_exprs -> LPAREN . expr RPAREN [ error GREATERGREATER ]
simple_expr -> LPAREN . seq_expr RPAREN [ error UIDENT TRUE SUBTRACTIVE STRING STAR SHARP PREFIXOP OR NEW LPAREN LOC LIDENT LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER FLOAT FALSE EQUAL DOT COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr error [ error UIDENT TRUE SUBTRACTIVE STRING STAR SHARP PREFIXOP OR NEW LPAREN LOC LIDENT LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER FLOAT FALSE EQUAL DOT COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr type_constraint RPAREN [ error UIDENT TRUE SUBTRACTIVE STRING STAR SHARP PREFIXOP OR NEW LPAREN LOC LIDENT LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER FLOAT FALSE EQUAL DOT COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . SHARP label RPAREN [ error UIDENT TRUE SUBTRACTIVE STRING STAR SHARP PREFIXOP OR NEW LPAREN LOC LIDENT LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER FLOAT FALSE EQUAL DOT COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ error UIDENT TRUE SUBTRACTIVE STRING STAR SHARP PREFIXOP OR NEW LPAREN LOC LIDENT LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER FLOAT FALSE EQUAL DOT COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 30
-- On STRING shift to state 21
-- On STAR shift to state 41
-- On SHARP shift to state 485
-- On RPAREN shift to state 46
-- On PREFIXOP shift to state 488
-- On PARSER shift to state 31
-- On OR shift to state 44
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LESSGREATER shift to state 48
-- On LESS shift to state 49
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On INFIXOP4 shift to state 90
-- On INFIXOP3 shift to state 91
-- On INFIXOP2 shift to state 92
-- On INFIXOP1 shift to state 93
-- On INFIXOP0 shift to state 94
-- On IF shift to state 417
-- On GREATER shift to state 95
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EQUAL shift to state 96
-- On DEF shift to state 448
-- On COLONEQUAL shift to state 97
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On BARBAR shift to state 98
-- On ASSERT shift to state 473
-- On AMPERSAND shift to state 99
-- On AMPERAMPER shift to state 100
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 492
-- On operator shift to state 101
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 541
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 485:
## Known stack suffix:
## LPAREN SHARP
## LR(1) items:
simple_expr -> LPAREN SHARP . label RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## LPAREN SHARP label
## LR(1) items:
simple_expr -> LPAREN SHARP label . RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## LPAREN SHARP label RPAREN
## LR(1) items:
simple_expr -> LPAREN SHARP label RPAREN . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN SHARP label RPAREN

State 488:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
simple_expr -> PREFIXOP . simple_expr [ error UIDENT TRUE SUBTRACTIVE STRING STAR SHARP SEMI RPAREN PREFIXOP OR NEW LPAREN LOC LIDENT LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER FLOAT FALSE EQUAL DOT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 489
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:
-- On RPAREN reduce production operator -> PREFIXOP

State 489:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> PREFIXOP simple_expr

State 490:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constr_longident

State 491:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constant

State 492:
## Known stack suffix:
## LPAREN seq_expr
## LR(1) items:
simple_expr -> LPAREN seq_expr . RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . type_constraint RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 493
-- On RPAREN shift to state 494
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On type_constraint shift to state 495
## Reductions:

State 493:
## Known stack suffix:
## LPAREN seq_expr error
## LR(1) items:
simple_expr -> LPAREN seq_expr error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr error

State 494:
## Known stack suffix:
## LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr RPAREN . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr RPAREN

State 495:
## Known stack suffix:
## LPAREN seq_expr type_constraint
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint . RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 496
## Reductions:

State 496:
## Known stack suffix:
## LPAREN seq_expr type_constraint RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint RPAREN . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr type_constraint RPAREN

State 497:
## Known stack suffix:
## label
## LR(1) items:
expr -> label . LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 498
## Reductions:

State 498:
## Known stack suffix:
## label LESSMINUS
## LR(1) items:
expr -> label LESSMINUS . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 536
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 499:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 500
## Reductions:
-- On error reduce production expr -> expr_comma_list
-- On WITH reduce production expr -> expr_comma_list
-- On WHILE reduce production expr -> expr_comma_list
-- On VIRTUAL reduce production expr -> expr_comma_list
-- On VAL reduce production expr -> expr_comma_list
-- On UIDENT reduce production expr -> expr_comma_list
-- On TYPE reduce production expr -> expr_comma_list
-- On TRY reduce production expr -> expr_comma_list
-- On TRUE reduce production expr -> expr_comma_list
-- On SUBTRACTIVE reduce production expr -> expr_comma_list
-- On STRING reduce production expr -> expr_comma_list
-- On STAR reduce production expr -> expr_comma_list
-- On SHARP reduce production expr -> expr_comma_list
-- On SEMISEMI reduce production expr -> expr_comma_list
-- On SEMI reduce production expr -> expr_comma_list
-- On RPAREN reduce production expr -> expr_comma_list
-- On RBRACKET reduce production expr -> expr_comma_list
-- On RBRACE reduce production expr -> expr_comma_list
-- On QUESTION reduce production expr -> expr_comma_list
-- On PREFIXOP reduce production expr -> expr_comma_list
-- On PARSER reduce production expr -> expr_comma_list
-- On OR reduce production expr -> expr_comma_list
-- On OPEN reduce production expr -> expr_comma_list
-- On NEW reduce production expr -> expr_comma_list
-- On MODULE reduce production expr -> expr_comma_list
-- On METHOD reduce production expr -> expr_comma_list
-- On MATCH reduce production expr -> expr_comma_list
-- On LPAREN reduce production expr -> expr_comma_list
-- On LOC reduce production expr -> expr_comma_list
-- On LIDENT reduce production expr -> expr_comma_list
-- On LET reduce production expr -> expr_comma_list
-- On LESSGREATER reduce production expr -> expr_comma_list
-- On LESS reduce production expr -> expr_comma_list
-- On LBRACKETLESS reduce production expr -> expr_comma_list
-- On LBRACKETBAR reduce production expr -> expr_comma_list
-- On LBRACKET reduce production expr -> expr_comma_list
-- On LBRACELESS reduce production expr -> expr_comma_list
-- On LBRACEBAR reduce production expr -> expr_comma_list
-- On LBRACE reduce production expr -> expr_comma_list
-- On LAZY reduce production expr -> expr_comma_list
-- On INT reduce production expr -> expr_comma_list
-- On INHERIT reduce production expr -> expr_comma_list
-- On INFIXOP4 reduce production expr -> expr_comma_list
-- On INFIXOP3 reduce production expr -> expr_comma_list
-- On INFIXOP2 reduce production expr -> expr_comma_list
-- On INFIXOP1 reduce production expr -> expr_comma_list
-- On INFIXOP0 reduce production expr -> expr_comma_list
-- On IN reduce production expr -> expr_comma_list
-- On IF reduce production expr -> expr_comma_list
-- On GREATERRBRACKET reduce production expr -> expr_comma_list
-- On GREATERRBRACE reduce production expr -> expr_comma_list
-- On GREATERGREATER reduce production expr -> expr_comma_list
-- On GREATER reduce production expr -> expr_comma_list
-- On FUNCTION reduce production expr -> expr_comma_list
-- On FUN reduce production expr -> expr_comma_list
-- On FOR reduce production expr -> expr_comma_list
-- On FLOAT reduce production expr -> expr_comma_list
-- On FALSE reduce production expr -> expr_comma_list
-- On EXTERNAL reduce production expr -> expr_comma_list
-- On EXCEPTION reduce production expr -> expr_comma_list
-- On EQUAL reduce production expr -> expr_comma_list
-- On EOF reduce production expr -> expr_comma_list
-- On END reduce production expr -> expr_comma_list
-- On ELSE reduce production expr -> expr_comma_list
-- On DONE reduce production expr -> expr_comma_list
-- On DEF reduce production expr -> expr_comma_list
-- On COLONGREATER reduce production expr -> expr_comma_list
-- On COLONEQUAL reduce production expr -> expr_comma_list
-- On COLONCOLON reduce production expr -> expr_comma_list
-- On COLON reduce production expr -> expr_comma_list
-- On CLASS reduce production expr -> expr_comma_list
-- On CHAR reduce production expr -> expr_comma_list
-- On BEGIN reduce production expr -> expr_comma_list
-- On BARRBRACKET reduce production expr -> expr_comma_list
-- On BARBAR reduce production expr -> expr_comma_list
-- On BAR reduce production expr -> expr_comma_list
-- On ASSERT reduce production expr -> expr_comma_list
-- On AND reduce production expr -> expr_comma_list
-- On AMPERSAND reduce production expr -> expr_comma_list
-- On AMPERAMPER reduce production expr -> expr_comma_list

State 500:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 501
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 501:
## Known stack suffix:
## expr_comma_list COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list COMMA expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On WITH reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On WHILE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On VIRTUAL reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On VAL reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On UIDENT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On TYPE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On TRY reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On TRUE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On STRING reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On SHARP reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On SEMISEMI reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On SEMI reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On RPAREN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On RBRACKET reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On RBRACE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On QUESTION reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On PREFIXOP reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On PARSER reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On OPEN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On NEW reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On MODULE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On METHOD reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On MATCH reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LPAREN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LOC reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LIDENT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LET reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACKETLESS reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACKETBAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACKET reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACELESS reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACEBAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LAZY reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On INT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On INHERIT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On IN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On IF reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On GREATERRBRACKET reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On GREATERRBRACE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On GREATERGREATER reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FUNCTION reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FUN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FOR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FLOAT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FALSE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On EXTERNAL reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On EXCEPTION reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On EOF reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On END reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On ELSE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On DONE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On DEF reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On COMMA reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On COLONGREATER reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On COLONEQUAL reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On COLON reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On CLASS reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On CHAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On BEGIN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On BARRBRACKET reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On BAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On ASSERT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On AND reduce production expr_comma_list -> expr_comma_list COMMA expr

State 502:
## Known stack suffix:
## expr SUBTRACTIVE
## LR(1) items:
expr -> expr SUBTRACTIVE . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 503
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 503:
## Known stack suffix:
## expr SUBTRACTIVE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr SUBTRACTIVE expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
## Reductions:
-- On error reduce production expr -> expr SUBTRACTIVE expr
-- On WITH reduce production expr -> expr SUBTRACTIVE expr
-- On WHILE reduce production expr -> expr SUBTRACTIVE expr
-- On VIRTUAL reduce production expr -> expr SUBTRACTIVE expr
-- On VAL reduce production expr -> expr SUBTRACTIVE expr
-- On UIDENT reduce production expr -> expr SUBTRACTIVE expr
-- On TYPE reduce production expr -> expr SUBTRACTIVE expr
-- On TRY reduce production expr -> expr SUBTRACTIVE expr
-- On TRUE reduce production expr -> expr SUBTRACTIVE expr
-- On SUBTRACTIVE reduce production expr -> expr SUBTRACTIVE expr
-- On STRING reduce production expr -> expr SUBTRACTIVE expr
-- On SHARP reduce production expr -> expr SUBTRACTIVE expr
-- On SEMISEMI reduce production expr -> expr SUBTRACTIVE expr
-- On SEMI reduce production expr -> expr SUBTRACTIVE expr
-- On RPAREN reduce production expr -> expr SUBTRACTIVE expr
-- On RBRACKET reduce production expr -> expr SUBTRACTIVE expr
-- On RBRACE reduce production expr -> expr SUBTRACTIVE expr
-- On QUESTION reduce production expr -> expr SUBTRACTIVE expr
-- On PREFIXOP reduce production expr -> expr SUBTRACTIVE expr
-- On PARSER reduce production expr -> expr SUBTRACTIVE expr
-- On OR reduce production expr -> expr SUBTRACTIVE expr
-- On OPEN reduce production expr -> expr SUBTRACTIVE expr
-- On NEW reduce production expr -> expr SUBTRACTIVE expr
-- On MODULE reduce production expr -> expr SUBTRACTIVE expr
-- On METHOD reduce production expr -> expr SUBTRACTIVE expr
-- On MATCH reduce production expr -> expr SUBTRACTIVE expr
-- On LPAREN reduce production expr -> expr SUBTRACTIVE expr
-- On LOC reduce production expr -> expr SUBTRACTIVE expr
-- On LIDENT reduce production expr -> expr SUBTRACTIVE expr
-- On LET reduce production expr -> expr SUBTRACTIVE expr
-- On LESSGREATER reduce production expr -> expr SUBTRACTIVE expr
-- On LESS reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACKETLESS reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACKETBAR reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACKET reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACELESS reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACEBAR reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACE reduce production expr -> expr SUBTRACTIVE expr
-- On LAZY reduce production expr -> expr SUBTRACTIVE expr
-- On INT reduce production expr -> expr SUBTRACTIVE expr
-- On INHERIT reduce production expr -> expr SUBTRACTIVE expr
-- On INFIXOP2 reduce production expr -> expr SUBTRACTIVE expr
-- On INFIXOP1 reduce production expr -> expr SUBTRACTIVE expr
-- On INFIXOP0 reduce production expr -> expr SUBTRACTIVE expr
-- On IN reduce production expr -> expr SUBTRACTIVE expr
-- On IF reduce production expr -> expr SUBTRACTIVE expr
-- On GREATERRBRACKET reduce production expr -> expr SUBTRACTIVE expr
-- On GREATERRBRACE reduce production expr -> expr SUBTRACTIVE expr
-- On GREATERGREATER reduce production expr -> expr SUBTRACTIVE expr
-- On GREATER reduce production expr -> expr SUBTRACTIVE expr
-- On FUNCTION reduce production expr -> expr SUBTRACTIVE expr
-- On FUN reduce production expr -> expr SUBTRACTIVE expr
-- On FOR reduce production expr -> expr SUBTRACTIVE expr
-- On FLOAT reduce production expr -> expr SUBTRACTIVE expr
-- On FALSE reduce production expr -> expr SUBTRACTIVE expr
-- On EXTERNAL reduce production expr -> expr SUBTRACTIVE expr
-- On EXCEPTION reduce production expr -> expr SUBTRACTIVE expr
-- On EQUAL reduce production expr -> expr SUBTRACTIVE expr
-- On EOF reduce production expr -> expr SUBTRACTIVE expr
-- On END reduce production expr -> expr SUBTRACTIVE expr
-- On ELSE reduce production expr -> expr SUBTRACTIVE expr
-- On DONE reduce production expr -> expr SUBTRACTIVE expr
-- On DEF reduce production expr -> expr SUBTRACTIVE expr
-- On COMMA reduce production expr -> expr SUBTRACTIVE expr
-- On COLONGREATER reduce production expr -> expr SUBTRACTIVE expr
-- On COLONEQUAL reduce production expr -> expr SUBTRACTIVE expr
-- On COLONCOLON reduce production expr -> expr SUBTRACTIVE expr
-- On COLON reduce production expr -> expr SUBTRACTIVE expr
-- On CLASS reduce production expr -> expr SUBTRACTIVE expr
-- On CHAR reduce production expr -> expr SUBTRACTIVE expr
-- On BEGIN reduce production expr -> expr SUBTRACTIVE expr
-- On BARRBRACKET reduce production expr -> expr SUBTRACTIVE expr
-- On BARBAR reduce production expr -> expr SUBTRACTIVE expr
-- On BAR reduce production expr -> expr SUBTRACTIVE expr
-- On ASSERT reduce production expr -> expr SUBTRACTIVE expr
-- On AND reduce production expr -> expr SUBTRACTIVE expr
-- On AMPERSAND reduce production expr -> expr SUBTRACTIVE expr
-- On AMPERAMPER reduce production expr -> expr SUBTRACTIVE expr

State 504:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr -> expr STAR . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 505
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 505:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr STAR expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 506
## Reductions:
-- On error reduce production expr -> expr STAR expr
-- On WITH reduce production expr -> expr STAR expr
-- On WHILE reduce production expr -> expr STAR expr
-- On VIRTUAL reduce production expr -> expr STAR expr
-- On VAL reduce production expr -> expr STAR expr
-- On UIDENT reduce production expr -> expr STAR expr
-- On TYPE reduce production expr -> expr STAR expr
-- On TRY reduce production expr -> expr STAR expr
-- On TRUE reduce production expr -> expr STAR expr
-- On SUBTRACTIVE reduce production expr -> expr STAR expr
-- On STRING reduce production expr -> expr STAR expr
-- On STAR reduce production expr -> expr STAR expr
-- On SHARP reduce production expr -> expr STAR expr
-- On SEMISEMI reduce production expr -> expr STAR expr
-- On SEMI reduce production expr -> expr STAR expr
-- On RPAREN reduce production expr -> expr STAR expr
-- On RBRACKET reduce production expr -> expr STAR expr
-- On RBRACE reduce production expr -> expr STAR expr
-- On QUESTION reduce production expr -> expr STAR expr
-- On PREFIXOP reduce production expr -> expr STAR expr
-- On PARSER reduce production expr -> expr STAR expr
-- On OR reduce production expr -> expr STAR expr
-- On OPEN reduce production expr -> expr STAR expr
-- On NEW reduce production expr -> expr STAR expr
-- On MODULE reduce production expr -> expr STAR expr
-- On METHOD reduce production expr -> expr STAR expr
-- On MATCH reduce production expr -> expr STAR expr
-- On LPAREN reduce production expr -> expr STAR expr
-- On LOC reduce production expr -> expr STAR expr
-- On LIDENT reduce production expr -> expr STAR expr
-- On LET reduce production expr -> expr STAR expr
-- On LESSGREATER reduce production expr -> expr STAR expr
-- On LESS reduce production expr -> expr STAR expr
-- On LBRACKETLESS reduce production expr -> expr STAR expr
-- On LBRACKETBAR reduce production expr -> expr STAR expr
-- On LBRACKET reduce production expr -> expr STAR expr
-- On LBRACELESS reduce production expr -> expr STAR expr
-- On LBRACEBAR reduce production expr -> expr STAR expr
-- On LBRACE reduce production expr -> expr STAR expr
-- On LAZY reduce production expr -> expr STAR expr
-- On INT reduce production expr -> expr STAR expr
-- On INHERIT reduce production expr -> expr STAR expr
-- On INFIXOP3 reduce production expr -> expr STAR expr
-- On INFIXOP2 reduce production expr -> expr STAR expr
-- On INFIXOP1 reduce production expr -> expr STAR expr
-- On INFIXOP0 reduce production expr -> expr STAR expr
-- On IN reduce production expr -> expr STAR expr
-- On IF reduce production expr -> expr STAR expr
-- On GREATERRBRACKET reduce production expr -> expr STAR expr
-- On GREATERRBRACE reduce production expr -> expr STAR expr
-- On GREATERGREATER reduce production expr -> expr STAR expr
-- On GREATER reduce production expr -> expr STAR expr
-- On FUNCTION reduce production expr -> expr STAR expr
-- On FUN reduce production expr -> expr STAR expr
-- On FOR reduce production expr -> expr STAR expr
-- On FLOAT reduce production expr -> expr STAR expr
-- On FALSE reduce production expr -> expr STAR expr
-- On EXTERNAL reduce production expr -> expr STAR expr
-- On EXCEPTION reduce production expr -> expr STAR expr
-- On EQUAL reduce production expr -> expr STAR expr
-- On EOF reduce production expr -> expr STAR expr
-- On END reduce production expr -> expr STAR expr
-- On ELSE reduce production expr -> expr STAR expr
-- On DONE reduce production expr -> expr STAR expr
-- On DEF reduce production expr -> expr STAR expr
-- On COMMA reduce production expr -> expr STAR expr
-- On COLONGREATER reduce production expr -> expr STAR expr
-- On COLONEQUAL reduce production expr -> expr STAR expr
-- On COLONCOLON reduce production expr -> expr STAR expr
-- On COLON reduce production expr -> expr STAR expr
-- On CLASS reduce production expr -> expr STAR expr
-- On CHAR reduce production expr -> expr STAR expr
-- On BEGIN reduce production expr -> expr STAR expr
-- On BARRBRACKET reduce production expr -> expr STAR expr
-- On BARBAR reduce production expr -> expr STAR expr
-- On BAR reduce production expr -> expr STAR expr
-- On ASSERT reduce production expr -> expr STAR expr
-- On AND reduce production expr -> expr STAR expr
-- On AMPERSAND reduce production expr -> expr STAR expr
-- On AMPERAMPER reduce production expr -> expr STAR expr

State 506:
## Known stack suffix:
## expr INFIXOP4
## LR(1) items:
expr -> expr INFIXOP4 . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 507
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 507:
## Known stack suffix:
## expr INFIXOP4 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP4 expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 506
## Reductions:
-- On error reduce production expr -> expr INFIXOP4 expr
-- On WITH reduce production expr -> expr INFIXOP4 expr
-- On WHILE reduce production expr -> expr INFIXOP4 expr
-- On VIRTUAL reduce production expr -> expr INFIXOP4 expr
-- On VAL reduce production expr -> expr INFIXOP4 expr
-- On UIDENT reduce production expr -> expr INFIXOP4 expr
-- On TYPE reduce production expr -> expr INFIXOP4 expr
-- On TRY reduce production expr -> expr INFIXOP4 expr
-- On TRUE reduce production expr -> expr INFIXOP4 expr
-- On SUBTRACTIVE reduce production expr -> expr INFIXOP4 expr
-- On STRING reduce production expr -> expr INFIXOP4 expr
-- On STAR reduce production expr -> expr INFIXOP4 expr
-- On SHARP reduce production expr -> expr INFIXOP4 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP4 expr
-- On SEMI reduce production expr -> expr INFIXOP4 expr
-- On RPAREN reduce production expr -> expr INFIXOP4 expr
-- On RBRACKET reduce production expr -> expr INFIXOP4 expr
-- On RBRACE reduce production expr -> expr INFIXOP4 expr
-- On QUESTION reduce production expr -> expr INFIXOP4 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP4 expr
-- On PARSER reduce production expr -> expr INFIXOP4 expr
-- On OR reduce production expr -> expr INFIXOP4 expr
-- On OPEN reduce production expr -> expr INFIXOP4 expr
-- On NEW reduce production expr -> expr INFIXOP4 expr
-- On MODULE reduce production expr -> expr INFIXOP4 expr
-- On METHOD reduce production expr -> expr INFIXOP4 expr
-- On MATCH reduce production expr -> expr INFIXOP4 expr
-- On LPAREN reduce production expr -> expr INFIXOP4 expr
-- On LOC reduce production expr -> expr INFIXOP4 expr
-- On LIDENT reduce production expr -> expr INFIXOP4 expr
-- On LET reduce production expr -> expr INFIXOP4 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP4 expr
-- On LESS reduce production expr -> expr INFIXOP4 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP4 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP4 expr
-- On LBRACKET reduce production expr -> expr INFIXOP4 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP4 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP4 expr
-- On LBRACE reduce production expr -> expr INFIXOP4 expr
-- On LAZY reduce production expr -> expr INFIXOP4 expr
-- On INT reduce production expr -> expr INFIXOP4 expr
-- On INHERIT reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP3 reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP2 reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP1 reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP4 expr
-- On IN reduce production expr -> expr INFIXOP4 expr
-- On IF reduce production expr -> expr INFIXOP4 expr
-- On GREATERRBRACKET reduce production expr -> expr INFIXOP4 expr
-- On GREATERRBRACE reduce production expr -> expr INFIXOP4 expr
-- On GREATERGREATER reduce production expr -> expr INFIXOP4 expr
-- On GREATER reduce production expr -> expr INFIXOP4 expr
-- On FUNCTION reduce production expr -> expr INFIXOP4 expr
-- On FUN reduce production expr -> expr INFIXOP4 expr
-- On FOR reduce production expr -> expr INFIXOP4 expr
-- On FLOAT reduce production expr -> expr INFIXOP4 expr
-- On FALSE reduce production expr -> expr INFIXOP4 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP4 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP4 expr
-- On EQUAL reduce production expr -> expr INFIXOP4 expr
-- On EOF reduce production expr -> expr INFIXOP4 expr
-- On END reduce production expr -> expr INFIXOP4 expr
-- On ELSE reduce production expr -> expr INFIXOP4 expr
-- On DONE reduce production expr -> expr INFIXOP4 expr
-- On DEF reduce production expr -> expr INFIXOP4 expr
-- On COMMA reduce production expr -> expr INFIXOP4 expr
-- On COLONGREATER reduce production expr -> expr INFIXOP4 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP4 expr
-- On COLONCOLON reduce production expr -> expr INFIXOP4 expr
-- On COLON reduce production expr -> expr INFIXOP4 expr
-- On CLASS reduce production expr -> expr INFIXOP4 expr
-- On CHAR reduce production expr -> expr INFIXOP4 expr
-- On BEGIN reduce production expr -> expr INFIXOP4 expr
-- On BARRBRACKET reduce production expr -> expr INFIXOP4 expr
-- On BARBAR reduce production expr -> expr INFIXOP4 expr
-- On BAR reduce production expr -> expr INFIXOP4 expr
-- On ASSERT reduce production expr -> expr INFIXOP4 expr
-- On AND reduce production expr -> expr INFIXOP4 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP4 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP4 expr

State 508:
## Known stack suffix:
## constr_longident
## LR(1) items:
expr -> constr_longident . simple_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> constr_longident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 509
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:
-- On error reduce production simple_expr -> constr_longident
-- On WITH reduce production simple_expr -> constr_longident
-- On WHILE reduce production simple_expr -> constr_longident
-- On VIRTUAL reduce production simple_expr -> constr_longident
-- On VAL reduce production simple_expr -> constr_longident
-- On TYPE reduce production simple_expr -> constr_longident
-- On TRY reduce production simple_expr -> constr_longident
-- On SUBTRACTIVE reduce production simple_expr -> constr_longident
-- On STAR reduce production simple_expr -> constr_longident
-- On SHARP reduce production simple_expr -> constr_longident
-- On SEMISEMI reduce production simple_expr -> constr_longident
-- On SEMI reduce production simple_expr -> constr_longident
-- On RPAREN reduce production simple_expr -> constr_longident
-- On RBRACKET reduce production simple_expr -> constr_longident
-- On RBRACE reduce production simple_expr -> constr_longident
-- On QUESTION reduce production simple_expr -> constr_longident
-- On PARSER reduce production simple_expr -> constr_longident
-- On OR reduce production simple_expr -> constr_longident
-- On OPEN reduce production simple_expr -> constr_longident
-- On MODULE reduce production simple_expr -> constr_longident
-- On METHOD reduce production simple_expr -> constr_longident
-- On MATCH reduce production simple_expr -> constr_longident
-- On LET reduce production simple_expr -> constr_longident
-- On LESSLESSGREATERGREATER reduce production simple_expr -> constr_longident
-- On LESSLESS reduce production simple_expr -> constr_longident
-- On LESSGREATER reduce production simple_expr -> constr_longident
-- On LESS reduce production simple_expr -> constr_longident
-- On LBRACEBAR reduce production simple_expr -> constr_longident
-- On LAZY reduce production simple_expr -> constr_longident
-- On INHERIT reduce production simple_expr -> constr_longident
-- On INFIXOP4 reduce production simple_expr -> constr_longident
-- On INFIXOP3 reduce production simple_expr -> constr_longident
-- On INFIXOP2 reduce production simple_expr -> constr_longident
-- On INFIXOP1 reduce production simple_expr -> constr_longident
-- On INFIXOP0 reduce production simple_expr -> constr_longident
-- On IN reduce production simple_expr -> constr_longident
-- On IF reduce production simple_expr -> constr_longident
-- On GREATERRBRACKET reduce production simple_expr -> constr_longident
-- On GREATERRBRACE reduce production simple_expr -> constr_longident
-- On GREATERGREATER reduce production simple_expr -> constr_longident
-- On GREATER reduce production simple_expr -> constr_longident
-- On FUNCTION reduce production simple_expr -> constr_longident
-- On FUN reduce production simple_expr -> constr_longident
-- On FOR reduce production simple_expr -> constr_longident
-- On EXTERNAL reduce production simple_expr -> constr_longident
-- On EXCEPTION reduce production simple_expr -> constr_longident
-- On EQUAL reduce production simple_expr -> constr_longident
-- On EOF reduce production simple_expr -> constr_longident
-- On END reduce production simple_expr -> constr_longident
-- On ELSE reduce production simple_expr -> constr_longident
-- On DOT reduce production simple_expr -> constr_longident
-- On DONE reduce production simple_expr -> constr_longident
-- On DEF reduce production simple_expr -> constr_longident
-- On COMMA reduce production simple_expr -> constr_longident
-- On COLONGREATER reduce production simple_expr -> constr_longident
-- On COLONEQUAL reduce production simple_expr -> constr_longident
-- On COLONCOLON reduce production simple_expr -> constr_longident
-- On COLON reduce production simple_expr -> constr_longident
-- On CLASS reduce production simple_expr -> constr_longident
-- On BARRBRACKET reduce production simple_expr -> constr_longident
-- On BARBAR reduce production simple_expr -> constr_longident
-- On BAR reduce production simple_expr -> constr_longident
-- On ASSERT reduce production simple_expr -> constr_longident
-- On AND reduce production simple_expr -> constr_longident
-- On AMPERSAND reduce production simple_expr -> constr_longident
-- On AMPERAMPER reduce production simple_expr -> constr_longident

State 509:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
expr -> constr_longident simple_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 476
-- On DOT shift to state 479
## Reductions:
-- On error reduce production expr -> constr_longident simple_expr
-- On WITH reduce production expr -> constr_longident simple_expr
-- On WHILE reduce production expr -> constr_longident simple_expr
-- On VIRTUAL reduce production expr -> constr_longident simple_expr
-- On VAL reduce production expr -> constr_longident simple_expr
-- On UIDENT reduce production expr -> constr_longident simple_expr
-- On TYPE reduce production expr -> constr_longident simple_expr
-- On TRY reduce production expr -> constr_longident simple_expr
-- On TRUE reduce production expr -> constr_longident simple_expr
-- On SUBTRACTIVE reduce production expr -> constr_longident simple_expr
-- On STRING reduce production expr -> constr_longident simple_expr
-- On STAR reduce production expr -> constr_longident simple_expr
-- On SEMISEMI reduce production expr -> constr_longident simple_expr
-- On SEMI reduce production expr -> constr_longident simple_expr
-- On RPAREN reduce production expr -> constr_longident simple_expr
-- On RBRACKET reduce production expr -> constr_longident simple_expr
-- On RBRACE reduce production expr -> constr_longident simple_expr
-- On QUESTION reduce production expr -> constr_longident simple_expr
-- On PREFIXOP reduce production expr -> constr_longident simple_expr
-- On PARSER reduce production expr -> constr_longident simple_expr
-- On OR reduce production expr -> constr_longident simple_expr
-- On OPEN reduce production expr -> constr_longident simple_expr
-- On NEW reduce production expr -> constr_longident simple_expr
-- On MODULE reduce production expr -> constr_longident simple_expr
-- On METHOD reduce production expr -> constr_longident simple_expr
-- On MATCH reduce production expr -> constr_longident simple_expr
-- On LPAREN reduce production expr -> constr_longident simple_expr
-- On LOC reduce production expr -> constr_longident simple_expr
-- On LIDENT reduce production expr -> constr_longident simple_expr
-- On LET reduce production expr -> constr_longident simple_expr
-- On LESSGREATER reduce production expr -> constr_longident simple_expr
-- On LESS reduce production expr -> constr_longident simple_expr
-- On LBRACKETLESS reduce production expr -> constr_longident simple_expr
-- On LBRACKETBAR reduce production expr -> constr_longident simple_expr
-- On LBRACKET reduce production expr -> constr_longident simple_expr
-- On LBRACELESS reduce production expr -> constr_longident simple_expr
-- On LBRACEBAR reduce production expr -> constr_longident simple_expr
-- On LBRACE reduce production expr -> constr_longident simple_expr
-- On LAZY reduce production expr -> constr_longident simple_expr
-- On INT reduce production expr -> constr_longident simple_expr
-- On INHERIT reduce production expr -> constr_longident simple_expr
-- On INFIXOP4 reduce production expr -> constr_longident simple_expr
-- On INFIXOP3 reduce production expr -> constr_longident simple_expr
-- On INFIXOP2 reduce production expr -> constr_longident simple_expr
-- On INFIXOP1 reduce production expr -> constr_longident simple_expr
-- On INFIXOP0 reduce production expr -> constr_longident simple_expr
-- On IN reduce production expr -> constr_longident simple_expr
-- On IF reduce production expr -> constr_longident simple_expr
-- On GREATERRBRACKET reduce production expr -> constr_longident simple_expr
-- On GREATERRBRACE reduce production expr -> constr_longident simple_expr
-- On GREATERGREATER reduce production expr -> constr_longident simple_expr
-- On GREATER reduce production expr -> constr_longident simple_expr
-- On FUNCTION reduce production expr -> constr_longident simple_expr
-- On FUN reduce production expr -> constr_longident simple_expr
-- On FOR reduce production expr -> constr_longident simple_expr
-- On FLOAT reduce production expr -> constr_longident simple_expr
-- On FALSE reduce production expr -> constr_longident simple_expr
-- On EXTERNAL reduce production expr -> constr_longident simple_expr
-- On EXCEPTION reduce production expr -> constr_longident simple_expr
-- On EQUAL reduce production expr -> constr_longident simple_expr
-- On EOF reduce production expr -> constr_longident simple_expr
-- On END reduce production expr -> constr_longident simple_expr
-- On ELSE reduce production expr -> constr_longident simple_expr
-- On DONE reduce production expr -> constr_longident simple_expr
-- On DEF reduce production expr -> constr_longident simple_expr
-- On COMMA reduce production expr -> constr_longident simple_expr
-- On COLONGREATER reduce production expr -> constr_longident simple_expr
-- On COLONEQUAL reduce production expr -> constr_longident simple_expr
-- On COLONCOLON reduce production expr -> constr_longident simple_expr
-- On COLON reduce production expr -> constr_longident simple_expr
-- On CLASS reduce production expr -> constr_longident simple_expr
-- On CHAR reduce production expr -> constr_longident simple_expr
-- On BEGIN reduce production expr -> constr_longident simple_expr
-- On BARRBRACKET reduce production expr -> constr_longident simple_expr
-- On BARBAR reduce production expr -> constr_longident simple_expr
-- On BAR reduce production expr -> constr_longident simple_expr
-- On ASSERT reduce production expr -> constr_longident simple_expr
-- On AND reduce production expr -> constr_longident simple_expr
-- On AMPERSAND reduce production expr -> constr_longident simple_expr
-- On AMPERAMPER reduce production expr -> constr_longident simple_expr

State 510:
## Known stack suffix:
## expr INFIXOP3
## LR(1) items:
expr -> expr INFIXOP3 . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 511
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 511:
## Known stack suffix:
## expr INFIXOP3 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP3 expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 506
## Reductions:
-- On error reduce production expr -> expr INFIXOP3 expr
-- On WITH reduce production expr -> expr INFIXOP3 expr
-- On WHILE reduce production expr -> expr INFIXOP3 expr
-- On VIRTUAL reduce production expr -> expr INFIXOP3 expr
-- On VAL reduce production expr -> expr INFIXOP3 expr
-- On UIDENT reduce production expr -> expr INFIXOP3 expr
-- On TYPE reduce production expr -> expr INFIXOP3 expr
-- On TRY reduce production expr -> expr INFIXOP3 expr
-- On TRUE reduce production expr -> expr INFIXOP3 expr
-- On SUBTRACTIVE reduce production expr -> expr INFIXOP3 expr
-- On STRING reduce production expr -> expr INFIXOP3 expr
-- On STAR reduce production expr -> expr INFIXOP3 expr
-- On SHARP reduce production expr -> expr INFIXOP3 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP3 expr
-- On SEMI reduce production expr -> expr INFIXOP3 expr
-- On RPAREN reduce production expr -> expr INFIXOP3 expr
-- On RBRACKET reduce production expr -> expr INFIXOP3 expr
-- On RBRACE reduce production expr -> expr INFIXOP3 expr
-- On QUESTION reduce production expr -> expr INFIXOP3 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP3 expr
-- On PARSER reduce production expr -> expr INFIXOP3 expr
-- On OR reduce production expr -> expr INFIXOP3 expr
-- On OPEN reduce production expr -> expr INFIXOP3 expr
-- On NEW reduce production expr -> expr INFIXOP3 expr
-- On MODULE reduce production expr -> expr INFIXOP3 expr
-- On METHOD reduce production expr -> expr INFIXOP3 expr
-- On MATCH reduce production expr -> expr INFIXOP3 expr
-- On LPAREN reduce production expr -> expr INFIXOP3 expr
-- On LOC reduce production expr -> expr INFIXOP3 expr
-- On LIDENT reduce production expr -> expr INFIXOP3 expr
-- On LET reduce production expr -> expr INFIXOP3 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP3 expr
-- On LESS reduce production expr -> expr INFIXOP3 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP3 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP3 expr
-- On LBRACKET reduce production expr -> expr INFIXOP3 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP3 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP3 expr
-- On LBRACE reduce production expr -> expr INFIXOP3 expr
-- On LAZY reduce production expr -> expr INFIXOP3 expr
-- On INT reduce production expr -> expr INFIXOP3 expr
-- On INHERIT reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP3 reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP2 reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP1 reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP3 expr
-- On IN reduce production expr -> expr INFIXOP3 expr
-- On IF reduce production expr -> expr INFIXOP3 expr
-- On GREATERRBRACKET reduce production expr -> expr INFIXOP3 expr
-- On GREATERRBRACE reduce production expr -> expr INFIXOP3 expr
-- On GREATERGREATER reduce production expr -> expr INFIXOP3 expr
-- On GREATER reduce production expr -> expr INFIXOP3 expr
-- On FUNCTION reduce production expr -> expr INFIXOP3 expr
-- On FUN reduce production expr -> expr INFIXOP3 expr
-- On FOR reduce production expr -> expr INFIXOP3 expr
-- On FLOAT reduce production expr -> expr INFIXOP3 expr
-- On FALSE reduce production expr -> expr INFIXOP3 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP3 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP3 expr
-- On EQUAL reduce production expr -> expr INFIXOP3 expr
-- On EOF reduce production expr -> expr INFIXOP3 expr
-- On END reduce production expr -> expr INFIXOP3 expr
-- On ELSE reduce production expr -> expr INFIXOP3 expr
-- On DONE reduce production expr -> expr INFIXOP3 expr
-- On DEF reduce production expr -> expr INFIXOP3 expr
-- On COMMA reduce production expr -> expr INFIXOP3 expr
-- On COLONGREATER reduce production expr -> expr INFIXOP3 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP3 expr
-- On COLONCOLON reduce production expr -> expr INFIXOP3 expr
-- On COLON reduce production expr -> expr INFIXOP3 expr
-- On CLASS reduce production expr -> expr INFIXOP3 expr
-- On CHAR reduce production expr -> expr INFIXOP3 expr
-- On BEGIN reduce production expr -> expr INFIXOP3 expr
-- On BARRBRACKET reduce production expr -> expr INFIXOP3 expr
-- On BARBAR reduce production expr -> expr INFIXOP3 expr
-- On BAR reduce production expr -> expr INFIXOP3 expr
-- On ASSERT reduce production expr -> expr INFIXOP3 expr
-- On AND reduce production expr -> expr INFIXOP3 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP3 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP3 expr

State 512:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 513
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 513:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr OR expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> expr OR expr
-- On WITH reduce production expr -> expr OR expr
-- On WHILE reduce production expr -> expr OR expr
-- On VIRTUAL reduce production expr -> expr OR expr
-- On VAL reduce production expr -> expr OR expr
-- On UIDENT reduce production expr -> expr OR expr
-- On TYPE reduce production expr -> expr OR expr
-- On TRY reduce production expr -> expr OR expr
-- On TRUE reduce production expr -> expr OR expr
-- On STRING reduce production expr -> expr OR expr
-- On SHARP reduce production expr -> expr OR expr
-- On SEMISEMI reduce production expr -> expr OR expr
-- On SEMI reduce production expr -> expr OR expr
-- On RPAREN reduce production expr -> expr OR expr
-- On RBRACKET reduce production expr -> expr OR expr
-- On RBRACE reduce production expr -> expr OR expr
-- On QUESTION reduce production expr -> expr OR expr
-- On PREFIXOP reduce production expr -> expr OR expr
-- On PARSER reduce production expr -> expr OR expr
-- On OPEN reduce production expr -> expr OR expr
-- On NEW reduce production expr -> expr OR expr
-- On MODULE reduce production expr -> expr OR expr
-- On METHOD reduce production expr -> expr OR expr
-- On MATCH reduce production expr -> expr OR expr
-- On LPAREN reduce production expr -> expr OR expr
-- On LOC reduce production expr -> expr OR expr
-- On LIDENT reduce production expr -> expr OR expr
-- On LET reduce production expr -> expr OR expr
-- On LBRACKETLESS reduce production expr -> expr OR expr
-- On LBRACKETBAR reduce production expr -> expr OR expr
-- On LBRACKET reduce production expr -> expr OR expr
-- On LBRACELESS reduce production expr -> expr OR expr
-- On LBRACEBAR reduce production expr -> expr OR expr
-- On LBRACE reduce production expr -> expr OR expr
-- On LAZY reduce production expr -> expr OR expr
-- On INT reduce production expr -> expr OR expr
-- On INHERIT reduce production expr -> expr OR expr
-- On IN reduce production expr -> expr OR expr
-- On IF reduce production expr -> expr OR expr
-- On GREATERRBRACKET reduce production expr -> expr OR expr
-- On GREATERRBRACE reduce production expr -> expr OR expr
-- On GREATERGREATER reduce production expr -> expr OR expr
-- On FUNCTION reduce production expr -> expr OR expr
-- On FUN reduce production expr -> expr OR expr
-- On FOR reduce production expr -> expr OR expr
-- On FLOAT reduce production expr -> expr OR expr
-- On FALSE reduce production expr -> expr OR expr
-- On EXTERNAL reduce production expr -> expr OR expr
-- On EXCEPTION reduce production expr -> expr OR expr
-- On EOF reduce production expr -> expr OR expr
-- On END reduce production expr -> expr OR expr
-- On ELSE reduce production expr -> expr OR expr
-- On DONE reduce production expr -> expr OR expr
-- On DEF reduce production expr -> expr OR expr
-- On COMMA reduce production expr -> expr OR expr
-- On COLONGREATER reduce production expr -> expr OR expr
-- On COLONEQUAL reduce production expr -> expr OR expr
-- On COLON reduce production expr -> expr OR expr
-- On CLASS reduce production expr -> expr OR expr
-- On CHAR reduce production expr -> expr OR expr
-- On BEGIN reduce production expr -> expr OR expr
-- On BARRBRACKET reduce production expr -> expr OR expr
-- On BAR reduce production expr -> expr OR expr
-- On ASSERT reduce production expr -> expr OR expr
-- On AND reduce production expr -> expr OR expr

State 514:
## Known stack suffix:
## expr LESSGREATER
## LR(1) items:
expr -> expr LESSGREATER . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 515
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 515:
## Known stack suffix:
## expr LESSGREATER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr LESSGREATER expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On COLONCOLON shift to state 520
## Reductions:
-- On error reduce production expr -> expr LESSGREATER expr
-- On WITH reduce production expr -> expr LESSGREATER expr
-- On WHILE reduce production expr -> expr LESSGREATER expr
-- On VIRTUAL reduce production expr -> expr LESSGREATER expr
-- On VAL reduce production expr -> expr LESSGREATER expr
-- On UIDENT reduce production expr -> expr LESSGREATER expr
-- On TYPE reduce production expr -> expr LESSGREATER expr
-- On TRY reduce production expr -> expr LESSGREATER expr
-- On TRUE reduce production expr -> expr LESSGREATER expr
-- On STRING reduce production expr -> expr LESSGREATER expr
-- On SHARP reduce production expr -> expr LESSGREATER expr
-- On SEMISEMI reduce production expr -> expr LESSGREATER expr
-- On SEMI reduce production expr -> expr LESSGREATER expr
-- On RPAREN reduce production expr -> expr LESSGREATER expr
-- On RBRACKET reduce production expr -> expr LESSGREATER expr
-- On RBRACE reduce production expr -> expr LESSGREATER expr
-- On QUESTION reduce production expr -> expr LESSGREATER expr
-- On PREFIXOP reduce production expr -> expr LESSGREATER expr
-- On PARSER reduce production expr -> expr LESSGREATER expr
-- On OR reduce production expr -> expr LESSGREATER expr
-- On OPEN reduce production expr -> expr LESSGREATER expr
-- On NEW reduce production expr -> expr LESSGREATER expr
-- On MODULE reduce production expr -> expr LESSGREATER expr
-- On METHOD reduce production expr -> expr LESSGREATER expr
-- On MATCH reduce production expr -> expr LESSGREATER expr
-- On LPAREN reduce production expr -> expr LESSGREATER expr
-- On LOC reduce production expr -> expr LESSGREATER expr
-- On LIDENT reduce production expr -> expr LESSGREATER expr
-- On LET reduce production expr -> expr LESSGREATER expr
-- On LESSGREATER reduce production expr -> expr LESSGREATER expr
-- On LESS reduce production expr -> expr LESSGREATER expr
-- On LBRACKETLESS reduce production expr -> expr LESSGREATER expr
-- On LBRACKETBAR reduce production expr -> expr LESSGREATER expr
-- On LBRACKET reduce production expr -> expr LESSGREATER expr
-- On LBRACELESS reduce production expr -> expr LESSGREATER expr
-- On LBRACEBAR reduce production expr -> expr LESSGREATER expr
-- On LBRACE reduce production expr -> expr LESSGREATER expr
-- On LAZY reduce production expr -> expr LESSGREATER expr
-- On INT reduce production expr -> expr LESSGREATER expr
-- On INHERIT reduce production expr -> expr LESSGREATER expr
-- On INFIXOP0 reduce production expr -> expr LESSGREATER expr
-- On IN reduce production expr -> expr LESSGREATER expr
-- On IF reduce production expr -> expr LESSGREATER expr
-- On GREATERRBRACKET reduce production expr -> expr LESSGREATER expr
-- On GREATERRBRACE reduce production expr -> expr LESSGREATER expr
-- On GREATERGREATER reduce production expr -> expr LESSGREATER expr
-- On GREATER reduce production expr -> expr LESSGREATER expr
-- On FUNCTION reduce production expr -> expr LESSGREATER expr
-- On FUN reduce production expr -> expr LESSGREATER expr
-- On FOR reduce production expr -> expr LESSGREATER expr
-- On FLOAT reduce production expr -> expr LESSGREATER expr
-- On FALSE reduce production expr -> expr LESSGREATER expr
-- On EXTERNAL reduce production expr -> expr LESSGREATER expr
-- On EXCEPTION reduce production expr -> expr LESSGREATER expr
-- On EQUAL reduce production expr -> expr LESSGREATER expr
-- On EOF reduce production expr -> expr LESSGREATER expr
-- On END reduce production expr -> expr LESSGREATER expr
-- On ELSE reduce production expr -> expr LESSGREATER expr
-- On DONE reduce production expr -> expr LESSGREATER expr
-- On DEF reduce production expr -> expr LESSGREATER expr
-- On COMMA reduce production expr -> expr LESSGREATER expr
-- On COLONGREATER reduce production expr -> expr LESSGREATER expr
-- On COLONEQUAL reduce production expr -> expr LESSGREATER expr
-- On COLON reduce production expr -> expr LESSGREATER expr
-- On CLASS reduce production expr -> expr LESSGREATER expr
-- On CHAR reduce production expr -> expr LESSGREATER expr
-- On BEGIN reduce production expr -> expr LESSGREATER expr
-- On BARRBRACKET reduce production expr -> expr LESSGREATER expr
-- On BARBAR reduce production expr -> expr LESSGREATER expr
-- On BAR reduce production expr -> expr LESSGREATER expr
-- On ASSERT reduce production expr -> expr LESSGREATER expr
-- On AND reduce production expr -> expr LESSGREATER expr
-- On AMPERSAND reduce production expr -> expr LESSGREATER expr
-- On AMPERAMPER reduce production expr -> expr LESSGREATER expr

State 516:
## Known stack suffix:
## expr INFIXOP2
## LR(1) items:
expr -> expr INFIXOP2 . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 517
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 517:
## Known stack suffix:
## expr INFIXOP2 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP2 expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
## Reductions:
-- On error reduce production expr -> expr INFIXOP2 expr
-- On WITH reduce production expr -> expr INFIXOP2 expr
-- On WHILE reduce production expr -> expr INFIXOP2 expr
-- On VIRTUAL reduce production expr -> expr INFIXOP2 expr
-- On VAL reduce production expr -> expr INFIXOP2 expr
-- On UIDENT reduce production expr -> expr INFIXOP2 expr
-- On TYPE reduce production expr -> expr INFIXOP2 expr
-- On TRY reduce production expr -> expr INFIXOP2 expr
-- On TRUE reduce production expr -> expr INFIXOP2 expr
-- On SUBTRACTIVE reduce production expr -> expr INFIXOP2 expr
-- On STRING reduce production expr -> expr INFIXOP2 expr
-- On SHARP reduce production expr -> expr INFIXOP2 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP2 expr
-- On SEMI reduce production expr -> expr INFIXOP2 expr
-- On RPAREN reduce production expr -> expr INFIXOP2 expr
-- On RBRACKET reduce production expr -> expr INFIXOP2 expr
-- On RBRACE reduce production expr -> expr INFIXOP2 expr
-- On QUESTION reduce production expr -> expr INFIXOP2 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP2 expr
-- On PARSER reduce production expr -> expr INFIXOP2 expr
-- On OR reduce production expr -> expr INFIXOP2 expr
-- On OPEN reduce production expr -> expr INFIXOP2 expr
-- On NEW reduce production expr -> expr INFIXOP2 expr
-- On MODULE reduce production expr -> expr INFIXOP2 expr
-- On METHOD reduce production expr -> expr INFIXOP2 expr
-- On MATCH reduce production expr -> expr INFIXOP2 expr
-- On LPAREN reduce production expr -> expr INFIXOP2 expr
-- On LOC reduce production expr -> expr INFIXOP2 expr
-- On LIDENT reduce production expr -> expr INFIXOP2 expr
-- On LET reduce production expr -> expr INFIXOP2 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP2 expr
-- On LESS reduce production expr -> expr INFIXOP2 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP2 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP2 expr
-- On LBRACKET reduce production expr -> expr INFIXOP2 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP2 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP2 expr
-- On LBRACE reduce production expr -> expr INFIXOP2 expr
-- On LAZY reduce production expr -> expr INFIXOP2 expr
-- On INT reduce production expr -> expr INFIXOP2 expr
-- On INHERIT reduce production expr -> expr INFIXOP2 expr
-- On INFIXOP2 reduce production expr -> expr INFIXOP2 expr
-- On INFIXOP1 reduce production expr -> expr INFIXOP2 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP2 expr
-- On IN reduce production expr -> expr INFIXOP2 expr
-- On IF reduce production expr -> expr INFIXOP2 expr
-- On GREATERRBRACKET reduce production expr -> expr INFIXOP2 expr
-- On GREATERRBRACE reduce production expr -> expr INFIXOP2 expr
-- On GREATERGREATER reduce production expr -> expr INFIXOP2 expr
-- On GREATER reduce production expr -> expr INFIXOP2 expr
-- On FUNCTION reduce production expr -> expr INFIXOP2 expr
-- On FUN reduce production expr -> expr INFIXOP2 expr
-- On FOR reduce production expr -> expr INFIXOP2 expr
-- On FLOAT reduce production expr -> expr INFIXOP2 expr
-- On FALSE reduce production expr -> expr INFIXOP2 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP2 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP2 expr
-- On EQUAL reduce production expr -> expr INFIXOP2 expr
-- On EOF reduce production expr -> expr INFIXOP2 expr
-- On END reduce production expr -> expr INFIXOP2 expr
-- On ELSE reduce production expr -> expr INFIXOP2 expr
-- On DONE reduce production expr -> expr INFIXOP2 expr
-- On DEF reduce production expr -> expr INFIXOP2 expr
-- On COMMA reduce production expr -> expr INFIXOP2 expr
-- On COLONGREATER reduce production expr -> expr INFIXOP2 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP2 expr
-- On COLONCOLON reduce production expr -> expr INFIXOP2 expr
-- On COLON reduce production expr -> expr INFIXOP2 expr
-- On CLASS reduce production expr -> expr INFIXOP2 expr
-- On CHAR reduce production expr -> expr INFIXOP2 expr
-- On BEGIN reduce production expr -> expr INFIXOP2 expr
-- On BARRBRACKET reduce production expr -> expr INFIXOP2 expr
-- On BARBAR reduce production expr -> expr INFIXOP2 expr
-- On BAR reduce production expr -> expr INFIXOP2 expr
-- On ASSERT reduce production expr -> expr INFIXOP2 expr
-- On AND reduce production expr -> expr INFIXOP2 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP2 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP2 expr

State 518:
## Known stack suffix:
## expr INFIXOP1
## LR(1) items:
expr -> expr INFIXOP1 . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 519
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 519:
## Known stack suffix:
## expr INFIXOP1 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP1 expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On COLONCOLON shift to state 520
## Reductions:
-- On error reduce production expr -> expr INFIXOP1 expr
-- On WITH reduce production expr -> expr INFIXOP1 expr
-- On WHILE reduce production expr -> expr INFIXOP1 expr
-- On VIRTUAL reduce production expr -> expr INFIXOP1 expr
-- On VAL reduce production expr -> expr INFIXOP1 expr
-- On UIDENT reduce production expr -> expr INFIXOP1 expr
-- On TYPE reduce production expr -> expr INFIXOP1 expr
-- On TRY reduce production expr -> expr INFIXOP1 expr
-- On TRUE reduce production expr -> expr INFIXOP1 expr
-- On STRING reduce production expr -> expr INFIXOP1 expr
-- On SHARP reduce production expr -> expr INFIXOP1 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP1 expr
-- On SEMI reduce production expr -> expr INFIXOP1 expr
-- On RPAREN reduce production expr -> expr INFIXOP1 expr
-- On RBRACKET reduce production expr -> expr INFIXOP1 expr
-- On RBRACE reduce production expr -> expr INFIXOP1 expr
-- On QUESTION reduce production expr -> expr INFIXOP1 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP1 expr
-- On PARSER reduce production expr -> expr INFIXOP1 expr
-- On OR reduce production expr -> expr INFIXOP1 expr
-- On OPEN reduce production expr -> expr INFIXOP1 expr
-- On NEW reduce production expr -> expr INFIXOP1 expr
-- On MODULE reduce production expr -> expr INFIXOP1 expr
-- On METHOD reduce production expr -> expr INFIXOP1 expr
-- On MATCH reduce production expr -> expr INFIXOP1 expr
-- On LPAREN reduce production expr -> expr INFIXOP1 expr
-- On LOC reduce production expr -> expr INFIXOP1 expr
-- On LIDENT reduce production expr -> expr INFIXOP1 expr
-- On LET reduce production expr -> expr INFIXOP1 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP1 expr
-- On LESS reduce production expr -> expr INFIXOP1 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP1 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP1 expr
-- On LBRACKET reduce production expr -> expr INFIXOP1 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP1 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP1 expr
-- On LBRACE reduce production expr -> expr INFIXOP1 expr
-- On LAZY reduce production expr -> expr INFIXOP1 expr
-- On INT reduce production expr -> expr INFIXOP1 expr
-- On INHERIT reduce production expr -> expr INFIXOP1 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP1 expr
-- On IN reduce production expr -> expr INFIXOP1 expr
-- On IF reduce production expr -> expr INFIXOP1 expr
-- On GREATERRBRACKET reduce production expr -> expr INFIXOP1 expr
-- On GREATERRBRACE reduce production expr -> expr INFIXOP1 expr
-- On GREATERGREATER reduce production expr -> expr INFIXOP1 expr
-- On GREATER reduce production expr -> expr INFIXOP1 expr
-- On FUNCTION reduce production expr -> expr INFIXOP1 expr
-- On FUN reduce production expr -> expr INFIXOP1 expr
-- On FOR reduce production expr -> expr INFIXOP1 expr
-- On FLOAT reduce production expr -> expr INFIXOP1 expr
-- On FALSE reduce production expr -> expr INFIXOP1 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP1 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP1 expr
-- On EQUAL reduce production expr -> expr INFIXOP1 expr
-- On EOF reduce production expr -> expr INFIXOP1 expr
-- On END reduce production expr -> expr INFIXOP1 expr
-- On ELSE reduce production expr -> expr INFIXOP1 expr
-- On DONE reduce production expr -> expr INFIXOP1 expr
-- On DEF reduce production expr -> expr INFIXOP1 expr
-- On COMMA reduce production expr -> expr INFIXOP1 expr
-- On COLONGREATER reduce production expr -> expr INFIXOP1 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP1 expr
-- On COLON reduce production expr -> expr INFIXOP1 expr
-- On CLASS reduce production expr -> expr INFIXOP1 expr
-- On CHAR reduce production expr -> expr INFIXOP1 expr
-- On BEGIN reduce production expr -> expr INFIXOP1 expr
-- On BARRBRACKET reduce production expr -> expr INFIXOP1 expr
-- On BARBAR reduce production expr -> expr INFIXOP1 expr
-- On BAR reduce production expr -> expr INFIXOP1 expr
-- On ASSERT reduce production expr -> expr INFIXOP1 expr
-- On AND reduce production expr -> expr INFIXOP1 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP1 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP1 expr

State 520:
## Known stack suffix:
## expr COLONCOLON
## LR(1) items:
expr -> expr COLONCOLON . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 521
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 521:
## Known stack suffix:
## expr COLONCOLON expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr COLONCOLON expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On COLONCOLON shift to state 520
## Reductions:
-- On error reduce production expr -> expr COLONCOLON expr
-- On WITH reduce production expr -> expr COLONCOLON expr
-- On WHILE reduce production expr -> expr COLONCOLON expr
-- On VIRTUAL reduce production expr -> expr COLONCOLON expr
-- On VAL reduce production expr -> expr COLONCOLON expr
-- On UIDENT reduce production expr -> expr COLONCOLON expr
-- On TYPE reduce production expr -> expr COLONCOLON expr
-- On TRY reduce production expr -> expr COLONCOLON expr
-- On TRUE reduce production expr -> expr COLONCOLON expr
-- On STRING reduce production expr -> expr COLONCOLON expr
-- On SHARP reduce production expr -> expr COLONCOLON expr
-- On SEMISEMI reduce production expr -> expr COLONCOLON expr
-- On SEMI reduce production expr -> expr COLONCOLON expr
-- On RPAREN reduce production expr -> expr COLONCOLON expr
-- On RBRACKET reduce production expr -> expr COLONCOLON expr
-- On RBRACE reduce production expr -> expr COLONCOLON expr
-- On QUESTION reduce production expr -> expr COLONCOLON expr
-- On PREFIXOP reduce production expr -> expr COLONCOLON expr
-- On PARSER reduce production expr -> expr COLONCOLON expr
-- On OR reduce production expr -> expr COLONCOLON expr
-- On OPEN reduce production expr -> expr COLONCOLON expr
-- On NEW reduce production expr -> expr COLONCOLON expr
-- On MODULE reduce production expr -> expr COLONCOLON expr
-- On METHOD reduce production expr -> expr COLONCOLON expr
-- On MATCH reduce production expr -> expr COLONCOLON expr
-- On LPAREN reduce production expr -> expr COLONCOLON expr
-- On LOC reduce production expr -> expr COLONCOLON expr
-- On LIDENT reduce production expr -> expr COLONCOLON expr
-- On LET reduce production expr -> expr COLONCOLON expr
-- On LESSGREATER reduce production expr -> expr COLONCOLON expr
-- On LESS reduce production expr -> expr COLONCOLON expr
-- On LBRACKETLESS reduce production expr -> expr COLONCOLON expr
-- On LBRACKETBAR reduce production expr -> expr COLONCOLON expr
-- On LBRACKET reduce production expr -> expr COLONCOLON expr
-- On LBRACELESS reduce production expr -> expr COLONCOLON expr
-- On LBRACEBAR reduce production expr -> expr COLONCOLON expr
-- On LBRACE reduce production expr -> expr COLONCOLON expr
-- On LAZY reduce production expr -> expr COLONCOLON expr
-- On INT reduce production expr -> expr COLONCOLON expr
-- On INHERIT reduce production expr -> expr COLONCOLON expr
-- On INFIXOP1 reduce production expr -> expr COLONCOLON expr
-- On INFIXOP0 reduce production expr -> expr COLONCOLON expr
-- On IN reduce production expr -> expr COLONCOLON expr
-- On IF reduce production expr -> expr COLONCOLON expr
-- On GREATERRBRACKET reduce production expr -> expr COLONCOLON expr
-- On GREATERRBRACE reduce production expr -> expr COLONCOLON expr
-- On GREATERGREATER reduce production expr -> expr COLONCOLON expr
-- On GREATER reduce production expr -> expr COLONCOLON expr
-- On FUNCTION reduce production expr -> expr COLONCOLON expr
-- On FUN reduce production expr -> expr COLONCOLON expr
-- On FOR reduce production expr -> expr COLONCOLON expr
-- On FLOAT reduce production expr -> expr COLONCOLON expr
-- On FALSE reduce production expr -> expr COLONCOLON expr
-- On EXTERNAL reduce production expr -> expr COLONCOLON expr
-- On EXCEPTION reduce production expr -> expr COLONCOLON expr
-- On EQUAL reduce production expr -> expr COLONCOLON expr
-- On EOF reduce production expr -> expr COLONCOLON expr
-- On END reduce production expr -> expr COLONCOLON expr
-- On ELSE reduce production expr -> expr COLONCOLON expr
-- On DONE reduce production expr -> expr COLONCOLON expr
-- On DEF reduce production expr -> expr COLONCOLON expr
-- On COMMA reduce production expr -> expr COLONCOLON expr
-- On COLONGREATER reduce production expr -> expr COLONCOLON expr
-- On COLONEQUAL reduce production expr -> expr COLONCOLON expr
-- On COLON reduce production expr -> expr COLONCOLON expr
-- On CLASS reduce production expr -> expr COLONCOLON expr
-- On CHAR reduce production expr -> expr COLONCOLON expr
-- On BEGIN reduce production expr -> expr COLONCOLON expr
-- On BARRBRACKET reduce production expr -> expr COLONCOLON expr
-- On BARBAR reduce production expr -> expr COLONCOLON expr
-- On BAR reduce production expr -> expr COLONCOLON expr
-- On ASSERT reduce production expr -> expr COLONCOLON expr
-- On AND reduce production expr -> expr COLONCOLON expr
-- On AMPERSAND reduce production expr -> expr COLONCOLON expr
-- On AMPERAMPER reduce production expr -> expr COLONCOLON expr

State 522:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 523
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 523:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr LESS expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On COLONCOLON shift to state 520
## Reductions:
-- On error reduce production expr -> expr LESS expr
-- On WITH reduce production expr -> expr LESS expr
-- On WHILE reduce production expr -> expr LESS expr
-- On VIRTUAL reduce production expr -> expr LESS expr
-- On VAL reduce production expr -> expr LESS expr
-- On UIDENT reduce production expr -> expr LESS expr
-- On TYPE reduce production expr -> expr LESS expr
-- On TRY reduce production expr -> expr LESS expr
-- On TRUE reduce production expr -> expr LESS expr
-- On STRING reduce production expr -> expr LESS expr
-- On SHARP reduce production expr -> expr LESS expr
-- On SEMISEMI reduce production expr -> expr LESS expr
-- On SEMI reduce production expr -> expr LESS expr
-- On RPAREN reduce production expr -> expr LESS expr
-- On RBRACKET reduce production expr -> expr LESS expr
-- On RBRACE reduce production expr -> expr LESS expr
-- On QUESTION reduce production expr -> expr LESS expr
-- On PREFIXOP reduce production expr -> expr LESS expr
-- On PARSER reduce production expr -> expr LESS expr
-- On OR reduce production expr -> expr LESS expr
-- On OPEN reduce production expr -> expr LESS expr
-- On NEW reduce production expr -> expr LESS expr
-- On MODULE reduce production expr -> expr LESS expr
-- On METHOD reduce production expr -> expr LESS expr
-- On MATCH reduce production expr -> expr LESS expr
-- On LPAREN reduce production expr -> expr LESS expr
-- On LOC reduce production expr -> expr LESS expr
-- On LIDENT reduce production expr -> expr LESS expr
-- On LET reduce production expr -> expr LESS expr
-- On LESSGREATER reduce production expr -> expr LESS expr
-- On LESS reduce production expr -> expr LESS expr
-- On LBRACKETLESS reduce production expr -> expr LESS expr
-- On LBRACKETBAR reduce production expr -> expr LESS expr
-- On LBRACKET reduce production expr -> expr LESS expr
-- On LBRACELESS reduce production expr -> expr LESS expr
-- On LBRACEBAR reduce production expr -> expr LESS expr
-- On LBRACE reduce production expr -> expr LESS expr
-- On LAZY reduce production expr -> expr LESS expr
-- On INT reduce production expr -> expr LESS expr
-- On INHERIT reduce production expr -> expr LESS expr
-- On INFIXOP0 reduce production expr -> expr LESS expr
-- On IN reduce production expr -> expr LESS expr
-- On IF reduce production expr -> expr LESS expr
-- On GREATERRBRACKET reduce production expr -> expr LESS expr
-- On GREATERRBRACE reduce production expr -> expr LESS expr
-- On GREATERGREATER reduce production expr -> expr LESS expr
-- On GREATER reduce production expr -> expr LESS expr
-- On FUNCTION reduce production expr -> expr LESS expr
-- On FUN reduce production expr -> expr LESS expr
-- On FOR reduce production expr -> expr LESS expr
-- On FLOAT reduce production expr -> expr LESS expr
-- On FALSE reduce production expr -> expr LESS expr
-- On EXTERNAL reduce production expr -> expr LESS expr
-- On EXCEPTION reduce production expr -> expr LESS expr
-- On EQUAL reduce production expr -> expr LESS expr
-- On EOF reduce production expr -> expr LESS expr
-- On END reduce production expr -> expr LESS expr
-- On ELSE reduce production expr -> expr LESS expr
-- On DONE reduce production expr -> expr LESS expr
-- On DEF reduce production expr -> expr LESS expr
-- On COMMA reduce production expr -> expr LESS expr
-- On COLONGREATER reduce production expr -> expr LESS expr
-- On COLONEQUAL reduce production expr -> expr LESS expr
-- On COLON reduce production expr -> expr LESS expr
-- On CLASS reduce production expr -> expr LESS expr
-- On CHAR reduce production expr -> expr LESS expr
-- On BEGIN reduce production expr -> expr LESS expr
-- On BARRBRACKET reduce production expr -> expr LESS expr
-- On BARBAR reduce production expr -> expr LESS expr
-- On BAR reduce production expr -> expr LESS expr
-- On ASSERT reduce production expr -> expr LESS expr
-- On AND reduce production expr -> expr LESS expr
-- On AMPERSAND reduce production expr -> expr LESS expr
-- On AMPERAMPER reduce production expr -> expr LESS expr

State 524:
## Known stack suffix:
## expr INFIXOP0
## LR(1) items:
expr -> expr INFIXOP0 . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 525
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 525:
## Known stack suffix:
## expr INFIXOP0 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP0 expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On COLONCOLON shift to state 520
## Reductions:
-- On error reduce production expr -> expr INFIXOP0 expr
-- On WITH reduce production expr -> expr INFIXOP0 expr
-- On WHILE reduce production expr -> expr INFIXOP0 expr
-- On VIRTUAL reduce production expr -> expr INFIXOP0 expr
-- On VAL reduce production expr -> expr INFIXOP0 expr
-- On UIDENT reduce production expr -> expr INFIXOP0 expr
-- On TYPE reduce production expr -> expr INFIXOP0 expr
-- On TRY reduce production expr -> expr INFIXOP0 expr
-- On TRUE reduce production expr -> expr INFIXOP0 expr
-- On STRING reduce production expr -> expr INFIXOP0 expr
-- On SHARP reduce production expr -> expr INFIXOP0 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP0 expr
-- On SEMI reduce production expr -> expr INFIXOP0 expr
-- On RPAREN reduce production expr -> expr INFIXOP0 expr
-- On RBRACKET reduce production expr -> expr INFIXOP0 expr
-- On RBRACE reduce production expr -> expr INFIXOP0 expr
-- On QUESTION reduce production expr -> expr INFIXOP0 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP0 expr
-- On PARSER reduce production expr -> expr INFIXOP0 expr
-- On OR reduce production expr -> expr INFIXOP0 expr
-- On OPEN reduce production expr -> expr INFIXOP0 expr
-- On NEW reduce production expr -> expr INFIXOP0 expr
-- On MODULE reduce production expr -> expr INFIXOP0 expr
-- On METHOD reduce production expr -> expr INFIXOP0 expr
-- On MATCH reduce production expr -> expr INFIXOP0 expr
-- On LPAREN reduce production expr -> expr INFIXOP0 expr
-- On LOC reduce production expr -> expr INFIXOP0 expr
-- On LIDENT reduce production expr -> expr INFIXOP0 expr
-- On LET reduce production expr -> expr INFIXOP0 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP0 expr
-- On LESS reduce production expr -> expr INFIXOP0 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP0 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP0 expr
-- On LBRACKET reduce production expr -> expr INFIXOP0 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP0 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP0 expr
-- On LBRACE reduce production expr -> expr INFIXOP0 expr
-- On LAZY reduce production expr -> expr INFIXOP0 expr
-- On INT reduce production expr -> expr INFIXOP0 expr
-- On INHERIT reduce production expr -> expr INFIXOP0 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP0 expr
-- On IN reduce production expr -> expr INFIXOP0 expr
-- On IF reduce production expr -> expr INFIXOP0 expr
-- On GREATERRBRACKET reduce production expr -> expr INFIXOP0 expr
-- On GREATERRBRACE reduce production expr -> expr INFIXOP0 expr
-- On GREATERGREATER reduce production expr -> expr INFIXOP0 expr
-- On GREATER reduce production expr -> expr INFIXOP0 expr
-- On FUNCTION reduce production expr -> expr INFIXOP0 expr
-- On FUN reduce production expr -> expr INFIXOP0 expr
-- On FOR reduce production expr -> expr INFIXOP0 expr
-- On FLOAT reduce production expr -> expr INFIXOP0 expr
-- On FALSE reduce production expr -> expr INFIXOP0 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP0 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP0 expr
-- On EQUAL reduce production expr -> expr INFIXOP0 expr
-- On EOF reduce production expr -> expr INFIXOP0 expr
-- On END reduce production expr -> expr INFIXOP0 expr
-- On ELSE reduce production expr -> expr INFIXOP0 expr
-- On DONE reduce production expr -> expr INFIXOP0 expr
-- On DEF reduce production expr -> expr INFIXOP0 expr
-- On COMMA reduce production expr -> expr INFIXOP0 expr
-- On COLONGREATER reduce production expr -> expr INFIXOP0 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP0 expr
-- On COLON reduce production expr -> expr INFIXOP0 expr
-- On CLASS reduce production expr -> expr INFIXOP0 expr
-- On CHAR reduce production expr -> expr INFIXOP0 expr
-- On BEGIN reduce production expr -> expr INFIXOP0 expr
-- On BARRBRACKET reduce production expr -> expr INFIXOP0 expr
-- On BARBAR reduce production expr -> expr INFIXOP0 expr
-- On BAR reduce production expr -> expr INFIXOP0 expr
-- On ASSERT reduce production expr -> expr INFIXOP0 expr
-- On AND reduce production expr -> expr INFIXOP0 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP0 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP0 expr

State 526:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 527
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 527:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr GREATER expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On COLONCOLON shift to state 520
## Reductions:
-- On error reduce production expr -> expr GREATER expr
-- On WITH reduce production expr -> expr GREATER expr
-- On WHILE reduce production expr -> expr GREATER expr
-- On VIRTUAL reduce production expr -> expr GREATER expr
-- On VAL reduce production expr -> expr GREATER expr
-- On UIDENT reduce production expr -> expr GREATER expr
-- On TYPE reduce production expr -> expr GREATER expr
-- On TRY reduce production expr -> expr GREATER expr
-- On TRUE reduce production expr -> expr GREATER expr
-- On STRING reduce production expr -> expr GREATER expr
-- On SHARP reduce production expr -> expr GREATER expr
-- On SEMISEMI reduce production expr -> expr GREATER expr
-- On SEMI reduce production expr -> expr GREATER expr
-- On RPAREN reduce production expr -> expr GREATER expr
-- On RBRACKET reduce production expr -> expr GREATER expr
-- On RBRACE reduce production expr -> expr GREATER expr
-- On QUESTION reduce production expr -> expr GREATER expr
-- On PREFIXOP reduce production expr -> expr GREATER expr
-- On PARSER reduce production expr -> expr GREATER expr
-- On OR reduce production expr -> expr GREATER expr
-- On OPEN reduce production expr -> expr GREATER expr
-- On NEW reduce production expr -> expr GREATER expr
-- On MODULE reduce production expr -> expr GREATER expr
-- On METHOD reduce production expr -> expr GREATER expr
-- On MATCH reduce production expr -> expr GREATER expr
-- On LPAREN reduce production expr -> expr GREATER expr
-- On LOC reduce production expr -> expr GREATER expr
-- On LIDENT reduce production expr -> expr GREATER expr
-- On LET reduce production expr -> expr GREATER expr
-- On LESSGREATER reduce production expr -> expr GREATER expr
-- On LESS reduce production expr -> expr GREATER expr
-- On LBRACKETLESS reduce production expr -> expr GREATER expr
-- On LBRACKETBAR reduce production expr -> expr GREATER expr
-- On LBRACKET reduce production expr -> expr GREATER expr
-- On LBRACELESS reduce production expr -> expr GREATER expr
-- On LBRACEBAR reduce production expr -> expr GREATER expr
-- On LBRACE reduce production expr -> expr GREATER expr
-- On LAZY reduce production expr -> expr GREATER expr
-- On INT reduce production expr -> expr GREATER expr
-- On INHERIT reduce production expr -> expr GREATER expr
-- On INFIXOP0 reduce production expr -> expr GREATER expr
-- On IN reduce production expr -> expr GREATER expr
-- On IF reduce production expr -> expr GREATER expr
-- On GREATERRBRACKET reduce production expr -> expr GREATER expr
-- On GREATERRBRACE reduce production expr -> expr GREATER expr
-- On GREATERGREATER reduce production expr -> expr GREATER expr
-- On GREATER reduce production expr -> expr GREATER expr
-- On FUNCTION reduce production expr -> expr GREATER expr
-- On FUN reduce production expr -> expr GREATER expr
-- On FOR reduce production expr -> expr GREATER expr
-- On FLOAT reduce production expr -> expr GREATER expr
-- On FALSE reduce production expr -> expr GREATER expr
-- On EXTERNAL reduce production expr -> expr GREATER expr
-- On EXCEPTION reduce production expr -> expr GREATER expr
-- On EQUAL reduce production expr -> expr GREATER expr
-- On EOF reduce production expr -> expr GREATER expr
-- On END reduce production expr -> expr GREATER expr
-- On ELSE reduce production expr -> expr GREATER expr
-- On DONE reduce production expr -> expr GREATER expr
-- On DEF reduce production expr -> expr GREATER expr
-- On COMMA reduce production expr -> expr GREATER expr
-- On COLONGREATER reduce production expr -> expr GREATER expr
-- On COLONEQUAL reduce production expr -> expr GREATER expr
-- On COLON reduce production expr -> expr GREATER expr
-- On CLASS reduce production expr -> expr GREATER expr
-- On CHAR reduce production expr -> expr GREATER expr
-- On BEGIN reduce production expr -> expr GREATER expr
-- On BARRBRACKET reduce production expr -> expr GREATER expr
-- On BARBAR reduce production expr -> expr GREATER expr
-- On BAR reduce production expr -> expr GREATER expr
-- On ASSERT reduce production expr -> expr GREATER expr
-- On AND reduce production expr -> expr GREATER expr
-- On AMPERSAND reduce production expr -> expr GREATER expr
-- On AMPERAMPER reduce production expr -> expr GREATER expr

State 528:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 529
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 529:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr EQUAL expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On COLONCOLON shift to state 520
## Reductions:
-- On error reduce production expr -> expr EQUAL expr
-- On WITH reduce production expr -> expr EQUAL expr
-- On WHILE reduce production expr -> expr EQUAL expr
-- On VIRTUAL reduce production expr -> expr EQUAL expr
-- On VAL reduce production expr -> expr EQUAL expr
-- On UIDENT reduce production expr -> expr EQUAL expr
-- On TYPE reduce production expr -> expr EQUAL expr
-- On TRY reduce production expr -> expr EQUAL expr
-- On TRUE reduce production expr -> expr EQUAL expr
-- On STRING reduce production expr -> expr EQUAL expr
-- On SHARP reduce production expr -> expr EQUAL expr
-- On SEMISEMI reduce production expr -> expr EQUAL expr
-- On SEMI reduce production expr -> expr EQUAL expr
-- On RPAREN reduce production expr -> expr EQUAL expr
-- On RBRACKET reduce production expr -> expr EQUAL expr
-- On RBRACE reduce production expr -> expr EQUAL expr
-- On QUESTION reduce production expr -> expr EQUAL expr
-- On PREFIXOP reduce production expr -> expr EQUAL expr
-- On PARSER reduce production expr -> expr EQUAL expr
-- On OR reduce production expr -> expr EQUAL expr
-- On OPEN reduce production expr -> expr EQUAL expr
-- On NEW reduce production expr -> expr EQUAL expr
-- On MODULE reduce production expr -> expr EQUAL expr
-- On METHOD reduce production expr -> expr EQUAL expr
-- On MATCH reduce production expr -> expr EQUAL expr
-- On LPAREN reduce production expr -> expr EQUAL expr
-- On LOC reduce production expr -> expr EQUAL expr
-- On LIDENT reduce production expr -> expr EQUAL expr
-- On LET reduce production expr -> expr EQUAL expr
-- On LESSGREATER reduce production expr -> expr EQUAL expr
-- On LESS reduce production expr -> expr EQUAL expr
-- On LBRACKETLESS reduce production expr -> expr EQUAL expr
-- On LBRACKETBAR reduce production expr -> expr EQUAL expr
-- On LBRACKET reduce production expr -> expr EQUAL expr
-- On LBRACELESS reduce production expr -> expr EQUAL expr
-- On LBRACEBAR reduce production expr -> expr EQUAL expr
-- On LBRACE reduce production expr -> expr EQUAL expr
-- On LAZY reduce production expr -> expr EQUAL expr
-- On INT reduce production expr -> expr EQUAL expr
-- On INHERIT reduce production expr -> expr EQUAL expr
-- On INFIXOP0 reduce production expr -> expr EQUAL expr
-- On IN reduce production expr -> expr EQUAL expr
-- On IF reduce production expr -> expr EQUAL expr
-- On GREATERRBRACKET reduce production expr -> expr EQUAL expr
-- On GREATERRBRACE reduce production expr -> expr EQUAL expr
-- On GREATERGREATER reduce production expr -> expr EQUAL expr
-- On GREATER reduce production expr -> expr EQUAL expr
-- On FUNCTION reduce production expr -> expr EQUAL expr
-- On FUN reduce production expr -> expr EQUAL expr
-- On FOR reduce production expr -> expr EQUAL expr
-- On FLOAT reduce production expr -> expr EQUAL expr
-- On FALSE reduce production expr -> expr EQUAL expr
-- On EXTERNAL reduce production expr -> expr EQUAL expr
-- On EXCEPTION reduce production expr -> expr EQUAL expr
-- On EQUAL reduce production expr -> expr EQUAL expr
-- On EOF reduce production expr -> expr EQUAL expr
-- On END reduce production expr -> expr EQUAL expr
-- On ELSE reduce production expr -> expr EQUAL expr
-- On DONE reduce production expr -> expr EQUAL expr
-- On DEF reduce production expr -> expr EQUAL expr
-- On COMMA reduce production expr -> expr EQUAL expr
-- On COLONGREATER reduce production expr -> expr EQUAL expr
-- On COLONEQUAL reduce production expr -> expr EQUAL expr
-- On COLON reduce production expr -> expr EQUAL expr
-- On CLASS reduce production expr -> expr EQUAL expr
-- On CHAR reduce production expr -> expr EQUAL expr
-- On BEGIN reduce production expr -> expr EQUAL expr
-- On BARRBRACKET reduce production expr -> expr EQUAL expr
-- On BARBAR reduce production expr -> expr EQUAL expr
-- On BAR reduce production expr -> expr EQUAL expr
-- On ASSERT reduce production expr -> expr EQUAL expr
-- On AND reduce production expr -> expr EQUAL expr
-- On AMPERSAND reduce production expr -> expr EQUAL expr
-- On AMPERAMPER reduce production expr -> expr EQUAL expr

State 530:
## Known stack suffix:
## expr BARBAR
## LR(1) items:
expr -> expr BARBAR . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 531
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 531:
## Known stack suffix:
## expr BARBAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr BARBAR expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> expr BARBAR expr
-- On WITH reduce production expr -> expr BARBAR expr
-- On WHILE reduce production expr -> expr BARBAR expr
-- On VIRTUAL reduce production expr -> expr BARBAR expr
-- On VAL reduce production expr -> expr BARBAR expr
-- On UIDENT reduce production expr -> expr BARBAR expr
-- On TYPE reduce production expr -> expr BARBAR expr
-- On TRY reduce production expr -> expr BARBAR expr
-- On TRUE reduce production expr -> expr BARBAR expr
-- On STRING reduce production expr -> expr BARBAR expr
-- On SHARP reduce production expr -> expr BARBAR expr
-- On SEMISEMI reduce production expr -> expr BARBAR expr
-- On SEMI reduce production expr -> expr BARBAR expr
-- On RPAREN reduce production expr -> expr BARBAR expr
-- On RBRACKET reduce production expr -> expr BARBAR expr
-- On RBRACE reduce production expr -> expr BARBAR expr
-- On QUESTION reduce production expr -> expr BARBAR expr
-- On PREFIXOP reduce production expr -> expr BARBAR expr
-- On PARSER reduce production expr -> expr BARBAR expr
-- On OPEN reduce production expr -> expr BARBAR expr
-- On NEW reduce production expr -> expr BARBAR expr
-- On MODULE reduce production expr -> expr BARBAR expr
-- On METHOD reduce production expr -> expr BARBAR expr
-- On MATCH reduce production expr -> expr BARBAR expr
-- On LPAREN reduce production expr -> expr BARBAR expr
-- On LOC reduce production expr -> expr BARBAR expr
-- On LIDENT reduce production expr -> expr BARBAR expr
-- On LET reduce production expr -> expr BARBAR expr
-- On LBRACKETLESS reduce production expr -> expr BARBAR expr
-- On LBRACKETBAR reduce production expr -> expr BARBAR expr
-- On LBRACKET reduce production expr -> expr BARBAR expr
-- On LBRACELESS reduce production expr -> expr BARBAR expr
-- On LBRACEBAR reduce production expr -> expr BARBAR expr
-- On LBRACE reduce production expr -> expr BARBAR expr
-- On LAZY reduce production expr -> expr BARBAR expr
-- On INT reduce production expr -> expr BARBAR expr
-- On INHERIT reduce production expr -> expr BARBAR expr
-- On IN reduce production expr -> expr BARBAR expr
-- On IF reduce production expr -> expr BARBAR expr
-- On GREATERRBRACKET reduce production expr -> expr BARBAR expr
-- On GREATERRBRACE reduce production expr -> expr BARBAR expr
-- On GREATERGREATER reduce production expr -> expr BARBAR expr
-- On FUNCTION reduce production expr -> expr BARBAR expr
-- On FUN reduce production expr -> expr BARBAR expr
-- On FOR reduce production expr -> expr BARBAR expr
-- On FLOAT reduce production expr -> expr BARBAR expr
-- On FALSE reduce production expr -> expr BARBAR expr
-- On EXTERNAL reduce production expr -> expr BARBAR expr
-- On EXCEPTION reduce production expr -> expr BARBAR expr
-- On EOF reduce production expr -> expr BARBAR expr
-- On END reduce production expr -> expr BARBAR expr
-- On ELSE reduce production expr -> expr BARBAR expr
-- On DONE reduce production expr -> expr BARBAR expr
-- On DEF reduce production expr -> expr BARBAR expr
-- On COMMA reduce production expr -> expr BARBAR expr
-- On COLONGREATER reduce production expr -> expr BARBAR expr
-- On COLONEQUAL reduce production expr -> expr BARBAR expr
-- On COLON reduce production expr -> expr BARBAR expr
-- On CLASS reduce production expr -> expr BARBAR expr
-- On CHAR reduce production expr -> expr BARBAR expr
-- On BEGIN reduce production expr -> expr BARBAR expr
-- On BARRBRACKET reduce production expr -> expr BARBAR expr
-- On BAR reduce production expr -> expr BARBAR expr
-- On ASSERT reduce production expr -> expr BARBAR expr
-- On AND reduce production expr -> expr BARBAR expr

State 532:
## Known stack suffix:
## expr AMPERSAND
## LR(1) items:
expr -> expr AMPERSAND . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 533
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 533:
## Known stack suffix:
## expr AMPERSAND expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERSAND expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COLONCOLON shift to state 520
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> expr AMPERSAND expr
-- On WITH reduce production expr -> expr AMPERSAND expr
-- On WHILE reduce production expr -> expr AMPERSAND expr
-- On VIRTUAL reduce production expr -> expr AMPERSAND expr
-- On VAL reduce production expr -> expr AMPERSAND expr
-- On UIDENT reduce production expr -> expr AMPERSAND expr
-- On TYPE reduce production expr -> expr AMPERSAND expr
-- On TRY reduce production expr -> expr AMPERSAND expr
-- On TRUE reduce production expr -> expr AMPERSAND expr
-- On STRING reduce production expr -> expr AMPERSAND expr
-- On SHARP reduce production expr -> expr AMPERSAND expr
-- On SEMISEMI reduce production expr -> expr AMPERSAND expr
-- On SEMI reduce production expr -> expr AMPERSAND expr
-- On RPAREN reduce production expr -> expr AMPERSAND expr
-- On RBRACKET reduce production expr -> expr AMPERSAND expr
-- On RBRACE reduce production expr -> expr AMPERSAND expr
-- On QUESTION reduce production expr -> expr AMPERSAND expr
-- On PREFIXOP reduce production expr -> expr AMPERSAND expr
-- On PARSER reduce production expr -> expr AMPERSAND expr
-- On OR reduce production expr -> expr AMPERSAND expr
-- On OPEN reduce production expr -> expr AMPERSAND expr
-- On NEW reduce production expr -> expr AMPERSAND expr
-- On MODULE reduce production expr -> expr AMPERSAND expr
-- On METHOD reduce production expr -> expr AMPERSAND expr
-- On MATCH reduce production expr -> expr AMPERSAND expr
-- On LPAREN reduce production expr -> expr AMPERSAND expr
-- On LOC reduce production expr -> expr AMPERSAND expr
-- On LIDENT reduce production expr -> expr AMPERSAND expr
-- On LET reduce production expr -> expr AMPERSAND expr
-- On LBRACKETLESS reduce production expr -> expr AMPERSAND expr
-- On LBRACKETBAR reduce production expr -> expr AMPERSAND expr
-- On LBRACKET reduce production expr -> expr AMPERSAND expr
-- On LBRACELESS reduce production expr -> expr AMPERSAND expr
-- On LBRACEBAR reduce production expr -> expr AMPERSAND expr
-- On LBRACE reduce production expr -> expr AMPERSAND expr
-- On LAZY reduce production expr -> expr AMPERSAND expr
-- On INT reduce production expr -> expr AMPERSAND expr
-- On INHERIT reduce production expr -> expr AMPERSAND expr
-- On IN reduce production expr -> expr AMPERSAND expr
-- On IF reduce production expr -> expr AMPERSAND expr
-- On GREATERRBRACKET reduce production expr -> expr AMPERSAND expr
-- On GREATERRBRACE reduce production expr -> expr AMPERSAND expr
-- On GREATERGREATER reduce production expr -> expr AMPERSAND expr
-- On FUNCTION reduce production expr -> expr AMPERSAND expr
-- On FUN reduce production expr -> expr AMPERSAND expr
-- On FOR reduce production expr -> expr AMPERSAND expr
-- On FLOAT reduce production expr -> expr AMPERSAND expr
-- On FALSE reduce production expr -> expr AMPERSAND expr
-- On EXTERNAL reduce production expr -> expr AMPERSAND expr
-- On EXCEPTION reduce production expr -> expr AMPERSAND expr
-- On EOF reduce production expr -> expr AMPERSAND expr
-- On END reduce production expr -> expr AMPERSAND expr
-- On ELSE reduce production expr -> expr AMPERSAND expr
-- On DONE reduce production expr -> expr AMPERSAND expr
-- On DEF reduce production expr -> expr AMPERSAND expr
-- On COMMA reduce production expr -> expr AMPERSAND expr
-- On COLONGREATER reduce production expr -> expr AMPERSAND expr
-- On COLONEQUAL reduce production expr -> expr AMPERSAND expr
-- On COLON reduce production expr -> expr AMPERSAND expr
-- On CLASS reduce production expr -> expr AMPERSAND expr
-- On CHAR reduce production expr -> expr AMPERSAND expr
-- On BEGIN reduce production expr -> expr AMPERSAND expr
-- On BARRBRACKET reduce production expr -> expr AMPERSAND expr
-- On BARBAR reduce production expr -> expr AMPERSAND expr
-- On BAR reduce production expr -> expr AMPERSAND expr
-- On ASSERT reduce production expr -> expr AMPERSAND expr
-- On AND reduce production expr -> expr AMPERSAND expr

State 534:
## Known stack suffix:
## expr AMPERAMPER
## LR(1) items:
expr -> expr AMPERAMPER . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 535
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 535:
## Known stack suffix:
## expr AMPERAMPER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERAMPER expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COLONCOLON shift to state 520
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> expr AMPERAMPER expr
-- On WITH reduce production expr -> expr AMPERAMPER expr
-- On WHILE reduce production expr -> expr AMPERAMPER expr
-- On VIRTUAL reduce production expr -> expr AMPERAMPER expr
-- On VAL reduce production expr -> expr AMPERAMPER expr
-- On UIDENT reduce production expr -> expr AMPERAMPER expr
-- On TYPE reduce production expr -> expr AMPERAMPER expr
-- On TRY reduce production expr -> expr AMPERAMPER expr
-- On TRUE reduce production expr -> expr AMPERAMPER expr
-- On STRING reduce production expr -> expr AMPERAMPER expr
-- On SHARP reduce production expr -> expr AMPERAMPER expr
-- On SEMISEMI reduce production expr -> expr AMPERAMPER expr
-- On SEMI reduce production expr -> expr AMPERAMPER expr
-- On RPAREN reduce production expr -> expr AMPERAMPER expr
-- On RBRACKET reduce production expr -> expr AMPERAMPER expr
-- On RBRACE reduce production expr -> expr AMPERAMPER expr
-- On QUESTION reduce production expr -> expr AMPERAMPER expr
-- On PREFIXOP reduce production expr -> expr AMPERAMPER expr
-- On PARSER reduce production expr -> expr AMPERAMPER expr
-- On OR reduce production expr -> expr AMPERAMPER expr
-- On OPEN reduce production expr -> expr AMPERAMPER expr
-- On NEW reduce production expr -> expr AMPERAMPER expr
-- On MODULE reduce production expr -> expr AMPERAMPER expr
-- On METHOD reduce production expr -> expr AMPERAMPER expr
-- On MATCH reduce production expr -> expr AMPERAMPER expr
-- On LPAREN reduce production expr -> expr AMPERAMPER expr
-- On LOC reduce production expr -> expr AMPERAMPER expr
-- On LIDENT reduce production expr -> expr AMPERAMPER expr
-- On LET reduce production expr -> expr AMPERAMPER expr
-- On LBRACKETLESS reduce production expr -> expr AMPERAMPER expr
-- On LBRACKETBAR reduce production expr -> expr AMPERAMPER expr
-- On LBRACKET reduce production expr -> expr AMPERAMPER expr
-- On LBRACELESS reduce production expr -> expr AMPERAMPER expr
-- On LBRACEBAR reduce production expr -> expr AMPERAMPER expr
-- On LBRACE reduce production expr -> expr AMPERAMPER expr
-- On LAZY reduce production expr -> expr AMPERAMPER expr
-- On INT reduce production expr -> expr AMPERAMPER expr
-- On INHERIT reduce production expr -> expr AMPERAMPER expr
-- On IN reduce production expr -> expr AMPERAMPER expr
-- On IF reduce production expr -> expr AMPERAMPER expr
-- On GREATERRBRACKET reduce production expr -> expr AMPERAMPER expr
-- On GREATERRBRACE reduce production expr -> expr AMPERAMPER expr
-- On GREATERGREATER reduce production expr -> expr AMPERAMPER expr
-- On FUNCTION reduce production expr -> expr AMPERAMPER expr
-- On FUN reduce production expr -> expr AMPERAMPER expr
-- On FOR reduce production expr -> expr AMPERAMPER expr
-- On FLOAT reduce production expr -> expr AMPERAMPER expr
-- On FALSE reduce production expr -> expr AMPERAMPER expr
-- On EXTERNAL reduce production expr -> expr AMPERAMPER expr
-- On EXCEPTION reduce production expr -> expr AMPERAMPER expr
-- On EOF reduce production expr -> expr AMPERAMPER expr
-- On END reduce production expr -> expr AMPERAMPER expr
-- On ELSE reduce production expr -> expr AMPERAMPER expr
-- On DONE reduce production expr -> expr AMPERAMPER expr
-- On DEF reduce production expr -> expr AMPERAMPER expr
-- On COMMA reduce production expr -> expr AMPERAMPER expr
-- On COLONGREATER reduce production expr -> expr AMPERAMPER expr
-- On COLONEQUAL reduce production expr -> expr AMPERAMPER expr
-- On COLON reduce production expr -> expr AMPERAMPER expr
-- On CLASS reduce production expr -> expr AMPERAMPER expr
-- On CHAR reduce production expr -> expr AMPERAMPER expr
-- On BEGIN reduce production expr -> expr AMPERAMPER expr
-- On BARRBRACKET reduce production expr -> expr AMPERAMPER expr
-- On BARBAR reduce production expr -> expr AMPERAMPER expr
-- On BAR reduce production expr -> expr AMPERAMPER expr
-- On ASSERT reduce production expr -> expr AMPERAMPER expr
-- On AND reduce production expr -> expr AMPERAMPER expr

State 536:
## Known stack suffix:
## label LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> label LESSMINUS expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> label LESSMINUS expr
-- On WITH reduce production expr -> label LESSMINUS expr
-- On WHILE reduce production expr -> label LESSMINUS expr
-- On VIRTUAL reduce production expr -> label LESSMINUS expr
-- On VAL reduce production expr -> label LESSMINUS expr
-- On UIDENT reduce production expr -> label LESSMINUS expr
-- On TYPE reduce production expr -> label LESSMINUS expr
-- On TRY reduce production expr -> label LESSMINUS expr
-- On TRUE reduce production expr -> label LESSMINUS expr
-- On STRING reduce production expr -> label LESSMINUS expr
-- On SHARP reduce production expr -> label LESSMINUS expr
-- On SEMISEMI reduce production expr -> label LESSMINUS expr
-- On SEMI reduce production expr -> label LESSMINUS expr
-- On RPAREN reduce production expr -> label LESSMINUS expr
-- On RBRACKET reduce production expr -> label LESSMINUS expr
-- On RBRACE reduce production expr -> label LESSMINUS expr
-- On QUESTION reduce production expr -> label LESSMINUS expr
-- On PREFIXOP reduce production expr -> label LESSMINUS expr
-- On PARSER reduce production expr -> label LESSMINUS expr
-- On OPEN reduce production expr -> label LESSMINUS expr
-- On NEW reduce production expr -> label LESSMINUS expr
-- On MODULE reduce production expr -> label LESSMINUS expr
-- On METHOD reduce production expr -> label LESSMINUS expr
-- On MATCH reduce production expr -> label LESSMINUS expr
-- On LPAREN reduce production expr -> label LESSMINUS expr
-- On LOC reduce production expr -> label LESSMINUS expr
-- On LIDENT reduce production expr -> label LESSMINUS expr
-- On LET reduce production expr -> label LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> label LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> label LESSMINUS expr
-- On LBRACKET reduce production expr -> label LESSMINUS expr
-- On LBRACELESS reduce production expr -> label LESSMINUS expr
-- On LBRACEBAR reduce production expr -> label LESSMINUS expr
-- On LBRACE reduce production expr -> label LESSMINUS expr
-- On LAZY reduce production expr -> label LESSMINUS expr
-- On INT reduce production expr -> label LESSMINUS expr
-- On INHERIT reduce production expr -> label LESSMINUS expr
-- On IN reduce production expr -> label LESSMINUS expr
-- On IF reduce production expr -> label LESSMINUS expr
-- On GREATERRBRACKET reduce production expr -> label LESSMINUS expr
-- On GREATERRBRACE reduce production expr -> label LESSMINUS expr
-- On GREATERGREATER reduce production expr -> label LESSMINUS expr
-- On FUNCTION reduce production expr -> label LESSMINUS expr
-- On FUN reduce production expr -> label LESSMINUS expr
-- On FOR reduce production expr -> label LESSMINUS expr
-- On FLOAT reduce production expr -> label LESSMINUS expr
-- On FALSE reduce production expr -> label LESSMINUS expr
-- On EXTERNAL reduce production expr -> label LESSMINUS expr
-- On EXCEPTION reduce production expr -> label LESSMINUS expr
-- On EOF reduce production expr -> label LESSMINUS expr
-- On END reduce production expr -> label LESSMINUS expr
-- On ELSE reduce production expr -> label LESSMINUS expr
-- On DONE reduce production expr -> label LESSMINUS expr
-- On DEF reduce production expr -> label LESSMINUS expr
-- On COLONGREATER reduce production expr -> label LESSMINUS expr
-- On COLON reduce production expr -> label LESSMINUS expr
-- On CLASS reduce production expr -> label LESSMINUS expr
-- On CHAR reduce production expr -> label LESSMINUS expr
-- On BEGIN reduce production expr -> label LESSMINUS expr
-- On BARRBRACKET reduce production expr -> label LESSMINUS expr
-- On BAR reduce production expr -> label LESSMINUS expr
-- On ASSERT reduce production expr -> label LESSMINUS expr
-- On AND reduce production expr -> label LESSMINUS expr

State 537:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 538
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 538:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr COMMA expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr_comma_list -> expr COMMA expr
-- On WITH reduce production expr_comma_list -> expr COMMA expr
-- On WHILE reduce production expr_comma_list -> expr COMMA expr
-- On VIRTUAL reduce production expr_comma_list -> expr COMMA expr
-- On VAL reduce production expr_comma_list -> expr COMMA expr
-- On UIDENT reduce production expr_comma_list -> expr COMMA expr
-- On TYPE reduce production expr_comma_list -> expr COMMA expr
-- On TRY reduce production expr_comma_list -> expr COMMA expr
-- On TRUE reduce production expr_comma_list -> expr COMMA expr
-- On STRING reduce production expr_comma_list -> expr COMMA expr
-- On SHARP reduce production expr_comma_list -> expr COMMA expr
-- On SEMISEMI reduce production expr_comma_list -> expr COMMA expr
-- On SEMI reduce production expr_comma_list -> expr COMMA expr
-- On RPAREN reduce production expr_comma_list -> expr COMMA expr
-- On RBRACKET reduce production expr_comma_list -> expr COMMA expr
-- On RBRACE reduce production expr_comma_list -> expr COMMA expr
-- On QUESTION reduce production expr_comma_list -> expr COMMA expr
-- On PREFIXOP reduce production expr_comma_list -> expr COMMA expr
-- On PARSER reduce production expr_comma_list -> expr COMMA expr
-- On OPEN reduce production expr_comma_list -> expr COMMA expr
-- On NEW reduce production expr_comma_list -> expr COMMA expr
-- On MODULE reduce production expr_comma_list -> expr COMMA expr
-- On METHOD reduce production expr_comma_list -> expr COMMA expr
-- On MATCH reduce production expr_comma_list -> expr COMMA expr
-- On LPAREN reduce production expr_comma_list -> expr COMMA expr
-- On LOC reduce production expr_comma_list -> expr COMMA expr
-- On LIDENT reduce production expr_comma_list -> expr COMMA expr
-- On LET reduce production expr_comma_list -> expr COMMA expr
-- On LBRACKETLESS reduce production expr_comma_list -> expr COMMA expr
-- On LBRACKETBAR reduce production expr_comma_list -> expr COMMA expr
-- On LBRACKET reduce production expr_comma_list -> expr COMMA expr
-- On LBRACELESS reduce production expr_comma_list -> expr COMMA expr
-- On LBRACEBAR reduce production expr_comma_list -> expr COMMA expr
-- On LBRACE reduce production expr_comma_list -> expr COMMA expr
-- On LAZY reduce production expr_comma_list -> expr COMMA expr
-- On INT reduce production expr_comma_list -> expr COMMA expr
-- On INHERIT reduce production expr_comma_list -> expr COMMA expr
-- On IN reduce production expr_comma_list -> expr COMMA expr
-- On IF reduce production expr_comma_list -> expr COMMA expr
-- On GREATERRBRACKET reduce production expr_comma_list -> expr COMMA expr
-- On GREATERRBRACE reduce production expr_comma_list -> expr COMMA expr
-- On GREATERGREATER reduce production expr_comma_list -> expr COMMA expr
-- On FUNCTION reduce production expr_comma_list -> expr COMMA expr
-- On FUN reduce production expr_comma_list -> expr COMMA expr
-- On FOR reduce production expr_comma_list -> expr COMMA expr
-- On FLOAT reduce production expr_comma_list -> expr COMMA expr
-- On FALSE reduce production expr_comma_list -> expr COMMA expr
-- On EXTERNAL reduce production expr_comma_list -> expr COMMA expr
-- On EXCEPTION reduce production expr_comma_list -> expr COMMA expr
-- On EOF reduce production expr_comma_list -> expr COMMA expr
-- On END reduce production expr_comma_list -> expr COMMA expr
-- On ELSE reduce production expr_comma_list -> expr COMMA expr
-- On DONE reduce production expr_comma_list -> expr COMMA expr
-- On DEF reduce production expr_comma_list -> expr COMMA expr
-- On COMMA reduce production expr_comma_list -> expr COMMA expr
-- On COLONGREATER reduce production expr_comma_list -> expr COMMA expr
-- On COLONEQUAL reduce production expr_comma_list -> expr COMMA expr
-- On COLON reduce production expr_comma_list -> expr COMMA expr
-- On CLASS reduce production expr_comma_list -> expr COMMA expr
-- On CHAR reduce production expr_comma_list -> expr COMMA expr
-- On BEGIN reduce production expr_comma_list -> expr COMMA expr
-- On BARRBRACKET reduce production expr_comma_list -> expr COMMA expr
-- On BAR reduce production expr_comma_list -> expr COMMA expr
-- On ASSERT reduce production expr_comma_list -> expr COMMA expr
-- On AND reduce production expr_comma_list -> expr COMMA expr

State 539:
## Known stack suffix:
## expr COLONEQUAL
## LR(1) items:
expr -> expr COLONEQUAL . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 540
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 540:
## Known stack suffix:
## expr COLONEQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr COLONEQUAL expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> expr COLONEQUAL expr
-- On WITH reduce production expr -> expr COLONEQUAL expr
-- On WHILE reduce production expr -> expr COLONEQUAL expr
-- On VIRTUAL reduce production expr -> expr COLONEQUAL expr
-- On VAL reduce production expr -> expr COLONEQUAL expr
-- On UIDENT reduce production expr -> expr COLONEQUAL expr
-- On TYPE reduce production expr -> expr COLONEQUAL expr
-- On TRY reduce production expr -> expr COLONEQUAL expr
-- On TRUE reduce production expr -> expr COLONEQUAL expr
-- On STRING reduce production expr -> expr COLONEQUAL expr
-- On SHARP reduce production expr -> expr COLONEQUAL expr
-- On SEMISEMI reduce production expr -> expr COLONEQUAL expr
-- On SEMI reduce production expr -> expr COLONEQUAL expr
-- On RPAREN reduce production expr -> expr COLONEQUAL expr
-- On RBRACKET reduce production expr -> expr COLONEQUAL expr
-- On RBRACE reduce production expr -> expr COLONEQUAL expr
-- On QUESTION reduce production expr -> expr COLONEQUAL expr
-- On PREFIXOP reduce production expr -> expr COLONEQUAL expr
-- On PARSER reduce production expr -> expr COLONEQUAL expr
-- On OPEN reduce production expr -> expr COLONEQUAL expr
-- On NEW reduce production expr -> expr COLONEQUAL expr
-- On MODULE reduce production expr -> expr COLONEQUAL expr
-- On METHOD reduce production expr -> expr COLONEQUAL expr
-- On MATCH reduce production expr -> expr COLONEQUAL expr
-- On LPAREN reduce production expr -> expr COLONEQUAL expr
-- On LOC reduce production expr -> expr COLONEQUAL expr
-- On LIDENT reduce production expr -> expr COLONEQUAL expr
-- On LET reduce production expr -> expr COLONEQUAL expr
-- On LBRACKETLESS reduce production expr -> expr COLONEQUAL expr
-- On LBRACKETBAR reduce production expr -> expr COLONEQUAL expr
-- On LBRACKET reduce production expr -> expr COLONEQUAL expr
-- On LBRACELESS reduce production expr -> expr COLONEQUAL expr
-- On LBRACEBAR reduce production expr -> expr COLONEQUAL expr
-- On LBRACE reduce production expr -> expr COLONEQUAL expr
-- On LAZY reduce production expr -> expr COLONEQUAL expr
-- On INT reduce production expr -> expr COLONEQUAL expr
-- On INHERIT reduce production expr -> expr COLONEQUAL expr
-- On IN reduce production expr -> expr COLONEQUAL expr
-- On IF reduce production expr -> expr COLONEQUAL expr
-- On GREATERRBRACKET reduce production expr -> expr COLONEQUAL expr
-- On GREATERRBRACE reduce production expr -> expr COLONEQUAL expr
-- On GREATERGREATER reduce production expr -> expr COLONEQUAL expr
-- On FUNCTION reduce production expr -> expr COLONEQUAL expr
-- On FUN reduce production expr -> expr COLONEQUAL expr
-- On FOR reduce production expr -> expr COLONEQUAL expr
-- On FLOAT reduce production expr -> expr COLONEQUAL expr
-- On FALSE reduce production expr -> expr COLONEQUAL expr
-- On EXTERNAL reduce production expr -> expr COLONEQUAL expr
-- On EXCEPTION reduce production expr -> expr COLONEQUAL expr
-- On EOF reduce production expr -> expr COLONEQUAL expr
-- On END reduce production expr -> expr COLONEQUAL expr
-- On ELSE reduce production expr -> expr COLONEQUAL expr
-- On DONE reduce production expr -> expr COLONEQUAL expr
-- On DEF reduce production expr -> expr COLONEQUAL expr
-- On COLONGREATER reduce production expr -> expr COLONEQUAL expr
-- On COLON reduce production expr -> expr COLONEQUAL expr
-- On CLASS reduce production expr -> expr COLONEQUAL expr
-- On CHAR reduce production expr -> expr COLONEQUAL expr
-- On BEGIN reduce production expr -> expr COLONEQUAL expr
-- On BARRBRACKET reduce production expr -> expr COLONEQUAL expr
-- On BAR reduce production expr -> expr COLONEQUAL expr
-- On ASSERT reduce production expr -> expr COLONEQUAL expr
-- On AND reduce production expr -> expr COLONEQUAL expr

State 541:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI RPAREN OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
list_of_exprs -> LPAREN expr . RPAREN [ error GREATERGREATER ]
seq_expr -> expr . [ error RPAREN COLONGREATER COLON ]
seq_expr -> expr . SEMI [ error RPAREN COLONGREATER COLON ]
seq_expr -> expr . SEMI seq_expr [ error RPAREN COLONGREATER COLON ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On SEMI shift to state 542
-- On RPAREN shift to state 545
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production seq_expr -> expr
-- On COLONGREATER reduce production seq_expr -> expr
-- On COLON reduce production seq_expr -> expr

State 542:
## Known stack suffix:
## expr SEMI
## LR(1) items:
seq_expr -> expr SEMI . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr SEMI . seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 543
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:
-- On error reduce production seq_expr -> expr SEMI
-- On WITH reduce production seq_expr -> expr SEMI
-- On VIRTUAL reduce production seq_expr -> expr SEMI
-- On VAL reduce production seq_expr -> expr SEMI
-- On TYPE reduce production seq_expr -> expr SEMI
-- On STAR reduce production seq_expr -> expr SEMI
-- On SHARP reduce production seq_expr -> expr SEMI
-- On SEMISEMI reduce production seq_expr -> expr SEMI
-- On SEMI reduce production seq_expr -> expr SEMI
-- On RPAREN reduce production seq_expr -> expr SEMI
-- On RBRACKET reduce production seq_expr -> expr SEMI
-- On RBRACE reduce production seq_expr -> expr SEMI
-- On QUESTION reduce production seq_expr -> expr SEMI
-- On OR reduce production seq_expr -> expr SEMI
-- On OPEN reduce production seq_expr -> expr SEMI
-- On MODULE reduce production seq_expr -> expr SEMI
-- On METHOD reduce production seq_expr -> expr SEMI
-- On LESSGREATER reduce production seq_expr -> expr SEMI
-- On LESS reduce production seq_expr -> expr SEMI
-- On INHERIT reduce production seq_expr -> expr SEMI
-- On INFIXOP4 reduce production seq_expr -> expr SEMI
-- On INFIXOP3 reduce production seq_expr -> expr SEMI
-- On INFIXOP2 reduce production seq_expr -> expr SEMI
-- On INFIXOP1 reduce production seq_expr -> expr SEMI
-- On INFIXOP0 reduce production seq_expr -> expr SEMI
-- On IN reduce production seq_expr -> expr SEMI
-- On GREATERRBRACKET reduce production seq_expr -> expr SEMI
-- On GREATERRBRACE reduce production seq_expr -> expr SEMI
-- On GREATERGREATER reduce production seq_expr -> expr SEMI
-- On GREATER reduce production seq_expr -> expr SEMI
-- On EXTERNAL reduce production seq_expr -> expr SEMI
-- On EXCEPTION reduce production seq_expr -> expr SEMI
-- On EQUAL reduce production seq_expr -> expr SEMI
-- On EOF reduce production seq_expr -> expr SEMI
-- On END reduce production seq_expr -> expr SEMI
-- On ELSE reduce production seq_expr -> expr SEMI
-- On DONE reduce production seq_expr -> expr SEMI
-- On COMMA reduce production seq_expr -> expr SEMI
-- On COLONGREATER reduce production seq_expr -> expr SEMI
-- On COLONEQUAL reduce production seq_expr -> expr SEMI
-- On COLONCOLON reduce production seq_expr -> expr SEMI
-- On COLON reduce production seq_expr -> expr SEMI
-- On CLASS reduce production seq_expr -> expr SEMI
-- On BARRBRACKET reduce production seq_expr -> expr SEMI
-- On BARBAR reduce production seq_expr -> expr SEMI
-- On BAR reduce production seq_expr -> expr SEMI
-- On AND reduce production seq_expr -> expr SEMI
-- On AMPERSAND reduce production seq_expr -> expr SEMI
-- On AMPERAMPER reduce production seq_expr -> expr SEMI

State 543:
## Known stack suffix:
## expr SEMI seq_expr
## LR(1) items:
seq_expr -> expr SEMI seq_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production seq_expr -> expr SEMI seq_expr

State 544:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On SEMI shift to state 542
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production seq_expr -> expr
-- On WITH reduce production seq_expr -> expr
-- On WHILE reduce production seq_expr -> expr
-- On VIRTUAL reduce production seq_expr -> expr
-- On VAL reduce production seq_expr -> expr
-- On UIDENT reduce production seq_expr -> expr
-- On TYPE reduce production seq_expr -> expr
-- On TRY reduce production seq_expr -> expr
-- On TRUE reduce production seq_expr -> expr
-- On STRING reduce production seq_expr -> expr
-- On SHARP reduce production seq_expr -> expr
-- On SEMISEMI reduce production seq_expr -> expr
-- On RPAREN reduce production seq_expr -> expr
-- On RBRACKET reduce production seq_expr -> expr
-- On RBRACE reduce production seq_expr -> expr
-- On QUESTION reduce production seq_expr -> expr
-- On PREFIXOP reduce production seq_expr -> expr
-- On PARSER reduce production seq_expr -> expr
-- On OPEN reduce production seq_expr -> expr
-- On NEW reduce production seq_expr -> expr
-- On MODULE reduce production seq_expr -> expr
-- On METHOD reduce production seq_expr -> expr
-- On MATCH reduce production seq_expr -> expr
-- On LPAREN reduce production seq_expr -> expr
-- On LOC reduce production seq_expr -> expr
-- On LIDENT reduce production seq_expr -> expr
-- On LET reduce production seq_expr -> expr
-- On LBRACKETLESS reduce production seq_expr -> expr
-- On LBRACKETBAR reduce production seq_expr -> expr
-- On LBRACKET reduce production seq_expr -> expr
-- On LBRACELESS reduce production seq_expr -> expr
-- On LBRACEBAR reduce production seq_expr -> expr
-- On LBRACE reduce production seq_expr -> expr
-- On LAZY reduce production seq_expr -> expr
-- On INT reduce production seq_expr -> expr
-- On INHERIT reduce production seq_expr -> expr
-- On IN reduce production seq_expr -> expr
-- On IF reduce production seq_expr -> expr
-- On GREATERRBRACKET reduce production seq_expr -> expr
-- On GREATERRBRACE reduce production seq_expr -> expr
-- On GREATERGREATER reduce production seq_expr -> expr
-- On FUNCTION reduce production seq_expr -> expr
-- On FUN reduce production seq_expr -> expr
-- On FOR reduce production seq_expr -> expr
-- On FLOAT reduce production seq_expr -> expr
-- On FALSE reduce production seq_expr -> expr
-- On EXTERNAL reduce production seq_expr -> expr
-- On EXCEPTION reduce production seq_expr -> expr
-- On EOF reduce production seq_expr -> expr
-- On END reduce production seq_expr -> expr
-- On ELSE reduce production seq_expr -> expr
-- On DONE reduce production seq_expr -> expr
-- On DEF reduce production seq_expr -> expr
-- On COLONGREATER reduce production seq_expr -> expr
-- On COLON reduce production seq_expr -> expr
-- On CLASS reduce production seq_expr -> expr
-- On CHAR reduce production seq_expr -> expr
-- On BEGIN reduce production seq_expr -> expr
-- On BARRBRACKET reduce production seq_expr -> expr
-- On BAR reduce production seq_expr -> expr
-- On ASSERT reduce production seq_expr -> expr
-- On AND reduce production seq_expr -> expr

State 545:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
list_of_exprs -> LPAREN expr RPAREN . [ error GREATERGREATER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production list_of_exprs -> LPAREN expr RPAREN

State 546:
## Known stack suffix:
## simple_expr LESSLESS list_of_exprs
## LR(1) items:
expr -> simple_expr LESSLESS list_of_exprs . GREATERGREATER [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr LESSLESS list_of_exprs . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 547
-- On GREATERGREATER shift to state 548
## Reductions:

State 547:
## Known stack suffix:
## simple_expr LESSLESS list_of_exprs error
## LR(1) items:
expr -> simple_expr LESSLESS list_of_exprs error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> simple_expr LESSLESS list_of_exprs error

State 548:
## Known stack suffix:
## simple_expr LESSLESS list_of_exprs GREATERGREATER
## LR(1) items:
expr -> simple_expr LESSLESS list_of_exprs GREATERGREATER . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> simple_expr LESSLESS list_of_exprs GREATERGREATER

State 549:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERGREATER GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
list_of_exprs -> expr . [ error GREATERGREATER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production list_of_exprs -> expr
-- On GREATERGREATER reduce production list_of_exprs -> expr

State 550:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
expr -> simple_expr DOT . label_longident LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LPAREN seq_expr RPAREN LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 551
-- On LIDENT shift to state 334
-- On LBRACKET shift to state 557
-- On mod_longident shift to state 335
-- On label_longident shift to state 563
## Reductions:

State 551:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN . seq_expr RPAREN LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 552
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 552:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr . RPAREN LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 553
-- On RPAREN shift to state 554
## Reductions:

State 553:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr error

State 554:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN . LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 555
## Reductions:
-- On error reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On WITH reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On WHILE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On VIRTUAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On VAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On UIDENT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On TYPE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On TRY reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On TRUE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SUBTRACTIVE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On STRING reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On STAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SHARP reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SEMI reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On RPAREN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On RBRACKET reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On RBRACE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On QUESTION reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On PARSER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On OR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On OPEN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On NEW reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On MODULE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On METHOD reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On MATCH reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LPAREN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LOC reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LIDENT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LET reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESSLESSGREATERGREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESSLESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESSGREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACKETLESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACKETBAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACKET reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACELESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACEBAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LAZY reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INHERIT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP4 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP3 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP2 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP1 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP0 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On IN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On IF reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On GREATERRBRACKET reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On GREATERRBRACE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On GREATERGREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On GREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FUNCTION reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FUN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FOR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FLOAT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FALSE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EXTERNAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EQUAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EOF reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On END reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On ELSE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On DOT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On DONE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On DEF reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COMMA reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COLONGREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COLON reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On CLASS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On CHAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On BEGIN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On BARRBRACKET reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On BARBAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On BAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On ASSERT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On AND reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On AMPERSAND reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 555:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 556
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 556:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On WITH reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On WHILE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On VIRTUAL reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On VAL reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On UIDENT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On TYPE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On TRY reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On TRUE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On STRING reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On SHARP reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On SEMISEMI reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On SEMI reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On RPAREN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On RBRACKET reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On RBRACE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On QUESTION reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On PREFIXOP reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On PARSER reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On OPEN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On NEW reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On MODULE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On METHOD reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On MATCH reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LPAREN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LOC reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LIDENT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LET reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACKET reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACELESS reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACEBAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LAZY reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On INT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On INHERIT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On IN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On IF reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On GREATERRBRACKET reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On GREATERRBRACE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On GREATERGREATER reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FUNCTION reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FUN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FOR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FLOAT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FALSE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On EXTERNAL reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On EXCEPTION reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On EOF reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On END reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On ELSE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On DONE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On DEF reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On COLONGREATER reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On COLON reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On CLASS reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On CHAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On BEGIN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On BARRBRACKET reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On BAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On ASSERT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On AND reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr

State 557:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 558
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 558:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 559
-- On RBRACKET shift to state 560
## Reductions:

State 559:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr error

State 560:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 561
## Reductions:
-- On error reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On WITH reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On WHILE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On VIRTUAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On VAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On TYPE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On TRY reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On TRUE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SUBTRACTIVE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On RPAREN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On RBRACKET reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On RBRACE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On QUESTION reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On PARSER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On OR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On OPEN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On NEW reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On MODULE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On METHOD reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On MATCH reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LOC reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LET reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESSLESSGREATERGREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESSLESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESSGREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACKETLESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACKETBAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACKET reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACELESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACEBAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LAZY reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INHERIT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP4 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP3 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP2 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP1 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP0 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On IN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On IF reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On GREATERRBRACKET reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On GREATERRBRACE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On GREATERGREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On GREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FUNCTION reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FUN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FOR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FALSE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EXTERNAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EQUAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EOF reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On END reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On DONE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On DEF reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COLONGREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COLON reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On CLASS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On BARRBRACKET reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On ASSERT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On AND reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On AMPERSAND reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 561:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 562
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 562:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On WITH reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On WHILE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On VIRTUAL reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On VAL reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On UIDENT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On TYPE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On TRY reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On TRUE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On STRING reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On SHARP reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On SEMISEMI reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On SEMI reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On RPAREN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On RBRACKET reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On RBRACE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On QUESTION reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On PREFIXOP reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On PARSER reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On OPEN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On NEW reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On MODULE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On METHOD reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On MATCH reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LPAREN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LOC reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LIDENT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LET reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACKET reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACELESS reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACEBAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LAZY reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On INT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On INHERIT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On IN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On IF reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On GREATERRBRACKET reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On GREATERRBRACE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On GREATERGREATER reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FUNCTION reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FUN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FOR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FLOAT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FALSE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On EXTERNAL reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On EXCEPTION reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On EOF reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On END reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On ELSE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On DONE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On DEF reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On COLONGREATER reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On COLON reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On CLASS reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On CHAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On BEGIN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On BARRBRACKET reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On BAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On ASSERT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On AND reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr

State 563:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
expr -> simple_expr DOT label_longident . LESSMINUS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 564
## Reductions:
-- On error reduce production simple_expr -> simple_expr DOT label_longident
-- On WITH reduce production simple_expr -> simple_expr DOT label_longident
-- On WHILE reduce production simple_expr -> simple_expr DOT label_longident
-- On VIRTUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On VAL reduce production simple_expr -> simple_expr DOT label_longident
-- On UIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On TYPE reduce production simple_expr -> simple_expr DOT label_longident
-- On TRY reduce production simple_expr -> simple_expr DOT label_longident
-- On TRUE reduce production simple_expr -> simple_expr DOT label_longident
-- On SUBTRACTIVE reduce production simple_expr -> simple_expr DOT label_longident
-- On STRING reduce production simple_expr -> simple_expr DOT label_longident
-- On STAR reduce production simple_expr -> simple_expr DOT label_longident
-- On SHARP reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On RPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On RBRACKET reduce production simple_expr -> simple_expr DOT label_longident
-- On RBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On QUESTION reduce production simple_expr -> simple_expr DOT label_longident
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT label_longident
-- On PARSER reduce production simple_expr -> simple_expr DOT label_longident
-- On OR reduce production simple_expr -> simple_expr DOT label_longident
-- On OPEN reduce production simple_expr -> simple_expr DOT label_longident
-- On NEW reduce production simple_expr -> simple_expr DOT label_longident
-- On MODULE reduce production simple_expr -> simple_expr DOT label_longident
-- On METHOD reduce production simple_expr -> simple_expr DOT label_longident
-- On MATCH reduce production simple_expr -> simple_expr DOT label_longident
-- On LPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On LOC reduce production simple_expr -> simple_expr DOT label_longident
-- On LIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On LET reduce production simple_expr -> simple_expr DOT label_longident
-- On LESSLESSGREATERGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On LESSLESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LESSGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On LESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKETLESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKETBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKET reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACELESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACEBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On LAZY reduce production simple_expr -> simple_expr DOT label_longident
-- On INT reduce production simple_expr -> simple_expr DOT label_longident
-- On INHERIT reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP0 reduce production simple_expr -> simple_expr DOT label_longident
-- On IN reduce production simple_expr -> simple_expr DOT label_longident
-- On IF reduce production simple_expr -> simple_expr DOT label_longident
-- On GREATERRBRACKET reduce production simple_expr -> simple_expr DOT label_longident
-- On GREATERRBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On GREATERGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On GREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On FUNCTION reduce production simple_expr -> simple_expr DOT label_longident
-- On FUN reduce production simple_expr -> simple_expr DOT label_longident
-- On FOR reduce production simple_expr -> simple_expr DOT label_longident
-- On FLOAT reduce production simple_expr -> simple_expr DOT label_longident
-- On FALSE reduce production simple_expr -> simple_expr DOT label_longident
-- On EXTERNAL reduce production simple_expr -> simple_expr DOT label_longident
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT label_longident
-- On EQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On EOF reduce production simple_expr -> simple_expr DOT label_longident
-- On END reduce production simple_expr -> simple_expr DOT label_longident
-- On ELSE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DONE reduce production simple_expr -> simple_expr DOT label_longident
-- On DEF reduce production simple_expr -> simple_expr DOT label_longident
-- On COMMA reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On COLON reduce production simple_expr -> simple_expr DOT label_longident
-- On CLASS reduce production simple_expr -> simple_expr DOT label_longident
-- On CHAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BEGIN reduce production simple_expr -> simple_expr DOT label_longident
-- On BARRBRACKET reduce production simple_expr -> simple_expr DOT label_longident
-- On BARBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BAR reduce production simple_expr -> simple_expr DOT label_longident
-- On ASSERT reduce production simple_expr -> simple_expr DOT label_longident
-- On AND reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERSAND reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT label_longident

State 564:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
expr -> simple_expr DOT label_longident LESSMINUS . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 565
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 565:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT label_longident LESSMINUS expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On WITH reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On WHILE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On VIRTUAL reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On VAL reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On UIDENT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TYPE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TRY reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TRUE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On STRING reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SHARP reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SEMISEMI reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SEMI reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RPAREN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RBRACKET reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On RBRACE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On QUESTION reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On PREFIXOP reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On PARSER reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On OPEN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On NEW reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MODULE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On METHOD reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MATCH reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LPAREN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LOC reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LIDENT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LET reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACKET reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACELESS reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACEBAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LAZY reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On INT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On INHERIT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On IN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On IF reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On GREATERRBRACKET reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On GREATERRBRACE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On GREATERGREATER reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FUNCTION reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FUN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FOR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FLOAT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FALSE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EXTERNAL reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EXCEPTION reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EOF reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On END reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ELSE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DONE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DEF reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On COLONGREATER reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On COLON reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On CLASS reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On CHAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BEGIN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BARRBRACKET reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ASSERT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On AND reduce production expr -> simple_expr DOT label_longident LESSMINUS expr

State 566:
## Known stack suffix:
## simple_expr simple_expr_list
## LR(1) items:
expr -> simple_expr simple_expr_list . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list . simple_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 567
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:
-- On error reduce production expr -> simple_expr simple_expr_list
-- On WITH reduce production expr -> simple_expr simple_expr_list
-- On WHILE reduce production expr -> simple_expr simple_expr_list
-- On VIRTUAL reduce production expr -> simple_expr simple_expr_list
-- On VAL reduce production expr -> simple_expr simple_expr_list
-- On TYPE reduce production expr -> simple_expr simple_expr_list
-- On TRY reduce production expr -> simple_expr simple_expr_list
-- On SUBTRACTIVE reduce production expr -> simple_expr simple_expr_list
-- On STAR reduce production expr -> simple_expr simple_expr_list
-- On SHARP reduce production expr -> simple_expr simple_expr_list
-- On SEMISEMI reduce production expr -> simple_expr simple_expr_list
-- On SEMI reduce production expr -> simple_expr simple_expr_list
-- On RPAREN reduce production expr -> simple_expr simple_expr_list
-- On RBRACKET reduce production expr -> simple_expr simple_expr_list
-- On RBRACE reduce production expr -> simple_expr simple_expr_list
-- On QUESTION reduce production expr -> simple_expr simple_expr_list
-- On PARSER reduce production expr -> simple_expr simple_expr_list
-- On OR reduce production expr -> simple_expr simple_expr_list
-- On OPEN reduce production expr -> simple_expr simple_expr_list
-- On MODULE reduce production expr -> simple_expr simple_expr_list
-- On METHOD reduce production expr -> simple_expr simple_expr_list
-- On MATCH reduce production expr -> simple_expr simple_expr_list
-- On LET reduce production expr -> simple_expr simple_expr_list
-- On LESSGREATER reduce production expr -> simple_expr simple_expr_list
-- On LESS reduce production expr -> simple_expr simple_expr_list
-- On LBRACEBAR reduce production expr -> simple_expr simple_expr_list
-- On LAZY reduce production expr -> simple_expr simple_expr_list
-- On INHERIT reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP4 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP3 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP2 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP1 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP0 reduce production expr -> simple_expr simple_expr_list
-- On IN reduce production expr -> simple_expr simple_expr_list
-- On IF reduce production expr -> simple_expr simple_expr_list
-- On GREATERRBRACKET reduce production expr -> simple_expr simple_expr_list
-- On GREATERRBRACE reduce production expr -> simple_expr simple_expr_list
-- On GREATERGREATER reduce production expr -> simple_expr simple_expr_list
-- On GREATER reduce production expr -> simple_expr simple_expr_list
-- On FUNCTION reduce production expr -> simple_expr simple_expr_list
-- On FUN reduce production expr -> simple_expr simple_expr_list
-- On FOR reduce production expr -> simple_expr simple_expr_list
-- On EXTERNAL reduce production expr -> simple_expr simple_expr_list
-- On EXCEPTION reduce production expr -> simple_expr simple_expr_list
-- On EQUAL reduce production expr -> simple_expr simple_expr_list
-- On EOF reduce production expr -> simple_expr simple_expr_list
-- On END reduce production expr -> simple_expr simple_expr_list
-- On ELSE reduce production expr -> simple_expr simple_expr_list
-- On DONE reduce production expr -> simple_expr simple_expr_list
-- On DEF reduce production expr -> simple_expr simple_expr_list
-- On COMMA reduce production expr -> simple_expr simple_expr_list
-- On COLONGREATER reduce production expr -> simple_expr simple_expr_list
-- On COLONEQUAL reduce production expr -> simple_expr simple_expr_list
-- On COLONCOLON reduce production expr -> simple_expr simple_expr_list
-- On COLON reduce production expr -> simple_expr simple_expr_list
-- On CLASS reduce production expr -> simple_expr simple_expr_list
-- On BARRBRACKET reduce production expr -> simple_expr simple_expr_list
-- On BARBAR reduce production expr -> simple_expr simple_expr_list
-- On BAR reduce production expr -> simple_expr simple_expr_list
-- On ASSERT reduce production expr -> simple_expr simple_expr_list
-- On AND reduce production expr -> simple_expr simple_expr_list
-- On AMPERSAND reduce production expr -> simple_expr simple_expr_list
-- On AMPERAMPER reduce production expr -> simple_expr simple_expr_list

State 567:
## Known stack suffix:
## simple_expr_list simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list simple_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 476
-- On DOT shift to state 479
## Reductions:
-- On error reduce production simple_expr_list -> simple_expr_list simple_expr
-- On WITH reduce production simple_expr_list -> simple_expr_list simple_expr
-- On WHILE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On VIRTUAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On VAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TYPE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TRY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TRUE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SUBTRACTIVE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SEMISEMI reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RPAREN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RBRACKET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On RBRACE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On QUESTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PARSER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On OR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On OPEN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On NEW reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MODULE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On METHOD reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MATCH reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LOC reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LESSGREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LESS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKETLESS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKETBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACELESS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACEBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LAZY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INHERIT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP4 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP3 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP2 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP1 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP0 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On GREATERRBRACKET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On GREATERRBRACE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On GREATERGREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On GREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FUNCTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FUN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FOR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FALSE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EXTERNAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EXCEPTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EQUAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EOF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On END reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DONE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DEF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONGREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On CLASS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BARRBRACKET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ASSERT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AND reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AMPERSAND reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr_list simple_expr

State 568:
## Known stack suffix:
## simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 476
-- On DOT shift to state 479
## Reductions:
-- On error reduce production simple_expr_list -> simple_expr
-- On WITH reduce production simple_expr_list -> simple_expr
-- On WHILE reduce production simple_expr_list -> simple_expr
-- On VIRTUAL reduce production simple_expr_list -> simple_expr
-- On VAL reduce production simple_expr_list -> simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr
-- On TYPE reduce production simple_expr_list -> simple_expr
-- On TRY reduce production simple_expr_list -> simple_expr
-- On TRUE reduce production simple_expr_list -> simple_expr
-- On SUBTRACTIVE reduce production simple_expr_list -> simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr
-- On SEMISEMI reduce production simple_expr_list -> simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr
-- On RPAREN reduce production simple_expr_list -> simple_expr
-- On RBRACKET reduce production simple_expr_list -> simple_expr
-- On RBRACE reduce production simple_expr_list -> simple_expr
-- On QUESTION reduce production simple_expr_list -> simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr
-- On PARSER reduce production simple_expr_list -> simple_expr
-- On OR reduce production simple_expr_list -> simple_expr
-- On OPEN reduce production simple_expr_list -> simple_expr
-- On NEW reduce production simple_expr_list -> simple_expr
-- On MODULE reduce production simple_expr_list -> simple_expr
-- On METHOD reduce production simple_expr_list -> simple_expr
-- On MATCH reduce production simple_expr_list -> simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr
-- On LOC reduce production simple_expr_list -> simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr
-- On LET reduce production simple_expr_list -> simple_expr
-- On LESSGREATER reduce production simple_expr_list -> simple_expr
-- On LESS reduce production simple_expr_list -> simple_expr
-- On LBRACKETLESS reduce production simple_expr_list -> simple_expr
-- On LBRACKETBAR reduce production simple_expr_list -> simple_expr
-- On LBRACKET reduce production simple_expr_list -> simple_expr
-- On LBRACELESS reduce production simple_expr_list -> simple_expr
-- On LBRACEBAR reduce production simple_expr_list -> simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr
-- On LAZY reduce production simple_expr_list -> simple_expr
-- On INT reduce production simple_expr_list -> simple_expr
-- On INHERIT reduce production simple_expr_list -> simple_expr
-- On INFIXOP4 reduce production simple_expr_list -> simple_expr
-- On INFIXOP3 reduce production simple_expr_list -> simple_expr
-- On INFIXOP2 reduce production simple_expr_list -> simple_expr
-- On INFIXOP1 reduce production simple_expr_list -> simple_expr
-- On INFIXOP0 reduce production simple_expr_list -> simple_expr
-- On IN reduce production simple_expr_list -> simple_expr
-- On IF reduce production simple_expr_list -> simple_expr
-- On GREATERRBRACKET reduce production simple_expr_list -> simple_expr
-- On GREATERRBRACE reduce production simple_expr_list -> simple_expr
-- On GREATERGREATER reduce production simple_expr_list -> simple_expr
-- On GREATER reduce production simple_expr_list -> simple_expr
-- On FUNCTION reduce production simple_expr_list -> simple_expr
-- On FUN reduce production simple_expr_list -> simple_expr
-- On FOR reduce production simple_expr_list -> simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr
-- On FALSE reduce production simple_expr_list -> simple_expr
-- On EXTERNAL reduce production simple_expr_list -> simple_expr
-- On EXCEPTION reduce production simple_expr_list -> simple_expr
-- On EQUAL reduce production simple_expr_list -> simple_expr
-- On EOF reduce production simple_expr_list -> simple_expr
-- On END reduce production simple_expr_list -> simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr
-- On DONE reduce production simple_expr_list -> simple_expr
-- On DEF reduce production simple_expr_list -> simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr
-- On COLONGREATER reduce production simple_expr_list -> simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr
-- On COLON reduce production simple_expr_list -> simple_expr
-- On CLASS reduce production simple_expr_list -> simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr
-- On BARRBRACKET reduce production simple_expr_list -> simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr
-- On ASSERT reduce production simple_expr_list -> simple_expr
-- On AS reduce production simple_expr_list -> simple_expr
-- On AND reduce production simple_expr_list -> simple_expr
-- On AMPERSAND reduce production simple_expr_list -> simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr

State 569:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 553
-- On RPAREN shift to state 570
## Reductions:

State 570:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 571:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 572
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 572:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 559
-- On RBRACKET shift to state 573
## Reductions:

State 573:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 574:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT label_longident

State 575:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
process -> BEGIN seq_expr . END SEMI process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
process -> BEGIN seq_expr . error [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On error shift to state 576
-- On END shift to state 577
## Reductions:

State 576:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
process -> BEGIN seq_expr error . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> BEGIN seq_expr error

State 577:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
process -> BEGIN seq_expr END . SEMI process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On SEMI shift to state 578
## Reductions:

State 578:
## Known stack suffix:
## BEGIN seq_expr END SEMI
## LR(1) items:
process -> BEGIN seq_expr END SEMI . process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 591
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On WHILE reduce production process ->
-- On TYPE reduce production process ->
-- On TRY reduce production process ->
-- On SUBTRACTIVE reduce production process ->
-- On SHARP reduce production process ->
-- On SEMISEMI reduce production process ->
-- On PREFIXOP reduce production process ->
-- On PARSER reduce production process ->
-- On OPEN reduce production process ->
-- On NEW reduce production process ->
-- On MODULE reduce production process ->
-- On MATCH reduce production process ->
-- On LOC reduce production process ->
-- On LBRACKETLESS reduce production process ->
-- On LBRACELESS reduce production process ->
-- On LBRACE reduce production process ->
-- On LAZY reduce production process ->
-- On IN reduce production process ->
-- On FUNCTION reduce production process ->
-- On FUN reduce production process ->
-- On FOR reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On EOF reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On BARRBRACE reduce production process ->
-- On ASSERT reduce production process ->
-- On AND reduce production process ->

State 579:
## Known stack suffix:
## static_expr
## LR(1) items:
process0 -> static_expr . LESSLESSGREATERGREATER [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
process0 -> static_expr . LESSLESS static_comma_list GREATERGREATER [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
process0 -> static_expr . LESSLESS static_comma_list error [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_expr -> static_expr . DOT label_longident [ LESSLESSGREATERGREATER LESSLESS DOT ]
## Transitions:
-- On LESSLESSGREATERGREATER shift to state 580
-- On LESSLESS shift to state 581
-- On DOT shift to state 362
## Reductions:

State 580:
## Known stack suffix:
## static_expr LESSLESSGREATERGREATER
## LR(1) items:
process0 -> static_expr LESSLESSGREATERGREATER . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> static_expr LESSLESSGREATERGREATER

State 581:
## Known stack suffix:
## static_expr LESSLESS
## LR(1) items:
process0 -> static_expr LESSLESS . static_comma_list GREATERGREATER [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
process0 -> static_expr LESSLESS . static_comma_list error [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_expr shift to state 582
-- On static_comma_list shift to state 583
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 582:
## Known stack suffix:
## static_expr
## LR(1) items:
static_comma_list -> static_expr . [ error GREATERGREATER COMMA ]
static_expr -> static_expr . DOT label_longident [ error GREATERGREATER DOT COMMA ]
## Transitions:
-- On DOT shift to state 333
## Reductions:
-- On error reduce production static_comma_list -> static_expr
-- On GREATERGREATER reduce production static_comma_list -> static_expr
-- On COMMA reduce production static_comma_list -> static_expr

State 583:
## Known stack suffix:
## static_expr LESSLESS static_comma_list
## LR(1) items:
process0 -> static_expr LESSLESS static_comma_list . GREATERGREATER [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
process0 -> static_expr LESSLESS static_comma_list . error [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
static_comma_list -> static_comma_list . COMMA static_expr [ error GREATERGREATER COMMA ]
## Transitions:
-- On error shift to state 584
-- On GREATERGREATER shift to state 585
-- On COMMA shift to state 586
## Reductions:

State 584:
## Known stack suffix:
## static_expr LESSLESS static_comma_list error
## LR(1) items:
process0 -> static_expr LESSLESS static_comma_list error . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> static_expr LESSLESS static_comma_list error

State 585:
## Known stack suffix:
## static_expr LESSLESS static_comma_list GREATERGREATER
## LR(1) items:
process0 -> static_expr LESSLESS static_comma_list GREATERGREATER . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> static_expr LESSLESS static_comma_list GREATERGREATER

State 586:
## Known stack suffix:
## static_comma_list COMMA
## LR(1) items:
static_comma_list -> static_comma_list COMMA . static_expr [ error GREATERGREATER COMMA ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_expr shift to state 587
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 587:
## Known stack suffix:
## static_comma_list COMMA static_expr
## LR(1) items:
static_comma_list -> static_comma_list COMMA static_expr . [ error GREATERGREATER COMMA ]
static_expr -> static_expr . DOT label_longident [ error GREATERGREATER DOT COMMA ]
## Transitions:
-- On DOT shift to state 333
## Reductions:
-- On error reduce production static_comma_list -> static_comma_list COMMA static_expr
-- On GREATERGREATER reduce production static_comma_list -> static_comma_list COMMA static_expr
-- On COMMA reduce production static_comma_list -> static_comma_list COMMA static_expr

State 588:
## Known stack suffix:
## process0
## LR(1) items:
process -> process0 . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
process -> process0 . BAR process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On BAR shift to state 589
## Reductions:
-- On WHILE reduce production process -> process0
-- On UIDENT reduce production process -> process0
-- On TYPE reduce production process -> process0
-- On TRY reduce production process -> process0
-- On TRUE reduce production process -> process0
-- On SUBTRACTIVE reduce production process -> process0
-- On STRING reduce production process -> process0
-- On SHARP reduce production process -> process0
-- On SEMISEMI reduce production process -> process0
-- On PREFIXOP reduce production process -> process0
-- On PARSER reduce production process -> process0
-- On OPEN reduce production process -> process0
-- On NEW reduce production process -> process0
-- On MODULE reduce production process -> process0
-- On MATCH reduce production process -> process0
-- On LPAREN reduce production process -> process0
-- On LOC reduce production process -> process0
-- On LIDENT reduce production process -> process0
-- On LET reduce production process -> process0
-- On LBRACKETLESS reduce production process -> process0
-- On LBRACKETBAR reduce production process -> process0
-- On LBRACKET reduce production process -> process0
-- On LBRACELESS reduce production process -> process0
-- On LBRACEBAR reduce production process -> process0
-- On LBRACE reduce production process -> process0
-- On LAZY reduce production process -> process0
-- On INT reduce production process -> process0
-- On IN reduce production process -> process0
-- On IF reduce production process -> process0
-- On FUNCTION reduce production process -> process0
-- On FUN reduce production process -> process0
-- On FOR reduce production process -> process0
-- On FLOAT reduce production process -> process0
-- On FALSE reduce production process -> process0
-- On EXTERNAL reduce production process -> process0
-- On EXCEPTION reduce production process -> process0
-- On EOF reduce production process -> process0
-- On END reduce production process -> process0
-- On DEF reduce production process -> process0
-- On CLASS reduce production process -> process0
-- On CHAR reduce production process -> process0
-- On BEGIN reduce production process -> process0
-- On BARRBRACE reduce production process -> process0
-- On ASSERT reduce production process -> process0
-- On AND reduce production process -> process0

State 589:
## Known stack suffix:
## process0 BAR
## LR(1) items:
process -> process0 BAR . process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 590
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On WHILE reduce production process ->
-- On TYPE reduce production process ->
-- On TRY reduce production process ->
-- On SUBTRACTIVE reduce production process ->
-- On SHARP reduce production process ->
-- On SEMISEMI reduce production process ->
-- On PREFIXOP reduce production process ->
-- On PARSER reduce production process ->
-- On OPEN reduce production process ->
-- On NEW reduce production process ->
-- On MODULE reduce production process ->
-- On MATCH reduce production process ->
-- On LOC reduce production process ->
-- On LBRACKETLESS reduce production process ->
-- On LBRACELESS reduce production process ->
-- On LBRACE reduce production process ->
-- On LAZY reduce production process ->
-- On IN reduce production process ->
-- On FUNCTION reduce production process ->
-- On FUN reduce production process ->
-- On FOR reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On EOF reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On BARRBRACE reduce production process ->
-- On ASSERT reduce production process ->
-- On AND reduce production process ->

State 590:
## Known stack suffix:
## process0 BAR process
## LR(1) items:
process -> process0 BAR process . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> process0 BAR process

State 591:
## Known stack suffix:
## BEGIN seq_expr END SEMI process
## LR(1) items:
process -> BEGIN seq_expr END SEMI process . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> BEGIN seq_expr END SEMI process

State 592:
## Known stack suffix:
## DEF def_bindings IN process
## LR(1) items:
process -> DEF def_bindings IN process . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> DEF def_bindings IN process

State 593:
## Known stack suffix:
## def_bindings AND
## LR(1) items:
def_bindings -> def_bindings AND . def_binding [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_binding shift to state 594
## Reductions:

State 594:
## Known stack suffix:
## def_bindings AND def_binding
## LR(1) items:
def_bindings -> def_bindings AND def_binding . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def_bindings -> def_bindings AND def_binding

State 595:
## Known stack suffix:
## def_binding
## LR(1) items:
def_bindings -> def_binding . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def_bindings -> def_binding

State 596:
## Known stack suffix:
## join_pattern EQUAL process
## LR(1) items:
def_binding -> join_pattern EQUAL process . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def_binding -> join_pattern EQUAL process

State 597:
## Known stack suffix:
## join_pattern BAR
## LR(1) items:
join_pattern -> join_pattern BAR . join_pattern [ EQUAL BAR ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 598
## Reductions:

State 598:
## Known stack suffix:
## join_pattern BAR join_pattern
## LR(1) items:
join_pattern -> join_pattern . BAR join_pattern [ EQUAL BAR ]
join_pattern -> join_pattern BAR join_pattern . [ EQUAL BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production join_pattern -> join_pattern BAR join_pattern

State 599:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ IN AND ]
expr -> DEF def_bindings . IN seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On IN shift to state 600
-- On AND shift to state 593
## Reductions:

State 600:
## Known stack suffix:
## DEF def_bindings IN
## LR(1) items:
expr -> DEF def_bindings IN . seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 601
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 601:
## Known stack suffix:
## DEF def_bindings IN seq_expr
## LR(1) items:
expr -> DEF def_bindings IN seq_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> DEF def_bindings IN seq_expr

State 602:
## Known stack suffix:
## label_longident EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
lbl_expr_list -> label_longident EQUAL expr . [ error SEMI RBRACE ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production lbl_expr_list -> label_longident EQUAL expr
-- On SEMI reduce production lbl_expr_list -> label_longident EQUAL expr
-- On RBRACE reduce production lbl_expr_list -> label_longident EQUAL expr

State 603:
## Known stack suffix:
## LAZY
## LR(1) items:
expr -> LAZY . simple_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On NEW shift to state 9
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 246
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACE shift to state 441
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 609
-- On mod_longident shift to state 378
-- On constr_longident shift to state 622
-- On constant shift to state 623
## Reductions:

State 604:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 605
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 605:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 606
-- On END shift to state 607
## Reductions:

State 606:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr error

State 607:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr END

State 608:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> val_longident

State 609:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
expr -> LAZY simple_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 610
-- On DOT shift to state 612
## Reductions:
-- On WITH reduce production expr -> LAZY simple_expr
-- On WHILE reduce production expr -> LAZY simple_expr
-- On UIDENT reduce production expr -> LAZY simple_expr
-- On TYPE reduce production expr -> LAZY simple_expr
-- On TRY reduce production expr -> LAZY simple_expr
-- On TRUE reduce production expr -> LAZY simple_expr
-- On TO reduce production expr -> LAZY simple_expr
-- On THEN reduce production expr -> LAZY simple_expr
-- On SUBTRACTIVE reduce production expr -> LAZY simple_expr
-- On STRING reduce production expr -> LAZY simple_expr
-- On STAR reduce production expr -> LAZY simple_expr
-- On SEMISEMI reduce production expr -> LAZY simple_expr
-- On SEMI reduce production expr -> LAZY simple_expr
-- On PREFIXOP reduce production expr -> LAZY simple_expr
-- On PARSER reduce production expr -> LAZY simple_expr
-- On OR reduce production expr -> LAZY simple_expr
-- On OPEN reduce production expr -> LAZY simple_expr
-- On NEW reduce production expr -> LAZY simple_expr
-- On MODULE reduce production expr -> LAZY simple_expr
-- On MINUSGREATER reduce production expr -> LAZY simple_expr
-- On MATCH reduce production expr -> LAZY simple_expr
-- On LPAREN reduce production expr -> LAZY simple_expr
-- On LOC reduce production expr -> LAZY simple_expr
-- On LIDENT reduce production expr -> LAZY simple_expr
-- On LET reduce production expr -> LAZY simple_expr
-- On LESSGREATER reduce production expr -> LAZY simple_expr
-- On LESS reduce production expr -> LAZY simple_expr
-- On LBRACKETLESS reduce production expr -> LAZY simple_expr
-- On LBRACKETBAR reduce production expr -> LAZY simple_expr
-- On LBRACKET reduce production expr -> LAZY simple_expr
-- On LBRACELESS reduce production expr -> LAZY simple_expr
-- On LBRACEBAR reduce production expr -> LAZY simple_expr
-- On LBRACE reduce production expr -> LAZY simple_expr
-- On LAZY reduce production expr -> LAZY simple_expr
-- On INT reduce production expr -> LAZY simple_expr
-- On INFIXOP4 reduce production expr -> LAZY simple_expr
-- On INFIXOP3 reduce production expr -> LAZY simple_expr
-- On INFIXOP2 reduce production expr -> LAZY simple_expr
-- On INFIXOP1 reduce production expr -> LAZY simple_expr
-- On INFIXOP0 reduce production expr -> LAZY simple_expr
-- On IN reduce production expr -> LAZY simple_expr
-- On IF reduce production expr -> LAZY simple_expr
-- On GREATER reduce production expr -> LAZY simple_expr
-- On FUNCTION reduce production expr -> LAZY simple_expr
-- On FUN reduce production expr -> LAZY simple_expr
-- On FOR reduce production expr -> LAZY simple_expr
-- On FLOAT reduce production expr -> LAZY simple_expr
-- On FALSE reduce production expr -> LAZY simple_expr
-- On EXTERNAL reduce production expr -> LAZY simple_expr
-- On EXCEPTION reduce production expr -> LAZY simple_expr
-- On EQUAL reduce production expr -> LAZY simple_expr
-- On EOF reduce production expr -> LAZY simple_expr
-- On END reduce production expr -> LAZY simple_expr
-- On ELSE reduce production expr -> LAZY simple_expr
-- On DOWNTO reduce production expr -> LAZY simple_expr
-- On DO reduce production expr -> LAZY simple_expr
-- On DEF reduce production expr -> LAZY simple_expr
-- On COMMA reduce production expr -> LAZY simple_expr
-- On COLONEQUAL reduce production expr -> LAZY simple_expr
-- On COLONCOLON reduce production expr -> LAZY simple_expr
-- On CLASS reduce production expr -> LAZY simple_expr
-- On CHAR reduce production expr -> LAZY simple_expr
-- On BEGIN reduce production expr -> LAZY simple_expr
-- On BARBAR reduce production expr -> LAZY simple_expr
-- On BAR reduce production expr -> LAZY simple_expr
-- On ASSERT reduce production expr -> LAZY simple_expr
-- On AND reduce production expr -> LAZY simple_expr
-- On AMPERSAND reduce production expr -> LAZY simple_expr
-- On AMPERAMPER reduce production expr -> LAZY simple_expr

State 610:
## Known stack suffix:
## simple_expr SHARP
## LR(1) items:
simple_expr -> simple_expr SHARP . label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 611
## Reductions:

State 611:
## Known stack suffix:
## simple_expr SHARP label
## LR(1) items:
simple_expr -> simple_expr SHARP label . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr SHARP label

State 612:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 613
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 617
-- On mod_longident shift to state 55
-- On label_longident shift to state 621
## Reductions:

State 613:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 614
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 614:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 615
-- On RPAREN shift to state 616
## Reductions:

State 615:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr error

State 616:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 617:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 618
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 618:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 619
-- On RBRACKET shift to state 620
## Reductions:

State 619:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr error

State 620:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 621:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> simple_expr DOT label_longident

State 622:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constr_longident

State 623:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> constant

State 624:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . seq_expr THEN expr ELSE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF . seq_expr THEN expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 734
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 625:
## Known stack suffix:
## FUNCTION
## LR(1) items:
expr -> FUNCTION . opt_bar match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 268
-- On opt_bar shift to state 626
## Reductions:
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On SUBTRACTIVE reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->

State 626:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
expr -> FUNCTION opt_bar . match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 627
-- On mod_longident shift to state 303
-- On match_cases shift to state 730
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 627:
## Known stack suffix:
## pattern
## LR(1) items:
match_cases -> pattern . match_action [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 628
-- On MINUSGREATER shift to state 631
-- On COMMA shift to state 455
-- On COLONCOLON shift to state 301
-- On BAR shift to state 457
-- On AS shift to state 459
-- On match_action shift to state 729
## Reductions:

State 628:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . seq_expr MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 726
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 629:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . simple_pattern fun_def [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 630
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 630:
## Known stack suffix:
## FUN simple_pattern
## LR(1) items:
expr -> FUN simple_pattern . fun_def [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 628
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On MINUSGREATER shift to state 631
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 721
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On match_action shift to state 722
-- On fun_def shift to state 725
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 631:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 720
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 632:
## Known stack suffix:
## FOR
## LR(1) items:
expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 633
## Reductions:

State 633:
## Known stack suffix:
## FOR val_ident
## LR(1) items:
expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On EQUAL shift to state 634
## Reductions:

State 634:
## Known stack suffix:
## FOR val_ident EQUAL
## LR(1) items:
expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 711
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 635:
## Known stack suffix:
## DEF
## LR(1) items:
expr -> DEF . def_bindings IN seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_bindings shift to state 636
-- On def_binding shift to state 595
## Reductions:

State 636:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ IN AND ]
expr -> DEF def_bindings . IN seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On IN shift to state 637
-- On AND shift to state 593
## Reductions:

State 637:
## Known stack suffix:
## DEF def_bindings IN
## LR(1) items:
expr -> DEF def_bindings IN . seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 707
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 638:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr -> ASSERT . simple_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On NEW shift to state 9
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 246
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACE shift to state 441
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 639
-- On mod_longident shift to state 378
-- On constr_longident shift to state 622
-- On constant shift to state 623
## Reductions:

State 639:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
expr -> ASSERT simple_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 610
-- On DOT shift to state 612
## Reductions:
-- On WITH reduce production expr -> ASSERT simple_expr
-- On WHILE reduce production expr -> ASSERT simple_expr
-- On UIDENT reduce production expr -> ASSERT simple_expr
-- On TYPE reduce production expr -> ASSERT simple_expr
-- On TRY reduce production expr -> ASSERT simple_expr
-- On TRUE reduce production expr -> ASSERT simple_expr
-- On TO reduce production expr -> ASSERT simple_expr
-- On THEN reduce production expr -> ASSERT simple_expr
-- On SUBTRACTIVE reduce production expr -> ASSERT simple_expr
-- On STRING reduce production expr -> ASSERT simple_expr
-- On STAR reduce production expr -> ASSERT simple_expr
-- On SEMISEMI reduce production expr -> ASSERT simple_expr
-- On SEMI reduce production expr -> ASSERT simple_expr
-- On PREFIXOP reduce production expr -> ASSERT simple_expr
-- On PARSER reduce production expr -> ASSERT simple_expr
-- On OR reduce production expr -> ASSERT simple_expr
-- On OPEN reduce production expr -> ASSERT simple_expr
-- On NEW reduce production expr -> ASSERT simple_expr
-- On MODULE reduce production expr -> ASSERT simple_expr
-- On MINUSGREATER reduce production expr -> ASSERT simple_expr
-- On MATCH reduce production expr -> ASSERT simple_expr
-- On LPAREN reduce production expr -> ASSERT simple_expr
-- On LOC reduce production expr -> ASSERT simple_expr
-- On LIDENT reduce production expr -> ASSERT simple_expr
-- On LET reduce production expr -> ASSERT simple_expr
-- On LESSGREATER reduce production expr -> ASSERT simple_expr
-- On LESS reduce production expr -> ASSERT simple_expr
-- On LBRACKETLESS reduce production expr -> ASSERT simple_expr
-- On LBRACKETBAR reduce production expr -> ASSERT simple_expr
-- On LBRACKET reduce production expr -> ASSERT simple_expr
-- On LBRACELESS reduce production expr -> ASSERT simple_expr
-- On LBRACEBAR reduce production expr -> ASSERT simple_expr
-- On LBRACE reduce production expr -> ASSERT simple_expr
-- On LAZY reduce production expr -> ASSERT simple_expr
-- On INT reduce production expr -> ASSERT simple_expr
-- On INFIXOP4 reduce production expr -> ASSERT simple_expr
-- On INFIXOP3 reduce production expr -> ASSERT simple_expr
-- On INFIXOP2 reduce production expr -> ASSERT simple_expr
-- On INFIXOP1 reduce production expr -> ASSERT simple_expr
-- On INFIXOP0 reduce production expr -> ASSERT simple_expr
-- On IN reduce production expr -> ASSERT simple_expr
-- On IF reduce production expr -> ASSERT simple_expr
-- On GREATER reduce production expr -> ASSERT simple_expr
-- On FUNCTION reduce production expr -> ASSERT simple_expr
-- On FUN reduce production expr -> ASSERT simple_expr
-- On FOR reduce production expr -> ASSERT simple_expr
-- On FLOAT reduce production expr -> ASSERT simple_expr
-- On FALSE reduce production expr -> ASSERT simple_expr
-- On EXTERNAL reduce production expr -> ASSERT simple_expr
-- On EXCEPTION reduce production expr -> ASSERT simple_expr
-- On EQUAL reduce production expr -> ASSERT simple_expr
-- On EOF reduce production expr -> ASSERT simple_expr
-- On END reduce production expr -> ASSERT simple_expr
-- On ELSE reduce production expr -> ASSERT simple_expr
-- On DOWNTO reduce production expr -> ASSERT simple_expr
-- On DO reduce production expr -> ASSERT simple_expr
-- On DEF reduce production expr -> ASSERT simple_expr
-- On COMMA reduce production expr -> ASSERT simple_expr
-- On COLONEQUAL reduce production expr -> ASSERT simple_expr
-- On COLONCOLON reduce production expr -> ASSERT simple_expr
-- On CLASS reduce production expr -> ASSERT simple_expr
-- On CHAR reduce production expr -> ASSERT simple_expr
-- On BEGIN reduce production expr -> ASSERT simple_expr
-- On BARBAR reduce production expr -> ASSERT simple_expr
-- On BAR reduce production expr -> ASSERT simple_expr
-- On ASSERT reduce production expr -> ASSERT simple_expr
-- On AND reduce production expr -> ASSERT simple_expr
-- On AMPERSAND reduce production expr -> ASSERT simple_expr
-- On AMPERAMPER reduce production expr -> ASSERT simple_expr

State 640:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr -> simple_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . simple_expr_list [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . LESSLESS list_of_exprs GREATERGREATER [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . LESSLESS list_of_exprs error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . LESSLESSGREATERGREATER [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT label_longident LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On SHARP shift to state 610
-- On PREFIXOP shift to state 8
-- On NEW shift to state 9
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 246
-- On LESSLESSGREATERGREATER shift to state 641
-- On LESSLESS shift to state 642
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACE shift to state 441
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DOT shift to state 646
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr_list shift to state 704
-- On simple_expr shift to state 706
-- On mod_longident shift to state 378
-- On constr_longident shift to state 622
-- On constant shift to state 623
## Reductions:
-- On WITH reduce production expr -> simple_expr
-- On WHILE reduce production expr -> simple_expr
-- On TYPE reduce production expr -> simple_expr
-- On TRY reduce production expr -> simple_expr
-- On TO reduce production expr -> simple_expr
-- On THEN reduce production expr -> simple_expr
-- On SUBTRACTIVE reduce production expr -> simple_expr
-- On STAR reduce production expr -> simple_expr
-- On SEMISEMI reduce production expr -> simple_expr
-- On SEMI reduce production expr -> simple_expr
-- On PARSER reduce production expr -> simple_expr
-- On OR reduce production expr -> simple_expr
-- On OPEN reduce production expr -> simple_expr
-- On MODULE reduce production expr -> simple_expr
-- On MINUSGREATER reduce production expr -> simple_expr
-- On MATCH reduce production expr -> simple_expr
-- On LET reduce production expr -> simple_expr
-- On LESSGREATER reduce production expr -> simple_expr
-- On LESS reduce production expr -> simple_expr
-- On LBRACEBAR reduce production expr -> simple_expr
-- On LAZY reduce production expr -> simple_expr
-- On INFIXOP4 reduce production expr -> simple_expr
-- On INFIXOP3 reduce production expr -> simple_expr
-- On INFIXOP2 reduce production expr -> simple_expr
-- On INFIXOP1 reduce production expr -> simple_expr
-- On INFIXOP0 reduce production expr -> simple_expr
-- On IN reduce production expr -> simple_expr
-- On IF reduce production expr -> simple_expr
-- On GREATER reduce production expr -> simple_expr
-- On FUNCTION reduce production expr -> simple_expr
-- On FUN reduce production expr -> simple_expr
-- On FOR reduce production expr -> simple_expr
-- On EXTERNAL reduce production expr -> simple_expr
-- On EXCEPTION reduce production expr -> simple_expr
-- On EQUAL reduce production expr -> simple_expr
-- On EOF reduce production expr -> simple_expr
-- On END reduce production expr -> simple_expr
-- On ELSE reduce production expr -> simple_expr
-- On DOWNTO reduce production expr -> simple_expr
-- On DO reduce production expr -> simple_expr
-- On DEF reduce production expr -> simple_expr
-- On COMMA reduce production expr -> simple_expr
-- On COLONEQUAL reduce production expr -> simple_expr
-- On COLONCOLON reduce production expr -> simple_expr
-- On CLASS reduce production expr -> simple_expr
-- On BARBAR reduce production expr -> simple_expr
-- On BAR reduce production expr -> simple_expr
-- On ASSERT reduce production expr -> simple_expr
-- On AND reduce production expr -> simple_expr
-- On AMPERSAND reduce production expr -> simple_expr
-- On AMPERAMPER reduce production expr -> simple_expr

State 641:
## Known stack suffix:
## simple_expr LESSLESSGREATERGREATER
## LR(1) items:
expr -> simple_expr LESSLESSGREATERGREATER . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> simple_expr LESSLESSGREATERGREATER

State 642:
## Known stack suffix:
## simple_expr LESSLESS
## LR(1) items:
expr -> simple_expr LESSLESS . list_of_exprs GREATERGREATER [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr LESSLESS . list_of_exprs error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 484
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On list_of_exprs shift to state 643
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 549
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 643:
## Known stack suffix:
## simple_expr LESSLESS list_of_exprs
## LR(1) items:
expr -> simple_expr LESSLESS list_of_exprs . GREATERGREATER [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr LESSLESS list_of_exprs . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 644
-- On GREATERGREATER shift to state 645
## Reductions:

State 644:
## Known stack suffix:
## simple_expr LESSLESS list_of_exprs error
## LR(1) items:
expr -> simple_expr LESSLESS list_of_exprs error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> simple_expr LESSLESS list_of_exprs error

State 645:
## Known stack suffix:
## simple_expr LESSLESS list_of_exprs GREATERGREATER
## LR(1) items:
expr -> simple_expr LESSLESS list_of_exprs GREATERGREATER . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> simple_expr LESSLESS list_of_exprs GREATERGREATER

State 646:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
expr -> simple_expr DOT . label_longident LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LPAREN seq_expr RPAREN LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 647
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 696
-- On mod_longident shift to state 55
-- On label_longident shift to state 701
## Reductions:

State 647:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN . seq_expr RPAREN LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 648
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 648:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr . RPAREN LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 615
-- On RPAREN shift to state 649
## Reductions:

State 649:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN . LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 650
## Reductions:
-- On WITH reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On WHILE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On UIDENT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On TYPE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On TRY reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On TRUE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On TO reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On THEN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SUBTRACTIVE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On STRING reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On STAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SHARP reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On SEMI reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On PARSER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On OR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On OPEN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On NEW reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On MODULE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On MATCH reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LPAREN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LOC reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LIDENT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LET reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESSLESSGREATERGREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESSLESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESSGREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACKETLESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACKETBAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACKET reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACELESS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACEBAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LBRACE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On LAZY reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP4 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP3 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP2 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP1 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On INFIXOP0 reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On IN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On IF reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On GREATER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FUNCTION reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FUN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FOR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FLOAT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On FALSE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EXTERNAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EQUAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On EOF reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On END reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On ELSE reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On DOWNTO reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On DOT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On DO reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On DEF reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COMMA reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On CLASS reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On CHAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On BEGIN reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On BARBAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On BAR reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On ASSERT reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On AND reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On AMPERSAND reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 650:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 695
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 651:
## Known stack suffix:
## label
## LR(1) items:
expr -> label . LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 652
## Reductions:

State 652:
## Known stack suffix:
## label LESSMINUS
## LR(1) items:
expr -> label LESSMINUS . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 690
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 653:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 654
## Reductions:
-- On WITH reduce production expr -> expr_comma_list
-- On WHILE reduce production expr -> expr_comma_list
-- On UIDENT reduce production expr -> expr_comma_list
-- On TYPE reduce production expr -> expr_comma_list
-- On TRY reduce production expr -> expr_comma_list
-- On TRUE reduce production expr -> expr_comma_list
-- On TO reduce production expr -> expr_comma_list
-- On THEN reduce production expr -> expr_comma_list
-- On SUBTRACTIVE reduce production expr -> expr_comma_list
-- On STRING reduce production expr -> expr_comma_list
-- On STAR reduce production expr -> expr_comma_list
-- On SHARP reduce production expr -> expr_comma_list
-- On SEMISEMI reduce production expr -> expr_comma_list
-- On SEMI reduce production expr -> expr_comma_list
-- On PREFIXOP reduce production expr -> expr_comma_list
-- On PARSER reduce production expr -> expr_comma_list
-- On OR reduce production expr -> expr_comma_list
-- On OPEN reduce production expr -> expr_comma_list
-- On NEW reduce production expr -> expr_comma_list
-- On MODULE reduce production expr -> expr_comma_list
-- On MINUSGREATER reduce production expr -> expr_comma_list
-- On MATCH reduce production expr -> expr_comma_list
-- On LPAREN reduce production expr -> expr_comma_list
-- On LOC reduce production expr -> expr_comma_list
-- On LIDENT reduce production expr -> expr_comma_list
-- On LET reduce production expr -> expr_comma_list
-- On LESSGREATER reduce production expr -> expr_comma_list
-- On LESS reduce production expr -> expr_comma_list
-- On LBRACKETLESS reduce production expr -> expr_comma_list
-- On LBRACKETBAR reduce production expr -> expr_comma_list
-- On LBRACKET reduce production expr -> expr_comma_list
-- On LBRACELESS reduce production expr -> expr_comma_list
-- On LBRACEBAR reduce production expr -> expr_comma_list
-- On LBRACE reduce production expr -> expr_comma_list
-- On LAZY reduce production expr -> expr_comma_list
-- On INT reduce production expr -> expr_comma_list
-- On INFIXOP4 reduce production expr -> expr_comma_list
-- On INFIXOP3 reduce production expr -> expr_comma_list
-- On INFIXOP2 reduce production expr -> expr_comma_list
-- On INFIXOP1 reduce production expr -> expr_comma_list
-- On INFIXOP0 reduce production expr -> expr_comma_list
-- On IN reduce production expr -> expr_comma_list
-- On IF reduce production expr -> expr_comma_list
-- On GREATER reduce production expr -> expr_comma_list
-- On FUNCTION reduce production expr -> expr_comma_list
-- On FUN reduce production expr -> expr_comma_list
-- On FOR reduce production expr -> expr_comma_list
-- On FLOAT reduce production expr -> expr_comma_list
-- On FALSE reduce production expr -> expr_comma_list
-- On EXTERNAL reduce production expr -> expr_comma_list
-- On EXCEPTION reduce production expr -> expr_comma_list
-- On EQUAL reduce production expr -> expr_comma_list
-- On EOF reduce production expr -> expr_comma_list
-- On END reduce production expr -> expr_comma_list
-- On ELSE reduce production expr -> expr_comma_list
-- On DOWNTO reduce production expr -> expr_comma_list
-- On DO reduce production expr -> expr_comma_list
-- On DEF reduce production expr -> expr_comma_list
-- On COLONEQUAL reduce production expr -> expr_comma_list
-- On COLONCOLON reduce production expr -> expr_comma_list
-- On CLASS reduce production expr -> expr_comma_list
-- On CHAR reduce production expr -> expr_comma_list
-- On BEGIN reduce production expr -> expr_comma_list
-- On BARBAR reduce production expr -> expr_comma_list
-- On BAR reduce production expr -> expr_comma_list
-- On ASSERT reduce production expr -> expr_comma_list
-- On AND reduce production expr -> expr_comma_list
-- On AMPERSAND reduce production expr -> expr_comma_list
-- On AMPERAMPER reduce production expr -> expr_comma_list

State 654:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 655
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 655:
## Known stack suffix:
## expr_comma_list COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list COMMA expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On WHILE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On UIDENT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On TYPE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On TRY reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On TRUE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On TO reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On THEN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On STRING reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On SHARP reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On SEMISEMI reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On SEMI reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On PREFIXOP reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On PARSER reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On OPEN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On NEW reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On MODULE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On MINUSGREATER reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On MATCH reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LPAREN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LOC reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LIDENT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LET reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACKETLESS reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACKETBAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACKET reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACELESS reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACEBAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LBRACE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On LAZY reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On INT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On IN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On IF reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FUNCTION reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FUN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FOR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FLOAT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On FALSE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On EXTERNAL reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On EXCEPTION reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On EOF reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On END reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On ELSE reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On DOWNTO reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On DO reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On DEF reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On COMMA reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On COLONEQUAL reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On CLASS reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On CHAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On BEGIN reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On BAR reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On ASSERT reduce production expr_comma_list -> expr_comma_list COMMA expr
-- On AND reduce production expr_comma_list -> expr_comma_list COMMA expr

State 656:
## Known stack suffix:
## expr SUBTRACTIVE
## LR(1) items:
expr -> expr SUBTRACTIVE . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 657
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 657:
## Known stack suffix:
## expr SUBTRACTIVE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr SUBTRACTIVE expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
## Reductions:
-- On WITH reduce production expr -> expr SUBTRACTIVE expr
-- On WHILE reduce production expr -> expr SUBTRACTIVE expr
-- On UIDENT reduce production expr -> expr SUBTRACTIVE expr
-- On TYPE reduce production expr -> expr SUBTRACTIVE expr
-- On TRY reduce production expr -> expr SUBTRACTIVE expr
-- On TRUE reduce production expr -> expr SUBTRACTIVE expr
-- On TO reduce production expr -> expr SUBTRACTIVE expr
-- On THEN reduce production expr -> expr SUBTRACTIVE expr
-- On SUBTRACTIVE reduce production expr -> expr SUBTRACTIVE expr
-- On STRING reduce production expr -> expr SUBTRACTIVE expr
-- On SHARP reduce production expr -> expr SUBTRACTIVE expr
-- On SEMISEMI reduce production expr -> expr SUBTRACTIVE expr
-- On SEMI reduce production expr -> expr SUBTRACTIVE expr
-- On PREFIXOP reduce production expr -> expr SUBTRACTIVE expr
-- On PARSER reduce production expr -> expr SUBTRACTIVE expr
-- On OR reduce production expr -> expr SUBTRACTIVE expr
-- On OPEN reduce production expr -> expr SUBTRACTIVE expr
-- On NEW reduce production expr -> expr SUBTRACTIVE expr
-- On MODULE reduce production expr -> expr SUBTRACTIVE expr
-- On MINUSGREATER reduce production expr -> expr SUBTRACTIVE expr
-- On MATCH reduce production expr -> expr SUBTRACTIVE expr
-- On LPAREN reduce production expr -> expr SUBTRACTIVE expr
-- On LOC reduce production expr -> expr SUBTRACTIVE expr
-- On LIDENT reduce production expr -> expr SUBTRACTIVE expr
-- On LET reduce production expr -> expr SUBTRACTIVE expr
-- On LESSGREATER reduce production expr -> expr SUBTRACTIVE expr
-- On LESS reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACKETLESS reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACKETBAR reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACKET reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACELESS reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACEBAR reduce production expr -> expr SUBTRACTIVE expr
-- On LBRACE reduce production expr -> expr SUBTRACTIVE expr
-- On LAZY reduce production expr -> expr SUBTRACTIVE expr
-- On INT reduce production expr -> expr SUBTRACTIVE expr
-- On INFIXOP2 reduce production expr -> expr SUBTRACTIVE expr
-- On INFIXOP1 reduce production expr -> expr SUBTRACTIVE expr
-- On INFIXOP0 reduce production expr -> expr SUBTRACTIVE expr
-- On IN reduce production expr -> expr SUBTRACTIVE expr
-- On IF reduce production expr -> expr SUBTRACTIVE expr
-- On GREATER reduce production expr -> expr SUBTRACTIVE expr
-- On FUNCTION reduce production expr -> expr SUBTRACTIVE expr
-- On FUN reduce production expr -> expr SUBTRACTIVE expr
-- On FOR reduce production expr -> expr SUBTRACTIVE expr
-- On FLOAT reduce production expr -> expr SUBTRACTIVE expr
-- On FALSE reduce production expr -> expr SUBTRACTIVE expr
-- On EXTERNAL reduce production expr -> expr SUBTRACTIVE expr
-- On EXCEPTION reduce production expr -> expr SUBTRACTIVE expr
-- On EQUAL reduce production expr -> expr SUBTRACTIVE expr
-- On EOF reduce production expr -> expr SUBTRACTIVE expr
-- On END reduce production expr -> expr SUBTRACTIVE expr
-- On ELSE reduce production expr -> expr SUBTRACTIVE expr
-- On DOWNTO reduce production expr -> expr SUBTRACTIVE expr
-- On DO reduce production expr -> expr SUBTRACTIVE expr
-- On DEF reduce production expr -> expr SUBTRACTIVE expr
-- On COMMA reduce production expr -> expr SUBTRACTIVE expr
-- On COLONEQUAL reduce production expr -> expr SUBTRACTIVE expr
-- On COLONCOLON reduce production expr -> expr SUBTRACTIVE expr
-- On CLASS reduce production expr -> expr SUBTRACTIVE expr
-- On CHAR reduce production expr -> expr SUBTRACTIVE expr
-- On BEGIN reduce production expr -> expr SUBTRACTIVE expr
-- On BARBAR reduce production expr -> expr SUBTRACTIVE expr
-- On BAR reduce production expr -> expr SUBTRACTIVE expr
-- On ASSERT reduce production expr -> expr SUBTRACTIVE expr
-- On AND reduce production expr -> expr SUBTRACTIVE expr
-- On AMPERSAND reduce production expr -> expr SUBTRACTIVE expr
-- On AMPERAMPER reduce production expr -> expr SUBTRACTIVE expr

State 658:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr -> expr STAR . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 659
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 659:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr STAR expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 660
## Reductions:
-- On WITH reduce production expr -> expr STAR expr
-- On WHILE reduce production expr -> expr STAR expr
-- On UIDENT reduce production expr -> expr STAR expr
-- On TYPE reduce production expr -> expr STAR expr
-- On TRY reduce production expr -> expr STAR expr
-- On TRUE reduce production expr -> expr STAR expr
-- On TO reduce production expr -> expr STAR expr
-- On THEN reduce production expr -> expr STAR expr
-- On SUBTRACTIVE reduce production expr -> expr STAR expr
-- On STRING reduce production expr -> expr STAR expr
-- On STAR reduce production expr -> expr STAR expr
-- On SHARP reduce production expr -> expr STAR expr
-- On SEMISEMI reduce production expr -> expr STAR expr
-- On SEMI reduce production expr -> expr STAR expr
-- On PREFIXOP reduce production expr -> expr STAR expr
-- On PARSER reduce production expr -> expr STAR expr
-- On OR reduce production expr -> expr STAR expr
-- On OPEN reduce production expr -> expr STAR expr
-- On NEW reduce production expr -> expr STAR expr
-- On MODULE reduce production expr -> expr STAR expr
-- On MINUSGREATER reduce production expr -> expr STAR expr
-- On MATCH reduce production expr -> expr STAR expr
-- On LPAREN reduce production expr -> expr STAR expr
-- On LOC reduce production expr -> expr STAR expr
-- On LIDENT reduce production expr -> expr STAR expr
-- On LET reduce production expr -> expr STAR expr
-- On LESSGREATER reduce production expr -> expr STAR expr
-- On LESS reduce production expr -> expr STAR expr
-- On LBRACKETLESS reduce production expr -> expr STAR expr
-- On LBRACKETBAR reduce production expr -> expr STAR expr
-- On LBRACKET reduce production expr -> expr STAR expr
-- On LBRACELESS reduce production expr -> expr STAR expr
-- On LBRACEBAR reduce production expr -> expr STAR expr
-- On LBRACE reduce production expr -> expr STAR expr
-- On LAZY reduce production expr -> expr STAR expr
-- On INT reduce production expr -> expr STAR expr
-- On INFIXOP3 reduce production expr -> expr STAR expr
-- On INFIXOP2 reduce production expr -> expr STAR expr
-- On INFIXOP1 reduce production expr -> expr STAR expr
-- On INFIXOP0 reduce production expr -> expr STAR expr
-- On IN reduce production expr -> expr STAR expr
-- On IF reduce production expr -> expr STAR expr
-- On GREATER reduce production expr -> expr STAR expr
-- On FUNCTION reduce production expr -> expr STAR expr
-- On FUN reduce production expr -> expr STAR expr
-- On FOR reduce production expr -> expr STAR expr
-- On FLOAT reduce production expr -> expr STAR expr
-- On FALSE reduce production expr -> expr STAR expr
-- On EXTERNAL reduce production expr -> expr STAR expr
-- On EXCEPTION reduce production expr -> expr STAR expr
-- On EQUAL reduce production expr -> expr STAR expr
-- On EOF reduce production expr -> expr STAR expr
-- On END reduce production expr -> expr STAR expr
-- On ELSE reduce production expr -> expr STAR expr
-- On DOWNTO reduce production expr -> expr STAR expr
-- On DO reduce production expr -> expr STAR expr
-- On DEF reduce production expr -> expr STAR expr
-- On COMMA reduce production expr -> expr STAR expr
-- On COLONEQUAL reduce production expr -> expr STAR expr
-- On COLONCOLON reduce production expr -> expr STAR expr
-- On CLASS reduce production expr -> expr STAR expr
-- On CHAR reduce production expr -> expr STAR expr
-- On BEGIN reduce production expr -> expr STAR expr
-- On BARBAR reduce production expr -> expr STAR expr
-- On BAR reduce production expr -> expr STAR expr
-- On ASSERT reduce production expr -> expr STAR expr
-- On AND reduce production expr -> expr STAR expr
-- On AMPERSAND reduce production expr -> expr STAR expr
-- On AMPERAMPER reduce production expr -> expr STAR expr

State 660:
## Known stack suffix:
## expr INFIXOP4
## LR(1) items:
expr -> expr INFIXOP4 . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 661
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 661:
## Known stack suffix:
## expr INFIXOP4 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP4 expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 660
## Reductions:
-- On WITH reduce production expr -> expr INFIXOP4 expr
-- On WHILE reduce production expr -> expr INFIXOP4 expr
-- On UIDENT reduce production expr -> expr INFIXOP4 expr
-- On TYPE reduce production expr -> expr INFIXOP4 expr
-- On TRY reduce production expr -> expr INFIXOP4 expr
-- On TRUE reduce production expr -> expr INFIXOP4 expr
-- On TO reduce production expr -> expr INFIXOP4 expr
-- On THEN reduce production expr -> expr INFIXOP4 expr
-- On SUBTRACTIVE reduce production expr -> expr INFIXOP4 expr
-- On STRING reduce production expr -> expr INFIXOP4 expr
-- On STAR reduce production expr -> expr INFIXOP4 expr
-- On SHARP reduce production expr -> expr INFIXOP4 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP4 expr
-- On SEMI reduce production expr -> expr INFIXOP4 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP4 expr
-- On PARSER reduce production expr -> expr INFIXOP4 expr
-- On OR reduce production expr -> expr INFIXOP4 expr
-- On OPEN reduce production expr -> expr INFIXOP4 expr
-- On NEW reduce production expr -> expr INFIXOP4 expr
-- On MODULE reduce production expr -> expr INFIXOP4 expr
-- On MINUSGREATER reduce production expr -> expr INFIXOP4 expr
-- On MATCH reduce production expr -> expr INFIXOP4 expr
-- On LPAREN reduce production expr -> expr INFIXOP4 expr
-- On LOC reduce production expr -> expr INFIXOP4 expr
-- On LIDENT reduce production expr -> expr INFIXOP4 expr
-- On LET reduce production expr -> expr INFIXOP4 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP4 expr
-- On LESS reduce production expr -> expr INFIXOP4 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP4 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP4 expr
-- On LBRACKET reduce production expr -> expr INFIXOP4 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP4 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP4 expr
-- On LBRACE reduce production expr -> expr INFIXOP4 expr
-- On LAZY reduce production expr -> expr INFIXOP4 expr
-- On INT reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP3 reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP2 reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP1 reduce production expr -> expr INFIXOP4 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP4 expr
-- On IN reduce production expr -> expr INFIXOP4 expr
-- On IF reduce production expr -> expr INFIXOP4 expr
-- On GREATER reduce production expr -> expr INFIXOP4 expr
-- On FUNCTION reduce production expr -> expr INFIXOP4 expr
-- On FUN reduce production expr -> expr INFIXOP4 expr
-- On FOR reduce production expr -> expr INFIXOP4 expr
-- On FLOAT reduce production expr -> expr INFIXOP4 expr
-- On FALSE reduce production expr -> expr INFIXOP4 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP4 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP4 expr
-- On EQUAL reduce production expr -> expr INFIXOP4 expr
-- On EOF reduce production expr -> expr INFIXOP4 expr
-- On END reduce production expr -> expr INFIXOP4 expr
-- On ELSE reduce production expr -> expr INFIXOP4 expr
-- On DOWNTO reduce production expr -> expr INFIXOP4 expr
-- On DO reduce production expr -> expr INFIXOP4 expr
-- On DEF reduce production expr -> expr INFIXOP4 expr
-- On COMMA reduce production expr -> expr INFIXOP4 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP4 expr
-- On COLONCOLON reduce production expr -> expr INFIXOP4 expr
-- On CLASS reduce production expr -> expr INFIXOP4 expr
-- On CHAR reduce production expr -> expr INFIXOP4 expr
-- On BEGIN reduce production expr -> expr INFIXOP4 expr
-- On BARBAR reduce production expr -> expr INFIXOP4 expr
-- On BAR reduce production expr -> expr INFIXOP4 expr
-- On ASSERT reduce production expr -> expr INFIXOP4 expr
-- On AND reduce production expr -> expr INFIXOP4 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP4 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP4 expr

State 662:
## Known stack suffix:
## constr_longident
## LR(1) items:
expr -> constr_longident . simple_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> constr_longident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On NEW shift to state 9
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 246
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACE shift to state 441
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 663
-- On mod_longident shift to state 378
-- On constr_longident shift to state 622
-- On constant shift to state 623
## Reductions:
-- On WITH reduce production simple_expr -> constr_longident
-- On WHILE reduce production simple_expr -> constr_longident
-- On TYPE reduce production simple_expr -> constr_longident
-- On TRY reduce production simple_expr -> constr_longident
-- On TO reduce production simple_expr -> constr_longident
-- On THEN reduce production simple_expr -> constr_longident
-- On SUBTRACTIVE reduce production simple_expr -> constr_longident
-- On STAR reduce production simple_expr -> constr_longident
-- On SHARP reduce production simple_expr -> constr_longident
-- On SEMISEMI reduce production simple_expr -> constr_longident
-- On SEMI reduce production simple_expr -> constr_longident
-- On PARSER reduce production simple_expr -> constr_longident
-- On OR reduce production simple_expr -> constr_longident
-- On OPEN reduce production simple_expr -> constr_longident
-- On MODULE reduce production simple_expr -> constr_longident
-- On MINUSGREATER reduce production simple_expr -> constr_longident
-- On MATCH reduce production simple_expr -> constr_longident
-- On LET reduce production simple_expr -> constr_longident
-- On LESSLESSGREATERGREATER reduce production simple_expr -> constr_longident
-- On LESSLESS reduce production simple_expr -> constr_longident
-- On LESSGREATER reduce production simple_expr -> constr_longident
-- On LESS reduce production simple_expr -> constr_longident
-- On LBRACEBAR reduce production simple_expr -> constr_longident
-- On LAZY reduce production simple_expr -> constr_longident
-- On INFIXOP4 reduce production simple_expr -> constr_longident
-- On INFIXOP3 reduce production simple_expr -> constr_longident
-- On INFIXOP2 reduce production simple_expr -> constr_longident
-- On INFIXOP1 reduce production simple_expr -> constr_longident
-- On INFIXOP0 reduce production simple_expr -> constr_longident
-- On IN reduce production simple_expr -> constr_longident
-- On IF reduce production simple_expr -> constr_longident
-- On GREATER reduce production simple_expr -> constr_longident
-- On FUNCTION reduce production simple_expr -> constr_longident
-- On FUN reduce production simple_expr -> constr_longident
-- On FOR reduce production simple_expr -> constr_longident
-- On EXTERNAL reduce production simple_expr -> constr_longident
-- On EXCEPTION reduce production simple_expr -> constr_longident
-- On EQUAL reduce production simple_expr -> constr_longident
-- On EOF reduce production simple_expr -> constr_longident
-- On END reduce production simple_expr -> constr_longident
-- On ELSE reduce production simple_expr -> constr_longident
-- On DOWNTO reduce production simple_expr -> constr_longident
-- On DOT reduce production simple_expr -> constr_longident
-- On DO reduce production simple_expr -> constr_longident
-- On DEF reduce production simple_expr -> constr_longident
-- On COMMA reduce production simple_expr -> constr_longident
-- On COLONEQUAL reduce production simple_expr -> constr_longident
-- On COLONCOLON reduce production simple_expr -> constr_longident
-- On CLASS reduce production simple_expr -> constr_longident
-- On BARBAR reduce production simple_expr -> constr_longident
-- On BAR reduce production simple_expr -> constr_longident
-- On ASSERT reduce production simple_expr -> constr_longident
-- On AND reduce production simple_expr -> constr_longident
-- On AMPERSAND reduce production simple_expr -> constr_longident
-- On AMPERAMPER reduce production simple_expr -> constr_longident

State 663:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
expr -> constr_longident simple_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 610
-- On DOT shift to state 612
## Reductions:
-- On WITH reduce production expr -> constr_longident simple_expr
-- On WHILE reduce production expr -> constr_longident simple_expr
-- On UIDENT reduce production expr -> constr_longident simple_expr
-- On TYPE reduce production expr -> constr_longident simple_expr
-- On TRY reduce production expr -> constr_longident simple_expr
-- On TRUE reduce production expr -> constr_longident simple_expr
-- On TO reduce production expr -> constr_longident simple_expr
-- On THEN reduce production expr -> constr_longident simple_expr
-- On SUBTRACTIVE reduce production expr -> constr_longident simple_expr
-- On STRING reduce production expr -> constr_longident simple_expr
-- On STAR reduce production expr -> constr_longident simple_expr
-- On SEMISEMI reduce production expr -> constr_longident simple_expr
-- On SEMI reduce production expr -> constr_longident simple_expr
-- On PREFIXOP reduce production expr -> constr_longident simple_expr
-- On PARSER reduce production expr -> constr_longident simple_expr
-- On OR reduce production expr -> constr_longident simple_expr
-- On OPEN reduce production expr -> constr_longident simple_expr
-- On NEW reduce production expr -> constr_longident simple_expr
-- On MODULE reduce production expr -> constr_longident simple_expr
-- On MINUSGREATER reduce production expr -> constr_longident simple_expr
-- On MATCH reduce production expr -> constr_longident simple_expr
-- On LPAREN reduce production expr -> constr_longident simple_expr
-- On LOC reduce production expr -> constr_longident simple_expr
-- On LIDENT reduce production expr -> constr_longident simple_expr
-- On LET reduce production expr -> constr_longident simple_expr
-- On LESSGREATER reduce production expr -> constr_longident simple_expr
-- On LESS reduce production expr -> constr_longident simple_expr
-- On LBRACKETLESS reduce production expr -> constr_longident simple_expr
-- On LBRACKETBAR reduce production expr -> constr_longident simple_expr
-- On LBRACKET reduce production expr -> constr_longident simple_expr
-- On LBRACELESS reduce production expr -> constr_longident simple_expr
-- On LBRACEBAR reduce production expr -> constr_longident simple_expr
-- On LBRACE reduce production expr -> constr_longident simple_expr
-- On LAZY reduce production expr -> constr_longident simple_expr
-- On INT reduce production expr -> constr_longident simple_expr
-- On INFIXOP4 reduce production expr -> constr_longident simple_expr
-- On INFIXOP3 reduce production expr -> constr_longident simple_expr
-- On INFIXOP2 reduce production expr -> constr_longident simple_expr
-- On INFIXOP1 reduce production expr -> constr_longident simple_expr
-- On INFIXOP0 reduce production expr -> constr_longident simple_expr
-- On IN reduce production expr -> constr_longident simple_expr
-- On IF reduce production expr -> constr_longident simple_expr
-- On GREATER reduce production expr -> constr_longident simple_expr
-- On FUNCTION reduce production expr -> constr_longident simple_expr
-- On FUN reduce production expr -> constr_longident simple_expr
-- On FOR reduce production expr -> constr_longident simple_expr
-- On FLOAT reduce production expr -> constr_longident simple_expr
-- On FALSE reduce production expr -> constr_longident simple_expr
-- On EXTERNAL reduce production expr -> constr_longident simple_expr
-- On EXCEPTION reduce production expr -> constr_longident simple_expr
-- On EQUAL reduce production expr -> constr_longident simple_expr
-- On EOF reduce production expr -> constr_longident simple_expr
-- On END reduce production expr -> constr_longident simple_expr
-- On ELSE reduce production expr -> constr_longident simple_expr
-- On DOWNTO reduce production expr -> constr_longident simple_expr
-- On DO reduce production expr -> constr_longident simple_expr
-- On DEF reduce production expr -> constr_longident simple_expr
-- On COMMA reduce production expr -> constr_longident simple_expr
-- On COLONEQUAL reduce production expr -> constr_longident simple_expr
-- On COLONCOLON reduce production expr -> constr_longident simple_expr
-- On CLASS reduce production expr -> constr_longident simple_expr
-- On CHAR reduce production expr -> constr_longident simple_expr
-- On BEGIN reduce production expr -> constr_longident simple_expr
-- On BARBAR reduce production expr -> constr_longident simple_expr
-- On BAR reduce production expr -> constr_longident simple_expr
-- On ASSERT reduce production expr -> constr_longident simple_expr
-- On AND reduce production expr -> constr_longident simple_expr
-- On AMPERSAND reduce production expr -> constr_longident simple_expr
-- On AMPERAMPER reduce production expr -> constr_longident simple_expr

State 664:
## Known stack suffix:
## expr INFIXOP3
## LR(1) items:
expr -> expr INFIXOP3 . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 665
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 665:
## Known stack suffix:
## expr INFIXOP3 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP3 expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 660
## Reductions:
-- On WITH reduce production expr -> expr INFIXOP3 expr
-- On WHILE reduce production expr -> expr INFIXOP3 expr
-- On UIDENT reduce production expr -> expr INFIXOP3 expr
-- On TYPE reduce production expr -> expr INFIXOP3 expr
-- On TRY reduce production expr -> expr INFIXOP3 expr
-- On TRUE reduce production expr -> expr INFIXOP3 expr
-- On TO reduce production expr -> expr INFIXOP3 expr
-- On THEN reduce production expr -> expr INFIXOP3 expr
-- On SUBTRACTIVE reduce production expr -> expr INFIXOP3 expr
-- On STRING reduce production expr -> expr INFIXOP3 expr
-- On STAR reduce production expr -> expr INFIXOP3 expr
-- On SHARP reduce production expr -> expr INFIXOP3 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP3 expr
-- On SEMI reduce production expr -> expr INFIXOP3 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP3 expr
-- On PARSER reduce production expr -> expr INFIXOP3 expr
-- On OR reduce production expr -> expr INFIXOP3 expr
-- On OPEN reduce production expr -> expr INFIXOP3 expr
-- On NEW reduce production expr -> expr INFIXOP3 expr
-- On MODULE reduce production expr -> expr INFIXOP3 expr
-- On MINUSGREATER reduce production expr -> expr INFIXOP3 expr
-- On MATCH reduce production expr -> expr INFIXOP3 expr
-- On LPAREN reduce production expr -> expr INFIXOP3 expr
-- On LOC reduce production expr -> expr INFIXOP3 expr
-- On LIDENT reduce production expr -> expr INFIXOP3 expr
-- On LET reduce production expr -> expr INFIXOP3 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP3 expr
-- On LESS reduce production expr -> expr INFIXOP3 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP3 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP3 expr
-- On LBRACKET reduce production expr -> expr INFIXOP3 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP3 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP3 expr
-- On LBRACE reduce production expr -> expr INFIXOP3 expr
-- On LAZY reduce production expr -> expr INFIXOP3 expr
-- On INT reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP3 reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP2 reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP1 reduce production expr -> expr INFIXOP3 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP3 expr
-- On IN reduce production expr -> expr INFIXOP3 expr
-- On IF reduce production expr -> expr INFIXOP3 expr
-- On GREATER reduce production expr -> expr INFIXOP3 expr
-- On FUNCTION reduce production expr -> expr INFIXOP3 expr
-- On FUN reduce production expr -> expr INFIXOP3 expr
-- On FOR reduce production expr -> expr INFIXOP3 expr
-- On FLOAT reduce production expr -> expr INFIXOP3 expr
-- On FALSE reduce production expr -> expr INFIXOP3 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP3 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP3 expr
-- On EQUAL reduce production expr -> expr INFIXOP3 expr
-- On EOF reduce production expr -> expr INFIXOP3 expr
-- On END reduce production expr -> expr INFIXOP3 expr
-- On ELSE reduce production expr -> expr INFIXOP3 expr
-- On DOWNTO reduce production expr -> expr INFIXOP3 expr
-- On DO reduce production expr -> expr INFIXOP3 expr
-- On DEF reduce production expr -> expr INFIXOP3 expr
-- On COMMA reduce production expr -> expr INFIXOP3 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP3 expr
-- On COLONCOLON reduce production expr -> expr INFIXOP3 expr
-- On CLASS reduce production expr -> expr INFIXOP3 expr
-- On CHAR reduce production expr -> expr INFIXOP3 expr
-- On BEGIN reduce production expr -> expr INFIXOP3 expr
-- On BARBAR reduce production expr -> expr INFIXOP3 expr
-- On BAR reduce production expr -> expr INFIXOP3 expr
-- On ASSERT reduce production expr -> expr INFIXOP3 expr
-- On AND reduce production expr -> expr INFIXOP3 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP3 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP3 expr

State 666:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 667
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 667:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr OR expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> expr OR expr
-- On WHILE reduce production expr -> expr OR expr
-- On UIDENT reduce production expr -> expr OR expr
-- On TYPE reduce production expr -> expr OR expr
-- On TRY reduce production expr -> expr OR expr
-- On TRUE reduce production expr -> expr OR expr
-- On TO reduce production expr -> expr OR expr
-- On THEN reduce production expr -> expr OR expr
-- On STRING reduce production expr -> expr OR expr
-- On SHARP reduce production expr -> expr OR expr
-- On SEMISEMI reduce production expr -> expr OR expr
-- On SEMI reduce production expr -> expr OR expr
-- On PREFIXOP reduce production expr -> expr OR expr
-- On PARSER reduce production expr -> expr OR expr
-- On OPEN reduce production expr -> expr OR expr
-- On NEW reduce production expr -> expr OR expr
-- On MODULE reduce production expr -> expr OR expr
-- On MINUSGREATER reduce production expr -> expr OR expr
-- On MATCH reduce production expr -> expr OR expr
-- On LPAREN reduce production expr -> expr OR expr
-- On LOC reduce production expr -> expr OR expr
-- On LIDENT reduce production expr -> expr OR expr
-- On LET reduce production expr -> expr OR expr
-- On LBRACKETLESS reduce production expr -> expr OR expr
-- On LBRACKETBAR reduce production expr -> expr OR expr
-- On LBRACKET reduce production expr -> expr OR expr
-- On LBRACELESS reduce production expr -> expr OR expr
-- On LBRACEBAR reduce production expr -> expr OR expr
-- On LBRACE reduce production expr -> expr OR expr
-- On LAZY reduce production expr -> expr OR expr
-- On INT reduce production expr -> expr OR expr
-- On IN reduce production expr -> expr OR expr
-- On IF reduce production expr -> expr OR expr
-- On FUNCTION reduce production expr -> expr OR expr
-- On FUN reduce production expr -> expr OR expr
-- On FOR reduce production expr -> expr OR expr
-- On FLOAT reduce production expr -> expr OR expr
-- On FALSE reduce production expr -> expr OR expr
-- On EXTERNAL reduce production expr -> expr OR expr
-- On EXCEPTION reduce production expr -> expr OR expr
-- On EOF reduce production expr -> expr OR expr
-- On END reduce production expr -> expr OR expr
-- On ELSE reduce production expr -> expr OR expr
-- On DOWNTO reduce production expr -> expr OR expr
-- On DO reduce production expr -> expr OR expr
-- On DEF reduce production expr -> expr OR expr
-- On COMMA reduce production expr -> expr OR expr
-- On COLONEQUAL reduce production expr -> expr OR expr
-- On CLASS reduce production expr -> expr OR expr
-- On CHAR reduce production expr -> expr OR expr
-- On BEGIN reduce production expr -> expr OR expr
-- On BAR reduce production expr -> expr OR expr
-- On ASSERT reduce production expr -> expr OR expr
-- On AND reduce production expr -> expr OR expr

State 668:
## Known stack suffix:
## expr LESSGREATER
## LR(1) items:
expr -> expr LESSGREATER . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 669
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 669:
## Known stack suffix:
## expr LESSGREATER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr LESSGREATER expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On COLONCOLON shift to state 674
## Reductions:
-- On WITH reduce production expr -> expr LESSGREATER expr
-- On WHILE reduce production expr -> expr LESSGREATER expr
-- On UIDENT reduce production expr -> expr LESSGREATER expr
-- On TYPE reduce production expr -> expr LESSGREATER expr
-- On TRY reduce production expr -> expr LESSGREATER expr
-- On TRUE reduce production expr -> expr LESSGREATER expr
-- On TO reduce production expr -> expr LESSGREATER expr
-- On THEN reduce production expr -> expr LESSGREATER expr
-- On STRING reduce production expr -> expr LESSGREATER expr
-- On SHARP reduce production expr -> expr LESSGREATER expr
-- On SEMISEMI reduce production expr -> expr LESSGREATER expr
-- On SEMI reduce production expr -> expr LESSGREATER expr
-- On PREFIXOP reduce production expr -> expr LESSGREATER expr
-- On PARSER reduce production expr -> expr LESSGREATER expr
-- On OR reduce production expr -> expr LESSGREATER expr
-- On OPEN reduce production expr -> expr LESSGREATER expr
-- On NEW reduce production expr -> expr LESSGREATER expr
-- On MODULE reduce production expr -> expr LESSGREATER expr
-- On MINUSGREATER reduce production expr -> expr LESSGREATER expr
-- On MATCH reduce production expr -> expr LESSGREATER expr
-- On LPAREN reduce production expr -> expr LESSGREATER expr
-- On LOC reduce production expr -> expr LESSGREATER expr
-- On LIDENT reduce production expr -> expr LESSGREATER expr
-- On LET reduce production expr -> expr LESSGREATER expr
-- On LESSGREATER reduce production expr -> expr LESSGREATER expr
-- On LESS reduce production expr -> expr LESSGREATER expr
-- On LBRACKETLESS reduce production expr -> expr LESSGREATER expr
-- On LBRACKETBAR reduce production expr -> expr LESSGREATER expr
-- On LBRACKET reduce production expr -> expr LESSGREATER expr
-- On LBRACELESS reduce production expr -> expr LESSGREATER expr
-- On LBRACEBAR reduce production expr -> expr LESSGREATER expr
-- On LBRACE reduce production expr -> expr LESSGREATER expr
-- On LAZY reduce production expr -> expr LESSGREATER expr
-- On INT reduce production expr -> expr LESSGREATER expr
-- On INFIXOP0 reduce production expr -> expr LESSGREATER expr
-- On IN reduce production expr -> expr LESSGREATER expr
-- On IF reduce production expr -> expr LESSGREATER expr
-- On GREATER reduce production expr -> expr LESSGREATER expr
-- On FUNCTION reduce production expr -> expr LESSGREATER expr
-- On FUN reduce production expr -> expr LESSGREATER expr
-- On FOR reduce production expr -> expr LESSGREATER expr
-- On FLOAT reduce production expr -> expr LESSGREATER expr
-- On FALSE reduce production expr -> expr LESSGREATER expr
-- On EXTERNAL reduce production expr -> expr LESSGREATER expr
-- On EXCEPTION reduce production expr -> expr LESSGREATER expr
-- On EQUAL reduce production expr -> expr LESSGREATER expr
-- On EOF reduce production expr -> expr LESSGREATER expr
-- On END reduce production expr -> expr LESSGREATER expr
-- On ELSE reduce production expr -> expr LESSGREATER expr
-- On DOWNTO reduce production expr -> expr LESSGREATER expr
-- On DO reduce production expr -> expr LESSGREATER expr
-- On DEF reduce production expr -> expr LESSGREATER expr
-- On COMMA reduce production expr -> expr LESSGREATER expr
-- On COLONEQUAL reduce production expr -> expr LESSGREATER expr
-- On CLASS reduce production expr -> expr LESSGREATER expr
-- On CHAR reduce production expr -> expr LESSGREATER expr
-- On BEGIN reduce production expr -> expr LESSGREATER expr
-- On BARBAR reduce production expr -> expr LESSGREATER expr
-- On BAR reduce production expr -> expr LESSGREATER expr
-- On ASSERT reduce production expr -> expr LESSGREATER expr
-- On AND reduce production expr -> expr LESSGREATER expr
-- On AMPERSAND reduce production expr -> expr LESSGREATER expr
-- On AMPERAMPER reduce production expr -> expr LESSGREATER expr

State 670:
## Known stack suffix:
## expr INFIXOP2
## LR(1) items:
expr -> expr INFIXOP2 . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 671
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 671:
## Known stack suffix:
## expr INFIXOP2 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP2 expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
## Reductions:
-- On WITH reduce production expr -> expr INFIXOP2 expr
-- On WHILE reduce production expr -> expr INFIXOP2 expr
-- On UIDENT reduce production expr -> expr INFIXOP2 expr
-- On TYPE reduce production expr -> expr INFIXOP2 expr
-- On TRY reduce production expr -> expr INFIXOP2 expr
-- On TRUE reduce production expr -> expr INFIXOP2 expr
-- On TO reduce production expr -> expr INFIXOP2 expr
-- On THEN reduce production expr -> expr INFIXOP2 expr
-- On SUBTRACTIVE reduce production expr -> expr INFIXOP2 expr
-- On STRING reduce production expr -> expr INFIXOP2 expr
-- On SHARP reduce production expr -> expr INFIXOP2 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP2 expr
-- On SEMI reduce production expr -> expr INFIXOP2 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP2 expr
-- On PARSER reduce production expr -> expr INFIXOP2 expr
-- On OR reduce production expr -> expr INFIXOP2 expr
-- On OPEN reduce production expr -> expr INFIXOP2 expr
-- On NEW reduce production expr -> expr INFIXOP2 expr
-- On MODULE reduce production expr -> expr INFIXOP2 expr
-- On MINUSGREATER reduce production expr -> expr INFIXOP2 expr
-- On MATCH reduce production expr -> expr INFIXOP2 expr
-- On LPAREN reduce production expr -> expr INFIXOP2 expr
-- On LOC reduce production expr -> expr INFIXOP2 expr
-- On LIDENT reduce production expr -> expr INFIXOP2 expr
-- On LET reduce production expr -> expr INFIXOP2 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP2 expr
-- On LESS reduce production expr -> expr INFIXOP2 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP2 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP2 expr
-- On LBRACKET reduce production expr -> expr INFIXOP2 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP2 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP2 expr
-- On LBRACE reduce production expr -> expr INFIXOP2 expr
-- On LAZY reduce production expr -> expr INFIXOP2 expr
-- On INT reduce production expr -> expr INFIXOP2 expr
-- On INFIXOP2 reduce production expr -> expr INFIXOP2 expr
-- On INFIXOP1 reduce production expr -> expr INFIXOP2 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP2 expr
-- On IN reduce production expr -> expr INFIXOP2 expr
-- On IF reduce production expr -> expr INFIXOP2 expr
-- On GREATER reduce production expr -> expr INFIXOP2 expr
-- On FUNCTION reduce production expr -> expr INFIXOP2 expr
-- On FUN reduce production expr -> expr INFIXOP2 expr
-- On FOR reduce production expr -> expr INFIXOP2 expr
-- On FLOAT reduce production expr -> expr INFIXOP2 expr
-- On FALSE reduce production expr -> expr INFIXOP2 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP2 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP2 expr
-- On EQUAL reduce production expr -> expr INFIXOP2 expr
-- On EOF reduce production expr -> expr INFIXOP2 expr
-- On END reduce production expr -> expr INFIXOP2 expr
-- On ELSE reduce production expr -> expr INFIXOP2 expr
-- On DOWNTO reduce production expr -> expr INFIXOP2 expr
-- On DO reduce production expr -> expr INFIXOP2 expr
-- On DEF reduce production expr -> expr INFIXOP2 expr
-- On COMMA reduce production expr -> expr INFIXOP2 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP2 expr
-- On COLONCOLON reduce production expr -> expr INFIXOP2 expr
-- On CLASS reduce production expr -> expr INFIXOP2 expr
-- On CHAR reduce production expr -> expr INFIXOP2 expr
-- On BEGIN reduce production expr -> expr INFIXOP2 expr
-- On BARBAR reduce production expr -> expr INFIXOP2 expr
-- On BAR reduce production expr -> expr INFIXOP2 expr
-- On ASSERT reduce production expr -> expr INFIXOP2 expr
-- On AND reduce production expr -> expr INFIXOP2 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP2 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP2 expr

State 672:
## Known stack suffix:
## expr INFIXOP1
## LR(1) items:
expr -> expr INFIXOP1 . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 673
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 673:
## Known stack suffix:
## expr INFIXOP1 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP1 expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On COLONCOLON shift to state 674
## Reductions:
-- On WITH reduce production expr -> expr INFIXOP1 expr
-- On WHILE reduce production expr -> expr INFIXOP1 expr
-- On UIDENT reduce production expr -> expr INFIXOP1 expr
-- On TYPE reduce production expr -> expr INFIXOP1 expr
-- On TRY reduce production expr -> expr INFIXOP1 expr
-- On TRUE reduce production expr -> expr INFIXOP1 expr
-- On TO reduce production expr -> expr INFIXOP1 expr
-- On THEN reduce production expr -> expr INFIXOP1 expr
-- On STRING reduce production expr -> expr INFIXOP1 expr
-- On SHARP reduce production expr -> expr INFIXOP1 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP1 expr
-- On SEMI reduce production expr -> expr INFIXOP1 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP1 expr
-- On PARSER reduce production expr -> expr INFIXOP1 expr
-- On OR reduce production expr -> expr INFIXOP1 expr
-- On OPEN reduce production expr -> expr INFIXOP1 expr
-- On NEW reduce production expr -> expr INFIXOP1 expr
-- On MODULE reduce production expr -> expr INFIXOP1 expr
-- On MINUSGREATER reduce production expr -> expr INFIXOP1 expr
-- On MATCH reduce production expr -> expr INFIXOP1 expr
-- On LPAREN reduce production expr -> expr INFIXOP1 expr
-- On LOC reduce production expr -> expr INFIXOP1 expr
-- On LIDENT reduce production expr -> expr INFIXOP1 expr
-- On LET reduce production expr -> expr INFIXOP1 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP1 expr
-- On LESS reduce production expr -> expr INFIXOP1 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP1 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP1 expr
-- On LBRACKET reduce production expr -> expr INFIXOP1 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP1 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP1 expr
-- On LBRACE reduce production expr -> expr INFIXOP1 expr
-- On LAZY reduce production expr -> expr INFIXOP1 expr
-- On INT reduce production expr -> expr INFIXOP1 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP1 expr
-- On IN reduce production expr -> expr INFIXOP1 expr
-- On IF reduce production expr -> expr INFIXOP1 expr
-- On GREATER reduce production expr -> expr INFIXOP1 expr
-- On FUNCTION reduce production expr -> expr INFIXOP1 expr
-- On FUN reduce production expr -> expr INFIXOP1 expr
-- On FOR reduce production expr -> expr INFIXOP1 expr
-- On FLOAT reduce production expr -> expr INFIXOP1 expr
-- On FALSE reduce production expr -> expr INFIXOP1 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP1 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP1 expr
-- On EQUAL reduce production expr -> expr INFIXOP1 expr
-- On EOF reduce production expr -> expr INFIXOP1 expr
-- On END reduce production expr -> expr INFIXOP1 expr
-- On ELSE reduce production expr -> expr INFIXOP1 expr
-- On DOWNTO reduce production expr -> expr INFIXOP1 expr
-- On DO reduce production expr -> expr INFIXOP1 expr
-- On DEF reduce production expr -> expr INFIXOP1 expr
-- On COMMA reduce production expr -> expr INFIXOP1 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP1 expr
-- On CLASS reduce production expr -> expr INFIXOP1 expr
-- On CHAR reduce production expr -> expr INFIXOP1 expr
-- On BEGIN reduce production expr -> expr INFIXOP1 expr
-- On BARBAR reduce production expr -> expr INFIXOP1 expr
-- On BAR reduce production expr -> expr INFIXOP1 expr
-- On ASSERT reduce production expr -> expr INFIXOP1 expr
-- On AND reduce production expr -> expr INFIXOP1 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP1 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP1 expr

State 674:
## Known stack suffix:
## expr COLONCOLON
## LR(1) items:
expr -> expr COLONCOLON . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 675
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 675:
## Known stack suffix:
## expr COLONCOLON expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr COLONCOLON expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On COLONCOLON shift to state 674
## Reductions:
-- On WITH reduce production expr -> expr COLONCOLON expr
-- On WHILE reduce production expr -> expr COLONCOLON expr
-- On UIDENT reduce production expr -> expr COLONCOLON expr
-- On TYPE reduce production expr -> expr COLONCOLON expr
-- On TRY reduce production expr -> expr COLONCOLON expr
-- On TRUE reduce production expr -> expr COLONCOLON expr
-- On TO reduce production expr -> expr COLONCOLON expr
-- On THEN reduce production expr -> expr COLONCOLON expr
-- On STRING reduce production expr -> expr COLONCOLON expr
-- On SHARP reduce production expr -> expr COLONCOLON expr
-- On SEMISEMI reduce production expr -> expr COLONCOLON expr
-- On SEMI reduce production expr -> expr COLONCOLON expr
-- On PREFIXOP reduce production expr -> expr COLONCOLON expr
-- On PARSER reduce production expr -> expr COLONCOLON expr
-- On OR reduce production expr -> expr COLONCOLON expr
-- On OPEN reduce production expr -> expr COLONCOLON expr
-- On NEW reduce production expr -> expr COLONCOLON expr
-- On MODULE reduce production expr -> expr COLONCOLON expr
-- On MINUSGREATER reduce production expr -> expr COLONCOLON expr
-- On MATCH reduce production expr -> expr COLONCOLON expr
-- On LPAREN reduce production expr -> expr COLONCOLON expr
-- On LOC reduce production expr -> expr COLONCOLON expr
-- On LIDENT reduce production expr -> expr COLONCOLON expr
-- On LET reduce production expr -> expr COLONCOLON expr
-- On LESSGREATER reduce production expr -> expr COLONCOLON expr
-- On LESS reduce production expr -> expr COLONCOLON expr
-- On LBRACKETLESS reduce production expr -> expr COLONCOLON expr
-- On LBRACKETBAR reduce production expr -> expr COLONCOLON expr
-- On LBRACKET reduce production expr -> expr COLONCOLON expr
-- On LBRACELESS reduce production expr -> expr COLONCOLON expr
-- On LBRACEBAR reduce production expr -> expr COLONCOLON expr
-- On LBRACE reduce production expr -> expr COLONCOLON expr
-- On LAZY reduce production expr -> expr COLONCOLON expr
-- On INT reduce production expr -> expr COLONCOLON expr
-- On INFIXOP1 reduce production expr -> expr COLONCOLON expr
-- On INFIXOP0 reduce production expr -> expr COLONCOLON expr
-- On IN reduce production expr -> expr COLONCOLON expr
-- On IF reduce production expr -> expr COLONCOLON expr
-- On GREATER reduce production expr -> expr COLONCOLON expr
-- On FUNCTION reduce production expr -> expr COLONCOLON expr
-- On FUN reduce production expr -> expr COLONCOLON expr
-- On FOR reduce production expr -> expr COLONCOLON expr
-- On FLOAT reduce production expr -> expr COLONCOLON expr
-- On FALSE reduce production expr -> expr COLONCOLON expr
-- On EXTERNAL reduce production expr -> expr COLONCOLON expr
-- On EXCEPTION reduce production expr -> expr COLONCOLON expr
-- On EQUAL reduce production expr -> expr COLONCOLON expr
-- On EOF reduce production expr -> expr COLONCOLON expr
-- On END reduce production expr -> expr COLONCOLON expr
-- On ELSE reduce production expr -> expr COLONCOLON expr
-- On DOWNTO reduce production expr -> expr COLONCOLON expr
-- On DO reduce production expr -> expr COLONCOLON expr
-- On DEF reduce production expr -> expr COLONCOLON expr
-- On COMMA reduce production expr -> expr COLONCOLON expr
-- On COLONEQUAL reduce production expr -> expr COLONCOLON expr
-- On CLASS reduce production expr -> expr COLONCOLON expr
-- On CHAR reduce production expr -> expr COLONCOLON expr
-- On BEGIN reduce production expr -> expr COLONCOLON expr
-- On BARBAR reduce production expr -> expr COLONCOLON expr
-- On BAR reduce production expr -> expr COLONCOLON expr
-- On ASSERT reduce production expr -> expr COLONCOLON expr
-- On AND reduce production expr -> expr COLONCOLON expr
-- On AMPERSAND reduce production expr -> expr COLONCOLON expr
-- On AMPERAMPER reduce production expr -> expr COLONCOLON expr

State 676:
## Known stack suffix:
## expr LESS
## LR(1) items:
expr -> expr LESS . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 677
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 677:
## Known stack suffix:
## expr LESS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr LESS expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On COLONCOLON shift to state 674
## Reductions:
-- On WITH reduce production expr -> expr LESS expr
-- On WHILE reduce production expr -> expr LESS expr
-- On UIDENT reduce production expr -> expr LESS expr
-- On TYPE reduce production expr -> expr LESS expr
-- On TRY reduce production expr -> expr LESS expr
-- On TRUE reduce production expr -> expr LESS expr
-- On TO reduce production expr -> expr LESS expr
-- On THEN reduce production expr -> expr LESS expr
-- On STRING reduce production expr -> expr LESS expr
-- On SHARP reduce production expr -> expr LESS expr
-- On SEMISEMI reduce production expr -> expr LESS expr
-- On SEMI reduce production expr -> expr LESS expr
-- On PREFIXOP reduce production expr -> expr LESS expr
-- On PARSER reduce production expr -> expr LESS expr
-- On OR reduce production expr -> expr LESS expr
-- On OPEN reduce production expr -> expr LESS expr
-- On NEW reduce production expr -> expr LESS expr
-- On MODULE reduce production expr -> expr LESS expr
-- On MINUSGREATER reduce production expr -> expr LESS expr
-- On MATCH reduce production expr -> expr LESS expr
-- On LPAREN reduce production expr -> expr LESS expr
-- On LOC reduce production expr -> expr LESS expr
-- On LIDENT reduce production expr -> expr LESS expr
-- On LET reduce production expr -> expr LESS expr
-- On LESSGREATER reduce production expr -> expr LESS expr
-- On LESS reduce production expr -> expr LESS expr
-- On LBRACKETLESS reduce production expr -> expr LESS expr
-- On LBRACKETBAR reduce production expr -> expr LESS expr
-- On LBRACKET reduce production expr -> expr LESS expr
-- On LBRACELESS reduce production expr -> expr LESS expr
-- On LBRACEBAR reduce production expr -> expr LESS expr
-- On LBRACE reduce production expr -> expr LESS expr
-- On LAZY reduce production expr -> expr LESS expr
-- On INT reduce production expr -> expr LESS expr
-- On INFIXOP0 reduce production expr -> expr LESS expr
-- On IN reduce production expr -> expr LESS expr
-- On IF reduce production expr -> expr LESS expr
-- On GREATER reduce production expr -> expr LESS expr
-- On FUNCTION reduce production expr -> expr LESS expr
-- On FUN reduce production expr -> expr LESS expr
-- On FOR reduce production expr -> expr LESS expr
-- On FLOAT reduce production expr -> expr LESS expr
-- On FALSE reduce production expr -> expr LESS expr
-- On EXTERNAL reduce production expr -> expr LESS expr
-- On EXCEPTION reduce production expr -> expr LESS expr
-- On EQUAL reduce production expr -> expr LESS expr
-- On EOF reduce production expr -> expr LESS expr
-- On END reduce production expr -> expr LESS expr
-- On ELSE reduce production expr -> expr LESS expr
-- On DOWNTO reduce production expr -> expr LESS expr
-- On DO reduce production expr -> expr LESS expr
-- On DEF reduce production expr -> expr LESS expr
-- On COMMA reduce production expr -> expr LESS expr
-- On COLONEQUAL reduce production expr -> expr LESS expr
-- On CLASS reduce production expr -> expr LESS expr
-- On CHAR reduce production expr -> expr LESS expr
-- On BEGIN reduce production expr -> expr LESS expr
-- On BARBAR reduce production expr -> expr LESS expr
-- On BAR reduce production expr -> expr LESS expr
-- On ASSERT reduce production expr -> expr LESS expr
-- On AND reduce production expr -> expr LESS expr
-- On AMPERSAND reduce production expr -> expr LESS expr
-- On AMPERAMPER reduce production expr -> expr LESS expr

State 678:
## Known stack suffix:
## expr INFIXOP0
## LR(1) items:
expr -> expr INFIXOP0 . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 679
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 679:
## Known stack suffix:
## expr INFIXOP0 expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr INFIXOP0 expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On COLONCOLON shift to state 674
## Reductions:
-- On WITH reduce production expr -> expr INFIXOP0 expr
-- On WHILE reduce production expr -> expr INFIXOP0 expr
-- On UIDENT reduce production expr -> expr INFIXOP0 expr
-- On TYPE reduce production expr -> expr INFIXOP0 expr
-- On TRY reduce production expr -> expr INFIXOP0 expr
-- On TRUE reduce production expr -> expr INFIXOP0 expr
-- On TO reduce production expr -> expr INFIXOP0 expr
-- On THEN reduce production expr -> expr INFIXOP0 expr
-- On STRING reduce production expr -> expr INFIXOP0 expr
-- On SHARP reduce production expr -> expr INFIXOP0 expr
-- On SEMISEMI reduce production expr -> expr INFIXOP0 expr
-- On SEMI reduce production expr -> expr INFIXOP0 expr
-- On PREFIXOP reduce production expr -> expr INFIXOP0 expr
-- On PARSER reduce production expr -> expr INFIXOP0 expr
-- On OR reduce production expr -> expr INFIXOP0 expr
-- On OPEN reduce production expr -> expr INFIXOP0 expr
-- On NEW reduce production expr -> expr INFIXOP0 expr
-- On MODULE reduce production expr -> expr INFIXOP0 expr
-- On MINUSGREATER reduce production expr -> expr INFIXOP0 expr
-- On MATCH reduce production expr -> expr INFIXOP0 expr
-- On LPAREN reduce production expr -> expr INFIXOP0 expr
-- On LOC reduce production expr -> expr INFIXOP0 expr
-- On LIDENT reduce production expr -> expr INFIXOP0 expr
-- On LET reduce production expr -> expr INFIXOP0 expr
-- On LESSGREATER reduce production expr -> expr INFIXOP0 expr
-- On LESS reduce production expr -> expr INFIXOP0 expr
-- On LBRACKETLESS reduce production expr -> expr INFIXOP0 expr
-- On LBRACKETBAR reduce production expr -> expr INFIXOP0 expr
-- On LBRACKET reduce production expr -> expr INFIXOP0 expr
-- On LBRACELESS reduce production expr -> expr INFIXOP0 expr
-- On LBRACEBAR reduce production expr -> expr INFIXOP0 expr
-- On LBRACE reduce production expr -> expr INFIXOP0 expr
-- On LAZY reduce production expr -> expr INFIXOP0 expr
-- On INT reduce production expr -> expr INFIXOP0 expr
-- On INFIXOP0 reduce production expr -> expr INFIXOP0 expr
-- On IN reduce production expr -> expr INFIXOP0 expr
-- On IF reduce production expr -> expr INFIXOP0 expr
-- On GREATER reduce production expr -> expr INFIXOP0 expr
-- On FUNCTION reduce production expr -> expr INFIXOP0 expr
-- On FUN reduce production expr -> expr INFIXOP0 expr
-- On FOR reduce production expr -> expr INFIXOP0 expr
-- On FLOAT reduce production expr -> expr INFIXOP0 expr
-- On FALSE reduce production expr -> expr INFIXOP0 expr
-- On EXTERNAL reduce production expr -> expr INFIXOP0 expr
-- On EXCEPTION reduce production expr -> expr INFIXOP0 expr
-- On EQUAL reduce production expr -> expr INFIXOP0 expr
-- On EOF reduce production expr -> expr INFIXOP0 expr
-- On END reduce production expr -> expr INFIXOP0 expr
-- On ELSE reduce production expr -> expr INFIXOP0 expr
-- On DOWNTO reduce production expr -> expr INFIXOP0 expr
-- On DO reduce production expr -> expr INFIXOP0 expr
-- On DEF reduce production expr -> expr INFIXOP0 expr
-- On COMMA reduce production expr -> expr INFIXOP0 expr
-- On COLONEQUAL reduce production expr -> expr INFIXOP0 expr
-- On CLASS reduce production expr -> expr INFIXOP0 expr
-- On CHAR reduce production expr -> expr INFIXOP0 expr
-- On BEGIN reduce production expr -> expr INFIXOP0 expr
-- On BARBAR reduce production expr -> expr INFIXOP0 expr
-- On BAR reduce production expr -> expr INFIXOP0 expr
-- On ASSERT reduce production expr -> expr INFIXOP0 expr
-- On AND reduce production expr -> expr INFIXOP0 expr
-- On AMPERSAND reduce production expr -> expr INFIXOP0 expr
-- On AMPERAMPER reduce production expr -> expr INFIXOP0 expr

State 680:
## Known stack suffix:
## expr GREATER
## LR(1) items:
expr -> expr GREATER . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 681
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 681:
## Known stack suffix:
## expr GREATER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr GREATER expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On COLONCOLON shift to state 674
## Reductions:
-- On WITH reduce production expr -> expr GREATER expr
-- On WHILE reduce production expr -> expr GREATER expr
-- On UIDENT reduce production expr -> expr GREATER expr
-- On TYPE reduce production expr -> expr GREATER expr
-- On TRY reduce production expr -> expr GREATER expr
-- On TRUE reduce production expr -> expr GREATER expr
-- On TO reduce production expr -> expr GREATER expr
-- On THEN reduce production expr -> expr GREATER expr
-- On STRING reduce production expr -> expr GREATER expr
-- On SHARP reduce production expr -> expr GREATER expr
-- On SEMISEMI reduce production expr -> expr GREATER expr
-- On SEMI reduce production expr -> expr GREATER expr
-- On PREFIXOP reduce production expr -> expr GREATER expr
-- On PARSER reduce production expr -> expr GREATER expr
-- On OR reduce production expr -> expr GREATER expr
-- On OPEN reduce production expr -> expr GREATER expr
-- On NEW reduce production expr -> expr GREATER expr
-- On MODULE reduce production expr -> expr GREATER expr
-- On MINUSGREATER reduce production expr -> expr GREATER expr
-- On MATCH reduce production expr -> expr GREATER expr
-- On LPAREN reduce production expr -> expr GREATER expr
-- On LOC reduce production expr -> expr GREATER expr
-- On LIDENT reduce production expr -> expr GREATER expr
-- On LET reduce production expr -> expr GREATER expr
-- On LESSGREATER reduce production expr -> expr GREATER expr
-- On LESS reduce production expr -> expr GREATER expr
-- On LBRACKETLESS reduce production expr -> expr GREATER expr
-- On LBRACKETBAR reduce production expr -> expr GREATER expr
-- On LBRACKET reduce production expr -> expr GREATER expr
-- On LBRACELESS reduce production expr -> expr GREATER expr
-- On LBRACEBAR reduce production expr -> expr GREATER expr
-- On LBRACE reduce production expr -> expr GREATER expr
-- On LAZY reduce production expr -> expr GREATER expr
-- On INT reduce production expr -> expr GREATER expr
-- On INFIXOP0 reduce production expr -> expr GREATER expr
-- On IN reduce production expr -> expr GREATER expr
-- On IF reduce production expr -> expr GREATER expr
-- On GREATER reduce production expr -> expr GREATER expr
-- On FUNCTION reduce production expr -> expr GREATER expr
-- On FUN reduce production expr -> expr GREATER expr
-- On FOR reduce production expr -> expr GREATER expr
-- On FLOAT reduce production expr -> expr GREATER expr
-- On FALSE reduce production expr -> expr GREATER expr
-- On EXTERNAL reduce production expr -> expr GREATER expr
-- On EXCEPTION reduce production expr -> expr GREATER expr
-- On EQUAL reduce production expr -> expr GREATER expr
-- On EOF reduce production expr -> expr GREATER expr
-- On END reduce production expr -> expr GREATER expr
-- On ELSE reduce production expr -> expr GREATER expr
-- On DOWNTO reduce production expr -> expr GREATER expr
-- On DO reduce production expr -> expr GREATER expr
-- On DEF reduce production expr -> expr GREATER expr
-- On COMMA reduce production expr -> expr GREATER expr
-- On COLONEQUAL reduce production expr -> expr GREATER expr
-- On CLASS reduce production expr -> expr GREATER expr
-- On CHAR reduce production expr -> expr GREATER expr
-- On BEGIN reduce production expr -> expr GREATER expr
-- On BARBAR reduce production expr -> expr GREATER expr
-- On BAR reduce production expr -> expr GREATER expr
-- On ASSERT reduce production expr -> expr GREATER expr
-- On AND reduce production expr -> expr GREATER expr
-- On AMPERSAND reduce production expr -> expr GREATER expr
-- On AMPERAMPER reduce production expr -> expr GREATER expr

State 682:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 683
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 683:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr EQUAL expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On COLONCOLON shift to state 674
## Reductions:
-- On WITH reduce production expr -> expr EQUAL expr
-- On WHILE reduce production expr -> expr EQUAL expr
-- On UIDENT reduce production expr -> expr EQUAL expr
-- On TYPE reduce production expr -> expr EQUAL expr
-- On TRY reduce production expr -> expr EQUAL expr
-- On TRUE reduce production expr -> expr EQUAL expr
-- On TO reduce production expr -> expr EQUAL expr
-- On THEN reduce production expr -> expr EQUAL expr
-- On STRING reduce production expr -> expr EQUAL expr
-- On SHARP reduce production expr -> expr EQUAL expr
-- On SEMISEMI reduce production expr -> expr EQUAL expr
-- On SEMI reduce production expr -> expr EQUAL expr
-- On PREFIXOP reduce production expr -> expr EQUAL expr
-- On PARSER reduce production expr -> expr EQUAL expr
-- On OR reduce production expr -> expr EQUAL expr
-- On OPEN reduce production expr -> expr EQUAL expr
-- On NEW reduce production expr -> expr EQUAL expr
-- On MODULE reduce production expr -> expr EQUAL expr
-- On MINUSGREATER reduce production expr -> expr EQUAL expr
-- On MATCH reduce production expr -> expr EQUAL expr
-- On LPAREN reduce production expr -> expr EQUAL expr
-- On LOC reduce production expr -> expr EQUAL expr
-- On LIDENT reduce production expr -> expr EQUAL expr
-- On LET reduce production expr -> expr EQUAL expr
-- On LESSGREATER reduce production expr -> expr EQUAL expr
-- On LESS reduce production expr -> expr EQUAL expr
-- On LBRACKETLESS reduce production expr -> expr EQUAL expr
-- On LBRACKETBAR reduce production expr -> expr EQUAL expr
-- On LBRACKET reduce production expr -> expr EQUAL expr
-- On LBRACELESS reduce production expr -> expr EQUAL expr
-- On LBRACEBAR reduce production expr -> expr EQUAL expr
-- On LBRACE reduce production expr -> expr EQUAL expr
-- On LAZY reduce production expr -> expr EQUAL expr
-- On INT reduce production expr -> expr EQUAL expr
-- On INFIXOP0 reduce production expr -> expr EQUAL expr
-- On IN reduce production expr -> expr EQUAL expr
-- On IF reduce production expr -> expr EQUAL expr
-- On GREATER reduce production expr -> expr EQUAL expr
-- On FUNCTION reduce production expr -> expr EQUAL expr
-- On FUN reduce production expr -> expr EQUAL expr
-- On FOR reduce production expr -> expr EQUAL expr
-- On FLOAT reduce production expr -> expr EQUAL expr
-- On FALSE reduce production expr -> expr EQUAL expr
-- On EXTERNAL reduce production expr -> expr EQUAL expr
-- On EXCEPTION reduce production expr -> expr EQUAL expr
-- On EQUAL reduce production expr -> expr EQUAL expr
-- On EOF reduce production expr -> expr EQUAL expr
-- On END reduce production expr -> expr EQUAL expr
-- On ELSE reduce production expr -> expr EQUAL expr
-- On DOWNTO reduce production expr -> expr EQUAL expr
-- On DO reduce production expr -> expr EQUAL expr
-- On DEF reduce production expr -> expr EQUAL expr
-- On COMMA reduce production expr -> expr EQUAL expr
-- On COLONEQUAL reduce production expr -> expr EQUAL expr
-- On CLASS reduce production expr -> expr EQUAL expr
-- On CHAR reduce production expr -> expr EQUAL expr
-- On BEGIN reduce production expr -> expr EQUAL expr
-- On BARBAR reduce production expr -> expr EQUAL expr
-- On BAR reduce production expr -> expr EQUAL expr
-- On ASSERT reduce production expr -> expr EQUAL expr
-- On AND reduce production expr -> expr EQUAL expr
-- On AMPERSAND reduce production expr -> expr EQUAL expr
-- On AMPERAMPER reduce production expr -> expr EQUAL expr

State 684:
## Known stack suffix:
## expr BARBAR
## LR(1) items:
expr -> expr BARBAR . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 685
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 685:
## Known stack suffix:
## expr BARBAR expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr BARBAR expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> expr BARBAR expr
-- On WHILE reduce production expr -> expr BARBAR expr
-- On UIDENT reduce production expr -> expr BARBAR expr
-- On TYPE reduce production expr -> expr BARBAR expr
-- On TRY reduce production expr -> expr BARBAR expr
-- On TRUE reduce production expr -> expr BARBAR expr
-- On TO reduce production expr -> expr BARBAR expr
-- On THEN reduce production expr -> expr BARBAR expr
-- On STRING reduce production expr -> expr BARBAR expr
-- On SHARP reduce production expr -> expr BARBAR expr
-- On SEMISEMI reduce production expr -> expr BARBAR expr
-- On SEMI reduce production expr -> expr BARBAR expr
-- On PREFIXOP reduce production expr -> expr BARBAR expr
-- On PARSER reduce production expr -> expr BARBAR expr
-- On OPEN reduce production expr -> expr BARBAR expr
-- On NEW reduce production expr -> expr BARBAR expr
-- On MODULE reduce production expr -> expr BARBAR expr
-- On MINUSGREATER reduce production expr -> expr BARBAR expr
-- On MATCH reduce production expr -> expr BARBAR expr
-- On LPAREN reduce production expr -> expr BARBAR expr
-- On LOC reduce production expr -> expr BARBAR expr
-- On LIDENT reduce production expr -> expr BARBAR expr
-- On LET reduce production expr -> expr BARBAR expr
-- On LBRACKETLESS reduce production expr -> expr BARBAR expr
-- On LBRACKETBAR reduce production expr -> expr BARBAR expr
-- On LBRACKET reduce production expr -> expr BARBAR expr
-- On LBRACELESS reduce production expr -> expr BARBAR expr
-- On LBRACEBAR reduce production expr -> expr BARBAR expr
-- On LBRACE reduce production expr -> expr BARBAR expr
-- On LAZY reduce production expr -> expr BARBAR expr
-- On INT reduce production expr -> expr BARBAR expr
-- On IN reduce production expr -> expr BARBAR expr
-- On IF reduce production expr -> expr BARBAR expr
-- On FUNCTION reduce production expr -> expr BARBAR expr
-- On FUN reduce production expr -> expr BARBAR expr
-- On FOR reduce production expr -> expr BARBAR expr
-- On FLOAT reduce production expr -> expr BARBAR expr
-- On FALSE reduce production expr -> expr BARBAR expr
-- On EXTERNAL reduce production expr -> expr BARBAR expr
-- On EXCEPTION reduce production expr -> expr BARBAR expr
-- On EOF reduce production expr -> expr BARBAR expr
-- On END reduce production expr -> expr BARBAR expr
-- On ELSE reduce production expr -> expr BARBAR expr
-- On DOWNTO reduce production expr -> expr BARBAR expr
-- On DO reduce production expr -> expr BARBAR expr
-- On DEF reduce production expr -> expr BARBAR expr
-- On COMMA reduce production expr -> expr BARBAR expr
-- On COLONEQUAL reduce production expr -> expr BARBAR expr
-- On CLASS reduce production expr -> expr BARBAR expr
-- On CHAR reduce production expr -> expr BARBAR expr
-- On BEGIN reduce production expr -> expr BARBAR expr
-- On BAR reduce production expr -> expr BARBAR expr
-- On ASSERT reduce production expr -> expr BARBAR expr
-- On AND reduce production expr -> expr BARBAR expr

State 686:
## Known stack suffix:
## expr AMPERSAND
## LR(1) items:
expr -> expr AMPERSAND . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 687
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 687:
## Known stack suffix:
## expr AMPERSAND expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERSAND expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COLONCOLON shift to state 674
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> expr AMPERSAND expr
-- On WHILE reduce production expr -> expr AMPERSAND expr
-- On UIDENT reduce production expr -> expr AMPERSAND expr
-- On TYPE reduce production expr -> expr AMPERSAND expr
-- On TRY reduce production expr -> expr AMPERSAND expr
-- On TRUE reduce production expr -> expr AMPERSAND expr
-- On TO reduce production expr -> expr AMPERSAND expr
-- On THEN reduce production expr -> expr AMPERSAND expr
-- On STRING reduce production expr -> expr AMPERSAND expr
-- On SHARP reduce production expr -> expr AMPERSAND expr
-- On SEMISEMI reduce production expr -> expr AMPERSAND expr
-- On SEMI reduce production expr -> expr AMPERSAND expr
-- On PREFIXOP reduce production expr -> expr AMPERSAND expr
-- On PARSER reduce production expr -> expr AMPERSAND expr
-- On OR reduce production expr -> expr AMPERSAND expr
-- On OPEN reduce production expr -> expr AMPERSAND expr
-- On NEW reduce production expr -> expr AMPERSAND expr
-- On MODULE reduce production expr -> expr AMPERSAND expr
-- On MINUSGREATER reduce production expr -> expr AMPERSAND expr
-- On MATCH reduce production expr -> expr AMPERSAND expr
-- On LPAREN reduce production expr -> expr AMPERSAND expr
-- On LOC reduce production expr -> expr AMPERSAND expr
-- On LIDENT reduce production expr -> expr AMPERSAND expr
-- On LET reduce production expr -> expr AMPERSAND expr
-- On LBRACKETLESS reduce production expr -> expr AMPERSAND expr
-- On LBRACKETBAR reduce production expr -> expr AMPERSAND expr
-- On LBRACKET reduce production expr -> expr AMPERSAND expr
-- On LBRACELESS reduce production expr -> expr AMPERSAND expr
-- On LBRACEBAR reduce production expr -> expr AMPERSAND expr
-- On LBRACE reduce production expr -> expr AMPERSAND expr
-- On LAZY reduce production expr -> expr AMPERSAND expr
-- On INT reduce production expr -> expr AMPERSAND expr
-- On IN reduce production expr -> expr AMPERSAND expr
-- On IF reduce production expr -> expr AMPERSAND expr
-- On FUNCTION reduce production expr -> expr AMPERSAND expr
-- On FUN reduce production expr -> expr AMPERSAND expr
-- On FOR reduce production expr -> expr AMPERSAND expr
-- On FLOAT reduce production expr -> expr AMPERSAND expr
-- On FALSE reduce production expr -> expr AMPERSAND expr
-- On EXTERNAL reduce production expr -> expr AMPERSAND expr
-- On EXCEPTION reduce production expr -> expr AMPERSAND expr
-- On EOF reduce production expr -> expr AMPERSAND expr
-- On END reduce production expr -> expr AMPERSAND expr
-- On ELSE reduce production expr -> expr AMPERSAND expr
-- On DOWNTO reduce production expr -> expr AMPERSAND expr
-- On DO reduce production expr -> expr AMPERSAND expr
-- On DEF reduce production expr -> expr AMPERSAND expr
-- On COMMA reduce production expr -> expr AMPERSAND expr
-- On COLONEQUAL reduce production expr -> expr AMPERSAND expr
-- On CLASS reduce production expr -> expr AMPERSAND expr
-- On CHAR reduce production expr -> expr AMPERSAND expr
-- On BEGIN reduce production expr -> expr AMPERSAND expr
-- On BARBAR reduce production expr -> expr AMPERSAND expr
-- On BAR reduce production expr -> expr AMPERSAND expr
-- On ASSERT reduce production expr -> expr AMPERSAND expr
-- On AND reduce production expr -> expr AMPERSAND expr

State 688:
## Known stack suffix:
## expr AMPERAMPER
## LR(1) items:
expr -> expr AMPERAMPER . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 689
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 689:
## Known stack suffix:
## expr AMPERAMPER expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr AMPERAMPER expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COLONCOLON shift to state 674
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> expr AMPERAMPER expr
-- On WHILE reduce production expr -> expr AMPERAMPER expr
-- On UIDENT reduce production expr -> expr AMPERAMPER expr
-- On TYPE reduce production expr -> expr AMPERAMPER expr
-- On TRY reduce production expr -> expr AMPERAMPER expr
-- On TRUE reduce production expr -> expr AMPERAMPER expr
-- On TO reduce production expr -> expr AMPERAMPER expr
-- On THEN reduce production expr -> expr AMPERAMPER expr
-- On STRING reduce production expr -> expr AMPERAMPER expr
-- On SHARP reduce production expr -> expr AMPERAMPER expr
-- On SEMISEMI reduce production expr -> expr AMPERAMPER expr
-- On SEMI reduce production expr -> expr AMPERAMPER expr
-- On PREFIXOP reduce production expr -> expr AMPERAMPER expr
-- On PARSER reduce production expr -> expr AMPERAMPER expr
-- On OR reduce production expr -> expr AMPERAMPER expr
-- On OPEN reduce production expr -> expr AMPERAMPER expr
-- On NEW reduce production expr -> expr AMPERAMPER expr
-- On MODULE reduce production expr -> expr AMPERAMPER expr
-- On MINUSGREATER reduce production expr -> expr AMPERAMPER expr
-- On MATCH reduce production expr -> expr AMPERAMPER expr
-- On LPAREN reduce production expr -> expr AMPERAMPER expr
-- On LOC reduce production expr -> expr AMPERAMPER expr
-- On LIDENT reduce production expr -> expr AMPERAMPER expr
-- On LET reduce production expr -> expr AMPERAMPER expr
-- On LBRACKETLESS reduce production expr -> expr AMPERAMPER expr
-- On LBRACKETBAR reduce production expr -> expr AMPERAMPER expr
-- On LBRACKET reduce production expr -> expr AMPERAMPER expr
-- On LBRACELESS reduce production expr -> expr AMPERAMPER expr
-- On LBRACEBAR reduce production expr -> expr AMPERAMPER expr
-- On LBRACE reduce production expr -> expr AMPERAMPER expr
-- On LAZY reduce production expr -> expr AMPERAMPER expr
-- On INT reduce production expr -> expr AMPERAMPER expr
-- On IN reduce production expr -> expr AMPERAMPER expr
-- On IF reduce production expr -> expr AMPERAMPER expr
-- On FUNCTION reduce production expr -> expr AMPERAMPER expr
-- On FUN reduce production expr -> expr AMPERAMPER expr
-- On FOR reduce production expr -> expr AMPERAMPER expr
-- On FLOAT reduce production expr -> expr AMPERAMPER expr
-- On FALSE reduce production expr -> expr AMPERAMPER expr
-- On EXTERNAL reduce production expr -> expr AMPERAMPER expr
-- On EXCEPTION reduce production expr -> expr AMPERAMPER expr
-- On EOF reduce production expr -> expr AMPERAMPER expr
-- On END reduce production expr -> expr AMPERAMPER expr
-- On ELSE reduce production expr -> expr AMPERAMPER expr
-- On DOWNTO reduce production expr -> expr AMPERAMPER expr
-- On DO reduce production expr -> expr AMPERAMPER expr
-- On DEF reduce production expr -> expr AMPERAMPER expr
-- On COMMA reduce production expr -> expr AMPERAMPER expr
-- On COLONEQUAL reduce production expr -> expr AMPERAMPER expr
-- On CLASS reduce production expr -> expr AMPERAMPER expr
-- On CHAR reduce production expr -> expr AMPERAMPER expr
-- On BEGIN reduce production expr -> expr AMPERAMPER expr
-- On BARBAR reduce production expr -> expr AMPERAMPER expr
-- On BAR reduce production expr -> expr AMPERAMPER expr
-- On ASSERT reduce production expr -> expr AMPERAMPER expr
-- On AND reduce production expr -> expr AMPERAMPER expr

State 690:
## Known stack suffix:
## label LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> label LESSMINUS expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> label LESSMINUS expr
-- On WHILE reduce production expr -> label LESSMINUS expr
-- On UIDENT reduce production expr -> label LESSMINUS expr
-- On TYPE reduce production expr -> label LESSMINUS expr
-- On TRY reduce production expr -> label LESSMINUS expr
-- On TRUE reduce production expr -> label LESSMINUS expr
-- On TO reduce production expr -> label LESSMINUS expr
-- On THEN reduce production expr -> label LESSMINUS expr
-- On STRING reduce production expr -> label LESSMINUS expr
-- On SHARP reduce production expr -> label LESSMINUS expr
-- On SEMISEMI reduce production expr -> label LESSMINUS expr
-- On SEMI reduce production expr -> label LESSMINUS expr
-- On PREFIXOP reduce production expr -> label LESSMINUS expr
-- On PARSER reduce production expr -> label LESSMINUS expr
-- On OPEN reduce production expr -> label LESSMINUS expr
-- On NEW reduce production expr -> label LESSMINUS expr
-- On MODULE reduce production expr -> label LESSMINUS expr
-- On MINUSGREATER reduce production expr -> label LESSMINUS expr
-- On MATCH reduce production expr -> label LESSMINUS expr
-- On LPAREN reduce production expr -> label LESSMINUS expr
-- On LOC reduce production expr -> label LESSMINUS expr
-- On LIDENT reduce production expr -> label LESSMINUS expr
-- On LET reduce production expr -> label LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> label LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> label LESSMINUS expr
-- On LBRACKET reduce production expr -> label LESSMINUS expr
-- On LBRACELESS reduce production expr -> label LESSMINUS expr
-- On LBRACEBAR reduce production expr -> label LESSMINUS expr
-- On LBRACE reduce production expr -> label LESSMINUS expr
-- On LAZY reduce production expr -> label LESSMINUS expr
-- On INT reduce production expr -> label LESSMINUS expr
-- On IN reduce production expr -> label LESSMINUS expr
-- On IF reduce production expr -> label LESSMINUS expr
-- On FUNCTION reduce production expr -> label LESSMINUS expr
-- On FUN reduce production expr -> label LESSMINUS expr
-- On FOR reduce production expr -> label LESSMINUS expr
-- On FLOAT reduce production expr -> label LESSMINUS expr
-- On FALSE reduce production expr -> label LESSMINUS expr
-- On EXTERNAL reduce production expr -> label LESSMINUS expr
-- On EXCEPTION reduce production expr -> label LESSMINUS expr
-- On EOF reduce production expr -> label LESSMINUS expr
-- On END reduce production expr -> label LESSMINUS expr
-- On ELSE reduce production expr -> label LESSMINUS expr
-- On DOWNTO reduce production expr -> label LESSMINUS expr
-- On DO reduce production expr -> label LESSMINUS expr
-- On DEF reduce production expr -> label LESSMINUS expr
-- On CLASS reduce production expr -> label LESSMINUS expr
-- On CHAR reduce production expr -> label LESSMINUS expr
-- On BEGIN reduce production expr -> label LESSMINUS expr
-- On BAR reduce production expr -> label LESSMINUS expr
-- On ASSERT reduce production expr -> label LESSMINUS expr
-- On AND reduce production expr -> label LESSMINUS expr

State 691:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 692
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 692:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr COMMA expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr_comma_list -> expr COMMA expr
-- On WHILE reduce production expr_comma_list -> expr COMMA expr
-- On UIDENT reduce production expr_comma_list -> expr COMMA expr
-- On TYPE reduce production expr_comma_list -> expr COMMA expr
-- On TRY reduce production expr_comma_list -> expr COMMA expr
-- On TRUE reduce production expr_comma_list -> expr COMMA expr
-- On TO reduce production expr_comma_list -> expr COMMA expr
-- On THEN reduce production expr_comma_list -> expr COMMA expr
-- On STRING reduce production expr_comma_list -> expr COMMA expr
-- On SHARP reduce production expr_comma_list -> expr COMMA expr
-- On SEMISEMI reduce production expr_comma_list -> expr COMMA expr
-- On SEMI reduce production expr_comma_list -> expr COMMA expr
-- On PREFIXOP reduce production expr_comma_list -> expr COMMA expr
-- On PARSER reduce production expr_comma_list -> expr COMMA expr
-- On OPEN reduce production expr_comma_list -> expr COMMA expr
-- On NEW reduce production expr_comma_list -> expr COMMA expr
-- On MODULE reduce production expr_comma_list -> expr COMMA expr
-- On MINUSGREATER reduce production expr_comma_list -> expr COMMA expr
-- On MATCH reduce production expr_comma_list -> expr COMMA expr
-- On LPAREN reduce production expr_comma_list -> expr COMMA expr
-- On LOC reduce production expr_comma_list -> expr COMMA expr
-- On LIDENT reduce production expr_comma_list -> expr COMMA expr
-- On LET reduce production expr_comma_list -> expr COMMA expr
-- On LBRACKETLESS reduce production expr_comma_list -> expr COMMA expr
-- On LBRACKETBAR reduce production expr_comma_list -> expr COMMA expr
-- On LBRACKET reduce production expr_comma_list -> expr COMMA expr
-- On LBRACELESS reduce production expr_comma_list -> expr COMMA expr
-- On LBRACEBAR reduce production expr_comma_list -> expr COMMA expr
-- On LBRACE reduce production expr_comma_list -> expr COMMA expr
-- On LAZY reduce production expr_comma_list -> expr COMMA expr
-- On INT reduce production expr_comma_list -> expr COMMA expr
-- On IN reduce production expr_comma_list -> expr COMMA expr
-- On IF reduce production expr_comma_list -> expr COMMA expr
-- On FUNCTION reduce production expr_comma_list -> expr COMMA expr
-- On FUN reduce production expr_comma_list -> expr COMMA expr
-- On FOR reduce production expr_comma_list -> expr COMMA expr
-- On FLOAT reduce production expr_comma_list -> expr COMMA expr
-- On FALSE reduce production expr_comma_list -> expr COMMA expr
-- On EXTERNAL reduce production expr_comma_list -> expr COMMA expr
-- On EXCEPTION reduce production expr_comma_list -> expr COMMA expr
-- On EOF reduce production expr_comma_list -> expr COMMA expr
-- On END reduce production expr_comma_list -> expr COMMA expr
-- On ELSE reduce production expr_comma_list -> expr COMMA expr
-- On DOWNTO reduce production expr_comma_list -> expr COMMA expr
-- On DO reduce production expr_comma_list -> expr COMMA expr
-- On DEF reduce production expr_comma_list -> expr COMMA expr
-- On COMMA reduce production expr_comma_list -> expr COMMA expr
-- On COLONEQUAL reduce production expr_comma_list -> expr COMMA expr
-- On CLASS reduce production expr_comma_list -> expr COMMA expr
-- On CHAR reduce production expr_comma_list -> expr COMMA expr
-- On BEGIN reduce production expr_comma_list -> expr COMMA expr
-- On BAR reduce production expr_comma_list -> expr COMMA expr
-- On ASSERT reduce production expr_comma_list -> expr COMMA expr
-- On AND reduce production expr_comma_list -> expr COMMA expr

State 693:
## Known stack suffix:
## expr COLONEQUAL
## LR(1) items:
expr -> expr COLONEQUAL . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 694
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 694:
## Known stack suffix:
## expr COLONEQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr COLONEQUAL expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> expr COLONEQUAL expr
-- On WHILE reduce production expr -> expr COLONEQUAL expr
-- On UIDENT reduce production expr -> expr COLONEQUAL expr
-- On TYPE reduce production expr -> expr COLONEQUAL expr
-- On TRY reduce production expr -> expr COLONEQUAL expr
-- On TRUE reduce production expr -> expr COLONEQUAL expr
-- On TO reduce production expr -> expr COLONEQUAL expr
-- On THEN reduce production expr -> expr COLONEQUAL expr
-- On STRING reduce production expr -> expr COLONEQUAL expr
-- On SHARP reduce production expr -> expr COLONEQUAL expr
-- On SEMISEMI reduce production expr -> expr COLONEQUAL expr
-- On SEMI reduce production expr -> expr COLONEQUAL expr
-- On PREFIXOP reduce production expr -> expr COLONEQUAL expr
-- On PARSER reduce production expr -> expr COLONEQUAL expr
-- On OPEN reduce production expr -> expr COLONEQUAL expr
-- On NEW reduce production expr -> expr COLONEQUAL expr
-- On MODULE reduce production expr -> expr COLONEQUAL expr
-- On MINUSGREATER reduce production expr -> expr COLONEQUAL expr
-- On MATCH reduce production expr -> expr COLONEQUAL expr
-- On LPAREN reduce production expr -> expr COLONEQUAL expr
-- On LOC reduce production expr -> expr COLONEQUAL expr
-- On LIDENT reduce production expr -> expr COLONEQUAL expr
-- On LET reduce production expr -> expr COLONEQUAL expr
-- On LBRACKETLESS reduce production expr -> expr COLONEQUAL expr
-- On LBRACKETBAR reduce production expr -> expr COLONEQUAL expr
-- On LBRACKET reduce production expr -> expr COLONEQUAL expr
-- On LBRACELESS reduce production expr -> expr COLONEQUAL expr
-- On LBRACEBAR reduce production expr -> expr COLONEQUAL expr
-- On LBRACE reduce production expr -> expr COLONEQUAL expr
-- On LAZY reduce production expr -> expr COLONEQUAL expr
-- On INT reduce production expr -> expr COLONEQUAL expr
-- On IN reduce production expr -> expr COLONEQUAL expr
-- On IF reduce production expr -> expr COLONEQUAL expr
-- On FUNCTION reduce production expr -> expr COLONEQUAL expr
-- On FUN reduce production expr -> expr COLONEQUAL expr
-- On FOR reduce production expr -> expr COLONEQUAL expr
-- On FLOAT reduce production expr -> expr COLONEQUAL expr
-- On FALSE reduce production expr -> expr COLONEQUAL expr
-- On EXTERNAL reduce production expr -> expr COLONEQUAL expr
-- On EXCEPTION reduce production expr -> expr COLONEQUAL expr
-- On EOF reduce production expr -> expr COLONEQUAL expr
-- On END reduce production expr -> expr COLONEQUAL expr
-- On ELSE reduce production expr -> expr COLONEQUAL expr
-- On DOWNTO reduce production expr -> expr COLONEQUAL expr
-- On DO reduce production expr -> expr COLONEQUAL expr
-- On DEF reduce production expr -> expr COLONEQUAL expr
-- On CLASS reduce production expr -> expr COLONEQUAL expr
-- On CHAR reduce production expr -> expr COLONEQUAL expr
-- On BEGIN reduce production expr -> expr COLONEQUAL expr
-- On BAR reduce production expr -> expr COLONEQUAL expr
-- On ASSERT reduce production expr -> expr COLONEQUAL expr
-- On AND reduce production expr -> expr COLONEQUAL expr

State 695:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On WHILE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On UIDENT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On TYPE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On TRY reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On TRUE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On TO reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On THEN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On STRING reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On SHARP reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On SEMISEMI reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On SEMI reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On PREFIXOP reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On PARSER reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On OPEN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On NEW reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On MODULE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On MINUSGREATER reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On MATCH reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LPAREN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LOC reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LIDENT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LET reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACKET reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACELESS reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACEBAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LBRACE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On LAZY reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On INT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On IN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On IF reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FUNCTION reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FUN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FOR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FLOAT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On FALSE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On EXTERNAL reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On EXCEPTION reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On EOF reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On END reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On ELSE reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On DOWNTO reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On DO reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On DEF reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On CLASS reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On CHAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On BEGIN reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On BAR reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On ASSERT reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-- On AND reduce production expr -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr

State 696:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 697
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 697:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 619
-- On RBRACKET shift to state 698
## Reductions:

State 698:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 699
## Reductions:
-- On WITH reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On WHILE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On UIDENT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On TYPE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On TRY reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On TRUE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On TO reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On THEN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SUBTRACTIVE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On STRING reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On STAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SHARP reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On SEMI reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On PARSER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On OR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On OPEN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On NEW reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On MODULE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On MATCH reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LPAREN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LOC reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LIDENT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LET reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESSLESSGREATERGREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESSLESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESSGREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACKETLESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACKETBAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACKET reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACELESS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACEBAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LBRACE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On LAZY reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP4 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP3 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP2 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP1 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On INFIXOP0 reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On IN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On IF reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On GREATER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FUNCTION reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FUN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FOR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FLOAT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On FALSE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EXTERNAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EQUAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On EOF reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On END reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On ELSE reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On DOWNTO reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On DOT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On DO reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On DEF reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COMMA reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On CLASS reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On CHAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On BEGIN reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On BARBAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On BAR reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On ASSERT reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On AND reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On AMPERSAND reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 699:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS
## LR(1) items:
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 700
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 700:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On WHILE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On UIDENT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On TYPE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On TRY reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On TRUE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On TO reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On THEN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On STRING reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On SHARP reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On SEMISEMI reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On SEMI reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On PREFIXOP reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On PARSER reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On OPEN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On NEW reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On MODULE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On MINUSGREATER reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On MATCH reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LPAREN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LOC reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LIDENT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LET reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACKET reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACELESS reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACEBAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LBRACE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On LAZY reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On INT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On IN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On IF reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FUNCTION reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FUN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FOR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FLOAT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On FALSE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On EXTERNAL reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On EXCEPTION reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On EOF reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On END reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On ELSE reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On DOWNTO reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On DO reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On DEF reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On CLASS reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On CHAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On BEGIN reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On BAR reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On ASSERT reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-- On AND reduce production expr -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr

State 701:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
expr -> simple_expr DOT label_longident . LESSMINUS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 702
## Reductions:
-- On WITH reduce production simple_expr -> simple_expr DOT label_longident
-- On WHILE reduce production simple_expr -> simple_expr DOT label_longident
-- On UIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On TYPE reduce production simple_expr -> simple_expr DOT label_longident
-- On TRY reduce production simple_expr -> simple_expr DOT label_longident
-- On TRUE reduce production simple_expr -> simple_expr DOT label_longident
-- On TO reduce production simple_expr -> simple_expr DOT label_longident
-- On THEN reduce production simple_expr -> simple_expr DOT label_longident
-- On SUBTRACTIVE reduce production simple_expr -> simple_expr DOT label_longident
-- On STRING reduce production simple_expr -> simple_expr DOT label_longident
-- On STAR reduce production simple_expr -> simple_expr DOT label_longident
-- On SHARP reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMISEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On SEMI reduce production simple_expr -> simple_expr DOT label_longident
-- On PREFIXOP reduce production simple_expr -> simple_expr DOT label_longident
-- On PARSER reduce production simple_expr -> simple_expr DOT label_longident
-- On OR reduce production simple_expr -> simple_expr DOT label_longident
-- On OPEN reduce production simple_expr -> simple_expr DOT label_longident
-- On NEW reduce production simple_expr -> simple_expr DOT label_longident
-- On MODULE reduce production simple_expr -> simple_expr DOT label_longident
-- On MINUSGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On MATCH reduce production simple_expr -> simple_expr DOT label_longident
-- On LPAREN reduce production simple_expr -> simple_expr DOT label_longident
-- On LOC reduce production simple_expr -> simple_expr DOT label_longident
-- On LIDENT reduce production simple_expr -> simple_expr DOT label_longident
-- On LET reduce production simple_expr -> simple_expr DOT label_longident
-- On LESSLESSGREATERGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On LESSLESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LESSGREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On LESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKETLESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKETBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACKET reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACELESS reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACEBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On LBRACE reduce production simple_expr -> simple_expr DOT label_longident
-- On LAZY reduce production simple_expr -> simple_expr DOT label_longident
-- On INT reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP4 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP3 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP2 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP1 reduce production simple_expr -> simple_expr DOT label_longident
-- On INFIXOP0 reduce production simple_expr -> simple_expr DOT label_longident
-- On IN reduce production simple_expr -> simple_expr DOT label_longident
-- On IF reduce production simple_expr -> simple_expr DOT label_longident
-- On GREATER reduce production simple_expr -> simple_expr DOT label_longident
-- On FUNCTION reduce production simple_expr -> simple_expr DOT label_longident
-- On FUN reduce production simple_expr -> simple_expr DOT label_longident
-- On FOR reduce production simple_expr -> simple_expr DOT label_longident
-- On FLOAT reduce production simple_expr -> simple_expr DOT label_longident
-- On FALSE reduce production simple_expr -> simple_expr DOT label_longident
-- On EXTERNAL reduce production simple_expr -> simple_expr DOT label_longident
-- On EXCEPTION reduce production simple_expr -> simple_expr DOT label_longident
-- On EQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On EOF reduce production simple_expr -> simple_expr DOT label_longident
-- On END reduce production simple_expr -> simple_expr DOT label_longident
-- On ELSE reduce production simple_expr -> simple_expr DOT label_longident
-- On DOWNTO reduce production simple_expr -> simple_expr DOT label_longident
-- On DOT reduce production simple_expr -> simple_expr DOT label_longident
-- On DO reduce production simple_expr -> simple_expr DOT label_longident
-- On DEF reduce production simple_expr -> simple_expr DOT label_longident
-- On COMMA reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONEQUAL reduce production simple_expr -> simple_expr DOT label_longident
-- On COLONCOLON reduce production simple_expr -> simple_expr DOT label_longident
-- On CLASS reduce production simple_expr -> simple_expr DOT label_longident
-- On CHAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BEGIN reduce production simple_expr -> simple_expr DOT label_longident
-- On BARBAR reduce production simple_expr -> simple_expr DOT label_longident
-- On BAR reduce production simple_expr -> simple_expr DOT label_longident
-- On ASSERT reduce production simple_expr -> simple_expr DOT label_longident
-- On AND reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERSAND reduce production simple_expr -> simple_expr DOT label_longident
-- On AMPERAMPER reduce production simple_expr -> simple_expr DOT label_longident

State 702:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
expr -> simple_expr DOT label_longident LESSMINUS . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 703
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 703:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> simple_expr DOT label_longident LESSMINUS expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On WHILE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On UIDENT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TYPE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TRY reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TRUE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On TO reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On THEN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On STRING reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SHARP reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SEMISEMI reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On SEMI reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On PREFIXOP reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On PARSER reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On OPEN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On NEW reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MODULE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MINUSGREATER reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On MATCH reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LPAREN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LOC reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LIDENT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LET reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACKETLESS reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACKETBAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACKET reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACELESS reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACEBAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LBRACE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On LAZY reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On INT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On IN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On IF reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FUNCTION reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FUN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FOR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FLOAT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On FALSE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EXTERNAL reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EXCEPTION reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On EOF reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On END reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ELSE reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DOWNTO reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DO reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On DEF reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On CLASS reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On CHAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BEGIN reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On BAR reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On ASSERT reduce production expr -> simple_expr DOT label_longident LESSMINUS expr
-- On AND reduce production expr -> simple_expr DOT label_longident LESSMINUS expr

State 704:
## Known stack suffix:
## simple_expr simple_expr_list
## LR(1) items:
expr -> simple_expr simple_expr_list . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list . simple_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On NEW shift to state 9
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 246
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACE shift to state 441
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 705
-- On mod_longident shift to state 378
-- On constr_longident shift to state 622
-- On constant shift to state 623
## Reductions:
-- On WITH reduce production expr -> simple_expr simple_expr_list
-- On WHILE reduce production expr -> simple_expr simple_expr_list
-- On TYPE reduce production expr -> simple_expr simple_expr_list
-- On TRY reduce production expr -> simple_expr simple_expr_list
-- On TO reduce production expr -> simple_expr simple_expr_list
-- On THEN reduce production expr -> simple_expr simple_expr_list
-- On SUBTRACTIVE reduce production expr -> simple_expr simple_expr_list
-- On STAR reduce production expr -> simple_expr simple_expr_list
-- On SHARP reduce production expr -> simple_expr simple_expr_list
-- On SEMISEMI reduce production expr -> simple_expr simple_expr_list
-- On SEMI reduce production expr -> simple_expr simple_expr_list
-- On PARSER reduce production expr -> simple_expr simple_expr_list
-- On OR reduce production expr -> simple_expr simple_expr_list
-- On OPEN reduce production expr -> simple_expr simple_expr_list
-- On MODULE reduce production expr -> simple_expr simple_expr_list
-- On MINUSGREATER reduce production expr -> simple_expr simple_expr_list
-- On MATCH reduce production expr -> simple_expr simple_expr_list
-- On LET reduce production expr -> simple_expr simple_expr_list
-- On LESSGREATER reduce production expr -> simple_expr simple_expr_list
-- On LESS reduce production expr -> simple_expr simple_expr_list
-- On LBRACEBAR reduce production expr -> simple_expr simple_expr_list
-- On LAZY reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP4 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP3 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP2 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP1 reduce production expr -> simple_expr simple_expr_list
-- On INFIXOP0 reduce production expr -> simple_expr simple_expr_list
-- On IN reduce production expr -> simple_expr simple_expr_list
-- On IF reduce production expr -> simple_expr simple_expr_list
-- On GREATER reduce production expr -> simple_expr simple_expr_list
-- On FUNCTION reduce production expr -> simple_expr simple_expr_list
-- On FUN reduce production expr -> simple_expr simple_expr_list
-- On FOR reduce production expr -> simple_expr simple_expr_list
-- On EXTERNAL reduce production expr -> simple_expr simple_expr_list
-- On EXCEPTION reduce production expr -> simple_expr simple_expr_list
-- On EQUAL reduce production expr -> simple_expr simple_expr_list
-- On EOF reduce production expr -> simple_expr simple_expr_list
-- On END reduce production expr -> simple_expr simple_expr_list
-- On ELSE reduce production expr -> simple_expr simple_expr_list
-- On DOWNTO reduce production expr -> simple_expr simple_expr_list
-- On DO reduce production expr -> simple_expr simple_expr_list
-- On DEF reduce production expr -> simple_expr simple_expr_list
-- On COMMA reduce production expr -> simple_expr simple_expr_list
-- On COLONEQUAL reduce production expr -> simple_expr simple_expr_list
-- On COLONCOLON reduce production expr -> simple_expr simple_expr_list
-- On CLASS reduce production expr -> simple_expr simple_expr_list
-- On BARBAR reduce production expr -> simple_expr simple_expr_list
-- On BAR reduce production expr -> simple_expr simple_expr_list
-- On ASSERT reduce production expr -> simple_expr simple_expr_list
-- On AND reduce production expr -> simple_expr simple_expr_list
-- On AMPERSAND reduce production expr -> simple_expr simple_expr_list
-- On AMPERAMPER reduce production expr -> simple_expr simple_expr_list

State 705:
## Known stack suffix:
## simple_expr_list simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list simple_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 610
-- On DOT shift to state 612
## Reductions:
-- On WITH reduce production simple_expr_list -> simple_expr_list simple_expr
-- On WHILE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TYPE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TRY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TRUE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On TO reduce production simple_expr_list -> simple_expr_list simple_expr
-- On THEN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SUBTRACTIVE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr_list simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SEMISEMI reduce production simple_expr_list -> simple_expr_list simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr_list simple_expr
-- On PARSER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On OR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On OPEN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On NEW reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MODULE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MINUSGREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On MATCH reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LOC reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LESSGREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LESS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKETLESS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKETBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACKET reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACELESS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACEBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On LAZY reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP4 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP3 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP2 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP1 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On INFIXOP0 reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On IF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On GREATER reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FUNCTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FUN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FOR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On FALSE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EXTERNAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EXCEPTION reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EQUAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On EOF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On END reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DOWNTO reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DO reduce production simple_expr_list -> simple_expr_list simple_expr
-- On DEF reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr_list simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr_list simple_expr
-- On CLASS reduce production simple_expr_list -> simple_expr_list simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr_list simple_expr
-- On ASSERT reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AND reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AMPERSAND reduce production simple_expr_list -> simple_expr_list simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr_list simple_expr

State 706:
## Known stack suffix:
## simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 610
-- On DOT shift to state 612
## Reductions:
-- On WITH reduce production simple_expr_list -> simple_expr
-- On WHILE reduce production simple_expr_list -> simple_expr
-- On UIDENT reduce production simple_expr_list -> simple_expr
-- On TYPE reduce production simple_expr_list -> simple_expr
-- On TRY reduce production simple_expr_list -> simple_expr
-- On TRUE reduce production simple_expr_list -> simple_expr
-- On TO reduce production simple_expr_list -> simple_expr
-- On THEN reduce production simple_expr_list -> simple_expr
-- On SUBTRACTIVE reduce production simple_expr_list -> simple_expr
-- On STRING reduce production simple_expr_list -> simple_expr
-- On STAR reduce production simple_expr_list -> simple_expr
-- On SEMISEMI reduce production simple_expr_list -> simple_expr
-- On SEMI reduce production simple_expr_list -> simple_expr
-- On PREFIXOP reduce production simple_expr_list -> simple_expr
-- On PARSER reduce production simple_expr_list -> simple_expr
-- On OR reduce production simple_expr_list -> simple_expr
-- On OPEN reduce production simple_expr_list -> simple_expr
-- On NEW reduce production simple_expr_list -> simple_expr
-- On MODULE reduce production simple_expr_list -> simple_expr
-- On MINUSGREATER reduce production simple_expr_list -> simple_expr
-- On MATCH reduce production simple_expr_list -> simple_expr
-- On LPAREN reduce production simple_expr_list -> simple_expr
-- On LOC reduce production simple_expr_list -> simple_expr
-- On LIDENT reduce production simple_expr_list -> simple_expr
-- On LET reduce production simple_expr_list -> simple_expr
-- On LESSGREATER reduce production simple_expr_list -> simple_expr
-- On LESS reduce production simple_expr_list -> simple_expr
-- On LBRACKETLESS reduce production simple_expr_list -> simple_expr
-- On LBRACKETBAR reduce production simple_expr_list -> simple_expr
-- On LBRACKET reduce production simple_expr_list -> simple_expr
-- On LBRACELESS reduce production simple_expr_list -> simple_expr
-- On LBRACEBAR reduce production simple_expr_list -> simple_expr
-- On LBRACE reduce production simple_expr_list -> simple_expr
-- On LAZY reduce production simple_expr_list -> simple_expr
-- On INT reduce production simple_expr_list -> simple_expr
-- On INFIXOP4 reduce production simple_expr_list -> simple_expr
-- On INFIXOP3 reduce production simple_expr_list -> simple_expr
-- On INFIXOP2 reduce production simple_expr_list -> simple_expr
-- On INFIXOP1 reduce production simple_expr_list -> simple_expr
-- On INFIXOP0 reduce production simple_expr_list -> simple_expr
-- On IN reduce production simple_expr_list -> simple_expr
-- On IF reduce production simple_expr_list -> simple_expr
-- On GREATER reduce production simple_expr_list -> simple_expr
-- On FUNCTION reduce production simple_expr_list -> simple_expr
-- On FUN reduce production simple_expr_list -> simple_expr
-- On FOR reduce production simple_expr_list -> simple_expr
-- On FLOAT reduce production simple_expr_list -> simple_expr
-- On FALSE reduce production simple_expr_list -> simple_expr
-- On EXTERNAL reduce production simple_expr_list -> simple_expr
-- On EXCEPTION reduce production simple_expr_list -> simple_expr
-- On EQUAL reduce production simple_expr_list -> simple_expr
-- On EOF reduce production simple_expr_list -> simple_expr
-- On END reduce production simple_expr_list -> simple_expr
-- On ELSE reduce production simple_expr_list -> simple_expr
-- On DOWNTO reduce production simple_expr_list -> simple_expr
-- On DO reduce production simple_expr_list -> simple_expr
-- On DEF reduce production simple_expr_list -> simple_expr
-- On COMMA reduce production simple_expr_list -> simple_expr
-- On COLONEQUAL reduce production simple_expr_list -> simple_expr
-- On COLONCOLON reduce production simple_expr_list -> simple_expr
-- On CLASS reduce production simple_expr_list -> simple_expr
-- On CHAR reduce production simple_expr_list -> simple_expr
-- On BEGIN reduce production simple_expr_list -> simple_expr
-- On BARBAR reduce production simple_expr_list -> simple_expr
-- On BAR reduce production simple_expr_list -> simple_expr
-- On ASSERT reduce production simple_expr_list -> simple_expr
-- On AND reduce production simple_expr_list -> simple_expr
-- On AMPERSAND reduce production simple_expr_list -> simple_expr
-- On AMPERAMPER reduce production simple_expr_list -> simple_expr

State 707:
## Known stack suffix:
## DEF def_bindings IN seq_expr
## LR(1) items:
expr -> DEF def_bindings IN seq_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> DEF def_bindings IN seq_expr

State 708:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On SEMI shift to state 709
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production seq_expr -> expr
-- On WHILE reduce production seq_expr -> expr
-- On UIDENT reduce production seq_expr -> expr
-- On TYPE reduce production seq_expr -> expr
-- On TRY reduce production seq_expr -> expr
-- On TRUE reduce production seq_expr -> expr
-- On TO reduce production seq_expr -> expr
-- On THEN reduce production seq_expr -> expr
-- On STRING reduce production seq_expr -> expr
-- On SHARP reduce production seq_expr -> expr
-- On SEMISEMI reduce production seq_expr -> expr
-- On PREFIXOP reduce production seq_expr -> expr
-- On PARSER reduce production seq_expr -> expr
-- On OPEN reduce production seq_expr -> expr
-- On NEW reduce production seq_expr -> expr
-- On MODULE reduce production seq_expr -> expr
-- On MINUSGREATER reduce production seq_expr -> expr
-- On MATCH reduce production seq_expr -> expr
-- On LPAREN reduce production seq_expr -> expr
-- On LOC reduce production seq_expr -> expr
-- On LIDENT reduce production seq_expr -> expr
-- On LET reduce production seq_expr -> expr
-- On LBRACKETLESS reduce production seq_expr -> expr
-- On LBRACKETBAR reduce production seq_expr -> expr
-- On LBRACKET reduce production seq_expr -> expr
-- On LBRACELESS reduce production seq_expr -> expr
-- On LBRACEBAR reduce production seq_expr -> expr
-- On LBRACE reduce production seq_expr -> expr
-- On LAZY reduce production seq_expr -> expr
-- On INT reduce production seq_expr -> expr
-- On IN reduce production seq_expr -> expr
-- On IF reduce production seq_expr -> expr
-- On FUNCTION reduce production seq_expr -> expr
-- On FUN reduce production seq_expr -> expr
-- On FOR reduce production seq_expr -> expr
-- On FLOAT reduce production seq_expr -> expr
-- On FALSE reduce production seq_expr -> expr
-- On EXTERNAL reduce production seq_expr -> expr
-- On EXCEPTION reduce production seq_expr -> expr
-- On EOF reduce production seq_expr -> expr
-- On END reduce production seq_expr -> expr
-- On ELSE reduce production seq_expr -> expr
-- On DOWNTO reduce production seq_expr -> expr
-- On DO reduce production seq_expr -> expr
-- On DEF reduce production seq_expr -> expr
-- On CLASS reduce production seq_expr -> expr
-- On CHAR reduce production seq_expr -> expr
-- On BEGIN reduce production seq_expr -> expr
-- On BAR reduce production seq_expr -> expr
-- On ASSERT reduce production seq_expr -> expr
-- On AND reduce production seq_expr -> expr

State 709:
## Known stack suffix:
## expr SEMI
## LR(1) items:
seq_expr -> expr SEMI . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
seq_expr -> expr SEMI . seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 710
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On WITH reduce production seq_expr -> expr SEMI
-- On TYPE reduce production seq_expr -> expr SEMI
-- On TO reduce production seq_expr -> expr SEMI
-- On THEN reduce production seq_expr -> expr SEMI
-- On STAR reduce production seq_expr -> expr SEMI
-- On SHARP reduce production seq_expr -> expr SEMI
-- On SEMISEMI reduce production seq_expr -> expr SEMI
-- On SEMI reduce production seq_expr -> expr SEMI
-- On OR reduce production seq_expr -> expr SEMI
-- On OPEN reduce production seq_expr -> expr SEMI
-- On MODULE reduce production seq_expr -> expr SEMI
-- On MINUSGREATER reduce production seq_expr -> expr SEMI
-- On LESSGREATER reduce production seq_expr -> expr SEMI
-- On LESS reduce production seq_expr -> expr SEMI
-- On INFIXOP4 reduce production seq_expr -> expr SEMI
-- On INFIXOP3 reduce production seq_expr -> expr SEMI
-- On INFIXOP2 reduce production seq_expr -> expr SEMI
-- On INFIXOP1 reduce production seq_expr -> expr SEMI
-- On INFIXOP0 reduce production seq_expr -> expr SEMI
-- On IN reduce production seq_expr -> expr SEMI
-- On GREATER reduce production seq_expr -> expr SEMI
-- On EXTERNAL reduce production seq_expr -> expr SEMI
-- On EXCEPTION reduce production seq_expr -> expr SEMI
-- On EQUAL reduce production seq_expr -> expr SEMI
-- On EOF reduce production seq_expr -> expr SEMI
-- On END reduce production seq_expr -> expr SEMI
-- On ELSE reduce production seq_expr -> expr SEMI
-- On DOWNTO reduce production seq_expr -> expr SEMI
-- On DO reduce production seq_expr -> expr SEMI
-- On COMMA reduce production seq_expr -> expr SEMI
-- On COLONEQUAL reduce production seq_expr -> expr SEMI
-- On COLONCOLON reduce production seq_expr -> expr SEMI
-- On CLASS reduce production seq_expr -> expr SEMI
-- On BARBAR reduce production seq_expr -> expr SEMI
-- On BAR reduce production seq_expr -> expr SEMI
-- On AND reduce production seq_expr -> expr SEMI
-- On AMPERSAND reduce production seq_expr -> expr SEMI
-- On AMPERAMPER reduce production seq_expr -> expr SEMI

State 710:
## Known stack suffix:
## expr SEMI seq_expr
## LR(1) items:
seq_expr -> expr SEMI seq_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production seq_expr -> expr SEMI seq_expr

State 711:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On TO shift to state 712
-- On DOWNTO shift to state 713
-- On direction_flag shift to state 714
## Reductions:

State 712:
## Known stack suffix:
## TO
## LR(1) items:
direction_flag -> TO . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE DEF CHAR BEGIN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direction_flag -> TO

State 713:
## Known stack suffix:
## DOWNTO
## LR(1) items:
direction_flag -> DOWNTO . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE DEF CHAR BEGIN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direction_flag -> DOWNTO

State 714:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 715
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 715:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 716
## Reductions:

State 716:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 717
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 717:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 718
-- On DONE shift to state 719
## Reductions:

State 718:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error

State 719:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE

State 720:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> MINUSGREATER seq_expr

State 721:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_def -> simple_pattern . fun_def [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 628
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On MINUSGREATER shift to state 631
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 721
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On match_action shift to state 722
-- On fun_def shift to state 723
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 722:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> match_action

State 723:
## Known stack suffix:
## simple_pattern fun_def
## LR(1) items:
fun_def -> simple_pattern fun_def . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> simple_pattern fun_def

State 724:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_pattern -> constr_longident . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern -> constr_longident

State 725:
## Known stack suffix:
## FUN simple_pattern fun_def
## LR(1) items:
expr -> FUN simple_pattern fun_def . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FUN simple_pattern fun_def

State 726:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
match_action -> WHEN seq_expr . MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 727
## Reductions:

State 727:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER . seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 728
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 728:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER seq_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> WHEN seq_expr MINUSGREATER seq_expr

State 729:
## Known stack suffix:
## pattern match_action
## LR(1) items:
match_cases -> pattern match_action . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> pattern match_action

State 730:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
expr -> FUNCTION opt_bar match_cases . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 731
## Reductions:
-- On WITH reduce production expr -> FUNCTION opt_bar match_cases
-- On WHILE reduce production expr -> FUNCTION opt_bar match_cases
-- On UIDENT reduce production expr -> FUNCTION opt_bar match_cases
-- On TYPE reduce production expr -> FUNCTION opt_bar match_cases
-- On TRY reduce production expr -> FUNCTION opt_bar match_cases
-- On TRUE reduce production expr -> FUNCTION opt_bar match_cases
-- On TO reduce production expr -> FUNCTION opt_bar match_cases
-- On THEN reduce production expr -> FUNCTION opt_bar match_cases
-- On SUBTRACTIVE reduce production expr -> FUNCTION opt_bar match_cases
-- On STRING reduce production expr -> FUNCTION opt_bar match_cases
-- On STAR reduce production expr -> FUNCTION opt_bar match_cases
-- On SHARP reduce production expr -> FUNCTION opt_bar match_cases
-- On SEMISEMI reduce production expr -> FUNCTION opt_bar match_cases
-- On SEMI reduce production expr -> FUNCTION opt_bar match_cases
-- On PREFIXOP reduce production expr -> FUNCTION opt_bar match_cases
-- On PARSER reduce production expr -> FUNCTION opt_bar match_cases
-- On OR reduce production expr -> FUNCTION opt_bar match_cases
-- On OPEN reduce production expr -> FUNCTION opt_bar match_cases
-- On NEW reduce production expr -> FUNCTION opt_bar match_cases
-- On MODULE reduce production expr -> FUNCTION opt_bar match_cases
-- On MINUSGREATER reduce production expr -> FUNCTION opt_bar match_cases
-- On MATCH reduce production expr -> FUNCTION opt_bar match_cases
-- On LPAREN reduce production expr -> FUNCTION opt_bar match_cases
-- On LOC reduce production expr -> FUNCTION opt_bar match_cases
-- On LIDENT reduce production expr -> FUNCTION opt_bar match_cases
-- On LET reduce production expr -> FUNCTION opt_bar match_cases
-- On LESSGREATER reduce production expr -> FUNCTION opt_bar match_cases
-- On LESS reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACKETLESS reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACKETBAR reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACKET reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACELESS reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACEBAR reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACE reduce production expr -> FUNCTION opt_bar match_cases
-- On LAZY reduce production expr -> FUNCTION opt_bar match_cases
-- On INT reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP4 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP3 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP2 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP1 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP0 reduce production expr -> FUNCTION opt_bar match_cases
-- On IN reduce production expr -> FUNCTION opt_bar match_cases
-- On IF reduce production expr -> FUNCTION opt_bar match_cases
-- On GREATER reduce production expr -> FUNCTION opt_bar match_cases
-- On FUNCTION reduce production expr -> FUNCTION opt_bar match_cases
-- On FUN reduce production expr -> FUNCTION opt_bar match_cases
-- On FOR reduce production expr -> FUNCTION opt_bar match_cases
-- On FLOAT reduce production expr -> FUNCTION opt_bar match_cases
-- On FALSE reduce production expr -> FUNCTION opt_bar match_cases
-- On EXTERNAL reduce production expr -> FUNCTION opt_bar match_cases
-- On EXCEPTION reduce production expr -> FUNCTION opt_bar match_cases
-- On EQUAL reduce production expr -> FUNCTION opt_bar match_cases
-- On EOF reduce production expr -> FUNCTION opt_bar match_cases
-- On END reduce production expr -> FUNCTION opt_bar match_cases
-- On ELSE reduce production expr -> FUNCTION opt_bar match_cases
-- On DOWNTO reduce production expr -> FUNCTION opt_bar match_cases
-- On DO reduce production expr -> FUNCTION opt_bar match_cases
-- On DEF reduce production expr -> FUNCTION opt_bar match_cases
-- On COMMA reduce production expr -> FUNCTION opt_bar match_cases
-- On COLONEQUAL reduce production expr -> FUNCTION opt_bar match_cases
-- On COLONCOLON reduce production expr -> FUNCTION opt_bar match_cases
-- On CLASS reduce production expr -> FUNCTION opt_bar match_cases
-- On CHAR reduce production expr -> FUNCTION opt_bar match_cases
-- On BEGIN reduce production expr -> FUNCTION opt_bar match_cases
-- On BARBAR reduce production expr -> FUNCTION opt_bar match_cases
-- On ASSERT reduce production expr -> FUNCTION opt_bar match_cases
-- On AND reduce production expr -> FUNCTION opt_bar match_cases
-- On AMPERSAND reduce production expr -> FUNCTION opt_bar match_cases
-- On AMPERAMPER reduce production expr -> FUNCTION opt_bar match_cases

State 731:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern match_action [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 732
-- On mod_longident shift to state 303
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 732:
## Known stack suffix:
## match_cases BAR pattern
## LR(1) items:
match_cases -> match_cases BAR pattern . match_action [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 628
-- On MINUSGREATER shift to state 631
-- On COMMA shift to state 455
-- On COLONCOLON shift to state 301
-- On BAR shift to state 457
-- On AS shift to state 459
-- On match_action shift to state 733
## Reductions:

State 733:
## Known stack suffix:
## match_cases BAR pattern match_action
## LR(1) items:
match_cases -> match_cases BAR pattern match_action . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> match_cases BAR pattern match_action

State 734:
## Known stack suffix:
## IF seq_expr
## LR(1) items:
expr -> IF seq_expr . THEN expr ELSE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr . THEN expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On THEN shift to state 735
## Reductions:

State 735:
## Known stack suffix:
## IF seq_expr THEN
## LR(1) items:
expr -> IF seq_expr THEN . expr ELSE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 736
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 736:
## Known stack suffix:
## IF seq_expr THEN expr
## LR(1) items:
expr -> IF seq_expr THEN expr . ELSE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On ELSE shift to state 737
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> IF seq_expr THEN expr
-- On WHILE reduce production expr -> IF seq_expr THEN expr
-- On UIDENT reduce production expr -> IF seq_expr THEN expr
-- On TYPE reduce production expr -> IF seq_expr THEN expr
-- On TRY reduce production expr -> IF seq_expr THEN expr
-- On TRUE reduce production expr -> IF seq_expr THEN expr
-- On TO reduce production expr -> IF seq_expr THEN expr
-- On THEN reduce production expr -> IF seq_expr THEN expr
-- On STRING reduce production expr -> IF seq_expr THEN expr
-- On SHARP reduce production expr -> IF seq_expr THEN expr
-- On SEMISEMI reduce production expr -> IF seq_expr THEN expr
-- On SEMI reduce production expr -> IF seq_expr THEN expr
-- On PREFIXOP reduce production expr -> IF seq_expr THEN expr
-- On PARSER reduce production expr -> IF seq_expr THEN expr
-- On OPEN reduce production expr -> IF seq_expr THEN expr
-- On NEW reduce production expr -> IF seq_expr THEN expr
-- On MODULE reduce production expr -> IF seq_expr THEN expr
-- On MINUSGREATER reduce production expr -> IF seq_expr THEN expr
-- On MATCH reduce production expr -> IF seq_expr THEN expr
-- On LPAREN reduce production expr -> IF seq_expr THEN expr
-- On LOC reduce production expr -> IF seq_expr THEN expr
-- On LIDENT reduce production expr -> IF seq_expr THEN expr
-- On LET reduce production expr -> IF seq_expr THEN expr
-- On LBRACKETLESS reduce production expr -> IF seq_expr THEN expr
-- On LBRACKETBAR reduce production expr -> IF seq_expr THEN expr
-- On LBRACKET reduce production expr -> IF seq_expr THEN expr
-- On LBRACELESS reduce production expr -> IF seq_expr THEN expr
-- On LBRACEBAR reduce production expr -> IF seq_expr THEN expr
-- On LBRACE reduce production expr -> IF seq_expr THEN expr
-- On LAZY reduce production expr -> IF seq_expr THEN expr
-- On INT reduce production expr -> IF seq_expr THEN expr
-- On IN reduce production expr -> IF seq_expr THEN expr
-- On IF reduce production expr -> IF seq_expr THEN expr
-- On FUNCTION reduce production expr -> IF seq_expr THEN expr
-- On FUN reduce production expr -> IF seq_expr THEN expr
-- On FOR reduce production expr -> IF seq_expr THEN expr
-- On FLOAT reduce production expr -> IF seq_expr THEN expr
-- On FALSE reduce production expr -> IF seq_expr THEN expr
-- On EXTERNAL reduce production expr -> IF seq_expr THEN expr
-- On EXCEPTION reduce production expr -> IF seq_expr THEN expr
-- On EOF reduce production expr -> IF seq_expr THEN expr
-- On END reduce production expr -> IF seq_expr THEN expr
-- On DOWNTO reduce production expr -> IF seq_expr THEN expr
-- On DO reduce production expr -> IF seq_expr THEN expr
-- On DEF reduce production expr -> IF seq_expr THEN expr
-- On CLASS reduce production expr -> IF seq_expr THEN expr
-- On CHAR reduce production expr -> IF seq_expr THEN expr
-- On BEGIN reduce production expr -> IF seq_expr THEN expr
-- On BAR reduce production expr -> IF seq_expr THEN expr
-- On ASSERT reduce production expr -> IF seq_expr THEN expr
-- On AND reduce production expr -> IF seq_expr THEN expr

State 737:
## Known stack suffix:
## IF seq_expr THEN expr ELSE
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE . expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 738
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 738:
## Known stack suffix:
## IF seq_expr THEN expr ELSE expr
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:
-- On WITH reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On WHILE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On UIDENT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On TYPE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On TRY reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On TRUE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On TO reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On THEN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On STRING reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On SHARP reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On SEMISEMI reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On SEMI reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On PREFIXOP reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On PARSER reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On OPEN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On NEW reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On MODULE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On MINUSGREATER reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On MATCH reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LPAREN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LOC reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LIDENT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LET reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACKETLESS reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACKETBAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACKET reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACELESS reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACEBAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LAZY reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On INT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On IN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On IF reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FUNCTION reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FUN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FOR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FLOAT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FALSE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On EXTERNAL reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On EXCEPTION reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On EOF reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On END reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On ELSE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On DOWNTO reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On DO reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On DEF reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On CLASS reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On CHAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On BEGIN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On BAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On ASSERT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On AND reduce production expr -> IF seq_expr THEN expr ELSE expr

State 739:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
process -> IF expr . THEN process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
process0 -> IF expr . THEN process0 ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On THEN shift to state 740
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:

State 740:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process -> IF expr THEN . process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
process0 -> IF expr THEN . process0 ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 741
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 747
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 741:
## Known stack suffix:
## IF
## LR(1) items:
process0 -> IF . expr THEN process0 ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 742
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 742:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
process0 -> IF expr . THEN process0 ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On THEN shift to state 743
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:

State 743:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process0 -> IF expr THEN . process0 ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 741
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 744
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 744:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process0 -> IF expr THEN process0 . ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On ELSE shift to state 745
## Reductions:

State 745:
## Known stack suffix:
## IF expr THEN process0 ELSE
## LR(1) items:
process0 -> IF expr THEN process0 ELSE . process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 741
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 746
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 746:
## Known stack suffix:
## IF expr THEN process0 ELSE process0
## LR(1) items:
process0 -> IF expr THEN process0 ELSE process0 . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> IF expr THEN process0 ELSE process0

State 747:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process -> IF expr THEN process0 . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
process0 -> IF expr THEN process0 . ELSE process0 [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On ELSE shift to state 745
## Reductions:
-- On WHILE reduce production process -> IF expr THEN process0
-- On UIDENT reduce production process -> IF expr THEN process0
-- On TYPE reduce production process -> IF expr THEN process0
-- On TRY reduce production process -> IF expr THEN process0
-- On TRUE reduce production process -> IF expr THEN process0
-- On SUBTRACTIVE reduce production process -> IF expr THEN process0
-- On STRING reduce production process -> IF expr THEN process0
-- On SHARP reduce production process -> IF expr THEN process0
-- On SEMISEMI reduce production process -> IF expr THEN process0
-- On PREFIXOP reduce production process -> IF expr THEN process0
-- On PARSER reduce production process -> IF expr THEN process0
-- On OPEN reduce production process -> IF expr THEN process0
-- On NEW reduce production process -> IF expr THEN process0
-- On MODULE reduce production process -> IF expr THEN process0
-- On MATCH reduce production process -> IF expr THEN process0
-- On LPAREN reduce production process -> IF expr THEN process0
-- On LOC reduce production process -> IF expr THEN process0
-- On LIDENT reduce production process -> IF expr THEN process0
-- On LET reduce production process -> IF expr THEN process0
-- On LBRACKETLESS reduce production process -> IF expr THEN process0
-- On LBRACKETBAR reduce production process -> IF expr THEN process0
-- On LBRACKET reduce production process -> IF expr THEN process0
-- On LBRACELESS reduce production process -> IF expr THEN process0
-- On LBRACEBAR reduce production process -> IF expr THEN process0
-- On LBRACE reduce production process -> IF expr THEN process0
-- On LAZY reduce production process -> IF expr THEN process0
-- On INT reduce production process -> IF expr THEN process0
-- On IN reduce production process -> IF expr THEN process0
-- On IF reduce production process -> IF expr THEN process0
-- On FUNCTION reduce production process -> IF expr THEN process0
-- On FUN reduce production process -> IF expr THEN process0
-- On FOR reduce production process -> IF expr THEN process0
-- On FLOAT reduce production process -> IF expr THEN process0
-- On FALSE reduce production process -> IF expr THEN process0
-- On EXTERNAL reduce production process -> IF expr THEN process0
-- On EXCEPTION reduce production process -> IF expr THEN process0
-- On EOF reduce production process -> IF expr THEN process0
-- On END reduce production process -> IF expr THEN process0
-- On DEF reduce production process -> IF expr THEN process0
-- On CLASS reduce production process -> IF expr THEN process0
-- On CHAR reduce production process -> IF expr THEN process0
-- On BEGIN reduce production process -> IF expr THEN process0
-- On BARRBRACE reduce production process -> IF expr THEN process0
-- On ASSERT reduce production process -> IF expr THEN process0
-- On AND reduce production process -> IF expr THEN process0

State 748:
## Known stack suffix:
## LBRACEBAR process
## LR(1) items:
process0 -> LBRACEBAR process . BARRBRACE [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
-- On BARRBRACE shift to state 749
## Reductions:

State 749:
## Known stack suffix:
## LBRACEBAR process BARRBRACE
## LR(1) items:
process0 -> LBRACEBAR process BARRBRACE . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DEF CLASS CHAR BEGIN BARRBRACE BAR ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> LBRACEBAR process BARRBRACE

State 750:
## Known stack suffix:
## LBRACEBAR process
## LR(1) items:
expr -> LBRACEBAR process . BARRBRACE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BARRBRACE shift to state 751
## Reductions:

State 751:
## Known stack suffix:
## LBRACEBAR process BARRBRACE
## LR(1) items:
expr -> LBRACEBAR process BARRBRACE . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACEBAR process BARRBRACE

State 752:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On TO shift to state 712
-- On DOWNTO shift to state 713
-- On direction_flag shift to state 753
## Reductions:

State 753:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 754
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 754:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 755
## Reductions:

State 755:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 756
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 756:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 757
-- On DONE shift to state 758
## Reductions:

State 757:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error

State 758:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
## LR(1) items:
expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE

State 759:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> MINUSGREATER seq_expr

State 760:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_def -> simple_pattern . fun_def [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 422
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On MINUSGREATER shift to state 433
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 760
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On match_action shift to state 761
-- On fun_def shift to state 762
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 761:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> match_action

State 762:
## Known stack suffix:
## simple_pattern fun_def
## LR(1) items:
fun_def -> simple_pattern fun_def . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_def -> simple_pattern fun_def

State 763:
## Known stack suffix:
## FUN simple_pattern fun_def
## LR(1) items:
expr -> FUN simple_pattern fun_def . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FUN simple_pattern fun_def

State 764:
## Known stack suffix:
## label EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
label_expr_list -> label EQUAL expr . [ error SEMI GREATERRBRACE ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production label_expr_list -> label EQUAL expr
-- On SEMI reduce production label_expr_list -> label EQUAL expr
-- On GREATERRBRACE reduce production label_expr_list -> label EQUAL expr

State 765:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
match_action -> WHEN seq_expr . MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 766
## Reductions:

State 766:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER . seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 767
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 767:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER seq_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_action -> WHEN seq_expr MINUSGREATER seq_expr

State 768:
## Known stack suffix:
## pattern match_action
## LR(1) items:
match_cases -> pattern match_action . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> pattern match_action

State 769:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
expr -> FUNCTION opt_bar match_cases . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 770
## Reductions:
-- On error reduce production expr -> FUNCTION opt_bar match_cases
-- On WITH reduce production expr -> FUNCTION opt_bar match_cases
-- On WHILE reduce production expr -> FUNCTION opt_bar match_cases
-- On VIRTUAL reduce production expr -> FUNCTION opt_bar match_cases
-- On VAL reduce production expr -> FUNCTION opt_bar match_cases
-- On UIDENT reduce production expr -> FUNCTION opt_bar match_cases
-- On TYPE reduce production expr -> FUNCTION opt_bar match_cases
-- On TRY reduce production expr -> FUNCTION opt_bar match_cases
-- On TRUE reduce production expr -> FUNCTION opt_bar match_cases
-- On SUBTRACTIVE reduce production expr -> FUNCTION opt_bar match_cases
-- On STRING reduce production expr -> FUNCTION opt_bar match_cases
-- On STAR reduce production expr -> FUNCTION opt_bar match_cases
-- On SHARP reduce production expr -> FUNCTION opt_bar match_cases
-- On SEMISEMI reduce production expr -> FUNCTION opt_bar match_cases
-- On SEMI reduce production expr -> FUNCTION opt_bar match_cases
-- On RPAREN reduce production expr -> FUNCTION opt_bar match_cases
-- On RBRACKET reduce production expr -> FUNCTION opt_bar match_cases
-- On RBRACE reduce production expr -> FUNCTION opt_bar match_cases
-- On QUESTION reduce production expr -> FUNCTION opt_bar match_cases
-- On PREFIXOP reduce production expr -> FUNCTION opt_bar match_cases
-- On PARSER reduce production expr -> FUNCTION opt_bar match_cases
-- On OR reduce production expr -> FUNCTION opt_bar match_cases
-- On OPEN reduce production expr -> FUNCTION opt_bar match_cases
-- On NEW reduce production expr -> FUNCTION opt_bar match_cases
-- On MODULE reduce production expr -> FUNCTION opt_bar match_cases
-- On METHOD reduce production expr -> FUNCTION opt_bar match_cases
-- On MATCH reduce production expr -> FUNCTION opt_bar match_cases
-- On LPAREN reduce production expr -> FUNCTION opt_bar match_cases
-- On LOC reduce production expr -> FUNCTION opt_bar match_cases
-- On LIDENT reduce production expr -> FUNCTION opt_bar match_cases
-- On LET reduce production expr -> FUNCTION opt_bar match_cases
-- On LESSGREATER reduce production expr -> FUNCTION opt_bar match_cases
-- On LESS reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACKETLESS reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACKETBAR reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACKET reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACELESS reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACEBAR reduce production expr -> FUNCTION opt_bar match_cases
-- On LBRACE reduce production expr -> FUNCTION opt_bar match_cases
-- On LAZY reduce production expr -> FUNCTION opt_bar match_cases
-- On INT reduce production expr -> FUNCTION opt_bar match_cases
-- On INHERIT reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP4 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP3 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP2 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP1 reduce production expr -> FUNCTION opt_bar match_cases
-- On INFIXOP0 reduce production expr -> FUNCTION opt_bar match_cases
-- On IN reduce production expr -> FUNCTION opt_bar match_cases
-- On IF reduce production expr -> FUNCTION opt_bar match_cases
-- On GREATERRBRACKET reduce production expr -> FUNCTION opt_bar match_cases
-- On GREATERRBRACE reduce production expr -> FUNCTION opt_bar match_cases
-- On GREATERGREATER reduce production expr -> FUNCTION opt_bar match_cases
-- On GREATER reduce production expr -> FUNCTION opt_bar match_cases
-- On FUNCTION reduce production expr -> FUNCTION opt_bar match_cases
-- On FUN reduce production expr -> FUNCTION opt_bar match_cases
-- On FOR reduce production expr -> FUNCTION opt_bar match_cases
-- On FLOAT reduce production expr -> FUNCTION opt_bar match_cases
-- On FALSE reduce production expr -> FUNCTION opt_bar match_cases
-- On EXTERNAL reduce production expr -> FUNCTION opt_bar match_cases
-- On EXCEPTION reduce production expr -> FUNCTION opt_bar match_cases
-- On EQUAL reduce production expr -> FUNCTION opt_bar match_cases
-- On EOF reduce production expr -> FUNCTION opt_bar match_cases
-- On END reduce production expr -> FUNCTION opt_bar match_cases
-- On ELSE reduce production expr -> FUNCTION opt_bar match_cases
-- On DONE reduce production expr -> FUNCTION opt_bar match_cases
-- On DEF reduce production expr -> FUNCTION opt_bar match_cases
-- On COMMA reduce production expr -> FUNCTION opt_bar match_cases
-- On COLONGREATER reduce production expr -> FUNCTION opt_bar match_cases
-- On COLONEQUAL reduce production expr -> FUNCTION opt_bar match_cases
-- On COLONCOLON reduce production expr -> FUNCTION opt_bar match_cases
-- On COLON reduce production expr -> FUNCTION opt_bar match_cases
-- On CLASS reduce production expr -> FUNCTION opt_bar match_cases
-- On CHAR reduce production expr -> FUNCTION opt_bar match_cases
-- On BEGIN reduce production expr -> FUNCTION opt_bar match_cases
-- On BARRBRACKET reduce production expr -> FUNCTION opt_bar match_cases
-- On BARBAR reduce production expr -> FUNCTION opt_bar match_cases
-- On ASSERT reduce production expr -> FUNCTION opt_bar match_cases
-- On AND reduce production expr -> FUNCTION opt_bar match_cases
-- On AMPERSAND reduce production expr -> FUNCTION opt_bar match_cases
-- On AMPERAMPER reduce production expr -> FUNCTION opt_bar match_cases

State 770:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern match_action [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 771
-- On mod_longident shift to state 303
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 771:
## Known stack suffix:
## match_cases BAR pattern
## LR(1) items:
match_cases -> match_cases BAR pattern . match_action [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 422
-- On MINUSGREATER shift to state 433
-- On COMMA shift to state 455
-- On COLONCOLON shift to state 301
-- On BAR shift to state 457
-- On AS shift to state 459
-- On match_action shift to state 772
## Reductions:

State 772:
## Known stack suffix:
## match_cases BAR pattern match_action
## LR(1) items:
match_cases -> match_cases BAR pattern match_action . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production match_cases -> match_cases BAR pattern match_action

State 773:
## Known stack suffix:
## LBRACKET expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI RBRACKET ]
simple_expr -> LBRACKET expr_semi_list . opt_semi RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list . opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 774
-- On opt_semi shift to state 776
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACKET reduce production opt_semi ->

State 774:
## Known stack suffix:
## expr_semi_list SEMI
## LR(1) items:
expr_semi_list -> expr_semi_list SEMI . expr [ error SEMI RBRACKET BARRBRACKET ]
opt_semi -> SEMI . [ error RBRACKET BARRBRACKET ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 775
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On RBRACKET reduce production opt_semi -> SEMI
-- On BARRBRACKET reduce production opt_semi -> SEMI

State 775:
## Known stack suffix:
## expr_semi_list SEMI expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_semi_list -> expr_semi_list SEMI expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr_semi_list -> expr_semi_list SEMI expr
-- On SEMI reduce production expr_semi_list -> expr_semi_list SEMI expr
-- On RBRACKET reduce production expr_semi_list -> expr_semi_list SEMI expr
-- On BARRBRACKET reduce production expr_semi_list -> expr_semi_list SEMI expr

State 776:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi . RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list opt_semi . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 777
-- On RBRACKET shift to state 778
## Reductions:

State 777:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi error

State 778:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi RBRACKET
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET

State 779:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI RBRACKET OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARRBRACKET BARBAR AMPERSAND AMPERAMPER ]
expr_semi_list -> expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr_semi_list -> expr
-- On SEMI reduce production expr_semi_list -> expr
-- On RBRACKET reduce production expr_semi_list -> expr
-- On BARRBRACKET reduce production expr_semi_list -> expr

State 780:
## Known stack suffix:
## IF seq_expr
## LR(1) items:
expr -> IF seq_expr . THEN expr ELSE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr . THEN expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On THEN shift to state 781
## Reductions:

State 781:
## Known stack suffix:
## IF seq_expr THEN
## LR(1) items:
expr -> IF seq_expr THEN . expr ELSE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 782
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 782:
## Known stack suffix:
## IF seq_expr THEN expr
## LR(1) items:
expr -> IF seq_expr THEN expr . ELSE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> IF seq_expr THEN expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On ELSE shift to state 783
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> IF seq_expr THEN expr
-- On WITH reduce production expr -> IF seq_expr THEN expr
-- On WHILE reduce production expr -> IF seq_expr THEN expr
-- On VIRTUAL reduce production expr -> IF seq_expr THEN expr
-- On VAL reduce production expr -> IF seq_expr THEN expr
-- On UIDENT reduce production expr -> IF seq_expr THEN expr
-- On TYPE reduce production expr -> IF seq_expr THEN expr
-- On TRY reduce production expr -> IF seq_expr THEN expr
-- On TRUE reduce production expr -> IF seq_expr THEN expr
-- On STRING reduce production expr -> IF seq_expr THEN expr
-- On SHARP reduce production expr -> IF seq_expr THEN expr
-- On SEMISEMI reduce production expr -> IF seq_expr THEN expr
-- On SEMI reduce production expr -> IF seq_expr THEN expr
-- On RPAREN reduce production expr -> IF seq_expr THEN expr
-- On RBRACKET reduce production expr -> IF seq_expr THEN expr
-- On RBRACE reduce production expr -> IF seq_expr THEN expr
-- On QUESTION reduce production expr -> IF seq_expr THEN expr
-- On PREFIXOP reduce production expr -> IF seq_expr THEN expr
-- On PARSER reduce production expr -> IF seq_expr THEN expr
-- On OPEN reduce production expr -> IF seq_expr THEN expr
-- On NEW reduce production expr -> IF seq_expr THEN expr
-- On MODULE reduce production expr -> IF seq_expr THEN expr
-- On METHOD reduce production expr -> IF seq_expr THEN expr
-- On MATCH reduce production expr -> IF seq_expr THEN expr
-- On LPAREN reduce production expr -> IF seq_expr THEN expr
-- On LOC reduce production expr -> IF seq_expr THEN expr
-- On LIDENT reduce production expr -> IF seq_expr THEN expr
-- On LET reduce production expr -> IF seq_expr THEN expr
-- On LBRACKETLESS reduce production expr -> IF seq_expr THEN expr
-- On LBRACKETBAR reduce production expr -> IF seq_expr THEN expr
-- On LBRACKET reduce production expr -> IF seq_expr THEN expr
-- On LBRACELESS reduce production expr -> IF seq_expr THEN expr
-- On LBRACEBAR reduce production expr -> IF seq_expr THEN expr
-- On LBRACE reduce production expr -> IF seq_expr THEN expr
-- On LAZY reduce production expr -> IF seq_expr THEN expr
-- On INT reduce production expr -> IF seq_expr THEN expr
-- On INHERIT reduce production expr -> IF seq_expr THEN expr
-- On IN reduce production expr -> IF seq_expr THEN expr
-- On IF reduce production expr -> IF seq_expr THEN expr
-- On GREATERRBRACKET reduce production expr -> IF seq_expr THEN expr
-- On GREATERRBRACE reduce production expr -> IF seq_expr THEN expr
-- On GREATERGREATER reduce production expr -> IF seq_expr THEN expr
-- On FUNCTION reduce production expr -> IF seq_expr THEN expr
-- On FUN reduce production expr -> IF seq_expr THEN expr
-- On FOR reduce production expr -> IF seq_expr THEN expr
-- On FLOAT reduce production expr -> IF seq_expr THEN expr
-- On FALSE reduce production expr -> IF seq_expr THEN expr
-- On EXTERNAL reduce production expr -> IF seq_expr THEN expr
-- On EXCEPTION reduce production expr -> IF seq_expr THEN expr
-- On EOF reduce production expr -> IF seq_expr THEN expr
-- On END reduce production expr -> IF seq_expr THEN expr
-- On DONE reduce production expr -> IF seq_expr THEN expr
-- On DEF reduce production expr -> IF seq_expr THEN expr
-- On COLONGREATER reduce production expr -> IF seq_expr THEN expr
-- On COLON reduce production expr -> IF seq_expr THEN expr
-- On CLASS reduce production expr -> IF seq_expr THEN expr
-- On CHAR reduce production expr -> IF seq_expr THEN expr
-- On BEGIN reduce production expr -> IF seq_expr THEN expr
-- On BARRBRACKET reduce production expr -> IF seq_expr THEN expr
-- On BAR reduce production expr -> IF seq_expr THEN expr
-- On ASSERT reduce production expr -> IF seq_expr THEN expr
-- On AND reduce production expr -> IF seq_expr THEN expr

State 783:
## Known stack suffix:
## IF seq_expr THEN expr ELSE
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE . expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 784
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 784:
## Known stack suffix:
## IF seq_expr THEN expr ELSE expr
## LR(1) items:
expr -> IF seq_expr THEN expr ELSE expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On WITH reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On WHILE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On VIRTUAL reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On VAL reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On UIDENT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On TYPE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On TRY reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On TRUE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On STRING reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On SHARP reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On SEMISEMI reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On SEMI reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On RPAREN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On RBRACKET reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On RBRACE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On QUESTION reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On PREFIXOP reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On PARSER reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On OPEN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On NEW reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On MODULE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On METHOD reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On MATCH reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LPAREN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LOC reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LIDENT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LET reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACKETLESS reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACKETBAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACKET reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACELESS reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACEBAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LBRACE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On LAZY reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On INT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On INHERIT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On IN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On IF reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On GREATERRBRACKET reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On GREATERRBRACE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On GREATERGREATER reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FUNCTION reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FUN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FOR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FLOAT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On FALSE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On EXTERNAL reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On EXCEPTION reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On EOF reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On END reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On ELSE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On DONE reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On DEF reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On COLONGREATER reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On COLON reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On CLASS reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On CHAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On BEGIN reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On BARRBRACKET reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On BAR reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On ASSERT reduce production expr -> IF seq_expr THEN expr ELSE expr
-- On AND reduce production expr -> IF seq_expr THEN expr ELSE expr

State 785:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 786
-- On END shift to state 787
## Reductions:

State 786:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr error

State 787:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> BEGIN seq_expr END

State 788:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
expr -> LAZY simple_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 476
-- On DOT shift to state 479
## Reductions:
-- On error reduce production expr -> LAZY simple_expr
-- On WITH reduce production expr -> LAZY simple_expr
-- On WHILE reduce production expr -> LAZY simple_expr
-- On VIRTUAL reduce production expr -> LAZY simple_expr
-- On VAL reduce production expr -> LAZY simple_expr
-- On UIDENT reduce production expr -> LAZY simple_expr
-- On TYPE reduce production expr -> LAZY simple_expr
-- On TRY reduce production expr -> LAZY simple_expr
-- On TRUE reduce production expr -> LAZY simple_expr
-- On SUBTRACTIVE reduce production expr -> LAZY simple_expr
-- On STRING reduce production expr -> LAZY simple_expr
-- On STAR reduce production expr -> LAZY simple_expr
-- On SEMISEMI reduce production expr -> LAZY simple_expr
-- On SEMI reduce production expr -> LAZY simple_expr
-- On RPAREN reduce production expr -> LAZY simple_expr
-- On RBRACKET reduce production expr -> LAZY simple_expr
-- On RBRACE reduce production expr -> LAZY simple_expr
-- On QUESTION reduce production expr -> LAZY simple_expr
-- On PREFIXOP reduce production expr -> LAZY simple_expr
-- On PARSER reduce production expr -> LAZY simple_expr
-- On OR reduce production expr -> LAZY simple_expr
-- On OPEN reduce production expr -> LAZY simple_expr
-- On NEW reduce production expr -> LAZY simple_expr
-- On MODULE reduce production expr -> LAZY simple_expr
-- On METHOD reduce production expr -> LAZY simple_expr
-- On MATCH reduce production expr -> LAZY simple_expr
-- On LPAREN reduce production expr -> LAZY simple_expr
-- On LOC reduce production expr -> LAZY simple_expr
-- On LIDENT reduce production expr -> LAZY simple_expr
-- On LET reduce production expr -> LAZY simple_expr
-- On LESSGREATER reduce production expr -> LAZY simple_expr
-- On LESS reduce production expr -> LAZY simple_expr
-- On LBRACKETLESS reduce production expr -> LAZY simple_expr
-- On LBRACKETBAR reduce production expr -> LAZY simple_expr
-- On LBRACKET reduce production expr -> LAZY simple_expr
-- On LBRACELESS reduce production expr -> LAZY simple_expr
-- On LBRACEBAR reduce production expr -> LAZY simple_expr
-- On LBRACE reduce production expr -> LAZY simple_expr
-- On LAZY reduce production expr -> LAZY simple_expr
-- On INT reduce production expr -> LAZY simple_expr
-- On INHERIT reduce production expr -> LAZY simple_expr
-- On INFIXOP4 reduce production expr -> LAZY simple_expr
-- On INFIXOP3 reduce production expr -> LAZY simple_expr
-- On INFIXOP2 reduce production expr -> LAZY simple_expr
-- On INFIXOP1 reduce production expr -> LAZY simple_expr
-- On INFIXOP0 reduce production expr -> LAZY simple_expr
-- On IN reduce production expr -> LAZY simple_expr
-- On IF reduce production expr -> LAZY simple_expr
-- On GREATERRBRACKET reduce production expr -> LAZY simple_expr
-- On GREATERRBRACE reduce production expr -> LAZY simple_expr
-- On GREATERGREATER reduce production expr -> LAZY simple_expr
-- On GREATER reduce production expr -> LAZY simple_expr
-- On FUNCTION reduce production expr -> LAZY simple_expr
-- On FUN reduce production expr -> LAZY simple_expr
-- On FOR reduce production expr -> LAZY simple_expr
-- On FLOAT reduce production expr -> LAZY simple_expr
-- On FALSE reduce production expr -> LAZY simple_expr
-- On EXTERNAL reduce production expr -> LAZY simple_expr
-- On EXCEPTION reduce production expr -> LAZY simple_expr
-- On EQUAL reduce production expr -> LAZY simple_expr
-- On EOF reduce production expr -> LAZY simple_expr
-- On END reduce production expr -> LAZY simple_expr
-- On ELSE reduce production expr -> LAZY simple_expr
-- On DONE reduce production expr -> LAZY simple_expr
-- On DEF reduce production expr -> LAZY simple_expr
-- On COMMA reduce production expr -> LAZY simple_expr
-- On COLONGREATER reduce production expr -> LAZY simple_expr
-- On COLONEQUAL reduce production expr -> LAZY simple_expr
-- On COLONCOLON reduce production expr -> LAZY simple_expr
-- On COLON reduce production expr -> LAZY simple_expr
-- On CLASS reduce production expr -> LAZY simple_expr
-- On CHAR reduce production expr -> LAZY simple_expr
-- On BEGIN reduce production expr -> LAZY simple_expr
-- On BARRBRACKET reduce production expr -> LAZY simple_expr
-- On BARBAR reduce production expr -> LAZY simple_expr
-- On BAR reduce production expr -> LAZY simple_expr
-- On ASSERT reduce production expr -> LAZY simple_expr
-- On AND reduce production expr -> LAZY simple_expr
-- On AMPERSAND reduce production expr -> LAZY simple_expr
-- On AMPERAMPER reduce production expr -> LAZY simple_expr

State 789:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI RBRACE OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr . [ error SEMI RBRACE ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr
-- On SEMI reduce production lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr
-- On RBRACE reduce production lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr

State 790:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi . RBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list opt_semi . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 791
-- On RBRACE shift to state 792
## Reductions:

State 791:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE lbl_expr_list opt_semi error

State 792:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi RBRACE
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE

State 793:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR BARRBRACKET . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR BARRBRACKET

State 794:
## Known stack suffix:
## LBRACKETBAR expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI BARRBRACKET ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi BARRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 774
-- On opt_semi shift to state 795
## Reductions:
-- On error reduce production opt_semi ->
-- On BARRBRACKET reduce production opt_semi ->

State 795:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . BARRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 796
-- On BARRBRACKET shift to state 797
## Reductions:

State 796:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi error

State 797:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET

State 798:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
expr -> LET rec_flag let_bindings IN seq_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings IN seq_expr

State 799:
## Known stack suffix:
## let_bindings AND
## LR(1) items:
let_bindings -> let_bindings AND . let_binding [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 289
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 308
-- On mod_longident shift to state 303
-- On let_binding shift to state 800
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 800:
## Known stack suffix:
## let_bindings AND let_binding
## LR(1) items:
let_bindings -> let_bindings AND let_binding . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_bindings AND let_binding

State 801:
## Known stack suffix:
## let_binding
## LR(1) items:
let_bindings -> let_binding . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_binding

State 802:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
fun_binding -> EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> EQUAL seq_expr

State 803:
## Known stack suffix:
## type_constraint
## LR(1) items:
fun_binding -> type_constraint . EQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 804
## Reductions:

State 804:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
fun_binding -> type_constraint EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 805
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 805:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
fun_binding -> type_constraint EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> type_constraint EQUAL seq_expr

State 806:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_binding -> simple_pattern . fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 402
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On type_constraint shift to state 803
-- On simple_pattern shift to state 806
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On fun_binding shift to state 807
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 807:
## Known stack suffix:
## simple_pattern fun_binding
## LR(1) items:
fun_binding -> simple_pattern fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> simple_pattern fun_binding

State 808:
## Known stack suffix:
## val_ident fun_binding
## LR(1) items:
let_binding -> val_ident fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> val_ident fun_binding

State 809:
## Known stack suffix:
## pattern
## LR(1) items:
let_binding -> pattern . EQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
let_binding -> pattern . COLONEQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
pattern -> pattern . AS val_ident [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On EQUAL shift to state 810
-- On COMMA shift to state 455
-- On COLONEQUAL shift to state 812
-- On COLONCOLON shift to state 301
-- On BAR shift to state 457
-- On AS shift to state 459
## Reductions:

State 810:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
let_binding -> pattern EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 811
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 811:
## Known stack suffix:
## pattern EQUAL seq_expr
## LR(1) items:
let_binding -> pattern EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> pattern EQUAL seq_expr

State 812:
## Known stack suffix:
## pattern COLONEQUAL
## LR(1) items:
let_binding -> pattern COLONEQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 813
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 813:
## Known stack suffix:
## pattern COLONEQUAL seq_expr
## LR(1) items:
let_binding -> pattern COLONEQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> pattern COLONEQUAL seq_expr

State 814:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
process -> LET rec_flag let_bindings . IN process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On IN shift to state 815
-- On AND shift to state 817
## Reductions:

State 815:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
process -> LET rec_flag let_bindings IN . process [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 816
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On WHILE reduce production process ->
-- On TYPE reduce production process ->
-- On TRY reduce production process ->
-- On SUBTRACTIVE reduce production process ->
-- On SHARP reduce production process ->
-- On SEMISEMI reduce production process ->
-- On PREFIXOP reduce production process ->
-- On PARSER reduce production process ->
-- On OPEN reduce production process ->
-- On NEW reduce production process ->
-- On MODULE reduce production process ->
-- On MATCH reduce production process ->
-- On LOC reduce production process ->
-- On LBRACKETLESS reduce production process ->
-- On LBRACELESS reduce production process ->
-- On LBRACE reduce production process ->
-- On LAZY reduce production process ->
-- On IN reduce production process ->
-- On FUNCTION reduce production process ->
-- On FUN reduce production process ->
-- On FOR reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On EOF reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On BARRBRACE reduce production process ->
-- On ASSERT reduce production process ->
-- On AND reduce production process ->

State 816:
## Known stack suffix:
## LET rec_flag let_bindings IN process
## LR(1) items:
process -> LET rec_flag let_bindings IN process . [ WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN BARRBRACE ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> LET rec_flag let_bindings IN process

State 817:
## Known stack suffix:
## let_bindings AND
## LR(1) items:
let_bindings -> let_bindings AND . let_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 401
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 809
-- On mod_longident shift to state 303
-- On let_binding shift to state 818
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 818:
## Known stack suffix:
## let_bindings AND let_binding
## LR(1) items:
let_bindings -> let_bindings AND let_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_bindings AND let_binding

State 819:
## Known stack suffix:
## let_binding
## LR(1) items:
let_bindings -> let_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_bindings -> let_binding

State 820:
## Known stack suffix:
## LBRACEBAR process
## LR(1) items:
expr -> LBRACEBAR process . BARRBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BARRBRACE shift to state 821
## Reductions:

State 821:
## Known stack suffix:
## LBRACEBAR process BARRBRACE
## LR(1) items:
expr -> LBRACEBAR process BARRBRACE . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LBRACEBAR process BARRBRACE

State 822:
## Known stack suffix:
## label_expr_list SEMI label EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACE GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
label_expr_list -> label_expr_list SEMI label EQUAL expr . [ error SEMI GREATERRBRACE ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production label_expr_list -> label_expr_list SEMI label EQUAL expr
-- On SEMI reduce production label_expr_list -> label_expr_list SEMI label EQUAL expr
-- On GREATERRBRACE reduce production label_expr_list -> label_expr_list SEMI label EQUAL expr

State 823:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi . GREATERRBRACE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list opt_semi . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 824
-- On GREATERRBRACE shift to state 825
## Reductions:

State 824:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS label_expr_list opt_semi error

State 825:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE

State 826:
## Known stack suffix:
## LBRACKET expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI RBRACKET ]
simple_expr -> LBRACKET expr_semi_list . opt_semi RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list . opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 774
-- On opt_semi shift to state 827
## Reductions:
-- On error reduce production opt_semi ->
-- On RBRACKET reduce production opt_semi ->

State 827:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi . RBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list opt_semi . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 828
-- On RBRACKET shift to state 829
## Reductions:

State 828:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi error

State 829:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi RBRACKET
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET

State 830:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR BARRBRACKET . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR BARRBRACKET

State 831:
## Known stack suffix:
## LBRACKETBAR expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI BARRBRACKET ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi BARRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 774
-- On opt_semi shift to state 832
## Reductions:
-- On error reduce production opt_semi ->
-- On BARRBRACKET reduce production opt_semi ->

State 832:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . BARRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 833
-- On BARRBRACKET shift to state 834
## Reductions:

State 833:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi error

State 834:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET

State 835:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS GREATERRBRACKET . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETLESS GREATERRBRACKET

State 836:
## Known stack suffix:
## stream_expr_component
## LR(1) items:
stream_expr -> stream_expr_component . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stream_expr -> stream_expr_component

State 837:
## Known stack suffix:
## LBRACKETLESS stream_expr
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr . opt_semi GREATERRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr . opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
stream_expr -> stream_expr . SEMI stream_expr_component [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 838
-- On opt_semi shift to state 841
## Reductions:
-- On error reduce production opt_semi ->
-- On GREATERRBRACKET reduce production opt_semi ->

State 838:
## Known stack suffix:
## stream_expr SEMI
## LR(1) items:
opt_semi -> SEMI . [ error GREATERRBRACKET ]
stream_expr -> stream_expr SEMI . stream_expr_component [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On QUOTE shift to state 293
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On stream_expr_component shift to state 839
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 840
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On GREATERRBRACKET reduce production opt_semi -> SEMI

State 839:
## Known stack suffix:
## stream_expr SEMI stream_expr_component
## LR(1) items:
stream_expr -> stream_expr SEMI stream_expr_component . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stream_expr -> stream_expr SEMI stream_expr_component

State 840:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
stream_expr_component -> expr . [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production stream_expr_component -> expr
-- On SEMI reduce production stream_expr_component -> expr
-- On GREATERRBRACKET reduce production stream_expr_component -> expr

State 841:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi . GREATERRBRACKET [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr opt_semi . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 842
-- On GREATERRBRACKET shift to state 843
## Reductions:

State 842:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi error
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi error

State 843:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET

State 844:
## Known stack suffix:
## pattern EQUAL seq_expr
## LR(1) items:
let_binding -> pattern EQUAL seq_expr . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> pattern EQUAL seq_expr

State 845:
## Known stack suffix:
## pattern COLONEQUAL
## LR(1) items:
let_binding -> pattern COLONEQUAL . seq_expr [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 846
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 846:
## Known stack suffix:
## pattern COLONEQUAL seq_expr
## LR(1) items:
let_binding -> pattern COLONEQUAL seq_expr . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> pattern COLONEQUAL seq_expr

State 847:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . IN error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error IN AND ]
## Transitions:
-- On error shift to state 848
-- On IN shift to state 849
-- On AND shift to state 799
## Reductions:

State 848:
## Known stack suffix:
## LET rec_flag let_bindings error
## LR(1) items:
expr -> LET rec_flag let_bindings error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings error

State 849:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
expr -> LET rec_flag let_bindings IN . seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings IN . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 850
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 851
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 850:
## Known stack suffix:
## LET rec_flag let_bindings IN error
## LR(1) items:
expr -> LET rec_flag let_bindings IN error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings IN error

State 851:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
expr -> LET rec_flag let_bindings IN seq_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> LET rec_flag let_bindings IN seq_expr

State 852:
## Known stack suffix:
## QUOTE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
stream_expr_component -> QUOTE expr . [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production stream_expr_component -> QUOTE expr
-- On SEMI reduce production stream_expr_component -> QUOTE expr
-- On GREATERRBRACKET reduce production stream_expr_component -> QUOTE expr

State 853:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS GREATERRBRACKET . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETLESS GREATERRBRACKET

State 854:
## Known stack suffix:
## LBRACKETLESS stream_expr
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr . opt_semi GREATERRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr . opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
stream_expr -> stream_expr . SEMI stream_expr_component [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 838
-- On opt_semi shift to state 855
## Reductions:
-- On error reduce production opt_semi ->
-- On GREATERRBRACKET reduce production opt_semi ->

State 855:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi . GREATERRBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr opt_semi . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 856
-- On GREATERRBRACKET shift to state 857
## Reductions:

State 856:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi error
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi error

State 857:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET

State 858:
## Known stack suffix:
## DEF
## LR(1) items:
expr -> DEF . def_bindings IN seq_expr [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
location_item -> DEF . def_bindings location_tail [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_bindings shift to state 859
-- On def_binding shift to state 595
## Reductions:

State 859:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT AND ]
expr -> DEF def_bindings . IN seq_expr [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
location_item -> DEF def_bindings . location_tail [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SEMISEMI shift to state 284
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 286
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IN shift to state 637
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 858
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On AND shift to state 593
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 860
-- On mod_longident shift to state 378
-- On location_tail shift to state 864
-- On location_item shift to state 862
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On END reduce production location_tail ->

State 860:
## Known stack suffix:
## seq_expr
## LR(1) items:
location_item -> seq_expr . location_tail [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SEMISEMI shift to state 284
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 286
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 858
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 860
-- On mod_longident shift to state 378
-- On location_tail shift to state 861
-- On location_item shift to state 862
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On END reduce production location_tail ->

State 861:
## Known stack suffix:
## seq_expr location_tail
## LR(1) items:
location_item -> seq_expr location_tail . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production location_item -> seq_expr location_tail

State 862:
## Known stack suffix:
## location_item
## LR(1) items:
location_tail -> location_item . location_tail [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SEMISEMI shift to state 284
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 286
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 858
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 860
-- On mod_longident shift to state 378
-- On location_tail shift to state 863
-- On location_item shift to state 862
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On END reduce production location_tail ->

State 863:
## Known stack suffix:
## location_item location_tail
## LR(1) items:
location_tail -> location_item location_tail . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production location_tail -> location_item location_tail

State 864:
## Known stack suffix:
## DEF def_bindings location_tail
## LR(1) items:
location_item -> DEF def_bindings location_tail . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production location_item -> DEF def_bindings location_tail

State 865:
## Known stack suffix:
## location_tail
## LR(1) items:
location -> location_tail . [ END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production location -> location_tail

State 866:
## Known stack suffix:
## LOC location
## LR(1) items:
simple_expr -> LOC location . END [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On END shift to state 867
## Reductions:

State 867:
## Known stack suffix:
## LOC location END
## LR(1) items:
simple_expr -> LOC location END . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LOC location END

State 868:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
fun_binding -> EQUAL seq_expr . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> EQUAL seq_expr

State 869:
## Known stack suffix:
## type_constraint
## LR(1) items:
fun_binding -> type_constraint . EQUAL seq_expr [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On EQUAL shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
fun_binding -> type_constraint EQUAL . seq_expr [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 871
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 871:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
fun_binding -> type_constraint EQUAL seq_expr . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> type_constraint EQUAL seq_expr

State 872:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_binding -> simple_pattern . fun_binding [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 290
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On type_constraint shift to state 869
-- On simple_pattern shift to state 872
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On fun_binding shift to state 873
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 873:
## Known stack suffix:
## simple_pattern fun_binding
## LR(1) items:
fun_binding -> simple_pattern fun_binding . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fun_binding -> simple_pattern fun_binding

State 874:
## Known stack suffix:
## val_ident fun_binding
## LR(1) items:
let_binding -> val_ident fun_binding . [ error WHILE UIDENT TYPE TRY TRUE SUBTRACTIVE STRING SHARP SEMISEMI PREFIXOP PARSER OPEN NEW MODULE MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EOF END DEF CLASS CHAR BEGIN ASSERT AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production let_binding -> val_ident fun_binding

State 875:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . IN error [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . error [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING STAR SEMISEMI SEMI PREFIXOP PARSER OR NEW MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IF GREATER FUNCTION FUN FOR FLOAT FALSE EQUAL END DEF COMMA COLONEQUAL COLONCOLON CHAR BEGIN BARBAR ASSERT AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IN IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT AND ]
location_item -> LET rec_flag let_bindings . location_tail [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
-- On error shift to state 406
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SEMISEMI shift to state 284
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 286
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IN shift to state 407
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 858
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On AND shift to state 799
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 860
-- On mod_longident shift to state 378
-- On location_tail shift to state 876
-- On location_item shift to state 862
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On END reduce production location_tail ->

State 876:
## Known stack suffix:
## LET rec_flag let_bindings location_tail
## LR(1) items:
location_item -> LET rec_flag let_bindings location_tail . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production location_item -> LET rec_flag let_bindings location_tail

State 877:
## Known stack suffix:
## SEMISEMI location_item
## LR(1) items:
location_tail -> SEMISEMI location_item . [ WHILE UIDENT TRY TRUE SUBTRACTIVE STRING SEMISEMI PREFIXOP PARSER NEW MATCH LPAREN LOC LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE END DEF CHAR BEGIN ASSERT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production location_tail -> SEMISEMI location_item

State 878:
## Known stack suffix:
## LOC location
## LR(1) items:
simple_expr -> LOC location . END [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On END shift to state 879
## Reductions:

State 879:
## Known stack suffix:
## LOC location END
## LR(1) items:
simple_expr -> LOC location END . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LOC location END

State 880:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
expr -> MATCH seq_expr . WITH opt_bar match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> MATCH seq_expr . WITH PARSER opt_pat opt_bar parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 881
## Reductions:

State 881:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
expr -> MATCH seq_expr WITH . opt_bar match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> MATCH seq_expr WITH . PARSER opt_pat opt_bar parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On PARSER shift to state 882
-- On BAR shift to state 268
-- On opt_bar shift to state 889
## Reductions:
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On SUBTRACTIVE reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->

State 882:
## Known stack suffix:
## MATCH seq_expr WITH PARSER
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER . opt_pat opt_bar parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 883
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On LBRACKETLESS reduce production opt_pat ->
-- On BAR reduce production opt_pat ->

State 883:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER opt_pat . opt_bar parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 268
-- On opt_bar shift to state 884
## Reductions:
-- On LBRACKETLESS reduce production opt_bar ->

State 884:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar . parser_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 278
-- On parser_cases shift to state 885
-- On parser_case shift to state 888
## Reductions:

State 885:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 886
## Reductions:
-- On WITH reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On WHILE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On UIDENT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On TYPE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On TRY reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On TRUE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On TO reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On THEN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SUBTRACTIVE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On STRING reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On STAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SHARP reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SEMISEMI reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SEMI reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On PREFIXOP reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On PARSER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On OR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On OPEN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On NEW reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On MODULE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On MINUSGREATER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On MATCH reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LPAREN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LOC reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LIDENT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LET reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LESSGREATER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LESS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACKETLESS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACKETBAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACKET reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACELESS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACEBAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LAZY reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP4 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP3 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP2 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP1 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP0 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On IN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On IF reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On GREATER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FUNCTION reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FUN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FOR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FLOAT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FALSE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EXTERNAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EXCEPTION reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EQUAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EOF reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On END reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On ELSE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On DOWNTO reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On DO reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On DEF reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COMMA reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COLONEQUAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COLONCOLON reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On CLASS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On CHAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On BEGIN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On BARBAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On ASSERT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On AND reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On AMPERSAND reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On AMPERAMPER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases

State 886:
## Known stack suffix:
## parser_cases BAR
## LR(1) items:
parser_cases -> parser_cases BAR . parser_case [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 278
-- On parser_case shift to state 887
## Reductions:

State 887:
## Known stack suffix:
## parser_cases BAR parser_case
## LR(1) items:
parser_cases -> parser_cases BAR parser_case . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_cases -> parser_cases BAR parser_case

State 888:
## Known stack suffix:
## parser_case
## LR(1) items:
parser_cases -> parser_case . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_cases -> parser_case

State 889:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar . match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 627
-- On mod_longident shift to state 303
-- On match_cases shift to state 890
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 890:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar match_cases . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 731
## Reductions:
-- On WITH reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On WHILE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On UIDENT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On TYPE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On TRY reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On TRUE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On TO reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On THEN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SUBTRACTIVE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On STRING reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On STAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SHARP reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SEMISEMI reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SEMI reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On PREFIXOP reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On PARSER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On OR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On OPEN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On NEW reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On MODULE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On MINUSGREATER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On MATCH reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LPAREN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LOC reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LIDENT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LET reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LESSGREATER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LESS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACKETLESS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACKETBAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACKET reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACELESS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACEBAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LAZY reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP4 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP3 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP2 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP1 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP0 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On IN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On IF reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On GREATER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FUNCTION reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FUN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FOR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FLOAT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FALSE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EXTERNAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EXCEPTION reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EQUAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EOF reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On END reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On ELSE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On DOWNTO reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On DO reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On DEF reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COMMA reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COLONCOLON reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On CLASS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On CHAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On BEGIN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On BARBAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On ASSERT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On AND reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On AMPERSAND reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases

State 891:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 892:
## Known stack suffix:
## stream_pattern_component
## LR(1) items:
stream_pattern -> stream_pattern_component . opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On QUESTION shift to state 893
-- On opt_err shift to state 895
## Reductions:
-- On error reduce production opt_err ->
-- On SEMI reduce production opt_err ->
-- On GREATERRBRACKET reduce production opt_err ->

State 893:
## Known stack suffix:
## QUESTION
## LR(1) items:
opt_err -> QUESTION . expr [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 894
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 894:
## Known stack suffix:
## QUESTION expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
opt_err -> QUESTION expr . [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production opt_err -> QUESTION expr
-- On SEMI reduce production opt_err -> QUESTION expr
-- On GREATERRBRACKET reduce production opt_err -> QUESTION expr

State 895:
## Known stack suffix:
## stream_pattern_component opt_err
## LR(1) items:
stream_pattern -> stream_pattern_component opt_err . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stream_pattern -> stream_pattern_component opt_err

State 896:
## Known stack suffix:
## LBRACKETLESS stream_pattern
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern . opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern . opt_semi error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
stream_pattern -> stream_pattern . SEMI stream_pattern_component opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 897
-- On opt_semi shift to state 903
## Reductions:
-- On error reduce production opt_semi ->
-- On GREATERRBRACKET reduce production opt_semi ->

State 897:
## Known stack suffix:
## stream_pattern SEMI
## LR(1) items:
opt_semi -> SEMI . [ error GREATERRBRACKET ]
stream_pattern -> stream_pattern SEMI . stream_pattern_component opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 37
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 51
-- On STRING shift to state 21
-- On QUOTE shift to state 271
-- On LPAREN shift to state 45
-- On LIDENT shift to state 47
-- On LBRACKET shift to state 50
-- On LBRACE shift to state 53
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 65
-- On val_ident shift to state 68
-- On stream_pattern_component shift to state 898
-- On simple_pattern shift to state 69
-- On signed_constant shift to state 70
-- On pattern_comma_list shift to state 71
-- On pattern shift to state 900
-- On mod_longident shift to state 76
-- On constr_longident shift to state 79
-- On constant shift to state 81
## Reductions:
-- On error reduce production opt_semi -> SEMI
-- On GREATERRBRACKET reduce production opt_semi -> SEMI

State 898:
## Known stack suffix:
## stream_pattern SEMI stream_pattern_component
## LR(1) items:
stream_pattern -> stream_pattern SEMI stream_pattern_component . opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On QUESTION shift to state 893
-- On opt_err shift to state 899
## Reductions:
-- On error reduce production opt_err ->
-- On SEMI reduce production opt_err ->
-- On GREATERRBRACKET reduce production opt_err ->

State 899:
## Known stack suffix:
## stream_pattern SEMI stream_pattern_component opt_err
## LR(1) items:
stream_pattern -> stream_pattern SEMI stream_pattern_component opt_err . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stream_pattern -> stream_pattern SEMI stream_pattern_component opt_err

State 900:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
stream_pattern_component -> pattern . EQUAL expr [ error SEMI QUESTION GREATERRBRACKET ]
stream_pattern_component -> pattern . [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On EQUAL shift to state 901
-- On COMMA shift to state 83
-- On COLONCOLON shift to state 74
-- On BAR shift to state 85
-- On AS shift to state 87
## Reductions:
-- On error reduce production stream_pattern_component -> pattern
-- On SEMI reduce production stream_pattern_component -> pattern
-- On QUESTION reduce production stream_pattern_component -> pattern
-- On GREATERRBRACKET reduce production stream_pattern_component -> pattern

State 901:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
stream_pattern_component -> pattern EQUAL . expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 902
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 902:
## Known stack suffix:
## pattern EQUAL expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
stream_pattern_component -> pattern EQUAL expr . [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production stream_pattern_component -> pattern EQUAL expr
-- On SEMI reduce production stream_pattern_component -> pattern EQUAL expr
-- On QUESTION reduce production stream_pattern_component -> pattern EQUAL expr
-- On GREATERRBRACKET reduce production stream_pattern_component -> pattern EQUAL expr

State 903:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern opt_semi . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 904
-- On GREATERRBRACKET shift to state 905
## Reductions:

State 904:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi error
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi error

State 905:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 906
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On MINUSGREATER reduce production opt_pat ->

State 906:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 907
## Reductions:

State 907:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On seq_expr shift to state 908
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 908:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 909:
## Known stack suffix:
## PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr -> PARSER opt_pat opt_bar parser_cases . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 886
## Reductions:
-- On WITH reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On WHILE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On UIDENT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On TYPE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On TRY reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On TRUE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On TO reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On THEN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SUBTRACTIVE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On STRING reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On STAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SHARP reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SEMISEMI reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SEMI reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On PREFIXOP reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On PARSER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On OR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On OPEN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On NEW reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On MODULE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On MINUSGREATER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On MATCH reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LPAREN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LOC reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LIDENT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LET reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LESSGREATER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LESS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACKETLESS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACKETBAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACKET reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACELESS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACEBAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LAZY reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP4 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP3 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP2 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP1 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP0 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On IN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On IF reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On GREATER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FUNCTION reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FUN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FOR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FLOAT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FALSE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EXTERNAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EXCEPTION reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EQUAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EOF reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On END reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On ELSE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On DOWNTO reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On DO reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On DEF reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COMMA reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COLONEQUAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COLONCOLON reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On CLASS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On CHAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On BEGIN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On BARBAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On ASSERT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On AND reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On AMPERSAND reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On AMPERAMPER reduce production expr -> PARSER opt_pat opt_bar parser_cases

State 910:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
expr -> MATCH seq_expr . WITH opt_bar match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> MATCH seq_expr . WITH PARSER opt_pat opt_bar parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 911
## Reductions:

State 911:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
expr -> MATCH seq_expr WITH . opt_bar match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> MATCH seq_expr WITH . PARSER opt_pat opt_bar parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On PARSER shift to state 912
-- On BAR shift to state 268
-- On opt_bar shift to state 919
## Reductions:
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On SUBTRACTIVE reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->

State 912:
## Known stack suffix:
## MATCH seq_expr WITH PARSER
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER . opt_pat opt_bar parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 913
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On LBRACKETLESS reduce production opt_pat ->
-- On BAR reduce production opt_pat ->

State 913:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER opt_pat . opt_bar parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 268
-- On opt_bar shift to state 914
## Reductions:
-- On LBRACKETLESS reduce production opt_bar ->

State 914:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar . parser_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 270
-- On parser_cases shift to state 915
-- On parser_case shift to state 918
## Reductions:

State 915:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 916
## Reductions:
-- On error reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On WITH reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On WHILE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On VIRTUAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On VAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On UIDENT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On TYPE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On TRY reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On TRUE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SUBTRACTIVE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On STRING reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On STAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SHARP reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SEMISEMI reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On SEMI reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On RPAREN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On RBRACKET reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On RBRACE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On QUESTION reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On PREFIXOP reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On PARSER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On OR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On OPEN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On NEW reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On MODULE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On METHOD reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On MATCH reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LPAREN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LOC reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LIDENT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LET reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LESSGREATER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LESS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACKETLESS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACKETBAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACKET reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACELESS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACEBAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LBRACE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On LAZY reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INHERIT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP4 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP3 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP2 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP1 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On INFIXOP0 reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On IN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On IF reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On GREATERRBRACKET reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On GREATERRBRACE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On GREATERGREATER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On GREATER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FUNCTION reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FUN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FOR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FLOAT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On FALSE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EXTERNAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EXCEPTION reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EQUAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On EOF reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On END reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On ELSE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On DONE reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On DEF reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COMMA reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COLONGREATER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COLONEQUAL reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COLONCOLON reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On COLON reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On CLASS reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On CHAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On BEGIN reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On BARRBRACKET reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On BARBAR reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On ASSERT reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On AND reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On AMPERSAND reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
-- On AMPERAMPER reduce production expr -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases

State 916:
## Known stack suffix:
## parser_cases BAR
## LR(1) items:
parser_cases -> parser_cases BAR . parser_case [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 270
-- On parser_case shift to state 917
## Reductions:

State 917:
## Known stack suffix:
## parser_cases BAR parser_case
## LR(1) items:
parser_cases -> parser_cases BAR parser_case . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_cases -> parser_cases BAR parser_case

State 918:
## Known stack suffix:
## parser_case
## LR(1) items:
parser_cases -> parser_case . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_cases -> parser_case

State 919:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar . match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 421
-- On mod_longident shift to state 303
-- On match_cases shift to state 920
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 920:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> MATCH seq_expr WITH opt_bar match_cases . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 770
## Reductions:
-- On error reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On WITH reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On WHILE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On VIRTUAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On VAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On UIDENT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On TYPE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On TRY reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On TRUE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SUBTRACTIVE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On STRING reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On STAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SHARP reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SEMISEMI reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On SEMI reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On RPAREN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On RBRACKET reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On RBRACE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On QUESTION reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On PREFIXOP reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On PARSER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On OR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On OPEN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On NEW reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On MODULE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On METHOD reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On MATCH reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LPAREN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LOC reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LIDENT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LET reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LESSGREATER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LESS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACKETLESS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACKETBAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACKET reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACELESS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACEBAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LBRACE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On LAZY reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INHERIT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP4 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP3 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP2 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP1 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On INFIXOP0 reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On IN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On IF reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On GREATERRBRACKET reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On GREATERRBRACE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On GREATERGREATER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On GREATER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FUNCTION reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FUN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FOR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FLOAT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On FALSE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EXTERNAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EXCEPTION reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EQUAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On EOF reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On END reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On ELSE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On DONE reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On DEF reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COMMA reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COLONGREATER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COLONCOLON reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On COLON reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On CLASS reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On CHAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On BEGIN reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On BARRBRACKET reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On BARBAR reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On ASSERT reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On AND reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On AMPERSAND reduce production expr -> MATCH seq_expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production expr -> MATCH seq_expr WITH opt_bar match_cases

State 921:
## Known stack suffix:
## QUOTE pattern WHEN expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error SUBTRACTIVE STAR SEMI QUESTION OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATERRBRACKET GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
stream_pattern_component -> QUOTE pattern WHEN expr . [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On SUBTRACTIVE shift to state 502
-- On STAR shift to state 504
-- On OR shift to state 512
-- On LESSGREATER shift to state 514
-- On LESS shift to state 522
-- On INFIXOP4 shift to state 506
-- On INFIXOP3 shift to state 510
-- On INFIXOP2 shift to state 516
-- On INFIXOP1 shift to state 518
-- On INFIXOP0 shift to state 524
-- On GREATER shift to state 526
-- On EQUAL shift to state 528
-- On COMMA shift to state 537
-- On COLONEQUAL shift to state 539
-- On COLONCOLON shift to state 520
-- On BARBAR shift to state 530
-- On AMPERSAND shift to state 532
-- On AMPERAMPER shift to state 534
## Reductions:
-- On error reduce production stream_pattern_component -> QUOTE pattern WHEN expr
-- On SEMI reduce production stream_pattern_component -> QUOTE pattern WHEN expr
-- On QUESTION reduce production stream_pattern_component -> QUOTE pattern WHEN expr
-- On GREATERRBRACKET reduce production stream_pattern_component -> QUOTE pattern WHEN expr

State 922:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 923
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On MINUSGREATER reduce production opt_pat ->

State 923:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 924
## Reductions:

State 924:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 925
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 925:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 926:
## Known stack suffix:
## LBRACKETLESS stream_pattern
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern . opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern . opt_semi error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
stream_pattern -> stream_pattern . SEMI stream_pattern_component opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 897
-- On opt_semi shift to state 927
## Reductions:
-- On error reduce production opt_semi ->
-- On GREATERRBRACKET reduce production opt_semi ->

State 927:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern opt_semi . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 928
-- On GREATERRBRACKET shift to state 929
## Reductions:

State 928:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi error
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi error

State 929:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 265
-- On signed_constant shift to state 266
-- On opt_pat shift to state 930
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On MINUSGREATER reduce production opt_pat ->

State 930:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 931
## Reductions:

State 931:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 932
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 932:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 933:
## Known stack suffix:
## PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr -> PARSER opt_pat opt_bar parser_cases . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 916
## Reductions:
-- On error reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On WITH reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On WHILE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On VIRTUAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On VAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On UIDENT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On TYPE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On TRY reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On TRUE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SUBTRACTIVE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On STRING reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On STAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SHARP reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SEMISEMI reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On SEMI reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On RPAREN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On RBRACKET reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On RBRACE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On QUESTION reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On PREFIXOP reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On PARSER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On OR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On OPEN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On NEW reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On MODULE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On METHOD reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On MATCH reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LPAREN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LOC reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LIDENT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LET reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LESSGREATER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LESS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACKETLESS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACKETBAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACKET reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACELESS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACEBAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LBRACE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On LAZY reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INHERIT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP4 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP3 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP2 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP1 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On INFIXOP0 reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On IN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On IF reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On GREATERRBRACKET reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On GREATERRBRACE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On GREATERGREATER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On GREATER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FUNCTION reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FUN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FOR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FLOAT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On FALSE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EXTERNAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EXCEPTION reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EQUAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On EOF reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On END reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On ELSE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On DONE reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On DEF reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COMMA reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COLONGREATER reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COLONEQUAL reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COLONCOLON reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On COLON reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On CLASS reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On CHAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On BEGIN reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On BARRBRACKET reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On BARBAR reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On ASSERT reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On AND reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On AMPERSAND reduce production expr -> PARSER opt_pat opt_bar parser_cases
-- On AMPERAMPER reduce production expr -> PARSER opt_pat opt_bar parser_cases

State 934:
## Known stack suffix:
## SUBTRACTIVE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> SUBTRACTIVE expr . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SUBTRACTIVE expr

State 935:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
expr -> TRY seq_expr . WITH opt_bar match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr . WITH error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 936
-- On WITH shift to state 937
## Reductions:

State 936:
## Known stack suffix:
## TRY seq_expr error
## LR(1) items:
expr -> TRY seq_expr error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRY seq_expr error

State 937:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
expr -> TRY seq_expr WITH . opt_bar match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr WITH . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 938
-- On BAR shift to state 268
-- On opt_bar shift to state 939
## Reductions:
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On SUBTRACTIVE reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->

State 938:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
expr -> TRY seq_expr WITH error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRY seq_expr WITH error

State 939:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar . match_cases [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 421
-- On mod_longident shift to state 303
-- On match_cases shift to state 940
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 940:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar match_cases . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 770
## Reductions:
-- On error reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On WITH reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On WHILE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On VIRTUAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On VAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On UIDENT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On TYPE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On TRY reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On TRUE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SUBTRACTIVE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On STRING reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On STAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SHARP reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SEMISEMI reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SEMI reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On RPAREN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On RBRACKET reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On RBRACE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On QUESTION reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On PREFIXOP reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On PARSER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On OR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On OPEN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On NEW reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On MODULE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On METHOD reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On MATCH reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LPAREN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LOC reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LIDENT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LET reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LESSGREATER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LESS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACKETLESS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACKETBAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACKET reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACELESS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACEBAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LAZY reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INHERIT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP4 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP3 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP2 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP1 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP0 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On IN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On IF reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On GREATERRBRACKET reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On GREATERRBRACE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On GREATERGREATER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On GREATER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FUNCTION reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FUN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FOR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FLOAT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FALSE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EXTERNAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EXCEPTION reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EQUAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EOF reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On END reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On ELSE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On DONE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On DEF reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COMMA reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONGREATER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONCOLON reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLON reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On CLASS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On CHAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On BEGIN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On BARRBRACKET reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On BARBAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On ASSERT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On AND reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On AMPERSAND reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production expr -> TRY seq_expr WITH opt_bar match_cases

State 941:
## Known stack suffix:
## LPAREN SHARP
## LR(1) items:
simple_expr -> LPAREN SHARP . label RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 942
## Reductions:

State 942:
## Known stack suffix:
## LPAREN SHARP label
## LR(1) items:
simple_expr -> LPAREN SHARP label . RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 943
## Reductions:

State 943:
## Known stack suffix:
## LPAREN SHARP label RPAREN
## LR(1) items:
simple_expr -> LPAREN SHARP label RPAREN . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN SHARP label RPAREN

State 944:
## Known stack suffix:
## LPAREN seq_expr
## LR(1) items:
simple_expr -> LPAREN seq_expr . RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . type_constraint RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 945
-- On RPAREN shift to state 946
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On type_constraint shift to state 947
## Reductions:

State 945:
## Known stack suffix:
## LPAREN seq_expr error
## LR(1) items:
simple_expr -> LPAREN seq_expr error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr error

State 946:
## Known stack suffix:
## LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr RPAREN . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr RPAREN

State 947:
## Known stack suffix:
## LPAREN seq_expr type_constraint
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint . RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 948
## Reductions:

State 948:
## Known stack suffix:
## LPAREN seq_expr type_constraint RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint RPAREN . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LPAREN seq_expr type_constraint RPAREN

State 949:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSLESSGREATERGREATER LESSLESS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> PREFIXOP simple_expr

State 950:
## Known stack suffix:
## SUBTRACTIVE expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> SUBTRACTIVE expr . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> SUBTRACTIVE expr

State 951:
## Known stack suffix:
## WHILE seq_expr
## LR(1) items:
expr -> WHILE seq_expr . DO seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE seq_expr . DO seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 952
## Reductions:

State 952:
## Known stack suffix:
## WHILE seq_expr DO
## LR(1) items:
expr -> WHILE seq_expr DO . seq_expr DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE seq_expr DO . seq_expr error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 953
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 953:
## Known stack suffix:
## WHILE seq_expr DO seq_expr
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr . DONE [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE seq_expr DO seq_expr . error [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 954
-- On DONE shift to state 955
## Reductions:

State 954:
## Known stack suffix:
## WHILE seq_expr DO seq_expr error
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr error . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> WHILE seq_expr DO seq_expr error

State 955:
## Known stack suffix:
## WHILE seq_expr DO seq_expr DONE
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr DONE . [ error WITH WHILE VIRTUAL VAL UIDENT TYPE TRY TRUE SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION PREFIXOP PARSER OR OPEN NEW MODULE METHOD MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATERRBRACKET GREATERRBRACE GREATERGREATER GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DEF COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> WHILE seq_expr DO seq_expr DONE

State 956:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
expr -> TRY seq_expr . WITH opt_bar match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr . WITH error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 957
-- On WITH shift to state 958
## Reductions:

State 957:
## Known stack suffix:
## TRY seq_expr error
## LR(1) items:
expr -> TRY seq_expr error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRY seq_expr error

State 958:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
expr -> TRY seq_expr WITH . opt_bar match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> TRY seq_expr WITH . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 959
-- On BAR shift to state 268
-- On opt_bar shift to state 960
## Reductions:
-- On UNDERSCORE reduce production opt_bar ->
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On SUBTRACTIVE reduce production opt_bar ->
-- On STRING reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LIDENT reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On LBRACE reduce production opt_bar ->
-- On INT reduce production opt_bar ->
-- On FLOAT reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On CHAR reduce production opt_bar ->

State 959:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
expr -> TRY seq_expr WITH error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> TRY seq_expr WITH error

State 960:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar . match_cases [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 627
-- On mod_longident shift to state 303
-- On match_cases shift to state 961
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 961:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
expr -> TRY seq_expr WITH opt_bar match_cases . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 731
## Reductions:
-- On WITH reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On WHILE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On UIDENT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On TYPE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On TRY reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On TRUE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On TO reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On THEN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SUBTRACTIVE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On STRING reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On STAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SHARP reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SEMISEMI reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On SEMI reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On PREFIXOP reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On PARSER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On OR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On OPEN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On NEW reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On MODULE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On MINUSGREATER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On MATCH reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LPAREN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LOC reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LIDENT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LET reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LESSGREATER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LESS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACKETLESS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACKETBAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACKET reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACELESS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACEBAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LBRACE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On LAZY reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP4 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP3 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP2 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP1 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On INFIXOP0 reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On IN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On IF reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On GREATER reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FUNCTION reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FUN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FOR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FLOAT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On FALSE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EXTERNAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EXCEPTION reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EQUAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On EOF reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On END reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On ELSE reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On DOWNTO reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On DO reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On DEF reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COMMA reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONEQUAL reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On COLONCOLON reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On CLASS reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On CHAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On BEGIN reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On BARBAR reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On ASSERT reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On AND reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On AMPERSAND reduce production expr -> TRY seq_expr WITH opt_bar match_cases
-- On AMPERAMPER reduce production expr -> TRY seq_expr WITH opt_bar match_cases

State 962:
## Known stack suffix:
## WHILE seq_expr
## LR(1) items:
expr -> WHILE seq_expr . DO seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE seq_expr . DO seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 963
## Reductions:

State 963:
## Known stack suffix:
## WHILE seq_expr DO
## LR(1) items:
expr -> WHILE seq_expr DO . seq_expr DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE seq_expr DO . seq_expr error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 964
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 964:
## Known stack suffix:
## WHILE seq_expr DO seq_expr
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr . DONE [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
expr -> WHILE seq_expr DO seq_expr . error [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 965
-- On DONE shift to state 966
## Reductions:

State 965:
## Known stack suffix:
## WHILE seq_expr DO seq_expr error
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr error . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> WHILE seq_expr DO seq_expr error

State 966:
## Known stack suffix:
## WHILE seq_expr DO seq_expr DONE
## LR(1) items:
expr -> WHILE seq_expr DO seq_expr DONE . [ WITH WHILE UIDENT TYPE TRY TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI PREFIXOP PARSER OR OPEN NEW MODULE MINUSGREATER MATCH LPAREN LOC LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACEBAR LBRACE LAZY INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN IF GREATER FUNCTION FUN FOR FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DO DEF COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR ASSERT AND AMPERSAND AMPERAMPER ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> WHILE seq_expr DO seq_expr DONE

State 967:
## Known stack suffix:
## TYPE
## LR(1) items:
structure_item -> TYPE . type_declarations [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 974
-- On type_parameter shift to state 1027
-- On type_declarations shift to state 1028
-- On type_declaration shift to state 1031
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 968:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_parameters -> LPAREN . type_parameter_list RPAREN [ UIDENT LIDENT ]
## Transitions:
-- On QUOTE shift to state 170
-- On type_parameter_list shift to state 969
-- On type_parameter shift to state 973
## Reductions:

State 969:
## Known stack suffix:
## LPAREN type_parameter_list
## LR(1) items:
type_parameter_list -> type_parameter_list . COMMA type_parameter [ RPAREN COMMA ]
type_parameters -> LPAREN type_parameter_list . RPAREN [ UIDENT LIDENT ]
## Transitions:
-- On RPAREN shift to state 970
-- On COMMA shift to state 971
## Reductions:

State 970:
## Known stack suffix:
## LPAREN type_parameter_list RPAREN
## LR(1) items:
type_parameters -> LPAREN type_parameter_list RPAREN . [ UIDENT LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameters -> LPAREN type_parameter_list RPAREN

State 971:
## Known stack suffix:
## type_parameter_list COMMA
## LR(1) items:
type_parameter_list -> type_parameter_list COMMA . type_parameter [ RPAREN COMMA ]
## Transitions:
-- On QUOTE shift to state 170
-- On type_parameter shift to state 972
## Reductions:

State 972:
## Known stack suffix:
## type_parameter_list COMMA type_parameter
## LR(1) items:
type_parameter_list -> type_parameter_list COMMA type_parameter . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter_list -> type_parameter_list COMMA type_parameter

State 973:
## Known stack suffix:
## type_parameter
## LR(1) items:
type_parameter_list -> type_parameter . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameter_list -> type_parameter

State 974:
## Known stack suffix:
## type_parameters
## LR(1) items:
type_declaration -> type_parameters . LIDENT type_kind constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 975
## Reductions:

State 975:
## Known stack suffix:
## type_parameters LIDENT
## LR(1) items:
type_declaration -> type_parameters LIDENT . type_kind constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 976
-- On type_kind shift to state 1020
## Reductions:
-- On VAL reduce production type_kind ->
-- On TYPE reduce production type_kind ->
-- On SHARP reduce production type_kind ->
-- On SEMISEMI reduce production type_kind ->
-- On OPEN reduce production type_kind ->
-- On MODULE reduce production type_kind ->
-- On LET reduce production type_kind ->
-- On INCLUDE reduce production type_kind ->
-- On EXTERNAL reduce production type_kind ->
-- On EXCEPTION reduce production type_kind ->
-- On EOF reduce production type_kind ->
-- On DEF reduce production type_kind ->
-- On CONSTRAINT reduce production type_kind ->
-- On CLASS reduce production type_kind ->
-- On AND reduce production type_kind ->

State 976:
## Known stack suffix:
## EQUAL
## LR(1) items:
type_kind -> EQUAL . core_type [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . BAR constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL opt_bar constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 977
-- On TRUE shift to state 978
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 979
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On LBRACKET shift to state 981
-- On LBRACE shift to state 983
-- On FALSE shift to state 995
-- On COLONCOLON shift to state 996
-- On BAR shift to state 997
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1011
-- On constructor_declarations shift to state 1019
-- On constructor_declaration shift to state 1010
-- On constr_ident shift to state 1003
## Reductions:

State 977:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On VAL reduce production constr_ident -> UIDENT
-- On TYPE reduce production constr_ident -> UIDENT
-- On SHARP reduce production constr_ident -> UIDENT
-- On SEMISEMI reduce production constr_ident -> UIDENT
-- On OPEN reduce production constr_ident -> UIDENT
-- On OF reduce production constr_ident -> UIDENT
-- On MODULE reduce production constr_ident -> UIDENT
-- On LPAREN reduce production mod_ext_longident -> UIDENT
-- On LET reduce production constr_ident -> UIDENT
-- On INCLUDE reduce production constr_ident -> UIDENT
-- On EXTERNAL reduce production constr_ident -> UIDENT
-- On EXCEPTION reduce production constr_ident -> UIDENT
-- On EOF reduce production constr_ident -> UIDENT
-- On DOT reduce production mod_ext_longident -> UIDENT
-- On DEF reduce production constr_ident -> UIDENT
-- On CONSTRAINT reduce production constr_ident -> UIDENT
-- On CLASS reduce production constr_ident -> UIDENT
-- On BAR reduce production constr_ident -> UIDENT
-- On AND reduce production constr_ident -> UIDENT

State 978:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_ident -> TRUE . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> TRUE

State 979:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On RPAREN shift to state 980
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type_comma_list shift to state 186
-- On core_type shift to state 193
## Reductions:

State 980:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_ident -> LPAREN RPAREN . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> LPAREN RPAREN

State 981:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_ident -> LBRACKET . RBRACKET [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 982
## Reductions:

State 982:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_ident -> LBRACKET RBRACKET . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> LBRACKET RBRACKET

State 983:
## Known stack suffix:
## EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE . label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 984
-- On mutable_flag shift to state 985
-- On label_declarations shift to state 989
-- On label_declaration shift to state 994
## Reductions:
-- On LIDENT reduce production mutable_flag ->

State 984:
## Known stack suffix:
## MUTABLE
## LR(1) items:
mutable_flag -> MUTABLE . [ LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mutable_flag -> MUTABLE

State 985:
## Known stack suffix:
## mutable_flag
## LR(1) items:
label_declaration -> mutable_flag . LIDENT COLON core_type [ SEMI RBRACE ]
## Transitions:
-- On LIDENT shift to state 986
## Reductions:

State 986:
## Known stack suffix:
## mutable_flag LIDENT
## LR(1) items:
label_declaration -> mutable_flag LIDENT . COLON core_type [ SEMI RBRACE ]
## Transitions:
-- On COLON shift to state 987
## Reductions:

State 987:
## Known stack suffix:
## mutable_flag LIDENT COLON
## LR(1) items:
label_declaration -> mutable_flag LIDENT COLON . core_type [ SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 988
## Reductions:

State 988:
## Known stack suffix:
## mutable_flag LIDENT COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ SEMI RBRACE MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ SEMI RBRACE MINUSGREATER AS ]
label_declaration -> mutable_flag LIDENT COLON core_type . [ SEMI RBRACE ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On SEMI reduce production label_declaration -> mutable_flag LIDENT COLON core_type
-- On RBRACE reduce production label_declaration -> mutable_flag LIDENT COLON core_type

State 989:
## Known stack suffix:
## EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL LBRACE label_declarations . opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 990
-- On opt_semi shift to state 992
## Reductions:
-- On RBRACE reduce production opt_semi ->

State 990:
## Known stack suffix:
## label_declarations SEMI
## LR(1) items:
label_declarations -> label_declarations SEMI . label_declaration [ SEMI RBRACE ]
opt_semi -> SEMI . [ RBRACE ]
## Transitions:
-- On MUTABLE shift to state 984
-- On mutable_flag shift to state 985
-- On label_declaration shift to state 991
## Reductions:
-- On RBRACE reduce production opt_semi -> SEMI
-- On LIDENT reduce production mutable_flag ->

State 991:
## Known stack suffix:
## label_declarations SEMI label_declaration
## LR(1) items:
label_declarations -> label_declarations SEMI label_declaration . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_declarations -> label_declarations SEMI label_declaration

State 992:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi . RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 993
## Reductions:

State 993:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE

State 994:
## Known stack suffix:
## label_declaration
## LR(1) items:
label_declarations -> label_declaration . [ SEMI RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_declarations -> label_declaration

State 995:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_ident -> FALSE . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> FALSE

State 996:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
constr_ident -> COLONCOLON . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> COLONCOLON

State 997:
## Known stack suffix:
## EQUAL BAR
## LR(1) items:
type_kind -> EQUAL BAR . constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 998
-- On TRUE shift to state 978
-- On LPAREN shift to state 999
-- On LBRACKET shift to state 981
-- On FALSE shift to state 995
-- On COLONCOLON shift to state 996
-- On constructor_declarations shift to state 1000
-- On constructor_declaration shift to state 1010
-- On constr_ident shift to state 1003
## Reductions:

State 998:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> UIDENT

State 999:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RPAREN shift to state 980
## Reductions:

State 1000:
## Known stack suffix:
## EQUAL BAR constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL BAR constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1001
## Reductions:
-- On VAL reduce production type_kind -> EQUAL BAR constructor_declarations
-- On TYPE reduce production type_kind -> EQUAL BAR constructor_declarations
-- On SHARP reduce production type_kind -> EQUAL BAR constructor_declarations
-- On SEMISEMI reduce production type_kind -> EQUAL BAR constructor_declarations
-- On OPEN reduce production type_kind -> EQUAL BAR constructor_declarations
-- On MODULE reduce production type_kind -> EQUAL BAR constructor_declarations
-- On LET reduce production type_kind -> EQUAL BAR constructor_declarations
-- On INCLUDE reduce production type_kind -> EQUAL BAR constructor_declarations
-- On EXTERNAL reduce production type_kind -> EQUAL BAR constructor_declarations
-- On EXCEPTION reduce production type_kind -> EQUAL BAR constructor_declarations
-- On EOF reduce production type_kind -> EQUAL BAR constructor_declarations
-- On DEF reduce production type_kind -> EQUAL BAR constructor_declarations
-- On CONSTRAINT reduce production type_kind -> EQUAL BAR constructor_declarations
-- On CLASS reduce production type_kind -> EQUAL BAR constructor_declarations
-- On AND reduce production type_kind -> EQUAL BAR constructor_declarations

State 1001:
## Known stack suffix:
## constructor_declarations BAR
## LR(1) items:
constructor_declarations -> constructor_declarations BAR . constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 998
-- On TRUE shift to state 978
-- On LPAREN shift to state 999
-- On LBRACKET shift to state 981
-- On FALSE shift to state 995
-- On COLONCOLON shift to state 996
-- On constructor_declaration shift to state 1002
-- On constr_ident shift to state 1003
## Reductions:

State 1002:
## Known stack suffix:
## constructor_declarations BAR constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declarations BAR constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declarations BAR constructor_declaration

State 1003:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1004
-- On constructor_arguments shift to state 1009
## Reductions:
-- On VAL reduce production constructor_arguments ->
-- On TYPE reduce production constructor_arguments ->
-- On SHARP reduce production constructor_arguments ->
-- On SEMISEMI reduce production constructor_arguments ->
-- On OPEN reduce production constructor_arguments ->
-- On MODULE reduce production constructor_arguments ->
-- On LET reduce production constructor_arguments ->
-- On INCLUDE reduce production constructor_arguments ->
-- On EXTERNAL reduce production constructor_arguments ->
-- On EXCEPTION reduce production constructor_arguments ->
-- On EOF reduce production constructor_arguments ->
-- On DEF reduce production constructor_arguments ->
-- On CONSTRAINT reduce production constructor_arguments ->
-- On CLASS reduce production constructor_arguments ->
-- On BAR reduce production constructor_arguments ->
-- On AND reduce production constructor_arguments ->

State 1004:
## Known stack suffix:
## OF
## LR(1) items:
constructor_arguments -> OF . core_type_list [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 1005
-- On mod_ext_longident shift to state 155
-- On core_type_list shift to state 1006
## Reductions:

State 1005:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type_list -> simple_core_type . [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 152
-- On LIDENT shift to state 138
-- On type_longident shift to state 154
-- On mod_ext_longident shift to state 155
## Reductions:
-- On VAL reduce production core_type_list -> simple_core_type
-- On TYPE reduce production core_type_list -> simple_core_type
-- On STAR reduce production core_type_list -> simple_core_type
-- On SEMISEMI reduce production core_type_list -> simple_core_type
-- On OPEN reduce production core_type_list -> simple_core_type
-- On MODULE reduce production core_type_list -> simple_core_type
-- On LET reduce production core_type_list -> simple_core_type
-- On INCLUDE reduce production core_type_list -> simple_core_type
-- On EXTERNAL reduce production core_type_list -> simple_core_type
-- On EXCEPTION reduce production core_type_list -> simple_core_type
-- On EOF reduce production core_type_list -> simple_core_type
-- On DEF reduce production core_type_list -> simple_core_type
-- On CONSTRAINT reduce production core_type_list -> simple_core_type
-- On CLASS reduce production core_type_list -> simple_core_type
-- On BAR reduce production core_type_list -> simple_core_type
-- On AND reduce production core_type_list -> simple_core_type

State 1006:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
constructor_arguments -> OF core_type_list . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
core_type_list -> core_type_list . STAR simple_core_type [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On STAR shift to state 1007
## Reductions:
-- On VAL reduce production constructor_arguments -> OF core_type_list
-- On TYPE reduce production constructor_arguments -> OF core_type_list
-- On SHARP reduce production constructor_arguments -> OF core_type_list
-- On SEMISEMI reduce production constructor_arguments -> OF core_type_list
-- On OPEN reduce production constructor_arguments -> OF core_type_list
-- On MODULE reduce production constructor_arguments -> OF core_type_list
-- On LET reduce production constructor_arguments -> OF core_type_list
-- On INCLUDE reduce production constructor_arguments -> OF core_type_list
-- On EXTERNAL reduce production constructor_arguments -> OF core_type_list
-- On EXCEPTION reduce production constructor_arguments -> OF core_type_list
-- On EOF reduce production constructor_arguments -> OF core_type_list
-- On DEF reduce production constructor_arguments -> OF core_type_list
-- On CONSTRAINT reduce production constructor_arguments -> OF core_type_list
-- On CLASS reduce production constructor_arguments -> OF core_type_list
-- On BAR reduce production constructor_arguments -> OF core_type_list
-- On AND reduce production constructor_arguments -> OF core_type_list

State 1007:
## Known stack suffix:
## core_type_list STAR
## LR(1) items:
core_type_list -> core_type_list STAR . simple_core_type [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 1008
-- On mod_ext_longident shift to state 155
## Reductions:

State 1008:
## Known stack suffix:
## core_type_list STAR simple_core_type
## LR(1) items:
core_type_list -> core_type_list STAR simple_core_type . [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 152
-- On LIDENT shift to state 138
-- On type_longident shift to state 154
-- On mod_ext_longident shift to state 155
## Reductions:
-- On VAL reduce production core_type_list -> core_type_list STAR simple_core_type
-- On TYPE reduce production core_type_list -> core_type_list STAR simple_core_type
-- On STAR reduce production core_type_list -> core_type_list STAR simple_core_type
-- On SEMISEMI reduce production core_type_list -> core_type_list STAR simple_core_type
-- On OPEN reduce production core_type_list -> core_type_list STAR simple_core_type
-- On MODULE reduce production core_type_list -> core_type_list STAR simple_core_type
-- On LET reduce production core_type_list -> core_type_list STAR simple_core_type
-- On INCLUDE reduce production core_type_list -> core_type_list STAR simple_core_type
-- On EXTERNAL reduce production core_type_list -> core_type_list STAR simple_core_type
-- On EXCEPTION reduce production core_type_list -> core_type_list STAR simple_core_type
-- On EOF reduce production core_type_list -> core_type_list STAR simple_core_type
-- On DEF reduce production core_type_list -> core_type_list STAR simple_core_type
-- On CONSTRAINT reduce production core_type_list -> core_type_list STAR simple_core_type
-- On CLASS reduce production core_type_list -> core_type_list STAR simple_core_type
-- On BAR reduce production core_type_list -> core_type_list STAR simple_core_type
-- On AND reduce production core_type_list -> core_type_list STAR simple_core_type

State 1009:
## Known stack suffix:
## constr_ident constructor_arguments
## LR(1) items:
constructor_declaration -> constr_ident constructor_arguments . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declaration -> constr_ident constructor_arguments

State 1010:
## Known stack suffix:
## constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declaration

State 1011:
## Known stack suffix:
## EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VAL TYPE SHARP SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ VAL TYPE SHARP SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AS AND ]
type_kind -> EQUAL core_type . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL opt_bar constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On EQUAL shift to state 1012
-- On AS shift to state 169
## Reductions:
-- On VAL reduce production type_kind -> EQUAL core_type
-- On TYPE reduce production type_kind -> EQUAL core_type
-- On SHARP reduce production type_kind -> EQUAL core_type
-- On SEMISEMI reduce production type_kind -> EQUAL core_type
-- On OPEN reduce production type_kind -> EQUAL core_type
-- On MODULE reduce production type_kind -> EQUAL core_type
-- On LET reduce production type_kind -> EQUAL core_type
-- On INCLUDE reduce production type_kind -> EQUAL core_type
-- On EXTERNAL reduce production type_kind -> EQUAL core_type
-- On EXCEPTION reduce production type_kind -> EQUAL core_type
-- On EOF reduce production type_kind -> EQUAL core_type
-- On DEF reduce production type_kind -> EQUAL core_type
-- On CONSTRAINT reduce production type_kind -> EQUAL core_type
-- On CLASS reduce production type_kind -> EQUAL core_type
-- On AND reduce production type_kind -> EQUAL core_type

State 1012:
## Known stack suffix:
## EQUAL core_type EQUAL
## LR(1) items:
type_kind -> EQUAL core_type EQUAL . opt_bar constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL . LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 1013
-- On BAR shift to state 268
-- On opt_bar shift to state 1017
## Reductions:
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On COLONCOLON reduce production opt_bar ->

State 1013:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE . label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 984
-- On mutable_flag shift to state 985
-- On label_declarations shift to state 1014
-- On label_declaration shift to state 994
## Reductions:
-- On LIDENT reduce production mutable_flag ->

State 1014:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations . opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 990
-- On opt_semi shift to state 1015
## Reductions:
-- On RBRACE reduce production opt_semi ->

State 1015:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi . RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1016
## Reductions:

State 1016:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE

State 1017:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar
## LR(1) items:
type_kind -> EQUAL core_type EQUAL opt_bar . constructor_declarations [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 998
-- On TRUE shift to state 978
-- On LPAREN shift to state 999
-- On LBRACKET shift to state 981
-- On FALSE shift to state 995
-- On COLONCOLON shift to state 996
-- On constructor_declarations shift to state 1018
-- On constructor_declaration shift to state 1010
-- On constr_ident shift to state 1003
## Reductions:

State 1018:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1001
## Reductions:
-- On VAL reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On TYPE reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On SHARP reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On SEMISEMI reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On OPEN reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On MODULE reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On LET reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On INCLUDE reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On EXTERNAL reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On EXCEPTION reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On EOF reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On DEF reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On CONSTRAINT reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On CLASS reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On AND reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations

State 1019:
## Known stack suffix:
## EQUAL constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1001
## Reductions:
-- On VAL reduce production type_kind -> EQUAL constructor_declarations
-- On TYPE reduce production type_kind -> EQUAL constructor_declarations
-- On SHARP reduce production type_kind -> EQUAL constructor_declarations
-- On SEMISEMI reduce production type_kind -> EQUAL constructor_declarations
-- On OPEN reduce production type_kind -> EQUAL constructor_declarations
-- On MODULE reduce production type_kind -> EQUAL constructor_declarations
-- On LET reduce production type_kind -> EQUAL constructor_declarations
-- On INCLUDE reduce production type_kind -> EQUAL constructor_declarations
-- On EXTERNAL reduce production type_kind -> EQUAL constructor_declarations
-- On EXCEPTION reduce production type_kind -> EQUAL constructor_declarations
-- On EOF reduce production type_kind -> EQUAL constructor_declarations
-- On DEF reduce production type_kind -> EQUAL constructor_declarations
-- On CONSTRAINT reduce production type_kind -> EQUAL constructor_declarations
-- On CLASS reduce production type_kind -> EQUAL constructor_declarations
-- On AND reduce production type_kind -> EQUAL constructor_declarations

State 1020:
## Known stack suffix:
## type_parameters LIDENT type_kind
## LR(1) items:
type_declaration -> type_parameters LIDENT type_kind . constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On constraints shift to state 1021
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 1021:
## Known stack suffix:
## type_parameters LIDENT type_kind constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CONSTRAINT CLASS AND ]
type_declaration -> type_parameters LIDENT type_kind constraints . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1022
## Reductions:
-- On VAL reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On TYPE reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On SHARP reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On SEMISEMI reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On OPEN reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On MODULE reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On LET reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On INCLUDE reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On EXTERNAL reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On EXCEPTION reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On EOF reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On DEF reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On CLASS reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On AND reduce production type_declaration -> type_parameters LIDENT type_kind constraints

State 1022:
## Known stack suffix:
## constraints CONSTRAINT
## LR(1) items:
constraints -> constraints CONSTRAINT . constrain [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On type_parameter shift to state 1023
-- On constrain shift to state 1026
## Reductions:

State 1023:
## Known stack suffix:
## type_parameter
## LR(1) items:
constrain -> type_parameter . EQUAL core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1024
## Reductions:

State 1024:
## Known stack suffix:
## type_parameter EQUAL
## LR(1) items:
constrain -> type_parameter EQUAL . core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1025
## Reductions:

State 1025:
## Known stack suffix:
## type_parameter EQUAL core_type
## LR(1) items:
constrain -> type_parameter EQUAL core_type . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DEF CONSTRAINT CLASS AND ]
core_type -> core_type . MINUSGREATER core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On WITH reduce production constrain -> type_parameter EQUAL core_type
-- On VIRTUAL reduce production constrain -> type_parameter EQUAL core_type
-- On VAL reduce production constrain -> type_parameter EQUAL core_type
-- On TYPE reduce production constrain -> type_parameter EQUAL core_type
-- On SHARP reduce production constrain -> type_parameter EQUAL core_type
-- On SEMISEMI reduce production constrain -> type_parameter EQUAL core_type
-- On RPAREN reduce production constrain -> type_parameter EQUAL core_type
-- On OPEN reduce production constrain -> type_parameter EQUAL core_type
-- On MODULE reduce production constrain -> type_parameter EQUAL core_type
-- On METHOD reduce production constrain -> type_parameter EQUAL core_type
-- On LET reduce production constrain -> type_parameter EQUAL core_type
-- On INHERIT reduce production constrain -> type_parameter EQUAL core_type
-- On INCLUDE reduce production constrain -> type_parameter EQUAL core_type
-- On EXTERNAL reduce production constrain -> type_parameter EQUAL core_type
-- On EXCEPTION reduce production constrain -> type_parameter EQUAL core_type
-- On EQUAL reduce production constrain -> type_parameter EQUAL core_type
-- On EOF reduce production constrain -> type_parameter EQUAL core_type
-- On END reduce production constrain -> type_parameter EQUAL core_type
-- On DEF reduce production constrain -> type_parameter EQUAL core_type
-- On CONSTRAINT reduce production constrain -> type_parameter EQUAL core_type
-- On CLASS reduce production constrain -> type_parameter EQUAL core_type
-- On AND reduce production constrain -> type_parameter EQUAL core_type

State 1026:
## Known stack suffix:
## constraints CONSTRAINT constrain
## LR(1) items:
constraints -> constraints CONSTRAINT constrain . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END DEF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constraints -> constraints CONSTRAINT constrain

State 1027:
## Known stack suffix:
## type_parameter
## LR(1) items:
type_parameters -> type_parameter . [ UIDENT LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_parameters -> type_parameter

State 1028:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
structure_item -> TYPE type_declarations . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
type_declarations -> type_declarations . AND type_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On AND shift to state 1029
## Reductions:
-- On TYPE reduce production structure_item -> TYPE type_declarations
-- On SHARP reduce production structure_item -> TYPE type_declarations
-- On SEMISEMI reduce production structure_item -> TYPE type_declarations
-- On OPEN reduce production structure_item -> TYPE type_declarations
-- On MODULE reduce production structure_item -> TYPE type_declarations
-- On LET reduce production structure_item -> TYPE type_declarations
-- On EXTERNAL reduce production structure_item -> TYPE type_declarations
-- On EXCEPTION reduce production structure_item -> TYPE type_declarations
-- On EOF reduce production structure_item -> TYPE type_declarations
-- On DEF reduce production structure_item -> TYPE type_declarations
-- On CLASS reduce production structure_item -> TYPE type_declarations

State 1029:
## Known stack suffix:
## type_declarations AND
## LR(1) items:
type_declarations -> type_declarations AND . type_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 974
-- On type_parameter shift to state 1027
-- On type_declaration shift to state 1030
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 1030:
## Known stack suffix:
## type_declarations AND type_declaration
## LR(1) items:
type_declarations -> type_declarations AND type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declarations AND type_declaration

State 1031:
## Known stack suffix:
## type_declaration
## LR(1) items:
type_declarations -> type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declaration

State 1032:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
structure_tail -> SEMISEMI . [ EOF ]
structure_tail -> SEMISEMI . seq_expr structure_tail [ EOF ]
structure_tail -> SEMISEMI . structure_item structure_tail [ EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 967
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On OPEN shift to state 1033
-- On NEW shift to state 9
-- On MODULE shift to state 1035
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 1492
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On DEF shift to state 1506
-- On CLASS shift to state 1508
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On structure_item shift to state 1512
-- On simple_expr shift to state 640
-- On seq_expr shift to state 1521
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:
-- On EOF reduce production structure_tail -> SEMISEMI

State 1033:
## Known stack suffix:
## OPEN
## LR(1) items:
structure_item -> OPEN . mod_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 1034
## Reductions:

State 1034:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DOT DEF CLASS ]
structure_item -> OPEN mod_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On DOT shift to state 304
## Reductions:
-- On TYPE reduce production structure_item -> OPEN mod_longident
-- On SHARP reduce production structure_item -> OPEN mod_longident
-- On SEMISEMI reduce production structure_item -> OPEN mod_longident
-- On OPEN reduce production structure_item -> OPEN mod_longident
-- On MODULE reduce production structure_item -> OPEN mod_longident
-- On LET reduce production structure_item -> OPEN mod_longident
-- On EXTERNAL reduce production structure_item -> OPEN mod_longident
-- On EXCEPTION reduce production structure_item -> OPEN mod_longident
-- On EOF reduce production structure_item -> OPEN mod_longident
-- On DEF reduce production structure_item -> OPEN mod_longident
-- On CLASS reduce production structure_item -> OPEN mod_longident

State 1035:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
structure_item -> MODULE . TYPE ident EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1036
-- On TYPE shift to state 1488
## Reductions:

State 1036:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1037
-- On EQUAL shift to state 1265
-- On COLON shift to state 1482
-- On module_binding shift to state 1487
## Reductions:

State 1037:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_binding -> LPAREN . UIDENT COLON module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1038
## Reductions:

State 1038:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_binding -> LPAREN UIDENT . COLON module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On COLON shift to state 1039
## Reductions:

State 1039:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_binding -> LPAREN UIDENT COLON . module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1263
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1040:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On WITH reduce production ident -> UIDENT
-- On VAL reduce production ident -> UIDENT
-- On TYPE reduce production ident -> UIDENT
-- On SHARP reduce production ident -> UIDENT
-- On SEMISEMI reduce production ident -> UIDENT
-- On RPAREN reduce production ident -> UIDENT
-- On OPEN reduce production ident -> UIDENT
-- On MODULE reduce production ident -> UIDENT
-- On LPAREN reduce production mod_ext_longident -> UIDENT
-- On LET reduce production ident -> UIDENT
-- On INCLUDE reduce production ident -> UIDENT
-- On EXTERNAL reduce production ident -> UIDENT
-- On EXCEPTION reduce production ident -> UIDENT
-- On EQUAL reduce production ident -> UIDENT
-- On EOF reduce production ident -> UIDENT
-- On DOT reduce production mod_ext_longident -> UIDENT
-- On DEF reduce production ident -> UIDENT
-- On CLASS reduce production ident -> UIDENT

State 1041:
## Known stack suffix:
## SIG
## LR(1) items:
module_type -> SIG . signature END [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
module_type -> SIG . signature error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On signature shift to state 1042
## Default reduction:
-- After reading the next token, reduce production signature ->

State 1042:
## Known stack suffix:
## SIG signature
## LR(1) items:
module_type -> SIG signature . END [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
module_type -> SIG signature . error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
signature -> signature . signature_item [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature . signature_item SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 1043
-- On VAL shift to state 1044
-- On TYPE shift to state 1048
-- On OPEN shift to state 1098
-- On MODULE shift to state 1100
-- On INCLUDE shift to state 1110
-- On EXTERNAL shift to state 1180
-- On EXCEPTION shift to state 1188
-- On END shift to state 1262
-- On CLASS shift to state 1192
-- On signature_item shift to state 1247
## Reductions:

State 1043:
## Known stack suffix:
## SIG signature error
## LR(1) items:
module_type -> SIG signature error . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature error

State 1044:
## Known stack suffix:
## VAL
## LR(1) items:
signature_item -> VAL . val_ident COLON core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 1045
## Reductions:

State 1045:
## Known stack suffix:
## VAL val_ident
## LR(1) items:
signature_item -> VAL val_ident . COLON core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1046
## Reductions:

State 1046:
## Known stack suffix:
## VAL val_ident COLON
## LR(1) items:
signature_item -> VAL val_ident COLON . core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 1047
## Reductions:

State 1047:
## Known stack suffix:
## VAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION END CLASS AS ]
core_type -> core_type . AS type_parameter [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION END CLASS AS ]
signature_item -> VAL val_ident COLON core_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 231
-- On AS shift to state 233
## Reductions:
-- On error reduce production signature_item -> VAL val_ident COLON core_type
-- On VAL reduce production signature_item -> VAL val_ident COLON core_type
-- On TYPE reduce production signature_item -> VAL val_ident COLON core_type
-- On SEMISEMI reduce production signature_item -> VAL val_ident COLON core_type
-- On OPEN reduce production signature_item -> VAL val_ident COLON core_type
-- On MODULE reduce production signature_item -> VAL val_ident COLON core_type
-- On INCLUDE reduce production signature_item -> VAL val_ident COLON core_type
-- On EXTERNAL reduce production signature_item -> VAL val_ident COLON core_type
-- On EXCEPTION reduce production signature_item -> VAL val_ident COLON core_type
-- On END reduce production signature_item -> VAL val_ident COLON core_type
-- On CLASS reduce production signature_item -> VAL val_ident COLON core_type

State 1048:
## Known stack suffix:
## TYPE
## LR(1) items:
signature_item -> TYPE . type_declarations [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 1049
-- On type_parameter shift to state 1027
-- On type_declarations shift to state 1094
-- On type_declaration shift to state 1097
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 1049:
## Known stack suffix:
## type_parameters
## LR(1) items:
type_declaration -> type_parameters . LIDENT type_kind constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1050
## Reductions:

State 1050:
## Known stack suffix:
## type_parameters LIDENT
## LR(1) items:
type_declaration -> type_parameters LIDENT . type_kind constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1051
-- On type_kind shift to state 1087
## Reductions:
-- On error reduce production type_kind ->
-- On VAL reduce production type_kind ->
-- On TYPE reduce production type_kind ->
-- On SEMISEMI reduce production type_kind ->
-- On OPEN reduce production type_kind ->
-- On MODULE reduce production type_kind ->
-- On LET reduce production type_kind ->
-- On INCLUDE reduce production type_kind ->
-- On EXTERNAL reduce production type_kind ->
-- On EXCEPTION reduce production type_kind ->
-- On END reduce production type_kind ->
-- On DEF reduce production type_kind ->
-- On CONSTRAINT reduce production type_kind ->
-- On CLASS reduce production type_kind ->
-- On AND reduce production type_kind ->

State 1051:
## Known stack suffix:
## EQUAL
## LR(1) items:
type_kind -> EQUAL . core_type [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . BAR constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL opt_bar constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 1052
-- On TRUE shift to state 1053
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 1054
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On LBRACKET shift to state 1056
-- On LBRACE shift to state 1058
-- On FALSE shift to state 1062
-- On COLONCOLON shift to state 1063
-- On BAR shift to state 1064
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 1078
-- On constructor_declarations shift to state 1086
-- On constructor_declaration shift to state 1077
-- On constr_ident shift to state 1070
## Reductions:

State 1052:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error reduce production constr_ident -> UIDENT
-- On VAL reduce production constr_ident -> UIDENT
-- On TYPE reduce production constr_ident -> UIDENT
-- On SEMISEMI reduce production constr_ident -> UIDENT
-- On OPEN reduce production constr_ident -> UIDENT
-- On OF reduce production constr_ident -> UIDENT
-- On MODULE reduce production constr_ident -> UIDENT
-- On LPAREN reduce production mod_ext_longident -> UIDENT
-- On LET reduce production constr_ident -> UIDENT
-- On INCLUDE reduce production constr_ident -> UIDENT
-- On EXTERNAL reduce production constr_ident -> UIDENT
-- On EXCEPTION reduce production constr_ident -> UIDENT
-- On END reduce production constr_ident -> UIDENT
-- On DOT reduce production mod_ext_longident -> UIDENT
-- On DEF reduce production constr_ident -> UIDENT
-- On CONSTRAINT reduce production constr_ident -> UIDENT
-- On CLASS reduce production constr_ident -> UIDENT
-- On BAR reduce production constr_ident -> UIDENT
-- On AND reduce production constr_ident -> UIDENT

State 1053:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_ident -> TRUE . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> TRUE

State 1054:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On RPAREN shift to state 1055
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type_comma_list shift to state 197
-- On core_type shift to state 206
## Reductions:

State 1055:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_ident -> LPAREN RPAREN . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> LPAREN RPAREN

State 1056:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_ident -> LBRACKET . RBRACKET [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 1057
## Reductions:

State 1057:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_ident -> LBRACKET RBRACKET . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> LBRACKET RBRACKET

State 1058:
## Known stack suffix:
## EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE . label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 984
-- On mutable_flag shift to state 985
-- On label_declarations shift to state 1059
-- On label_declaration shift to state 994
## Reductions:
-- On LIDENT reduce production mutable_flag ->

State 1059:
## Known stack suffix:
## EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL LBRACE label_declarations . opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 990
-- On opt_semi shift to state 1060
## Reductions:
-- On RBRACE reduce production opt_semi ->

State 1060:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi . RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1061
## Reductions:

State 1061:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE

State 1062:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_ident -> FALSE . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> FALSE

State 1063:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
constr_ident -> COLONCOLON . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> COLONCOLON

State 1064:
## Known stack suffix:
## EQUAL BAR
## LR(1) items:
type_kind -> EQUAL BAR . constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1065
-- On TRUE shift to state 1053
-- On LPAREN shift to state 1066
-- On LBRACKET shift to state 1056
-- On FALSE shift to state 1062
-- On COLONCOLON shift to state 1063
-- On constructor_declarations shift to state 1067
-- On constructor_declaration shift to state 1077
-- On constr_ident shift to state 1070
## Reductions:

State 1065:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr_ident -> UIDENT

State 1066:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ error VAL TYPE SEMISEMI OPEN OF MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RPAREN shift to state 1055
## Reductions:

State 1067:
## Known stack suffix:
## EQUAL BAR constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL BAR constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1068
## Reductions:
-- On error reduce production type_kind -> EQUAL BAR constructor_declarations
-- On VAL reduce production type_kind -> EQUAL BAR constructor_declarations
-- On TYPE reduce production type_kind -> EQUAL BAR constructor_declarations
-- On SEMISEMI reduce production type_kind -> EQUAL BAR constructor_declarations
-- On OPEN reduce production type_kind -> EQUAL BAR constructor_declarations
-- On MODULE reduce production type_kind -> EQUAL BAR constructor_declarations
-- On LET reduce production type_kind -> EQUAL BAR constructor_declarations
-- On INCLUDE reduce production type_kind -> EQUAL BAR constructor_declarations
-- On EXTERNAL reduce production type_kind -> EQUAL BAR constructor_declarations
-- On EXCEPTION reduce production type_kind -> EQUAL BAR constructor_declarations
-- On END reduce production type_kind -> EQUAL BAR constructor_declarations
-- On DEF reduce production type_kind -> EQUAL BAR constructor_declarations
-- On CONSTRAINT reduce production type_kind -> EQUAL BAR constructor_declarations
-- On CLASS reduce production type_kind -> EQUAL BAR constructor_declarations
-- On AND reduce production type_kind -> EQUAL BAR constructor_declarations

State 1068:
## Known stack suffix:
## constructor_declarations BAR
## LR(1) items:
constructor_declarations -> constructor_declarations BAR . constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 1065
-- On TRUE shift to state 1053
-- On LPAREN shift to state 1066
-- On LBRACKET shift to state 1056
-- On FALSE shift to state 1062
-- On COLONCOLON shift to state 1063
-- On constructor_declaration shift to state 1069
-- On constr_ident shift to state 1070
## Reductions:

State 1069:
## Known stack suffix:
## constructor_declarations BAR constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declarations BAR constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declarations BAR constructor_declaration

State 1070:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1071
-- On constructor_arguments shift to state 1076
## Reductions:
-- On error reduce production constructor_arguments ->
-- On VAL reduce production constructor_arguments ->
-- On TYPE reduce production constructor_arguments ->
-- On SEMISEMI reduce production constructor_arguments ->
-- On OPEN reduce production constructor_arguments ->
-- On MODULE reduce production constructor_arguments ->
-- On LET reduce production constructor_arguments ->
-- On INCLUDE reduce production constructor_arguments ->
-- On EXTERNAL reduce production constructor_arguments ->
-- On EXCEPTION reduce production constructor_arguments ->
-- On END reduce production constructor_arguments ->
-- On DEF reduce production constructor_arguments ->
-- On CONSTRAINT reduce production constructor_arguments ->
-- On CLASS reduce production constructor_arguments ->
-- On BAR reduce production constructor_arguments ->
-- On AND reduce production constructor_arguments ->

State 1071:
## Known stack suffix:
## OF
## LR(1) items:
constructor_arguments -> OF . core_type_list [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 1072
-- On mod_ext_longident shift to state 203
-- On core_type_list shift to state 1073
## Reductions:

State 1072:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type_list -> simple_core_type . [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 222
-- On LIDENT shift to state 201
-- On type_longident shift to state 224
-- On mod_ext_longident shift to state 203
## Reductions:
-- On error reduce production core_type_list -> simple_core_type
-- On VAL reduce production core_type_list -> simple_core_type
-- On TYPE reduce production core_type_list -> simple_core_type
-- On STAR reduce production core_type_list -> simple_core_type
-- On SEMISEMI reduce production core_type_list -> simple_core_type
-- On OPEN reduce production core_type_list -> simple_core_type
-- On MODULE reduce production core_type_list -> simple_core_type
-- On LET reduce production core_type_list -> simple_core_type
-- On INCLUDE reduce production core_type_list -> simple_core_type
-- On EXTERNAL reduce production core_type_list -> simple_core_type
-- On EXCEPTION reduce production core_type_list -> simple_core_type
-- On END reduce production core_type_list -> simple_core_type
-- On DEF reduce production core_type_list -> simple_core_type
-- On CONSTRAINT reduce production core_type_list -> simple_core_type
-- On CLASS reduce production core_type_list -> simple_core_type
-- On BAR reduce production core_type_list -> simple_core_type
-- On AND reduce production core_type_list -> simple_core_type

State 1073:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
constructor_arguments -> OF core_type_list . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
core_type_list -> core_type_list . STAR simple_core_type [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On STAR shift to state 1074
## Reductions:
-- On error reduce production constructor_arguments -> OF core_type_list
-- On VAL reduce production constructor_arguments -> OF core_type_list
-- On TYPE reduce production constructor_arguments -> OF core_type_list
-- On SEMISEMI reduce production constructor_arguments -> OF core_type_list
-- On OPEN reduce production constructor_arguments -> OF core_type_list
-- On MODULE reduce production constructor_arguments -> OF core_type_list
-- On LET reduce production constructor_arguments -> OF core_type_list
-- On INCLUDE reduce production constructor_arguments -> OF core_type_list
-- On EXTERNAL reduce production constructor_arguments -> OF core_type_list
-- On EXCEPTION reduce production constructor_arguments -> OF core_type_list
-- On END reduce production constructor_arguments -> OF core_type_list
-- On DEF reduce production constructor_arguments -> OF core_type_list
-- On CONSTRAINT reduce production constructor_arguments -> OF core_type_list
-- On CLASS reduce production constructor_arguments -> OF core_type_list
-- On BAR reduce production constructor_arguments -> OF core_type_list
-- On AND reduce production constructor_arguments -> OF core_type_list

State 1074:
## Known stack suffix:
## core_type_list STAR
## LR(1) items:
core_type_list -> core_type_list STAR . simple_core_type [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 1075
-- On mod_ext_longident shift to state 203
## Reductions:

State 1075:
## Known stack suffix:
## core_type_list STAR simple_core_type
## LR(1) items:
core_type_list -> core_type_list STAR simple_core_type . [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On SHARP shift to state 222
-- On LIDENT shift to state 201
-- On type_longident shift to state 224
-- On mod_ext_longident shift to state 203
## Reductions:
-- On error reduce production core_type_list -> core_type_list STAR simple_core_type
-- On VAL reduce production core_type_list -> core_type_list STAR simple_core_type
-- On TYPE reduce production core_type_list -> core_type_list STAR simple_core_type
-- On STAR reduce production core_type_list -> core_type_list STAR simple_core_type
-- On SEMISEMI reduce production core_type_list -> core_type_list STAR simple_core_type
-- On OPEN reduce production core_type_list -> core_type_list STAR simple_core_type
-- On MODULE reduce production core_type_list -> core_type_list STAR simple_core_type
-- On LET reduce production core_type_list -> core_type_list STAR simple_core_type
-- On INCLUDE reduce production core_type_list -> core_type_list STAR simple_core_type
-- On EXTERNAL reduce production core_type_list -> core_type_list STAR simple_core_type
-- On EXCEPTION reduce production core_type_list -> core_type_list STAR simple_core_type
-- On END reduce production core_type_list -> core_type_list STAR simple_core_type
-- On DEF reduce production core_type_list -> core_type_list STAR simple_core_type
-- On CONSTRAINT reduce production core_type_list -> core_type_list STAR simple_core_type
-- On CLASS reduce production core_type_list -> core_type_list STAR simple_core_type
-- On BAR reduce production core_type_list -> core_type_list STAR simple_core_type
-- On AND reduce production core_type_list -> core_type_list STAR simple_core_type

State 1076:
## Known stack suffix:
## constr_ident constructor_arguments
## LR(1) items:
constructor_declaration -> constr_ident constructor_arguments . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declaration -> constr_ident constructor_arguments

State 1077:
## Known stack suffix:
## constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constructor_declarations -> constructor_declaration

State 1078:
## Known stack suffix:
## EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL END DEF CONSTRAINT CLASS AS AND ]
type_kind -> EQUAL core_type . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL opt_bar constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 231
-- On EQUAL shift to state 1079
-- On AS shift to state 233
## Reductions:
-- On error reduce production type_kind -> EQUAL core_type
-- On VAL reduce production type_kind -> EQUAL core_type
-- On TYPE reduce production type_kind -> EQUAL core_type
-- On SEMISEMI reduce production type_kind -> EQUAL core_type
-- On OPEN reduce production type_kind -> EQUAL core_type
-- On MODULE reduce production type_kind -> EQUAL core_type
-- On LET reduce production type_kind -> EQUAL core_type
-- On INCLUDE reduce production type_kind -> EQUAL core_type
-- On EXTERNAL reduce production type_kind -> EQUAL core_type
-- On EXCEPTION reduce production type_kind -> EQUAL core_type
-- On END reduce production type_kind -> EQUAL core_type
-- On DEF reduce production type_kind -> EQUAL core_type
-- On CONSTRAINT reduce production type_kind -> EQUAL core_type
-- On CLASS reduce production type_kind -> EQUAL core_type
-- On AND reduce production type_kind -> EQUAL core_type

State 1079:
## Known stack suffix:
## EQUAL core_type EQUAL
## LR(1) items:
type_kind -> EQUAL core_type EQUAL . opt_bar constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL . LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 1080
-- On BAR shift to state 268
-- On opt_bar shift to state 1084
## Reductions:
-- On UIDENT reduce production opt_bar ->
-- On TRUE reduce production opt_bar ->
-- On LPAREN reduce production opt_bar ->
-- On LBRACKET reduce production opt_bar ->
-- On FALSE reduce production opt_bar ->
-- On COLONCOLON reduce production opt_bar ->

State 1080:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE . label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 984
-- On mutable_flag shift to state 985
-- On label_declarations shift to state 1081
-- On label_declaration shift to state 994
## Reductions:
-- On LIDENT reduce production mutable_flag ->

State 1081:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations . opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 990
-- On opt_semi shift to state 1082
## Reductions:
-- On RBRACE reduce production opt_semi ->

State 1082:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi . RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1083
## Reductions:

State 1083:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE

State 1084:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar
## LR(1) items:
type_kind -> EQUAL core_type EQUAL opt_bar . constructor_declarations [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1065
-- On TRUE shift to state 1053
-- On LPAREN shift to state 1066
-- On LBRACKET shift to state 1056
-- On FALSE shift to state 1062
-- On COLONCOLON shift to state 1063
-- On constructor_declarations shift to state 1085
-- On constructor_declaration shift to state 1077
-- On constr_ident shift to state 1070
## Reductions:

State 1085:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1068
## Reductions:
-- On error reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On VAL reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On TYPE reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On SEMISEMI reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On OPEN reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On MODULE reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On LET reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On INCLUDE reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On EXTERNAL reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On EXCEPTION reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On END reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On DEF reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On CONSTRAINT reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On CLASS reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations
-- On AND reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations

State 1086:
## Known stack suffix:
## EQUAL constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS BAR AND ]
type_kind -> EQUAL constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1068
## Reductions:
-- On error reduce production type_kind -> EQUAL constructor_declarations
-- On VAL reduce production type_kind -> EQUAL constructor_declarations
-- On TYPE reduce production type_kind -> EQUAL constructor_declarations
-- On SEMISEMI reduce production type_kind -> EQUAL constructor_declarations
-- On OPEN reduce production type_kind -> EQUAL constructor_declarations
-- On MODULE reduce production type_kind -> EQUAL constructor_declarations
-- On LET reduce production type_kind -> EQUAL constructor_declarations
-- On INCLUDE reduce production type_kind -> EQUAL constructor_declarations
-- On EXTERNAL reduce production type_kind -> EQUAL constructor_declarations
-- On EXCEPTION reduce production type_kind -> EQUAL constructor_declarations
-- On END reduce production type_kind -> EQUAL constructor_declarations
-- On DEF reduce production type_kind -> EQUAL constructor_declarations
-- On CONSTRAINT reduce production type_kind -> EQUAL constructor_declarations
-- On CLASS reduce production type_kind -> EQUAL constructor_declarations
-- On AND reduce production type_kind -> EQUAL constructor_declarations

State 1087:
## Known stack suffix:
## type_parameters LIDENT type_kind
## LR(1) items:
type_declaration -> type_parameters LIDENT type_kind . constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On constraints shift to state 1088
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 1088:
## Known stack suffix:
## type_parameters LIDENT type_kind constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
type_declaration -> type_parameters LIDENT type_kind constraints . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1089
## Reductions:
-- On error reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On VAL reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On TYPE reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On SEMISEMI reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On OPEN reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On MODULE reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On LET reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On INCLUDE reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On EXTERNAL reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On EXCEPTION reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On END reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On DEF reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On CLASS reduce production type_declaration -> type_parameters LIDENT type_kind constraints
-- On AND reduce production type_declaration -> type_parameters LIDENT type_kind constraints

State 1089:
## Known stack suffix:
## constraints CONSTRAINT
## LR(1) items:
constraints -> constraints CONSTRAINT . constrain [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On type_parameter shift to state 1090
-- On constrain shift to state 1093
## Reductions:

State 1090:
## Known stack suffix:
## type_parameter
## LR(1) items:
constrain -> type_parameter . EQUAL core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1091
## Reductions:

State 1091:
## Known stack suffix:
## type_parameter EQUAL
## LR(1) items:
constrain -> type_parameter EQUAL . core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 1092
## Reductions:

State 1092:
## Known stack suffix:
## type_parameter EQUAL core_type
## LR(1) items:
constrain -> type_parameter EQUAL core_type . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
core_type -> core_type . MINUSGREATER core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 231
-- On AS shift to state 233
## Reductions:
-- On error reduce production constrain -> type_parameter EQUAL core_type
-- On WITH reduce production constrain -> type_parameter EQUAL core_type
-- On VIRTUAL reduce production constrain -> type_parameter EQUAL core_type
-- On VAL reduce production constrain -> type_parameter EQUAL core_type
-- On TYPE reduce production constrain -> type_parameter EQUAL core_type
-- On SEMISEMI reduce production constrain -> type_parameter EQUAL core_type
-- On RPAREN reduce production constrain -> type_parameter EQUAL core_type
-- On OPEN reduce production constrain -> type_parameter EQUAL core_type
-- On MODULE reduce production constrain -> type_parameter EQUAL core_type
-- On METHOD reduce production constrain -> type_parameter EQUAL core_type
-- On LET reduce production constrain -> type_parameter EQUAL core_type
-- On INHERIT reduce production constrain -> type_parameter EQUAL core_type
-- On INCLUDE reduce production constrain -> type_parameter EQUAL core_type
-- On EXTERNAL reduce production constrain -> type_parameter EQUAL core_type
-- On EXCEPTION reduce production constrain -> type_parameter EQUAL core_type
-- On END reduce production constrain -> type_parameter EQUAL core_type
-- On DEF reduce production constrain -> type_parameter EQUAL core_type
-- On CONSTRAINT reduce production constrain -> type_parameter EQUAL core_type
-- On CLASS reduce production constrain -> type_parameter EQUAL core_type
-- On AND reduce production constrain -> type_parameter EQUAL core_type

State 1093:
## Known stack suffix:
## constraints CONSTRAINT constrain
## LR(1) items:
constraints -> constraints CONSTRAINT constrain . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constraints -> constraints CONSTRAINT constrain

State 1094:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
signature_item -> TYPE type_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
type_declarations -> type_declarations . AND type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On AND shift to state 1095
## Reductions:
-- On error reduce production signature_item -> TYPE type_declarations
-- On VAL reduce production signature_item -> TYPE type_declarations
-- On TYPE reduce production signature_item -> TYPE type_declarations
-- On SEMISEMI reduce production signature_item -> TYPE type_declarations
-- On OPEN reduce production signature_item -> TYPE type_declarations
-- On MODULE reduce production signature_item -> TYPE type_declarations
-- On INCLUDE reduce production signature_item -> TYPE type_declarations
-- On EXTERNAL reduce production signature_item -> TYPE type_declarations
-- On EXCEPTION reduce production signature_item -> TYPE type_declarations
-- On END reduce production signature_item -> TYPE type_declarations
-- On CLASS reduce production signature_item -> TYPE type_declarations

State 1095:
## Known stack suffix:
## type_declarations AND
## LR(1) items:
type_declarations -> type_declarations AND . type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 1049
-- On type_parameter shift to state 1027
-- On type_declaration shift to state 1096
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 1096:
## Known stack suffix:
## type_declarations AND type_declaration
## LR(1) items:
type_declarations -> type_declarations AND type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declarations AND type_declaration

State 1097:
## Known stack suffix:
## type_declaration
## LR(1) items:
type_declarations -> type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_declarations -> type_declaration

State 1098:
## Known stack suffix:
## OPEN
## LR(1) items:
signature_item -> OPEN . mod_longident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On mod_longident shift to state 1099
## Reductions:

State 1099:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END DOT CLASS ]
signature_item -> OPEN mod_longident . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On DOT shift to state 77
## Reductions:
-- On error reduce production signature_item -> OPEN mod_longident
-- On VAL reduce production signature_item -> OPEN mod_longident
-- On TYPE reduce production signature_item -> OPEN mod_longident
-- On SEMISEMI reduce production signature_item -> OPEN mod_longident
-- On OPEN reduce production signature_item -> OPEN mod_longident
-- On MODULE reduce production signature_item -> OPEN mod_longident
-- On INCLUDE reduce production signature_item -> OPEN mod_longident
-- On EXTERNAL reduce production signature_item -> OPEN mod_longident
-- On EXCEPTION reduce production signature_item -> OPEN mod_longident
-- On END reduce production signature_item -> OPEN mod_longident
-- On CLASS reduce production signature_item -> OPEN mod_longident

State 1100:
## Known stack suffix:
## MODULE
## LR(1) items:
signature_item -> MODULE . UIDENT module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE . TYPE ident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE . TYPE ident EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1101
-- On TYPE shift to state 1258
## Reductions:

State 1101:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
signature_item -> MODULE UIDENT . module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1102
-- On COLON shift to state 1254
-- On module_declaration shift to state 1257
## Reductions:

State 1102:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_declaration -> LPAREN . UIDENT COLON module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1103
## Reductions:

State 1103:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_declaration -> LPAREN UIDENT . COLON module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1104
## Reductions:

State 1104:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON . module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1252
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1105:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_type -> LPAREN . module_type RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
module_type -> LPAREN . module_type error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1249
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1106:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error reduce production ident -> UIDENT
-- On WITH reduce production ident -> UIDENT
-- On VAL reduce production ident -> UIDENT
-- On TYPE reduce production ident -> UIDENT
-- On SEMISEMI reduce production ident -> UIDENT
-- On RPAREN reduce production ident -> UIDENT
-- On OPEN reduce production ident -> UIDENT
-- On MODULE reduce production ident -> UIDENT
-- On LPAREN reduce production mod_ext_longident -> UIDENT
-- On LET reduce production ident -> UIDENT
-- On INCLUDE reduce production ident -> UIDENT
-- On EXTERNAL reduce production ident -> UIDENT
-- On EXCEPTION reduce production ident -> UIDENT
-- On END reduce production ident -> UIDENT
-- On DOT reduce production mod_ext_longident -> UIDENT
-- On DEF reduce production ident -> UIDENT
-- On CLASS reduce production ident -> UIDENT

State 1107:
## Known stack suffix:
## SIG
## LR(1) items:
module_type -> SIG . signature END [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> SIG . signature error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On signature shift to state 1108
## Default reduction:
-- After reading the next token, reduce production signature ->

State 1108:
## Known stack suffix:
## SIG signature
## LR(1) items:
module_type -> SIG signature . END [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> SIG signature . error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
signature -> signature . signature_item [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature . signature_item SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 1109
-- On VAL shift to state 1044
-- On TYPE shift to state 1048
-- On OPEN shift to state 1098
-- On MODULE shift to state 1100
-- On INCLUDE shift to state 1110
-- On EXTERNAL shift to state 1180
-- On EXCEPTION shift to state 1188
-- On END shift to state 1191
-- On CLASS shift to state 1192
-- On signature_item shift to state 1247
## Reductions:

State 1109:
## Known stack suffix:
## SIG signature error
## LR(1) items:
module_type -> SIG signature error . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature error

State 1110:
## Known stack suffix:
## INCLUDE
## LR(1) items:
signature_item -> INCLUDE . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1179
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1111:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_type -> LPAREN . module_type RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> LPAREN . module_type error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1176
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1112:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_type -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1113
## Reductions:

State 1113:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1114
## Reductions:

State 1114:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On COLON shift to state 1115
## Reductions:

State 1115:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1145
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1116:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_type -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1117
## Reductions:

State 1117:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1118
## Reductions:

State 1118:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On COLON shift to state 1119
## Reductions:

State 1119:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1121
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1120:
## Known stack suffix:
## mty_longident
## LR(1) items:
module_type -> mty_longident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> mty_longident

State 1121:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1137
## Reductions:

State 1122:
## Known stack suffix:
## module_type WITH
## LR(1) items:
module_type -> module_type WITH . with_constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On TYPE shift to state 1123
-- On MODULE shift to state 1129
-- On with_constraints shift to state 1133
-- On with_constraint shift to state 1136
## Reductions:

State 1123:
## Known stack suffix:
## TYPE
## LR(1) items:
with_constraint -> TYPE . type_parameters label_longident EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 1124
-- On type_parameter shift to state 1027
## Reductions:
-- On UIDENT reduce production type_parameters ->
-- On LIDENT reduce production type_parameters ->

State 1124:
## Known stack suffix:
## TYPE type_parameters
## LR(1) items:
with_constraint -> TYPE type_parameters . label_longident EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On label_longident shift to state 1125
## Reductions:

State 1125:
## Known stack suffix:
## TYPE type_parameters label_longident
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident . EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1126
## Reductions:

State 1126:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL . core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1127
## Reductions:

State 1127:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type . constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
-- On constraints shift to state 1128
## Reductions:
-- On WITH reduce production constraints ->
-- On VAL reduce production constraints ->
-- On TYPE reduce production constraints ->
-- On SHARP reduce production constraints ->
-- On SEMISEMI reduce production constraints ->
-- On RPAREN reduce production constraints ->
-- On OPEN reduce production constraints ->
-- On MODULE reduce production constraints ->
-- On LET reduce production constraints ->
-- On INCLUDE reduce production constraints ->
-- On EXTERNAL reduce production constraints ->
-- On EXCEPTION reduce production constraints ->
-- On EQUAL reduce production constraints ->
-- On EOF reduce production constraints ->
-- On DEF reduce production constraints ->
-- On CONSTRAINT reduce production constraints ->
-- On CLASS reduce production constraints ->
-- On AND reduce production constraints ->

State 1128:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CONSTRAINT CLASS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1022
## Reductions:
-- On WITH reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On VAL reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On TYPE reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On SHARP reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On SEMISEMI reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On RPAREN reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On OPEN reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On MODULE reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On LET reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On INCLUDE reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On EXTERNAL reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On EXCEPTION reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On EQUAL reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On EOF reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On DEF reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On CLASS reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On AND reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints

State 1129:
## Known stack suffix:
## MODULE
## LR(1) items:
with_constraint -> MODULE . mod_longident EQUAL mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 1130
## Reductions:

State 1130:
## Known stack suffix:
## MODULE mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ EQUAL DOT ]
with_constraint -> MODULE mod_longident . EQUAL mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1131
-- On DOT shift to state 304
## Reductions:

State 1131:
## Known stack suffix:
## MODULE mod_longident EQUAL
## LR(1) items:
with_constraint -> MODULE mod_longident EQUAL . mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On mod_ext_longident shift to state 1132
## Reductions:

State 1132:
## Known stack suffix:
## MODULE mod_longident EQUAL mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT DEF CLASS AND ]
with_constraint -> MODULE mod_longident EQUAL mod_ext_longident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 156
-- On DOT shift to state 159
## Reductions:
-- On WITH reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On VAL reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On TYPE reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On SHARP reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On SEMISEMI reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On RPAREN reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On OPEN reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On MODULE reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On LET reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On INCLUDE reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On EXTERNAL reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On EXCEPTION reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On EQUAL reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On EOF reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On DEF reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On CLASS reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On AND reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident

State 1133:
## Known stack suffix:
## module_type WITH with_constraints
## LR(1) items:
module_type -> module_type WITH with_constraints . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
with_constraints -> with_constraints . AND with_constraint [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On AND shift to state 1134
## Reductions:
-- On WITH reduce production module_type -> module_type WITH with_constraints
-- On VAL reduce production module_type -> module_type WITH with_constraints
-- On TYPE reduce production module_type -> module_type WITH with_constraints
-- On SHARP reduce production module_type -> module_type WITH with_constraints
-- On SEMISEMI reduce production module_type -> module_type WITH with_constraints
-- On RPAREN reduce production module_type -> module_type WITH with_constraints
-- On OPEN reduce production module_type -> module_type WITH with_constraints
-- On MODULE reduce production module_type -> module_type WITH with_constraints
-- On LET reduce production module_type -> module_type WITH with_constraints
-- On INCLUDE reduce production module_type -> module_type WITH with_constraints
-- On EXTERNAL reduce production module_type -> module_type WITH with_constraints
-- On EXCEPTION reduce production module_type -> module_type WITH with_constraints
-- On EQUAL reduce production module_type -> module_type WITH with_constraints
-- On EOF reduce production module_type -> module_type WITH with_constraints
-- On DEF reduce production module_type -> module_type WITH with_constraints
-- On CLASS reduce production module_type -> module_type WITH with_constraints

State 1134:
## Known stack suffix:
## with_constraints AND
## LR(1) items:
with_constraints -> with_constraints AND . with_constraint [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
-- On TYPE shift to state 1123
-- On MODULE shift to state 1129
-- On with_constraint shift to state 1135
## Reductions:

State 1135:
## Known stack suffix:
## with_constraints AND with_constraint
## LR(1) items:
with_constraints -> with_constraints AND with_constraint . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraints AND with_constraint

State 1136:
## Known stack suffix:
## with_constraint
## LR(1) items:
with_constraints -> with_constraint . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraint

State 1137:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1138
## Reductions:

State 1138:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1139
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1139:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On WITH shift to state 1122
## Reductions:
-- On VAL reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On TYPE reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On SHARP reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On SEMISEMI reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On RPAREN reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On OPEN reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On MODULE reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On LET reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On INCLUDE reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On EXTERNAL reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On EXCEPTION reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On EQUAL reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On EOF reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On DEF reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On CLASS reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type

State 1140:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
mty_longident -> mod_ext_longident . DOT ident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 156
-- On DOT shift to state 1141
## Reductions:

State 1141:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
mty_longident -> mod_ext_longident DOT . ident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1142
-- On LIDENT shift to state 135
-- On ident shift to state 1143
## Reductions:

State 1142:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On WITH reduce production ident -> UIDENT
-- On VAL reduce production ident -> UIDENT
-- On TYPE reduce production ident -> UIDENT
-- On SHARP reduce production ident -> UIDENT
-- On SEMISEMI reduce production ident -> UIDENT
-- On RPAREN reduce production ident -> UIDENT
-- On OPEN reduce production ident -> UIDENT
-- On MODULE reduce production ident -> UIDENT
-- On LPAREN reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT
-- On LET reduce production ident -> UIDENT
-- On INCLUDE reduce production ident -> UIDENT
-- On EXTERNAL reduce production ident -> UIDENT
-- On EXCEPTION reduce production ident -> UIDENT
-- On EQUAL reduce production ident -> UIDENT
-- On EOF reduce production ident -> UIDENT
-- On DOT reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT
-- On DEF reduce production ident -> UIDENT
-- On CLASS reduce production ident -> UIDENT

State 1143:
## Known stack suffix:
## mod_ext_longident DOT ident
## LR(1) items:
mty_longident -> mod_ext_longident DOT ident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> mod_ext_longident DOT ident

State 1144:
## Known stack suffix:
## ident
## LR(1) items:
mty_longident -> ident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> ident

State 1145:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1146
## Reductions:

State 1146:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1147
## Reductions:

State 1147:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1149
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1148:
## Known stack suffix:
## mty_longident
## LR(1) items:
module_type -> mty_longident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> mty_longident

State 1149:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On WITH shift to state 1150
## Reductions:
-- On error reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On VAL reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On TYPE reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On SEMISEMI reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On RPAREN reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On OPEN reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On MODULE reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On LET reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On INCLUDE reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On EXTERNAL reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On EXCEPTION reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On END reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On DEF reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-- On CLASS reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type

State 1150:
## Known stack suffix:
## module_type WITH
## LR(1) items:
module_type -> module_type WITH . with_constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On TYPE shift to state 1151
-- On MODULE shift to state 1157
-- On with_constraints shift to state 1167
-- On with_constraint shift to state 1170
## Reductions:

State 1151:
## Known stack suffix:
## TYPE
## LR(1) items:
with_constraint -> TYPE . type_parameters label_longident EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 1152
-- On type_parameter shift to state 1027
## Reductions:
-- On UIDENT reduce production type_parameters ->
-- On LIDENT reduce production type_parameters ->

State 1152:
## Known stack suffix:
## TYPE type_parameters
## LR(1) items:
with_constraint -> TYPE type_parameters . label_longident EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 54
-- On mod_longident shift to state 55
-- On label_longident shift to state 1153
## Reductions:

State 1153:
## Known stack suffix:
## TYPE type_parameters label_longident
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident . EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1154
## Reductions:

State 1154:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL . core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 1155
## Reductions:

State 1155:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type . constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 231
-- On AS shift to state 233
-- On constraints shift to state 1156
## Reductions:
-- On error reduce production constraints ->
-- On WITH reduce production constraints ->
-- On VAL reduce production constraints ->
-- On TYPE reduce production constraints ->
-- On SEMISEMI reduce production constraints ->
-- On RPAREN reduce production constraints ->
-- On OPEN reduce production constraints ->
-- On MODULE reduce production constraints ->
-- On LET reduce production constraints ->
-- On INCLUDE reduce production constraints ->
-- On EXTERNAL reduce production constraints ->
-- On EXCEPTION reduce production constraints ->
-- On END reduce production constraints ->
-- On DEF reduce production constraints ->
-- On CONSTRAINT reduce production constraints ->
-- On CLASS reduce production constraints ->
-- On AND reduce production constraints ->

State 1156:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CONSTRAINT CLASS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1089
## Reductions:
-- On error reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On WITH reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On VAL reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On TYPE reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On SEMISEMI reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On RPAREN reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On OPEN reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On MODULE reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On LET reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On INCLUDE reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On EXTERNAL reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On EXCEPTION reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On END reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On DEF reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On CLASS reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints
-- On AND reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints

State 1157:
## Known stack suffix:
## MODULE
## LR(1) items:
with_constraint -> MODULE . mod_longident EQUAL mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 1158
## Reductions:

State 1158:
## Known stack suffix:
## MODULE mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ EQUAL DOT ]
with_constraint -> MODULE mod_longident . EQUAL mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1159
-- On DOT shift to state 304
## Reductions:

State 1159:
## Known stack suffix:
## MODULE mod_longident EQUAL
## LR(1) items:
with_constraint -> MODULE mod_longident EQUAL . mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1160
-- On mod_ext_longident shift to state 1161
## Reductions:

State 1160:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_ext_longident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> UIDENT

State 1161:
## Known stack suffix:
## MODULE mod_longident EQUAL mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
with_constraint -> MODULE mod_longident EQUAL mod_ext_longident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 1162
-- On DOT shift to state 1165
## Reductions:
-- On error reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On WITH reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On VAL reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On TYPE reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On SEMISEMI reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On RPAREN reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On OPEN reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On MODULE reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On LET reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On INCLUDE reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On EXTERNAL reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On EXCEPTION reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On END reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On DEF reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On CLASS reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident
-- On AND reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident

State 1162:
## Known stack suffix:
## mod_ext_longident LPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN . mod_ext_longident RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 122
-- On mod_ext_longident shift to state 1163
## Reductions:

State 1163:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident . RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
## Transitions:
-- On RPAREN shift to state 1164
-- On LPAREN shift to state 156
-- On DOT shift to state 159
## Reductions:

State 1164:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident RPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN

State 1165:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1166
## Reductions:

State 1166:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 1167:
## Known stack suffix:
## module_type WITH with_constraints
## LR(1) items:
module_type -> module_type WITH with_constraints . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
with_constraints -> with_constraints . AND with_constraint [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On AND shift to state 1168
## Reductions:
-- On error reduce production module_type -> module_type WITH with_constraints
-- On WITH reduce production module_type -> module_type WITH with_constraints
-- On VAL reduce production module_type -> module_type WITH with_constraints
-- On TYPE reduce production module_type -> module_type WITH with_constraints
-- On SEMISEMI reduce production module_type -> module_type WITH with_constraints
-- On RPAREN reduce production module_type -> module_type WITH with_constraints
-- On OPEN reduce production module_type -> module_type WITH with_constraints
-- On MODULE reduce production module_type -> module_type WITH with_constraints
-- On LET reduce production module_type -> module_type WITH with_constraints
-- On INCLUDE reduce production module_type -> module_type WITH with_constraints
-- On EXTERNAL reduce production module_type -> module_type WITH with_constraints
-- On EXCEPTION reduce production module_type -> module_type WITH with_constraints
-- On END reduce production module_type -> module_type WITH with_constraints
-- On DEF reduce production module_type -> module_type WITH with_constraints
-- On CLASS reduce production module_type -> module_type WITH with_constraints

State 1168:
## Known stack suffix:
## with_constraints AND
## LR(1) items:
with_constraints -> with_constraints AND . with_constraint [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On TYPE shift to state 1151
-- On MODULE shift to state 1157
-- On with_constraint shift to state 1169
## Reductions:

State 1169:
## Known stack suffix:
## with_constraints AND with_constraint
## LR(1) items:
with_constraints -> with_constraints AND with_constraint . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraints AND with_constraint

State 1170:
## Known stack suffix:
## with_constraint
## LR(1) items:
with_constraints -> with_constraint . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production with_constraints -> with_constraint

State 1171:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
mty_longident -> mod_ext_longident . DOT ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 156
-- On DOT shift to state 1172
## Reductions:

State 1172:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
mty_longident -> mod_ext_longident DOT . ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1173
-- On LIDENT shift to state 127
-- On ident shift to state 1174
## Reductions:

State 1173:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error reduce production ident -> UIDENT
-- On WITH reduce production ident -> UIDENT
-- On VAL reduce production ident -> UIDENT
-- On TYPE reduce production ident -> UIDENT
-- On SEMISEMI reduce production ident -> UIDENT
-- On RPAREN reduce production ident -> UIDENT
-- On OPEN reduce production ident -> UIDENT
-- On MODULE reduce production ident -> UIDENT
-- On LPAREN reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT
-- On LET reduce production ident -> UIDENT
-- On INCLUDE reduce production ident -> UIDENT
-- On EXTERNAL reduce production ident -> UIDENT
-- On EXCEPTION reduce production ident -> UIDENT
-- On END reduce production ident -> UIDENT
-- On DOT reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT
-- On DEF reduce production ident -> UIDENT
-- On CLASS reduce production ident -> UIDENT

State 1174:
## Known stack suffix:
## mod_ext_longident DOT ident
## LR(1) items:
mty_longident -> mod_ext_longident DOT ident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> mod_ext_longident DOT ident

State 1175:
## Known stack suffix:
## ident
## LR(1) items:
mty_longident -> ident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production mty_longident -> ident

State 1176:
## Known stack suffix:
## LPAREN module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
module_type -> LPAREN module_type . RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> LPAREN module_type . error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On error shift to state 1177
-- On WITH shift to state 1150
-- On RPAREN shift to state 1178
## Reductions:

State 1177:
## Known stack suffix:
## LPAREN module_type error
## LR(1) items:
module_type -> LPAREN module_type error . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type error

State 1178:
## Known stack suffix:
## LPAREN module_type RPAREN
## LR(1) items:
module_type -> LPAREN module_type RPAREN . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type RPAREN

State 1179:
## Known stack suffix:
## INCLUDE module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> INCLUDE module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1150
## Reductions:
-- On error reduce production signature_item -> INCLUDE module_type
-- On VAL reduce production signature_item -> INCLUDE module_type
-- On TYPE reduce production signature_item -> INCLUDE module_type
-- On SEMISEMI reduce production signature_item -> INCLUDE module_type
-- On OPEN reduce production signature_item -> INCLUDE module_type
-- On MODULE reduce production signature_item -> INCLUDE module_type
-- On INCLUDE reduce production signature_item -> INCLUDE module_type
-- On EXTERNAL reduce production signature_item -> INCLUDE module_type
-- On EXCEPTION reduce production signature_item -> INCLUDE module_type
-- On END reduce production signature_item -> INCLUDE module_type
-- On CLASS reduce production signature_item -> INCLUDE module_type

State 1180:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
signature_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 1181
## Reductions:

State 1181:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
signature_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1182
## Reductions:

State 1182:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1183
## Reductions:

State 1183:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
signature_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On EQUAL shift to state 1184
-- On AS shift to state 169
## Reductions:

State 1184:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STRING shift to state 1185
-- On primitive_declaration shift to state 1187
## Reductions:

State 1185:
## Known stack suffix:
## STRING
## LR(1) items:
primitive_declaration -> STRING . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
primitive_declaration -> STRING . primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On STRING shift to state 1185
-- On primitive_declaration shift to state 1186
## Reductions:
-- On error reduce production primitive_declaration -> STRING
-- On VAL reduce production primitive_declaration -> STRING
-- On TYPE reduce production primitive_declaration -> STRING
-- On SEMISEMI reduce production primitive_declaration -> STRING
-- On OPEN reduce production primitive_declaration -> STRING
-- On MODULE reduce production primitive_declaration -> STRING
-- On LET reduce production primitive_declaration -> STRING
-- On INCLUDE reduce production primitive_declaration -> STRING
-- On EXTERNAL reduce production primitive_declaration -> STRING
-- On EXCEPTION reduce production primitive_declaration -> STRING
-- On END reduce production primitive_declaration -> STRING
-- On DEF reduce production primitive_declaration -> STRING
-- On CLASS reduce production primitive_declaration -> STRING

State 1186:
## Known stack suffix:
## STRING primitive_declaration
## LR(1) items:
primitive_declaration -> STRING primitive_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_declaration -> STRING primitive_declaration

State 1187:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1188:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
signature_item -> EXCEPTION . UIDENT constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1189
## Reductions:

State 1189:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
signature_item -> EXCEPTION UIDENT . constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On OF shift to state 1071
-- On constructor_arguments shift to state 1190
## Reductions:
-- On error reduce production constructor_arguments ->
-- On VAL reduce production constructor_arguments ->
-- On TYPE reduce production constructor_arguments ->
-- On SEMISEMI reduce production constructor_arguments ->
-- On OPEN reduce production constructor_arguments ->
-- On MODULE reduce production constructor_arguments ->
-- On INCLUDE reduce production constructor_arguments ->
-- On EXTERNAL reduce production constructor_arguments ->
-- On EXCEPTION reduce production constructor_arguments ->
-- On END reduce production constructor_arguments ->
-- On CLASS reduce production constructor_arguments ->

State 1190:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
signature_item -> EXCEPTION UIDENT constructor_arguments . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXCEPTION UIDENT constructor_arguments

State 1191:
## Known stack suffix:
## SIG signature END
## LR(1) items:
module_type -> SIG signature END . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature END

State 1192:
## Known stack suffix:
## CLASS
## LR(1) items:
signature_item -> CLASS . class_type_list END [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1193
-- On virtual_flag shift to state 1194
-- On class_type_list shift to state 1242
-- On class_type shift to state 1246
## Reductions:
-- On QUOTE reduce production virtual_flag ->
-- On LPAREN reduce production virtual_flag ->
-- On LIDENT reduce production virtual_flag ->
-- On CLOSED reduce production virtual_flag ->

State 1193:
## Known stack suffix:
## VIRTUAL
## LR(1) items:
virtual_flag -> VIRTUAL . [ QUOTE LPAREN LIDENT CLOSED ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production virtual_flag -> VIRTUAL

State 1194:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_type -> virtual_flag . closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On CLOSED shift to state 1195
-- On closed_flag shift to state 1196
## Reductions:
-- On QUOTE reduce production closed_flag ->
-- On LPAREN reduce production closed_flag ->
-- On LIDENT reduce production closed_flag ->

State 1195:
## Known stack suffix:
## CLOSED
## LR(1) items:
closed_flag -> CLOSED . [ QUOTE LPAREN LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production closed_flag -> CLOSED

State 1196:
## Known stack suffix:
## virtual_flag closed_flag
## LR(1) items:
class_type -> virtual_flag closed_flag . class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 1197
-- On type_parameter shift to state 1027
-- On class_type_parameters shift to state 1198
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 1197:
## Known stack suffix:
## type_parameters
## LR(1) items:
class_type_parameters -> type_parameters . [ LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_parameters -> type_parameters

State 1198:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters . LIDENT type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On LIDENT shift to state 1199
## Reductions:

State 1199:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT . type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On LPAREN shift to state 1200
-- On type_list shift to state 1204
## Reductions:

State 1200:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_list -> LPAREN . core_type RPAREN type_list [ EQUAL COLON ]
type_list -> LPAREN . core_type RPAREN [ EQUAL COLON ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1201
## Reductions:

State 1201:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER AS ]
type_list -> LPAREN core_type . RPAREN type_list [ EQUAL COLON ]
type_list -> LPAREN core_type . RPAREN [ EQUAL COLON ]
## Transitions:
-- On RPAREN shift to state 1202
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:

State 1202:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
type_list -> LPAREN core_type RPAREN . type_list [ EQUAL COLON ]
type_list -> LPAREN core_type RPAREN . [ EQUAL COLON ]
## Transitions:
-- On LPAREN shift to state 1200
-- On type_list shift to state 1203
## Reductions:
-- On EQUAL reduce production type_list -> LPAREN core_type RPAREN
-- On COLON reduce production type_list -> LPAREN core_type RPAREN

State 1203:
## Known stack suffix:
## LPAREN core_type RPAREN type_list
## LR(1) items:
type_list -> LPAREN core_type RPAREN type_list . [ EQUAL COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_list -> LPAREN core_type RPAREN type_list

State 1204:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list . self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On COLON shift to state 1205
-- On self_type shift to state 1207
## Reductions:
-- On EQUAL reduce production self_type ->

State 1205:
## Known stack suffix:
## COLON
## LR(1) items:
self_type -> COLON . type_parameter [ EQUAL ]
## Transitions:
-- On QUOTE shift to state 170
-- On type_parameter shift to state 1206
## Reductions:

State 1206:
## Known stack suffix:
## COLON type_parameter
## LR(1) items:
self_type -> COLON type_parameter . [ EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production self_type -> COLON type_parameter

State 1207:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type . EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On EQUAL shift to state 1208
## Reductions:

State 1208:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL . constraints class_type_fields [ END AND ]
## Transitions:
-- On constraints shift to state 1209
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 1209:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints . class_type_fields [ END AND ]
constraints -> constraints . CONSTRAINT constrain [ VIRTUAL VAL METHOD INHERIT END CONSTRAINT AND ]
## Transitions:
-- On CONSTRAINT shift to state 1022
-- On class_type_fields shift to state 1210
## Reductions:
-- On VIRTUAL reduce production class_type_fields ->
-- On VAL reduce production class_type_fields ->
-- On METHOD reduce production class_type_fields ->
-- On INHERIT reduce production class_type_fields ->
-- On END reduce production class_type_fields ->
-- On AND reduce production class_type_fields ->

State 1210:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields . [ END AND ]
class_type_fields -> class_type_fields . INHERIT ancestor_type [ VIRTUAL VAL METHOD INHERIT END AND ]
class_type_fields -> class_type_fields . VAL value_type [ VIRTUAL VAL METHOD INHERIT END AND ]
class_type_fields -> class_type_fields . virtual_method [ VIRTUAL VAL METHOD INHERIT END AND ]
class_type_fields -> class_type_fields . method_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On VIRTUAL shift to state 1211
-- On VAL shift to state 1217
-- On METHOD shift to state 1225
-- On INHERIT shift to state 1230
-- On virtual_method shift to state 1240
-- On method_type shift to state 1241
## Reductions:
-- On END reduce production class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields
-- On AND reduce production class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields

State 1211:
## Known stack suffix:
## VIRTUAL
## LR(1) items:
virtual_method -> VIRTUAL . protected_flag label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1212
-- On protected_flag shift to state 1213
## Reductions:
-- On LIDENT reduce production protected_flag ->

State 1212:
## Known stack suffix:
## PROTECTED
## LR(1) items:
protected_flag -> PROTECTED . [ LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production protected_flag -> PROTECTED

State 1213:
## Known stack suffix:
## VIRTUAL protected_flag
## LR(1) items:
virtual_method -> VIRTUAL protected_flag . label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 1214
## Reductions:

State 1214:
## Known stack suffix:
## VIRTUAL protected_flag label
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label . COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1215
## Reductions:

State 1215:
## Known stack suffix:
## VIRTUAL protected_flag label COLON
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label COLON . core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1216
## Reductions:

State 1216:
## Known stack suffix:
## VIRTUAL protected_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
virtual_method -> VIRTUAL protected_flag label COLON core_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On VIRTUAL reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On VAL reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On METHOD reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On INHERIT reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On END reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On AND reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type

State 1217:
## Known stack suffix:
## class_type_fields VAL
## LR(1) items:
class_type_fields -> class_type_fields VAL . value_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PRIVATE shift to state 1218
-- On value_type shift to state 1219
-- On private_flag shift to state 1220
## Reductions:
-- On MUTABLE reduce production private_flag ->
-- On LIDENT reduce production private_flag ->

State 1218:
## Known stack suffix:
## PRIVATE
## LR(1) items:
private_flag -> PRIVATE . [ MUTABLE LIDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production private_flag -> PRIVATE

State 1219:
## Known stack suffix:
## class_type_fields VAL value_type
## LR(1) items:
class_type_fields -> class_type_fields VAL value_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_fields -> class_type_fields VAL value_type

State 1220:
## Known stack suffix:
## private_flag
## LR(1) items:
value_type -> private_flag . mutable_flag label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
value_type -> private_flag . mutable_flag label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MUTABLE shift to state 984
-- On mutable_flag shift to state 1221
## Reductions:
-- On LIDENT reduce production mutable_flag ->

State 1221:
## Known stack suffix:
## private_flag mutable_flag
## LR(1) items:
value_type -> private_flag mutable_flag . label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
value_type -> private_flag mutable_flag . label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 1222
## Reductions:

State 1222:
## Known stack suffix:
## private_flag mutable_flag label
## LR(1) items:
value_type -> private_flag mutable_flag label . COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
value_type -> private_flag mutable_flag label . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1223
## Reductions:
-- On VIRTUAL reduce production value_type -> private_flag mutable_flag label
-- On VAL reduce production value_type -> private_flag mutable_flag label
-- On METHOD reduce production value_type -> private_flag mutable_flag label
-- On INHERIT reduce production value_type -> private_flag mutable_flag label
-- On END reduce production value_type -> private_flag mutable_flag label
-- On AND reduce production value_type -> private_flag mutable_flag label

State 1223:
## Known stack suffix:
## private_flag mutable_flag label COLON
## LR(1) items:
value_type -> private_flag mutable_flag label COLON . core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1224
## Reductions:

State 1224:
## Known stack suffix:
## private_flag mutable_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
value_type -> private_flag mutable_flag label COLON core_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On VIRTUAL reduce production value_type -> private_flag mutable_flag label COLON core_type
-- On VAL reduce production value_type -> private_flag mutable_flag label COLON core_type
-- On METHOD reduce production value_type -> private_flag mutable_flag label COLON core_type
-- On INHERIT reduce production value_type -> private_flag mutable_flag label COLON core_type
-- On END reduce production value_type -> private_flag mutable_flag label COLON core_type
-- On AND reduce production value_type -> private_flag mutable_flag label COLON core_type

State 1225:
## Known stack suffix:
## METHOD
## LR(1) items:
method_type -> METHOD . protected_flag label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
method_type -> METHOD . protected_flag label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1212
-- On protected_flag shift to state 1226
## Reductions:
-- On LIDENT reduce production protected_flag ->

State 1226:
## Known stack suffix:
## METHOD protected_flag
## LR(1) items:
method_type -> METHOD protected_flag . label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
method_type -> METHOD protected_flag . label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 1227
## Reductions:

State 1227:
## Known stack suffix:
## METHOD protected_flag label
## LR(1) items:
method_type -> METHOD protected_flag label . COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
method_type -> METHOD protected_flag label . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1228
## Reductions:
-- On VIRTUAL reduce production method_type -> METHOD protected_flag label
-- On VAL reduce production method_type -> METHOD protected_flag label
-- On METHOD reduce production method_type -> METHOD protected_flag label
-- On INHERIT reduce production method_type -> METHOD protected_flag label
-- On END reduce production method_type -> METHOD protected_flag label
-- On AND reduce production method_type -> METHOD protected_flag label

State 1228:
## Known stack suffix:
## METHOD protected_flag label COLON
## LR(1) items:
method_type -> METHOD protected_flag label COLON . core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1229
## Reductions:

State 1229:
## Known stack suffix:
## METHOD protected_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
method_type -> METHOD protected_flag label COLON core_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On VIRTUAL reduce production method_type -> METHOD protected_flag label COLON core_type
-- On VAL reduce production method_type -> METHOD protected_flag label COLON core_type
-- On METHOD reduce production method_type -> METHOD protected_flag label COLON core_type
-- On INHERIT reduce production method_type -> METHOD protected_flag label COLON core_type
-- On END reduce production method_type -> METHOD protected_flag label COLON core_type
-- On AND reduce production method_type -> METHOD protected_flag label COLON core_type

State 1230:
## Known stack suffix:
## class_type_fields INHERIT
## LR(1) items:
class_type_fields -> class_type_fields INHERIT . ancestor_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 1231
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 1238
-- On ancestor_type shift to state 1239
## Reductions:

State 1231:
## Known stack suffix:
## LPAREN
## LR(1) items:
ancestor_type -> LPAREN . core_type_comma_list RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
ancestor_type -> LPAREN . core_type RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type_comma_list shift to state 1232
-- On core_type shift to state 1235
## Reductions:

State 1232:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
ancestor_type -> LPAREN core_type_comma_list . RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1233
-- On COMMA shift to state 191
## Reductions:

State 1233:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
ancestor_type -> LPAREN core_type_comma_list RPAREN . class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 1234
## Reductions:

State 1234:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident
## LR(1) items:
ancestor_type -> LPAREN core_type_comma_list RPAREN class_longident . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ancestor_type -> LPAREN core_type_comma_list RPAREN class_longident

State 1235:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
ancestor_type -> LPAREN core_type . RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1236
-- On MINUSGREATER shift to state 167
-- On COMMA shift to state 195
-- On AS shift to state 169
## Reductions:

State 1236:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
ancestor_type -> LPAREN core_type RPAREN . class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 1237
## Reductions:

State 1237:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident
## LR(1) items:
ancestor_type -> LPAREN core_type RPAREN class_longident . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ancestor_type -> LPAREN core_type RPAREN class_longident

State 1238:
## Known stack suffix:
## class_longident
## LR(1) items:
ancestor_type -> class_longident . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ancestor_type -> class_longident

State 1239:
## Known stack suffix:
## class_type_fields INHERIT ancestor_type
## LR(1) items:
class_type_fields -> class_type_fields INHERIT ancestor_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_fields -> class_type_fields INHERIT ancestor_type

State 1240:
## Known stack suffix:
## class_type_fields virtual_method
## LR(1) items:
class_type_fields -> class_type_fields virtual_method . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_fields -> class_type_fields virtual_method

State 1241:
## Known stack suffix:
## class_type_fields method_type
## LR(1) items:
class_type_fields -> class_type_fields method_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_fields -> class_type_fields method_type

State 1242:
## Known stack suffix:
## CLASS class_type_list
## LR(1) items:
class_type_list -> class_type_list . AND class_type [ END AND ]
signature_item -> CLASS class_type_list . END [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On END shift to state 1243
-- On AND shift to state 1244
## Reductions:

State 1243:
## Known stack suffix:
## CLASS class_type_list END
## LR(1) items:
signature_item -> CLASS class_type_list END . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> CLASS class_type_list END

State 1244:
## Known stack suffix:
## class_type_list AND
## LR(1) items:
class_type_list -> class_type_list AND . class_type [ END AND ]
## Transitions:
-- On VIRTUAL shift to state 1193
-- On virtual_flag shift to state 1194
-- On class_type shift to state 1245
## Reductions:
-- On QUOTE reduce production virtual_flag ->
-- On LPAREN reduce production virtual_flag ->
-- On LIDENT reduce production virtual_flag ->
-- On CLOSED reduce production virtual_flag ->

State 1245:
## Known stack suffix:
## class_type_list AND class_type
## LR(1) items:
class_type_list -> class_type_list AND class_type . [ END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_list -> class_type_list AND class_type

State 1246:
## Known stack suffix:
## class_type
## LR(1) items:
class_type_list -> class_type . [ END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_type_list -> class_type

State 1247:
## Known stack suffix:
## signature signature_item
## LR(1) items:
signature -> signature signature_item . [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature signature_item . SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On SEMISEMI shift to state 1248
## Reductions:
-- On error reduce production signature -> signature signature_item
-- On VAL reduce production signature -> signature signature_item
-- On TYPE reduce production signature -> signature signature_item
-- On OPEN reduce production signature -> signature signature_item
-- On MODULE reduce production signature -> signature signature_item
-- On INCLUDE reduce production signature -> signature signature_item
-- On EXTERNAL reduce production signature -> signature signature_item
-- On EXCEPTION reduce production signature -> signature signature_item
-- On END reduce production signature -> signature signature_item
-- On CLASS reduce production signature -> signature signature_item

State 1248:
## Known stack suffix:
## signature signature_item SEMISEMI
## LR(1) items:
signature -> signature signature_item SEMISEMI . [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> signature signature_item SEMISEMI

State 1249:
## Known stack suffix:
## LPAREN module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
module_type -> LPAREN module_type . RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
module_type -> LPAREN module_type . error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
-- On error shift to state 1250
-- On WITH shift to state 1150
-- On RPAREN shift to state 1251
## Reductions:

State 1250:
## Known stack suffix:
## LPAREN module_type error
## LR(1) items:
module_type -> LPAREN module_type error . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type error

State 1251:
## Known stack suffix:
## LPAREN module_type RPAREN
## LR(1) items:
module_type -> LPAREN module_type RPAREN . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> LPAREN module_type RPAREN

State 1252:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type . RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1253
## Reductions:

State 1253:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN . module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1102
-- On COLON shift to state 1254
-- On module_declaration shift to state 1256
## Reductions:

State 1254:
## Known stack suffix:
## COLON
## LR(1) items:
module_declaration -> COLON . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1255
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1255:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_declaration -> COLON module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1150
## Reductions:
-- On error reduce production module_declaration -> COLON module_type
-- On VAL reduce production module_declaration -> COLON module_type
-- On TYPE reduce production module_declaration -> COLON module_type
-- On SEMISEMI reduce production module_declaration -> COLON module_type
-- On OPEN reduce production module_declaration -> COLON module_type
-- On MODULE reduce production module_declaration -> COLON module_type
-- On INCLUDE reduce production module_declaration -> COLON module_type
-- On EXTERNAL reduce production module_declaration -> COLON module_type
-- On EXCEPTION reduce production module_declaration -> COLON module_type
-- On END reduce production module_declaration -> COLON module_type
-- On CLASS reduce production module_declaration -> COLON module_type

State 1256:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_declaration
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration

State 1257:
## Known stack suffix:
## MODULE UIDENT module_declaration
## LR(1) items:
signature_item -> MODULE UIDENT module_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> MODULE UIDENT module_declaration

State 1258:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
signature_item -> MODULE TYPE . ident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE . ident EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 126
-- On LIDENT shift to state 127
-- On ident shift to state 1259
## Reductions:

State 1259:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
signature_item -> MODULE TYPE ident . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE ident . EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On EQUAL shift to state 1260
## Reductions:
-- On error reduce production signature_item -> MODULE TYPE ident
-- On VAL reduce production signature_item -> MODULE TYPE ident
-- On TYPE reduce production signature_item -> MODULE TYPE ident
-- On SEMISEMI reduce production signature_item -> MODULE TYPE ident
-- On OPEN reduce production signature_item -> MODULE TYPE ident
-- On MODULE reduce production signature_item -> MODULE TYPE ident
-- On INCLUDE reduce production signature_item -> MODULE TYPE ident
-- On EXTERNAL reduce production signature_item -> MODULE TYPE ident
-- On EXCEPTION reduce production signature_item -> MODULE TYPE ident
-- On END reduce production signature_item -> MODULE TYPE ident
-- On CLASS reduce production signature_item -> MODULE TYPE ident

State 1260:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
signature_item -> MODULE TYPE ident EQUAL . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1261
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1261:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE ident EQUAL module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1150
## Reductions:
-- On error reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On VAL reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On TYPE reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On SEMISEMI reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On OPEN reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On MODULE reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On INCLUDE reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On EXTERNAL reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On EXCEPTION reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On END reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On CLASS reduce production signature_item -> MODULE TYPE ident EQUAL module_type

State 1262:
## Known stack suffix:
## SIG signature END
## LR(1) items:
module_type -> SIG signature END . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_type -> SIG signature END

State 1263:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type . RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1264
## Reductions:

State 1264:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN . module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1037
-- On EQUAL shift to state 1265
-- On COLON shift to state 1482
-- On module_binding shift to state 1486
## Reductions:

State 1265:
## Known stack suffix:
## EQUAL
## LR(1) items:
module_binding -> EQUAL . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 1266
-- On LPAREN shift to state 1460
-- On FUNCTOR shift to state 1468
-- On module_expr shift to state 1481
-- On mod_longident shift to state 1480
## Reductions:

State 1266:
## Known stack suffix:
## STRUCT
## LR(1) items:
module_expr -> STRUCT . structure END [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> STRUCT . structure error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TYPE shift to state 1267
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On SEMISEMI shift to state 1269
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On OPEN shift to state 1270
-- On NEW shift to state 23
-- On MODULE shift to state 1272
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 1281
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EXTERNAL shift to state 1284
-- On EXCEPTION shift to state 1290
-- On DEF shift to state 1293
-- On CLASS shift to state 1344
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On structure_tail shift to state 1408
-- On structure_item shift to state 1409
-- On structure shift to state 1457
-- On simple_expr shift to state 481
-- On seq_expr shift to state 1419
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:
-- On error reduce production structure_tail ->
-- On END reduce production structure_tail ->

State 1267:
## Known stack suffix:
## TYPE
## LR(1) items:
structure_item -> TYPE . type_declarations [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 1049
-- On type_parameter shift to state 1027
-- On type_declarations shift to state 1268
-- On type_declaration shift to state 1097
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 1268:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
structure_item -> TYPE type_declarations . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
type_declarations -> type_declarations . AND type_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On AND shift to state 1095
## Reductions:
-- On error reduce production structure_item -> TYPE type_declarations
-- On TYPE reduce production structure_item -> TYPE type_declarations
-- On SEMISEMI reduce production structure_item -> TYPE type_declarations
-- On OPEN reduce production structure_item -> TYPE type_declarations
-- On MODULE reduce production structure_item -> TYPE type_declarations
-- On LET reduce production structure_item -> TYPE type_declarations
-- On EXTERNAL reduce production structure_item -> TYPE type_declarations
-- On EXCEPTION reduce production structure_item -> TYPE type_declarations
-- On END reduce production structure_item -> TYPE type_declarations
-- On DEF reduce production structure_item -> TYPE type_declarations
-- On CLASS reduce production structure_item -> TYPE type_declarations

State 1269:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
structure_tail -> SEMISEMI . [ error END ]
structure_tail -> SEMISEMI . seq_expr structure_tail [ error END ]
structure_tail -> SEMISEMI . structure_item structure_tail [ error END ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TYPE shift to state 1267
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On OPEN shift to state 1270
-- On NEW shift to state 23
-- On MODULE shift to state 1272
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 1281
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EXTERNAL shift to state 1284
-- On EXCEPTION shift to state 1290
-- On DEF shift to state 1293
-- On CLASS shift to state 1344
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On structure_item shift to state 1453
-- On simple_expr shift to state 481
-- On seq_expr shift to state 1455
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:
-- On error reduce production structure_tail -> SEMISEMI
-- On END reduce production structure_tail -> SEMISEMI

State 1270:
## Known stack suffix:
## OPEN
## LR(1) items:
structure_item -> OPEN . mod_longident [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On mod_longident shift to state 1271
## Reductions:

State 1271:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DOT DEF CLASS ]
structure_item -> OPEN mod_longident . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On DOT shift to state 77
## Reductions:
-- On error reduce production structure_item -> OPEN mod_longident
-- On TYPE reduce production structure_item -> OPEN mod_longident
-- On SEMISEMI reduce production structure_item -> OPEN mod_longident
-- On OPEN reduce production structure_item -> OPEN mod_longident
-- On MODULE reduce production structure_item -> OPEN mod_longident
-- On LET reduce production structure_item -> OPEN mod_longident
-- On EXTERNAL reduce production structure_item -> OPEN mod_longident
-- On EXCEPTION reduce production structure_item -> OPEN mod_longident
-- On END reduce production structure_item -> OPEN mod_longident
-- On DEF reduce production structure_item -> OPEN mod_longident
-- On CLASS reduce production structure_item -> OPEN mod_longident

State 1272:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
structure_item -> MODULE . TYPE ident EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1273
-- On TYPE shift to state 1449
## Reductions:

State 1273:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1274
-- On EQUAL shift to state 1279
-- On COLON shift to state 1443
-- On module_binding shift to state 1448
## Reductions:

State 1274:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_binding -> LPAREN . UIDENT COLON module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1275
## Reductions:

State 1275:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_binding -> LPAREN UIDENT . COLON module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On COLON shift to state 1276
## Reductions:

State 1276:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_binding -> LPAREN UIDENT COLON . module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1277
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1277:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type . RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1278
## Reductions:

State 1278:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN . module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1274
-- On EQUAL shift to state 1279
-- On COLON shift to state 1443
-- On module_binding shift to state 1447
## Reductions:

State 1279:
## Known stack suffix:
## EQUAL
## LR(1) items:
module_binding -> EQUAL . module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On STRUCT shift to state 1280
-- On LPAREN shift to state 1421
-- On FUNCTOR shift to state 1422
-- On module_expr shift to state 1442
-- On mod_longident shift to state 1434
## Reductions:

State 1280:
## Known stack suffix:
## STRUCT
## LR(1) items:
module_expr -> STRUCT . structure END [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> STRUCT . structure error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TYPE shift to state 1267
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On SEMISEMI shift to state 1269
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On OPEN shift to state 1270
-- On NEW shift to state 23
-- On MODULE shift to state 1272
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 1281
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On EXTERNAL shift to state 1284
-- On EXCEPTION shift to state 1290
-- On DEF shift to state 1293
-- On CLASS shift to state 1344
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On structure_tail shift to state 1408
-- On structure_item shift to state 1409
-- On structure shift to state 1416
-- On simple_expr shift to state 481
-- On seq_expr shift to state 1419
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:
-- On error reduce production structure_tail ->
-- On END reduce production structure_tail ->

State 1281:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . rec_flag let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 1282
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 1282:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET rec_flag . let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 289
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 308
-- On mod_longident shift to state 303
-- On let_bindings shift to state 1283
-- On let_binding shift to state 801
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 1283:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On error shift to state 848
-- On IN shift to state 849
-- On AND shift to state 799
## Reductions:
-- On TYPE reduce production structure_item -> LET rec_flag let_bindings
-- On SEMISEMI reduce production structure_item -> LET rec_flag let_bindings
-- On OPEN reduce production structure_item -> LET rec_flag let_bindings
-- On MODULE reduce production structure_item -> LET rec_flag let_bindings
-- On LET reduce production structure_item -> LET rec_flag let_bindings
-- On EXTERNAL reduce production structure_item -> LET rec_flag let_bindings
-- On EXCEPTION reduce production structure_item -> LET rec_flag let_bindings
-- On END reduce production structure_item -> LET rec_flag let_bindings
-- On DEF reduce production structure_item -> LET rec_flag let_bindings
-- On CLASS reduce production structure_item -> LET rec_flag let_bindings

State 1284:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
structure_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 1285
## Reductions:

State 1285:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
structure_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On COLON shift to state 1286
## Reductions:

State 1286:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1287
## Reductions:

State 1287:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
structure_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On EQUAL shift to state 1288
-- On AS shift to state 169
## Reductions:

State 1288:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On STRING shift to state 1185
-- On primitive_declaration shift to state 1289
## Reductions:

State 1289:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1290:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
structure_item -> EXCEPTION . UIDENT constructor_arguments [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1291
## Reductions:

State 1291:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
structure_item -> EXCEPTION UIDENT . constructor_arguments [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On OF shift to state 1071
-- On constructor_arguments shift to state 1292
## Reductions:
-- On error reduce production constructor_arguments ->
-- On TYPE reduce production constructor_arguments ->
-- On SEMISEMI reduce production constructor_arguments ->
-- On OPEN reduce production constructor_arguments ->
-- On MODULE reduce production constructor_arguments ->
-- On LET reduce production constructor_arguments ->
-- On EXTERNAL reduce production constructor_arguments ->
-- On EXCEPTION reduce production constructor_arguments ->
-- On END reduce production constructor_arguments ->
-- On DEF reduce production constructor_arguments ->
-- On CLASS reduce production constructor_arguments ->

State 1292:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
structure_item -> EXCEPTION UIDENT constructor_arguments . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXCEPTION UIDENT constructor_arguments

State 1293:
## Known stack suffix:
## DEF
## LR(1) items:
expr -> DEF . def_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> DEF . def_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 1294
-- On def_bindings shift to state 1340
-- On def_binding shift to state 1343
## Reductions:

State 1294:
## Known stack suffix:
## join_pattern
## LR(1) items:
def_binding -> join_pattern . EQUAL process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
join_pattern -> join_pattern . BAR join_pattern [ EQUAL BAR ]
## Transitions:
-- On EQUAL shift to state 1295
-- On BAR shift to state 597
## Reductions:

State 1295:
## Known stack suffix:
## join_pattern EQUAL
## LR(1) items:
def_binding -> join_pattern EQUAL . process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 1296
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 1301
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 1305
-- On LBRACEBAR shift to state 1306
-- On INT shift to state 258
-- On IF shift to state 1309
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 1325
-- On CHAR shift to state 357
-- On BEGIN shift to state 1328
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 1317
-- On process0 shift to state 1333
-- On process shift to state 1339
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On error reduce production process ->
-- On TYPE reduce production process ->
-- On SEMISEMI reduce production process ->
-- On OPEN reduce production process ->
-- On MODULE reduce production process ->
-- On IN reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On AND reduce production process ->

State 1296:
## Known stack suffix:
## REPLY
## LR(1) items:
process0 -> REPLY . static_expr to_ident [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_expr shift to state 1297
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 1297:
## Known stack suffix:
## REPLY static_expr
## LR(1) items:
process0 -> REPLY static_expr . to_ident [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
static_expr -> static_expr . DOT label_longident [ error TYPE TO SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DOT DEF CLASS BAR AND ]
## Transitions:
-- On TO shift to state 1298
-- On DOT shift to state 333
-- On to_ident shift to state 1300
## Reductions:
-- On error reduce production to_ident ->
-- On TYPE reduce production to_ident ->
-- On SEMISEMI reduce production to_ident ->
-- On OPEN reduce production to_ident ->
-- On MODULE reduce production to_ident ->
-- On LET reduce production to_ident ->
-- On IN reduce production to_ident ->
-- On EXTERNAL reduce production to_ident ->
-- On EXCEPTION reduce production to_ident ->
-- On END reduce production to_ident ->
-- On ELSE reduce production to_ident ->
-- On DEF reduce production to_ident ->
-- On CLASS reduce production to_ident ->
-- On BAR reduce production to_ident ->
-- On AND reduce production to_ident ->

State 1298:
## Known stack suffix:
## TO
## LR(1) items:
to_ident -> TO . LIDENT [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 1299
## Reductions:

State 1299:
## Known stack suffix:
## TO LIDENT
## LR(1) items:
to_ident -> TO LIDENT . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production to_ident -> TO LIDENT

State 1300:
## Known stack suffix:
## REPLY static_expr to_ident
## LR(1) items:
process0 -> REPLY static_expr to_ident . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> REPLY static_expr to_ident

State 1301:
## Known stack suffix:
## LET
## LR(1) items:
process -> LET . rec_flag let_bindings IN process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 1302
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 1302:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
process -> LET rec_flag . let_bindings IN process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 401
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 809
-- On mod_longident shift to state 303
-- On let_bindings shift to state 1303
-- On let_binding shift to state 819
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 1303:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
process -> LET rec_flag let_bindings . IN process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On IN shift to state 1304
-- On AND shift to state 817
## Reductions:

State 1304:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
process -> LET rec_flag let_bindings IN . process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 1296
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 1301
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 1305
-- On LBRACEBAR shift to state 1306
-- On INT shift to state 258
-- On IF shift to state 1309
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 1325
-- On CHAR shift to state 357
-- On BEGIN shift to state 1328
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 1317
-- On process0 shift to state 1333
-- On process shift to state 1338
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On error reduce production process ->
-- On TYPE reduce production process ->
-- On SEMISEMI reduce production process ->
-- On OPEN reduce production process ->
-- On MODULE reduce production process ->
-- On IN reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On AND reduce production process ->

State 1305:
## Known stack suffix:
## LBRACEBARBARRBRACE
## LR(1) items:
process0 -> LBRACEBARBARRBRACE . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> LBRACEBARBARRBRACE

State 1306:
## Known stack suffix:
## LBRACEBAR
## LR(1) items:
process0 -> LBRACEBAR . process BARRBRACE [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 399
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 440
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 469
-- On CHAR shift to state 357
-- On BEGIN shift to state 472
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 588
-- On process shift to state 1307
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On BARRBRACE reduce production process ->

State 1307:
## Known stack suffix:
## LBRACEBAR process
## LR(1) items:
process0 -> LBRACEBAR process . BARRBRACE [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On BARRBRACE shift to state 1308
## Reductions:

State 1308:
## Known stack suffix:
## LBRACEBAR process BARRBRACE
## LR(1) items:
process0 -> LBRACEBAR process BARRBRACE . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> LBRACEBAR process BARRBRACE

State 1309:
## Known stack suffix:
## IF
## LR(1) items:
process -> IF . expr THEN process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
process0 -> IF . expr THEN process0 ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 1310
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 1310:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
process -> IF expr . THEN process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
process0 -> IF expr . THEN process0 ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS BAR AND ]
## Transitions:
-- On THEN shift to state 1311
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:

State 1311:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process -> IF expr THEN . process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
process0 -> IF expr THEN . process0 ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 1296
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 1305
-- On LBRACEBAR shift to state 1306
-- On INT shift to state 258
-- On IF shift to state 1312
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 1317
-- On process0 shift to state 1324
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 1312:
## Known stack suffix:
## IF
## LR(1) items:
process0 -> IF . expr THEN process0 ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On NEW shift to state 9
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 403
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 635
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On simple_expr shift to state 640
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 1313
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 1313:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> expr . COLONCOLON expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP0 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESSGREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP1 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP2 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP3 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . INFIXOP4 expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . SUBTRACTIVE expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . STAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . EQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . LESS expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . GREATER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . OR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . BARBAR expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERSAND expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . AMPERAMPER expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr -> expr . COLONEQUAL expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ THEN SUBTRACTIVE STAR OR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
process0 -> IF expr . THEN process0 ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On THEN shift to state 1314
-- On SUBTRACTIVE shift to state 656
-- On STAR shift to state 658
-- On OR shift to state 666
-- On LESSGREATER shift to state 668
-- On LESS shift to state 676
-- On INFIXOP4 shift to state 660
-- On INFIXOP3 shift to state 664
-- On INFIXOP2 shift to state 670
-- On INFIXOP1 shift to state 672
-- On INFIXOP0 shift to state 678
-- On GREATER shift to state 680
-- On EQUAL shift to state 682
-- On COMMA shift to state 691
-- On COLONEQUAL shift to state 693
-- On COLONCOLON shift to state 674
-- On BARBAR shift to state 684
-- On AMPERSAND shift to state 686
-- On AMPERAMPER shift to state 688
## Reductions:

State 1314:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process0 -> IF expr THEN . process0 ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 320
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 438
-- On LBRACEBAR shift to state 439
-- On INT shift to state 258
-- On IF shift to state 741
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 579
-- On process0 shift to state 1315
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 1315:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process0 -> IF expr THEN process0 . ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On ELSE shift to state 1316
## Reductions:

State 1316:
## Known stack suffix:
## IF expr THEN process0 ELSE
## LR(1) items:
process0 -> IF expr THEN process0 ELSE . process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 1296
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 1305
-- On LBRACEBAR shift to state 1306
-- On INT shift to state 258
-- On IF shift to state 1312
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 357
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 1317
-- On process0 shift to state 1323
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:

State 1317:
## Known stack suffix:
## static_expr
## LR(1) items:
process0 -> static_expr . LESSLESSGREATERGREATER [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
process0 -> static_expr . LESSLESS static_comma_list GREATERGREATER [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
process0 -> static_expr . LESSLESS static_comma_list error [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
static_expr -> static_expr . DOT label_longident [ LESSLESSGREATERGREATER LESSLESS DOT ]
## Transitions:
-- On LESSLESSGREATERGREATER shift to state 1318
-- On LESSLESS shift to state 1319
-- On DOT shift to state 362
## Reductions:

State 1318:
## Known stack suffix:
## static_expr LESSLESSGREATERGREATER
## LR(1) items:
process0 -> static_expr LESSLESSGREATERGREATER . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> static_expr LESSLESSGREATERGREATER

State 1319:
## Known stack suffix:
## static_expr LESSLESS
## LR(1) items:
process0 -> static_expr LESSLESS . static_comma_list GREATERGREATER [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
process0 -> static_expr LESSLESS . static_comma_list error [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On LPAREN shift to state 323
-- On LIDENT shift to state 47
-- On LBRACKETBAR shift to state 325
-- On LBRACKET shift to state 326
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On val_longident shift to state 328
-- On val_ident shift to state 329
-- On static_expr shift to state 582
-- On static_comma_list shift to state 1320
-- On mod_longident shift to state 339
-- On constr_longident shift to state 342
-- On constant shift to state 343
## Reductions:

State 1320:
## Known stack suffix:
## static_expr LESSLESS static_comma_list
## LR(1) items:
process0 -> static_expr LESSLESS static_comma_list . GREATERGREATER [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
process0 -> static_expr LESSLESS static_comma_list . error [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
static_comma_list -> static_comma_list . COMMA static_expr [ error GREATERGREATER COMMA ]
## Transitions:
-- On error shift to state 1321
-- On GREATERGREATER shift to state 1322
-- On COMMA shift to state 586
## Reductions:

State 1321:
## Known stack suffix:
## static_expr LESSLESS static_comma_list error
## LR(1) items:
process0 -> static_expr LESSLESS static_comma_list error . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> static_expr LESSLESS static_comma_list error

State 1322:
## Known stack suffix:
## static_expr LESSLESS static_comma_list GREATERGREATER
## LR(1) items:
process0 -> static_expr LESSLESS static_comma_list GREATERGREATER . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> static_expr LESSLESS static_comma_list GREATERGREATER

State 1323:
## Known stack suffix:
## IF expr THEN process0 ELSE process0
## LR(1) items:
process0 -> IF expr THEN process0 ELSE process0 . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END ELSE DEF CLASS BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process0 -> IF expr THEN process0 ELSE process0

State 1324:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process -> IF expr THEN process0 . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
process0 -> IF expr THEN process0 . ELSE process0 [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS BAR AND ]
## Transitions:
-- On ELSE shift to state 1316
## Reductions:
-- On error reduce production process -> IF expr THEN process0
-- On TYPE reduce production process -> IF expr THEN process0
-- On SEMISEMI reduce production process -> IF expr THEN process0
-- On OPEN reduce production process -> IF expr THEN process0
-- On MODULE reduce production process -> IF expr THEN process0
-- On LET reduce production process -> IF expr THEN process0
-- On IN reduce production process -> IF expr THEN process0
-- On EXTERNAL reduce production process -> IF expr THEN process0
-- On EXCEPTION reduce production process -> IF expr THEN process0
-- On END reduce production process -> IF expr THEN process0
-- On DEF reduce production process -> IF expr THEN process0
-- On CLASS reduce production process -> IF expr THEN process0
-- On AND reduce production process -> IF expr THEN process0

State 1325:
## Known stack suffix:
## DEF
## LR(1) items:
process -> DEF . def_bindings IN process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_bindings shift to state 1326
-- On def_binding shift to state 595
## Reductions:

State 1326:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ IN AND ]
process -> DEF def_bindings . IN process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On IN shift to state 1327
-- On AND shift to state 593
## Reductions:

State 1327:
## Known stack suffix:
## DEF def_bindings IN
## LR(1) items:
process -> DEF def_bindings IN . process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 1296
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 1301
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 1305
-- On LBRACEBAR shift to state 1306
-- On INT shift to state 258
-- On IF shift to state 1309
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 1325
-- On CHAR shift to state 357
-- On BEGIN shift to state 1328
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 1317
-- On process0 shift to state 1333
-- On process shift to state 1337
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On error reduce production process ->
-- On TYPE reduce production process ->
-- On SEMISEMI reduce production process ->
-- On OPEN reduce production process ->
-- On MODULE reduce production process ->
-- On IN reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On AND reduce production process ->

State 1328:
## Known stack suffix:
## BEGIN
## LR(1) items:
process -> BEGIN . seq_expr END SEMI process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
process -> BEGIN . seq_expr error [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 1329
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 1329:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
process -> BEGIN seq_expr . END SEMI process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
process -> BEGIN seq_expr . error [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On error shift to state 1330
-- On END shift to state 1331
## Reductions:

State 1330:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
process -> BEGIN seq_expr error . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> BEGIN seq_expr error

State 1331:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
process -> BEGIN seq_expr END . SEMI process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On SEMI shift to state 1332
## Reductions:

State 1332:
## Known stack suffix:
## BEGIN seq_expr END SEMI
## LR(1) items:
process -> BEGIN seq_expr END SEMI . process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 1296
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 1301
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 1305
-- On LBRACEBAR shift to state 1306
-- On INT shift to state 258
-- On IF shift to state 1309
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 1325
-- On CHAR shift to state 357
-- On BEGIN shift to state 1328
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 1317
-- On process0 shift to state 1333
-- On process shift to state 1336
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On error reduce production process ->
-- On TYPE reduce production process ->
-- On SEMISEMI reduce production process ->
-- On OPEN reduce production process ->
-- On MODULE reduce production process ->
-- On IN reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On AND reduce production process ->

State 1333:
## Known stack suffix:
## process0
## LR(1) items:
process -> process0 . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
process -> process0 . BAR process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On BAR shift to state 1334
## Reductions:
-- On error reduce production process -> process0
-- On TYPE reduce production process -> process0
-- On SEMISEMI reduce production process -> process0
-- On OPEN reduce production process -> process0
-- On MODULE reduce production process -> process0
-- On LET reduce production process -> process0
-- On IN reduce production process -> process0
-- On EXTERNAL reduce production process -> process0
-- On EXCEPTION reduce production process -> process0
-- On END reduce production process -> process0
-- On DEF reduce production process -> process0
-- On CLASS reduce production process -> process0
-- On AND reduce production process -> process0

State 1334:
## Known stack suffix:
## process0 BAR
## LR(1) items:
process -> process0 BAR . process [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On STRING shift to state 7
-- On REPLY shift to state 1296
-- On LPAREN shift to state 321
-- On LIDENT shift to state 246
-- On LET shift to state 1301
-- On LBRACKETBAR shift to state 322
-- On LBRACKET shift to state 324
-- On LBRACEBARBARRBRACE shift to state 1305
-- On LBRACEBAR shift to state 1306
-- On INT shift to state 258
-- On IF shift to state 1309
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On DEF shift to state 1325
-- On CHAR shift to state 357
-- On BEGIN shift to state 1328
-- On val_longident shift to state 358
-- On val_ident shift to state 359
-- On static_expr shift to state 1317
-- On process0 shift to state 1333
-- On process shift to state 1335
-- On mod_longident shift to state 378
-- On constr_longident shift to state 382
-- On constant shift to state 383
## Reductions:
-- On error reduce production process ->
-- On TYPE reduce production process ->
-- On SEMISEMI reduce production process ->
-- On OPEN reduce production process ->
-- On MODULE reduce production process ->
-- On IN reduce production process ->
-- On EXTERNAL reduce production process ->
-- On EXCEPTION reduce production process ->
-- On END reduce production process ->
-- On CLASS reduce production process ->
-- On AND reduce production process ->

State 1335:
## Known stack suffix:
## process0 BAR process
## LR(1) items:
process -> process0 BAR process . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> process0 BAR process

State 1336:
## Known stack suffix:
## BEGIN seq_expr END SEMI process
## LR(1) items:
process -> BEGIN seq_expr END SEMI process . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> BEGIN seq_expr END SEMI process

State 1337:
## Known stack suffix:
## DEF def_bindings IN process
## LR(1) items:
process -> DEF def_bindings IN process . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> DEF def_bindings IN process

State 1338:
## Known stack suffix:
## LET rec_flag let_bindings IN process
## LR(1) items:
process -> LET rec_flag let_bindings IN process . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production process -> LET rec_flag let_bindings IN process

State 1339:
## Known stack suffix:
## join_pattern EQUAL process
## LR(1) items:
def_binding -> join_pattern EQUAL process . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def_binding -> join_pattern EQUAL process

State 1340:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
expr -> DEF def_bindings . IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> DEF def_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On IN shift to state 600
-- On AND shift to state 1341
## Reductions:
-- On error reduce production structure_item -> DEF def_bindings
-- On TYPE reduce production structure_item -> DEF def_bindings
-- On SEMISEMI reduce production structure_item -> DEF def_bindings
-- On OPEN reduce production structure_item -> DEF def_bindings
-- On MODULE reduce production structure_item -> DEF def_bindings
-- On LET reduce production structure_item -> DEF def_bindings
-- On EXTERNAL reduce production structure_item -> DEF def_bindings
-- On EXCEPTION reduce production structure_item -> DEF def_bindings
-- On END reduce production structure_item -> DEF def_bindings
-- On DEF reduce production structure_item -> DEF def_bindings
-- On CLASS reduce production structure_item -> DEF def_bindings

State 1341:
## Known stack suffix:
## def_bindings AND
## LR(1) items:
def_bindings -> def_bindings AND . def_binding [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 1294
-- On def_binding shift to state 1342
## Reductions:

State 1342:
## Known stack suffix:
## def_bindings AND def_binding
## LR(1) items:
def_bindings -> def_bindings AND def_binding . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def_bindings -> def_bindings AND def_binding

State 1343:
## Known stack suffix:
## def_binding
## LR(1) items:
def_bindings -> def_binding . [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END DEF CLASS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production def_bindings -> def_binding

State 1344:
## Known stack suffix:
## CLASS
## LR(1) items:
structure_item -> CLASS . class_list END [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
structure_item -> CLASS . class_list error [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1193
-- On virtual_flag shift to state 1345
-- On class_list shift to state 1402
-- On class_def shift to state 1407
## Reductions:
-- On QUOTE reduce production virtual_flag ->
-- On LPAREN reduce production virtual_flag ->
-- On LIDENT reduce production virtual_flag ->
-- On CLOSED reduce production virtual_flag ->

State 1345:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_def -> virtual_flag . closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On CLOSED shift to state 1195
-- On closed_flag shift to state 1346
## Reductions:
-- On QUOTE reduce production closed_flag ->
-- On LPAREN reduce production closed_flag ->
-- On LIDENT reduce production closed_flag ->

State 1346:
## Known stack suffix:
## virtual_flag closed_flag
## LR(1) items:
class_def -> virtual_flag closed_flag . class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 1197
-- On type_parameter shift to state 1027
-- On class_type_parameters shift to state 1347
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 1347:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters . LIDENT simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On LIDENT shift to state 1348
## Reductions:

State 1348:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT . simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On simple_pattern_list shift to state 1349
-- On simple_pattern shift to state 1401
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 1349:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list . self self_type EQUAL constraints class_fields [ error END AND ]
simple_pattern_list -> simple_pattern_list . simple_pattern [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On AS shift to state 1350
-- On val_ident shift to state 264
-- On simple_pattern shift to state 1352
-- On signed_constant shift to state 266
-- On self shift to state 1353
-- On mod_longident shift to state 303
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:
-- On EQUAL reduce production self ->
-- On COLON reduce production self ->

State 1350:
## Known stack suffix:
## AS
## LR(1) items:
self -> AS . LIDENT [ EQUAL COLON ]
## Transitions:
-- On LIDENT shift to state 1351
## Reductions:

State 1351:
## Known stack suffix:
## AS LIDENT
## LR(1) items:
self -> AS LIDENT . [ EQUAL COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production self -> AS LIDENT

State 1352:
## Known stack suffix:
## simple_pattern_list simple_pattern
## LR(1) items:
simple_pattern_list -> simple_pattern_list simple_pattern . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_list -> simple_pattern_list simple_pattern

State 1353:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self . self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On COLON shift to state 1205
-- On self_type shift to state 1354
## Reductions:
-- On EQUAL reduce production self_type ->

State 1354:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type . EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On EQUAL shift to state 1355
## Reductions:

State 1355:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL . constraints class_fields [ error END AND ]
## Transitions:
-- On constraints shift to state 1356
## Default reduction:
-- After reading the next token, reduce production constraints ->

State 1356:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints . class_fields [ error END AND ]
constraints -> constraints . CONSTRAINT constrain [ error VIRTUAL VAL METHOD INHERIT END CONSTRAINT AND ]
## Transitions:
-- On CONSTRAINT shift to state 1089
-- On class_fields shift to state 1357
## Reductions:
-- On error reduce production class_fields ->
-- On VIRTUAL reduce production class_fields ->
-- On VAL reduce production class_fields ->
-- On METHOD reduce production class_fields ->
-- On INHERIT reduce production class_fields ->
-- On END reduce production class_fields ->
-- On AND reduce production class_fields ->

State 1357:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields . [ error END AND ]
class_fields -> class_fields . INHERIT ancestor [ error VIRTUAL VAL METHOD INHERIT END AND ]
class_fields -> class_fields . VAL value [ error VIRTUAL VAL METHOD INHERIT END AND ]
class_fields -> class_fields . virtual_method [ error VIRTUAL VAL METHOD INHERIT END AND ]
class_fields -> class_fields . method_def [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On VIRTUAL shift to state 1358
-- On VAL shift to state 1363
-- On METHOD shift to state 1370
-- On INHERIT shift to state 1381
-- On virtual_method shift to state 1399
-- On method_def shift to state 1400
## Reductions:
-- On error reduce production class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields
-- On END reduce production class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields
-- On AND reduce production class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields

State 1358:
## Known stack suffix:
## VIRTUAL
## LR(1) items:
virtual_method -> VIRTUAL . protected_flag label COLON core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1212
-- On protected_flag shift to state 1359
## Reductions:
-- On LIDENT reduce production protected_flag ->

State 1359:
## Known stack suffix:
## VIRTUAL protected_flag
## LR(1) items:
virtual_method -> VIRTUAL protected_flag . label COLON core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 1360
## Reductions:

State 1360:
## Known stack suffix:
## VIRTUAL protected_flag label
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label . COLON core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1361
## Reductions:

State 1361:
## Known stack suffix:
## VIRTUAL protected_flag label COLON
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label COLON . core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 121
-- On UIDENT shift to state 122
-- On SHARP shift to state 123
-- On QUOTE shift to state 125
-- On LPAREN shift to state 129
-- On LIDENT shift to state 201
-- On LESSLESS shift to state 208
-- On LESS shift to state 214
-- On type_longident shift to state 218
-- On simple_core_type shift to state 219
-- On mod_ext_longident shift to state 203
-- On core_type_tuple shift to state 225
-- On core_type shift to state 1362
## Reductions:

State 1362:
## Known stack suffix:
## VIRTUAL protected_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ error VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
virtual_method -> VIRTUAL protected_flag label COLON core_type . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 231
-- On AS shift to state 233
## Reductions:
-- On error reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On VIRTUAL reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On VAL reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On METHOD reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On INHERIT reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On END reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type
-- On AND reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type

State 1363:
## Known stack suffix:
## class_fields VAL
## LR(1) items:
class_fields -> class_fields VAL . value [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PRIVATE shift to state 1218
-- On value shift to state 1364
-- On private_flag shift to state 1365
## Reductions:
-- On MUTABLE reduce production private_flag ->
-- On LIDENT reduce production private_flag ->

State 1364:
## Known stack suffix:
## class_fields VAL value
## LR(1) items:
class_fields -> class_fields VAL value . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields VAL value

State 1365:
## Known stack suffix:
## private_flag
## LR(1) items:
value -> private_flag . mutable_flag label EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
value -> private_flag . mutable_flag label [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MUTABLE shift to state 984
-- On mutable_flag shift to state 1366
## Reductions:
-- On LIDENT reduce production mutable_flag ->

State 1366:
## Known stack suffix:
## private_flag mutable_flag
## LR(1) items:
value -> private_flag mutable_flag . label EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
value -> private_flag mutable_flag . label [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 477
-- On label shift to state 1367
## Reductions:

State 1367:
## Known stack suffix:
## private_flag mutable_flag label
## LR(1) items:
value -> private_flag mutable_flag label . EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
value -> private_flag mutable_flag label . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On EQUAL shift to state 1368
## Reductions:
-- On error reduce production value -> private_flag mutable_flag label
-- On VIRTUAL reduce production value -> private_flag mutable_flag label
-- On VAL reduce production value -> private_flag mutable_flag label
-- On METHOD reduce production value -> private_flag mutable_flag label
-- On INHERIT reduce production value -> private_flag mutable_flag label
-- On END reduce production value -> private_flag mutable_flag label
-- On AND reduce production value -> private_flag mutable_flag label

State 1368:
## Known stack suffix:
## private_flag mutable_flag label EQUAL
## LR(1) items:
value -> private_flag mutable_flag label EQUAL . seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 1369
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 1369:
## Known stack suffix:
## private_flag mutable_flag label EQUAL seq_expr
## LR(1) items:
value -> private_flag mutable_flag label EQUAL seq_expr . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value -> private_flag mutable_flag label EQUAL seq_expr

State 1370:
## Known stack suffix:
## METHOD
## LR(1) items:
method_def -> METHOD . protected_flag label meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1212
-- On protected_flag shift to state 1371
## Reductions:
-- On LIDENT reduce production protected_flag ->

State 1371:
## Known stack suffix:
## METHOD protected_flag
## LR(1) items:
method_def -> METHOD protected_flag . label meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 141
-- On label shift to state 1372
## Reductions:

State 1372:
## Known stack suffix:
## METHOD protected_flag label
## LR(1) items:
method_def -> METHOD protected_flag label . meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 1373
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On type_constraint shift to state 1375
-- On simple_pattern shift to state 1378
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On meth_binding shift to state 1380
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 1373:
## Known stack suffix:
## EQUAL
## LR(1) items:
meth_binding -> EQUAL . seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 1374
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 1374:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
meth_binding -> EQUAL seq_expr . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_binding -> EQUAL seq_expr

State 1375:
## Known stack suffix:
## type_constraint
## LR(1) items:
meth_binding -> type_constraint . EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On EQUAL shift to state 1376
## Reductions:

State 1376:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
meth_binding -> type_constraint EQUAL . seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On WHILE shift to state 4
-- On UIDENT shift to state 17
-- On TRY shift to state 18
-- On TRUE shift to state 19
-- On SUBTRACTIVE shift to state 20
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On PARSER shift to state 31
-- On NEW shift to state 23
-- On MATCH shift to state 274
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 294
-- On LET shift to state 295
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACEBAR shift to state 319
-- On LBRACE shift to state 410
-- On LAZY shift to state 415
-- On INT shift to state 62
-- On IF shift to state 417
-- On FUNCTION shift to state 419
-- On FUN shift to state 431
-- On FOR shift to state 434
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On DEF shift to state 448
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On ASSERT shift to state 473
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 481
-- On seq_expr shift to state 1377
-- On mod_longident shift to state 339
-- On label shift to state 497
-- On expr_comma_list shift to state 499
-- On expr shift to state 544
-- On constr_longident shift to state 508
-- On constant shift to state 491
## Reductions:

State 1377:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
meth_binding -> type_constraint EQUAL seq_expr . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_binding -> type_constraint EQUAL seq_expr

State 1378:
## Known stack suffix:
## simple_pattern
## LR(1) items:
meth_binding -> simple_pattern . meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EQUAL shift to state 1373
-- On COLONGREATER shift to state 364
-- On COLON shift to state 367
-- On CHAR shift to state 261
-- On val_ident shift to state 264
-- On type_constraint shift to state 1375
-- On simple_pattern shift to state 1378
-- On signed_constant shift to state 266
-- On mod_longident shift to state 303
-- On meth_binding shift to state 1379
-- On constr_longident shift to state 724
-- On constant shift to state 307
## Reductions:

State 1379:
## Known stack suffix:
## simple_pattern meth_binding
## LR(1) items:
meth_binding -> simple_pattern meth_binding . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production meth_binding -> simple_pattern meth_binding

State 1380:
## Known stack suffix:
## METHOD protected_flag label meth_binding
## LR(1) items:
method_def -> METHOD protected_flag label meth_binding . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_def -> METHOD protected_flag label meth_binding

State 1381:
## Known stack suffix:
## class_fields INHERIT
## LR(1) items:
class_fields -> class_fields INHERIT . ancestor [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LPAREN shift to state 1382
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 1395
-- On ancestor shift to state 1398
## Reductions:

State 1382:
## Known stack suffix:
## LPAREN
## LR(1) items:
ancestor -> LPAREN . core_type_comma_list RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
ancestor -> LPAREN . core_type RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type_comma_list shift to state 1383
-- On core_type shift to state 1390
## Reductions:

State 1383:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
ancestor -> LPAREN core_type_comma_list . RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1384
-- On COMMA shift to state 191
## Reductions:

State 1384:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN . class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 1385
## Reductions:

State 1385:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN class_longident . simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr_list shift to state 1386
-- On simple_expr shift to state 568
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:

State 1386:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident simple_expr_list
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN class_longident simple_expr_list . self [ error VIRTUAL VAL METHOD INHERIT END AND ]
simple_expr_list -> simple_expr_list . simple_expr [ error VIRTUAL VAL UIDENT TRUE STRING PREFIXOP NEW METHOD LPAREN LOC LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT FLOAT FALSE END CHAR BEGIN AS AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On AS shift to state 1387
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 567
-- On self shift to state 1389
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:
-- On error reduce production self ->
-- On VIRTUAL reduce production self ->
-- On VAL reduce production self ->
-- On METHOD reduce production self ->
-- On INHERIT reduce production self ->
-- On END reduce production self ->
-- On AND reduce production self ->

State 1387:
## Known stack suffix:
## AS
## LR(1) items:
self -> AS . LIDENT [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 1388
## Reductions:

State 1388:
## Known stack suffix:
## AS LIDENT
## LR(1) items:
self -> AS LIDENT . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production self -> AS LIDENT

State 1389:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident simple_expr_list self
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN class_longident simple_expr_list self . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ancestor -> LPAREN core_type_comma_list RPAREN class_longident simple_expr_list self

State 1390:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
ancestor -> LPAREN core_type . RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1391
-- On MINUSGREATER shift to state 167
-- On COMMA shift to state 195
-- On AS shift to state 169
## Reductions:

State 1391:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
ancestor -> LPAREN core_type RPAREN . class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 2
-- On LIDENT shift to state 10
-- On mod_longident shift to state 11
-- On class_longident shift to state 1392
## Reductions:

State 1392:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident
## LR(1) items:
ancestor -> LPAREN core_type RPAREN class_longident . simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr_list shift to state 1393
-- On simple_expr shift to state 568
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:

State 1393:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident simple_expr_list
## LR(1) items:
ancestor -> LPAREN core_type RPAREN class_longident simple_expr_list . self [ error VIRTUAL VAL METHOD INHERIT END AND ]
simple_expr_list -> simple_expr_list . simple_expr [ error VIRTUAL VAL UIDENT TRUE STRING PREFIXOP NEW METHOD LPAREN LOC LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT FLOAT FALSE END CHAR BEGIN AS AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On AS shift to state 1387
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 567
-- On self shift to state 1394
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:
-- On error reduce production self ->
-- On VIRTUAL reduce production self ->
-- On VAL reduce production self ->
-- On METHOD reduce production self ->
-- On INHERIT reduce production self ->
-- On END reduce production self ->
-- On AND reduce production self ->

State 1394:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident simple_expr_list self
## LR(1) items:
ancestor -> LPAREN core_type RPAREN class_longident simple_expr_list self . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ancestor -> LPAREN core_type RPAREN class_longident simple_expr_list self

State 1395:
## Known stack suffix:
## class_longident
## LR(1) items:
ancestor -> class_longident . simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr_list shift to state 1396
-- On simple_expr shift to state 568
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:

State 1396:
## Known stack suffix:
## class_longident simple_expr_list
## LR(1) items:
ancestor -> class_longident simple_expr_list . self [ error VIRTUAL VAL METHOD INHERIT END AND ]
simple_expr_list -> simple_expr_list . simple_expr [ error VIRTUAL VAL UIDENT TRUE STRING PREFIXOP NEW METHOD LPAREN LOC LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT FLOAT FALSE END CHAR BEGIN AS AND ]
## Transitions:
-- On UIDENT shift to state 17
-- On TRUE shift to state 19
-- On STRING shift to state 21
-- On PREFIXOP shift to state 22
-- On NEW shift to state 23
-- On LPAREN shift to state 29
-- On LOC shift to state 291
-- On LIDENT shift to state 47
-- On LBRACKETLESS shift to state 310
-- On LBRACKETBAR shift to state 311
-- On LBRACKET shift to state 312
-- On LBRACELESS shift to state 313
-- On LBRACE shift to state 410
-- On INT shift to state 62
-- On FLOAT shift to state 63
-- On FALSE shift to state 64
-- On CHAR shift to state 327
-- On BEGIN shift to state 416
-- On AS shift to state 1387
-- On val_longident shift to state 474
-- On val_ident shift to state 329
-- On simple_expr shift to state 567
-- On self shift to state 1397
-- On mod_longident shift to state 339
-- On constr_longident shift to state 490
-- On constant shift to state 491
## Reductions:
-- On error reduce production self ->
-- On VIRTUAL reduce production self ->
-- On VAL reduce production self ->
-- On METHOD reduce production self ->
-- On INHERIT reduce production self ->
-- On END reduce production self ->
-- On AND reduce production self ->

State 1397:
## Known stack suffix:
## class_longident simple_expr_list self
## LR(1) items:
ancestor -> class_longident simple_expr_list self . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ancestor -> class_longident simple_expr_list self

State 1398:
## Known stack suffix:
## class_fields INHERIT ancestor
## LR(1) items:
class_fields -> class_fields INHERIT ancestor . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields INHERIT ancestor

State 1399:
## Known stack suffix:
## class_fields virtual_method
## LR(1) items:
class_fields -> class_fields virtual_method . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields virtual_method

State 1400:
## Known stack suffix:
## class_fields method_def
## LR(1) items:
class_fields -> class_fields method_def . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_fields -> class_fields method_def

State 1401:
## Known stack suffix:
## simple_pattern
## LR(1) items:
simple_pattern_list -> simple_pattern . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_pattern_list -> simple_pattern

State 1402:
## Known stack suffix:
## CLASS class_list
## LR(1) items:
class_list -> class_list . AND class_def [ error END AND ]
structure_item -> CLASS class_list . END [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
structure_item -> CLASS class_list . error [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On error shift to state 1403
-- On END shift to state 1404
-- On AND shift to state 1405
## Reductions:

State 1403:
## Known stack suffix:
## CLASS class_list error
## LR(1) items:
structure_item -> CLASS class_list error . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> CLASS class_list error

State 1404:
## Known stack suffix:
## CLASS class_list END
## LR(1) items:
structure_item -> CLASS class_list END . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> CLASS class_list END

State 1405:
## Known stack suffix:
## class_list AND
## LR(1) items:
class_list -> class_list AND . class_def [ error END AND ]
## Transitions:
-- On VIRTUAL shift to state 1193
-- On virtual_flag shift to state 1345
-- On class_def shift to state 1406
## Reductions:
-- On QUOTE reduce production virtual_flag ->
-- On LPAREN reduce production virtual_flag ->
-- On LIDENT reduce production virtual_flag ->
-- On CLOSED reduce production virtual_flag ->

State 1406:
## Known stack suffix:
## class_list AND class_def
## LR(1) items:
class_list -> class_list AND class_def . [ error END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_list -> class_list AND class_def

State 1407:
## Known stack suffix:
## class_def
## LR(1) items:
class_list -> class_def . [ error END AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_list -> class_def

State 1408:
## Known stack suffix:
## structure_tail
## LR(1) items:
structure -> structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> structure_tail

State 1409:
## Known stack suffix:
## structure_item
## LR(1) items:
structure_tail -> structure_item . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1267
-- On SEMISEMI shift to state 1269
-- On OPEN shift to state 1270
-- On MODULE shift to state 1272
-- On LET shift to state 1410
-- On EXTERNAL shift to state 1284
-- On EXCEPTION shift to state 1290
-- On DEF shift to state 1413
-- On CLASS shift to state 1344
-- On structure_tail shift to state 1415
-- On structure_item shift to state 1409
## Reductions:
-- On error reduce production structure_tail ->
-- On END reduce production structure_tail ->

State 1410:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . rec_flag let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 1411
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 1411:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
structure_item -> LET rec_flag . let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 289
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 308
-- On mod_longident shift to state 303
-- On let_bindings shift to state 1412
-- On let_binding shift to state 801
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 1412:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On AND shift to state 799
## Reductions:
-- On error reduce production structure_item -> LET rec_flag let_bindings
-- On TYPE reduce production structure_item -> LET rec_flag let_bindings
-- On SEMISEMI reduce production structure_item -> LET rec_flag let_bindings
-- On OPEN reduce production structure_item -> LET rec_flag let_bindings
-- On MODULE reduce production structure_item -> LET rec_flag let_bindings
-- On LET reduce production structure_item -> LET rec_flag let_bindings
-- On EXTERNAL reduce production structure_item -> LET rec_flag let_bindings
-- On EXCEPTION reduce production structure_item -> LET rec_flag let_bindings
-- On END reduce production structure_item -> LET rec_flag let_bindings
-- On DEF reduce production structure_item -> LET rec_flag let_bindings
-- On CLASS reduce production structure_item -> LET rec_flag let_bindings

State 1413:
## Known stack suffix:
## DEF
## LR(1) items:
structure_item -> DEF . def_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 1294
-- On def_bindings shift to state 1414
-- On def_binding shift to state 1343
## Reductions:

State 1414:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS AND ]
structure_item -> DEF def_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On AND shift to state 1341
## Reductions:
-- On error reduce production structure_item -> DEF def_bindings
-- On TYPE reduce production structure_item -> DEF def_bindings
-- On SEMISEMI reduce production structure_item -> DEF def_bindings
-- On OPEN reduce production structure_item -> DEF def_bindings
-- On MODULE reduce production structure_item -> DEF def_bindings
-- On LET reduce production structure_item -> DEF def_bindings
-- On EXTERNAL reduce production structure_item -> DEF def_bindings
-- On EXCEPTION reduce production structure_item -> DEF def_bindings
-- On END reduce production structure_item -> DEF def_bindings
-- On DEF reduce production structure_item -> DEF def_bindings
-- On CLASS reduce production structure_item -> DEF def_bindings

State 1415:
## Known stack suffix:
## structure_item structure_tail
## LR(1) items:
structure_tail -> structure_item structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> structure_item structure_tail

State 1416:
## Known stack suffix:
## STRUCT structure
## LR(1) items:
module_expr -> STRUCT structure . END [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> STRUCT structure . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On error shift to state 1417
-- On END shift to state 1418
## Reductions:

State 1417:
## Known stack suffix:
## STRUCT structure error
## LR(1) items:
module_expr -> STRUCT structure error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure error

State 1418:
## Known stack suffix:
## STRUCT structure END
## LR(1) items:
module_expr -> STRUCT structure END . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure END

State 1419:
## Known stack suffix:
## seq_expr
## LR(1) items:
structure -> seq_expr . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1267
-- On SEMISEMI shift to state 1269
-- On OPEN shift to state 1270
-- On MODULE shift to state 1272
-- On LET shift to state 1410
-- On EXTERNAL shift to state 1284
-- On EXCEPTION shift to state 1290
-- On DEF shift to state 1413
-- On CLASS shift to state 1344
-- On structure_tail shift to state 1420
-- On structure_item shift to state 1409
## Reductions:
-- On error reduce production structure_tail ->
-- On END reduce production structure_tail ->

State 1420:
## Known stack suffix:
## seq_expr structure_tail
## LR(1) items:
structure -> seq_expr structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> seq_expr structure_tail

State 1421:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_expr -> LPAREN . module_expr COLON module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN . module_expr COLON module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN . module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN . module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On STRUCT shift to state 1280
-- On LPAREN shift to state 1421
-- On FUNCTOR shift to state 1422
-- On module_expr shift to state 1435
-- On mod_longident shift to state 1434
## Reductions:

State 1422:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_expr -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On LPAREN shift to state 1423
## Reductions:

State 1423:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 1424
## Reductions:

State 1424:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On COLON shift to state 1425
## Reductions:

State 1425:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1426
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1426:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1427
## Reductions:

State 1427:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1428
## Reductions:

State 1428:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On STRUCT shift to state 1280
-- On LPAREN shift to state 1421
-- On FUNCTOR shift to state 1422
-- On module_expr shift to state 1429
-- On mod_longident shift to state 1434
## Reductions:

State 1429:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On LPAREN shift to state 1430
## Reductions:
-- On error reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On TYPE reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On SEMISEMI reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On RPAREN reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On OPEN reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On MODULE reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On LET reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On EXTERNAL reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On EXCEPTION reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On END reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On DEF reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On COLON reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On CLASS reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr

State 1430:
## Known stack suffix:
## module_expr LPAREN
## LR(1) items:
module_expr -> module_expr LPAREN . module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> module_expr LPAREN . module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On STRUCT shift to state 1280
-- On LPAREN shift to state 1421
-- On FUNCTOR shift to state 1422
-- On module_expr shift to state 1431
-- On mod_longident shift to state 1434
## Reductions:

State 1431:
## Known stack suffix:
## module_expr LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On error shift to state 1432
-- On RPAREN shift to state 1433
-- On LPAREN shift to state 1430
## Reductions:

State 1432:
## Known stack suffix:
## module_expr LPAREN module_expr error
## LR(1) items:
module_expr -> module_expr LPAREN module_expr error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr error

State 1433:
## Known stack suffix:
## module_expr LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> module_expr LPAREN module_expr RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr RPAREN

State 1434:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DOT DEF COLON CLASS ]
module_expr -> mod_longident . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On DOT shift to state 77
## Reductions:
-- On error reduce production module_expr -> mod_longident
-- On TYPE reduce production module_expr -> mod_longident
-- On SEMISEMI reduce production module_expr -> mod_longident
-- On RPAREN reduce production module_expr -> mod_longident
-- On OPEN reduce production module_expr -> mod_longident
-- On MODULE reduce production module_expr -> mod_longident
-- On LPAREN reduce production module_expr -> mod_longident
-- On LET reduce production module_expr -> mod_longident
-- On EXTERNAL reduce production module_expr -> mod_longident
-- On EXCEPTION reduce production module_expr -> mod_longident
-- On END reduce production module_expr -> mod_longident
-- On DEF reduce production module_expr -> mod_longident
-- On COLON reduce production module_expr -> mod_longident
-- On CLASS reduce production module_expr -> mod_longident

State 1435:
## Known stack suffix:
## LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN COLON ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN COLON ]
module_expr -> LPAREN module_expr . COLON module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN module_expr . COLON module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN module_expr . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN module_expr . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On error shift to state 1436
-- On RPAREN shift to state 1437
-- On LPAREN shift to state 1430
-- On COLON shift to state 1438
## Reductions:

State 1436:
## Known stack suffix:
## LPAREN module_expr error
## LR(1) items:
module_expr -> LPAREN module_expr error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr error

State 1437:
## Known stack suffix:
## LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr RPAREN

State 1438:
## Known stack suffix:
## LPAREN module_expr COLON
## LR(1) items:
module_expr -> LPAREN module_expr COLON . module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN module_expr COLON . module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1439
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1439:
## Known stack suffix:
## LPAREN module_expr COLON module_type
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_expr -> LPAREN module_expr COLON module_type . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
## Transitions:
-- On error shift to state 1440
-- On WITH shift to state 1150
-- On RPAREN shift to state 1441
## Reductions:

State 1440:
## Known stack suffix:
## LPAREN module_expr COLON module_type error
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type error

State 1441:
## Known stack suffix:
## LPAREN module_expr COLON module_type RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF COLON CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type RPAREN

State 1442:
## Known stack suffix:
## EQUAL module_expr
## LR(1) items:
module_binding -> EQUAL module_expr . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1430
## Reductions:
-- On error reduce production module_binding -> EQUAL module_expr
-- On TYPE reduce production module_binding -> EQUAL module_expr
-- On SEMISEMI reduce production module_binding -> EQUAL module_expr
-- On OPEN reduce production module_binding -> EQUAL module_expr
-- On MODULE reduce production module_binding -> EQUAL module_expr
-- On LET reduce production module_binding -> EQUAL module_expr
-- On EXTERNAL reduce production module_binding -> EQUAL module_expr
-- On EXCEPTION reduce production module_binding -> EQUAL module_expr
-- On END reduce production module_binding -> EQUAL module_expr
-- On DEF reduce production module_binding -> EQUAL module_expr
-- On CLASS reduce production module_binding -> EQUAL module_expr

State 1443:
## Known stack suffix:
## COLON
## LR(1) items:
module_binding -> COLON . module_type EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1444
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1444:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_binding -> COLON module_type . EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 1122
-- On EQUAL shift to state 1445
## Reductions:

State 1445:
## Known stack suffix:
## COLON module_type EQUAL
## LR(1) items:
module_binding -> COLON module_type EQUAL . module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On STRUCT shift to state 1280
-- On LPAREN shift to state 1421
-- On FUNCTOR shift to state 1422
-- On module_expr shift to state 1446
-- On mod_longident shift to state 1434
## Reductions:

State 1446:
## Known stack suffix:
## COLON module_type EQUAL module_expr
## LR(1) items:
module_binding -> COLON module_type EQUAL module_expr . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1430
## Reductions:
-- On error reduce production module_binding -> COLON module_type EQUAL module_expr
-- On TYPE reduce production module_binding -> COLON module_type EQUAL module_expr
-- On SEMISEMI reduce production module_binding -> COLON module_type EQUAL module_expr
-- On OPEN reduce production module_binding -> COLON module_type EQUAL module_expr
-- On MODULE reduce production module_binding -> COLON module_type EQUAL module_expr
-- On LET reduce production module_binding -> COLON module_type EQUAL module_expr
-- On EXTERNAL reduce production module_binding -> COLON module_type EQUAL module_expr
-- On EXCEPTION reduce production module_binding -> COLON module_type EQUAL module_expr
-- On END reduce production module_binding -> COLON module_type EQUAL module_expr
-- On DEF reduce production module_binding -> COLON module_type EQUAL module_expr
-- On CLASS reduce production module_binding -> COLON module_type EQUAL module_expr

State 1447:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_binding
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding

State 1448:
## Known stack suffix:
## MODULE UIDENT module_binding
## LR(1) items:
structure_item -> MODULE UIDENT module_binding . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> MODULE UIDENT module_binding

State 1449:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
structure_item -> MODULE TYPE . ident EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 134
-- On LIDENT shift to state 135
-- On ident shift to state 1450
## Reductions:

State 1450:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
structure_item -> MODULE TYPE ident . EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On EQUAL shift to state 1451
## Reductions:

State 1451:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
structure_item -> MODULE TYPE ident EQUAL . module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1452
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1452:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
structure_item -> MODULE TYPE ident EQUAL module_type . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DEF CLASS ]
## Transitions:
-- On WITH shift to state 1150
## Reductions:
-- On error reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On TYPE reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On SEMISEMI reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On OPEN reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On MODULE reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On LET reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On EXTERNAL reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On EXCEPTION reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On END reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On DEF reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On CLASS reduce production structure_item -> MODULE TYPE ident EQUAL module_type

State 1453:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
structure_tail -> SEMISEMI structure_item . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1267
-- On SEMISEMI shift to state 1269
-- On OPEN shift to state 1270
-- On MODULE shift to state 1272
-- On LET shift to state 1410
-- On EXTERNAL shift to state 1284
-- On EXCEPTION shift to state 1290
-- On DEF shift to state 1413
-- On CLASS shift to state 1344
-- On structure_tail shift to state 1454
-- On structure_item shift to state 1409
## Reductions:
-- On error reduce production structure_tail ->
-- On END reduce production structure_tail ->

State 1454:
## Known stack suffix:
## SEMISEMI structure_item structure_tail
## LR(1) items:
structure_tail -> SEMISEMI structure_item structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI structure_item structure_tail

State 1455:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
structure_tail -> SEMISEMI seq_expr . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1267
-- On SEMISEMI shift to state 1269
-- On OPEN shift to state 1270
-- On MODULE shift to state 1272
-- On LET shift to state 1410
-- On EXTERNAL shift to state 1284
-- On EXCEPTION shift to state 1290
-- On DEF shift to state 1413
-- On CLASS shift to state 1344
-- On structure_tail shift to state 1456
-- On structure_item shift to state 1409
## Reductions:
-- On error reduce production structure_tail ->
-- On END reduce production structure_tail ->

State 1456:
## Known stack suffix:
## SEMISEMI seq_expr structure_tail
## LR(1) items:
structure_tail -> SEMISEMI seq_expr structure_tail . [ error END ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI seq_expr structure_tail

State 1457:
## Known stack suffix:
## STRUCT structure
## LR(1) items:
module_expr -> STRUCT structure . END [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> STRUCT structure . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On error shift to state 1458
-- On END shift to state 1459
## Reductions:

State 1458:
## Known stack suffix:
## STRUCT structure error
## LR(1) items:
module_expr -> STRUCT structure error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure error

State 1459:
## Known stack suffix:
## STRUCT structure END
## LR(1) items:
module_expr -> STRUCT structure END . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> STRUCT structure END

State 1460:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_expr -> LPAREN . module_expr COLON module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN . module_expr COLON module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN . module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN . module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On STRUCT shift to state 1280
-- On LPAREN shift to state 1421
-- On FUNCTOR shift to state 1422
-- On module_expr shift to state 1461
-- On mod_longident shift to state 1434
## Reductions:

State 1461:
## Known stack suffix:
## LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN COLON ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN COLON ]
module_expr -> LPAREN module_expr . COLON module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN module_expr . COLON module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN module_expr . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN module_expr . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On error shift to state 1462
-- On RPAREN shift to state 1463
-- On LPAREN shift to state 1430
-- On COLON shift to state 1464
## Reductions:

State 1462:
## Known stack suffix:
## LPAREN module_expr error
## LR(1) items:
module_expr -> LPAREN module_expr error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr error

State 1463:
## Known stack suffix:
## LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr RPAREN

State 1464:
## Known stack suffix:
## LPAREN module_expr COLON
## LR(1) items:
module_expr -> LPAREN module_expr COLON . module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN module_expr COLON . module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1106
-- On SIG shift to state 1107
-- On LPAREN shift to state 1111
-- On LIDENT shift to state 127
-- On FUNCTOR shift to state 1112
-- On mty_longident shift to state 1148
-- On module_type shift to state 1465
-- On mod_ext_longident shift to state 1171
-- On ident shift to state 1175
## Reductions:

State 1465:
## Known stack suffix:
## LPAREN module_expr COLON module_type
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> LPAREN module_expr COLON module_type . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
## Transitions:
-- On error shift to state 1466
-- On WITH shift to state 1150
-- On RPAREN shift to state 1467
## Reductions:

State 1466:
## Known stack suffix:
## LPAREN module_expr COLON module_type error
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type error

State 1467:
## Known stack suffix:
## LPAREN module_expr COLON module_type RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> LPAREN module_expr COLON module_type RPAREN

State 1468:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_expr -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1469
## Reductions:

State 1469:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1470
## Reductions:

State 1470:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On COLON shift to state 1471
## Reductions:

State 1471:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1472
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1472:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1473
## Reductions:

State 1473:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1474
## Reductions:

State 1474:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 1266
-- On LPAREN shift to state 1460
-- On FUNCTOR shift to state 1468
-- On module_expr shift to state 1475
-- On mod_longident shift to state 1480
## Reductions:

State 1475:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1476
## Reductions:
-- On TYPE reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On SHARP reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On SEMISEMI reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On OPEN reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On MODULE reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On LET reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On EXTERNAL reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On EXCEPTION reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On EOF reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On DEF reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-- On CLASS reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr

State 1476:
## Known stack suffix:
## module_expr LPAREN
## LR(1) items:
module_expr -> module_expr LPAREN . module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr LPAREN . module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 17
-- On STRUCT shift to state 1280
-- On LPAREN shift to state 1421
-- On FUNCTOR shift to state 1422
-- On module_expr shift to state 1477
-- On mod_longident shift to state 1434
## Reductions:

State 1477:
## Known stack suffix:
## module_expr LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On error shift to state 1478
-- On RPAREN shift to state 1479
-- On LPAREN shift to state 1430
## Reductions:

State 1478:
## Known stack suffix:
## module_expr LPAREN module_expr error
## LR(1) items:
module_expr -> module_expr LPAREN module_expr error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr error

State 1479:
## Known stack suffix:
## module_expr LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> module_expr LPAREN module_expr RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_expr -> module_expr LPAREN module_expr RPAREN

State 1480:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DOT DEF CLASS ]
module_expr -> mod_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On DOT shift to state 304
## Reductions:
-- On TYPE reduce production module_expr -> mod_longident
-- On SHARP reduce production module_expr -> mod_longident
-- On SEMISEMI reduce production module_expr -> mod_longident
-- On OPEN reduce production module_expr -> mod_longident
-- On MODULE reduce production module_expr -> mod_longident
-- On LPAREN reduce production module_expr -> mod_longident
-- On LET reduce production module_expr -> mod_longident
-- On EXTERNAL reduce production module_expr -> mod_longident
-- On EXCEPTION reduce production module_expr -> mod_longident
-- On EOF reduce production module_expr -> mod_longident
-- On DEF reduce production module_expr -> mod_longident
-- On CLASS reduce production module_expr -> mod_longident

State 1481:
## Known stack suffix:
## EQUAL module_expr
## LR(1) items:
module_binding -> EQUAL module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1476
## Reductions:
-- On TYPE reduce production module_binding -> EQUAL module_expr
-- On SHARP reduce production module_binding -> EQUAL module_expr
-- On SEMISEMI reduce production module_binding -> EQUAL module_expr
-- On OPEN reduce production module_binding -> EQUAL module_expr
-- On MODULE reduce production module_binding -> EQUAL module_expr
-- On LET reduce production module_binding -> EQUAL module_expr
-- On EXTERNAL reduce production module_binding -> EQUAL module_expr
-- On EXCEPTION reduce production module_binding -> EQUAL module_expr
-- On EOF reduce production module_binding -> EQUAL module_expr
-- On DEF reduce production module_binding -> EQUAL module_expr
-- On CLASS reduce production module_binding -> EQUAL module_expr

State 1482:
## Known stack suffix:
## COLON
## LR(1) items:
module_binding -> COLON . module_type EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1483
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1483:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_binding -> COLON module_type . EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 1122
-- On EQUAL shift to state 1484
## Reductions:

State 1484:
## Known stack suffix:
## COLON module_type EQUAL
## LR(1) items:
module_binding -> COLON module_type EQUAL . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRUCT shift to state 1266
-- On LPAREN shift to state 1460
-- On FUNCTOR shift to state 1468
-- On module_expr shift to state 1485
-- On mod_longident shift to state 1480
## Reductions:

State 1485:
## Known stack suffix:
## COLON module_type EQUAL module_expr
## LR(1) items:
module_binding -> COLON module_type EQUAL module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 1476
## Reductions:
-- On TYPE reduce production module_binding -> COLON module_type EQUAL module_expr
-- On SHARP reduce production module_binding -> COLON module_type EQUAL module_expr
-- On SEMISEMI reduce production module_binding -> COLON module_type EQUAL module_expr
-- On OPEN reduce production module_binding -> COLON module_type EQUAL module_expr
-- On MODULE reduce production module_binding -> COLON module_type EQUAL module_expr
-- On LET reduce production module_binding -> COLON module_type EQUAL module_expr
-- On EXTERNAL reduce production module_binding -> COLON module_type EQUAL module_expr
-- On EXCEPTION reduce production module_binding -> COLON module_type EQUAL module_expr
-- On EOF reduce production module_binding -> COLON module_type EQUAL module_expr
-- On DEF reduce production module_binding -> COLON module_type EQUAL module_expr
-- On CLASS reduce production module_binding -> COLON module_type EQUAL module_expr

State 1486:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_binding
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding

State 1487:
## Known stack suffix:
## MODULE UIDENT module_binding
## LR(1) items:
structure_item -> MODULE UIDENT module_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> MODULE UIDENT module_binding

State 1488:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
structure_item -> MODULE TYPE . ident EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 134
-- On LIDENT shift to state 135
-- On ident shift to state 1489
## Reductions:

State 1489:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
structure_item -> MODULE TYPE ident . EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On EQUAL shift to state 1490
## Reductions:

State 1490:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
structure_item -> MODULE TYPE ident EQUAL . module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1491
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1491:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
structure_item -> MODULE TYPE ident EQUAL module_type . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On WITH shift to state 1122
## Reductions:
-- On TYPE reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On SHARP reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On SEMISEMI reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On OPEN reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On MODULE reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On LET reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On EXTERNAL reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On EXCEPTION reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On EOF reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On DEF reduce production structure_item -> MODULE TYPE ident EQUAL module_type
-- On CLASS reduce production structure_item -> MODULE TYPE ident EQUAL module_type

State 1492:
## Known stack suffix:
## LET
## LR(1) items:
expr -> LET . rec_flag let_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET . rec_flag let_bindings error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . rec_flag let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 1493
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 1493:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr -> LET rec_flag . let_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag . let_bindings error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET rec_flag . let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 289
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 308
-- On mod_longident shift to state 303
-- On let_bindings shift to state 1494
-- On let_binding shift to state 801
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 1494:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr -> LET rec_flag let_bindings . IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr -> LET rec_flag let_bindings . error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On error shift to state 406
-- On IN shift to state 407
-- On AND shift to state 799
## Reductions:
-- On TYPE reduce production structure_item -> LET rec_flag let_bindings
-- On SHARP reduce production structure_item -> LET rec_flag let_bindings
-- On SEMISEMI reduce production structure_item -> LET rec_flag let_bindings
-- On OPEN reduce production structure_item -> LET rec_flag let_bindings
-- On MODULE reduce production structure_item -> LET rec_flag let_bindings
-- On LET reduce production structure_item -> LET rec_flag let_bindings
-- On EXTERNAL reduce production structure_item -> LET rec_flag let_bindings
-- On EXCEPTION reduce production structure_item -> LET rec_flag let_bindings
-- On EOF reduce production structure_item -> LET rec_flag let_bindings
-- On DEF reduce production structure_item -> LET rec_flag let_bindings
-- On CLASS reduce production structure_item -> LET rec_flag let_bindings

State 1495:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
structure_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 1496
## Reductions:

State 1496:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
structure_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On COLON shift to state 1497
## Reductions:

State 1497:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1498
## Reductions:

State 1498:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
structure_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On EQUAL shift to state 1499
-- On AS shift to state 169
## Reductions:

State 1499:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On STRING shift to state 1500
-- On primitive_declaration shift to state 1502
## Reductions:

State 1500:
## Known stack suffix:
## STRING
## LR(1) items:
primitive_declaration -> STRING . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS ]
primitive_declaration -> STRING . primitive_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On STRING shift to state 1500
-- On primitive_declaration shift to state 1501
## Reductions:
-- On VAL reduce production primitive_declaration -> STRING
-- On TYPE reduce production primitive_declaration -> STRING
-- On SHARP reduce production primitive_declaration -> STRING
-- On SEMISEMI reduce production primitive_declaration -> STRING
-- On OPEN reduce production primitive_declaration -> STRING
-- On MODULE reduce production primitive_declaration -> STRING
-- On LET reduce production primitive_declaration -> STRING
-- On INCLUDE reduce production primitive_declaration -> STRING
-- On EXTERNAL reduce production primitive_declaration -> STRING
-- On EXCEPTION reduce production primitive_declaration -> STRING
-- On EOF reduce production primitive_declaration -> STRING
-- On DEF reduce production primitive_declaration -> STRING
-- On CLASS reduce production primitive_declaration -> STRING

State 1501:
## Known stack suffix:
## STRING primitive_declaration
## LR(1) items:
primitive_declaration -> STRING primitive_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primitive_declaration -> STRING primitive_declaration

State 1502:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1503:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
structure_item -> EXCEPTION . UIDENT constructor_arguments [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 1504
## Reductions:

State 1504:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
structure_item -> EXCEPTION UIDENT . constructor_arguments [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On OF shift to state 1004
-- On constructor_arguments shift to state 1505
## Reductions:
-- On TYPE reduce production constructor_arguments ->
-- On SHARP reduce production constructor_arguments ->
-- On SEMISEMI reduce production constructor_arguments ->
-- On OPEN reduce production constructor_arguments ->
-- On MODULE reduce production constructor_arguments ->
-- On LET reduce production constructor_arguments ->
-- On EXTERNAL reduce production constructor_arguments ->
-- On EXCEPTION reduce production constructor_arguments ->
-- On EOF reduce production constructor_arguments ->
-- On DEF reduce production constructor_arguments ->
-- On CLASS reduce production constructor_arguments ->

State 1505:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
structure_item -> EXCEPTION UIDENT constructor_arguments . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> EXCEPTION UIDENT constructor_arguments

State 1506:
## Known stack suffix:
## DEF
## LR(1) items:
expr -> DEF . def_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> DEF . def_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_bindings shift to state 1507
-- On def_binding shift to state 595
## Reductions:

State 1507:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF DEF CLASS AND ]
expr -> DEF def_bindings . IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OR OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF DEF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> DEF def_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On IN shift to state 637
-- On AND shift to state 593
## Reductions:
-- On TYPE reduce production structure_item -> DEF def_bindings
-- On SHARP reduce production structure_item -> DEF def_bindings
-- On SEMISEMI reduce production structure_item -> DEF def_bindings
-- On OPEN reduce production structure_item -> DEF def_bindings
-- On MODULE reduce production structure_item -> DEF def_bindings
-- On LET reduce production structure_item -> DEF def_bindings
-- On EXTERNAL reduce production structure_item -> DEF def_bindings
-- On EXCEPTION reduce production structure_item -> DEF def_bindings
-- On EOF reduce production structure_item -> DEF def_bindings
-- On DEF reduce production structure_item -> DEF def_bindings
-- On CLASS reduce production structure_item -> DEF def_bindings

State 1508:
## Known stack suffix:
## CLASS
## LR(1) items:
structure_item -> CLASS . class_list END [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
structure_item -> CLASS . class_list error [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1193
-- On virtual_flag shift to state 1345
-- On class_list shift to state 1509
-- On class_def shift to state 1407
## Reductions:
-- On QUOTE reduce production virtual_flag ->
-- On LPAREN reduce production virtual_flag ->
-- On LIDENT reduce production virtual_flag ->
-- On CLOSED reduce production virtual_flag ->

State 1509:
## Known stack suffix:
## CLASS class_list
## LR(1) items:
class_list -> class_list . AND class_def [ error END AND ]
structure_item -> CLASS class_list . END [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
structure_item -> CLASS class_list . error [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On error shift to state 1510
-- On END shift to state 1511
-- On AND shift to state 1405
## Reductions:

State 1510:
## Known stack suffix:
## CLASS class_list error
## LR(1) items:
structure_item -> CLASS class_list error . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> CLASS class_list error

State 1511:
## Known stack suffix:
## CLASS class_list END
## LR(1) items:
structure_item -> CLASS class_list END . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_item -> CLASS class_list END

State 1512:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
structure_tail -> SEMISEMI structure_item . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 967
-- On SEMISEMI shift to state 1032
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On structure_tail shift to state 1518
-- On structure_item shift to state 1519
## Reductions:
-- On EOF reduce production structure_tail ->

State 1513:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . rec_flag let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On REC shift to state 287
-- On rec_flag shift to state 1514
## Reductions:
-- On UNDERSCORE reduce production rec_flag ->
-- On UIDENT reduce production rec_flag ->
-- On TRUE reduce production rec_flag ->
-- On SUBTRACTIVE reduce production rec_flag ->
-- On STRING reduce production rec_flag ->
-- On LPAREN reduce production rec_flag ->
-- On LIDENT reduce production rec_flag ->
-- On LBRACKET reduce production rec_flag ->
-- On LBRACE reduce production rec_flag ->
-- On INT reduce production rec_flag ->
-- On FLOAT reduce production rec_flag ->
-- On FALSE reduce production rec_flag ->
-- On CHAR reduce production rec_flag ->

State 1514:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
structure_item -> LET rec_flag . let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 32
-- On UIDENT shift to state 2
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 33
-- On STRING shift to state 7
-- On LPAREN shift to state 36
-- On LIDENT shift to state 246
-- On LBRACKET shift to state 247
-- On LBRACE shift to state 253
-- On INT shift to state 258
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On CHAR shift to state 261
-- On val_ident shift to state 401
-- On simple_pattern shift to state 297
-- On signed_constant shift to state 266
-- On pattern_comma_list shift to state 298
-- On pattern shift to state 809
-- On mod_longident shift to state 303
-- On let_bindings shift to state 1515
-- On let_binding shift to state 819
-- On constr_longident shift to state 305
-- On constant shift to state 307
## Reductions:

State 1515:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On AND shift to state 817
## Reductions:
-- On TYPE reduce production structure_item -> LET rec_flag let_bindings
-- On SHARP reduce production structure_item -> LET rec_flag let_bindings
-- On SEMISEMI reduce production structure_item -> LET rec_flag let_bindings
-- On OPEN reduce production structure_item -> LET rec_flag let_bindings
-- On MODULE reduce production structure_item -> LET rec_flag let_bindings
-- On LET reduce production structure_item -> LET rec_flag let_bindings
-- On EXTERNAL reduce production structure_item -> LET rec_flag let_bindings
-- On EXCEPTION reduce production structure_item -> LET rec_flag let_bindings
-- On EOF reduce production structure_item -> LET rec_flag let_bindings
-- On DEF reduce production structure_item -> LET rec_flag let_bindings
-- On CLASS reduce production structure_item -> LET rec_flag let_bindings

State 1516:
## Known stack suffix:
## DEF
## LR(1) items:
structure_item -> DEF . def_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On LIDENT shift to state 449
-- On join_pattern shift to state 467
-- On def_bindings shift to state 1517
-- On def_binding shift to state 595
## Reductions:

State 1517:
## Known stack suffix:
## DEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS AND ]
structure_item -> DEF def_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On AND shift to state 593
## Reductions:
-- On TYPE reduce production structure_item -> DEF def_bindings
-- On SHARP reduce production structure_item -> DEF def_bindings
-- On SEMISEMI reduce production structure_item -> DEF def_bindings
-- On OPEN reduce production structure_item -> DEF def_bindings
-- On MODULE reduce production structure_item -> DEF def_bindings
-- On LET reduce production structure_item -> DEF def_bindings
-- On EXTERNAL reduce production structure_item -> DEF def_bindings
-- On EXCEPTION reduce production structure_item -> DEF def_bindings
-- On EOF reduce production structure_item -> DEF def_bindings
-- On DEF reduce production structure_item -> DEF def_bindings
-- On CLASS reduce production structure_item -> DEF def_bindings

State 1518:
## Known stack suffix:
## SEMISEMI structure_item structure_tail
## LR(1) items:
structure_tail -> SEMISEMI structure_item structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI structure_item structure_tail

State 1519:
## Known stack suffix:
## structure_item
## LR(1) items:
structure_tail -> structure_item . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 967
-- On SEMISEMI shift to state 1032
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On structure_tail shift to state 1520
-- On structure_item shift to state 1519
## Reductions:
-- On EOF reduce production structure_tail ->

State 1520:
## Known stack suffix:
## structure_item structure_tail
## LR(1) items:
structure_tail -> structure_item structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> structure_item structure_tail

State 1521:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
structure_tail -> SEMISEMI seq_expr . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 967
-- On SEMISEMI shift to state 1032
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On structure_tail shift to state 1522
-- On structure_item shift to state 1519
## Reductions:
-- On EOF reduce production structure_tail ->

State 1522:
## Known stack suffix:
## SEMISEMI seq_expr structure_tail
## LR(1) items:
structure_tail -> SEMISEMI seq_expr structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure_tail -> SEMISEMI seq_expr structure_tail

State 1523:
## Known stack suffix:
## structure_tail
## LR(1) items:
structure -> structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> structure_tail

State 1524:
## Known stack suffix:
## structure
## LR(1) items:
implementation -> structure . EOF [ # ]
## Transitions:
-- On EOF shift to state 1525
## Reductions:

State 1525:
## Known stack suffix:
## structure EOF
## LR(1) items:
implementation -> structure EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production implementation -> structure EOF

State 1526:
## Known stack suffix:
## seq_expr
## LR(1) items:
structure -> seq_expr . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 967
-- On SEMISEMI shift to state 1032
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On structure_tail shift to state 1527
-- On structure_item shift to state 1519
## Reductions:
-- On EOF reduce production structure_tail ->

State 1527:
## Known stack suffix:
## seq_expr structure_tail
## LR(1) items:
structure -> seq_expr structure_tail . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production structure -> seq_expr structure_tail

State 1528:
## Known stack suffix:
## implementation
## LR(1) items:
implementation' -> implementation . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept implementation

State 1529:
## Known stack suffix:
##
## LR(1) items:
interface' -> . interface [ # ]
## Transitions:
-- On signature shift to state 1530
-- On interface shift to state 1571
## Default reduction:
-- After reading the next token, reduce production signature ->

State 1530:
## Known stack suffix:
## signature
## LR(1) items:
interface -> signature . EOF [ # ]
signature -> signature . signature_item [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature -> signature . signature_item SEMISEMI [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VAL shift to state 1531
-- On TYPE shift to state 1535
-- On OPEN shift to state 1537
-- On MODULE shift to state 1539
-- On INCLUDE shift to state 1554
-- On EXTERNAL shift to state 1556
-- On EXCEPTION shift to state 1562
-- On EOF shift to state 1565
-- On CLASS shift to state 1566
-- On signature_item shift to state 1569
## Reductions:

State 1531:
## Known stack suffix:
## VAL
## LR(1) items:
signature_item -> VAL . val_ident COLON core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 1532
## Reductions:

State 1532:
## Known stack suffix:
## VAL val_ident
## LR(1) items:
signature_item -> VAL val_ident . COLON core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1533
## Reductions:

State 1533:
## Known stack suffix:
## VAL val_ident COLON
## LR(1) items:
signature_item -> VAL val_ident COLON . core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1534
## Reductions:

State 1534:
## Known stack suffix:
## VAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION EOF CLASS AS ]
core_type -> core_type . AS type_parameter [ VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION EOF CLASS AS ]
signature_item -> VAL val_ident COLON core_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On AS shift to state 169
## Reductions:
-- On VAL reduce production signature_item -> VAL val_ident COLON core_type
-- On TYPE reduce production signature_item -> VAL val_ident COLON core_type
-- On SEMISEMI reduce production signature_item -> VAL val_ident COLON core_type
-- On OPEN reduce production signature_item -> VAL val_ident COLON core_type
-- On MODULE reduce production signature_item -> VAL val_ident COLON core_type
-- On INCLUDE reduce production signature_item -> VAL val_ident COLON core_type
-- On EXTERNAL reduce production signature_item -> VAL val_ident COLON core_type
-- On EXCEPTION reduce production signature_item -> VAL val_ident COLON core_type
-- On EOF reduce production signature_item -> VAL val_ident COLON core_type
-- On CLASS reduce production signature_item -> VAL val_ident COLON core_type

State 1535:
## Known stack suffix:
## TYPE
## LR(1) items:
signature_item -> TYPE . type_declarations [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On QUOTE shift to state 170
-- On LPAREN shift to state 968
-- On type_parameters shift to state 974
-- On type_parameter shift to state 1027
-- On type_declarations shift to state 1536
-- On type_declaration shift to state 1031
## Reductions:
-- On LIDENT reduce production type_parameters ->

State 1536:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
signature_item -> TYPE type_declarations . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
type_declarations -> type_declarations . AND type_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On AND shift to state 1029
## Reductions:
-- On VAL reduce production signature_item -> TYPE type_declarations
-- On TYPE reduce production signature_item -> TYPE type_declarations
-- On SEMISEMI reduce production signature_item -> TYPE type_declarations
-- On OPEN reduce production signature_item -> TYPE type_declarations
-- On MODULE reduce production signature_item -> TYPE type_declarations
-- On INCLUDE reduce production signature_item -> TYPE type_declarations
-- On EXTERNAL reduce production signature_item -> TYPE type_declarations
-- On EXCEPTION reduce production signature_item -> TYPE type_declarations
-- On EOF reduce production signature_item -> TYPE type_declarations
-- On CLASS reduce production signature_item -> TYPE type_declarations

State 1537:
## Known stack suffix:
## OPEN
## LR(1) items:
signature_item -> OPEN . mod_longident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On mod_longident shift to state 1538
## Reductions:

State 1538:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF DOT CLASS ]
signature_item -> OPEN mod_longident . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On DOT shift to state 304
## Reductions:
-- On VAL reduce production signature_item -> OPEN mod_longident
-- On TYPE reduce production signature_item -> OPEN mod_longident
-- On SEMISEMI reduce production signature_item -> OPEN mod_longident
-- On OPEN reduce production signature_item -> OPEN mod_longident
-- On MODULE reduce production signature_item -> OPEN mod_longident
-- On INCLUDE reduce production signature_item -> OPEN mod_longident
-- On EXTERNAL reduce production signature_item -> OPEN mod_longident
-- On EXCEPTION reduce production signature_item -> OPEN mod_longident
-- On EOF reduce production signature_item -> OPEN mod_longident
-- On CLASS reduce production signature_item -> OPEN mod_longident

State 1539:
## Known stack suffix:
## MODULE
## LR(1) items:
signature_item -> MODULE . UIDENT module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE . TYPE ident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE . TYPE ident EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1540
-- On TYPE shift to state 1550
## Reductions:

State 1540:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
signature_item -> MODULE UIDENT . module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1541
-- On COLON shift to state 1546
-- On module_declaration shift to state 1549
## Reductions:

State 1541:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_declaration -> LPAREN . UIDENT COLON module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1542
## Reductions:

State 1542:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_declaration -> LPAREN UIDENT . COLON module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1543
## Reductions:

State 1543:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON . module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1544
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1544:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type . RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1122
-- On RPAREN shift to state 1545
## Reductions:

State 1545:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN . module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1541
-- On COLON shift to state 1546
-- On module_declaration shift to state 1548
## Reductions:

State 1546:
## Known stack suffix:
## COLON
## LR(1) items:
module_declaration -> COLON . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1547
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1547:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_declaration -> COLON module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 1122
## Reductions:
-- On VAL reduce production module_declaration -> COLON module_type
-- On TYPE reduce production module_declaration -> COLON module_type
-- On SEMISEMI reduce production module_declaration -> COLON module_type
-- On OPEN reduce production module_declaration -> COLON module_type
-- On MODULE reduce production module_declaration -> COLON module_type
-- On INCLUDE reduce production module_declaration -> COLON module_type
-- On EXTERNAL reduce production module_declaration -> COLON module_type
-- On EXCEPTION reduce production module_declaration -> COLON module_type
-- On EOF reduce production module_declaration -> COLON module_type
-- On CLASS reduce production module_declaration -> COLON module_type

State 1548:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_declaration
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration

State 1549:
## Known stack suffix:
## MODULE UIDENT module_declaration
## LR(1) items:
signature_item -> MODULE UIDENT module_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> MODULE UIDENT module_declaration

State 1550:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
signature_item -> MODULE TYPE . ident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE . ident EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 134
-- On LIDENT shift to state 135
-- On ident shift to state 1551
## Reductions:

State 1551:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
signature_item -> MODULE TYPE ident . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE ident . EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On EQUAL shift to state 1552
## Reductions:
-- On VAL reduce production signature_item -> MODULE TYPE ident
-- On TYPE reduce production signature_item -> MODULE TYPE ident
-- On SEMISEMI reduce production signature_item -> MODULE TYPE ident
-- On OPEN reduce production signature_item -> MODULE TYPE ident
-- On MODULE reduce production signature_item -> MODULE TYPE ident
-- On INCLUDE reduce production signature_item -> MODULE TYPE ident
-- On EXTERNAL reduce production signature_item -> MODULE TYPE ident
-- On EXCEPTION reduce production signature_item -> MODULE TYPE ident
-- On EOF reduce production signature_item -> MODULE TYPE ident
-- On CLASS reduce production signature_item -> MODULE TYPE ident

State 1552:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
signature_item -> MODULE TYPE ident EQUAL . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1553
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1553:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE ident EQUAL module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 1122
## Reductions:
-- On VAL reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On TYPE reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On SEMISEMI reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On OPEN reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On MODULE reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On INCLUDE reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On EXTERNAL reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On EXCEPTION reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On EOF reduce production signature_item -> MODULE TYPE ident EQUAL module_type
-- On CLASS reduce production signature_item -> MODULE TYPE ident EQUAL module_type

State 1554:
## Known stack suffix:
## INCLUDE
## LR(1) items:
signature_item -> INCLUDE . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1040
-- On SIG shift to state 1041
-- On LPAREN shift to state 1105
-- On LIDENT shift to state 135
-- On FUNCTOR shift to state 1116
-- On mty_longident shift to state 1120
-- On module_type shift to state 1555
-- On mod_ext_longident shift to state 1140
-- On ident shift to state 1144
## Reductions:

State 1555:
## Known stack suffix:
## INCLUDE module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> INCLUDE module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 1122
## Reductions:
-- On VAL reduce production signature_item -> INCLUDE module_type
-- On TYPE reduce production signature_item -> INCLUDE module_type
-- On SEMISEMI reduce production signature_item -> INCLUDE module_type
-- On OPEN reduce production signature_item -> INCLUDE module_type
-- On MODULE reduce production signature_item -> INCLUDE module_type
-- On INCLUDE reduce production signature_item -> INCLUDE module_type
-- On EXTERNAL reduce production signature_item -> INCLUDE module_type
-- On EXCEPTION reduce production signature_item -> INCLUDE module_type
-- On EOF reduce production signature_item -> INCLUDE module_type
-- On CLASS reduce production signature_item -> INCLUDE module_type

State 1556:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
signature_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On val_ident shift to state 1557
## Reductions:

State 1557:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
signature_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1558
## Reductions:

State 1558:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 130
-- On UIDENT shift to state 122
-- On SHARP shift to state 131
-- On QUOTE shift to state 133
-- On LPAREN shift to state 137
-- On LIDENT shift to state 138
-- On LESSLESS shift to state 139
-- On LESS shift to state 140
-- On type_longident shift to state 148
-- On simple_core_type shift to state 149
-- On mod_ext_longident shift to state 155
-- On core_type_tuple shift to state 163
-- On core_type shift to state 1559
## Reductions:

State 1559:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
signature_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 167
-- On EQUAL shift to state 1560
-- On AS shift to state 169
## Reductions:

State 1560:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STRING shift to state 1500
-- On primitive_declaration shift to state 1561
## Reductions:

State 1561:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1562:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
signature_item -> EXCEPTION . UIDENT constructor_arguments [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1563
## Reductions:

State 1563:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
signature_item -> EXCEPTION UIDENT . constructor_arguments [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On OF shift to state 1004
-- On constructor_arguments shift to state 1564
## Reductions:
-- On VAL reduce production constructor_arguments ->
-- On TYPE reduce production constructor_arguments ->
-- On SEMISEMI reduce production constructor_arguments ->
-- On OPEN reduce production constructor_arguments ->
-- On MODULE reduce production constructor_arguments ->
-- On INCLUDE reduce production constructor_arguments ->
-- On EXTERNAL reduce production constructor_arguments ->
-- On EXCEPTION reduce production constructor_arguments ->
-- On EOF reduce production constructor_arguments ->
-- On CLASS reduce production constructor_arguments ->

State 1564:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
signature_item -> EXCEPTION UIDENT constructor_arguments . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> EXCEPTION UIDENT constructor_arguments

State 1565:
## Known stack suffix:
## signature EOF
## LR(1) items:
interface -> signature EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production interface -> signature EOF

State 1566:
## Known stack suffix:
## CLASS
## LR(1) items:
signature_item -> CLASS . class_type_list END [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1193
-- On virtual_flag shift to state 1194
-- On class_type_list shift to state 1567
-- On class_type shift to state 1246
## Reductions:
-- On QUOTE reduce production virtual_flag ->
-- On LPAREN reduce production virtual_flag ->
-- On LIDENT reduce production virtual_flag ->
-- On CLOSED reduce production virtual_flag ->

State 1567:
## Known stack suffix:
## CLASS class_type_list
## LR(1) items:
class_type_list -> class_type_list . AND class_type [ END AND ]
signature_item -> CLASS class_type_list . END [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On END shift to state 1568
-- On AND shift to state 1244
## Reductions:

State 1568:
## Known stack suffix:
## CLASS class_type_list END
## LR(1) items:
signature_item -> CLASS class_type_list END . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature_item -> CLASS class_type_list END

State 1569:
## Known stack suffix:
## signature signature_item
## LR(1) items:
signature -> signature signature_item . [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature -> signature signature_item . SEMISEMI [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On SEMISEMI shift to state 1570
## Reductions:
-- On VAL reduce production signature -> signature signature_item
-- On TYPE reduce production signature -> signature signature_item
-- On OPEN reduce production signature -> signature signature_item
-- On MODULE reduce production signature -> signature signature_item
-- On INCLUDE reduce production signature -> signature signature_item
-- On EXTERNAL reduce production signature -> signature signature_item
-- On EXCEPTION reduce production signature -> signature signature_item
-- On EOF reduce production signature -> signature signature_item
-- On CLASS reduce production signature -> signature signature_item

State 1570:
## Known stack suffix:
## signature signature_item SEMISEMI
## LR(1) items:
signature -> signature signature_item SEMISEMI . [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> signature signature_item SEMISEMI

State 1571:
## Known stack suffix:
## interface
## LR(1) items:
interface' -> interface . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept interface

State 1572:
## Known stack suffix:
##
## LR(1) items:
toplevel_phrase' -> . toplevel_phrase [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 967
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SHARP shift to state 1573
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On OPEN shift to state 1033
-- On NEW shift to state 9
-- On MODULE shift to state 1035
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 1492
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1579
-- On DEF shift to state 1506
-- On CLASS shift to state 1508
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On toplevel_phrase shift to state 1580
-- On toplevel_directive shift to state 1581
-- On top_structure shift to state 1583
-- On structure_item shift to state 1585
-- On simple_expr shift to state 640
-- On seq_expr shift to state 1587
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 1573:
## Known stack suffix:
## SHARP
## LR(1) items:
toplevel_directive -> SHARP . ident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
toplevel_directive -> SHARP . ident STRING [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
toplevel_directive -> SHARP . ident INT [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
toplevel_directive -> SHARP . ident val_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 134
-- On LIDENT shift to state 135
-- On ident shift to state 1574
## Reductions:

State 1574:
## Known stack suffix:
## SHARP ident
## LR(1) items:
toplevel_directive -> SHARP ident . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
toplevel_directive -> SHARP ident . STRING [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
toplevel_directive -> SHARP ident . INT [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
toplevel_directive -> SHARP ident . val_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On UIDENT shift to state 2
-- On STRING shift to state 1575
-- On LPAREN shift to state 380
-- On LIDENT shift to state 246
-- On INT shift to state 1576
-- On val_longident shift to state 1577
-- On val_ident shift to state 359
-- On mod_longident shift to state 1578
## Reductions:
-- On TYPE reduce production toplevel_directive -> SHARP ident
-- On SHARP reduce production toplevel_directive -> SHARP ident
-- On SEMISEMI reduce production toplevel_directive -> SHARP ident
-- On OPEN reduce production toplevel_directive -> SHARP ident
-- On MODULE reduce production toplevel_directive -> SHARP ident
-- On LET reduce production toplevel_directive -> SHARP ident
-- On EXTERNAL reduce production toplevel_directive -> SHARP ident
-- On EXCEPTION reduce production toplevel_directive -> SHARP ident
-- On EOF reduce production toplevel_directive -> SHARP ident
-- On DEF reduce production toplevel_directive -> SHARP ident
-- On CLASS reduce production toplevel_directive -> SHARP ident

State 1575:
## Known stack suffix:
## SHARP ident STRING
## LR(1) items:
toplevel_directive -> SHARP ident STRING . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident STRING

State 1576:
## Known stack suffix:
## SHARP ident INT
## LR(1) items:
toplevel_directive -> SHARP ident INT . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident INT

State 1577:
## Known stack suffix:
## SHARP ident val_longident
## LR(1) items:
toplevel_directive -> SHARP ident val_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production toplevel_directive -> SHARP ident val_longident

State 1578:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
val_longident -> mod_longident . DOT val_ident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DEF CLASS ]
## Transitions:
-- On DOT shift to state 379
## Reductions:

State 1579:
## Known stack suffix:
## EOF
## LR(1) items:
toplevel_phrase -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> EOF

State 1580:
## Known stack suffix:
## toplevel_phrase
## LR(1) items:
toplevel_phrase' -> toplevel_phrase . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept toplevel_phrase

State 1581:
## Known stack suffix:
## toplevel_directive
## LR(1) items:
toplevel_phrase -> toplevel_directive . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1582
## Reductions:

State 1582:
## Known stack suffix:
## toplevel_directive SEMISEMI
## LR(1) items:
toplevel_phrase -> toplevel_directive SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> toplevel_directive SEMISEMI

State 1583:
## Known stack suffix:
## top_structure
## LR(1) items:
toplevel_phrase -> top_structure . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1584
## Reductions:

State 1584:
## Known stack suffix:
## top_structure SEMISEMI
## LR(1) items:
toplevel_phrase -> top_structure SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> top_structure SEMISEMI

State 1585:
## Known stack suffix:
## structure_item
## LR(1) items:
top_structure -> structure_item . [ SEMISEMI ]
top_structure -> structure_item . top_structure [ SEMISEMI ]
## Transitions:
-- On TYPE shift to state 967
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On top_structure shift to state 1586
-- On structure_item shift to state 1585
## Reductions:
-- On SEMISEMI reduce production top_structure -> structure_item

State 1586:
## Known stack suffix:
## structure_item top_structure
## LR(1) items:
top_structure -> structure_item top_structure . [ SEMISEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production top_structure -> structure_item top_structure

State 1587:
## Known stack suffix:
## seq_expr
## LR(1) items:
toplevel_phrase -> seq_expr . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1588
## Reductions:

State 1588:
## Known stack suffix:
## seq_expr SEMISEMI
## LR(1) items:
toplevel_phrase -> seq_expr SEMISEMI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production toplevel_phrase -> seq_expr SEMISEMI

State 1589:
## Known stack suffix:
##
## LR(1) items:
use_file' -> . use_file [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 967
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SHARP shift to state 1573
-- On SEMISEMI shift to state 1590
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On OPEN shift to state 1033
-- On NEW shift to state 9
-- On MODULE shift to state 1035
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 1492
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1593
-- On DEF shift to state 1506
-- On CLASS shift to state 1508
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On use_file_tail shift to state 1603
-- On use_file shift to state 1604
-- On toplevel_directive shift to state 1595
-- On structure_item shift to state 1597
-- On simple_expr shift to state 640
-- On seq_expr shift to state 1605
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 1590:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
use_file_tail -> SEMISEMI . EOF [ # ]
use_file_tail -> SEMISEMI . seq_expr use_file_tail [ # ]
use_file_tail -> SEMISEMI . structure_item use_file_tail [ # ]
use_file_tail -> SEMISEMI . toplevel_directive use_file_tail [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On UIDENT shift to state 2
-- On TYPE shift to state 967
-- On TRY shift to state 3
-- On TRUE shift to state 5
-- On SUBTRACTIVE shift to state 6
-- On STRING shift to state 7
-- On SHARP shift to state 1573
-- On PREFIXOP shift to state 8
-- On PARSER shift to state 275
-- On OPEN shift to state 1033
-- On NEW shift to state 9
-- On MODULE shift to state 1035
-- On MATCH shift to state 282
-- On LPAREN shift to state 16
-- On LOC shift to state 283
-- On LIDENT shift to state 285
-- On LET shift to state 1492
-- On LBRACKETLESS shift to state 292
-- On LBRACKETBAR shift to state 409
-- On LBRACKET shift to state 418
-- On LBRACELESS shift to state 423
-- On LBRACEBAR shift to state 437
-- On LBRACE shift to state 441
-- On LAZY shift to state 603
-- On INT shift to state 258
-- On IF shift to state 624
-- On FUNCTION shift to state 625
-- On FUN shift to state 629
-- On FOR shift to state 632
-- On FLOAT shift to state 259
-- On FALSE shift to state 260
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1591
-- On DEF shift to state 1506
-- On CLASS shift to state 1508
-- On CHAR shift to state 357
-- On BEGIN shift to state 604
-- On ASSERT shift to state 638
-- On val_longident shift to state 608
-- On val_ident shift to state 359
-- On toplevel_directive shift to state 1592
-- On structure_item shift to state 1599
-- On simple_expr shift to state 640
-- On seq_expr shift to state 1601
-- On mod_longident shift to state 378
-- On label shift to state 651
-- On expr_comma_list shift to state 653
-- On expr shift to state 708
-- On constr_longident shift to state 662
-- On constant shift to state 623
## Reductions:

State 1591:
## Known stack suffix:
## SEMISEMI EOF
## LR(1) items:
use_file_tail -> SEMISEMI EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI EOF

State 1592:
## Known stack suffix:
## SEMISEMI toplevel_directive
## LR(1) items:
use_file_tail -> SEMISEMI toplevel_directive . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 967
-- On SHARP shift to state 1573
-- On SEMISEMI shift to state 1590
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1593
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On use_file_tail shift to state 1594
-- On toplevel_directive shift to state 1595
-- On structure_item shift to state 1597
## Reductions:

State 1593:
## Known stack suffix:
## EOF
## LR(1) items:
use_file_tail -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> EOF

State 1594:
## Known stack suffix:
## SEMISEMI toplevel_directive use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI toplevel_directive use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI toplevel_directive use_file_tail

State 1595:
## Known stack suffix:
## toplevel_directive
## LR(1) items:
use_file_tail -> toplevel_directive . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 967
-- On SHARP shift to state 1573
-- On SEMISEMI shift to state 1590
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1593
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On use_file_tail shift to state 1596
-- On toplevel_directive shift to state 1595
-- On structure_item shift to state 1597
## Reductions:

State 1596:
## Known stack suffix:
## toplevel_directive use_file_tail
## LR(1) items:
use_file_tail -> toplevel_directive use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> toplevel_directive use_file_tail

State 1597:
## Known stack suffix:
## structure_item
## LR(1) items:
use_file_tail -> structure_item . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 967
-- On SHARP shift to state 1573
-- On SEMISEMI shift to state 1590
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1593
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On use_file_tail shift to state 1598
-- On toplevel_directive shift to state 1595
-- On structure_item shift to state 1597
## Reductions:

State 1598:
## Known stack suffix:
## structure_item use_file_tail
## LR(1) items:
use_file_tail -> structure_item use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> structure_item use_file_tail

State 1599:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
use_file_tail -> SEMISEMI structure_item . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 967
-- On SHARP shift to state 1573
-- On SEMISEMI shift to state 1590
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1593
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On use_file_tail shift to state 1600
-- On toplevel_directive shift to state 1595
-- On structure_item shift to state 1597
## Reductions:

State 1600:
## Known stack suffix:
## SEMISEMI structure_item use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI structure_item use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI structure_item use_file_tail

State 1601:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
use_file_tail -> SEMISEMI seq_expr . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 967
-- On SHARP shift to state 1573
-- On SEMISEMI shift to state 1590
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1593
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On use_file_tail shift to state 1602
-- On toplevel_directive shift to state 1595
-- On structure_item shift to state 1597
## Reductions:

State 1602:
## Known stack suffix:
## SEMISEMI seq_expr use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI seq_expr use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file_tail -> SEMISEMI seq_expr use_file_tail

State 1603:
## Known stack suffix:
## use_file_tail
## LR(1) items:
use_file -> use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file -> use_file_tail

State 1604:
## Known stack suffix:
## use_file
## LR(1) items:
use_file' -> use_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept use_file

State 1605:
## Known stack suffix:
## seq_expr
## LR(1) items:
use_file -> seq_expr . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 967
-- On SHARP shift to state 1573
-- On SEMISEMI shift to state 1590
-- On OPEN shift to state 1033
-- On MODULE shift to state 1035
-- On LET shift to state 1513
-- On EXTERNAL shift to state 1495
-- On EXCEPTION shift to state 1503
-- On EOF shift to state 1593
-- On DEF shift to state 1516
-- On CLASS shift to state 1508
-- On use_file_tail shift to state 1606
-- On toplevel_directive shift to state 1595
-- On structure_item shift to state 1597
## Reductions:

State 1606:
## Known stack suffix:
## seq_expr use_file_tail
## LR(1) items:
use_file -> seq_expr use_file_tail . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production use_file -> seq_expr use_file_tail

