State 0:
## Known stack suffix:
##
## LR(1) items:
implementation' -> . implementation [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 1174
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On SEMISEMI shift to state 1254
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On OPEN shift to state 1255
-- On NEW shift to state 15
-- On MODULE shift to state 1257
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 1730
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On structure_tail shift to state 1733
-- On structure_item shift to state 1715
-- On structure shift to state 1734
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1736
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On implementation shift to state 1738
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1:
## Known stack suffix:
## WHILE
## LR(1) items:
expr0 -> WHILE . seq_expr DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE . seq_expr DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1169
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 2:
## Known stack suffix:
## VARTYPE
## LR(1) items:
simple_expr -> VARTYPE . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> VARTYPE

State 3:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_longident -> UIDENT . [ WITH WHEN VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production mod_longident -> UIDENT

State 4:
## Known stack suffix:
## TRY
## LR(1) items:
expr0 -> TRY . seq_expr WITH opt_bar match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY . seq_expr WITH error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY . seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1163
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 5:
## Known stack suffix:
## WHILE
## LR(1) items:
expr0 -> WHILE . seq_expr DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE . seq_expr DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1158
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 6:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_longident -> TRUE . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> TRUE

State 7:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
expr0 -> SUBTRACTIVE . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 1157
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 8:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constant -> STRING

State 9:
## Known stack suffix:
## SPAWN
## LR(1) items:
expr0 -> SPAWN . LBRACE error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN . LBRACE process RBRACE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN . LBRACE process error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACE shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## SPAWN LBRACE
## LR(1) items:
expr0 -> SPAWN LBRACE . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN LBRACE . process RBRACE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN LBRACE . process error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 11
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 1154
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error RBRACE
--   reduce production process ->
** Conflict on error

State 11:
## Known stack suffix:
## SPAWN LBRACE error
## LR(1) items:
expr0 -> SPAWN LBRACE error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SPAWN LBRACE error

State 12:
## Known stack suffix:
## WHILE
## LR(1) items:
proc_expr -> WHILE . seq_expr DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> WHILE . seq_expr DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1149
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 13:
## Known stack suffix:
## RELOCINFO
## LR(1) items:
simple_expr -> RELOCINFO . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> RELOCINFO

State 14:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 1148
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 15:
## Known stack suffix:
## NEW
## LR(1) items:
simple_expr -> NEW . class_longident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 21
## Reductions:

State 16:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_longident -> LIDENT . [ WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERGREATER GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERGREATER GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production class_longident -> LIDENT

State 17:
## Known stack suffix:
## mod_longident
## LR(1) items:
class_longident -> mod_longident . DOT LIDENT [ WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERGREATER GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
class_longident -> mod_longident DOT . LIDENT [ WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERGREATER GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 19
-- On LIDENT shift to state 20
## Reductions:

State 19:
## Known stack suffix:
## mod_longident DOT UIDENT
## LR(1) items:
mod_longident -> mod_longident DOT UIDENT . [ WITH WHEN VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production mod_longident -> mod_longident DOT UIDENT

State 20:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
class_longident -> mod_longident DOT LIDENT . [ WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERGREATER GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERGREATER GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production class_longident -> mod_longident DOT LIDENT

State 21:
## Known stack suffix:
## NEW class_longident
## LR(1) items:
simple_expr -> NEW class_longident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> NEW class_longident

State 22:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr type_constraint RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . SHARP label RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 280
-- On STRING shift to state 28
-- On STAR shift to state 49
-- On SPAWN shift to state 29
-- On SHARP shift to state 1140
-- On RPAREN shift to state 50
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 641
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LESSGREATER shift to state 55
-- On LESS shift to state 56
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On INFIXOP4 shift to state 97
-- On INFIXOP3 shift to state 98
-- On INFIXOP2 shift to state 99
-- On INFIXOP1 shift to state 100
-- On INFIXOP0 shift to state 101
-- On IF shift to state 361
-- On GREATER shift to state 102
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EQUAL shift to state 103
-- On COLONEQUAL shift to state 104
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On BARBAR shift to state 105
-- On ASSERT shift to state 409
-- On AMPERSAND shift to state 106
-- On AMPERAMPER shift to state 107
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1143
-- On operator shift to state 245
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 23:
## Known stack suffix:
## VARTYPE
## LR(1) items:
simple_expr -> VARTYPE . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> VARTYPE

State 24:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_longident -> UIDENT . [ error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production mod_longident -> UIDENT

State 25:
## Known stack suffix:
## TRY
## LR(1) items:
expr0 -> TRY . seq_expr WITH opt_bar match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY . seq_expr WITH error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY . seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1134
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 26:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_longident -> TRUE . [ error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> TRUE

State 27:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
expr0 -> SUBTRACTIVE . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 1098
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 28:
## Known stack suffix:
## STRING
## LR(1) items:
constant -> STRING . [ error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constant -> STRING

State 29:
## Known stack suffix:
## SPAWN
## LR(1) items:
expr0 -> SPAWN . LBRACE error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN . LBRACE process RBRACE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN . LBRACE process error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACE shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## SPAWN LBRACE
## LR(1) items:
expr0 -> SPAWN LBRACE . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN LBRACE . process RBRACE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN LBRACE . process error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 31
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 1131
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error RBRACE
--   reduce production process ->
** Conflict on error

State 31:
## Known stack suffix:
## SPAWN LBRACE error
## LR(1) items:
expr0 -> SPAWN LBRACE error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SPAWN LBRACE error

State 32:
## Known stack suffix:
## SPAWN
## LR(1) items:
process -> SPAWN . LBRACE process RBRACE SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LBRACE shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## SPAWN LBRACE
## LR(1) items:
process -> SPAWN LBRACE . process RBRACE SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 1127
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On RBRACE
--   reduce production process ->

State 34:
## Known stack suffix:
## SPAWN
## LR(1) items:
process -> SPAWN . LBRACE process RBRACE SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LBRACE shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## SPAWN LBRACE
## LR(1) items:
process -> SPAWN LBRACE . process RBRACE SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 1123
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On RBRACE
--   reduce production process ->

State 36:
## Known stack suffix:
## REPLY
## LR(1) items:
process0 -> REPLY . expr to_ident [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> REPLY . to_ident [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On TO shift to state 37
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On to_ident shift to state 1120
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 1121
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production to_ident ->
** Conflict on LET

State 37:
## Known stack suffix:
## TO
## LR(1) items:
to_ident -> TO . LIDENT [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## TO LIDENT
## LR(1) items:
to_ident -> TO LIDENT . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production to_ident -> TO LIDENT

State 39:
## Known stack suffix:
## PARSER
## LR(1) items:
expr0 -> PARSER . opt_pat opt_bar parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 268
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On LBRACKETLESS BAR
--   reduce production opt_pat ->

State 40:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> UNDERSCORE

State 41:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
signed_constant -> SUBTRACTIVE . INT [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
signed_constant -> SUBTRACTIVE . FLOAT [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On INT shift to state 42
-- On FLOAT shift to state 43
## Reductions:

State 42:
## Known stack suffix:
## SUBTRACTIVE INT
## LR(1) items:
signed_constant -> SUBTRACTIVE INT . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production signed_constant -> SUBTRACTIVE INT

State 43:
## Known stack suffix:
## SUBTRACTIVE FLOAT
## LR(1) items:
signed_constant -> SUBTRACTIVE FLOAT . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production signed_constant -> SUBTRACTIVE FLOAT

State 44:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
val_ident -> LPAREN . operator RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 46
-- On STRING shift to state 28
-- On STAR shift to state 49
-- On RPAREN shift to state 50
-- On PREFIXOP shift to state 51
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LESSGREATER shift to state 55
-- On LESS shift to state 56
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On INFIXOP4 shift to state 97
-- On INFIXOP3 shift to state 98
-- On INFIXOP2 shift to state 99
-- On INFIXOP1 shift to state 100
-- On INFIXOP0 shift to state 101
-- On GREATER shift to state 102
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EQUAL shift to state 103
-- On COLONEQUAL shift to state 104
-- On CHAR shift to state 72
-- On BARBAR shift to state 105
-- On AMPERSAND shift to state 106
-- On AMPERAMPER shift to state 107
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 238
-- On operator shift to state 245
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 45:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> UNDERSCORE

State 46:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
operator -> SUBTRACTIVE . [ RPAREN ]
signed_constant -> SUBTRACTIVE . INT [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
signed_constant -> SUBTRACTIVE . FLOAT [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On INT shift to state 47
-- On FLOAT shift to state 48
## Reductions:
-- On RPAREN
--   reduce production operator -> SUBTRACTIVE

State 47:
## Known stack suffix:
## SUBTRACTIVE INT
## LR(1) items:
signed_constant -> SUBTRACTIVE INT . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production signed_constant -> SUBTRACTIVE INT

State 48:
## Known stack suffix:
## SUBTRACTIVE FLOAT
## LR(1) items:
signed_constant -> SUBTRACTIVE FLOAT . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production signed_constant -> SUBTRACTIVE FLOAT

State 49:
## Known stack suffix:
## STAR
## LR(1) items:
operator -> STAR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> STAR

State 50:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_longident -> LPAREN RPAREN . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> LPAREN RPAREN

State 51:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> PREFIXOP

State 52:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN . pattern RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN . pattern error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN . pattern COLON core_type error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
val_ident -> LPAREN . operator RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 46
-- On STRING shift to state 28
-- On STAR shift to state 49
-- On RPAREN shift to state 53
-- On PREFIXOP shift to state 51
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LESSGREATER shift to state 55
-- On LESS shift to state 56
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On INFIXOP4 shift to state 97
-- On INFIXOP3 shift to state 98
-- On INFIXOP2 shift to state 99
-- On INFIXOP1 shift to state 100
-- On INFIXOP0 shift to state 101
-- On GREATER shift to state 102
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EQUAL shift to state 103
-- On COLONEQUAL shift to state 104
-- On CHAR shift to state 72
-- On BARBAR shift to state 105
-- On AMPERSAND shift to state 106
-- On AMPERAMPER shift to state 107
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 124
-- On operator shift to state 108
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 53:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_longident -> LPAREN RPAREN . [ error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> LPAREN RPAREN

State 54:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LIDENT

State 55:
## Known stack suffix:
## LESSGREATER
## LR(1) items:
operator -> LESSGREATER . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> LESSGREATER

State 56:
## Known stack suffix:
## LESS
## LR(1) items:
operator -> LESS . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> LESS

State 57:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On RBRACKET shift to state 59
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_semi_list shift to state 117
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 123
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 58:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
signed_constant -> SUBTRACTIVE . INT [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
signed_constant -> SUBTRACTIVE . FLOAT [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On INT shift to state 47
-- On FLOAT shift to state 48
## Reductions:

State 59:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_longident -> LBRACKET RBRACKET . [ error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> LBRACKET RBRACKET

State 60:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On lbl_pattern_list shift to state 65
-- On label_longident shift to state 114
## Reductions:

State 61:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production label_longident -> LIDENT

State 62:
## Known stack suffix:
## mod_longident
## LR(1) items:
label_longident -> mod_longident . DOT LIDENT [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
label_longident -> mod_longident DOT . LIDENT [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 19
-- On LIDENT shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
label_longident -> mod_longident DOT LIDENT . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production label_longident -> mod_longident DOT LIDENT

State 65:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . SEMI label_longident EQUAL pattern [ error SEMI RBRACE ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi RBRACE [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On SEMI shift to state 66
-- On opt_semi shift to state 111
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 66:
## Known stack suffix:
## lbl_pattern_list SEMI
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI . label_longident EQUAL pattern [ error SEMI RBRACE ]
opt_semi -> SEMI . [ error RBRACE ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On label_longident shift to state 67
## Reductions:
-- On error RBRACE
--   reduce production opt_semi -> SEMI

State 67:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident . EQUAL pattern [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident EQUAL
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL . pattern [ error SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 89
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 69:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constant -> INT

State 70:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constant -> FLOAT

State 71:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_longident -> FALSE . [ error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> FALSE

State 72:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On DOTDOT shift to state 73
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production constant -> CHAR

State 73:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On CHAR shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> CHAR DOTDOT CHAR

State 75:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> val_ident

State 76:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production pattern -> simple_pattern

State 77:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> signed_constant

State 78:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
pattern -> pattern_comma_list . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern_comma_list . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COMMA shift to state 79
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production pattern -> pattern_comma_list
** Conflict on COMMA

State 79:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 80
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 80:
## Known stack suffix:
## pattern_comma_list COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern_comma_list COMMA pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 81
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLON BAR AS
--   reduce production pattern_comma_list -> pattern_comma_list COMMA pattern

State 81:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 82
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 82:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern COLONCOLON pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 81
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLON BAR AS
--   reduce production pattern -> pattern COLONCOLON pattern

State 83:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHAR BAR AS ]
mod_longident -> mod_longident . DOT UIDENT [ error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL DOT COMMA COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On DOT shift to state 84
## Reductions:
-- On error WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING SEMI RPAREN RBRACKET RBRACE QUESTION LPAREN LIDENT LBRACKET LBRACE INT GREATERRBRACKET FLOAT FALSE EQUAL COMMA COLONCOLON COLON CHAR BAR AS
--   reduce production constr_longident -> mod_longident

State 84:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ error WHEN VAL UNDERSCORE UIDENT TYPE TRUE SUBTRACTIVE STRING SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OPEN MODULE LPAREN LIDENT LET LBRACKET LBRACE INT INCLUDE GREATERRBRACKET FLOAT FALSE EXTERNAL EXCEPTION EQUAL END DOT COMMA COLONCOLON COLON CLASS CHAR BAR AS ]
## Transitions:
-- On UIDENT shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## mod_longident DOT UIDENT
## LR(1) items:
mod_longident -> mod_longident DOT UIDENT . [ error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production mod_longident -> mod_longident DOT UIDENT

State 86:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> constr_longident . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 87
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> constr_longident

State 87:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> constr_longident pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production pattern -> constr_longident pattern

State 88:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production signed_constant -> constant

State 89:
## Known stack suffix:
## lbl_pattern_list SEMI label_longident EQUAL pattern
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern . [ error SEMI RBRACE ]
pattern -> pattern . AS val_ident [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_pattern_list -> lbl_pattern_list SEMI label_longident EQUAL pattern

State 90:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
pattern_comma_list -> pattern COMMA . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 91
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 91:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern COMMA pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 81
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLON BAR AS
--   reduce production pattern_comma_list -> pattern COMMA pattern

State 92:
## Known stack suffix:
## pattern BAR
## LR(1) items:
pattern -> pattern BAR . pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 93
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 93:
## Known stack suffix:
## pattern BAR pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern BAR pattern . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COLON BAR AS
--   reduce production pattern -> pattern BAR pattern

State 94:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . val_ident [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On LPAREN shift to state 95
-- On LIDENT shift to state 54
-- On val_ident shift to state 110
## Reductions:

State 95:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 96
-- On STAR shift to state 49
-- On PREFIXOP shift to state 51
-- On LESSGREATER shift to state 55
-- On LESS shift to state 56
-- On INFIXOP4 shift to state 97
-- On INFIXOP3 shift to state 98
-- On INFIXOP2 shift to state 99
-- On INFIXOP1 shift to state 100
-- On INFIXOP0 shift to state 101
-- On GREATER shift to state 102
-- On EQUAL shift to state 103
-- On COLONEQUAL shift to state 104
-- On BARBAR shift to state 105
-- On AMPERSAND shift to state 106
-- On AMPERAMPER shift to state 107
-- On operator shift to state 108
## Reductions:

State 96:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
operator -> SUBTRACTIVE . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> SUBTRACTIVE

State 97:
## Known stack suffix:
## INFIXOP4
## LR(1) items:
operator -> INFIXOP4 . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP4

State 98:
## Known stack suffix:
## INFIXOP3
## LR(1) items:
operator -> INFIXOP3 . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP3

State 99:
## Known stack suffix:
## INFIXOP2
## LR(1) items:
operator -> INFIXOP2 . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP2

State 100:
## Known stack suffix:
## INFIXOP1
## LR(1) items:
operator -> INFIXOP1 . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP1

State 101:
## Known stack suffix:
## INFIXOP0
## LR(1) items:
operator -> INFIXOP0 . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> INFIXOP0

State 102:
## Known stack suffix:
## GREATER
## LR(1) items:
operator -> GREATER . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> GREATER

State 103:
## Known stack suffix:
## EQUAL
## LR(1) items:
operator -> EQUAL . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> EQUAL

State 104:
## Known stack suffix:
## COLONEQUAL
## LR(1) items:
operator -> COLONEQUAL . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> COLONEQUAL

State 105:
## Known stack suffix:
## BARBAR
## LR(1) items:
operator -> BARBAR . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> BARBAR

State 106:
## Known stack suffix:
## AMPERSAND
## LR(1) items:
operator -> AMPERSAND . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> AMPERSAND

State 107:
## Known stack suffix:
## AMPERAMPER
## LR(1) items:
operator -> AMPERAMPER . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production operator -> AMPERAMPER

State 108:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH WHEN VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LPAREN operator RPAREN

State 110:
## Known stack suffix:
## pattern AS val_ident
## LR(1) items:
pattern -> pattern AS val_ident . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production pattern -> pattern AS val_ident

State 111:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi . RBRACE [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list opt_semi . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 112
-- On RBRACE shift to state 113
## Reductions:

State 112:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi error

State 113:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE

State 114:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_pattern_list -> label_longident . EQUAL pattern [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## label_longident EQUAL
## LR(1) items:
lbl_pattern_list -> label_longident EQUAL . pattern [ error SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 116
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 116:
## Known stack suffix:
## label_longident EQUAL pattern
## LR(1) items:
lbl_pattern_list -> label_longident EQUAL pattern . [ error SEMI RBRACE ]
pattern -> pattern . AS val_ident [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACE COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_pattern_list -> label_longident EQUAL pattern

State 117:
## Known stack suffix:
## LBRACKET pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI RBRACKET ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi RBRACKET [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On SEMI shift to state 118
-- On opt_semi shift to state 120
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 118:
## Known stack suffix:
## pattern_semi_list SEMI
## LR(1) items:
opt_semi -> SEMI . [ error RBRACKET ]
pattern_semi_list -> pattern_semi_list SEMI . pattern [ error SEMI RBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 119
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi -> SEMI

State 119:
## Known stack suffix:
## pattern_semi_list SEMI pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_semi_list -> pattern_semi_list SEMI pattern . [ error SEMI RBRACKET ]
## Transitions:
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:
-- On error SEMI RBRACKET
--   reduce production pattern_semi_list -> pattern_semi_list SEMI pattern

State 120:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi . RBRACKET [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list opt_semi . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 121
-- On RBRACKET shift to state 122
## Reductions:

State 121:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi error

State 122:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi RBRACKET
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET

State 123:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
pattern_semi_list -> pattern . [ error SEMI RBRACKET ]
## Transitions:
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:
-- On error SEMI RBRACKET
--   reduce production pattern_semi_list -> pattern

State 124:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 125
-- On RPAREN shift to state 126
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On COLON shift to state 127
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:

State 125:
## Known stack suffix:
## LPAREN pattern error
## LR(1) items:
simple_pattern -> LPAREN pattern error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LPAREN pattern error

State 126:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern RPAREN . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LPAREN pattern RPAREN

State 127:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
simple_pattern -> LPAREN pattern COLON . core_type RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern COLON . core_type error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 229
## Reductions:

State 128:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_core_type -> UNDERSCORE . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> UNDERSCORE

State 129:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_ext_longident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND
--   reduce production mod_ext_longident -> UIDENT

State 130:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_core_type -> SHARP . class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 131
-- On mod_longident shift to state 132
-- On class_longident shift to state 135
## Reductions:

State 131:
## Known stack suffix:
## LIDENT
## LR(1) items:
class_longident -> LIDENT . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production class_longident -> LIDENT

State 132:
## Known stack suffix:
## mod_longident
## LR(1) items:
class_longident -> mod_longident . DOT LIDENT [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
class_longident -> mod_longident DOT . LIDENT [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 19
-- On LIDENT shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
class_longident -> mod_longident DOT LIDENT . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 INCLUDE IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO CONSTRAINT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production class_longident -> mod_longident DOT LIDENT

State 135:
## Known stack suffix:
## SHARP class_longident
## LR(1) items:
simple_core_type -> SHARP class_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> SHARP class_longident

State 136:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type -> QUOTE . ident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 137
-- On LIDENT shift to state 138
-- On ident shift to state 139
## Reductions:

State 137:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production ident -> UIDENT

State 138:
## Known stack suffix:
## LIDENT
## LR(1) items:
ident -> LIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production ident -> LIDENT

State 139:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type -> QUOTE ident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> QUOTE ident

State 140:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type_comma_list shift to state 201
-- On core_type shift to state 210
## Reductions:

State 141:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_core_type -> UNDERSCORE . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> UNDERSCORE

State 142:
## Known stack suffix:
## SHARP
## LR(1) items:
simple_core_type -> SHARP . class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## SHARP class_longident
## LR(1) items:
simple_core_type -> SHARP class_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> SHARP class_longident

State 144:
## Known stack suffix:
## QUOTE
## LR(1) items:
simple_core_type -> QUOTE . ident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 145
-- On LIDENT shift to state 146
-- On ident shift to state 147
## Reductions:

State 145:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LPAREN LIDENT LET INT INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LPAREN LIDENT LET INT INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production ident -> UIDENT

State 146:
## Known stack suffix:
## LIDENT
## LR(1) items:
ident -> LIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LPAREN LIDENT LET INT INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STRING STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LPAREN LIDENT LET INT INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production ident -> LIDENT

State 147:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
simple_core_type -> QUOTE ident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> QUOTE ident

State 148:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type_comma_list shift to state 190
-- On core_type shift to state 197
## Reductions:

State 149:
## Known stack suffix:
## LIDENT
## LR(1) items:
type_longident -> LIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production type_longident -> LIDENT

State 150:
## Known stack suffix:
## LESSLESS
## LR(1) items:
simple_core_type -> LESSLESS . core_type GREATERGREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 188
## Reductions:

State 151:
## Known stack suffix:
## LESS
## LR(1) items:
simple_core_type -> LESS . meth_list GREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LESS . GREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On GREATER shift to state 153
-- On DOTDOT shift to state 154
-- On meth_list shift to state 155
-- On label shift to state 157
-- On field shift to state 184
## Reductions:

State 152:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ WITH VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VARTYPE VAL UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production label -> LIDENT

State 153:
## Known stack suffix:
## LESS GREATER
## LR(1) items:
simple_core_type -> LESS GREATER . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> LESS GREATER

State 154:
## Known stack suffix:
## DOTDOT
## LR(1) items:
meth_list -> DOTDOT . [ GREATER ]
## Transitions:
## Reductions:
-- On GREATER
--   reduce production meth_list -> DOTDOT

State 155:
## Known stack suffix:
## LESS meth_list
## LR(1) items:
simple_core_type -> LESS meth_list . GREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On GREATER shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## LESS meth_list GREATER
## LR(1) items:
simple_core_type -> LESS meth_list GREATER . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> LESS meth_list GREATER

State 157:
## Known stack suffix:
## label
## LR(1) items:
field -> label . COLON core_type [ SEMI GREATER ]
## Transitions:
-- On COLON shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## label COLON
## LR(1) items:
field -> label COLON . core_type [ SEMI GREATER ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 177
## Reductions:

State 159:
## Known stack suffix:
## type_longident
## LR(1) items:
simple_core_type -> type_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> type_longident

State 160:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type -> simple_core_type . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type_tuple -> simple_core_type . STAR simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On STAR shift to state 161
-- On SHARP shift to state 163
-- On LIDENT shift to state 149
-- On type_longident shift to state 165
-- On mod_ext_longident shift to state 166
## Reductions:
-- On WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND
--   reduce production core_type -> simple_core_type
** Conflict on SHARP

State 161:
## Known stack suffix:
## simple_core_type STAR
## LR(1) items:
core_type_tuple -> simple_core_type STAR . simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 162
-- On mod_ext_longident shift to state 166
## Reductions:

State 162:
## Known stack suffix:
## simple_core_type STAR simple_core_type
## LR(1) items:
core_type_tuple -> simple_core_type STAR simple_core_type . [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 163
-- On LIDENT shift to state 149
-- On type_longident shift to state 165
-- On mod_ext_longident shift to state 166
## Reductions:
-- On WITH VIRTUAL VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND
--   reduce production core_type_tuple -> simple_core_type STAR simple_core_type

State 163:
## Known stack suffix:
## simple_core_type SHARP
## LR(1) items:
simple_core_type -> simple_core_type SHARP . class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## simple_core_type SHARP class_longident
## LR(1) items:
simple_core_type -> simple_core_type SHARP class_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> simple_core_type SHARP class_longident

State 165:
## Known stack suffix:
## simple_core_type type_longident
## LR(1) items:
simple_core_type -> simple_core_type type_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> simple_core_type type_longident

State 166:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On LPAREN shift to state 167
-- On DOT shift to state 172
## Reductions:

State 167:
## Known stack suffix:
## mod_ext_longident LPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN . mod_ext_longident RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On mod_ext_longident shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident . RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
-- On RPAREN shift to state 169
-- On LPAREN shift to state 167
-- On DOT shift to state 170
## Reductions:

State 169:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident RPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND
--   reduce production mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN

State 170:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND
--   reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 172:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 171
-- On LIDENT shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
type_longident -> mod_ext_longident DOT LIDENT . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production type_longident -> mod_ext_longident DOT LIDENT

State 174:
## Known stack suffix:
## core_type_tuple
## LR(1) items:
core_type -> core_type_tuple . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type_tuple -> core_type_tuple . STAR simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On STAR shift to state 175
## Reductions:
-- On WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND
--   reduce production core_type -> core_type_tuple

State 175:
## Known stack suffix:
## core_type_tuple STAR
## LR(1) items:
core_type_tuple -> core_type_tuple STAR . simple_core_type [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 176
-- On mod_ext_longident shift to state 166
## Reductions:

State 176:
## Known stack suffix:
## core_type_tuple STAR simple_core_type
## LR(1) items:
core_type_tuple -> core_type_tuple STAR simple_core_type . [ WITH VIRTUAL VAL TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 163
-- On LIDENT shift to state 149
-- On type_longident shift to state 165
-- On mod_ext_longident shift to state 166
## Reductions:
-- On WITH VIRTUAL VAL TYPE STAR SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND
--   reduce production core_type_tuple -> core_type_tuple STAR simple_core_type

State 177:
## Known stack suffix:
## label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ SEMI MINUSGREATER GREATER AS ]
core_type -> core_type . AS type_parameter [ SEMI MINUSGREATER GREATER AS ]
field -> label COLON core_type . [ SEMI GREATER ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On SEMI GREATER
--   reduce production field -> label COLON core_type

State 178:
## Known stack suffix:
## core_type MINUSGREATER
## LR(1) items:
core_type -> core_type MINUSGREATER . core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## core_type MINUSGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type -> core_type MINUSGREATER core_type . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
core_type -> core_type . AS type_parameter [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
## Reductions:
-- On WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND
--   reduce production core_type -> core_type MINUSGREATER core_type
** Conflict on MINUSGREATER

State 180:
## Known stack suffix:
## core_type AS
## LR(1) items:
core_type -> core_type AS . type_parameter [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On type_parameter shift to state 183
## Reductions:

State 181:
## Known stack suffix:
## QUOTE
## LR(1) items:
type_parameter -> QUOTE . ident [ WITH VIRTUAL VAL UIDENT TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 145
-- On LIDENT shift to state 146
-- On ident shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
type_parameter -> QUOTE ident . [ WITH VIRTUAL VAL UIDENT TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND
--   reduce production type_parameter -> QUOTE ident

State 183:
## Known stack suffix:
## core_type AS type_parameter
## LR(1) items:
core_type -> core_type AS type_parameter . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL TYPE SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS AS AND
--   reduce production core_type -> core_type AS type_parameter

State 184:
## Known stack suffix:
## field
## LR(1) items:
meth_list -> field . SEMI meth_list [ GREATER ]
meth_list -> field . opt_semi [ GREATER ]
## Transitions:
-- On SEMI shift to state 185
-- On opt_semi shift to state 187
## Reductions:
-- On GREATER
--   reduce production opt_semi ->

State 185:
## Known stack suffix:
## field SEMI
## LR(1) items:
meth_list -> field SEMI . meth_list [ GREATER ]
opt_semi -> SEMI . [ GREATER ]
## Transitions:
-- On LIDENT shift to state 152
-- On DOTDOT shift to state 154
-- On meth_list shift to state 186
-- On label shift to state 157
-- On field shift to state 184
## Reductions:
-- On GREATER
--   reduce production opt_semi -> SEMI

State 186:
## Known stack suffix:
## field SEMI meth_list
## LR(1) items:
meth_list -> field SEMI meth_list . [ GREATER ]
## Transitions:
## Reductions:
-- On GREATER
--   reduce production meth_list -> field SEMI meth_list

State 187:
## Known stack suffix:
## field opt_semi
## LR(1) items:
meth_list -> field opt_semi . [ GREATER ]
## Transitions:
## Reductions:
-- On GREATER
--   reduce production meth_list -> field opt_semi

State 188:
## Known stack suffix:
## LESSLESS core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER GREATERGREATER AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER GREATERGREATER AS ]
simple_core_type -> LESSLESS core_type . GREATERGREATER [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On GREATERGREATER shift to state 189
-- On AS shift to state 180
## Reductions:

State 189:
## Known stack suffix:
## LESSLESS core_type GREATERGREATER
## LR(1) items:
simple_core_type -> LESSLESS core_type GREATERGREATER . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> LESSLESS core_type GREATERGREATER

State 190:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 191
-- On COMMA shift to state 195
## Reductions:

State 191:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN . type_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list RPAREN . SHARP class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 192
-- On LIDENT shift to state 149
-- On type_longident shift to state 194
-- On mod_ext_longident shift to state 166
## Reductions:

State 192:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP . class_longident [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident

State 194:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN type_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident

State 195:
## Known stack suffix:
## core_type_comma_list COMMA
## LR(1) items:
core_type_comma_list -> core_type_comma_list COMMA . core_type [ RPAREN COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## core_type_comma_list COMMA core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type_comma_list COMMA core_type . [ RPAREN COMMA ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On RPAREN COMMA
--   reduce production core_type_comma_list -> core_type_comma_list COMMA core_type

State 197:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type . RPAREN [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 198
-- On MINUSGREATER shift to state 178
-- On COMMA shift to state 199
-- On AS shift to state 180
## Reductions:

State 198:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type RPAREN . [ WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI SEMI RPAREN RBRACE OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE GREATERGREATER GREATER EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT COMMA COLONGREATER CLASS BAR AS AND
--   reduce production simple_core_type -> LPAREN core_type RPAREN

State 199:
## Known stack suffix:
## core_type COMMA
## LR(1) items:
core_type_comma_list -> core_type COMMA . core_type [ RPAREN COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## core_type COMMA core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type COMMA core_type . [ RPAREN COMMA ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On RPAREN COMMA
--   reduce production core_type_comma_list -> core_type COMMA core_type

State 201:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list . RPAREN SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 202
-- On COMMA shift to state 195
## Reductions:

State 202:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LPAREN core_type_comma_list RPAREN . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 203
-- On LIDENT shift to state 205
-- On type_longident shift to state 206
-- On mod_ext_longident shift to state 207
## Reductions:

State 203:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP . class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 131
-- On mod_longident shift to state 132
-- On class_longident shift to state 204
## Reductions:

State 204:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN SHARP class_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN SHARP class_longident

State 205:
## Known stack suffix:
## LIDENT
## LR(1) items:
type_longident -> LIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production type_longident -> LIDENT

State 206:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN type_longident
## LR(1) items:
simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> LPAREN core_type_comma_list RPAREN type_longident

State 207:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
type_longident -> mod_ext_longident . DOT LIDENT [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LPAREN shift to state 167
-- On DOT shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
type_longident -> mod_ext_longident DOT . LIDENT [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 171
-- On LIDENT shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## mod_ext_longident DOT LIDENT
## LR(1) items:
type_longident -> mod_ext_longident DOT LIDENT . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production type_longident -> mod_ext_longident DOT LIDENT

State 210:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
simple_core_type -> LPAREN core_type . RPAREN [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On RPAREN shift to state 211
-- On MINUSGREATER shift to state 178
-- On COMMA shift to state 199
-- On AS shift to state 180
## Reductions:

State 211:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
simple_core_type -> LPAREN core_type RPAREN . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> LPAREN core_type RPAREN

State 212:
## Known stack suffix:
## LESSLESS
## LR(1) items:
simple_core_type -> LESSLESS . core_type GREATERGREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## LESSLESS core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER GREATERGREATER AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER GREATERGREATER AS ]
simple_core_type -> LESSLESS core_type . GREATERGREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On GREATERGREATER shift to state 214
-- On AS shift to state 180
## Reductions:

State 214:
## Known stack suffix:
## LESSLESS core_type GREATERGREATER
## LR(1) items:
simple_core_type -> LESSLESS core_type GREATERGREATER . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> LESSLESS core_type GREATERGREATER

State 215:
## Known stack suffix:
## LESS
## LR(1) items:
simple_core_type -> LESS . meth_list GREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
simple_core_type -> LESS . GREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On GREATER shift to state 216
-- On DOTDOT shift to state 154
-- On meth_list shift to state 217
-- On label shift to state 157
-- On field shift to state 184
## Reductions:

State 216:
## Known stack suffix:
## LESS GREATER
## LR(1) items:
simple_core_type -> LESS GREATER . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> LESS GREATER

State 217:
## Known stack suffix:
## LESS meth_list
## LR(1) items:
simple_core_type -> LESS meth_list . GREATER [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On GREATER shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## LESS meth_list GREATER
## LR(1) items:
simple_core_type -> LESS meth_list GREATER . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> LESS meth_list GREATER

State 219:
## Known stack suffix:
## type_longident
## LR(1) items:
simple_core_type -> type_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> type_longident

State 220:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type -> simple_core_type . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type_tuple -> simple_core_type . STAR simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On STAR shift to state 221
-- On SHARP shift to state 223
-- On LIDENT shift to state 205
-- On type_longident shift to state 225
-- On mod_ext_longident shift to state 207
## Reductions:
-- On error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type -> simple_core_type

State 221:
## Known stack suffix:
## simple_core_type STAR
## LR(1) items:
core_type_tuple -> simple_core_type STAR . simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 222
-- On mod_ext_longident shift to state 207
## Reductions:

State 222:
## Known stack suffix:
## simple_core_type STAR simple_core_type
## LR(1) items:
core_type_tuple -> simple_core_type STAR simple_core_type . [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 223
-- On LIDENT shift to state 205
-- On type_longident shift to state 225
-- On mod_ext_longident shift to state 207
## Reductions:
-- On error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type_tuple -> simple_core_type STAR simple_core_type

State 223:
## Known stack suffix:
## simple_core_type SHARP
## LR(1) items:
simple_core_type -> simple_core_type SHARP . class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 131
-- On mod_longident shift to state 132
-- On class_longident shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## simple_core_type SHARP class_longident
## LR(1) items:
simple_core_type -> simple_core_type SHARP class_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> simple_core_type SHARP class_longident

State 225:
## Known stack suffix:
## simple_core_type type_longident
## LR(1) items:
simple_core_type -> simple_core_type type_longident . [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS BAR AS AND
--   reduce production simple_core_type -> simple_core_type type_longident

State 226:
## Known stack suffix:
## core_type_tuple
## LR(1) items:
core_type -> core_type_tuple . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type_tuple -> core_type_tuple . STAR simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On STAR shift to state 227
## Reductions:
-- On error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type -> core_type_tuple

State 227:
## Known stack suffix:
## core_type_tuple STAR
## LR(1) items:
core_type_tuple -> core_type_tuple STAR . simple_core_type [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 228
-- On mod_ext_longident shift to state 207
## Reductions:

State 228:
## Known stack suffix:
## core_type_tuple STAR simple_core_type
## LR(1) items:
core_type_tuple -> core_type_tuple STAR simple_core_type . [ error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . type_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error WITH VIRTUAL VAL UIDENT TYPE STAR SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LIDENT LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 223
-- On LIDENT shift to state 205
-- On type_longident shift to state 225
-- On mod_ext_longident shift to state 207
## Reductions:
-- On error WITH VIRTUAL VAL TYPE STAR SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type_tuple -> core_type_tuple STAR simple_core_type

State 229:
## Known stack suffix:
## LPAREN pattern COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error RPAREN MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ error RPAREN MINUSGREATER AS ]
simple_pattern -> LPAREN pattern COLON core_type . RPAREN [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern COLON core_type . error [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
-- On error shift to state 230
-- On RPAREN shift to state 231
-- On MINUSGREATER shift to state 232
-- On AS shift to state 234
## Reductions:

State 230:
## Known stack suffix:
## LPAREN pattern COLON core_type error
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type error . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LPAREN pattern COLON core_type error

State 231:
## Known stack suffix:
## LPAREN pattern COLON core_type RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type RPAREN . [ error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS ]
## Transitions:
## Reductions:
-- On error WHEN SEMI RPAREN RBRACKET RBRACE QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON COLON BAR AS
--   reduce production simple_pattern -> LPAREN pattern COLON core_type RPAREN

State 232:
## Known stack suffix:
## core_type MINUSGREATER
## LR(1) items:
core_type -> core_type MINUSGREATER . core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 233
## Reductions:

State 233:
## Known stack suffix:
## core_type MINUSGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type -> core_type MINUSGREATER core_type . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 232
## Reductions:
-- On error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type -> core_type MINUSGREATER core_type
** Conflict on MINUSGREATER

State 234:
## Known stack suffix:
## core_type AS
## LR(1) items:
core_type -> core_type AS . type_parameter [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On QUOTE shift to state 235
-- On type_parameter shift to state 237
## Reductions:

State 235:
## Known stack suffix:
## QUOTE
## LR(1) items:
type_parameter -> QUOTE . ident [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UIDENT shift to state 137
-- On LIDENT shift to state 138
-- On ident shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## QUOTE ident
## LR(1) items:
type_parameter -> QUOTE ident . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production type_parameter -> QUOTE ident

State 237:
## Known stack suffix:
## core_type AS type_parameter
## LR(1) items:
core_type -> core_type AS type_parameter . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND
--   reduce production core_type -> core_type AS type_parameter

State 238:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern -> pattern . BAR pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error RPAREN COMMA COLONCOLON COLON BAR AS ]
simple_pattern -> LPAREN pattern . RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern . COLON core_type error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 239
-- On RPAREN shift to state 240
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On COLON shift to state 241
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:

State 239:
## Known stack suffix:
## LPAREN pattern error
## LR(1) items:
simple_pattern -> LPAREN pattern error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LPAREN pattern error

State 240:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern RPAREN . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LPAREN pattern RPAREN

State 241:
## Known stack suffix:
## LPAREN pattern COLON
## LR(1) items:
simple_pattern -> LPAREN pattern COLON . core_type RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern COLON . core_type error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## LPAREN pattern COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error RPAREN MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ error RPAREN MINUSGREATER AS ]
simple_pattern -> LPAREN pattern COLON core_type . RPAREN [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LPAREN pattern COLON core_type . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 243
-- On RPAREN shift to state 244
-- On MINUSGREATER shift to state 232
-- On AS shift to state 234
## Reductions:

State 243:
## Known stack suffix:
## LPAREN pattern COLON core_type error
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LPAREN pattern COLON core_type error

State 244:
## Known stack suffix:
## LPAREN pattern COLON core_type RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern COLON core_type RPAREN . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LPAREN pattern COLON core_type RPAREN

State 245:
## Known stack suffix:
## LPAREN operator
## LR(1) items:
val_ident -> LPAREN operator . RPAREN [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## LPAREN operator RPAREN
## LR(1) items:
val_ident -> LPAREN operator RPAREN . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LPAREN operator RPAREN

State 247:
## Known stack suffix:
## LIDENT
## LR(1) items:
val_ident -> LIDENT . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LIDENT

State 248:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On RBRACKET shift to state 249
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_semi_list shift to state 250
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 123
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 249:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_longident -> LBRACKET RBRACKET . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> LBRACKET RBRACKET

State 250:
## Known stack suffix:
## LBRACKET pattern_semi_list
## LR(1) items:
pattern_semi_list -> pattern_semi_list . SEMI pattern [ error SEMI RBRACKET ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list . opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On SEMI shift to state 118
-- On opt_semi shift to state 251
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 251:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi . RBRACKET [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACKET pattern_semi_list opt_semi . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 252
-- On RBRACKET shift to state 253
## Reductions:

State 252:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi error

State 253:
## Known stack suffix:
## LBRACKET pattern_semi_list opt_semi RBRACKET
## LR(1) items:
simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LBRACKET pattern_semi_list opt_semi RBRACKET

State 254:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On lbl_pattern_list shift to state 255
-- On label_longident shift to state 114
## Reductions:

State 255:
## Known stack suffix:
## LBRACE lbl_pattern_list
## LR(1) items:
lbl_pattern_list -> lbl_pattern_list . SEMI label_longident EQUAL pattern [ error SEMI RBRACE ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi RBRACE [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list . opt_semi error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On SEMI shift to state 66
-- On opt_semi shift to state 256
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 256:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi . RBRACE [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> LBRACE lbl_pattern_list opt_semi . error [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On error shift to state 257
-- On RBRACE shift to state 258
## Reductions:

State 257:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi error
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi error . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi error

State 258:
## Known stack suffix:
## LBRACE lbl_pattern_list opt_semi RBRACE
## LR(1) items:
simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> LBRACE lbl_pattern_list opt_semi RBRACE

State 259:
## Known stack suffix:
## INT
## LR(1) items:
constant -> INT . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constant -> INT

State 260:
## Known stack suffix:
## FLOAT
## LR(1) items:
constant -> FLOAT . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constant -> FLOAT

State 261:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_longident -> FALSE . [ WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH WHEN VARTYPE UNDERSCORE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> FALSE

State 262:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
simple_pattern -> CHAR . DOTDOT CHAR [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On DOTDOT shift to state 263
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production constant -> CHAR

State 263:
## Known stack suffix:
## CHAR DOTDOT
## LR(1) items:
simple_pattern -> CHAR DOTDOT . CHAR [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On CHAR shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## CHAR DOTDOT CHAR
## LR(1) items:
simple_pattern -> CHAR DOTDOT CHAR . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> CHAR DOTDOT CHAR

State 265:
## Known stack suffix:
## val_ident
## LR(1) items:
simple_pattern -> val_ident . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> val_ident

State 266:
## Known stack suffix:
## simple_pattern
## LR(1) items:
opt_pat -> simple_pattern . [ MINUSGREATER LBRACKETLESS BAR ]
## Transitions:
## Reductions:
-- On MINUSGREATER LBRACKETLESS BAR
--   reduce production opt_pat -> simple_pattern

State 267:
## Known stack suffix:
## signed_constant
## LR(1) items:
simple_pattern -> signed_constant . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production simple_pattern -> signed_constant

State 268:
## Known stack suffix:
## PARSER opt_pat
## LR(1) items:
expr0 -> PARSER opt_pat . opt_bar parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 270
## Reductions:
-- On LBRACKETLESS
--   reduce production opt_bar ->

State 269:
## Known stack suffix:
## BAR
## LR(1) items:
opt_bar -> BAR . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE COLONCOLON CHAR ]
## Transitions:
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE COLONCOLON CHAR
--   reduce production opt_bar -> BAR

State 270:
## Known stack suffix:
## PARSER opt_pat opt_bar
## LR(1) items:
expr0 -> PARSER opt_pat opt_bar . parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 271
-- On parser_cases shift to state 1119
-- On parser_case shift to state 1065
## Reductions:

State 271:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
parser_case -> LBRACKETLESS . stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . stream_pattern opt_semi error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On QUOTE shift to state 272
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On GREATERRBRACKET shift to state 1108
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On stream_pattern_component shift to state 1080
-- On stream_pattern shift to state 1112
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 1088
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 272:
## Known stack suffix:
## QUOTE
## LR(1) items:
stream_pattern_component -> QUOTE . pattern [ error SEMI QUESTION GREATERRBRACKET ]
stream_pattern_component -> QUOTE . pattern WHEN expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 273
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 273:
## Known stack suffix:
## QUOTE pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error WHEN SEMI QUESTION GREATERRBRACKET COMMA COLONCOLON BAR AS ]
stream_pattern_component -> QUOTE pattern . [ error SEMI QUESTION GREATERRBRACKET ]
stream_pattern_component -> QUOTE pattern . WHEN expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On WHEN shift to state 274
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:
-- On error SEMI QUESTION GREATERRBRACKET
--   reduce production stream_pattern_component -> QUOTE pattern

State 274:
## Known stack suffix:
## QUOTE pattern WHEN
## LR(1) items:
stream_pattern_component -> QUOTE pattern WHEN . expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 1107
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 275:
## Known stack suffix:
## RELOCINFO
## LR(1) items:
simple_expr -> RELOCINFO . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> RELOCINFO

State 276:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
simple_expr -> PREFIXOP . simple_expr [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 642
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 277:
## Known stack suffix:
## NEW
## LR(1) items:
simple_expr -> NEW . class_longident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 131
-- On mod_longident shift to state 132
-- On class_longident shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## NEW class_longident
## LR(1) items:
simple_expr -> NEW class_longident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> NEW class_longident

State 279:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_longident -> LPAREN . RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . seq_expr type_constraint RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN . SHARP label RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
val_ident -> LPAREN . operator RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 280
-- On STRING shift to state 28
-- On STAR shift to state 49
-- On SPAWN shift to state 29
-- On SHARP shift to state 1099
-- On RPAREN shift to state 53
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 641
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LESSGREATER shift to state 55
-- On LESS shift to state 56
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On INFIXOP4 shift to state 97
-- On INFIXOP3 shift to state 98
-- On INFIXOP2 shift to state 99
-- On INFIXOP1 shift to state 100
-- On INFIXOP0 shift to state 101
-- On IF shift to state 361
-- On GREATER shift to state 102
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EQUAL shift to state 103
-- On COLONEQUAL shift to state 104
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On BARBAR shift to state 105
-- On ASSERT shift to state 409
-- On AMPERSAND shift to state 106
-- On AMPERAMPER shift to state 107
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1102
-- On operator shift to state 108
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 280:
## Known stack suffix:
## SUBTRACTIVE
## LR(1) items:
expr0 -> SUBTRACTIVE . expr0 [ error SUBTRACTIVE STAR SEMI RPAREN LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON BARBAR AMPERSAND AMPERAMPER ]
operator -> SUBTRACTIVE . [ RPAREN ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 1098
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On RPAREN
--   reduce production operator -> SUBTRACTIVE

State 281:
## Known stack suffix:
## PARSER
## LR(1) items:
expr0 -> PARSER . opt_pat opt_bar parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 282
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On LBRACKETLESS BAR
--   reduce production opt_pat ->

State 282:
## Known stack suffix:
## PARSER opt_pat
## LR(1) items:
expr0 -> PARSER opt_pat . opt_bar parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 283
## Reductions:
-- On LBRACKETLESS
--   reduce production opt_bar ->

State 283:
## Known stack suffix:
## PARSER opt_pat opt_bar
## LR(1) items:
expr0 -> PARSER opt_pat opt_bar . parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 284
-- On parser_cases shift to state 1097
-- On parser_case shift to state 1076
## Reductions:

State 284:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
parser_case -> LBRACKETLESS . stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . stream_pattern opt_semi error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On QUOTE shift to state 272
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On GREATERRBRACKET shift to state 285
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On stream_pattern_component shift to state 1080
-- On stream_pattern shift to state 1084
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 1088
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 285:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 286
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On MINUSGREATER
--   reduce production opt_pat ->

State 286:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1079
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 288:
## Known stack suffix:
## MATCH
## LR(1) items:
expr0 -> MATCH . seq_expr WITH opt_bar match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> MATCH . seq_expr WITH PARSER opt_pat opt_bar parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1068
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 289:
## Known stack suffix:
## MATCH
## LR(1) items:
expr0 -> MATCH . seq_expr WITH opt_bar match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> MATCH . seq_expr WITH PARSER opt_pat opt_bar parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1057
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 290:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ LESSMINUS ]
val_ident -> LIDENT . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On LESSMINUS
--   reduce production label -> LIDENT
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LIDENT

State 291:
## Known stack suffix:
## LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 293
-- On JOINDEF shift to state 1045
-- On rec_flag shift to state 1051
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 292:
## Known stack suffix:
## REC
## LR(1) items:
rec_flag -> REC . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR ]
## Transitions:
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag -> REC

State 293:
## Known stack suffix:
## LET LOC
## LR(1) items:
expr0 -> LET LOC . loc_bindings IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 1040
-- On loc_binding shift to state 690
## Reductions:

State 294:
## Known stack suffix:
## LIDENT
## LR(1) items:
loc_binding -> LIDENT . loc_modules loc_defs loc_init [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LBRACKET shift to state 295
-- On loc_modules shift to state 302
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_modules ->

State 295:
## Known stack suffix:
## LBRACKET
## LR(1) items:
loc_modules -> LBRACKET . list_of_modules RBRACKET [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
loc_modules -> LBRACKET . RBRACKET [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 296
-- On RBRACKET shift to state 299
-- On list_of_modules shift to state 300
## Reductions:

State 296:
## Known stack suffix:
## UIDENT
## LR(1) items:
list_of_modules -> UIDENT . [ RBRACKET ]
list_of_modules -> UIDENT . SEMI list_of_modules [ RBRACKET ]
## Transitions:
-- On SEMI shift to state 297
## Reductions:
-- On RBRACKET
--   reduce production list_of_modules -> UIDENT

State 297:
## Known stack suffix:
## UIDENT SEMI
## LR(1) items:
list_of_modules -> UIDENT SEMI . list_of_modules [ RBRACKET ]
## Transitions:
-- On UIDENT shift to state 296
-- On list_of_modules shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## UIDENT SEMI list_of_modules
## LR(1) items:
list_of_modules -> UIDENT SEMI list_of_modules . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production list_of_modules -> UIDENT SEMI list_of_modules

State 299:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
loc_modules -> LBRACKET RBRACKET . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_modules -> LBRACKET RBRACKET

State 300:
## Known stack suffix:
## LBRACKET list_of_modules
## LR(1) items:
loc_modules -> LBRACKET list_of_modules . RBRACKET [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## LBRACKET list_of_modules RBRACKET
## LR(1) items:
loc_modules -> LBRACKET list_of_modules RBRACKET . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_modules -> LBRACKET list_of_modules RBRACKET

State 302:
## Known stack suffix:
## LIDENT loc_modules
## LR(1) items:
loc_binding -> LIDENT loc_modules . loc_defs loc_init [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On JOINDEF shift to state 303
-- On loc_defs shift to state 1036
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_defs ->

State 303:
## Known stack suffix:
## JOINDEF
## LR(1) items:
loc_defs -> JOINDEF . def_bindings [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 310
-- On simple_def_binding shift to state 966
-- On join_pattern shift to state 968
-- On def_pattern shift to state 974
-- On def_bindings shift to state 1035
-- On def_binding shift to state 982
## Reductions:

State 304:
## Known stack suffix:
## UIDENT
## LR(1) items:
join_pattern -> UIDENT . simple_pattern [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 305
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 305:
## Known stack suffix:
## UIDENT simple_pattern
## LR(1) items:
join_pattern -> UIDENT simple_pattern . [ EQUAL BAR ]
## Transitions:
## Reductions:
-- On EQUAL BAR
--   reduce production join_pattern -> UIDENT simple_pattern

State 306:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
mod_longident -> mod_longident . DOT UIDENT [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL DOT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
-- On DOT shift to state 307
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production constr_longident -> mod_longident

State 307:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ WHEN VAL UNDERSCORE UIDENT TYPE TRUE SUBTRACTIVE STRING SHARP SEMISEMI OPEN MODULE MINUSGREATER LPAREN LIDENT LET LBRACKETLESS LBRACKET LBRACE INT INCLUDE FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF DOT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BAR AS ]
## Transitions:
-- On UIDENT shift to state 19
## Reductions:

State 308:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_pattern -> constr_longident . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COLONGREATER COLON CHAR BAR AS
--   reduce production simple_pattern -> constr_longident

State 309:
## Known stack suffix:
## constant
## LR(1) items:
signed_constant -> constant . [ WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS ]
## Transitions:
## Reductions:
-- On WHEN UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING MINUSGREATER LPAREN LIDENT LBRACKETLESS LBRACKET LBRACE INT FLOAT FALSE EQUAL COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BAR AS
--   reduce production signed_constant -> constant

State 310:
## Known stack suffix:
## LIDENT
## LR(1) items:
def_binding -> LIDENT . LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
def_binding -> LIDENT . LBRACE simple_def_binding loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
join_pattern -> LIDENT . simple_pattern [ EQUAL BAR ]
join_pattern -> LIDENT . PREFIXOP simple_pattern [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On PREFIXOP shift to state 311
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 313
-- On LBRACE shift to state 1031
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 322
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 311:
## Known stack suffix:
## LIDENT PREFIXOP
## LR(1) items:
join_pattern -> LIDENT PREFIXOP . simple_pattern [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 312
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 312:
## Known stack suffix:
## LIDENT PREFIXOP simple_pattern
## LR(1) items:
join_pattern -> LIDENT PREFIXOP simple_pattern . [ EQUAL BAR ]
## Transitions:
## Reductions:
-- On EQUAL BAR
--   reduce production join_pattern -> LIDENT PREFIXOP simple_pattern

State 313:
## Known stack suffix:
## LIDENT LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ EQUAL BAR ]
def_binding -> LIDENT LBRACKET . lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ EQUAL BAR ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On RBRACKET shift to state 249
-- On LPAREN shift to state 52
-- On LIDENT shift to state 314
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_semi_list shift to state 250
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 123
-- On mod_longident shift to state 83
-- On lident_comma_list shift to state 318
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 314:
## Known stack suffix:
## LIDENT
## LR(1) items:
lident_comma_list -> LIDENT . [ RBRACKET ]
lident_comma_list -> LIDENT . COMMA lident_comma_list [ RBRACKET ]
val_ident -> LIDENT . [ error SEMI RBRACKET COMMA COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 315
## Reductions:
-- On RBRACKET
--   reduce production lident_comma_list -> LIDENT
-- On error SEMI RBRACKET COMMA COLONCOLON BAR AS
--   reduce production val_ident -> LIDENT
** Conflict on RBRACKET COMMA

State 315:
## Known stack suffix:
## LIDENT COMMA
## LR(1) items:
lident_comma_list -> LIDENT COMMA . lident_comma_list [ RBRACKET ]
## Transitions:
-- On LIDENT shift to state 316
-- On lident_comma_list shift to state 317
## Reductions:

State 316:
## Known stack suffix:
## LIDENT
## LR(1) items:
lident_comma_list -> LIDENT . [ RBRACKET ]
lident_comma_list -> LIDENT . COMMA lident_comma_list [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 315
## Reductions:
-- On RBRACKET
--   reduce production lident_comma_list -> LIDENT

State 317:
## Known stack suffix:
## LIDENT COMMA lident_comma_list
## LR(1) items:
lident_comma_list -> LIDENT COMMA lident_comma_list . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production lident_comma_list -> LIDENT COMMA lident_comma_list

State 318:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list . RBRACKET LBRACE simple_def_binding loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET . LBRACE simple_def_binding loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LBRACE shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE . simple_def_binding loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 321
-- On simple_def_binding shift to state 323
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
## Reductions:

State 321:
## Known stack suffix:
## LIDENT
## LR(1) items:
join_pattern -> LIDENT . simple_pattern [ EQUAL BAR ]
join_pattern -> LIDENT . PREFIXOP simple_pattern [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On PREFIXOP shift to state 311
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 322
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 322:
## Known stack suffix:
## LIDENT simple_pattern
## LR(1) items:
join_pattern -> LIDENT simple_pattern . [ EQUAL BAR ]
## Transitions:
## Reductions:
-- On EQUAL BAR
--   reduce production join_pattern -> LIDENT simple_pattern

State 323:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding . loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_def_binding -> simple_def_binding . OR def_pattern [ RBRACE OR DO ]
## Transitions:
-- On OR shift to state 324
-- On DO shift to state 670
-- On loc_init shift to state 1029
## Reductions:
-- On RBRACE
--   reduce production loc_init ->

State 324:
## Known stack suffix:
## simple_def_binding OR
## LR(1) items:
simple_def_binding -> simple_def_binding OR . def_pattern [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 321
-- On join_pattern shift to state 325
-- On def_pattern shift to state 1028
## Reductions:

State 325:
## Known stack suffix:
## join_pattern
## LR(1) items:
def_pattern -> join_pattern . EQUAL process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
join_pattern -> join_pattern . BAR join_pattern [ EQUAL BAR ]
## Transitions:
-- On EQUAL shift to state 326
-- On BAR shift to state 971
## Reductions:

State 326:
## Known stack suffix:
## join_pattern EQUAL
## LR(1) items:
def_pattern -> join_pattern EQUAL . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 1027
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 327:
## Known stack suffix:
## MATCH
## LR(1) items:
process0 -> MATCH . seq_expr WITH opt_bar join_match_cases [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1012
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 328:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
simple_expr -> LBRACKETLESS . stream_expr opt_semi GREATERRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . stream_expr opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . GREATERRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On QUOTE shift to state 329
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On GREATERRBRACKET shift to state 1007
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On stream_expr_component shift to state 956
-- On stream_expr shift to state 1008
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 960
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 329:
## Known stack suffix:
## QUOTE
## LR(1) items:
stream_expr_component -> QUOTE . expr [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 1006
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 330:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ LESSMINUS ]
val_ident -> LIDENT . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On LESSMINUS
--   reduce production label -> LIDENT
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production val_ident -> LIDENT

State 331:
## Known stack suffix:
## LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 332
-- On JOINDEF shift to state 965
-- On rec_flag shift to state 983
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 332:
## Known stack suffix:
## LET LOC
## LR(1) items:
expr0 -> LET LOC . loc_bindings IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 333
-- On loc_binding shift to state 690
## Reductions:

State 333:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
expr0 -> LET LOC loc_bindings . IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 334
-- On IN shift to state 335
## Reductions:

State 334:
## Known stack suffix:
## LET LOC loc_bindings error
## LR(1) items:
expr0 -> LET LOC loc_bindings error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET LOC loc_bindings error

State 335:
## Known stack suffix:
## LET LOC loc_bindings IN
## LR(1) items:
expr0 -> LET LOC loc_bindings IN . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings IN . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 336
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 964
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 336:
## Known stack suffix:
## LET LOC loc_bindings IN error
## LR(1) items:
expr0 -> LET LOC loc_bindings IN error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET LOC loc_bindings IN error

State 337:
## Known stack suffix:
## LBRACKETLESS
## LR(1) items:
simple_expr -> LBRACKETLESS . stream_expr opt_semi GREATERRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . stream_expr opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS . GREATERRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On QUOTE shift to state 329
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On GREATERRBRACKET shift to state 955
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On stream_expr_component shift to state 956
-- On stream_expr shift to state 957
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 960
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 338:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi BARRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . BARRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On BARRBRACKET shift to state 950
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_semi_list shift to state 951
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 920
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 339:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On RBRACKET shift to state 59
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_semi_list shift to state 946
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 920
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 340:
## Known stack suffix:
## LBRACELESS
## LR(1) items:
simple_expr -> LBRACELESS . label_expr_list opt_semi GREATERRBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . label_expr_list opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . GREATERRBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 152
-- On GREATERRBRACE shift to state 341
-- On label_expr_list shift to state 342
-- On label shift to state 381
## Reductions:

State 341:
## Known stack suffix:
## LBRACELESS GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS GREATERRBRACE . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACELESS GREATERRBRACE

State 342:
## Known stack suffix:
## LBRACELESS label_expr_list
## LR(1) items:
label_expr_list -> label_expr_list . SEMI label EQUAL expr [ error SEMI GREATERRBRACE ]
simple_expr -> LBRACELESS label_expr_list . opt_semi GREATERRBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list . opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 343
-- On opt_semi shift to state 943
## Reductions:
-- On error GREATERRBRACE
--   reduce production opt_semi ->

State 343:
## Known stack suffix:
## label_expr_list SEMI
## LR(1) items:
label_expr_list -> label_expr_list SEMI . label EQUAL expr [ error SEMI GREATERRBRACE ]
opt_semi -> SEMI . [ error GREATERRBRACE ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 344
## Reductions:
-- On error GREATERRBRACE
--   reduce production opt_semi -> SEMI

State 344:
## Known stack suffix:
## label_expr_list SEMI label
## LR(1) items:
label_expr_list -> label_expr_list SEMI label . EQUAL expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On EQUAL shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## label_expr_list SEMI label EQUAL
## LR(1) items:
label_expr_list -> label_expr_list SEMI label EQUAL . expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 942
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 346:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr0 -> LBRACE . BAR process RBRACE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On LBRACKET shift to state 347
-- On BAR shift to state 939
-- On mod_longident shift to state 62
-- On lbl_expr_list shift to state 357
-- On label_longident shift to state 405
## Reductions:

State 347:
## Known stack suffix:
## LBRACE LBRACKET
## LR(1) items:
simple_expr -> LBRACE LBRACKET . LIDENT RBRACKET lbl_expr_list opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## LBRACE LBRACKET LIDENT
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT . RBRACKET lbl_expr_list opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RBRACKET shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET . lbl_expr_list opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On lbl_expr_list shift to state 350
-- On label_longident shift to state 397
## Reductions:

State 350:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ SEMI RBRACE ]
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list . opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 351
-- On opt_semi shift to state 937
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 351:
## Known stack suffix:
## lbl_expr_list SEMI
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI . label_longident EQUAL expr [ SEMI RBRACE ]
opt_semi -> SEMI . [ RBRACE ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On label_longident shift to state 352
## Reductions:
-- On RBRACE
--   reduce production opt_semi -> SEMI

State 352:
## Known stack suffix:
## lbl_expr_list SEMI label_longident
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident . EQUAL expr [ SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL . expr [ SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 936
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 354:
## Known stack suffix:
## LBRACKETBAR
## LR(1) items:
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi BARRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . expr_semi_list opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR . BARRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On BARRBRACKET shift to state 931
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_semi_list shift to state 932
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 920
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 355:
## Known stack suffix:
## LAZY
## LR(1) items:
expr0 -> LAZY . simple_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 930
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 356:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_expr -> LBRACE . lbl_expr_list opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On LBRACKET shift to state 347
-- On mod_longident shift to state 62
-- On lbl_expr_list shift to state 357
-- On label_longident shift to state 405
## Reductions:

State 357:
## Known stack suffix:
## LBRACE lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ error SEMI RBRACE ]
simple_expr -> LBRACE lbl_expr_list . opt_semi RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list . opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 358
-- On opt_semi shift to state 927
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 358:
## Known stack suffix:
## lbl_expr_list SEMI
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI . label_longident EQUAL expr [ error SEMI RBRACE ]
opt_semi -> SEMI . [ error RBRACE ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On label_longident shift to state 359
## Reductions:
-- On error RBRACE
--   reduce production opt_semi -> SEMI

State 359:
## Known stack suffix:
## lbl_expr_list SEMI label_longident
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident . EQUAL expr [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL
## LR(1) items:
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL . expr [ error SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 926
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 361:
## Known stack suffix:
## IF
## LR(1) items:
expr0 -> IF . seq_expr THEN expr ELSE expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF . seq_expr THEN expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 921
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 362:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET . expr_semi_list opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On RBRACKET shift to state 249
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_semi_list shift to state 914
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 920
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 363:
## Known stack suffix:
## FUNCTION
## LR(1) items:
expr0 -> FUNCTION . opt_bar match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 364
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 364:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
expr0 -> FUNCTION opt_bar . match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 373
-- On mod_longident shift to state 306
-- On match_cases shift to state 910
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 365:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS
--   reduce production pattern -> simple_pattern

State 366:
## Known stack suffix:
## pattern_comma_list
## LR(1) items:
pattern -> pattern_comma_list . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern_comma_list . COMMA pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 367
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS
--   reduce production pattern -> pattern_comma_list
** Conflict on COMMA

State 367:
## Known stack suffix:
## pattern_comma_list COMMA
## LR(1) items:
pattern_comma_list -> pattern_comma_list COMMA . pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 368
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 368:
## Known stack suffix:
## pattern_comma_list COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern_comma_list COMMA pattern . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 369
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL BAR AS
--   reduce production pattern_comma_list -> pattern_comma_list COMMA pattern

State 369:
## Known stack suffix:
## pattern COLONCOLON
## LR(1) items:
pattern -> pattern COLONCOLON . pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 370
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 370:
## Known stack suffix:
## pattern COLONCOLON pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern COLONCOLON pattern . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 369
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL BAR AS
--   reduce production pattern -> pattern COLONCOLON pattern

State 371:
## Known stack suffix:
## constr_longident
## LR(1) items:
pattern -> constr_longident . pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
simple_pattern -> constr_longident . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 372
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS
--   reduce production simple_pattern -> constr_longident

State 372:
## Known stack suffix:
## constr_longident pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> constr_longident pattern . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS
--   reduce production pattern -> constr_longident pattern

State 373:
## Known stack suffix:
## pattern
## LR(1) items:
match_cases -> pattern . match_action [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 374
-- On MINUSGREATER shift to state 385
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On match_action shift to state 909
## Reductions:

State 374:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . seq_expr MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 906
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 375:
## Known stack suffix:
## LBRACELESS
## LR(1) items:
simple_expr -> LBRACELESS . label_expr_list opt_semi GREATERRBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . label_expr_list opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS . GREATERRBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 152
-- On GREATERRBRACE shift to state 376
-- On label_expr_list shift to state 377
-- On label shift to state 381
## Reductions:

State 376:
## Known stack suffix:
## LBRACELESS GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS GREATERRBRACE . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACELESS GREATERRBRACE

State 377:
## Known stack suffix:
## LBRACELESS label_expr_list
## LR(1) items:
label_expr_list -> label_expr_list . SEMI label EQUAL expr [ error SEMI GREATERRBRACE ]
simple_expr -> LBRACELESS label_expr_list . opt_semi GREATERRBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list . opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 343
-- On opt_semi shift to state 378
## Reductions:
-- On error GREATERRBRACE
--   reduce production opt_semi ->

State 378:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi . GREATERRBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list opt_semi . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 379
-- On GREATERRBRACE shift to state 380
## Reductions:

State 379:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACELESS label_expr_list opt_semi error

State 380:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE

State 381:
## Known stack suffix:
## label
## LR(1) items:
label_expr_list -> label . EQUAL expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On EQUAL shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## label EQUAL
## LR(1) items:
label_expr_list -> label EQUAL . expr [ error SEMI GREATERRBRACE ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 905
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 383:
## Known stack suffix:
## FUN
## LR(1) items:
expr0 -> FUN . simple_pattern fun_def [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 384
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 384:
## Known stack suffix:
## FUN simple_pattern
## LR(1) items:
expr0 -> FUN simple_pattern . fun_def [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 374
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On MINUSGREATER shift to state 385
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 901
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On match_action shift to state 902
-- On fun_def shift to state 904
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 385:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 900
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 386:
## Known stack suffix:
## FOR
## LR(1) items:
expr0 -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 388
## Reductions:

State 387:
## Known stack suffix:
## LPAREN
## LR(1) items:
val_ident -> LPAREN . operator RPAREN [ WITH WHEN VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 96
-- On STAR shift to state 49
-- On PREFIXOP shift to state 51
-- On LESSGREATER shift to state 55
-- On LESS shift to state 56
-- On INFIXOP4 shift to state 97
-- On INFIXOP3 shift to state 98
-- On INFIXOP2 shift to state 99
-- On INFIXOP1 shift to state 100
-- On INFIXOP0 shift to state 101
-- On GREATER shift to state 102
-- On EQUAL shift to state 103
-- On COLONEQUAL shift to state 104
-- On BARBAR shift to state 105
-- On AMPERSAND shift to state 106
-- On AMPERAMPER shift to state 107
-- On operator shift to state 245
## Reductions:

State 388:
## Known stack suffix:
## FOR val_ident
## LR(1) items:
expr0 -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On EQUAL shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## FOR val_ident EQUAL
## LR(1) items:
expr0 -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 893
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 390:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr0 -> LBRACE . BAR process RBRACE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On LBRACKET shift to state 391
-- On BAR shift to state 639
-- On mod_longident shift to state 62
-- On lbl_expr_list shift to state 401
-- On label_longident shift to state 405
## Reductions:

State 391:
## Known stack suffix:
## LBRACE LBRACKET
## LR(1) items:
simple_expr -> LBRACE LBRACKET . LIDENT RBRACKET lbl_expr_list opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## LBRACE LBRACKET LIDENT
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT . RBRACKET lbl_expr_list opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RBRACKET shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET . lbl_expr_list opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On lbl_expr_list shift to state 394
-- On label_longident shift to state 397
## Reductions:

State 394:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ SEMI RBRACE ]
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list . opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 351
-- On opt_semi shift to state 395
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 395:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi . RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RBRACE shift to state 396
## Reductions:

State 396:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE

State 397:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_expr_list -> label_longident . EQUAL expr [ SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## label_longident EQUAL
## LR(1) items:
lbl_expr_list -> label_longident EQUAL . expr [ SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 638
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 399:
## Known stack suffix:
## LAZY
## LR(1) items:
expr0 -> LAZY . simple_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 510
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 400:
## Known stack suffix:
## LBRACE
## LR(1) items:
simple_expr -> LBRACE . lbl_expr_list opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE . lbl_expr_list opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On LBRACKET shift to state 391
-- On mod_longident shift to state 62
-- On lbl_expr_list shift to state 401
-- On label_longident shift to state 405
## Reductions:

State 401:
## Known stack suffix:
## LBRACE lbl_expr_list
## LR(1) items:
lbl_expr_list -> lbl_expr_list . SEMI label_longident EQUAL expr [ error SEMI RBRACE ]
simple_expr -> LBRACE lbl_expr_list . opt_semi RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list . opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 358
-- On opt_semi shift to state 402
## Reductions:
-- On error RBRACE
--   reduce production opt_semi ->

State 402:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi . RBRACE [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list opt_semi . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 403
-- On RBRACE shift to state 404
## Reductions:

State 403:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACE lbl_expr_list opt_semi error

State 404:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi RBRACE
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE

State 405:
## Known stack suffix:
## label_longident
## LR(1) items:
lbl_expr_list -> label_longident . EQUAL expr [ error SEMI RBRACE ]
## Transitions:
-- On EQUAL shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## label_longident EQUAL
## LR(1) items:
lbl_expr_list -> label_longident EQUAL . expr [ error SEMI RBRACE ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 502
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 407:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constant -> CHAR

State 408:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 499
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 409:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr0 -> ASSERT . simple_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 412
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 410:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> val_longident

State 411:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production val_longident -> val_ident

State 412:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
expr0 -> ASSERT simple_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 413
-- On DOT shift to state 416
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> ASSERT simple_expr

State 413:
## Known stack suffix:
## simple_expr SHARP
## LR(1) items:
simple_expr -> simple_expr SHARP . label [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 414
-- On label shift to state 415
## Reductions:

State 414:
## Known stack suffix:
## LIDENT
## LR(1) items:
label -> LIDENT . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production label -> LIDENT

State 415:
## Known stack suffix:
## simple_expr SHARP label
## LR(1) items:
simple_expr -> simple_expr SHARP label . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr SHARP label

State 416:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LPAREN shift to state 417
-- On LIDENT shift to state 477
-- On LBRACKET shift to state 495
-- On mod_longident shift to state 484
-- On label_longident shift to state 498
## Reductions:

State 417:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 493
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 418:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr0 -> simple_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . simple_expr_list [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . DOT label_longident LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On SHARP shift to state 413
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On DOT shift to state 419
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr_list shift to state 490
-- On simple_expr shift to state 492
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr
** Conflict on SHARP

State 419:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
expr0 -> simple_expr DOT . label_longident LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr DOT . LPAREN seq_expr RPAREN LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr DOT . LBRACKET seq_expr RBRACKET LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LPAREN shift to state 420
-- On LIDENT shift to state 477
-- On LBRACKET shift to state 478
-- On mod_longident shift to state 484
-- On label_longident shift to state 487
## Reductions:

State 420:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
expr0 -> simple_expr DOT LPAREN . seq_expr RPAREN LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 421
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 421:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr . RPAREN LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 422
-- On RPAREN shift to state 423
## Reductions:

State 422:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr error

State 423:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr RPAREN . LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 424
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 424:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 473
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 425:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident . DOT val_ident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DOT shift to state 426
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> mod_longident
** Conflict on DOT

State 426:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident DOT . val_ident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 85
-- On LPAREN shift to state 95
-- On LIDENT shift to state 54
-- On val_ident shift to state 427
## Reductions:

State 427:
## Known stack suffix:
## mod_longident DOT val_ident
## LR(1) items:
val_longident -> mod_longident DOT val_ident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production val_longident -> mod_longident DOT val_ident

State 428:
## Known stack suffix:
## label
## LR(1) items:
expr0 -> label . LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 429
## Reductions:

State 429:
## Known stack suffix:
## label LESSMINUS
## LR(1) items:
expr0 -> label LESSMINUS . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 470
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 430:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 431
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr_comma_list
** Conflict on COMMA

State 431:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 469
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 432:
## Known stack suffix:
## expr0
## LR(1) items:
expr -> expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On LESSGREATER shift to state 445
-- On LESS shift to state 453
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On INFIXOP0 shift to state 455
-- On GREATER shift to state 457
-- On EQUAL shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERSAND shift to state 465
-- On AMPERAMPER shift to state 467
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr0
** Conflict on SUBTRACTIVE STAR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER

State 433:
## Known stack suffix:
## expr0 SUBTRACTIVE
## LR(1) items:
expr0 -> expr0 SUBTRACTIVE . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 434
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 434:
## Known stack suffix:
## expr0 SUBTRACTIVE expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 SUBTRACTIVE expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 SUBTRACTIVE expr0

State 435:
## Known stack suffix:
## expr0 STAR
## LR(1) items:
expr0 -> expr0 STAR . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 436
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 436:
## Known stack suffix:
## expr0 STAR expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 STAR expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 437
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 STAR expr0

State 437:
## Known stack suffix:
## expr0 INFIXOP4
## LR(1) items:
expr0 -> expr0 INFIXOP4 . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 438
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 438:
## Known stack suffix:
## expr0 INFIXOP4 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP4 expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 437
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP4 expr0

State 439:
## Known stack suffix:
## constr_longident
## LR(1) items:
expr0 -> constr_longident . simple_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> constr_longident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 440
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constr_longident
** Conflict on VARTYPE UIDENT TRUE STRING RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BEGIN

State 440:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
expr0 -> constr_longident simple_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 413
-- On DOT shift to state 416
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> constr_longident simple_expr

State 441:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constr_longident

State 442:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constant

State 443:
## Known stack suffix:
## expr0 INFIXOP3
## LR(1) items:
expr0 -> expr0 INFIXOP3 . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 444
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 444:
## Known stack suffix:
## expr0 INFIXOP3 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP3 expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 437
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP3 expr0

State 445:
## Known stack suffix:
## expr0 LESSGREATER
## LR(1) items:
expr0 -> expr0 LESSGREATER . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 446
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 446:
## Known stack suffix:
## expr0 LESSGREATER expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 LESSGREATER expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 LESSGREATER expr0

State 447:
## Known stack suffix:
## expr0 INFIXOP2
## LR(1) items:
expr0 -> expr0 INFIXOP2 . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 448
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 448:
## Known stack suffix:
## expr0 INFIXOP2 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP2 expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP2 expr0

State 449:
## Known stack suffix:
## expr0 INFIXOP1
## LR(1) items:
expr0 -> expr0 INFIXOP1 . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 450
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 450:
## Known stack suffix:
## expr0 INFIXOP1 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP1 expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP1 expr0

State 451:
## Known stack suffix:
## expr0 COLONCOLON
## LR(1) items:
expr0 -> expr0 COLONCOLON . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 452
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 452:
## Known stack suffix:
## expr0 COLONCOLON expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 COLONCOLON expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On COLONCOLON shift to state 451
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 COLONCOLON expr0

State 453:
## Known stack suffix:
## expr0 LESS
## LR(1) items:
expr0 -> expr0 LESS . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 454
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 454:
## Known stack suffix:
## expr0 LESS expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 LESS expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 LESS expr0

State 455:
## Known stack suffix:
## expr0 INFIXOP0
## LR(1) items:
expr0 -> expr0 INFIXOP0 . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 456
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 456:
## Known stack suffix:
## expr0 INFIXOP0 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP0 expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP0 expr0

State 457:
## Known stack suffix:
## expr0 GREATER
## LR(1) items:
expr0 -> expr0 GREATER . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 458
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 458:
## Known stack suffix:
## expr0 GREATER expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 GREATER expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 GREATER expr0

State 459:
## Known stack suffix:
## expr0 EQUAL
## LR(1) items:
expr0 -> expr0 EQUAL . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 460
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 460:
## Known stack suffix:
## expr0 EQUAL expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 EQUAL expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On COLONCOLON shift to state 451
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 EQUAL expr0

State 461:
## Known stack suffix:
## expr0 COLONEQUAL
## LR(1) items:
expr0 -> expr0 COLONEQUAL . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 462
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 462:
## Known stack suffix:
## expr0 COLONEQUAL expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 COLONEQUAL expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On LESSGREATER shift to state 445
-- On LESS shift to state 453
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On INFIXOP0 shift to state 455
-- On GREATER shift to state 457
-- On EQUAL shift to state 459
-- On COLONEQUAL shift to state 461
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERSAND shift to state 465
-- On AMPERAMPER shift to state 467
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET INHERIT IN GREATERRBRACKET GREATERRBRACE EXTERNAL EXCEPTION EOF END ELSE DONE DO COMMA COLONGREATER COLON CLASS BARRBRACKET BAR AND
--   reduce production expr0 -> expr0 COLONEQUAL expr0

State 463:
## Known stack suffix:
## expr0 BARBAR
## LR(1) items:
expr0 -> expr0 BARBAR . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 464
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 464:
## Known stack suffix:
## expr0 BARBAR expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 BARBAR expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On LESSGREATER shift to state 445
-- On LESS shift to state 453
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On INFIXOP0 shift to state 455
-- On GREATER shift to state 457
-- On EQUAL shift to state 459
-- On COLONCOLON shift to state 451
-- On BARBAR shift to state 463
-- On AMPERSAND shift to state 465
-- On AMPERAMPER shift to state 467
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET INHERIT IN GREATERRBRACKET GREATERRBRACE EXTERNAL EXCEPTION EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BAR AND
--   reduce production expr0 -> expr0 BARBAR expr0

State 465:
## Known stack suffix:
## expr0 AMPERSAND
## LR(1) items:
expr0 -> expr0 AMPERSAND . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 466
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 466:
## Known stack suffix:
## expr0 AMPERSAND expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 AMPERSAND expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On LESSGREATER shift to state 445
-- On LESS shift to state 453
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On INFIXOP0 shift to state 455
-- On GREATER shift to state 457
-- On EQUAL shift to state 459
-- On COLONCOLON shift to state 451
-- On AMPERSAND shift to state 465
-- On AMPERAMPER shift to state 467
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET INHERIT IN GREATERRBRACKET GREATERRBRACE EXTERNAL EXCEPTION EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND
--   reduce production expr0 -> expr0 AMPERSAND expr0

State 467:
## Known stack suffix:
## expr0 AMPERAMPER
## LR(1) items:
expr0 -> expr0 AMPERAMPER . expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr0 shift to state 468
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 468:
## Known stack suffix:
## expr0 AMPERAMPER expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 AMPERAMPER expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 433
-- On STAR shift to state 435
-- On LESSGREATER shift to state 445
-- On LESS shift to state 453
-- On INFIXOP4 shift to state 437
-- On INFIXOP3 shift to state 443
-- On INFIXOP2 shift to state 447
-- On INFIXOP1 shift to state 449
-- On INFIXOP0 shift to state 455
-- On GREATER shift to state 457
-- On EQUAL shift to state 459
-- On COLONCOLON shift to state 451
-- On AMPERSAND shift to state 465
-- On AMPERAMPER shift to state 467
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET INHERIT IN GREATERRBRACKET GREATERRBRACE EXTERNAL EXCEPTION EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLON CLASS BARRBRACKET BARBAR BAR AND
--   reduce production expr0 -> expr0 AMPERAMPER expr0

State 469:
## Known stack suffix:
## expr_comma_list COMMA expr
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr_comma_list -> expr_comma_list COMMA expr

State 470:
## Known stack suffix:
## label LESSMINUS expr
## LR(1) items:
expr0 -> label LESSMINUS expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> label LESSMINUS expr

State 471:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 472
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 472:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr COMMA expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr_comma_list -> expr COMMA expr

State 473:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr

State 474:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 475
-- On COMMA shift to state 471
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr
** Conflict on SEMI COMMA

State 475:
## Known stack suffix:
## expr SEMI
## LR(1) items:
seq_expr -> expr SEMI . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr SEMI . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 476
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr SEMI
** Conflict on LET

State 476:
## Known stack suffix:
## expr SEMI seq_expr
## LR(1) items:
seq_expr -> expr SEMI seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr SEMI seq_expr

State 477:
## Known stack suffix:
## LIDENT
## LR(1) items:
label_longident -> LIDENT . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production label_longident -> LIDENT

State 478:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET . seq_expr RBRACKET LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 479
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 479:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr . RBRACKET LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 480
-- On RBRACKET shift to state 481
## Reductions:

State 480:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr error

State 481:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET . LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 482
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 482:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 483
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 483:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr

State 484:
## Known stack suffix:
## mod_longident
## LR(1) items:
label_longident -> mod_longident . DOT LIDENT [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
## Transitions:
-- On DOT shift to state 485
## Reductions:

State 485:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
label_longident -> mod_longident DOT . LIDENT [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident DOT . UIDENT [ DOT ]
## Transitions:
-- On UIDENT shift to state 19
-- On LIDENT shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## mod_longident DOT LIDENT
## LR(1) items:
label_longident -> mod_longident DOT LIDENT . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSMINUS LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production label_longident -> mod_longident DOT LIDENT

State 487:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
expr0 -> simple_expr DOT label_longident . LESSMINUS expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 488
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 488:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
expr0 -> simple_expr DOT label_longident LESSMINUS . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 489
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 489:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
expr0 -> simple_expr DOT label_longident LESSMINUS expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr DOT label_longident LESSMINUS expr

State 490:
## Known stack suffix:
## simple_expr simple_expr_list
## LR(1) items:
expr0 -> simple_expr simple_expr_list . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list . simple_expr [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 491
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr simple_expr_list

State 491:
## Known stack suffix:
## simple_expr_list simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list simple_expr . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 413
-- On DOT shift to state 416
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr_list -> simple_expr_list simple_expr
** Conflict on SHARP

State 492:
## Known stack suffix:
## simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 413
-- On DOT shift to state 416
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr_list -> simple_expr
** Conflict on SHARP

State 493:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 422
-- On RPAREN shift to state 494
## Reductions:

State 494:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 495:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 496
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 496:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 480
-- On RBRACKET shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 498:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 499:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 500
-- On END shift to state 501
## Reductions:

State 500:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> BEGIN seq_expr error

State 501:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> BEGIN seq_expr END

State 502:
## Known stack suffix:
## label_longident EQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI RBRACE COMMA ]
lbl_expr_list -> label_longident EQUAL expr . [ error SEMI RBRACE ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_expr_list -> label_longident EQUAL expr

State 503:
## Known stack suffix:
## CHAR
## LR(1) items:
constant -> CHAR . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production constant -> CHAR

State 504:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_expr -> BEGIN . seq_expr END [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN . seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 505
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 505:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_expr -> BEGIN seq_expr . END [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> BEGIN seq_expr . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 506
-- On END shift to state 507
## Reductions:

State 506:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_expr -> BEGIN seq_expr error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> BEGIN seq_expr error

State 507:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_expr -> BEGIN seq_expr END . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> BEGIN seq_expr END

State 508:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_expr -> val_longident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> val_longident

State 509:
## Known stack suffix:
## val_ident
## LR(1) items:
val_longident -> val_ident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production val_longident -> val_ident

State 510:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
expr0 -> LAZY simple_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LAZY simple_expr

State 511:
## Known stack suffix:
## simple_expr SHARP
## LR(1) items:
simple_expr -> simple_expr SHARP . label [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 512
## Reductions:

State 512:
## Known stack suffix:
## simple_expr SHARP label
## LR(1) items:
simple_expr -> simple_expr SHARP label . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr SHARP label

State 513:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . label_longident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LPAREN shift to state 514
-- On LIDENT shift to state 61
-- On LBRACKET shift to state 518
-- On mod_longident shift to state 62
-- On label_longident shift to state 522
## Reductions:

State 514:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 515
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 515:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 516
-- On RPAREN shift to state 517
## Reductions:

State 516:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr error

State 517:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 518:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 519
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 519:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 520
-- On RBRACKET shift to state 521
## Reductions:

State 520:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr error
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr error

State 521:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 522:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
simple_expr -> simple_expr DOT label_longident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 523:
## Known stack suffix:
## mod_longident
## LR(1) items:
constr_longident -> mod_longident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
mod_longident -> mod_longident . DOT UIDENT [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident . DOT val_ident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DOT shift to state 524
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production constr_longident -> mod_longident
** Conflict on DOT

State 524:
## Known stack suffix:
## mod_longident DOT
## LR(1) items:
mod_longident -> mod_longident DOT . UIDENT [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
val_longident -> mod_longident DOT . val_ident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 19
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## mod_longident DOT val_ident
## LR(1) items:
val_longident -> mod_longident DOT val_ident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production val_longident -> mod_longident DOT val_ident

State 526:
## Known stack suffix:
## constr_longident
## LR(1) items:
simple_expr -> constr_longident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constr_longident

State 527:
## Known stack suffix:
## constant
## LR(1) items:
simple_expr -> constant . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constant

State 528:
## Known stack suffix:
## IF
## LR(1) items:
expr0 -> IF . seq_expr THEN expr ELSE expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF . seq_expr THEN expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 633
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 529:
## Known stack suffix:
## FUNCTION
## LR(1) items:
expr0 -> FUNCTION . opt_bar match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 530
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 530:
## Known stack suffix:
## FUNCTION opt_bar
## LR(1) items:
expr0 -> FUNCTION opt_bar . match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 531
-- On mod_longident shift to state 306
-- On match_cases shift to state 629
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 531:
## Known stack suffix:
## pattern
## LR(1) items:
match_cases -> pattern . match_action [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 532
-- On MINUSGREATER shift to state 535
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On match_action shift to state 628
## Reductions:

State 532:
## Known stack suffix:
## WHEN
## LR(1) items:
match_action -> WHEN . seq_expr MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 619
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 533:
## Known stack suffix:
## FUN
## LR(1) items:
expr0 -> FUN . simple_pattern fun_def [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 534
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 534:
## Known stack suffix:
## FUN simple_pattern
## LR(1) items:
expr0 -> FUN simple_pattern . fun_def [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 532
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On MINUSGREATER shift to state 535
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 615
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On match_action shift to state 616
-- On fun_def shift to state 618
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 535:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
match_action -> MINUSGREATER . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 614
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 536:
## Known stack suffix:
## FOR
## LR(1) items:
expr0 -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 537
## Reductions:

State 537:
## Known stack suffix:
## FOR val_ident
## LR(1) items:
expr0 -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On EQUAL shift to state 538
## Reductions:

State 538:
## Known stack suffix:
## FOR val_ident EQUAL
## LR(1) items:
expr0 -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 602
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 539:
## Known stack suffix:
## ASSERT
## LR(1) items:
expr0 -> ASSERT . simple_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 540
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 540:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
expr0 -> ASSERT simple_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> ASSERT simple_expr

State 541:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr0 -> simple_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . simple_expr_list [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . DOT label_longident LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On SHARP shift to state 511
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On DOT shift to state 542
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr_list shift to state 599
-- On simple_expr shift to state 601
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr
** Conflict on SHARP

State 542:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
expr0 -> simple_expr DOT . label_longident LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr DOT . LPAREN seq_expr RPAREN LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> simple_expr DOT . LBRACKET seq_expr RBRACKET LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . label_longident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LPAREN seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT . LBRACKET seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 3
-- On LPAREN shift to state 543
-- On LIDENT shift to state 61
-- On LBRACKET shift to state 591
-- On mod_longident shift to state 62
-- On label_longident shift to state 596
## Reductions:

State 543:
## Known stack suffix:
## simple_expr DOT LPAREN
## LR(1) items:
expr0 -> simple_expr DOT LPAREN . seq_expr RPAREN LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN . seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 544
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 544:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr . RPAREN LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 516
-- On RPAREN shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr RPAREN . LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 546
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LPAREN seq_expr RPAREN

State 546:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 590
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 547:
## Known stack suffix:
## label
## LR(1) items:
expr0 -> label . LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## label LESSMINUS
## LR(1) items:
expr0 -> label LESSMINUS . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 587
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 549:
## Known stack suffix:
## expr_comma_list
## LR(1) items:
expr -> expr_comma_list . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr_comma_list . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 550
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr_comma_list
** Conflict on COMMA

State 550:
## Known stack suffix:
## expr_comma_list COMMA
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 586
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 551:
## Known stack suffix:
## expr0
## LR(1) items:
expr -> expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On LESSGREATER shift to state 562
-- On LESS shift to state 570
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On INFIXOP0 shift to state 572
-- On GREATER shift to state 574
-- On EQUAL shift to state 576
-- On COLONEQUAL shift to state 578
-- On COLONCOLON shift to state 568
-- On BARBAR shift to state 580
-- On AMPERSAND shift to state 582
-- On AMPERAMPER shift to state 584
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr -> expr0
** Conflict on SUBTRACTIVE STAR LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER

State 552:
## Known stack suffix:
## expr0 SUBTRACTIVE
## LR(1) items:
expr0 -> expr0 SUBTRACTIVE . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 553
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 553:
## Known stack suffix:
## expr0 SUBTRACTIVE expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 SUBTRACTIVE expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 SUBTRACTIVE expr0

State 554:
## Known stack suffix:
## expr0 STAR
## LR(1) items:
expr0 -> expr0 STAR . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 555
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 555:
## Known stack suffix:
## expr0 STAR expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 STAR expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 556
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 STAR expr0

State 556:
## Known stack suffix:
## expr0 INFIXOP4
## LR(1) items:
expr0 -> expr0 INFIXOP4 . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 557
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 557:
## Known stack suffix:
## expr0 INFIXOP4 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP4 expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 556
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP4 expr0

State 558:
## Known stack suffix:
## constr_longident
## LR(1) items:
expr0 -> constr_longident . simple_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> constr_longident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 559
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> constr_longident
** Conflict on VARTYPE UIDENT TRUE STRING RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE CHAR BEGIN

State 559:
## Known stack suffix:
## constr_longident simple_expr
## LR(1) items:
expr0 -> constr_longident simple_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> constr_longident simple_expr

State 560:
## Known stack suffix:
## expr0 INFIXOP3
## LR(1) items:
expr0 -> expr0 INFIXOP3 . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 561
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 561:
## Known stack suffix:
## expr0 INFIXOP3 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP3 expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On INFIXOP4 shift to state 556
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP3 expr0

State 562:
## Known stack suffix:
## expr0 LESSGREATER
## LR(1) items:
expr0 -> expr0 LESSGREATER . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 563
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 563:
## Known stack suffix:
## expr0 LESSGREATER expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 LESSGREATER expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On COLONCOLON shift to state 568
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 LESSGREATER expr0

State 564:
## Known stack suffix:
## expr0 INFIXOP2
## LR(1) items:
expr0 -> expr0 INFIXOP2 . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 565
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 565:
## Known stack suffix:
## expr0 INFIXOP2 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP2 expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP2 expr0

State 566:
## Known stack suffix:
## expr0 INFIXOP1
## LR(1) items:
expr0 -> expr0 INFIXOP1 . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 567
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 567:
## Known stack suffix:
## expr0 INFIXOP1 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP1 expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On COLONCOLON shift to state 568
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP1 expr0

State 568:
## Known stack suffix:
## expr0 COLONCOLON
## LR(1) items:
expr0 -> expr0 COLONCOLON . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 569
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 569:
## Known stack suffix:
## expr0 COLONCOLON expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 COLONCOLON expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On COLONCOLON shift to state 568
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 COLONCOLON expr0

State 570:
## Known stack suffix:
## expr0 LESS
## LR(1) items:
expr0 -> expr0 LESS . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 571
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 571:
## Known stack suffix:
## expr0 LESS expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 LESS expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On COLONCOLON shift to state 568
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 LESS expr0

State 572:
## Known stack suffix:
## expr0 INFIXOP0
## LR(1) items:
expr0 -> expr0 INFIXOP0 . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 573
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 573:
## Known stack suffix:
## expr0 INFIXOP0 expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 INFIXOP0 expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On COLONCOLON shift to state 568
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 INFIXOP0 expr0

State 574:
## Known stack suffix:
## expr0 GREATER
## LR(1) items:
expr0 -> expr0 GREATER . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 575
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 575:
## Known stack suffix:
## expr0 GREATER expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 GREATER expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On COLONCOLON shift to state 568
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 GREATER expr0

State 576:
## Known stack suffix:
## expr0 EQUAL
## LR(1) items:
expr0 -> expr0 EQUAL . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 577
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 577:
## Known stack suffix:
## expr0 EQUAL expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 EQUAL expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On COLONCOLON shift to state 568
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> expr0 EQUAL expr0

State 578:
## Known stack suffix:
## expr0 COLONEQUAL
## LR(1) items:
expr0 -> expr0 COLONEQUAL . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 579
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 579:
## Known stack suffix:
## expr0 COLONEQUAL expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 COLONEQUAL expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On LESSGREATER shift to state 562
-- On LESS shift to state 570
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On INFIXOP0 shift to state 572
-- On GREATER shift to state 574
-- On EQUAL shift to state 576
-- On COLONEQUAL shift to state 578
-- On COLONCOLON shift to state 568
-- On BARBAR shift to state 580
-- On AMPERSAND shift to state 582
-- On AMPERAMPER shift to state 584
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DO COMMA CLASS BAR AND
--   reduce production expr0 -> expr0 COLONEQUAL expr0

State 580:
## Known stack suffix:
## expr0 BARBAR
## LR(1) items:
expr0 -> expr0 BARBAR . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 581
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 581:
## Known stack suffix:
## expr0 BARBAR expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 BARBAR expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On LESSGREATER shift to state 562
-- On LESS shift to state 570
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On INFIXOP0 shift to state 572
-- On GREATER shift to state 574
-- On EQUAL shift to state 576
-- On COLONCOLON shift to state 568
-- On BARBAR shift to state 580
-- On AMPERSAND shift to state 582
-- On AMPERAMPER shift to state 584
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BAR AND
--   reduce production expr0 -> expr0 BARBAR expr0

State 582:
## Known stack suffix:
## expr0 AMPERSAND
## LR(1) items:
expr0 -> expr0 AMPERSAND . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 583
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 583:
## Known stack suffix:
## expr0 AMPERSAND expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 AMPERSAND expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On LESSGREATER shift to state 562
-- On LESS shift to state 570
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On INFIXOP0 shift to state 572
-- On GREATER shift to state 574
-- On EQUAL shift to state 576
-- On COLONCOLON shift to state 568
-- On AMPERSAND shift to state 582
-- On AMPERAMPER shift to state 584
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND
--   reduce production expr0 -> expr0 AMPERSAND expr0

State 584:
## Known stack suffix:
## expr0 AMPERAMPER
## LR(1) items:
expr0 -> expr0 AMPERAMPER . expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr0 shift to state 585
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 585:
## Known stack suffix:
## expr0 AMPERAMPER expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 AMPERAMPER expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SUBTRACTIVE shift to state 552
-- On STAR shift to state 554
-- On LESSGREATER shift to state 562
-- On LESS shift to state 570
-- On INFIXOP4 shift to state 556
-- On INFIXOP3 shift to state 560
-- On INFIXOP2 shift to state 564
-- On INFIXOP1 shift to state 566
-- On INFIXOP0 shift to state 572
-- On GREATER shift to state 574
-- On EQUAL shift to state 576
-- On COLONCOLON shift to state 568
-- On AMPERSAND shift to state 582
-- On AMPERAMPER shift to state 584
## Reductions:
-- On WITH TYPE TO THEN SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET IN EXTERNAL EXCEPTION EOF ELSE DOWNTO DO COMMA COLONEQUAL CLASS BARBAR BAR AND
--   reduce production expr0 -> expr0 AMPERAMPER expr0

State 586:
## Known stack suffix:
## expr_comma_list COMMA expr
## LR(1) items:
expr_comma_list -> expr_comma_list COMMA expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr_comma_list -> expr_comma_list COMMA expr

State 587:
## Known stack suffix:
## label LESSMINUS expr
## LR(1) items:
expr0 -> label LESSMINUS expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> label LESSMINUS expr

State 588:
## Known stack suffix:
## expr COMMA
## LR(1) items:
expr_comma_list -> expr COMMA . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 589
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 589:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr COMMA expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr_comma_list -> expr COMMA expr

State 590:
## Known stack suffix:
## simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
## LR(1) items:
expr0 -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr

State 591:
## Known stack suffix:
## simple_expr DOT LBRACKET
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET . seq_expr RBRACKET LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET . seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 592
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 592:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr . RBRACKET LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 520
-- On RBRACKET shift to state 593
## Reductions:

State 593:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET . LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 594
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT LBRACKET seq_expr RBRACKET

State 594:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 595
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 595:
## Known stack suffix:
## simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
## LR(1) items:
expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr

State 596:
## Known stack suffix:
## simple_expr DOT label_longident
## LR(1) items:
expr0 -> simple_expr DOT label_longident . LESSMINUS expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr DOT label_longident . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LESSMINUS shift to state 597
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> simple_expr DOT label_longident

State 597:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS
## LR(1) items:
expr0 -> simple_expr DOT label_longident LESSMINUS . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 598
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 598:
## Known stack suffix:
## simple_expr DOT label_longident LESSMINUS expr
## LR(1) items:
expr0 -> simple_expr DOT label_longident LESSMINUS expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr DOT label_longident LESSMINUS expr

State 599:
## Known stack suffix:
## simple_expr simple_expr_list
## LR(1) items:
expr0 -> simple_expr simple_expr_list . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list . simple_expr [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 600
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> simple_expr simple_expr_list

State 600:
## Known stack suffix:
## simple_expr_list simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr_list simple_expr . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr_list -> simple_expr_list simple_expr
** Conflict on SHARP

State 601:
## Known stack suffix:
## simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr_list -> simple_expr . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr_list -> simple_expr
** Conflict on SHARP

State 602:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On TO shift to state 603
-- On DOWNTO shift to state 604
-- On direction_flag shift to state 605
## Reductions:

State 603:
## Known stack suffix:
## TO
## LR(1) items:
direction_flag -> TO . [ WHILE VARTYPE UIDENT TRY TRUE SUBTRACTIVE STRING SPAWN RELOCINFO PREFIXOP PARSER NEW MATCH LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE VARTYPE UIDENT TRY TRUE SUBTRACTIVE STRING SPAWN RELOCINFO PREFIXOP PARSER NEW MATCH LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN ASSERT
--   reduce production direction_flag -> TO

State 604:
## Known stack suffix:
## DOWNTO
## LR(1) items:
direction_flag -> DOWNTO . [ WHILE VARTYPE UIDENT TRY TRUE SUBTRACTIVE STRING SPAWN RELOCINFO PREFIXOP PARSER NEW MATCH LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN ASSERT ]
## Transitions:
## Reductions:
-- On WHILE VARTYPE UIDENT TRY TRUE SUBTRACTIVE STRING SPAWN RELOCINFO PREFIXOP PARSER NEW MATCH LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE LAZY INT IF FUNCTION FUN FOR FLOAT FALSE CHAR BEGIN ASSERT
--   reduce production direction_flag -> DOWNTO

State 605:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 606
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 606:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 607
## Reductions:

State 607:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 608
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 608:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 609
-- On DONE shift to state 610
## Reductions:

State 609:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error

State 610:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE

State 611:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr . SEMI seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 612
-- On COMMA shift to state 588
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr
** Conflict on SEMI COMMA

State 612:
## Known stack suffix:
## expr SEMI
## LR(1) items:
seq_expr -> expr SEMI . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
seq_expr -> expr SEMI . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 613
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:
-- On WITH TYPE TO THEN STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr SEMI
** Conflict on LET

State 613:
## Known stack suffix:
## expr SEMI seq_expr
## LR(1) items:
seq_expr -> expr SEMI seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production seq_expr -> expr SEMI seq_expr

State 614:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_action -> MINUSGREATER seq_expr

State 615:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_def -> simple_pattern . fun_def [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 532
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On MINUSGREATER shift to state 535
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 615
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On match_action shift to state 616
-- On fun_def shift to state 617
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 616:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production fun_def -> match_action

State 617:
## Known stack suffix:
## simple_pattern fun_def
## LR(1) items:
fun_def -> simple_pattern fun_def . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production fun_def -> simple_pattern fun_def

State 618:
## Known stack suffix:
## FUN simple_pattern fun_def
## LR(1) items:
expr0 -> FUN simple_pattern fun_def . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FUN simple_pattern fun_def

State 619:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
match_action -> WHEN seq_expr . MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 620
## Reductions:

State 620:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 621
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 621:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_action -> WHEN seq_expr MINUSGREATER seq_expr

State 622:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
pattern_comma_list -> pattern COMMA . pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 623
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 623:
## Known stack suffix:
## pattern COMMA pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern COMMA pattern . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COLONCOLON shift to state 369
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL BAR AS
--   reduce production pattern_comma_list -> pattern COMMA pattern

State 624:
## Known stack suffix:
## pattern BAR
## LR(1) items:
pattern -> pattern BAR . pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 625
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 625:
## Known stack suffix:
## pattern BAR pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern BAR pattern . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
## Reductions:
-- On WHEN MINUSGREATER EQUAL COLONEQUAL BAR AS
--   reduce production pattern -> pattern BAR pattern

State 626:
## Known stack suffix:
## pattern AS
## LR(1) items:
pattern -> pattern AS . val_ident [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## pattern AS val_ident
## LR(1) items:
pattern -> pattern AS val_ident . [ WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
## Reductions:
-- On WHEN MINUSGREATER EQUAL COMMA COLONEQUAL COLONCOLON BAR AS
--   reduce production pattern -> pattern AS val_ident

State 628:
## Known stack suffix:
## pattern match_action
## LR(1) items:
match_cases -> pattern match_action . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_cases -> pattern match_action

State 629:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
expr0 -> FUNCTION opt_bar match_cases . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 630
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FUNCTION opt_bar match_cases

State 630:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern match_action [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 631
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 631:
## Known stack suffix:
## match_cases BAR pattern
## LR(1) items:
match_cases -> match_cases BAR pattern . match_action [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 532
-- On MINUSGREATER shift to state 535
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On match_action shift to state 632
## Reductions:

State 632:
## Known stack suffix:
## match_cases BAR pattern match_action
## LR(1) items:
match_cases -> match_cases BAR pattern match_action . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_cases -> match_cases BAR pattern match_action

State 633:
## Known stack suffix:
## IF seq_expr
## LR(1) items:
expr0 -> IF seq_expr . THEN expr ELSE expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF seq_expr . THEN expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On THEN shift to state 634
## Reductions:

State 634:
## Known stack suffix:
## IF seq_expr THEN
## LR(1) items:
expr0 -> IF seq_expr THEN . expr ELSE expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF seq_expr THEN . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 635
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 635:
## Known stack suffix:
## IF seq_expr THEN expr
## LR(1) items:
expr0 -> IF seq_expr THEN expr . ELSE expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF seq_expr THEN expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On ELSE shift to state 636
-- On COMMA shift to state 588
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> IF seq_expr THEN expr
** Conflict on ELSE

State 636:
## Known stack suffix:
## IF seq_expr THEN expr ELSE
## LR(1) items:
expr0 -> IF seq_expr THEN expr ELSE . expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 637
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 637:
## Known stack suffix:
## IF seq_expr THEN expr ELSE expr
## LR(1) items:
expr0 -> IF seq_expr THEN expr ELSE expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> IF seq_expr THEN expr ELSE expr

State 638:
## Known stack suffix:
## label_longident EQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ SEMI RBRACE COMMA ]
lbl_expr_list -> label_longident EQUAL expr . [ SEMI RBRACE ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On SEMI RBRACE
--   reduce production lbl_expr_list -> label_longident EQUAL expr

State 639:
## Known stack suffix:
## LBRACE BAR
## LR(1) items:
expr0 -> LBRACE BAR . process RBRACE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 891
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On RBRACE
--   reduce production process ->

State 640:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_chan_expr -> LPAREN . seq_expr RPAREN [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
simple_chan_expr -> LPAREN . seq_expr error [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
simple_chan_expr -> LPAREN . seq_expr type_constraint RPAREN [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
val_ident -> LPAREN . operator RPAREN [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 280
-- On STRING shift to state 28
-- On STAR shift to state 49
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 641
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LESSGREATER shift to state 55
-- On LESS shift to state 56
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On INFIXOP4 shift to state 97
-- On INFIXOP3 shift to state 98
-- On INFIXOP2 shift to state 99
-- On INFIXOP1 shift to state 100
-- On INFIXOP0 shift to state 101
-- On IF shift to state 361
-- On GREATER shift to state 102
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EQUAL shift to state 103
-- On COLONEQUAL shift to state 104
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On BARBAR shift to state 105
-- On ASSERT shift to state 409
-- On AMPERSAND shift to state 106
-- On AMPERAMPER shift to state 107
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 643
-- On operator shift to state 245
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 641:
## Known stack suffix:
## PREFIXOP
## LR(1) items:
operator -> PREFIXOP . [ RPAREN ]
simple_expr -> PREFIXOP . simple_expr [ error VARTYPE UIDENT TRUE SUBTRACTIVE STRING STAR SHARP SEMI RPAREN RELOCINFO PREFIXOP NEW LPAREN LIDENT LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER FLOAT FALSE EQUAL DOT COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CHAR BEGIN BARBAR AMPERSAND AMPERAMPER ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 642
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On RPAREN
--   reduce production operator -> PREFIXOP

State 642:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> PREFIXOP simple_expr

State 643:
## Known stack suffix:
## LPAREN seq_expr
## LR(1) items:
simple_chan_expr -> LPAREN seq_expr . RPAREN [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
simple_chan_expr -> LPAREN seq_expr . error [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
simple_chan_expr -> LPAREN seq_expr . type_constraint RPAREN [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On error shift to state 644
-- On RPAREN shift to state 645
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On type_constraint shift to state 654
## Reductions:

State 644:
## Known stack suffix:
## LPAREN seq_expr error
## LR(1) items:
simple_chan_expr -> LPAREN seq_expr error . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> LPAREN seq_expr error

State 645:
## Known stack suffix:
## LPAREN seq_expr RPAREN
## LR(1) items:
simple_chan_expr -> LPAREN seq_expr RPAREN . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> LPAREN seq_expr RPAREN

State 646:
## Known stack suffix:
## COLONGREATER
## LR(1) items:
type_constraint -> COLONGREATER . core_type [ RPAREN EQUAL ]
type_constraint -> COLONGREATER . error [ RPAREN EQUAL ]
## Transitions:
-- On error shift to state 647
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 648
## Reductions:

State 647:
## Known stack suffix:
## COLONGREATER error
## LR(1) items:
type_constraint -> COLONGREATER error . [ RPAREN EQUAL ]
## Transitions:
## Reductions:
-- On RPAREN EQUAL
--   reduce production type_constraint -> COLONGREATER error

State 648:
## Known stack suffix:
## COLONGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER EQUAL AS ]
type_constraint -> COLONGREATER core_type . [ RPAREN EQUAL ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On RPAREN EQUAL
--   reduce production type_constraint -> COLONGREATER core_type

State 649:
## Known stack suffix:
## COLON
## LR(1) items:
type_constraint -> COLON . core_type [ RPAREN EQUAL ]
type_constraint -> COLON . core_type COLONGREATER core_type [ RPAREN EQUAL ]
type_constraint -> COLON . error [ RPAREN EQUAL ]
## Transitions:
-- On error shift to state 650
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 651
## Reductions:

State 650:
## Known stack suffix:
## COLON error
## LR(1) items:
type_constraint -> COLON error . [ RPAREN EQUAL ]
## Transitions:
## Reductions:
-- On RPAREN EQUAL
--   reduce production type_constraint -> COLON error

State 651:
## Known stack suffix:
## COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER EQUAL COLONGREATER AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER EQUAL COLONGREATER AS ]
type_constraint -> COLON core_type . [ RPAREN EQUAL ]
type_constraint -> COLON core_type . COLONGREATER core_type [ RPAREN EQUAL ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On COLONGREATER shift to state 652
-- On AS shift to state 180
## Reductions:
-- On RPAREN EQUAL
--   reduce production type_constraint -> COLON core_type

State 652:
## Known stack suffix:
## COLON core_type COLONGREATER
## LR(1) items:
type_constraint -> COLON core_type COLONGREATER . core_type [ RPAREN EQUAL ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 653
## Reductions:

State 653:
## Known stack suffix:
## COLON core_type COLONGREATER core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER EQUAL AS ]
type_constraint -> COLON core_type COLONGREATER core_type . [ RPAREN EQUAL ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On RPAREN EQUAL
--   reduce production type_constraint -> COLON core_type COLONGREATER core_type

State 654:
## Known stack suffix:
## LPAREN seq_expr type_constraint
## LR(1) items:
simple_chan_expr -> LPAREN seq_expr type_constraint . RPAREN [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On RPAREN shift to state 655
## Reductions:

State 655:
## Known stack suffix:
## LPAREN seq_expr type_constraint RPAREN
## LR(1) items:
simple_chan_expr -> LPAREN seq_expr type_constraint RPAREN . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> LPAREN seq_expr type_constraint RPAREN

State 656:
## Known stack suffix:
## LOC
## LR(1) items:
process0 -> LOC . loc_bindings [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 657
-- On loc_bindings shift to state 890
-- On loc_binding shift to state 821
## Reductions:

State 657:
## Known stack suffix:
## LIDENT
## LR(1) items:
loc_binding -> LIDENT . loc_modules loc_defs loc_init [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LBRACKET shift to state 658
-- On loc_modules shift to state 662
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_modules ->

State 658:
## Known stack suffix:
## LBRACKET
## LR(1) items:
loc_modules -> LBRACKET . list_of_modules RBRACKET [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
loc_modules -> LBRACKET . RBRACKET [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 296
-- On RBRACKET shift to state 659
-- On list_of_modules shift to state 660
## Reductions:

State 659:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
loc_modules -> LBRACKET RBRACKET . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_modules -> LBRACKET RBRACKET

State 660:
## Known stack suffix:
## LBRACKET list_of_modules
## LR(1) items:
loc_modules -> LBRACKET list_of_modules . RBRACKET [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 661
## Reductions:

State 661:
## Known stack suffix:
## LBRACKET list_of_modules RBRACKET
## LR(1) items:
loc_modules -> LBRACKET list_of_modules RBRACKET . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET JOINDEF IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_modules -> LBRACKET list_of_modules RBRACKET

State 662:
## Known stack suffix:
## LIDENT loc_modules
## LR(1) items:
loc_binding -> LIDENT loc_modules . loc_defs loc_init [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On JOINDEF shift to state 663
-- On loc_defs shift to state 888
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_defs ->

State 663:
## Known stack suffix:
## JOINDEF
## LR(1) items:
loc_defs -> JOINDEF . def_bindings [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 664
-- On simple_def_binding shift to state 825
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
-- On def_bindings shift to state 887
-- On def_binding shift to state 832
## Reductions:

State 664:
## Known stack suffix:
## LIDENT
## LR(1) items:
def_binding -> LIDENT . LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
def_binding -> LIDENT . LBRACE simple_def_binding loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
join_pattern -> LIDENT . simple_pattern [ EQUAL BAR ]
join_pattern -> LIDENT . PREFIXOP simple_pattern [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On PREFIXOP shift to state 311
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 665
-- On LBRACE shift to state 881
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 322
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 665:
## Known stack suffix:
## LIDENT LBRACKET
## LR(1) items:
constr_longident -> LBRACKET . RBRACKET [ EQUAL BAR ]
def_binding -> LIDENT LBRACKET . lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi RBRACKET [ EQUAL BAR ]
simple_pattern -> LBRACKET . pattern_semi_list opt_semi error [ EQUAL BAR ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On RBRACKET shift to state 249
-- On LPAREN shift to state 52
-- On LIDENT shift to state 314
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_semi_list shift to state 250
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 123
-- On mod_longident shift to state 83
-- On lident_comma_list shift to state 666
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:

State 666:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list . RBRACKET LBRACE simple_def_binding loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 667
## Reductions:

State 667:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET . LBRACE simple_def_binding loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LBRACE shift to state 668
## Reductions:

State 668:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE . simple_def_binding loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 321
-- On simple_def_binding shift to state 669
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
## Reductions:

State 669:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding . loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_def_binding -> simple_def_binding . OR def_pattern [ RBRACE OR DO ]
## Transitions:
-- On OR shift to state 324
-- On DO shift to state 670
-- On loc_init shift to state 879
## Reductions:
-- On RBRACE
--   reduce production loc_init ->

State 670:
## Known stack suffix:
## DO
## LR(1) items:
loc_init -> DO . process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 672
-- On INT shift to state 259
-- On IF shift to state 758
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 761
-- On process0 shift to state 878
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 671:
## Known stack suffix:
## LBRACERBRACE
## LR(1) items:
process0 -> LBRACERBRACE . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACERBRACE

State 672:
## Known stack suffix:
## LBRACE
## LR(1) items:
process0 -> LBRACE . process RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> LBRACE . process error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> LBRACE . error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On error shift to state 673
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 817
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error RBRACE
--   reduce production process ->
** Conflict on error

State 673:
## Known stack suffix:
## LBRACE error
## LR(1) items:
process0 -> LBRACE error . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACE error

State 674:
## Known stack suffix:
## REPLY
## LR(1) items:
process0 -> REPLY . expr to_ident [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> REPLY . to_ident [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On TO shift to state 675
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On to_ident shift to state 677
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 678
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production to_ident ->
** Conflict on LET

State 675:
## Known stack suffix:
## TO
## LR(1) items:
to_ident -> TO . LIDENT [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 676
## Reductions:

State 676:
## Known stack suffix:
## TO LIDENT
## LR(1) items:
to_ident -> TO LIDENT . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production to_ident -> TO LIDENT

State 677:
## Known stack suffix:
## REPLY to_ident
## LR(1) items:
process0 -> REPLY to_ident . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> REPLY to_ident

State 678:
## Known stack suffix:
## REPLY expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error TYPE TO SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO COMMA CLASS BAR AND ]
process0 -> REPLY expr . to_ident [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On TO shift to state 675
-- On COMMA shift to state 471
-- On to_ident shift to state 679
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production to_ident ->

State 679:
## Known stack suffix:
## REPLY expr to_ident
## LR(1) items:
process0 -> REPLY expr to_ident . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> REPLY expr to_ident

State 680:
## Known stack suffix:
## MATCH
## LR(1) items:
process0 -> MATCH . seq_expr WITH opt_bar join_match_cases [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 681
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 681:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
process0 -> MATCH seq_expr . WITH opt_bar join_match_cases [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WITH shift to state 682
## Reductions:

State 682:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
process0 -> MATCH seq_expr WITH . opt_bar join_match_cases [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 683
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 683:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
process0 -> MATCH seq_expr WITH opt_bar . join_match_cases [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 684
-- On mod_longident shift to state 306
-- On join_match_cases shift to state 874
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 684:
## Known stack suffix:
## pattern
## LR(1) items:
join_match_cases -> pattern . join_match_action [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 685
-- On MINUSGREATER shift to state 871
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On join_match_action shift to state 873
## Reductions:

State 685:
## Known stack suffix:
## WHEN
## LR(1) items:
join_match_action -> WHEN . seq_expr MINUSGREATER process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 686
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 686:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
join_match_action -> WHEN seq_expr . MINUSGREATER process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On MINUSGREATER shift to state 687
## Reductions:

State 687:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
join_match_action -> WHEN seq_expr MINUSGREATER . process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 694
-- On INT shift to state 259
-- On IF shift to state 755
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 773
-- On process0 shift to state 870
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 688:
## Known stack suffix:
## LOC
## LR(1) items:
process0 -> LOC . loc_bindings [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 689
-- On loc_binding shift to state 690
## Reductions:

State 689:
## Known stack suffix:
## LOC loc_bindings
## LR(1) items:
process0 -> LOC loc_bindings . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> LOC loc_bindings

State 690:
## Known stack suffix:
## loc_binding
## LR(1) items:
loc_bindings -> loc_binding . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
loc_bindings -> loc_binding . AND loc_bindings [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On AND shift to state 691
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_bindings -> loc_binding
** Conflict on AND

State 691:
## Known stack suffix:
## loc_binding AND
## LR(1) items:
loc_bindings -> loc_binding AND . loc_bindings [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 692
-- On loc_binding shift to state 690
## Reductions:

State 692:
## Known stack suffix:
## loc_binding AND loc_bindings
## LR(1) items:
loc_bindings -> loc_binding AND loc_bindings . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_bindings -> loc_binding AND loc_bindings

State 693:
## Known stack suffix:
## LBRACERBRACE
## LR(1) items:
process0 -> LBRACERBRACE . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACERBRACE

State 694:
## Known stack suffix:
## LBRACE
## LR(1) items:
process0 -> LBRACE . process RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> LBRACE . process error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> LBRACE . error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On error shift to state 695
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 858
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error RBRACE
--   reduce production process ->
** Conflict on error

State 695:
## Known stack suffix:
## LBRACE error
## LR(1) items:
process0 -> LBRACE error . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACE error

State 696:
## Known stack suffix:
## LET
## LR(1) items:
process -> LET . JOINDEF def_bindings IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process -> LET . LOC loc_bindings IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process -> LET . rec_flag let_bindings IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 697
-- On JOINDEF shift to state 862
-- On rec_flag shift to state 866
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 697:
## Known stack suffix:
## LET LOC
## LR(1) items:
process -> LET LOC . loc_bindings IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 657
-- On loc_bindings shift to state 698
-- On loc_binding shift to state 821
## Reductions:

State 698:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
process -> LET LOC loc_bindings . IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On IN shift to state 699
## Reductions:

State 699:
## Known stack suffix:
## LET LOC loc_bindings IN
## LR(1) items:
process -> LET LOC loc_bindings IN . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 861
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 700:
## Known stack suffix:
## LBRACE
## LR(1) items:
process -> LBRACE . BAR process RBRACE SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> LBRACE . process RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> LBRACE . process error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> LBRACE . error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On error shift to state 695
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On BAR shift to state 780
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 858
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error RBRACE
--   reduce production process ->
** Conflict on error

State 701:
## Known stack suffix:
## LAZY
## LR(1) items:
proc_expr -> LAZY . simple_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 702
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 702:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
proc_expr -> LAZY simple_expr . [ SEMI ELSE COLONEQUAL ]
simple_expr -> simple_expr . DOT label_longident [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . SHARP label [ SHARP SEMI ELSE DOT COLONEQUAL ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> LAZY simple_expr

State 703:
## Known stack suffix:
## IF
## LR(1) items:
proc_expr -> IF . seq_expr THEN proc_expr ELSE proc_expr [ SEMI COLONEQUAL ]
proc_expr -> IF . seq_expr THEN proc_expr [ SEMI COLONEQUAL ]
process -> IF . expr THEN process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> IF . expr THEN process0 ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 704
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 753
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 704:
## Known stack suffix:
## IF seq_expr
## LR(1) items:
proc_expr -> IF seq_expr . THEN proc_expr ELSE proc_expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> IF seq_expr . THEN proc_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On THEN shift to state 705
## Reductions:

State 705:
## Known stack suffix:
## IF seq_expr THEN
## LR(1) items:
proc_expr -> IF seq_expr THEN . proc_expr ELSE proc_expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> IF seq_expr THEN . proc_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On LPAREN shift to state 640
-- On LIDENT shift to state 290
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 706
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 724
-- On proc_expr shift to state 743
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:

State 706:
## Known stack suffix:
## IF
## LR(1) items:
proc_expr -> IF . seq_expr THEN proc_expr ELSE proc_expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> IF . seq_expr THEN proc_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 704
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 707:
## Known stack suffix:
## FOR
## LR(1) items:
proc_expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR . val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 708
## Reductions:

State 708:
## Known stack suffix:
## FOR val_ident
## LR(1) items:
proc_expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR val_ident . EQUAL seq_expr direction_flag seq_expr DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On EQUAL shift to state 709
## Reductions:

State 709:
## Known stack suffix:
## FOR val_ident EQUAL
## LR(1) items:
proc_expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR val_ident EQUAL . seq_expr direction_flag seq_expr DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 710
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 710:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr
## LR(1) items:
proc_expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On TO shift to state 603
-- On DOWNTO shift to state 604
-- On direction_flag shift to state 711
## Reductions:

State 711:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag
## LR(1) items:
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 712
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 712:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr
## LR(1) items:
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On DO shift to state 713
## Reductions:

State 713:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO
## LR(1) items:
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 714
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 714:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr
## LR(1) items:
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On error shift to state 715
-- On DONE shift to state 716
## Reductions:

State 715:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error
## LR(1) items:
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error . [ SEMI ELSE COLONEQUAL ]
## Transitions:
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error

State 716:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
## LR(1) items:
proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE . [ SEMI ELSE COLONEQUAL ]
## Transitions:
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE

State 717:
## Known stack suffix:
## BEGIN
## LR(1) items:
simple_chan_expr -> BEGIN . seq_expr END [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
simple_chan_expr -> BEGIN . seq_expr error [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 718
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 718:
## Known stack suffix:
## BEGIN seq_expr
## LR(1) items:
simple_chan_expr -> BEGIN seq_expr . END [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
simple_chan_expr -> BEGIN seq_expr . error [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On error shift to state 719
-- On END shift to state 720
## Reductions:

State 719:
## Known stack suffix:
## BEGIN seq_expr error
## LR(1) items:
simple_chan_expr -> BEGIN seq_expr error . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> BEGIN seq_expr error

State 720:
## Known stack suffix:
## BEGIN seq_expr END
## LR(1) items:
simple_chan_expr -> BEGIN seq_expr END . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> BEGIN seq_expr END

State 721:
## Known stack suffix:
## ASSERT
## LR(1) items:
proc_expr -> ASSERT . simple_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 722
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 722:
## Known stack suffix:
## ASSERT simple_expr
## LR(1) items:
proc_expr -> ASSERT simple_expr . [ SEMI ELSE COLONEQUAL ]
simple_expr -> simple_expr . DOT label_longident [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . SHARP label [ SHARP SEMI ELSE DOT COLONEQUAL ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> ASSERT simple_expr

State 723:
## Known stack suffix:
## val_longident
## LR(1) items:
simple_chan_expr -> val_longident . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> val_longident

State 724:
## Known stack suffix:
## simple_chan_expr
## LR(1) items:
proc_expr -> simple_chan_expr . [ SEMI ELSE COLONEQUAL ]
proc_expr -> simple_chan_expr . simple_expr_list [ SEMI ELSE COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT label_longident LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> simple_chan_expr . SHARP label simple_expr [ SEMI ELSE COLONEQUAL ]
simple_chan_expr -> simple_chan_expr . DOT label_longident [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On SHARP shift to state 725
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On DOT shift to state 728
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr_list shift to state 742
-- On simple_expr shift to state 601
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr

State 725:
## Known stack suffix:
## simple_chan_expr SHARP
## LR(1) items:
proc_expr -> simple_chan_expr SHARP . label simple_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 726
## Reductions:

State 726:
## Known stack suffix:
## simple_chan_expr SHARP label
## LR(1) items:
proc_expr -> simple_chan_expr SHARP label . simple_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 727
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 727:
## Known stack suffix:
## simple_chan_expr SHARP label simple_expr
## LR(1) items:
proc_expr -> simple_chan_expr SHARP label simple_expr . [ SEMI ELSE COLONEQUAL ]
simple_expr -> simple_expr . DOT label_longident [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ SHARP SEMI ELSE DOT COLONEQUAL ]
simple_expr -> simple_expr . SHARP label [ SHARP SEMI ELSE DOT COLONEQUAL ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr SHARP label simple_expr

State 728:
## Known stack suffix:
## simple_chan_expr DOT
## LR(1) items:
proc_expr -> simple_chan_expr DOT . label_longident LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> simple_chan_expr DOT . LPAREN seq_expr RPAREN LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> simple_chan_expr DOT . LBRACKET seq_expr RBRACKET LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
simple_chan_expr -> simple_chan_expr DOT . label_longident [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On UIDENT shift to state 3
-- On LPAREN shift to state 729
-- On LIDENT shift to state 61
-- On LBRACKET shift to state 734
-- On mod_longident shift to state 62
-- On label_longident shift to state 739
## Reductions:

State 729:
## Known stack suffix:
## simple_chan_expr DOT LPAREN
## LR(1) items:
proc_expr -> simple_chan_expr DOT LPAREN . seq_expr RPAREN LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 730
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 730:
## Known stack suffix:
## simple_chan_expr DOT LPAREN seq_expr
## LR(1) items:
proc_expr -> simple_chan_expr DOT LPAREN seq_expr . RPAREN LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On RPAREN shift to state 731
## Reductions:

State 731:
## Known stack suffix:
## simple_chan_expr DOT LPAREN seq_expr RPAREN
## LR(1) items:
proc_expr -> simple_chan_expr DOT LPAREN seq_expr RPAREN . LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On LESSMINUS shift to state 732
## Reductions:

State 732:
## Known stack suffix:
## simple_chan_expr DOT LPAREN seq_expr RPAREN LESSMINUS
## LR(1) items:
proc_expr -> simple_chan_expr DOT LPAREN seq_expr RPAREN LESSMINUS . expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 733
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 733:
## Known stack suffix:
## simple_chan_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ SEMI ELSE COMMA COLONEQUAL ]
proc_expr -> simple_chan_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr . [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr

State 734:
## Known stack suffix:
## simple_chan_expr DOT LBRACKET
## LR(1) items:
proc_expr -> simple_chan_expr DOT LBRACKET . seq_expr RBRACKET LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 735
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 735:
## Known stack suffix:
## simple_chan_expr DOT LBRACKET seq_expr
## LR(1) items:
proc_expr -> simple_chan_expr DOT LBRACKET seq_expr . RBRACKET LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On RBRACKET shift to state 736
## Reductions:

State 736:
## Known stack suffix:
## simple_chan_expr DOT LBRACKET seq_expr RBRACKET
## LR(1) items:
proc_expr -> simple_chan_expr DOT LBRACKET seq_expr RBRACKET . LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On LESSMINUS shift to state 737
## Reductions:

State 737:
## Known stack suffix:
## simple_chan_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS
## LR(1) items:
proc_expr -> simple_chan_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS . expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 738
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 738:
## Known stack suffix:
## simple_chan_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ SEMI ELSE COMMA COLONEQUAL ]
proc_expr -> simple_chan_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr . [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr

State 739:
## Known stack suffix:
## simple_chan_expr DOT label_longident
## LR(1) items:
proc_expr -> simple_chan_expr DOT label_longident . LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
simple_chan_expr -> simple_chan_expr DOT label_longident . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On LESSMINUS shift to state 740
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> simple_chan_expr DOT label_longident

State 740:
## Known stack suffix:
## simple_chan_expr DOT label_longident LESSMINUS
## LR(1) items:
proc_expr -> simple_chan_expr DOT label_longident LESSMINUS . expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 741
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 741:
## Known stack suffix:
## simple_chan_expr DOT label_longident LESSMINUS expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ SEMI ELSE COMMA COLONEQUAL ]
proc_expr -> simple_chan_expr DOT label_longident LESSMINUS expr . [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr DOT label_longident LESSMINUS expr

State 742:
## Known stack suffix:
## simple_chan_expr simple_expr_list
## LR(1) items:
proc_expr -> simple_chan_expr simple_expr_list . [ SEMI ELSE COLONEQUAL ]
simple_expr_list -> simple_expr_list . simple_expr [ VARTYPE UIDENT TRUE STRING SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 600
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr simple_expr_list

State 743:
## Known stack suffix:
## IF seq_expr THEN proc_expr
## LR(1) items:
proc_expr -> IF seq_expr THEN proc_expr . ELSE proc_expr [ SEMI ELSE COLONEQUAL ]
proc_expr -> IF seq_expr THEN proc_expr . [ SEMI ELSE COLONEQUAL ]
proc_expr -> proc_expr . COLONEQUAL expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On ELSE shift to state 744
-- On COLONEQUAL shift to state 746
## Reductions:
-- On SEMI ELSE
--   reduce production proc_expr -> IF seq_expr THEN proc_expr
** Conflict on ELSE

State 744:
## Known stack suffix:
## IF seq_expr THEN proc_expr ELSE
## LR(1) items:
proc_expr -> IF seq_expr THEN proc_expr ELSE . proc_expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On LPAREN shift to state 640
-- On LIDENT shift to state 290
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 706
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 724
-- On proc_expr shift to state 745
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:

State 745:
## Known stack suffix:
## IF seq_expr THEN proc_expr ELSE proc_expr
## LR(1) items:
proc_expr -> IF seq_expr THEN proc_expr ELSE proc_expr . [ SEMI ELSE COLONEQUAL ]
proc_expr -> proc_expr . COLONEQUAL expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On COLONEQUAL shift to state 746
## Reductions:
-- On SEMI ELSE
--   reduce production proc_expr -> IF seq_expr THEN proc_expr ELSE proc_expr

State 746:
## Known stack suffix:
## proc_expr COLONEQUAL
## LR(1) items:
proc_expr -> proc_expr COLONEQUAL . expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 747
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 747:
## Known stack suffix:
## proc_expr COLONEQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ SEMI ELSE COMMA COLONEQUAL ]
proc_expr -> proc_expr COLONEQUAL expr . [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> proc_expr COLONEQUAL expr

State 748:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ DOT ]
val_longident -> mod_longident . DOT val_ident [ VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO PREFIXOP OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE EXTERNAL EXCEPTION EOF ELSE DOT COLONEQUAL CLASS CHAR BEGIN ]
## Transitions:
-- On DOT shift to state 524
## Reductions:

State 749:
## Known stack suffix:
## label
## LR(1) items:
proc_expr -> label . LESSMINUS expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On LESSMINUS shift to state 750
## Reductions:

State 750:
## Known stack suffix:
## label LESSMINUS
## LR(1) items:
proc_expr -> label LESSMINUS . expr [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 751
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 751:
## Known stack suffix:
## label LESSMINUS expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ SEMI ELSE COMMA COLONEQUAL ]
proc_expr -> label LESSMINUS expr . [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> label LESSMINUS expr

State 752:
## Known stack suffix:
## constant
## LR(1) items:
simple_chan_expr -> constant . [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE ELSE DOT COLONEQUAL CHAR BEGIN
--   reduce production simple_chan_expr -> constant

State 753:
## Known stack suffix:
## IF expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ THEN SEMI COMMA ]
process -> IF expr . THEN process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> IF expr . THEN process0 ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
seq_expr -> expr . [ THEN ]
seq_expr -> expr . SEMI [ THEN ]
seq_expr -> expr . SEMI seq_expr [ THEN ]
## Transitions:
-- On THEN shift to state 754
-- On SEMI shift to state 612
-- On COMMA shift to state 588
## Reductions:
-- On THEN
--   reduce production seq_expr -> expr
** Conflict on THEN

State 754:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process -> IF expr THEN . process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> IF expr THEN . process0 ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 694
-- On INT shift to state 259
-- On IF shift to state 755
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 773
-- On process0 shift to state 779
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 755:
## Known stack suffix:
## IF
## LR(1) items:
process0 -> IF . expr THEN process0 ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 756
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 756:
## Known stack suffix:
## IF expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ THEN COMMA ]
process0 -> IF expr . THEN process0 ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On THEN shift to state 757
-- On COMMA shift to state 588
## Reductions:

State 757:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process0 -> IF expr THEN . process0 ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 672
-- On INT shift to state 259
-- On IF shift to state 758
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 761
-- On process0 shift to state 771
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 758:
## Known stack suffix:
## IF
## LR(1) items:
process0 -> IF . expr THEN process0 ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 759
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 759:
## Known stack suffix:
## IF expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ THEN COMMA ]
process0 -> IF expr . THEN process0 ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On THEN shift to state 760
-- On COMMA shift to state 588
## Reductions:

State 760:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process0 -> IF expr THEN . process0 ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 672
-- On INT shift to state 259
-- On IF shift to state 758
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 761
-- On process0 shift to state 768
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 761:
## Known stack suffix:
## simple_chan_expr
## LR(1) items:
process0 -> simple_chan_expr . simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> simple_chan_expr . SHARP label simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_chan_expr -> simple_chan_expr . DOT label_longident [ VARTYPE UIDENT TRUE STRING SHARP RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE DOT CHAR BEGIN ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On SHARP shift to state 762
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On DOT shift to state 765
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 767
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 762:
## Known stack suffix:
## simple_chan_expr SHARP
## LR(1) items:
process0 -> simple_chan_expr SHARP . label simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 763
## Reductions:

State 763:
## Known stack suffix:
## simple_chan_expr SHARP label
## LR(1) items:
process0 -> simple_chan_expr SHARP label . simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 764
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 764:
## Known stack suffix:
## simple_chan_expr SHARP label simple_expr
## LR(1) items:
process0 -> simple_chan_expr SHARP label simple_expr . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . SHARP label [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
## Transitions:
-- On DOT shift to state 513
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr SHARP label simple_expr

State 765:
## Known stack suffix:
## simple_chan_expr DOT
## LR(1) items:
simple_chan_expr -> simple_chan_expr DOT . label_longident [ VARTYPE UIDENT TRUE STRING SHARP RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE DOT CHAR BEGIN ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On label_longident shift to state 766
## Reductions:

State 766:
## Known stack suffix:
## simple_chan_expr DOT label_longident
## LR(1) items:
simple_chan_expr -> simple_chan_expr DOT label_longident . [ VARTYPE UIDENT TRUE STRING SHARP RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE DOT CHAR BEGIN ]
## Transitions:
## Reductions:
-- On VARTYPE UIDENT TRUE STRING SHARP RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE DOT CHAR BEGIN
--   reduce production simple_chan_expr -> simple_chan_expr DOT label_longident

State 767:
## Known stack suffix:
## simple_chan_expr simple_expr
## LR(1) items:
process0 -> simple_chan_expr simple_expr . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . SHARP label [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO CLASS BAR AND ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr simple_expr
** Conflict on SHARP

State 768:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process0 -> IF expr THEN process0 . ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On ELSE shift to state 769
## Reductions:

State 769:
## Known stack suffix:
## IF expr THEN process0 ELSE
## LR(1) items:
process0 -> IF expr THEN process0 ELSE . process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 672
-- On INT shift to state 259
-- On IF shift to state 758
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 761
-- On process0 shift to state 770
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 770:
## Known stack suffix:
## IF expr THEN process0 ELSE process0
## LR(1) items:
process0 -> IF expr THEN process0 ELSE process0 . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> IF expr THEN process0 ELSE process0

State 771:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process0 -> IF expr THEN process0 . ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On ELSE shift to state 772
## Reductions:

State 772:
## Known stack suffix:
## IF expr THEN process0 ELSE
## LR(1) items:
process0 -> IF expr THEN process0 ELSE . process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 694
-- On INT shift to state 259
-- On IF shift to state 755
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 773
-- On process0 shift to state 778
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 773:
## Known stack suffix:
## simple_chan_expr
## LR(1) items:
process0 -> simple_chan_expr . simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> simple_chan_expr . SHARP label simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_chan_expr -> simple_chan_expr . DOT label_longident [ VARTYPE UIDENT TRUE STRING SHARP RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE DOT CHAR BEGIN ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On SHARP shift to state 774
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On DOT shift to state 765
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 777
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 774:
## Known stack suffix:
## simple_chan_expr SHARP
## LR(1) items:
process0 -> simple_chan_expr SHARP . label simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 775
## Reductions:

State 775:
## Known stack suffix:
## simple_chan_expr SHARP label
## LR(1) items:
process0 -> simple_chan_expr SHARP label . simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 776
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 776:
## Known stack suffix:
## simple_chan_expr SHARP label simple_expr
## LR(1) items:
process0 -> simple_chan_expr SHARP label simple_expr . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . SHARP label [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
## Transitions:
-- On DOT shift to state 416
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr SHARP label simple_expr

State 777:
## Known stack suffix:
## simple_chan_expr simple_expr
## LR(1) items:
process0 -> simple_chan_expr simple_expr . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
simple_expr -> simple_expr . SHARP label [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO CLASS BAR AND ]
## Transitions:
-- On SHARP shift to state 413
-- On DOT shift to state 416
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr simple_expr
** Conflict on SHARP

State 778:
## Known stack suffix:
## IF expr THEN process0 ELSE process0
## LR(1) items:
process0 -> IF expr THEN process0 ELSE process0 . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> IF expr THEN process0 ELSE process0

State 779:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process -> IF expr THEN process0 . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> IF expr THEN process0 . ELSE process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On ELSE shift to state 772
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> IF expr THEN process0
** Conflict on ELSE

State 780:
## Known stack suffix:
## LBRACE BAR
## LR(1) items:
process -> LBRACE BAR . process RBRACE SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 854
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On RBRACE
--   reduce production process ->

State 781:
## Known stack suffix:
## LET
## LR(1) items:
process -> LET . JOINDEF def_bindings IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process -> LET . LOC loc_bindings IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process -> LET . rec_flag let_bindings IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 782
-- On JOINDEF shift to state 824
-- On rec_flag shift to state 833
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 782:
## Known stack suffix:
## LET LOC
## LR(1) items:
process -> LET LOC . loc_bindings IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 657
-- On loc_bindings shift to state 783
-- On loc_binding shift to state 821
## Reductions:

State 783:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
process -> LET LOC loc_bindings . IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On IN shift to state 784
## Reductions:

State 784:
## Known stack suffix:
## LET LOC loc_bindings IN
## LR(1) items:
process -> LET LOC loc_bindings IN . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 820
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 785:
## Known stack suffix:
## LBRACE
## LR(1) items:
process -> LBRACE . BAR process RBRACE SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> LBRACE . process RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> LBRACE . process error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> LBRACE . error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On error shift to state 673
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On BAR shift to state 786
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 817
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error RBRACE
--   reduce production process ->
** Conflict on error

State 786:
## Known stack suffix:
## LBRACE BAR
## LR(1) items:
process -> LBRACE BAR . process RBRACE SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 802
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On RBRACE
--   reduce production process ->

State 787:
## Known stack suffix:
## IF
## LR(1) items:
proc_expr -> IF . seq_expr THEN proc_expr ELSE proc_expr [ SEMI COLONEQUAL ]
proc_expr -> IF . seq_expr THEN proc_expr [ SEMI COLONEQUAL ]
process -> IF . expr THEN process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> IF . expr THEN process0 ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 704
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 788
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 788:
## Known stack suffix:
## IF expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ THEN SEMI COMMA ]
process -> IF expr . THEN process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> IF expr . THEN process0 ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
seq_expr -> expr . [ THEN ]
seq_expr -> expr . SEMI [ THEN ]
seq_expr -> expr . SEMI seq_expr [ THEN ]
## Transitions:
-- On THEN shift to state 789
-- On SEMI shift to state 612
-- On COMMA shift to state 588
## Reductions:
-- On THEN
--   reduce production seq_expr -> expr
** Conflict on THEN

State 789:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
process -> IF expr THEN . process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> IF expr THEN . process0 ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 672
-- On INT shift to state 259
-- On IF shift to state 758
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 761
-- On process0 shift to state 790
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 790:
## Known stack suffix:
## IF expr THEN process0
## LR(1) items:
process -> IF expr THEN process0 . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> IF expr THEN process0 . ELSE process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On ELSE shift to state 769
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> IF expr THEN process0
** Conflict on ELSE

State 791:
## Known stack suffix:
## simple_chan_expr
## LR(1) items:
proc_expr -> simple_chan_expr . [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . simple_expr_list [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT label_longident LESSMINUS expr [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . SHARP label simple_expr [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr . simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> simple_chan_expr . SHARP label simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_chan_expr -> simple_chan_expr . DOT label_longident [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On SHARP shift to state 792
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On DOT shift to state 728
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr_list shift to state 742
-- On simple_expr shift to state 795
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:
-- On SEMI COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr

State 792:
## Known stack suffix:
## simple_chan_expr SHARP
## LR(1) items:
proc_expr -> simple_chan_expr SHARP . label simple_expr [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr SHARP . label simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 793
## Reductions:

State 793:
## Known stack suffix:
## simple_chan_expr SHARP label
## LR(1) items:
proc_expr -> simple_chan_expr SHARP label . simple_expr [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr SHARP label . simple_expr [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On STRING shift to state 8
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On NEW shift to state 15
-- On LPAREN shift to state 22
-- On LIDENT shift to state 247
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 400
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 794
-- On mod_longident shift to state 523
-- On constr_longident shift to state 526
-- On constant shift to state 527
## Reductions:

State 794:
## Known stack suffix:
## simple_chan_expr SHARP label simple_expr
## LR(1) items:
proc_expr -> simple_chan_expr SHARP label simple_expr . [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr SHARP label simple_expr . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . SHARP label [ TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS BAR AND ]
## Transitions:
-- On DOT shift to state 513
## Reductions:
-- On SEMI COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr SHARP label simple_expr
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr SHARP label simple_expr

State 795:
## Known stack suffix:
## simple_chan_expr simple_expr
## LR(1) items:
process0 -> simple_chan_expr simple_expr . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . SHARP label [ VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr_list -> simple_expr . [ VARTYPE UIDENT TRUE STRING SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On SHARP shift to state 511
-- On DOT shift to state 513
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr simple_expr
-- On VARTYPE UIDENT TRUE STRING SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE COLONEQUAL CHAR BEGIN
--   reduce production simple_expr_list -> simple_expr
** Conflict on SHARP

State 796:
## Known stack suffix:
## process0
## LR(1) items:
process -> process0 . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process -> process0 . BAR process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 797
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> process0
** Conflict on BAR

State 797:
## Known stack suffix:
## process0 BAR
## LR(1) items:
process -> process0 BAR . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 798
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 798:
## Known stack suffix:
## process0 BAR process
## LR(1) items:
process -> process0 BAR process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> process0 BAR process

State 799:
## Known stack suffix:
## proc_expr
## LR(1) items:
proc_expr -> proc_expr . COLONEQUAL expr [ SEMI COLONEQUAL ]
process -> proc_expr . SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On SEMI shift to state 800
-- On COLONEQUAL shift to state 746
## Reductions:

State 800:
## Known stack suffix:
## proc_expr SEMI
## LR(1) items:
process -> proc_expr SEMI . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 801
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 801:
## Known stack suffix:
## proc_expr SEMI process
## LR(1) items:
process -> proc_expr SEMI process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> proc_expr SEMI process

State 802:
## Known stack suffix:
## LBRACE BAR process
## LR(1) items:
process -> LBRACE BAR process . RBRACE SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 803
## Reductions:

State 803:
## Known stack suffix:
## LBRACE BAR process RBRACE
## LR(1) items:
process -> LBRACE BAR process RBRACE . SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On SEMI shift to state 804
## Reductions:

State 804:
## Known stack suffix:
## LBRACE BAR process RBRACE SEMI
## LR(1) items:
process -> LBRACE BAR process RBRACE SEMI . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 805
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 805:
## Known stack suffix:
## LBRACE BAR process RBRACE SEMI process
## LR(1) items:
process -> LBRACE BAR process RBRACE SEMI process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> LBRACE BAR process RBRACE SEMI process

State 806:
## Known stack suffix:
## simple_chan_expr
## LR(1) items:
proc_expr -> simple_chan_expr . [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . simple_expr_list [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT label_longident LESSMINUS expr [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT LPAREN seq_expr RPAREN LESSMINUS expr [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . DOT LBRACKET seq_expr RBRACKET LESSMINUS expr [ SEMI COLONEQUAL ]
proc_expr -> simple_chan_expr . SHARP label simple_expr [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr . simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> simple_chan_expr . SHARP label simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_chan_expr -> simple_chan_expr . DOT label_longident [ VARTYPE UIDENT TRUE STRING SHARP SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE DOT COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On SHARP shift to state 807
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On DOT shift to state 728
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr_list shift to state 742
-- On simple_expr shift to state 810
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On SEMI COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr

State 807:
## Known stack suffix:
## simple_chan_expr SHARP
## LR(1) items:
proc_expr -> simple_chan_expr SHARP . label simple_expr [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr SHARP . label simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 808
## Reductions:

State 808:
## Known stack suffix:
## simple_chan_expr SHARP label
## LR(1) items:
proc_expr -> simple_chan_expr SHARP label . simple_expr [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr SHARP label . simple_expr [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 809
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 809:
## Known stack suffix:
## simple_chan_expr SHARP label simple_expr
## LR(1) items:
proc_expr -> simple_chan_expr SHARP label simple_expr . [ SEMI COLONEQUAL ]
process0 -> simple_chan_expr SHARP label simple_expr . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ error TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS BAR AND ]
simple_expr -> simple_expr . SHARP label [ error TYPE SHARP SEMISEMI SEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS BAR AND ]
## Transitions:
-- On DOT shift to state 416
## Reductions:
-- On SEMI COLONEQUAL
--   reduce production proc_expr -> simple_chan_expr SHARP label simple_expr
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr SHARP label simple_expr

State 810:
## Known stack suffix:
## simple_chan_expr simple_expr
## LR(1) items:
process0 -> simple_chan_expr simple_expr . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_expr -> simple_expr . DOT label_longident [ error VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr -> simple_expr . SHARP label [ error VARTYPE UIDENT TYPE TRUE STRING SHARP SEMISEMI SEMI RELOCINFO RBRACE PREFIXOP OR OPEN NEW MODULE LPAREN LIDENT LET LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT IN FLOAT FALSE EXTERNAL EXCEPTION EOF END ELSE DOT DO COLONEQUAL CLASS CHAR BEGIN BAR AND ]
simple_expr_list -> simple_expr . [ VARTYPE UIDENT TRUE STRING SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE COLONEQUAL CHAR BEGIN ]
## Transitions:
-- On SHARP shift to state 413
-- On DOT shift to state 416
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> simple_chan_expr simple_expr
-- On VARTYPE UIDENT TRUE STRING SEMI RELOCINFO PREFIXOP NEW LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT FLOAT FALSE COLONEQUAL CHAR BEGIN
--   reduce production simple_expr_list -> simple_expr
** Conflict on SHARP

State 811:
## Known stack suffix:
## process0
## LR(1) items:
process -> process0 . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process -> process0 . BAR process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 812
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> process0
** Conflict on BAR

State 812:
## Known stack suffix:
## process0 BAR
## LR(1) items:
process -> process0 BAR . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 813
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 813:
## Known stack suffix:
## process0 BAR process
## LR(1) items:
process -> process0 BAR process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> process0 BAR process

State 814:
## Known stack suffix:
## proc_expr
## LR(1) items:
proc_expr -> proc_expr . COLONEQUAL expr [ SEMI COLONEQUAL ]
process -> proc_expr . SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On SEMI shift to state 815
-- On COLONEQUAL shift to state 746
## Reductions:

State 815:
## Known stack suffix:
## proc_expr SEMI
## LR(1) items:
process -> proc_expr SEMI . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 816
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 816:
## Known stack suffix:
## proc_expr SEMI process
## LR(1) items:
process -> proc_expr SEMI process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> proc_expr SEMI process

State 817:
## Known stack suffix:
## LBRACE process
## LR(1) items:
process0 -> LBRACE process . RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> LBRACE process . error [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On error shift to state 818
-- On RBRACE shift to state 819
## Reductions:

State 818:
## Known stack suffix:
## LBRACE process error
## LR(1) items:
process0 -> LBRACE process error . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACE process error

State 819:
## Known stack suffix:
## LBRACE process RBRACE
## LR(1) items:
process0 -> LBRACE process RBRACE . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACE process RBRACE

State 820:
## Known stack suffix:
## LET LOC loc_bindings IN process
## LR(1) items:
process -> LET LOC loc_bindings IN process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> LET LOC loc_bindings IN process

State 821:
## Known stack suffix:
## loc_binding
## LR(1) items:
loc_bindings -> loc_binding . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
loc_bindings -> loc_binding . AND loc_bindings [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On AND shift to state 822
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_bindings -> loc_binding
** Conflict on AND

State 822:
## Known stack suffix:
## loc_binding AND
## LR(1) items:
loc_bindings -> loc_binding AND . loc_bindings [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On LIDENT shift to state 657
-- On loc_bindings shift to state 823
-- On loc_binding shift to state 821
## Reductions:

State 823:
## Known stack suffix:
## loc_binding AND loc_bindings
## LR(1) items:
loc_bindings -> loc_binding AND loc_bindings . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_bindings -> loc_binding AND loc_bindings

State 824:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
process -> LET JOINDEF . def_bindings IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 664
-- On simple_def_binding shift to state 825
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
-- On def_bindings shift to state 827
-- On def_binding shift to state 832
## Reductions:

State 825:
## Known stack suffix:
## simple_def_binding
## LR(1) items:
def_binding -> simple_def_binding . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_def_binding -> simple_def_binding . OR def_pattern [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On OR shift to state 324
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production def_binding -> simple_def_binding
** Conflict on OR

State 826:
## Known stack suffix:
## def_pattern
## LR(1) items:
simple_def_binding -> def_pattern . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production simple_def_binding -> def_pattern

State 827:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ IN AND ]
process -> LET JOINDEF def_bindings . IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On IN shift to state 828
-- On AND shift to state 830
## Reductions:

State 828:
## Known stack suffix:
## LET JOINDEF def_bindings IN
## LR(1) items:
process -> LET JOINDEF def_bindings IN . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 829
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 829:
## Known stack suffix:
## LET JOINDEF def_bindings IN process
## LR(1) items:
process -> LET JOINDEF def_bindings IN process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> LET JOINDEF def_bindings IN process

State 830:
## Known stack suffix:
## def_bindings AND
## LR(1) items:
def_bindings -> def_bindings AND . def_binding [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 664
-- On simple_def_binding shift to state 825
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
-- On def_binding shift to state 831
## Reductions:

State 831:
## Known stack suffix:
## def_bindings AND def_binding
## LR(1) items:
def_bindings -> def_bindings AND def_binding . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production def_bindings -> def_bindings AND def_binding

State 832:
## Known stack suffix:
## def_binding
## LR(1) items:
def_bindings -> def_binding . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production def_bindings -> def_binding

State 833:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
process -> LET rec_flag . let_bindings IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 834
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 843
-- On mod_longident shift to state 306
-- On let_bindings shift to state 848
-- On let_binding shift to state 853
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 834:
## Known stack suffix:
## val_ident
## LR(1) items:
let_binding -> val_ident . fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
simple_pattern -> val_ident . [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EQUAL shift to state 835
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On type_constraint shift to state 837
-- On simple_pattern shift to state 840
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On fun_binding shift to state 842
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On EQUAL COMMA COLONEQUAL COLONCOLON BAR AS
--   reduce production simple_pattern -> val_ident
** Conflict on EQUAL

State 835:
## Known stack suffix:
## EQUAL
## LR(1) items:
fun_binding -> EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 836
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 836:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
fun_binding -> EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production fun_binding -> EQUAL seq_expr

State 837:
## Known stack suffix:
## type_constraint
## LR(1) items:
fun_binding -> type_constraint . EQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 838
## Reductions:

State 838:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
fun_binding -> type_constraint EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 839
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 839:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
fun_binding -> type_constraint EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production fun_binding -> type_constraint EQUAL seq_expr

State 840:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_binding -> simple_pattern . fun_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EQUAL shift to state 835
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On type_constraint shift to state 837
-- On simple_pattern shift to state 840
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On fun_binding shift to state 841
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 841:
## Known stack suffix:
## simple_pattern fun_binding
## LR(1) items:
fun_binding -> simple_pattern fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production fun_binding -> simple_pattern fun_binding

State 842:
## Known stack suffix:
## val_ident fun_binding
## LR(1) items:
let_binding -> val_ident fun_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production let_binding -> val_ident fun_binding

State 843:
## Known stack suffix:
## pattern
## LR(1) items:
let_binding -> pattern . EQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
let_binding -> pattern . COLONEQUAL seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
pattern -> pattern . AS val_ident [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On EQUAL shift to state 844
-- On COMMA shift to state 622
-- On COLONEQUAL shift to state 846
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
## Reductions:

State 844:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
let_binding -> pattern EQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 845
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 845:
## Known stack suffix:
## pattern EQUAL seq_expr
## LR(1) items:
let_binding -> pattern EQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production let_binding -> pattern EQUAL seq_expr

State 846:
## Known stack suffix:
## pattern COLONEQUAL
## LR(1) items:
let_binding -> pattern COLONEQUAL . seq_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 847
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 847:
## Known stack suffix:
## pattern COLONEQUAL seq_expr
## LR(1) items:
let_binding -> pattern COLONEQUAL seq_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production let_binding -> pattern COLONEQUAL seq_expr

State 848:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
process -> LET rec_flag let_bindings . IN process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On IN shift to state 849
-- On AND shift to state 851
## Reductions:

State 849:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
process -> LET rec_flag let_bindings IN . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 850
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 850:
## Known stack suffix:
## LET rec_flag let_bindings IN process
## LR(1) items:
process -> LET rec_flag let_bindings IN process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> LET rec_flag let_bindings IN process

State 851:
## Known stack suffix:
## let_bindings AND
## LR(1) items:
let_bindings -> let_bindings AND . let_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 834
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 843
-- On mod_longident shift to state 306
-- On let_binding shift to state 852
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 852:
## Known stack suffix:
## let_bindings AND let_binding
## LR(1) items:
let_bindings -> let_bindings AND let_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production let_bindings -> let_bindings AND let_binding

State 853:
## Known stack suffix:
## let_binding
## LR(1) items:
let_bindings -> let_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production let_bindings -> let_binding

State 854:
## Known stack suffix:
## LBRACE BAR process
## LR(1) items:
process -> LBRACE BAR process . RBRACE SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 855
## Reductions:

State 855:
## Known stack suffix:
## LBRACE BAR process RBRACE
## LR(1) items:
process -> LBRACE BAR process RBRACE . SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On SEMI shift to state 856
## Reductions:

State 856:
## Known stack suffix:
## LBRACE BAR process RBRACE SEMI
## LR(1) items:
process -> LBRACE BAR process RBRACE SEMI . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 857
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 857:
## Known stack suffix:
## LBRACE BAR process RBRACE SEMI process
## LR(1) items:
process -> LBRACE BAR process RBRACE SEMI process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> LBRACE BAR process RBRACE SEMI process

State 858:
## Known stack suffix:
## LBRACE process
## LR(1) items:
process0 -> LBRACE process . RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> LBRACE process . error [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On error shift to state 859
-- On RBRACE shift to state 860
## Reductions:

State 859:
## Known stack suffix:
## LBRACE process error
## LR(1) items:
process0 -> LBRACE process error . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACE process error

State 860:
## Known stack suffix:
## LBRACE process RBRACE
## LR(1) items:
process0 -> LBRACE process RBRACE . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process0 -> LBRACE process RBRACE

State 861:
## Known stack suffix:
## LET LOC loc_bindings IN process
## LR(1) items:
process -> LET LOC loc_bindings IN process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> LET LOC loc_bindings IN process

State 862:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
process -> LET JOINDEF . def_bindings IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 664
-- On simple_def_binding shift to state 825
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
-- On def_bindings shift to state 863
-- On def_binding shift to state 832
## Reductions:

State 863:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ IN AND ]
process -> LET JOINDEF def_bindings . IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On IN shift to state 864
-- On AND shift to state 830
## Reductions:

State 864:
## Known stack suffix:
## LET JOINDEF def_bindings IN
## LR(1) items:
process -> LET JOINDEF def_bindings IN . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 865
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 865:
## Known stack suffix:
## LET JOINDEF def_bindings IN process
## LR(1) items:
process -> LET JOINDEF def_bindings IN process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> LET JOINDEF def_bindings IN process

State 866:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
process -> LET rec_flag . let_bindings IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 834
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 843
-- On mod_longident shift to state 306
-- On let_bindings shift to state 867
-- On let_binding shift to state 853
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 867:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ IN AND ]
process -> LET rec_flag let_bindings . IN process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On IN shift to state 868
-- On AND shift to state 851
## Reductions:

State 868:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
process -> LET rec_flag let_bindings IN . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 869
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 869:
## Known stack suffix:
## LET rec_flag let_bindings IN process
## LR(1) items:
process -> LET rec_flag let_bindings IN process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> LET rec_flag let_bindings IN process

State 870:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER process0
## LR(1) items:
join_match_action -> WHEN seq_expr MINUSGREATER process0 . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production join_match_action -> WHEN seq_expr MINUSGREATER process0

State 871:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
join_match_action -> MINUSGREATER . process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 694
-- On INT shift to state 259
-- On IF shift to state 755
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 773
-- On process0 shift to state 872
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 872:
## Known stack suffix:
## MINUSGREATER process0
## LR(1) items:
join_match_action -> MINUSGREATER process0 . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production join_match_action -> MINUSGREATER process0

State 873:
## Known stack suffix:
## pattern join_match_action
## LR(1) items:
join_match_cases -> pattern join_match_action . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production join_match_cases -> pattern join_match_action

State 874:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar join_match_cases
## LR(1) items:
join_match_cases -> join_match_cases . BAR pattern join_match_action [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
process0 -> MATCH seq_expr WITH opt_bar join_match_cases . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 875
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS AND
--   reduce production process0 -> MATCH seq_expr WITH opt_bar join_match_cases

State 875:
## Known stack suffix:
## join_match_cases BAR
## LR(1) items:
join_match_cases -> join_match_cases BAR . pattern join_match_action [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 876
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 876:
## Known stack suffix:
## join_match_cases BAR pattern
## LR(1) items:
join_match_cases -> join_match_cases BAR pattern . join_match_action [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 685
-- On MINUSGREATER shift to state 871
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On join_match_action shift to state 877
## Reductions:

State 877:
## Known stack suffix:
## join_match_cases BAR pattern join_match_action
## LR(1) items:
join_match_cases -> join_match_cases BAR pattern join_match_action . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production join_match_cases -> join_match_cases BAR pattern join_match_action

State 878:
## Known stack suffix:
## DO process0
## LR(1) items:
loc_init -> DO process0 . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_init -> DO process0

State 879:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init . RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 880
## Reductions:

State 880:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE

State 881:
## Known stack suffix:
## LIDENT LBRACE
## LR(1) items:
def_binding -> LIDENT LBRACE . simple_def_binding loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ EQUAL BAR ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ EQUAL BAR ]
## Transitions:
-- On UIDENT shift to state 882
-- On LIDENT shift to state 883
-- On simple_def_binding shift to state 884
-- On mod_longident shift to state 62
-- On lbl_pattern_list shift to state 255
-- On label_longident shift to state 114
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
## Reductions:

State 882:
## Known stack suffix:
## UIDENT
## LR(1) items:
join_pattern -> UIDENT . simple_pattern [ EQUAL BAR ]
mod_longident -> UIDENT . [ DOT ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 305
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On DOT
--   reduce production mod_longident -> UIDENT

State 883:
## Known stack suffix:
## LIDENT
## LR(1) items:
join_pattern -> LIDENT . simple_pattern [ EQUAL BAR ]
join_pattern -> LIDENT . PREFIXOP simple_pattern [ EQUAL BAR ]
label_longident -> LIDENT . [ EQUAL ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On PREFIXOP shift to state 311
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 322
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On EQUAL
--   reduce production label_longident -> LIDENT

State 884:
## Known stack suffix:
## LIDENT LBRACE simple_def_binding
## LR(1) items:
def_binding -> LIDENT LBRACE simple_def_binding . loc_init RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
simple_def_binding -> simple_def_binding . OR def_pattern [ RBRACE OR DO ]
## Transitions:
-- On OR shift to state 324
-- On DO shift to state 670
-- On loc_init shift to state 885
## Reductions:
-- On RBRACE
--   reduce production loc_init ->

State 885:
## Known stack suffix:
## LIDENT LBRACE simple_def_binding loc_init
## LR(1) items:
def_binding -> LIDENT LBRACE simple_def_binding loc_init . RBRACE [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 886
## Reductions:

State 886:
## Known stack suffix:
## LIDENT LBRACE simple_def_binding loc_init RBRACE
## LR(1) items:
def_binding -> LIDENT LBRACE simple_def_binding loc_init RBRACE . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production def_binding -> LIDENT LBRACE simple_def_binding loc_init RBRACE

State 887:
## Known stack suffix:
## JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
loc_defs -> JOINDEF def_bindings . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On AND shift to state 830
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_defs -> JOINDEF def_bindings
** Conflict on AND

State 888:
## Known stack suffix:
## LIDENT loc_modules loc_defs
## LR(1) items:
loc_binding -> LIDENT loc_modules loc_defs . loc_init [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On DO shift to state 670
-- On loc_init shift to state 889
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_init ->
** Conflict on DO

State 889:
## Known stack suffix:
## LIDENT loc_modules loc_defs loc_init
## LR(1) items:
loc_binding -> LIDENT loc_modules loc_defs loc_init . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production loc_binding -> LIDENT loc_modules loc_defs loc_init

State 890:
## Known stack suffix:
## LOC loc_bindings
## LR(1) items:
process0 -> LOC loc_bindings . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> LOC loc_bindings

State 891:
## Known stack suffix:
## LBRACE BAR process
## LR(1) items:
expr0 -> LBRACE BAR process . RBRACE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RBRACE shift to state 892
## Reductions:

State 892:
## Known stack suffix:
## LBRACE BAR process RBRACE
## LR(1) items:
expr0 -> LBRACE BAR process RBRACE . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LBRACE BAR process RBRACE

State 893:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr . direction_flag seq_expr DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On TO shift to state 603
-- On DOWNTO shift to state 604
-- On direction_flag shift to state 894
## Reductions:

State 894:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag . seq_expr DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 895
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 895:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr . DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 896
## Reductions:

State 896:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO . seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 897
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 897:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 898
-- On DONE shift to state 899
## Reductions:

State 898:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr error

State 899:
## Known stack suffix:
## FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
## LR(1) items:
expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE

State 900:
## Known stack suffix:
## MINUSGREATER seq_expr
## LR(1) items:
match_action -> MINUSGREATER seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_action -> MINUSGREATER seq_expr

State 901:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_def -> simple_pattern . fun_def [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHEN shift to state 374
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On MINUSGREATER shift to state 385
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 901
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On match_action shift to state 902
-- On fun_def shift to state 903
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 902:
## Known stack suffix:
## match_action
## LR(1) items:
fun_def -> match_action . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production fun_def -> match_action

State 903:
## Known stack suffix:
## simple_pattern fun_def
## LR(1) items:
fun_def -> simple_pattern fun_def . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production fun_def -> simple_pattern fun_def

State 904:
## Known stack suffix:
## FUN simple_pattern fun_def
## LR(1) items:
expr0 -> FUN simple_pattern fun_def . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FUN simple_pattern fun_def

State 905:
## Known stack suffix:
## label EQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI GREATERRBRACE COMMA ]
label_expr_list -> label EQUAL expr . [ error SEMI GREATERRBRACE ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI GREATERRBRACE
--   reduce production label_expr_list -> label EQUAL expr

State 906:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
match_action -> WHEN seq_expr . MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 907
## Reductions:

State 907:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 908
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 908:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER seq_expr
## LR(1) items:
match_action -> WHEN seq_expr MINUSGREATER seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_action -> WHEN seq_expr MINUSGREATER seq_expr

State 909:
## Known stack suffix:
## pattern match_action
## LR(1) items:
match_cases -> pattern match_action . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_cases -> pattern match_action

State 910:
## Known stack suffix:
## FUNCTION opt_bar match_cases
## LR(1) items:
expr0 -> FUNCTION opt_bar match_cases . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 911
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> FUNCTION opt_bar match_cases

State 911:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . pattern match_action [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 912
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 912:
## Known stack suffix:
## match_cases BAR pattern
## LR(1) items:
match_cases -> match_cases BAR pattern . match_action [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 374
-- On MINUSGREATER shift to state 385
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On match_action shift to state 913
## Reductions:

State 913:
## Known stack suffix:
## match_cases BAR pattern match_action
## LR(1) items:
match_cases -> match_cases BAR pattern match_action . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production match_cases -> match_cases BAR pattern match_action

State 914:
## Known stack suffix:
## LBRACKET expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI RBRACKET ]
simple_expr -> LBRACKET expr_semi_list . opt_semi RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list . opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 915
-- On opt_semi shift to state 917
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 915:
## Known stack suffix:
## expr_semi_list SEMI
## LR(1) items:
expr_semi_list -> expr_semi_list SEMI . expr [ error SEMI RBRACKET BARRBRACKET ]
opt_semi -> SEMI . [ error RBRACKET BARRBRACKET ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 916
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On error RBRACKET BARRBRACKET
--   reduce production opt_semi -> SEMI

State 916:
## Known stack suffix:
## expr_semi_list SEMI expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI RBRACKET COMMA BARRBRACKET ]
expr_semi_list -> expr_semi_list SEMI expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI RBRACKET BARRBRACKET
--   reduce production expr_semi_list -> expr_semi_list SEMI expr

State 917:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi . RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list opt_semi . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 918
-- On RBRACKET shift to state 919
## Reductions:

State 918:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKET expr_semi_list opt_semi error

State 919:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi RBRACKET
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET

State 920:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI RBRACKET COMMA BARRBRACKET ]
expr_semi_list -> expr . [ error SEMI RBRACKET BARRBRACKET ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI RBRACKET BARRBRACKET
--   reduce production expr_semi_list -> expr

State 921:
## Known stack suffix:
## IF seq_expr
## LR(1) items:
expr0 -> IF seq_expr . THEN expr ELSE expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF seq_expr . THEN expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On THEN shift to state 922
## Reductions:

State 922:
## Known stack suffix:
## IF seq_expr THEN
## LR(1) items:
expr0 -> IF seq_expr THEN . expr ELSE expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF seq_expr THEN . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 923
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 923:
## Known stack suffix:
## IF seq_expr THEN expr
## LR(1) items:
expr0 -> IF seq_expr THEN expr . ELSE expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> IF seq_expr THEN expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On ELSE shift to state 924
-- On COMMA shift to state 471
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> IF seq_expr THEN expr
** Conflict on ELSE

State 924:
## Known stack suffix:
## IF seq_expr THEN expr ELSE
## LR(1) items:
expr0 -> IF seq_expr THEN expr ELSE . expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 925
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 925:
## Known stack suffix:
## IF seq_expr THEN expr ELSE expr
## LR(1) items:
expr0 -> IF seq_expr THEN expr ELSE expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr_comma_list -> expr . COMMA expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> IF seq_expr THEN expr ELSE expr

State 926:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI RBRACE COMMA ]
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr . [ error SEMI RBRACE ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI RBRACE
--   reduce production lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr

State 927:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi . RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACE lbl_expr_list opt_semi . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 928
-- On RBRACE shift to state 929
## Reductions:

State 928:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACE lbl_expr_list opt_semi error

State 929:
## Known stack suffix:
## LBRACE lbl_expr_list opt_semi RBRACE
## LR(1) items:
simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACE lbl_expr_list opt_semi RBRACE

State 930:
## Known stack suffix:
## LAZY simple_expr
## LR(1) items:
expr0 -> LAZY simple_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT label_longident [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SHARP shift to state 413
-- On DOT shift to state 416
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LAZY simple_expr

State 931:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR BARRBRACKET . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETBAR BARRBRACKET

State 932:
## Known stack suffix:
## LBRACKETBAR expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI BARRBRACKET ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi BARRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 915
-- On opt_semi shift to state 933
## Reductions:
-- On error BARRBRACKET
--   reduce production opt_semi ->

State 933:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . BARRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 934
-- On BARRBRACKET shift to state 935
## Reductions:

State 934:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi error

State 935:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET

State 936:
## Known stack suffix:
## lbl_expr_list SEMI label_longident EQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ SEMI RBRACE COMMA ]
lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr . [ SEMI RBRACE ]
## Transitions:
-- On COMMA shift to state 588
## Reductions:
-- On SEMI RBRACE
--   reduce production lbl_expr_list -> lbl_expr_list SEMI label_longident EQUAL expr

State 937:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi . RBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RBRACE shift to state 938
## Reductions:

State 938:
## Known stack suffix:
## LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE
## LR(1) items:
simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACE LBRACKET LIDENT RBRACKET lbl_expr_list opt_semi RBRACE

State 939:
## Known stack suffix:
## LBRACE BAR
## LR(1) items:
expr0 -> LBRACE BAR . process RBRACE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 940
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On RBRACE
--   reduce production process ->

State 940:
## Known stack suffix:
## LBRACE BAR process
## LR(1) items:
expr0 -> LBRACE BAR process . RBRACE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RBRACE shift to state 941
## Reductions:

State 941:
## Known stack suffix:
## LBRACE BAR process RBRACE
## LR(1) items:
expr0 -> LBRACE BAR process RBRACE . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LBRACE BAR process RBRACE

State 942:
## Known stack suffix:
## label_expr_list SEMI label EQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI GREATERRBRACE COMMA ]
label_expr_list -> label_expr_list SEMI label EQUAL expr . [ error SEMI GREATERRBRACE ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI GREATERRBRACE
--   reduce production label_expr_list -> label_expr_list SEMI label EQUAL expr

State 943:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi . GREATERRBRACE [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACELESS label_expr_list opt_semi . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 944
-- On GREATERRBRACE shift to state 945
## Reductions:

State 944:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi error
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACELESS label_expr_list opt_semi error

State 945:
## Known stack suffix:
## LBRACELESS label_expr_list opt_semi GREATERRBRACE
## LR(1) items:
simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACELESS label_expr_list opt_semi GREATERRBRACE

State 946:
## Known stack suffix:
## LBRACKET expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI RBRACKET ]
simple_expr -> LBRACKET expr_semi_list . opt_semi RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list . opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 915
-- On opt_semi shift to state 947
## Reductions:
-- On error RBRACKET
--   reduce production opt_semi ->

State 947:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi . RBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKET expr_semi_list opt_semi . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 948
-- On RBRACKET shift to state 949
## Reductions:

State 948:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKET expr_semi_list opt_semi error

State 949:
## Known stack suffix:
## LBRACKET expr_semi_list opt_semi RBRACKET
## LR(1) items:
simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKET expr_semi_list opt_semi RBRACKET

State 950:
## Known stack suffix:
## LBRACKETBAR BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR BARRBRACKET . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETBAR BARRBRACKET

State 951:
## Known stack suffix:
## LBRACKETBAR expr_semi_list
## LR(1) items:
expr_semi_list -> expr_semi_list . SEMI expr [ error SEMI BARRBRACKET ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi BARRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list . opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On SEMI shift to state 915
-- On opt_semi shift to state 952
## Reductions:
-- On error BARRBRACKET
--   reduce production opt_semi ->

State 952:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . BARRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETBAR expr_semi_list opt_semi . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 953
-- On BARRBRACKET shift to state 954
## Reductions:

State 953:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi error
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi error

State 954:
## Known stack suffix:
## LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
## LR(1) items:
simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETBAR expr_semi_list opt_semi BARRBRACKET

State 955:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS GREATERRBRACKET . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETLESS GREATERRBRACKET

State 956:
## Known stack suffix:
## stream_expr_component
## LR(1) items:
stream_expr -> stream_expr_component . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production stream_expr -> stream_expr_component

State 957:
## Known stack suffix:
## LBRACKETLESS stream_expr
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr . opt_semi GREATERRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr . opt_semi error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
stream_expr -> stream_expr . SEMI stream_expr_component [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 958
-- On opt_semi shift to state 961
## Reductions:
-- On error GREATERRBRACKET
--   reduce production opt_semi ->

State 958:
## Known stack suffix:
## stream_expr SEMI
## LR(1) items:
opt_semi -> SEMI . [ error GREATERRBRACKET ]
stream_expr -> stream_expr SEMI . stream_expr_component [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On QUOTE shift to state 329
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On stream_expr_component shift to state 959
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 960
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On error GREATERRBRACKET
--   reduce production opt_semi -> SEMI

State 959:
## Known stack suffix:
## stream_expr SEMI stream_expr_component
## LR(1) items:
stream_expr -> stream_expr SEMI stream_expr_component . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production stream_expr -> stream_expr SEMI stream_expr_component

State 960:
## Known stack suffix:
## expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI GREATERRBRACKET COMMA ]
stream_expr_component -> expr . [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production stream_expr_component -> expr

State 961:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi . GREATERRBRACKET [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr opt_semi . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 962
-- On GREATERRBRACKET shift to state 963
## Reductions:

State 962:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi error
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi error

State 963:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET

State 964:
## Known stack suffix:
## LET LOC loc_bindings IN seq_expr
## LR(1) items:
expr0 -> LET LOC loc_bindings IN seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET LOC loc_bindings IN seq_expr

State 965:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
expr0 -> LET JOINDEF . def_bindings IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 310
-- On simple_def_binding shift to state 966
-- On join_pattern shift to state 968
-- On def_pattern shift to state 974
-- On def_bindings shift to state 975
-- On def_binding shift to state 982
## Reductions:

State 966:
## Known stack suffix:
## simple_def_binding
## LR(1) items:
def_binding -> simple_def_binding . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_def_binding -> simple_def_binding . OR def_pattern [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On OR shift to state 967
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production def_binding -> simple_def_binding
** Conflict on OR

State 967:
## Known stack suffix:
## simple_def_binding OR
## LR(1) items:
simple_def_binding -> simple_def_binding OR . def_pattern [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 321
-- On join_pattern shift to state 968
-- On def_pattern shift to state 973
## Reductions:

State 968:
## Known stack suffix:
## join_pattern
## LR(1) items:
def_pattern -> join_pattern . EQUAL process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
join_pattern -> join_pattern . BAR join_pattern [ EQUAL BAR ]
## Transitions:
-- On EQUAL shift to state 969
-- On BAR shift to state 971
## Reductions:

State 969:
## Known stack suffix:
## join_pattern EQUAL
## LR(1) items:
def_pattern -> join_pattern EQUAL . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 970
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 970:
## Known stack suffix:
## join_pattern EQUAL process
## LR(1) items:
def_pattern -> join_pattern EQUAL process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production def_pattern -> join_pattern EQUAL process

State 971:
## Known stack suffix:
## join_pattern BAR
## LR(1) items:
join_pattern -> join_pattern BAR . join_pattern [ EQUAL BAR ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 321
-- On join_pattern shift to state 972
## Reductions:

State 972:
## Known stack suffix:
## join_pattern BAR join_pattern
## LR(1) items:
join_pattern -> join_pattern . BAR join_pattern [ EQUAL BAR ]
join_pattern -> join_pattern BAR join_pattern . [ EQUAL BAR ]
## Transitions:
## Reductions:
-- On EQUAL BAR
--   reduce production join_pattern -> join_pattern BAR join_pattern

State 973:
## Known stack suffix:
## simple_def_binding OR def_pattern
## LR(1) items:
simple_def_binding -> simple_def_binding OR def_pattern . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production simple_def_binding -> simple_def_binding OR def_pattern

State 974:
## Known stack suffix:
## def_pattern
## LR(1) items:
simple_def_binding -> def_pattern . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production simple_def_binding -> def_pattern

State 975:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error IN AND ]
expr0 -> LET JOINDEF def_bindings . IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 976
-- On IN shift to state 977
-- On AND shift to state 980
## Reductions:

State 976:
## Known stack suffix:
## LET JOINDEF def_bindings error
## LR(1) items:
expr0 -> LET JOINDEF def_bindings error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET JOINDEF def_bindings error

State 977:
## Known stack suffix:
## LET JOINDEF def_bindings IN
## LR(1) items:
expr0 -> LET JOINDEF def_bindings IN . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings IN . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 978
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 979
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 978:
## Known stack suffix:
## LET JOINDEF def_bindings IN error
## LR(1) items:
expr0 -> LET JOINDEF def_bindings IN error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET JOINDEF def_bindings IN error

State 979:
## Known stack suffix:
## LET JOINDEF def_bindings IN seq_expr
## LR(1) items:
expr0 -> LET JOINDEF def_bindings IN seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET JOINDEF def_bindings IN seq_expr

State 980:
## Known stack suffix:
## def_bindings AND
## LR(1) items:
def_bindings -> def_bindings AND . def_binding [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 310
-- On simple_def_binding shift to state 966
-- On join_pattern shift to state 968
-- On def_pattern shift to state 974
-- On def_binding shift to state 981
## Reductions:

State 981:
## Known stack suffix:
## def_bindings AND def_binding
## LR(1) items:
def_bindings -> def_bindings AND def_binding . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production def_bindings -> def_bindings AND def_binding

State 982:
## Known stack suffix:
## def_binding
## LR(1) items:
def_bindings -> def_binding . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production def_bindings -> def_binding

State 983:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr0 -> LET rec_flag . let_bindings IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 984
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 993
-- On mod_longident shift to state 306
-- On let_bindings shift to state 998
-- On let_binding shift to state 1005
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 984:
## Known stack suffix:
## val_ident
## LR(1) items:
let_binding -> val_ident . fun_binding [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
simple_pattern -> val_ident . [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EQUAL shift to state 985
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On type_constraint shift to state 987
-- On simple_pattern shift to state 990
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On fun_binding shift to state 992
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On EQUAL COMMA COLONEQUAL COLONCOLON BAR AS
--   reduce production simple_pattern -> val_ident
** Conflict on EQUAL

State 985:
## Known stack suffix:
## EQUAL
## LR(1) items:
fun_binding -> EQUAL . seq_expr [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 986
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 986:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
fun_binding -> EQUAL seq_expr . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production fun_binding -> EQUAL seq_expr

State 987:
## Known stack suffix:
## type_constraint
## LR(1) items:
fun_binding -> type_constraint . EQUAL seq_expr [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 988
## Reductions:

State 988:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
fun_binding -> type_constraint EQUAL . seq_expr [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 989
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 989:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
fun_binding -> type_constraint EQUAL seq_expr . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production fun_binding -> type_constraint EQUAL seq_expr

State 990:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_binding -> simple_pattern . fun_binding [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EQUAL shift to state 985
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On type_constraint shift to state 987
-- On simple_pattern shift to state 990
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On fun_binding shift to state 991
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 991:
## Known stack suffix:
## simple_pattern fun_binding
## LR(1) items:
fun_binding -> simple_pattern fun_binding . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production fun_binding -> simple_pattern fun_binding

State 992:
## Known stack suffix:
## val_ident fun_binding
## LR(1) items:
let_binding -> val_ident fun_binding . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production let_binding -> val_ident fun_binding

State 993:
## Known stack suffix:
## pattern
## LR(1) items:
let_binding -> pattern . EQUAL seq_expr [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
let_binding -> pattern . COLONEQUAL seq_expr [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
pattern -> pattern . AS val_ident [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ EQUAL COMMA COLONEQUAL COLONCOLON BAR AS ]
## Transitions:
-- On EQUAL shift to state 994
-- On COMMA shift to state 622
-- On COLONEQUAL shift to state 996
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
## Reductions:

State 994:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
let_binding -> pattern EQUAL . seq_expr [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 995
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 995:
## Known stack suffix:
## pattern EQUAL seq_expr
## LR(1) items:
let_binding -> pattern EQUAL seq_expr . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production let_binding -> pattern EQUAL seq_expr

State 996:
## Known stack suffix:
## pattern COLONEQUAL
## LR(1) items:
let_binding -> pattern COLONEQUAL . seq_expr [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 997
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 997:
## Known stack suffix:
## pattern COLONEQUAL seq_expr
## LR(1) items:
let_binding -> pattern COLONEQUAL seq_expr . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production let_binding -> pattern COLONEQUAL seq_expr

State 998:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr0 -> LET rec_flag let_bindings . IN seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . IN error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error IN AND ]
## Transitions:
-- On error shift to state 999
-- On IN shift to state 1000
-- On AND shift to state 1003
## Reductions:

State 999:
## Known stack suffix:
## LET rec_flag let_bindings error
## LR(1) items:
expr0 -> LET rec_flag let_bindings error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET rec_flag let_bindings error

State 1000:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
expr0 -> LET rec_flag let_bindings IN . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings IN . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1001
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1002
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1001:
## Known stack suffix:
## LET rec_flag let_bindings IN error
## LR(1) items:
expr0 -> LET rec_flag let_bindings IN error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET rec_flag let_bindings IN error

State 1002:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
expr0 -> LET rec_flag let_bindings IN seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET rec_flag let_bindings IN seq_expr

State 1003:
## Known stack suffix:
## let_bindings AND
## LR(1) items:
let_bindings -> let_bindings AND . let_binding [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 984
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 993
-- On mod_longident shift to state 306
-- On let_binding shift to state 1004
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1004:
## Known stack suffix:
## let_bindings AND let_binding
## LR(1) items:
let_bindings -> let_bindings AND let_binding . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production let_bindings -> let_bindings AND let_binding

State 1005:
## Known stack suffix:
## let_binding
## LR(1) items:
let_bindings -> let_binding . [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END CLASS AND
--   reduce production let_bindings -> let_binding

State 1006:
## Known stack suffix:
## QUOTE expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI GREATERRBRACKET COMMA ]
stream_expr_component -> QUOTE expr . [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production stream_expr_component -> QUOTE expr

State 1007:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS GREATERRBRACKET . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETLESS GREATERRBRACKET

State 1008:
## Known stack suffix:
## LBRACKETLESS stream_expr
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr . opt_semi GREATERRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr . opt_semi error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
stream_expr -> stream_expr . SEMI stream_expr_component [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 958
-- On opt_semi shift to state 1009
## Reductions:
-- On error GREATERRBRACKET
--   reduce production opt_semi ->

State 1009:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi . GREATERRBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LBRACKETLESS stream_expr opt_semi . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1010
-- On GREATERRBRACKET shift to state 1011
## Reductions:

State 1010:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi error
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi error

State 1011:
## Known stack suffix:
## LBRACKETLESS stream_expr opt_semi GREATERRBRACKET
## LR(1) items:
simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LBRACKETLESS stream_expr opt_semi GREATERRBRACKET

State 1012:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
process0 -> MATCH seq_expr . WITH opt_bar join_match_cases [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WITH shift to state 1013
## Reductions:

State 1013:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
process0 -> MATCH seq_expr WITH . opt_bar join_match_cases [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 1014
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 1014:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
process0 -> MATCH seq_expr WITH opt_bar . join_match_cases [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 1015
-- On mod_longident shift to state 306
-- On join_match_cases shift to state 1023
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1015:
## Known stack suffix:
## pattern
## LR(1) items:
join_match_cases -> pattern . join_match_action [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 1016
-- On MINUSGREATER shift to state 1020
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On join_match_action shift to state 1022
## Reductions:

State 1016:
## Known stack suffix:
## WHEN
## LR(1) items:
join_match_action -> WHEN . seq_expr MINUSGREATER process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1017
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1017:
## Known stack suffix:
## WHEN seq_expr
## LR(1) items:
join_match_action -> WHEN seq_expr . MINUSGREATER process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On MINUSGREATER shift to state 1018
## Reductions:

State 1018:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER
## LR(1) items:
join_match_action -> WHEN seq_expr MINUSGREATER . process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 672
-- On INT shift to state 259
-- On IF shift to state 758
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 761
-- On process0 shift to state 1019
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 1019:
## Known stack suffix:
## WHEN seq_expr MINUSGREATER process0
## LR(1) items:
join_match_action -> WHEN seq_expr MINUSGREATER process0 . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production join_match_action -> WHEN seq_expr MINUSGREATER process0

State 1020:
## Known stack suffix:
## MINUSGREATER
## LR(1) items:
join_match_action -> MINUSGREATER . process0 [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 672
-- On INT shift to state 259
-- On IF shift to state 758
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 761
-- On process0 shift to state 1021
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 1021:
## Known stack suffix:
## MINUSGREATER process0
## LR(1) items:
join_match_action -> MINUSGREATER process0 . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production join_match_action -> MINUSGREATER process0

State 1022:
## Known stack suffix:
## pattern join_match_action
## LR(1) items:
join_match_cases -> pattern join_match_action . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production join_match_cases -> pattern join_match_action

State 1023:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar join_match_cases
## LR(1) items:
join_match_cases -> join_match_cases . BAR pattern join_match_action [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
process0 -> MATCH seq_expr WITH opt_bar join_match_cases . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 1024
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS AND
--   reduce production process0 -> MATCH seq_expr WITH opt_bar join_match_cases

State 1024:
## Known stack suffix:
## join_match_cases BAR
## LR(1) items:
join_match_cases -> join_match_cases BAR . pattern join_match_action [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 1025
-- On mod_longident shift to state 306
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1025:
## Known stack suffix:
## join_match_cases BAR pattern
## LR(1) items:
join_match_cases -> join_match_cases BAR pattern . join_match_action [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
pattern -> pattern . AS val_ident [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ WHEN MINUSGREATER COMMA COLONCOLON BAR AS ]
## Transitions:
-- On WHEN shift to state 1016
-- On MINUSGREATER shift to state 1020
-- On COMMA shift to state 622
-- On COLONCOLON shift to state 369
-- On BAR shift to state 624
-- On AS shift to state 626
-- On join_match_action shift to state 1026
## Reductions:

State 1026:
## Known stack suffix:
## join_match_cases BAR pattern join_match_action
## LR(1) items:
join_match_cases -> join_match_cases BAR pattern join_match_action . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production join_match_cases -> join_match_cases BAR pattern join_match_action

State 1027:
## Known stack suffix:
## join_pattern EQUAL process
## LR(1) items:
def_pattern -> join_pattern EQUAL process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production def_pattern -> join_pattern EQUAL process

State 1028:
## Known stack suffix:
## simple_def_binding OR def_pattern
## LR(1) items:
simple_def_binding -> simple_def_binding OR def_pattern . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production simple_def_binding -> simple_def_binding OR def_pattern

State 1029:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init . RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 1030
## Reductions:

State 1030:
## Known stack suffix:
## LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE
## LR(1) items:
def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production def_binding -> LIDENT LBRACKET lident_comma_list RBRACKET LBRACE simple_def_binding loc_init RBRACE

State 1031:
## Known stack suffix:
## LIDENT LBRACE
## LR(1) items:
def_binding -> LIDENT LBRACE . simple_def_binding loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi RBRACE [ EQUAL BAR ]
simple_pattern -> LBRACE . lbl_pattern_list opt_semi error [ EQUAL BAR ]
## Transitions:
-- On UIDENT shift to state 882
-- On LIDENT shift to state 883
-- On simple_def_binding shift to state 1032
-- On mod_longident shift to state 62
-- On lbl_pattern_list shift to state 255
-- On label_longident shift to state 114
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
## Reductions:

State 1032:
## Known stack suffix:
## LIDENT LBRACE simple_def_binding
## LR(1) items:
def_binding -> LIDENT LBRACE simple_def_binding . loc_init RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
simple_def_binding -> simple_def_binding . OR def_pattern [ RBRACE OR DO ]
## Transitions:
-- On OR shift to state 324
-- On DO shift to state 670
-- On loc_init shift to state 1033
## Reductions:
-- On RBRACE
--   reduce production loc_init ->

State 1033:
## Known stack suffix:
## LIDENT LBRACE simple_def_binding loc_init
## LR(1) items:
def_binding -> LIDENT LBRACE simple_def_binding loc_init . RBRACE [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 1034
## Reductions:

State 1034:
## Known stack suffix:
## LIDENT LBRACE simple_def_binding loc_init RBRACE
## LR(1) items:
def_binding -> LIDENT LBRACE simple_def_binding loc_init RBRACE . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production def_binding -> LIDENT LBRACE simple_def_binding loc_init RBRACE

State 1035:
## Known stack suffix:
## JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
loc_defs -> JOINDEF def_bindings . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On AND shift to state 980
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_defs -> JOINDEF def_bindings
** Conflict on AND

State 1036:
## Known stack suffix:
## LIDENT loc_modules loc_defs
## LR(1) items:
loc_binding -> LIDENT loc_modules loc_defs . loc_init [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On DO shift to state 1037
-- On loc_init shift to state 1039
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_init ->
** Conflict on DO

State 1037:
## Known stack suffix:
## DO
## LR(1) items:
loc_init -> DO . process0 [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 247
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 694
-- On INT shift to state 259
-- On IF shift to state 755
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 773
-- On process0 shift to state 1038
-- On mod_longident shift to state 748
-- On constant shift to state 752
## Reductions:

State 1038:
## Known stack suffix:
## DO process0
## LR(1) items:
loc_init -> DO process0 . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_init -> DO process0

State 1039:
## Known stack suffix:
## LIDENT loc_modules loc_defs loc_init
## LR(1) items:
loc_binding -> LIDENT loc_modules loc_defs loc_init . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production loc_binding -> LIDENT loc_modules loc_defs loc_init

State 1040:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
expr0 -> LET LOC loc_bindings . IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1041
-- On IN shift to state 1042
## Reductions:

State 1041:
## Known stack suffix:
## LET LOC loc_bindings error
## LR(1) items:
expr0 -> LET LOC loc_bindings error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET LOC loc_bindings error

State 1042:
## Known stack suffix:
## LET LOC loc_bindings IN
## LR(1) items:
expr0 -> LET LOC loc_bindings IN . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings IN . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1043
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1044
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1043:
## Known stack suffix:
## LET LOC loc_bindings IN error
## LR(1) items:
expr0 -> LET LOC loc_bindings IN error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET LOC loc_bindings IN error

State 1044:
## Known stack suffix:
## LET LOC loc_bindings IN seq_expr
## LR(1) items:
expr0 -> LET LOC loc_bindings IN seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET LOC loc_bindings IN seq_expr

State 1045:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
expr0 -> LET JOINDEF . def_bindings IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 310
-- On simple_def_binding shift to state 966
-- On join_pattern shift to state 968
-- On def_pattern shift to state 974
-- On def_bindings shift to state 1046
-- On def_binding shift to state 982
## Reductions:

State 1046:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error IN AND ]
expr0 -> LET JOINDEF def_bindings . IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1047
-- On IN shift to state 1048
-- On AND shift to state 980
## Reductions:

State 1047:
## Known stack suffix:
## LET JOINDEF def_bindings error
## LR(1) items:
expr0 -> LET JOINDEF def_bindings error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET JOINDEF def_bindings error

State 1048:
## Known stack suffix:
## LET JOINDEF def_bindings IN
## LR(1) items:
expr0 -> LET JOINDEF def_bindings IN . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings IN . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1049
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1050
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1049:
## Known stack suffix:
## LET JOINDEF def_bindings IN error
## LR(1) items:
expr0 -> LET JOINDEF def_bindings IN error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET JOINDEF def_bindings IN error

State 1050:
## Known stack suffix:
## LET JOINDEF def_bindings IN seq_expr
## LR(1) items:
expr0 -> LET JOINDEF def_bindings IN seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET JOINDEF def_bindings IN seq_expr

State 1051:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr0 -> LET rec_flag . let_bindings IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 984
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 993
-- On mod_longident shift to state 306
-- On let_bindings shift to state 1052
-- On let_binding shift to state 1005
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1052:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr0 -> LET rec_flag let_bindings . IN seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . IN error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error IN AND ]
## Transitions:
-- On error shift to state 1053
-- On IN shift to state 1054
-- On AND shift to state 1003
## Reductions:

State 1053:
## Known stack suffix:
## LET rec_flag let_bindings error
## LR(1) items:
expr0 -> LET rec_flag let_bindings error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET rec_flag let_bindings error

State 1054:
## Known stack suffix:
## LET rec_flag let_bindings IN
## LR(1) items:
expr0 -> LET rec_flag let_bindings IN . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings IN . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1055
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1056
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1055:
## Known stack suffix:
## LET rec_flag let_bindings IN error
## LR(1) items:
expr0 -> LET rec_flag let_bindings IN error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET rec_flag let_bindings IN error

State 1056:
## Known stack suffix:
## LET rec_flag let_bindings IN seq_expr
## LR(1) items:
expr0 -> LET rec_flag let_bindings IN seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> LET rec_flag let_bindings IN seq_expr

State 1057:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
expr0 -> MATCH seq_expr . WITH opt_bar match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> MATCH seq_expr . WITH PARSER opt_pat opt_bar parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 1058
## Reductions:

State 1058:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
expr0 -> MATCH seq_expr WITH . opt_bar match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> MATCH seq_expr WITH . PARSER opt_pat opt_bar parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On PARSER shift to state 1059
-- On BAR shift to state 269
-- On opt_bar shift to state 1066
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 1059:
## Known stack suffix:
## MATCH seq_expr WITH PARSER
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER . opt_pat opt_bar parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 1060
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On LBRACKETLESS BAR
--   reduce production opt_pat ->

State 1060:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER opt_pat . opt_bar parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 1061
## Reductions:
-- On LBRACKETLESS
--   reduce production opt_bar ->

State 1061:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER opt_pat opt_bar . parser_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 271
-- On parser_cases shift to state 1062
-- On parser_case shift to state 1065
## Reductions:

State 1062:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1063
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases

State 1063:
## Known stack suffix:
## parser_cases BAR
## LR(1) items:
parser_cases -> parser_cases BAR . parser_case [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 271
-- On parser_case shift to state 1064
## Reductions:

State 1064:
## Known stack suffix:
## parser_cases BAR parser_case
## LR(1) items:
parser_cases -> parser_cases BAR parser_case . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_cases -> parser_cases BAR parser_case

State 1065:
## Known stack suffix:
## parser_case
## LR(1) items:
parser_cases -> parser_case . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_cases -> parser_case

State 1066:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
expr0 -> MATCH seq_expr WITH opt_bar . match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 531
-- On mod_longident shift to state 306
-- On match_cases shift to state 1067
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1067:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar match_cases
## LR(1) items:
expr0 -> MATCH seq_expr WITH opt_bar match_cases . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 630
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> MATCH seq_expr WITH opt_bar match_cases

State 1068:
## Known stack suffix:
## MATCH seq_expr
## LR(1) items:
expr0 -> MATCH seq_expr . WITH opt_bar match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> MATCH seq_expr . WITH PARSER opt_pat opt_bar parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WITH shift to state 1069
## Reductions:

State 1069:
## Known stack suffix:
## MATCH seq_expr WITH
## LR(1) items:
expr0 -> MATCH seq_expr WITH . opt_bar match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> MATCH seq_expr WITH . PARSER opt_pat opt_bar parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On PARSER shift to state 1070
-- On BAR shift to state 269
-- On opt_bar shift to state 1077
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 1070:
## Known stack suffix:
## MATCH seq_expr WITH PARSER
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER . opt_pat opt_bar parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 1071
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On LBRACKETLESS BAR
--   reduce production opt_pat ->

State 1071:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER opt_pat . opt_bar parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 269
-- On opt_bar shift to state 1072
## Reductions:
-- On LBRACKETLESS
--   reduce production opt_bar ->

State 1072:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER opt_pat opt_bar . parser_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 284
-- On parser_cases shift to state 1073
-- On parser_case shift to state 1076
## Reductions:

State 1073:
## Known stack suffix:
## MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr0 -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1074
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> MATCH seq_expr WITH PARSER opt_pat opt_bar parser_cases

State 1074:
## Known stack suffix:
## parser_cases BAR
## LR(1) items:
parser_cases -> parser_cases BAR . parser_case [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LBRACKETLESS shift to state 284
-- On parser_case shift to state 1075
## Reductions:

State 1075:
## Known stack suffix:
## parser_cases BAR parser_case
## LR(1) items:
parser_cases -> parser_cases BAR parser_case . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_cases -> parser_cases BAR parser_case

State 1076:
## Known stack suffix:
## parser_case
## LR(1) items:
parser_cases -> parser_case . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_cases -> parser_case

State 1077:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar
## LR(1) items:
expr0 -> MATCH seq_expr WITH opt_bar . match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 373
-- On mod_longident shift to state 306
-- On match_cases shift to state 1078
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1078:
## Known stack suffix:
## MATCH seq_expr WITH opt_bar match_cases
## LR(1) items:
expr0 -> MATCH seq_expr WITH opt_bar match_cases . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 911
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> MATCH seq_expr WITH opt_bar match_cases

State 1079:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 1080:
## Known stack suffix:
## stream_pattern_component
## LR(1) items:
stream_pattern -> stream_pattern_component . opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On QUESTION shift to state 1081
-- On opt_err shift to state 1083
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production opt_err ->

State 1081:
## Known stack suffix:
## QUESTION
## LR(1) items:
opt_err -> QUESTION . expr [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 1082
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1082:
## Known stack suffix:
## QUESTION expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI GREATERRBRACKET COMMA ]
opt_err -> QUESTION expr . [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production opt_err -> QUESTION expr

State 1083:
## Known stack suffix:
## stream_pattern_component opt_err
## LR(1) items:
stream_pattern -> stream_pattern_component opt_err . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production stream_pattern -> stream_pattern_component opt_err

State 1084:
## Known stack suffix:
## LBRACKETLESS stream_pattern
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern . opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern . opt_semi error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
stream_pattern -> stream_pattern . SEMI stream_pattern_component opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 1085
-- On opt_semi shift to state 1091
## Reductions:
-- On error GREATERRBRACKET
--   reduce production opt_semi ->

State 1085:
## Known stack suffix:
## stream_pattern SEMI
## LR(1) items:
opt_semi -> SEMI . [ error GREATERRBRACKET ]
stream_pattern -> stream_pattern SEMI . stream_pattern_component opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 45
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 58
-- On STRING shift to state 28
-- On QUOTE shift to state 272
-- On LPAREN shift to state 52
-- On LIDENT shift to state 54
-- On LBRACKET shift to state 57
-- On LBRACE shift to state 60
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 72
-- On val_ident shift to state 75
-- On stream_pattern_component shift to state 1086
-- On simple_pattern shift to state 76
-- On signed_constant shift to state 77
-- On pattern_comma_list shift to state 78
-- On pattern shift to state 1088
-- On mod_longident shift to state 83
-- On constr_longident shift to state 86
-- On constant shift to state 88
## Reductions:
-- On error GREATERRBRACKET
--   reduce production opt_semi -> SEMI

State 1086:
## Known stack suffix:
## stream_pattern SEMI stream_pattern_component
## LR(1) items:
stream_pattern -> stream_pattern SEMI stream_pattern_component . opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On QUESTION shift to state 1081
-- On opt_err shift to state 1087
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production opt_err ->

State 1087:
## Known stack suffix:
## stream_pattern SEMI stream_pattern_component opt_err
## LR(1) items:
stream_pattern -> stream_pattern SEMI stream_pattern_component opt_err . [ error SEMI GREATERRBRACKET ]
## Transitions:
## Reductions:
-- On error SEMI GREATERRBRACKET
--   reduce production stream_pattern -> stream_pattern SEMI stream_pattern_component opt_err

State 1088:
## Known stack suffix:
## pattern
## LR(1) items:
pattern -> pattern . AS val_ident [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . COLONCOLON pattern [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
pattern -> pattern . BAR pattern [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
pattern_comma_list -> pattern . COMMA pattern [ error SEMI QUESTION GREATERRBRACKET EQUAL COMMA COLONCOLON BAR AS ]
stream_pattern_component -> pattern . EQUAL expr [ error SEMI QUESTION GREATERRBRACKET ]
stream_pattern_component -> pattern . [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On EQUAL shift to state 1089
-- On COMMA shift to state 90
-- On COLONCOLON shift to state 81
-- On BAR shift to state 92
-- On AS shift to state 94
## Reductions:
-- On error SEMI QUESTION GREATERRBRACKET
--   reduce production stream_pattern_component -> pattern

State 1089:
## Known stack suffix:
## pattern EQUAL
## LR(1) items:
stream_pattern_component -> pattern EQUAL . expr [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 1090
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1090:
## Known stack suffix:
## pattern EQUAL expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI QUESTION GREATERRBRACKET COMMA ]
stream_pattern_component -> pattern EQUAL expr . [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI QUESTION GREATERRBRACKET
--   reduce production stream_pattern_component -> pattern EQUAL expr

State 1091:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern opt_semi . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1092
-- On GREATERRBRACKET shift to state 1093
## Reductions:

State 1092:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi error
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi error

State 1093:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 1094
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On MINUSGREATER
--   reduce production opt_pat ->

State 1094:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 1095
## Reductions:

State 1095:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1096
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1096:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 1097:
## Known stack suffix:
## PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr0 -> PARSER opt_pat opt_bar parser_cases . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1074
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> PARSER opt_pat opt_bar parser_cases

State 1098:
## Known stack suffix:
## SUBTRACTIVE expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SUBTRACTIVE expr0 . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SUBTRACTIVE expr0

State 1099:
## Known stack suffix:
## LPAREN SHARP
## LR(1) items:
simple_expr -> LPAREN SHARP . label RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 1100
## Reductions:

State 1100:
## Known stack suffix:
## LPAREN SHARP label
## LR(1) items:
simple_expr -> LPAREN SHARP label . RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 1101
## Reductions:

State 1101:
## Known stack suffix:
## LPAREN SHARP label RPAREN
## LR(1) items:
simple_expr -> LPAREN SHARP label RPAREN . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN SHARP label RPAREN

State 1102:
## Known stack suffix:
## LPAREN seq_expr
## LR(1) items:
simple_expr -> LPAREN seq_expr . RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . error [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . type_constraint RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1103
-- On RPAREN shift to state 1104
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On type_constraint shift to state 1105
## Reductions:

State 1103:
## Known stack suffix:
## LPAREN seq_expr error
## LR(1) items:
simple_expr -> LPAREN seq_expr error . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN seq_expr error

State 1104:
## Known stack suffix:
## LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr RPAREN . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN seq_expr RPAREN

State 1105:
## Known stack suffix:
## LPAREN seq_expr type_constraint
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint . RPAREN [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 1106
## Reductions:

State 1106:
## Known stack suffix:
## LPAREN seq_expr type_constraint RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint RPAREN . [ error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VARTYPE VAL UIDENT TYPE TRUE TO SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE QUESTION PREFIXOP OR OPEN NEW MODULE METHOD LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF END ELSE DOT DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS CHAR BEGIN BARRBRACKET BARBAR BAR AS AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN seq_expr type_constraint RPAREN

State 1107:
## Known stack suffix:
## QUOTE pattern WHEN expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ error SEMI QUESTION GREATERRBRACKET COMMA ]
stream_pattern_component -> QUOTE pattern WHEN expr . [ error SEMI QUESTION GREATERRBRACKET ]
## Transitions:
-- On COMMA shift to state 471
## Reductions:
-- On error SEMI QUESTION GREATERRBRACKET
--   reduce production stream_pattern_component -> QUOTE pattern WHEN expr

State 1108:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 1109
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On MINUSGREATER
--   reduce production opt_pat ->

State 1109:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 1110
## Reductions:

State 1110:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1111
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1111:
## Known stack suffix:
## LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_case -> LBRACKETLESS GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 1112:
## Known stack suffix:
## LBRACKETLESS stream_pattern
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern . opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern . opt_semi error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
stream_pattern -> stream_pattern . SEMI stream_pattern_component opt_err [ error SEMI GREATERRBRACKET ]
## Transitions:
-- On SEMI shift to state 1085
-- On opt_semi shift to state 1113
## Reductions:
-- On error GREATERRBRACKET
--   reduce production opt_semi ->

State 1113:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi . GREATERRBRACKET opt_pat MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_case -> LBRACKETLESS stream_pattern opt_semi . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1114
-- On GREATERRBRACKET shift to state 1115
## Reductions:

State 1114:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi error
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi error

State 1115:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET . opt_pat MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 266
-- On signed_constant shift to state 267
-- On opt_pat shift to state 1116
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On MINUSGREATER
--   reduce production opt_pat ->

State 1116:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat . MINUSGREATER seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On MINUSGREATER shift to state 1117
## Reductions:

State 1117:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER . seq_expr [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On NEW shift to state 15
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 291
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1118
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1118:
## Known stack suffix:
## LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr
## LR(1) items:
parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production parser_case -> LBRACKETLESS stream_pattern opt_semi GREATERRBRACKET opt_pat MINUSGREATER seq_expr

State 1119:
## Known stack suffix:
## PARSER opt_pat opt_bar parser_cases
## LR(1) items:
expr0 -> PARSER opt_pat opt_bar parser_cases . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
parser_cases -> parser_cases . BAR parser_case [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 1063
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> PARSER opt_pat opt_bar parser_cases

State 1120:
## Known stack suffix:
## REPLY to_ident
## LR(1) items:
process0 -> REPLY to_ident . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> REPLY to_ident

State 1121:
## Known stack suffix:
## REPLY expr
## LR(1) items:
expr_comma_list -> expr . COMMA expr [ TYPE TO SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO COMMA CLASS BAR AND ]
process0 -> REPLY expr . to_ident [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On TO shift to state 37
-- On COMMA shift to state 588
-- On to_ident shift to state 1122
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production to_ident ->

State 1122:
## Known stack suffix:
## REPLY expr to_ident
## LR(1) items:
process0 -> REPLY expr to_ident . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process0 -> REPLY expr to_ident

State 1123:
## Known stack suffix:
## SPAWN LBRACE process
## LR(1) items:
process -> SPAWN LBRACE process . RBRACE SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 1124
## Reductions:

State 1124:
## Known stack suffix:
## SPAWN LBRACE process RBRACE
## LR(1) items:
process -> SPAWN LBRACE process RBRACE . SEMI process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On SEMI shift to state 1125
## Reductions:

State 1125:
## Known stack suffix:
## SPAWN LBRACE process RBRACE SEMI
## LR(1) items:
process -> SPAWN LBRACE process RBRACE SEMI . process [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 34
-- On REPLY shift to state 36
-- On MATCH shift to state 327
-- On LPAREN shift to state 640
-- On LOC shift to state 656
-- On LIDENT shift to state 290
-- On LET shift to state 781
-- On LBRACERBRACE shift to state 671
-- On LBRACE shift to state 785
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 787
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 791
-- On process0 shift to state 796
-- On process shift to state 1126
-- On proc_expr shift to state 799
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 1126:
## Known stack suffix:
## SPAWN LBRACE process RBRACE SEMI process
## LR(1) items:
process -> SPAWN LBRACE process RBRACE SEMI process . [ TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF ELSE DO CLASS BAR AND
--   reduce production process -> SPAWN LBRACE process RBRACE SEMI process

State 1127:
## Known stack suffix:
## SPAWN LBRACE process
## LR(1) items:
process -> SPAWN LBRACE process . RBRACE SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 1128
## Reductions:

State 1128:
## Known stack suffix:
## SPAWN LBRACE process RBRACE
## LR(1) items:
process -> SPAWN LBRACE process RBRACE . SEMI process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On SEMI shift to state 1129
## Reductions:

State 1129:
## Known stack suffix:
## SPAWN LBRACE process RBRACE SEMI
## LR(1) items:
process -> SPAWN LBRACE process RBRACE SEMI . process [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
-- On WHILE shift to state 12
-- On UIDENT shift to state 3
-- On STRING shift to state 8
-- On SPAWN shift to state 32
-- On REPLY shift to state 674
-- On MATCH shift to state 680
-- On LPAREN shift to state 640
-- On LOC shift to state 688
-- On LIDENT shift to state 290
-- On LET shift to state 696
-- On LBRACERBRACE shift to state 693
-- On LBRACE shift to state 700
-- On LAZY shift to state 701
-- On INT shift to state 259
-- On IF shift to state 703
-- On FOR shift to state 707
-- On FLOAT shift to state 260
-- On CHAR shift to state 503
-- On BEGIN shift to state 717
-- On ASSERT shift to state 721
-- On val_longident shift to state 723
-- On val_ident shift to state 509
-- On simple_chan_expr shift to state 806
-- On process0 shift to state 811
-- On process shift to state 1130
-- On proc_expr shift to state 814
-- On mod_longident shift to state 748
-- On label shift to state 749
-- On constant shift to state 752
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process ->
** Conflict on LET

State 1130:
## Known stack suffix:
## SPAWN LBRACE process RBRACE SEMI process
## LR(1) items:
process -> SPAWN LBRACE process RBRACE SEMI process . [ error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error TYPE SHARP SEMISEMI RBRACE OR OPEN MODULE LET IN EXTERNAL EXCEPTION EOF END ELSE DO CLASS BAR AND
--   reduce production process -> SPAWN LBRACE process RBRACE SEMI process

State 1131:
## Known stack suffix:
## SPAWN LBRACE process
## LR(1) items:
expr0 -> SPAWN LBRACE process . RBRACE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN LBRACE process . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1132
-- On RBRACE shift to state 1133
## Reductions:

State 1132:
## Known stack suffix:
## SPAWN LBRACE process error
## LR(1) items:
expr0 -> SPAWN LBRACE process error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SPAWN LBRACE process error

State 1133:
## Known stack suffix:
## SPAWN LBRACE process RBRACE
## LR(1) items:
expr0 -> SPAWN LBRACE process RBRACE . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SPAWN LBRACE process RBRACE

State 1134:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
expr0 -> TRY seq_expr . WITH opt_bar match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY seq_expr . WITH error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY seq_expr . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1135
-- On WITH shift to state 1136
## Reductions:

State 1135:
## Known stack suffix:
## TRY seq_expr error
## LR(1) items:
expr0 -> TRY seq_expr error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> TRY seq_expr error

State 1136:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
expr0 -> TRY seq_expr WITH . opt_bar match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY seq_expr WITH . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1137
-- On BAR shift to state 269
-- On opt_bar shift to state 1138
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 1137:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
expr0 -> TRY seq_expr WITH error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> TRY seq_expr WITH error

State 1138:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
expr0 -> TRY seq_expr WITH opt_bar . match_cases [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 373
-- On mod_longident shift to state 306
-- On match_cases shift to state 1139
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1139:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
expr0 -> TRY seq_expr WITH opt_bar match_cases . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 911
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> TRY seq_expr WITH opt_bar match_cases

State 1140:
## Known stack suffix:
## LPAREN SHARP
## LR(1) items:
simple_expr -> LPAREN SHARP . label RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 1141
## Reductions:

State 1141:
## Known stack suffix:
## LPAREN SHARP label
## LR(1) items:
simple_expr -> LPAREN SHARP label . RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 1142
## Reductions:

State 1142:
## Known stack suffix:
## LPAREN SHARP label RPAREN
## LR(1) items:
simple_expr -> LPAREN SHARP label RPAREN . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN SHARP label RPAREN

State 1143:
## Known stack suffix:
## LPAREN seq_expr
## LR(1) items:
simple_expr -> LPAREN seq_expr . RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> LPAREN seq_expr . type_constraint RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1144
-- On RPAREN shift to state 1145
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On type_constraint shift to state 1146
## Reductions:

State 1144:
## Known stack suffix:
## LPAREN seq_expr error
## LR(1) items:
simple_expr -> LPAREN seq_expr error . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN seq_expr error

State 1145:
## Known stack suffix:
## LPAREN seq_expr RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr RPAREN . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN seq_expr RPAREN

State 1146:
## Known stack suffix:
## LPAREN seq_expr type_constraint
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint . RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 1147
## Reductions:

State 1147:
## Known stack suffix:
## LPAREN seq_expr type_constraint RPAREN
## LR(1) items:
simple_expr -> LPAREN seq_expr type_constraint RPAREN . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> LPAREN seq_expr type_constraint RPAREN

State 1148:
## Known stack suffix:
## PREFIXOP simple_expr
## LR(1) items:
simple_expr -> simple_expr . DOT label_longident [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr RPAREN [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LPAREN seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr RBRACKET [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . DOT LBRACKET seq_expr error [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> PREFIXOP simple_expr . [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
simple_expr -> simple_expr . SHARP label [ WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH VARTYPE UIDENT TYPE TRUE TO THEN SUBTRACTIVE STRING STAR SHARP SEMISEMI SEMI RPAREN RELOCINFO RBRACKET RBRACE PREFIXOP OR OPEN NEW MODULE MINUSGREATER LPAREN LIDENT LET LESSGREATER LESS LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER FLOAT FALSE EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DOT DO COMMA COLONEQUAL COLONCOLON CLASS CHAR BEGIN BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production simple_expr -> PREFIXOP simple_expr

State 1149:
## Known stack suffix:
## WHILE seq_expr
## LR(1) items:
proc_expr -> WHILE seq_expr . DO seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> WHILE seq_expr . DO seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On DO shift to state 1150
## Reductions:

State 1150:
## Known stack suffix:
## WHILE seq_expr DO
## LR(1) items:
proc_expr -> WHILE seq_expr DO . seq_expr DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> WHILE seq_expr DO . seq_expr error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1151
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1151:
## Known stack suffix:
## WHILE seq_expr DO seq_expr
## LR(1) items:
proc_expr -> WHILE seq_expr DO seq_expr . DONE [ SEMI ELSE COLONEQUAL ]
proc_expr -> WHILE seq_expr DO seq_expr . error [ SEMI ELSE COLONEQUAL ]
## Transitions:
-- On error shift to state 1152
-- On DONE shift to state 1153
## Reductions:

State 1152:
## Known stack suffix:
## WHILE seq_expr DO seq_expr error
## LR(1) items:
proc_expr -> WHILE seq_expr DO seq_expr error . [ SEMI ELSE COLONEQUAL ]
## Transitions:
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> WHILE seq_expr DO seq_expr error

State 1153:
## Known stack suffix:
## WHILE seq_expr DO seq_expr DONE
## LR(1) items:
proc_expr -> WHILE seq_expr DO seq_expr DONE . [ SEMI ELSE COLONEQUAL ]
## Transitions:
## Reductions:
-- On SEMI ELSE COLONEQUAL
--   reduce production proc_expr -> WHILE seq_expr DO seq_expr DONE

State 1154:
## Known stack suffix:
## SPAWN LBRACE process
## LR(1) items:
expr0 -> SPAWN LBRACE process . RBRACE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SPAWN LBRACE process . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1155
-- On RBRACE shift to state 1156
## Reductions:

State 1155:
## Known stack suffix:
## SPAWN LBRACE process error
## LR(1) items:
expr0 -> SPAWN LBRACE process error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SPAWN LBRACE process error

State 1156:
## Known stack suffix:
## SPAWN LBRACE process RBRACE
## LR(1) items:
expr0 -> SPAWN LBRACE process RBRACE . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SPAWN LBRACE process RBRACE

State 1157:
## Known stack suffix:
## SUBTRACTIVE expr0
## LR(1) items:
expr0 -> expr0 . COLONCOLON expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP0 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESSGREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP1 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP2 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP3 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . INFIXOP4 expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . SUBTRACTIVE expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . STAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . EQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . LESS expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . GREATER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . BARBAR expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERSAND expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . AMPERAMPER expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> expr0 . COLONEQUAL expr0 [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> SUBTRACTIVE expr0 . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> SUBTRACTIVE expr0

State 1158:
## Known stack suffix:
## WHILE seq_expr
## LR(1) items:
expr0 -> WHILE seq_expr . DO seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE seq_expr . DO seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 1159
## Reductions:

State 1159:
## Known stack suffix:
## WHILE seq_expr DO
## LR(1) items:
expr0 -> WHILE seq_expr DO . seq_expr DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE seq_expr DO . seq_expr error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1160
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1160:
## Known stack suffix:
## WHILE seq_expr DO seq_expr
## LR(1) items:
expr0 -> WHILE seq_expr DO seq_expr . DONE [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE seq_expr DO seq_expr . error [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1161
-- On DONE shift to state 1162
## Reductions:

State 1161:
## Known stack suffix:
## WHILE seq_expr DO seq_expr error
## LR(1) items:
expr0 -> WHILE seq_expr DO seq_expr error . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> WHILE seq_expr DO seq_expr error

State 1162:
## Known stack suffix:
## WHILE seq_expr DO seq_expr DONE
## LR(1) items:
expr0 -> WHILE seq_expr DO seq_expr DONE . [ error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE TO SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE QUESTION OR OPEN MODULE METHOD LET LESSGREATER LESS INHERIT INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATERRBRACKET GREATERRBRACE GREATER EXTERNAL EXCEPTION EQUAL EOF END ELSE DONE DO COMMA COLONGREATER COLONEQUAL COLONCOLON COLON CLASS BARRBRACKET BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> WHILE seq_expr DO seq_expr DONE

State 1163:
## Known stack suffix:
## TRY seq_expr
## LR(1) items:
expr0 -> TRY seq_expr . WITH opt_bar match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY seq_expr . WITH error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY seq_expr . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1164
-- On WITH shift to state 1165
## Reductions:

State 1164:
## Known stack suffix:
## TRY seq_expr error
## LR(1) items:
expr0 -> TRY seq_expr error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> TRY seq_expr error

State 1165:
## Known stack suffix:
## TRY seq_expr WITH
## LR(1) items:
expr0 -> TRY seq_expr WITH . opt_bar match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> TRY seq_expr WITH . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1166
-- On BAR shift to state 269
-- On opt_bar shift to state 1167
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production opt_bar ->

State 1166:
## Known stack suffix:
## TRY seq_expr WITH error
## LR(1) items:
expr0 -> TRY seq_expr WITH error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> TRY seq_expr WITH error

State 1167:
## Known stack suffix:
## TRY seq_expr WITH opt_bar
## LR(1) items:
expr0 -> TRY seq_expr WITH opt_bar . match_cases [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 531
-- On mod_longident shift to state 306
-- On match_cases shift to state 1168
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1168:
## Known stack suffix:
## TRY seq_expr WITH opt_bar match_cases
## LR(1) items:
expr0 -> TRY seq_expr WITH opt_bar match_cases . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
match_cases -> match_cases . BAR pattern match_action [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 630
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> TRY seq_expr WITH opt_bar match_cases

State 1169:
## Known stack suffix:
## WHILE seq_expr
## LR(1) items:
expr0 -> WHILE seq_expr . DO seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE seq_expr . DO seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On DO shift to state 1170
## Reductions:

State 1170:
## Known stack suffix:
## WHILE seq_expr DO
## LR(1) items:
expr0 -> WHILE seq_expr DO . seq_expr DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE seq_expr DO . seq_expr error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1171
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1171:
## Known stack suffix:
## WHILE seq_expr DO seq_expr
## LR(1) items:
expr0 -> WHILE seq_expr DO seq_expr . DONE [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
expr0 -> WHILE seq_expr DO seq_expr . error [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
-- On error shift to state 1172
-- On DONE shift to state 1173
## Reductions:

State 1172:
## Known stack suffix:
## WHILE seq_expr DO seq_expr error
## LR(1) items:
expr0 -> WHILE seq_expr DO seq_expr error . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> WHILE seq_expr DO seq_expr error

State 1173:
## Known stack suffix:
## WHILE seq_expr DO seq_expr DONE
## LR(1) items:
expr0 -> WHILE seq_expr DO seq_expr DONE . [ WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITH TYPE TO THEN SUBTRACTIVE STAR SHARP SEMISEMI SEMI RPAREN RBRACKET RBRACE OR OPEN MODULE MINUSGREATER LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN GREATER EXTERNAL EXCEPTION EQUAL EOF ELSE DOWNTO DO COMMA COLONEQUAL COLONCOLON CLASS BARBAR BAR AND AMPERSAND AMPERAMPER
--   reduce production expr0 -> WHILE seq_expr DO seq_expr DONE

State 1174:
## Known stack suffix:
## TYPE
## LR(1) items:
structure_item -> TYPE . type_declarations [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1181
-- On type_parameter shift to state 1249
-- On type_declarations shift to state 1250
-- On type_declaration shift to state 1253
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1175:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_parameters -> LPAREN . type_parameter_list RPAREN [ UIDENT LIDENT ]
## Transitions:
-- On QUOTE shift to state 181
-- On type_parameter_list shift to state 1176
-- On type_parameter shift to state 1180
## Reductions:

State 1176:
## Known stack suffix:
## LPAREN type_parameter_list
## LR(1) items:
type_parameter_list -> type_parameter_list . COMMA type_parameter [ RPAREN COMMA ]
type_parameters -> LPAREN type_parameter_list . RPAREN [ UIDENT LIDENT ]
## Transitions:
-- On RPAREN shift to state 1177
-- On COMMA shift to state 1178
## Reductions:

State 1177:
## Known stack suffix:
## LPAREN type_parameter_list RPAREN
## LR(1) items:
type_parameters -> LPAREN type_parameter_list RPAREN . [ UIDENT LIDENT ]
## Transitions:
## Reductions:
-- On UIDENT LIDENT
--   reduce production type_parameters -> LPAREN type_parameter_list RPAREN

State 1178:
## Known stack suffix:
## type_parameter_list COMMA
## LR(1) items:
type_parameter_list -> type_parameter_list COMMA . type_parameter [ RPAREN COMMA ]
## Transitions:
-- On QUOTE shift to state 181
-- On type_parameter shift to state 1179
## Reductions:

State 1179:
## Known stack suffix:
## type_parameter_list COMMA type_parameter
## LR(1) items:
type_parameter_list -> type_parameter_list COMMA type_parameter . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production type_parameter_list -> type_parameter_list COMMA type_parameter

State 1180:
## Known stack suffix:
## type_parameter
## LR(1) items:
type_parameter_list -> type_parameter . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production type_parameter_list -> type_parameter

State 1181:
## Known stack suffix:
## type_parameters
## LR(1) items:
type_declaration -> type_parameters . LIDENT type_kind constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1182
## Reductions:

State 1182:
## Known stack suffix:
## type_parameters LIDENT
## LR(1) items:
type_declaration -> type_parameters LIDENT . type_kind constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1183
-- On type_kind shift to state 1242
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind ->

State 1183:
## Known stack suffix:
## EQUAL
## LR(1) items:
type_kind -> EQUAL . core_type [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . constructor_declarations_ext [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . BAR constructor_declarations_ext [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL opt_bar constructor_declarations_ext [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 1184
-- On TRUE shift to state 1185
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 1186
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On LBRACKET shift to state 1188
-- On LBRACE shift to state 1190
-- On FALSE shift to state 1202
-- On COLONCOLON shift to state 1203
-- On BAR shift to state 1204
-- On type_longident shift to state 159
-- On tag_constructor_declarations shift to state 1207
-- On tag_constructor_declaration shift to state 1224
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1233
-- On constructor_declarations_ext shift to state 1241
-- On constructor_declarations shift to state 1226
-- On constructor_declaration shift to state 1231
-- On constr_ident shift to state 1232
## Reductions:

State 1184:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 1185:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_ident -> TRUE . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> TRUE

State 1186:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On RPAREN shift to state 1187
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type_comma_list shift to state 190
-- On core_type shift to state 197
## Reductions:

State 1187:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_ident -> LPAREN RPAREN . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> LPAREN RPAREN

State 1188:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_ident -> LBRACKET . RBRACKET [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 1189
## Reductions:

State 1189:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_ident -> LBRACKET RBRACKET . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> LBRACKET RBRACKET

State 1190:
## Known stack suffix:
## EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE . label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1192
-- On label_declarations shift to state 1196
-- On label_declaration shift to state 1201
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1191:
## Known stack suffix:
## MUTABLE
## LR(1) items:
mutable_flag -> MUTABLE . [ LIDENT ]
## Transitions:
## Reductions:
-- On LIDENT
--   reduce production mutable_flag -> MUTABLE

State 1192:
## Known stack suffix:
## mutable_flag
## LR(1) items:
label_declaration -> mutable_flag . LIDENT COLON core_type [ SEMI RBRACE ]
## Transitions:
-- On LIDENT shift to state 1193
## Reductions:

State 1193:
## Known stack suffix:
## mutable_flag LIDENT
## LR(1) items:
label_declaration -> mutable_flag LIDENT . COLON core_type [ SEMI RBRACE ]
## Transitions:
-- On COLON shift to state 1194
## Reductions:

State 1194:
## Known stack suffix:
## mutable_flag LIDENT COLON
## LR(1) items:
label_declaration -> mutable_flag LIDENT COLON . core_type [ SEMI RBRACE ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1195
## Reductions:

State 1195:
## Known stack suffix:
## mutable_flag LIDENT COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ SEMI RBRACE MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ SEMI RBRACE MINUSGREATER AS ]
label_declaration -> mutable_flag LIDENT COLON core_type . [ SEMI RBRACE ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On SEMI RBRACE
--   reduce production label_declaration -> mutable_flag LIDENT COLON core_type

State 1196:
## Known stack suffix:
## EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL LBRACE label_declarations . opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1199
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1197:
## Known stack suffix:
## label_declarations SEMI
## LR(1) items:
label_declarations -> label_declarations SEMI . label_declaration [ SEMI RBRACE ]
opt_semi -> SEMI . [ RBRACE ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1192
-- On label_declaration shift to state 1198
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->
-- On RBRACE
--   reduce production opt_semi -> SEMI

State 1198:
## Known stack suffix:
## label_declarations SEMI label_declaration
## LR(1) items:
label_declarations -> label_declarations SEMI label_declaration . [ SEMI RBRACE ]
## Transitions:
## Reductions:
-- On SEMI RBRACE
--   reduce production label_declarations -> label_declarations SEMI label_declaration

State 1199:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi . RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1200
## Reductions:

State 1200:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE

State 1201:
## Known stack suffix:
## label_declaration
## LR(1) items:
label_declarations -> label_declaration . [ SEMI RBRACE ]
## Transitions:
## Reductions:
-- On SEMI RBRACE
--   reduce production label_declarations -> label_declaration

State 1202:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_ident -> FALSE . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> FALSE

State 1203:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
constr_ident -> COLONCOLON . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> COLONCOLON

State 1204:
## Known stack suffix:
## EQUAL BAR
## LR(1) items:
type_kind -> EQUAL BAR . constructor_declarations_ext [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1205
-- On TRUE shift to state 1185
-- On LPAREN shift to state 1206
-- On LBRACKET shift to state 1188
-- On FALSE shift to state 1202
-- On COLONCOLON shift to state 1203
-- On tag_constructor_declarations shift to state 1207
-- On tag_constructor_declaration shift to state 1224
-- On constructor_declarations_ext shift to state 1225
-- On constructor_declarations shift to state 1226
-- On constructor_declaration shift to state 1231
-- On constr_ident shift to state 1232
## Reductions:

State 1205:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> UIDENT

State 1206:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ VAL TYPE SHARP SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RPAREN shift to state 1187
## Reductions:

State 1207:
## Known stack suffix:
## tag_constructor_declarations
## LR(1) items:
constructor_declarations_ext -> tag_constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
tag_constructor_declarations -> tag_constructor_declarations . BAR tag_constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 1208
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production constructor_declarations_ext -> tag_constructor_declarations

State 1208:
## Known stack suffix:
## tag_constructor_declarations BAR
## LR(1) items:
tag_constructor_declarations -> tag_constructor_declarations BAR . tag_constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 1205
-- On TRUE shift to state 1185
-- On LPAREN shift to state 1206
-- On LBRACKET shift to state 1188
-- On FALSE shift to state 1202
-- On COLONCOLON shift to state 1203
-- On tag_constructor_declaration shift to state 1209
-- On constr_ident shift to state 1210
## Reductions:

State 1209:
## Known stack suffix:
## tag_constructor_declarations BAR tag_constructor_declaration
## LR(1) items:
tag_constructor_declarations -> tag_constructor_declarations BAR tag_constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production tag_constructor_declarations -> tag_constructor_declarations BAR tag_constructor_declaration

State 1210:
## Known stack suffix:
## constr_ident
## LR(1) items:
tag_constructor_declaration -> constr_ident . LBRACKET INT RBRACKET ext_constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On LBRACKET shift to state 1211
## Reductions:

State 1211:
## Known stack suffix:
## constr_ident LBRACKET
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET . INT RBRACKET ext_constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On INT shift to state 1212
## Reductions:

State 1212:
## Known stack suffix:
## constr_ident LBRACKET INT
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET INT . RBRACKET ext_constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 1213
## Reductions:

State 1213:
## Known stack suffix:
## constr_ident LBRACKET INT RBRACKET
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET INT RBRACKET . ext_constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1214
-- On ext_constructor_arguments shift to state 1223
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments ->

State 1214:
## Known stack suffix:
## OF
## LR(1) items:
ext_constructor_arguments -> OF . core_type_list [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
ext_constructor_arguments -> OF . LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On LBRACE shift to state 1215
-- On type_longident shift to state 159
-- On simple_core_type shift to state 1219
-- On mod_ext_longident shift to state 166
-- On core_type_list shift to state 1220
## Reductions:

State 1215:
## Known stack suffix:
## OF LBRACE
## LR(1) items:
ext_constructor_arguments -> OF LBRACE . label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1192
-- On label_declarations shift to state 1216
-- On label_declaration shift to state 1201
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1216:
## Known stack suffix:
## OF LBRACE label_declarations
## LR(1) items:
ext_constructor_arguments -> OF LBRACE label_declarations . opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1217
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1217:
## Known stack suffix:
## OF LBRACE label_declarations opt_semi
## LR(1) items:
ext_constructor_arguments -> OF LBRACE label_declarations opt_semi . RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 1218
## Reductions:

State 1218:
## Known stack suffix:
## OF LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
ext_constructor_arguments -> OF LBRACE label_declarations opt_semi RBRACE . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments -> OF LBRACE label_declarations opt_semi RBRACE

State 1219:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type_list -> simple_core_type . [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 163
-- On LIDENT shift to state 149
-- On type_longident shift to state 165
-- On mod_ext_longident shift to state 166
## Reductions:
-- On VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production core_type_list -> simple_core_type
** Conflict on SHARP

State 1220:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
core_type_list -> core_type_list . STAR simple_core_type [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
ext_constructor_arguments -> OF core_type_list . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On STAR shift to state 1221
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments -> OF core_type_list

State 1221:
## Known stack suffix:
## core_type_list STAR
## LR(1) items:
core_type_list -> core_type_list STAR . simple_core_type [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 1222
-- On mod_ext_longident shift to state 166
## Reductions:

State 1222:
## Known stack suffix:
## core_type_list STAR simple_core_type
## LR(1) items:
core_type_list -> core_type_list STAR simple_core_type . [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 163
-- On LIDENT shift to state 149
-- On type_longident shift to state 165
-- On mod_ext_longident shift to state 166
## Reductions:
-- On VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production core_type_list -> core_type_list STAR simple_core_type

State 1223:
## Known stack suffix:
## constr_ident LBRACKET INT RBRACKET ext_constructor_arguments
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET INT RBRACKET ext_constructor_arguments . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production tag_constructor_declaration -> constr_ident LBRACKET INT RBRACKET ext_constructor_arguments

State 1224:
## Known stack suffix:
## tag_constructor_declaration
## LR(1) items:
tag_constructor_declarations -> tag_constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production tag_constructor_declarations -> tag_constructor_declaration

State 1225:
## Known stack suffix:
## EQUAL BAR constructor_declarations_ext
## LR(1) items:
type_kind -> EQUAL BAR constructor_declarations_ext . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL BAR constructor_declarations_ext

State 1226:
## Known stack suffix:
## constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
constructor_declarations_ext -> constructor_declarations . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1227
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production constructor_declarations_ext -> constructor_declarations

State 1227:
## Known stack suffix:
## constructor_declarations BAR
## LR(1) items:
constructor_declarations -> constructor_declarations BAR . constructor_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 1205
-- On TRUE shift to state 1185
-- On LPAREN shift to state 1206
-- On LBRACKET shift to state 1188
-- On FALSE shift to state 1202
-- On COLONCOLON shift to state 1203
-- On constructor_declaration shift to state 1228
-- On constr_ident shift to state 1229
## Reductions:

State 1228:
## Known stack suffix:
## constructor_declarations BAR constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declarations BAR constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constructor_declarations -> constructor_declarations BAR constructor_declaration

State 1229:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . ext_constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1214
-- On ext_constructor_arguments shift to state 1230
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments ->

State 1230:
## Known stack suffix:
## constr_ident ext_constructor_arguments
## LR(1) items:
constructor_declaration -> constr_ident ext_constructor_arguments . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constructor_declaration -> constr_ident ext_constructor_arguments

State 1231:
## Known stack suffix:
## constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production constructor_declarations -> constructor_declaration

State 1232:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . ext_constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
tag_constructor_declaration -> constr_ident . LBRACKET INT RBRACKET ext_constructor_arguments [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1214
-- On LBRACKET shift to state 1211
-- On ext_constructor_arguments shift to state 1230
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments ->

State 1233:
## Known stack suffix:
## EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VAL TYPE SHARP SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ VAL TYPE SHARP SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
type_kind -> EQUAL core_type . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL opt_bar constructor_declarations_ext [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On EQUAL shift to state 1234
-- On AS shift to state 180
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type

State 1234:
## Known stack suffix:
## EQUAL core_type EQUAL
## LR(1) items:
type_kind -> EQUAL core_type EQUAL . opt_bar constructor_declarations_ext [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL . LBRACE label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 1235
-- On BAR shift to state 269
-- On opt_bar shift to state 1239
## Reductions:
-- On UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
--   reduce production opt_bar ->

State 1235:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE . label_declarations opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1192
-- On label_declarations shift to state 1236
-- On label_declaration shift to state 1201
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1236:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations . opt_semi RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1237
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1237:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi . RBRACE [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1238
## Reductions:

State 1238:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE

State 1239:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar
## LR(1) items:
type_kind -> EQUAL core_type EQUAL opt_bar . constructor_declarations_ext [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1205
-- On TRUE shift to state 1185
-- On LPAREN shift to state 1206
-- On LBRACKET shift to state 1188
-- On FALSE shift to state 1202
-- On COLONCOLON shift to state 1203
-- On tag_constructor_declarations shift to state 1207
-- On tag_constructor_declaration shift to state 1224
-- On constructor_declarations_ext shift to state 1240
-- On constructor_declarations shift to state 1226
-- On constructor_declaration shift to state 1231
-- On constr_ident shift to state 1232
## Reductions:

State 1240:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar constructor_declarations_ext
## LR(1) items:
type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations_ext . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations_ext

State 1241:
## Known stack suffix:
## EQUAL constructor_declarations_ext
## LR(1) items:
type_kind -> EQUAL constructor_declarations_ext . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL constructor_declarations_ext

State 1242:
## Known stack suffix:
## type_parameters LIDENT type_kind
## LR(1) items:
type_declaration -> type_parameters LIDENT type_kind . constraints [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On constraints shift to state 1243
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND
--   reduce production constraints ->

State 1243:
## Known stack suffix:
## type_parameters LIDENT type_kind constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CONSTRAINT CLASS AND ]
type_declaration -> type_parameters LIDENT type_kind constraints . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1244
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production type_declaration -> type_parameters LIDENT type_kind constraints

State 1244:
## Known stack suffix:
## constraints CONSTRAINT
## LR(1) items:
constraints -> constraints CONSTRAINT . constrain [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On type_parameter shift to state 1245
-- On constrain shift to state 1248
## Reductions:

State 1245:
## Known stack suffix:
## type_parameter
## LR(1) items:
constrain -> type_parameter . EQUAL core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1246
## Reductions:

State 1246:
## Known stack suffix:
## type_parameter EQUAL
## LR(1) items:
constrain -> type_parameter EQUAL . core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1247
## Reductions:

State 1247:
## Known stack suffix:
## type_parameter EQUAL core_type
## LR(1) items:
constrain -> type_parameter EQUAL core_type . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND ]
core_type -> core_type . MINUSGREATER core_type [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
--   reduce production constrain -> type_parameter EQUAL core_type

State 1248:
## Known stack suffix:
## constraints CONSTRAINT constrain
## LR(1) items:
constraints -> constraints CONSTRAINT constrain . [ WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On WITH VIRTUAL VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION EQUAL EOF END CONSTRAINT CLASS AND
--   reduce production constraints -> constraints CONSTRAINT constrain

State 1249:
## Known stack suffix:
## type_parameter
## LR(1) items:
type_parameters -> type_parameter . [ UIDENT LIDENT ]
## Transitions:
## Reductions:
-- On UIDENT LIDENT
--   reduce production type_parameters -> type_parameter

State 1250:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
structure_item -> TYPE type_declarations . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
type_declarations -> type_declarations . AND type_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On AND shift to state 1251
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> TYPE type_declarations

State 1251:
## Known stack suffix:
## type_declarations AND
## LR(1) items:
type_declarations -> type_declarations AND . type_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1181
-- On type_parameter shift to state 1249
-- On type_declaration shift to state 1252
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1252:
## Known stack suffix:
## type_declarations AND type_declaration
## LR(1) items:
type_declarations -> type_declarations AND type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production type_declarations -> type_declarations AND type_declaration

State 1253:
## Known stack suffix:
## type_declaration
## LR(1) items:
type_declarations -> type_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS AND
--   reduce production type_declarations -> type_declaration

State 1254:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
structure_tail -> SEMISEMI . [ EOF ]
structure_tail -> SEMISEMI . seq_expr structure_tail [ EOF ]
structure_tail -> SEMISEMI . structure_item structure_tail [ EOF ]
structure_tail -> SEMISEMI . LET LOC loc_bindings structure_tail [ EOF ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 1174
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On OPEN shift to state 1255
-- On NEW shift to state 15
-- On MODULE shift to state 1257
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 1691
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On structure_item shift to state 1726
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1728
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:
-- On EOF
--   reduce production structure_tail -> SEMISEMI

State 1255:
## Known stack suffix:
## OPEN
## LR(1) items:
structure_item -> OPEN . mod_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 3
-- On mod_longident shift to state 1256
## Reductions:

State 1256:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF DOT CLASS ]
structure_item -> OPEN mod_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On DOT shift to state 307
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> OPEN mod_longident

State 1257:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> MODULE . TYPE ident EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1258
-- On TYPE shift to state 1687
## Reductions:

State 1258:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1259
-- On EQUAL shift to state 1504
-- On COLON shift to state 1681
-- On module_binding shift to state 1686
## Reductions:

State 1259:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_binding -> LPAREN . UIDENT COLON module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1260
## Reductions:

State 1260:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_binding -> LPAREN UIDENT . COLON module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1261
## Reductions:

State 1261:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_binding -> LPAREN UIDENT COLON . module_type RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1502
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1262:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 1263:
## Known stack suffix:
## SIG
## LR(1) items:
module_type -> SIG . signature END [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
module_type -> SIG . signature error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On signature shift to state 1264
## Reductions:
-- On error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature ->

State 1264:
## Known stack suffix:
## SIG signature
## LR(1) items:
module_type -> SIG signature . END [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
module_type -> SIG signature . error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
signature -> signature . signature_item [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature . signature_item SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 1265
-- On VAL shift to state 1266
-- On TYPE shift to state 1270
-- On OPEN shift to state 1335
-- On MODULE shift to state 1337
-- On INCLUDE shift to state 1347
-- On EXTERNAL shift to state 1417
-- On EXCEPTION shift to state 1425
-- On END shift to state 1501
-- On CLASS shift to state 1431
-- On signature_item shift to state 1486
## Reductions:

State 1265:
## Known stack suffix:
## SIG signature error
## LR(1) items:
module_type -> SIG signature error . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> SIG signature error

State 1266:
## Known stack suffix:
## VAL
## LR(1) items:
signature_item -> VAL . val_ident COLON core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 1267
## Reductions:

State 1267:
## Known stack suffix:
## VAL val_ident
## LR(1) items:
signature_item -> VAL val_ident . COLON core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1268
## Reductions:

State 1268:
## Known stack suffix:
## VAL val_ident COLON
## LR(1) items:
signature_item -> VAL val_ident COLON . core_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 1269
## Reductions:

State 1269:
## Known stack suffix:
## VAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION END CLASS AS ]
core_type -> core_type . AS type_parameter [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION END CLASS AS ]
signature_item -> VAL val_ident COLON core_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 232
-- On AS shift to state 234
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> VAL val_ident COLON core_type

State 1270:
## Known stack suffix:
## TYPE
## LR(1) items:
signature_item -> TYPE . type_declarations [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1271
-- On type_parameter shift to state 1249
-- On type_declarations shift to state 1331
-- On type_declaration shift to state 1334
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1271:
## Known stack suffix:
## type_parameters
## LR(1) items:
type_declaration -> type_parameters . LIDENT type_kind constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LIDENT shift to state 1272
## Reductions:

State 1272:
## Known stack suffix:
## type_parameters LIDENT
## LR(1) items:
type_declaration -> type_parameters LIDENT . type_kind constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1273
-- On type_kind shift to state 1324
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind ->

State 1273:
## Known stack suffix:
## EQUAL
## LR(1) items:
type_kind -> EQUAL . core_type [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . constructor_declarations_ext [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . BAR constructor_declarations_ext [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL opt_bar constructor_declarations_ext [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL . core_type EQUAL LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 1274
-- On TRUE shift to state 1275
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 1276
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On LBRACKET shift to state 1278
-- On LBRACE shift to state 1280
-- On FALSE shift to state 1284
-- On COLONCOLON shift to state 1285
-- On BAR shift to state 1286
-- On type_longident shift to state 219
-- On tag_constructor_declarations shift to state 1289
-- On tag_constructor_declaration shift to state 1306
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 1315
-- On constructor_declarations_ext shift to state 1323
-- On constructor_declarations shift to state 1308
-- On constructor_declaration shift to state 1313
-- On constr_ident shift to state 1314
## Reductions:

State 1274:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 1275:
## Known stack suffix:
## TRUE
## LR(1) items:
constr_ident -> TRUE . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> TRUE

State 1276:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN type_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type RPAREN [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
simple_core_type -> LPAREN . core_type_comma_list RPAREN SHARP class_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE MINUSGREATER LIDENT LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On RPAREN shift to state 1277
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type_comma_list shift to state 201
-- On core_type shift to state 210
## Reductions:

State 1277:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
constr_ident -> LPAREN RPAREN . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> LPAREN RPAREN

State 1278:
## Known stack suffix:
## LBRACKET
## LR(1) items:
constr_ident -> LBRACKET . RBRACKET [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 1279
## Reductions:

State 1279:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
constr_ident -> LBRACKET RBRACKET . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> LBRACKET RBRACKET

State 1280:
## Known stack suffix:
## EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE . label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1192
-- On label_declarations shift to state 1281
-- On label_declaration shift to state 1201
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1281:
## Known stack suffix:
## EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL LBRACE label_declarations . opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1282
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1282:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi . RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1283
## Reductions:

State 1283:
## Known stack suffix:
## EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL LBRACE label_declarations opt_semi RBRACE

State 1284:
## Known stack suffix:
## FALSE
## LR(1) items:
constr_ident -> FALSE . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> FALSE

State 1285:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
constr_ident -> COLONCOLON . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> COLONCOLON

State 1286:
## Known stack suffix:
## EQUAL BAR
## LR(1) items:
type_kind -> EQUAL BAR . constructor_declarations_ext [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1287
-- On TRUE shift to state 1275
-- On LPAREN shift to state 1288
-- On LBRACKET shift to state 1278
-- On FALSE shift to state 1284
-- On COLONCOLON shift to state 1285
-- On tag_constructor_declarations shift to state 1289
-- On tag_constructor_declaration shift to state 1306
-- On constructor_declarations_ext shift to state 1307
-- On constructor_declarations shift to state 1308
-- On constructor_declaration shift to state 1313
-- On constr_ident shift to state 1314
## Reductions:

State 1287:
## Known stack suffix:
## UIDENT
## LR(1) items:
constr_ident -> UIDENT . [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constr_ident -> UIDENT

State 1288:
## Known stack suffix:
## LPAREN
## LR(1) items:
constr_ident -> LPAREN . RPAREN [ error VAL TYPE SEMISEMI OPEN OF MODULE LET LBRACKET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RPAREN shift to state 1277
## Reductions:

State 1289:
## Known stack suffix:
## tag_constructor_declarations
## LR(1) items:
constructor_declarations_ext -> tag_constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
tag_constructor_declarations -> tag_constructor_declarations . BAR tag_constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On BAR shift to state 1290
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production constructor_declarations_ext -> tag_constructor_declarations

State 1290:
## Known stack suffix:
## tag_constructor_declarations BAR
## LR(1) items:
tag_constructor_declarations -> tag_constructor_declarations BAR . tag_constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 1205
-- On TRUE shift to state 1185
-- On LPAREN shift to state 1206
-- On LBRACKET shift to state 1188
-- On FALSE shift to state 1202
-- On COLONCOLON shift to state 1203
-- On tag_constructor_declaration shift to state 1291
-- On constr_ident shift to state 1292
## Reductions:

State 1291:
## Known stack suffix:
## tag_constructor_declarations BAR tag_constructor_declaration
## LR(1) items:
tag_constructor_declarations -> tag_constructor_declarations BAR tag_constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production tag_constructor_declarations -> tag_constructor_declarations BAR tag_constructor_declaration

State 1292:
## Known stack suffix:
## constr_ident
## LR(1) items:
tag_constructor_declaration -> constr_ident . LBRACKET INT RBRACKET ext_constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On LBRACKET shift to state 1293
## Reductions:

State 1293:
## Known stack suffix:
## constr_ident LBRACKET
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET . INT RBRACKET ext_constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On INT shift to state 1294
## Reductions:

State 1294:
## Known stack suffix:
## constr_ident LBRACKET INT
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET INT . RBRACKET ext_constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACKET shift to state 1295
## Reductions:

State 1295:
## Known stack suffix:
## constr_ident LBRACKET INT RBRACKET
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET INT RBRACKET . ext_constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1296
-- On ext_constructor_arguments shift to state 1305
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments ->

State 1296:
## Known stack suffix:
## OF
## LR(1) items:
ext_constructor_arguments -> OF . core_type_list [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
ext_constructor_arguments -> OF . LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On LBRACE shift to state 1297
-- On type_longident shift to state 219
-- On simple_core_type shift to state 1301
-- On mod_ext_longident shift to state 207
-- On core_type_list shift to state 1302
## Reductions:

State 1297:
## Known stack suffix:
## OF LBRACE
## LR(1) items:
ext_constructor_arguments -> OF LBRACE . label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1192
-- On label_declarations shift to state 1298
-- On label_declaration shift to state 1201
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1298:
## Known stack suffix:
## OF LBRACE label_declarations
## LR(1) items:
ext_constructor_arguments -> OF LBRACE label_declarations . opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1299
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1299:
## Known stack suffix:
## OF LBRACE label_declarations opt_semi
## LR(1) items:
ext_constructor_arguments -> OF LBRACE label_declarations opt_semi . RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On RBRACE shift to state 1300
## Reductions:

State 1300:
## Known stack suffix:
## OF LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
ext_constructor_arguments -> OF LBRACE label_declarations opt_semi RBRACE . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments -> OF LBRACE label_declarations opt_semi RBRACE

State 1301:
## Known stack suffix:
## simple_core_type
## LR(1) items:
core_type_list -> simple_core_type . [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 223
-- On LIDENT shift to state 205
-- On type_longident shift to state 225
-- On mod_ext_longident shift to state 207
## Reductions:
-- On error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production core_type_list -> simple_core_type

State 1302:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
core_type_list -> core_type_list . STAR simple_core_type [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
ext_constructor_arguments -> OF core_type_list . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On STAR shift to state 1303
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments -> OF core_type_list

State 1303:
## Known stack suffix:
## core_type_list STAR
## LR(1) items:
core_type_list -> core_type_list STAR . simple_core_type [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 1304
-- On mod_ext_longident shift to state 207
## Reductions:

State 1304:
## Known stack suffix:
## core_type_list STAR simple_core_type
## LR(1) items:
core_type_list -> core_type_list STAR simple_core_type . [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . type_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
simple_core_type -> simple_core_type . SHARP class_longident [ error VAL UIDENT TYPE STAR SHARP SEMISEMI OPEN MODULE LIDENT LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On SHARP shift to state 223
-- On LIDENT shift to state 205
-- On type_longident shift to state 225
-- On mod_ext_longident shift to state 207
## Reductions:
-- On error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production core_type_list -> core_type_list STAR simple_core_type

State 1305:
## Known stack suffix:
## constr_ident LBRACKET INT RBRACKET ext_constructor_arguments
## LR(1) items:
tag_constructor_declaration -> constr_ident LBRACKET INT RBRACKET ext_constructor_arguments . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production tag_constructor_declaration -> constr_ident LBRACKET INT RBRACKET ext_constructor_arguments

State 1306:
## Known stack suffix:
## tag_constructor_declaration
## LR(1) items:
tag_constructor_declarations -> tag_constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production tag_constructor_declarations -> tag_constructor_declaration

State 1307:
## Known stack suffix:
## EQUAL BAR constructor_declarations_ext
## LR(1) items:
type_kind -> EQUAL BAR constructor_declarations_ext . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL BAR constructor_declarations_ext

State 1308:
## Known stack suffix:
## constructor_declarations
## LR(1) items:
constructor_declarations -> constructor_declarations . BAR constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
constructor_declarations_ext -> constructor_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On BAR shift to state 1309
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production constructor_declarations_ext -> constructor_declarations

State 1309:
## Known stack suffix:
## constructor_declarations BAR
## LR(1) items:
constructor_declarations -> constructor_declarations BAR . constructor_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On UIDENT shift to state 1287
-- On TRUE shift to state 1275
-- On LPAREN shift to state 1288
-- On LBRACKET shift to state 1278
-- On FALSE shift to state 1284
-- On COLONCOLON shift to state 1285
-- On constructor_declaration shift to state 1310
-- On constr_ident shift to state 1311
## Reductions:

State 1310:
## Known stack suffix:
## constructor_declarations BAR constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declarations BAR constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constructor_declarations -> constructor_declarations BAR constructor_declaration

State 1311:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . ext_constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1296
-- On ext_constructor_arguments shift to state 1312
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments ->

State 1312:
## Known stack suffix:
## constr_ident ext_constructor_arguments
## LR(1) items:
constructor_declaration -> constr_ident ext_constructor_arguments . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constructor_declaration -> constr_ident ext_constructor_arguments

State 1313:
## Known stack suffix:
## constructor_declaration
## LR(1) items:
constructor_declarations -> constructor_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production constructor_declarations -> constructor_declaration

State 1314:
## Known stack suffix:
## constr_ident
## LR(1) items:
constructor_declaration -> constr_ident . ext_constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
tag_constructor_declaration -> constr_ident . LBRACKET INT RBRACKET ext_constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND ]
## Transitions:
-- On OF shift to state 1296
-- On LBRACKET shift to state 1293
-- On ext_constructor_arguments shift to state 1312
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS BAR AND
--   reduce production ext_constructor_arguments ->

State 1315:
## Known stack suffix:
## EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL END CONSTRAINT CLASS AS AND ]
type_kind -> EQUAL core_type . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL opt_bar constructor_declarations_ext [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type . EQUAL LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 232
-- On EQUAL shift to state 1316
-- On AS shift to state 234
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type

State 1316:
## Known stack suffix:
## EQUAL core_type EQUAL
## LR(1) items:
type_kind -> EQUAL core_type EQUAL . opt_bar constructor_declarations_ext [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_kind -> EQUAL core_type EQUAL . LBRACE label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On LBRACE shift to state 1317
-- On BAR shift to state 269
-- On opt_bar shift to state 1321
## Reductions:
-- On UIDENT TRUE LPAREN LBRACKET FALSE COLONCOLON
--   reduce production opt_bar ->

State 1317:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE . label_declarations opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1192
-- On label_declarations shift to state 1318
-- On label_declaration shift to state 1201
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1318:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations
## LR(1) items:
label_declarations -> label_declarations . SEMI label_declaration [ SEMI RBRACE ]
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations . opt_semi RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On SEMI shift to state 1197
-- On opt_semi shift to state 1319
## Reductions:
-- On RBRACE
--   reduce production opt_semi ->

State 1319:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi . RBRACE [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On RBRACE shift to state 1320
## Reductions:

State 1320:
## Known stack suffix:
## EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE
## LR(1) items:
type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type EQUAL LBRACE label_declarations opt_semi RBRACE

State 1321:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar
## LR(1) items:
type_kind -> EQUAL core_type EQUAL opt_bar . constructor_declarations_ext [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1287
-- On TRUE shift to state 1275
-- On LPAREN shift to state 1288
-- On LBRACKET shift to state 1278
-- On FALSE shift to state 1284
-- On COLONCOLON shift to state 1285
-- On tag_constructor_declarations shift to state 1289
-- On tag_constructor_declaration shift to state 1306
-- On constructor_declarations_ext shift to state 1322
-- On constructor_declarations shift to state 1308
-- On constructor_declaration shift to state 1313
-- On constr_ident shift to state 1314
## Reductions:

State 1322:
## Known stack suffix:
## EQUAL core_type EQUAL opt_bar constructor_declarations_ext
## LR(1) items:
type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations_ext . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL core_type EQUAL opt_bar constructor_declarations_ext

State 1323:
## Known stack suffix:
## EQUAL constructor_declarations_ext
## LR(1) items:
type_kind -> EQUAL constructor_declarations_ext . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production type_kind -> EQUAL constructor_declarations_ext

State 1324:
## Known stack suffix:
## type_parameters LIDENT type_kind
## LR(1) items:
type_declaration -> type_parameters LIDENT type_kind . constraints [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On constraints shift to state 1325
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production constraints ->

State 1325:
## Known stack suffix:
## type_parameters LIDENT type_kind constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
type_declaration -> type_parameters LIDENT type_kind constraints . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1326
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production type_declaration -> type_parameters LIDENT type_kind constraints

State 1326:
## Known stack suffix:
## constraints CONSTRAINT
## LR(1) items:
constraints -> constraints CONSTRAINT . constrain [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On type_parameter shift to state 1327
-- On constrain shift to state 1330
## Reductions:

State 1327:
## Known stack suffix:
## type_parameter
## LR(1) items:
constrain -> type_parameter . EQUAL core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1328
## Reductions:

State 1328:
## Known stack suffix:
## type_parameter EQUAL
## LR(1) items:
constrain -> type_parameter EQUAL . core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 1329
## Reductions:

State 1329:
## Known stack suffix:
## type_parameter EQUAL core_type
## LR(1) items:
constrain -> type_parameter EQUAL core_type . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
core_type -> core_type . MINUSGREATER core_type [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AS AND ]
## Transitions:
-- On MINUSGREATER shift to state 232
-- On AS shift to state 234
## Reductions:
-- On error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production constrain -> type_parameter EQUAL core_type

State 1330:
## Known stack suffix:
## constraints CONSTRAINT constrain
## LR(1) items:
constraints -> constraints CONSTRAINT constrain . [ error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
## Transitions:
## Reductions:
-- On error WITH VIRTUAL VAL TYPE SEMISEMI RPAREN OPEN MODULE METHOD LET INHERIT INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production constraints -> constraints CONSTRAINT constrain

State 1331:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
signature_item -> TYPE type_declarations . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
type_declarations -> type_declarations . AND type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On AND shift to state 1332
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> TYPE type_declarations

State 1332:
## Known stack suffix:
## type_declarations AND
## LR(1) items:
type_declarations -> type_declarations AND . type_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1271
-- On type_parameter shift to state 1249
-- On type_declaration shift to state 1333
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1333:
## Known stack suffix:
## type_declarations AND type_declaration
## LR(1) items:
type_declarations -> type_declarations AND type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production type_declarations -> type_declarations AND type_declaration

State 1334:
## Known stack suffix:
## type_declaration
## LR(1) items:
type_declarations -> type_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production type_declarations -> type_declaration

State 1335:
## Known stack suffix:
## OPEN
## LR(1) items:
signature_item -> OPEN . mod_longident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On mod_longident shift to state 1336
## Reductions:

State 1336:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END DOT CLASS ]
signature_item -> OPEN mod_longident . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On DOT shift to state 84
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> OPEN mod_longident

State 1337:
## Known stack suffix:
## MODULE
## LR(1) items:
signature_item -> MODULE . UIDENT module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE . TYPE ident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE . TYPE ident EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1338
-- On TYPE shift to state 1497
## Reductions:

State 1338:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
signature_item -> MODULE UIDENT . module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1339
-- On COLON shift to state 1493
-- On module_declaration shift to state 1496
## Reductions:

State 1339:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_declaration -> LPAREN . UIDENT COLON module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1340
## Reductions:

State 1340:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_declaration -> LPAREN UIDENT . COLON module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1341
## Reductions:

State 1341:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON . module_type RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1491
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1342:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_type -> LPAREN . module_type RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
module_type -> LPAREN . module_type error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1488
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1343:
## Known stack suffix:
## UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
mod_ext_longident -> UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> UIDENT

State 1344:
## Known stack suffix:
## SIG
## LR(1) items:
module_type -> SIG . signature END [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> SIG . signature error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On signature shift to state 1345
## Reductions:
-- On error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature ->

State 1345:
## Known stack suffix:
## SIG signature
## LR(1) items:
module_type -> SIG signature . END [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> SIG signature . error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature . signature_item [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature . signature_item SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 1346
-- On VAL shift to state 1266
-- On TYPE shift to state 1270
-- On OPEN shift to state 1335
-- On MODULE shift to state 1337
-- On INCLUDE shift to state 1347
-- On EXTERNAL shift to state 1417
-- On EXCEPTION shift to state 1425
-- On END shift to state 1430
-- On CLASS shift to state 1431
-- On signature_item shift to state 1486
## Reductions:

State 1346:
## Known stack suffix:
## SIG signature error
## LR(1) items:
module_type -> SIG signature error . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> SIG signature error

State 1347:
## Known stack suffix:
## INCLUDE
## LR(1) items:
signature_item -> INCLUDE . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1416
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1348:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_type -> LPAREN . module_type RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> LPAREN . module_type error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1413
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1349:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_type -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1350
## Reductions:

State 1350:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1351
## Reductions:

State 1351:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1352
## Reductions:

State 1352:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1382
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1353:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_type -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1354
## Reductions:

State 1354:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1355
## Reductions:

State 1355:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On COLON shift to state 1356
## Reductions:

State 1356:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1358
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1357:
## Known stack suffix:
## mty_longident
## LR(1) items:
module_type -> mty_longident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> mty_longident

State 1358:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1374
## Reductions:

State 1359:
## Known stack suffix:
## module_type WITH
## LR(1) items:
module_type -> module_type WITH . with_constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On TYPE shift to state 1360
-- On MODULE shift to state 1366
-- On with_constraints shift to state 1370
-- On with_constraint shift to state 1373
## Reductions:

State 1360:
## Known stack suffix:
## TYPE
## LR(1) items:
with_constraint -> TYPE . type_parameters label_longident EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1361
-- On type_parameter shift to state 1249
## Reductions:
-- On UIDENT LIDENT
--   reduce production type_parameters ->

State 1361:
## Known stack suffix:
## TYPE type_parameters
## LR(1) items:
with_constraint -> TYPE type_parameters . label_longident EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On label_longident shift to state 1362
## Reductions:

State 1362:
## Known stack suffix:
## TYPE type_parameters label_longident
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident . EQUAL core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1363
## Reductions:

State 1363:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL . core_type constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1364
## Reductions:

State 1364:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type . constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
-- On constraints shift to state 1365
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND
--   reduce production constraints ->

State 1365:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CONSTRAINT CLASS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1244
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints

State 1366:
## Known stack suffix:
## MODULE
## LR(1) items:
with_constraint -> MODULE . mod_longident EQUAL mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On mod_longident shift to state 1367
## Reductions:

State 1367:
## Known stack suffix:
## MODULE mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ EQUAL DOT ]
with_constraint -> MODULE mod_longident . EQUAL mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1368
-- On DOT shift to state 307
## Reductions:

State 1368:
## Known stack suffix:
## MODULE mod_longident EQUAL
## LR(1) items:
with_constraint -> MODULE mod_longident EQUAL . mod_ext_longident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On mod_ext_longident shift to state 1369
## Reductions:

State 1369:
## Known stack suffix:
## MODULE mod_longident EQUAL mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF DOT CLASS AND ]
with_constraint -> MODULE mod_longident EQUAL mod_ext_longident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On LPAREN shift to state 167
-- On DOT shift to state 170
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident

State 1370:
## Known stack suffix:
## module_type WITH with_constraints
## LR(1) items:
module_type -> module_type WITH with_constraints . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
with_constraints -> with_constraints . AND with_constraint [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On AND shift to state 1371
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> module_type WITH with_constraints

State 1371:
## Known stack suffix:
## with_constraints AND
## LR(1) items:
with_constraints -> with_constraints AND . with_constraint [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
-- On TYPE shift to state 1360
-- On MODULE shift to state 1366
-- On with_constraint shift to state 1372
## Reductions:

State 1372:
## Known stack suffix:
## with_constraints AND with_constraint
## LR(1) items:
with_constraints -> with_constraints AND with_constraint . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production with_constraints -> with_constraints AND with_constraint

State 1373:
## Known stack suffix:
## with_constraint
## LR(1) items:
with_constraints -> with_constraint . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS AND
--   reduce production with_constraints -> with_constraint

State 1374:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1375
## Reductions:

State 1375:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_type [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1376
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1376:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On WITH shift to state 1359
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
** Conflict on WITH

State 1377:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
mty_longident -> mod_ext_longident . DOT ident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 167
-- On DOT shift to state 1378
## Reductions:

State 1378:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
mty_longident -> mod_ext_longident DOT . ident [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1379
-- On LIDENT shift to state 146
-- On ident shift to state 1380
## Reductions:

State 1379:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
ident -> UIDENT . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 1380:
## Known stack suffix:
## mod_ext_longident DOT ident
## LR(1) items:
mty_longident -> mod_ext_longident DOT ident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production mty_longident -> mod_ext_longident DOT ident

State 1381:
## Known stack suffix:
## ident
## LR(1) items:
mty_longident -> ident . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production mty_longident -> ident

State 1382:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1383
## Reductions:

State 1383:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1384
## Reductions:

State 1384:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1386
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1385:
## Known stack suffix:
## mty_longident
## LR(1) items:
module_type -> mty_longident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> mty_longident

State 1386:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
## LR(1) items:
module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1387
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
** Conflict on WITH

State 1387:
## Known stack suffix:
## module_type WITH
## LR(1) items:
module_type -> module_type WITH . with_constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On TYPE shift to state 1388
-- On MODULE shift to state 1394
-- On with_constraints shift to state 1404
-- On with_constraint shift to state 1407
## Reductions:

State 1388:
## Known stack suffix:
## TYPE
## LR(1) items:
with_constraint -> TYPE . type_parameters label_longident EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1389
-- On type_parameter shift to state 1249
## Reductions:
-- On UIDENT LIDENT
--   reduce production type_parameters ->

State 1389:
## Known stack suffix:
## TYPE type_parameters
## LR(1) items:
with_constraint -> TYPE type_parameters . label_longident EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 61
-- On mod_longident shift to state 62
-- On label_longident shift to state 1390
## Reductions:

State 1390:
## Known stack suffix:
## TYPE type_parameters label_longident
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident . EQUAL core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1391
## Reductions:

State 1391:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL
## LR(1) items:
with_constraint -> TYPE type_parameters label_longident EQUAL . core_type constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 1392
## Reductions:

State 1392:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AS AND ]
core_type -> core_type . AS type_parameter [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE MINUSGREATER LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type . constraints [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On MINUSGREATER shift to state 232
-- On AS shift to state 234
-- On constraints shift to state 1393
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND
--   reduce production constraints ->

State 1393:
## Known stack suffix:
## TYPE type_parameters label_longident EQUAL core_type constraints
## LR(1) items:
constraints -> constraints . CONSTRAINT constrain [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CONSTRAINT CLASS AND ]
with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On CONSTRAINT shift to state 1326
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production with_constraint -> TYPE type_parameters label_longident EQUAL core_type constraints

State 1394:
## Known stack suffix:
## MODULE
## LR(1) items:
with_constraint -> MODULE . mod_longident EQUAL mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On mod_longident shift to state 1395
## Reductions:

State 1395:
## Known stack suffix:
## MODULE mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ EQUAL DOT ]
with_constraint -> MODULE mod_longident . EQUAL mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On EQUAL shift to state 1396
-- On DOT shift to state 307
## Reductions:

State 1396:
## Known stack suffix:
## MODULE mod_longident EQUAL
## LR(1) items:
with_constraint -> MODULE mod_longident EQUAL . mod_ext_longident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1397
-- On mod_ext_longident shift to state 1398
## Reductions:

State 1397:
## Known stack suffix:
## UIDENT
## LR(1) items:
mod_ext_longident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND
--   reduce production mod_ext_longident -> UIDENT

State 1398:
## Known stack suffix:
## MODULE mod_longident EQUAL mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
with_constraint -> MODULE mod_longident EQUAL mod_ext_longident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On LPAREN shift to state 1399
-- On DOT shift to state 1402
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production with_constraint -> MODULE mod_longident EQUAL mod_ext_longident

State 1399:
## Known stack suffix:
## mod_ext_longident LPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN . mod_ext_longident RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 129
-- On mod_ext_longident shift to state 1400
## Reductions:

State 1400:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ RPAREN LPAREN DOT ]
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident . RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
-- On RPAREN shift to state 1401
-- On LPAREN shift to state 167
-- On DOT shift to state 170
## Reductions:

State 1401:
## Known stack suffix:
## mod_ext_longident LPAREN mod_ext_longident RPAREN
## LR(1) items:
mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND
--   reduce production mod_ext_longident -> mod_ext_longident LPAREN mod_ext_longident RPAREN

State 1402:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
-- On UIDENT shift to state 1403
## Reductions:

State 1403:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET INCLUDE EXTERNAL EXCEPTION END DOT CLASS AND
--   reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 1404:
## Known stack suffix:
## module_type WITH with_constraints
## LR(1) items:
module_type -> module_type WITH with_constraints . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
with_constraints -> with_constraints . AND with_constraint [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On AND shift to state 1405
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> module_type WITH with_constraints

State 1405:
## Known stack suffix:
## with_constraints AND
## LR(1) items:
with_constraints -> with_constraints AND . with_constraint [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On TYPE shift to state 1388
-- On MODULE shift to state 1394
-- On with_constraint shift to state 1406
## Reductions:

State 1406:
## Known stack suffix:
## with_constraints AND with_constraint
## LR(1) items:
with_constraints -> with_constraints AND with_constraint . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production with_constraints -> with_constraints AND with_constraint

State 1407:
## Known stack suffix:
## with_constraint
## LR(1) items:
with_constraints -> with_constraint . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS AND
--   reduce production with_constraints -> with_constraint

State 1408:
## Known stack suffix:
## mod_ext_longident
## LR(1) items:
mod_ext_longident -> mod_ext_longident . DOT UIDENT [ LPAREN DOT ]
mod_ext_longident -> mod_ext_longident . LPAREN mod_ext_longident RPAREN [ LPAREN DOT ]
mty_longident -> mod_ext_longident . DOT ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 167
-- On DOT shift to state 1409
## Reductions:

State 1409:
## Known stack suffix:
## mod_ext_longident DOT
## LR(1) items:
mod_ext_longident -> mod_ext_longident DOT . UIDENT [ LPAREN DOT ]
mty_longident -> mod_ext_longident DOT . ident [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1410
-- On LIDENT shift to state 138
-- On ident shift to state 1411
## Reductions:

State 1410:
## Known stack suffix:
## mod_ext_longident DOT UIDENT
## LR(1) items:
ident -> UIDENT . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
mod_ext_longident -> mod_ext_longident DOT UIDENT . [ LPAREN DOT ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production ident -> UIDENT
-- On LPAREN DOT
--   reduce production mod_ext_longident -> mod_ext_longident DOT UIDENT

State 1411:
## Known stack suffix:
## mod_ext_longident DOT ident
## LR(1) items:
mty_longident -> mod_ext_longident DOT ident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production mty_longident -> mod_ext_longident DOT ident

State 1412:
## Known stack suffix:
## ident
## LR(1) items:
mty_longident -> ident . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production mty_longident -> ident

State 1413:
## Known stack suffix:
## LPAREN module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
module_type -> LPAREN module_type . RPAREN [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> LPAREN module_type . error [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 1414
-- On WITH shift to state 1387
-- On RPAREN shift to state 1415
## Reductions:

State 1414:
## Known stack suffix:
## LPAREN module_type error
## LR(1) items:
module_type -> LPAREN module_type error . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> LPAREN module_type error

State 1415:
## Known stack suffix:
## LPAREN module_type RPAREN
## LR(1) items:
module_type -> LPAREN module_type RPAREN . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> LPAREN module_type RPAREN

State 1416:
## Known stack suffix:
## INCLUDE module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> INCLUDE module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1387
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> INCLUDE module_type

State 1417:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
signature_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 1418
## Reductions:

State 1418:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
signature_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1419
## Reductions:

State 1419:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1420
## Reductions:

State 1420:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
signature_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On EQUAL shift to state 1421
-- On AS shift to state 180
## Reductions:

State 1421:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STRING shift to state 1422
-- On primitive_declaration shift to state 1424
## Reductions:

State 1422:
## Known stack suffix:
## STRING
## LR(1) items:
primitive_declaration -> STRING . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
primitive_declaration -> STRING . primitive_declaration [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STRING shift to state 1422
-- On primitive_declaration shift to state 1423
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production primitive_declaration -> STRING

State 1423:
## Known stack suffix:
## STRING primitive_declaration
## LR(1) items:
primitive_declaration -> STRING primitive_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production primitive_declaration -> STRING primitive_declaration

State 1424:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1425:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
signature_item -> EXCEPTION . UIDENT constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1426
## Reductions:

State 1426:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
signature_item -> EXCEPTION UIDENT . constructor_arguments [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On OF shift to state 1427
-- On constructor_arguments shift to state 1429
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production constructor_arguments ->

State 1427:
## Known stack suffix:
## OF
## LR(1) items:
constructor_arguments -> OF . core_type_list [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 1301
-- On mod_ext_longident shift to state 207
-- On core_type_list shift to state 1428
## Reductions:

State 1428:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
constructor_arguments -> OF core_type_list . [ error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
core_type_list -> core_type_list . STAR simple_core_type [ error VAL TYPE STAR SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STAR shift to state 1303
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production constructor_arguments -> OF core_type_list

State 1429:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
signature_item -> EXCEPTION UIDENT constructor_arguments . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> EXCEPTION UIDENT constructor_arguments

State 1430:
## Known stack suffix:
## SIG signature END
## LR(1) items:
module_type -> SIG signature END . [ error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error WITH VAL TYPE SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_type -> SIG signature END

State 1431:
## Known stack suffix:
## CLASS
## LR(1) items:
signature_item -> CLASS . class_type_list END [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1432
-- On virtual_flag shift to state 1433
-- On class_type_list shift to state 1481
-- On class_type shift to state 1485
## Reductions:
-- On QUOTE LPAREN LIDENT CLOSED
--   reduce production virtual_flag ->

State 1432:
## Known stack suffix:
## VIRTUAL
## LR(1) items:
virtual_flag -> VIRTUAL . [ QUOTE LPAREN LIDENT CLOSED ]
## Transitions:
## Reductions:
-- On QUOTE LPAREN LIDENT CLOSED
--   reduce production virtual_flag -> VIRTUAL

State 1433:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_type -> virtual_flag . closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On CLOSED shift to state 1434
-- On closed_flag shift to state 1435
## Reductions:
-- On QUOTE LPAREN LIDENT
--   reduce production closed_flag ->

State 1434:
## Known stack suffix:
## CLOSED
## LR(1) items:
closed_flag -> CLOSED . [ QUOTE LPAREN LIDENT ]
## Transitions:
## Reductions:
-- On QUOTE LPAREN LIDENT
--   reduce production closed_flag -> CLOSED

State 1435:
## Known stack suffix:
## virtual_flag closed_flag
## LR(1) items:
class_type -> virtual_flag closed_flag . class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1436
-- On type_parameter shift to state 1249
-- On class_type_parameters shift to state 1437
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1436:
## Known stack suffix:
## type_parameters
## LR(1) items:
class_type_parameters -> type_parameters . [ LIDENT ]
## Transitions:
## Reductions:
-- On LIDENT
--   reduce production class_type_parameters -> type_parameters

State 1437:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters . LIDENT type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On LIDENT shift to state 1438
## Reductions:

State 1438:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT . type_list self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On LPAREN shift to state 1439
-- On type_list shift to state 1443
## Reductions:

State 1439:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_list -> LPAREN . core_type RPAREN type_list [ EQUAL COLON ]
type_list -> LPAREN . core_type RPAREN [ EQUAL COLON ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1440
## Reductions:

State 1440:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER AS ]
type_list -> LPAREN core_type . RPAREN type_list [ EQUAL COLON ]
type_list -> LPAREN core_type . RPAREN [ EQUAL COLON ]
## Transitions:
-- On RPAREN shift to state 1441
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:

State 1441:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
type_list -> LPAREN core_type RPAREN . type_list [ EQUAL COLON ]
type_list -> LPAREN core_type RPAREN . [ EQUAL COLON ]
## Transitions:
-- On LPAREN shift to state 1439
-- On type_list shift to state 1442
## Reductions:
-- On EQUAL COLON
--   reduce production type_list -> LPAREN core_type RPAREN

State 1442:
## Known stack suffix:
## LPAREN core_type RPAREN type_list
## LR(1) items:
type_list -> LPAREN core_type RPAREN type_list . [ EQUAL COLON ]
## Transitions:
## Reductions:
-- On EQUAL COLON
--   reduce production type_list -> LPAREN core_type RPAREN type_list

State 1443:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list . self_type EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On COLON shift to state 1444
-- On self_type shift to state 1446
## Reductions:
-- On EQUAL
--   reduce production self_type ->

State 1444:
## Known stack suffix:
## COLON
## LR(1) items:
self_type -> COLON . type_parameter [ EQUAL ]
## Transitions:
-- On QUOTE shift to state 181
-- On type_parameter shift to state 1445
## Reductions:

State 1445:
## Known stack suffix:
## COLON type_parameter
## LR(1) items:
self_type -> COLON type_parameter . [ EQUAL ]
## Transitions:
## Reductions:
-- On EQUAL
--   reduce production self_type -> COLON type_parameter

State 1446:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type . EQUAL constraints class_type_fields [ END AND ]
## Transitions:
-- On EQUAL shift to state 1447
## Reductions:

State 1447:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL . constraints class_type_fields [ END AND ]
## Transitions:
-- On constraints shift to state 1448
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END CONSTRAINT AND
--   reduce production constraints ->

State 1448:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints . class_type_fields [ END AND ]
constraints -> constraints . CONSTRAINT constrain [ VIRTUAL VAL METHOD INHERIT END CONSTRAINT AND ]
## Transitions:
-- On CONSTRAINT shift to state 1244
-- On class_type_fields shift to state 1449
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_type_fields ->

State 1449:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields
## LR(1) items:
class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields . [ END AND ]
class_type_fields -> class_type_fields . INHERIT ancestor_type [ VIRTUAL VAL METHOD INHERIT END AND ]
class_type_fields -> class_type_fields . VAL value_type [ VIRTUAL VAL METHOD INHERIT END AND ]
class_type_fields -> class_type_fields . virtual_method [ VIRTUAL VAL METHOD INHERIT END AND ]
class_type_fields -> class_type_fields . method_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On VIRTUAL shift to state 1450
-- On VAL shift to state 1456
-- On METHOD shift to state 1464
-- On INHERIT shift to state 1469
-- On virtual_method shift to state 1479
-- On method_type shift to state 1480
## Reductions:
-- On END AND
--   reduce production class_type -> virtual_flag closed_flag class_type_parameters LIDENT type_list self_type EQUAL constraints class_type_fields

State 1450:
## Known stack suffix:
## VIRTUAL
## LR(1) items:
virtual_method -> VIRTUAL . protected_flag label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1451
-- On protected_flag shift to state 1452
## Reductions:
-- On LIDENT
--   reduce production protected_flag ->

State 1451:
## Known stack suffix:
## PROTECTED
## LR(1) items:
protected_flag -> PROTECTED . [ LIDENT ]
## Transitions:
## Reductions:
-- On LIDENT
--   reduce production protected_flag -> PROTECTED

State 1452:
## Known stack suffix:
## VIRTUAL protected_flag
## LR(1) items:
virtual_method -> VIRTUAL protected_flag . label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 1453
## Reductions:

State 1453:
## Known stack suffix:
## VIRTUAL protected_flag label
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label . COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1454
## Reductions:

State 1454:
## Known stack suffix:
## VIRTUAL protected_flag label COLON
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label COLON . core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1455
## Reductions:

State 1455:
## Known stack suffix:
## VIRTUAL protected_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
virtual_method -> VIRTUAL protected_flag label COLON core_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type

State 1456:
## Known stack suffix:
## class_type_fields VAL
## LR(1) items:
class_type_fields -> class_type_fields VAL . value_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PRIVATE shift to state 1457
-- On value_type shift to state 1458
-- On private_flag shift to state 1459
## Reductions:
-- On MUTABLE LIDENT
--   reduce production private_flag ->

State 1457:
## Known stack suffix:
## PRIVATE
## LR(1) items:
private_flag -> PRIVATE . [ MUTABLE LIDENT ]
## Transitions:
## Reductions:
-- On MUTABLE LIDENT
--   reduce production private_flag -> PRIVATE

State 1458:
## Known stack suffix:
## class_type_fields VAL value_type
## LR(1) items:
class_type_fields -> class_type_fields VAL value_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_type_fields -> class_type_fields VAL value_type

State 1459:
## Known stack suffix:
## private_flag
## LR(1) items:
value_type -> private_flag . mutable_flag label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
value_type -> private_flag . mutable_flag label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1460
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1460:
## Known stack suffix:
## private_flag mutable_flag
## LR(1) items:
value_type -> private_flag mutable_flag . label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
value_type -> private_flag mutable_flag . label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 1461
## Reductions:

State 1461:
## Known stack suffix:
## private_flag mutable_flag label
## LR(1) items:
value_type -> private_flag mutable_flag label . COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
value_type -> private_flag mutable_flag label . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1462
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production value_type -> private_flag mutable_flag label

State 1462:
## Known stack suffix:
## private_flag mutable_flag label COLON
## LR(1) items:
value_type -> private_flag mutable_flag label COLON . core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1463
## Reductions:

State 1463:
## Known stack suffix:
## private_flag mutable_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
value_type -> private_flag mutable_flag label COLON core_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production value_type -> private_flag mutable_flag label COLON core_type

State 1464:
## Known stack suffix:
## METHOD
## LR(1) items:
method_type -> METHOD . protected_flag label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
method_type -> METHOD . protected_flag label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1451
-- On protected_flag shift to state 1465
## Reductions:
-- On LIDENT
--   reduce production protected_flag ->

State 1465:
## Known stack suffix:
## METHOD protected_flag
## LR(1) items:
method_type -> METHOD protected_flag . label COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
method_type -> METHOD protected_flag . label [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 1466
## Reductions:

State 1466:
## Known stack suffix:
## METHOD protected_flag label
## LR(1) items:
method_type -> METHOD protected_flag label . COLON core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
method_type -> METHOD protected_flag label . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1467
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production method_type -> METHOD protected_flag label

State 1467:
## Known stack suffix:
## METHOD protected_flag label COLON
## LR(1) items:
method_type -> METHOD protected_flag label COLON . core_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1468
## Reductions:

State 1468:
## Known stack suffix:
## METHOD protected_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
method_type -> METHOD protected_flag label COLON core_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production method_type -> METHOD protected_flag label COLON core_type

State 1469:
## Known stack suffix:
## class_type_fields INHERIT
## LR(1) items:
class_type_fields -> class_type_fields INHERIT . ancestor_type [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LPAREN shift to state 1470
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 1477
-- On ancestor_type shift to state 1478
## Reductions:

State 1470:
## Known stack suffix:
## LPAREN
## LR(1) items:
ancestor_type -> LPAREN . core_type_comma_list RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
ancestor_type -> LPAREN . core_type RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type_comma_list shift to state 1471
-- On core_type shift to state 1474
## Reductions:

State 1471:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
ancestor_type -> LPAREN core_type_comma_list . RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1472
-- On COMMA shift to state 195
## Reductions:

State 1472:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
ancestor_type -> LPAREN core_type_comma_list RPAREN . class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 1473
## Reductions:

State 1473:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident
## LR(1) items:
ancestor_type -> LPAREN core_type_comma_list RPAREN class_longident . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production ancestor_type -> LPAREN core_type_comma_list RPAREN class_longident

State 1474:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
ancestor_type -> LPAREN core_type . RPAREN class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1475
-- On MINUSGREATER shift to state 178
-- On COMMA shift to state 199
-- On AS shift to state 180
## Reductions:

State 1475:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
ancestor_type -> LPAREN core_type RPAREN . class_longident [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 1476
## Reductions:

State 1476:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident
## LR(1) items:
ancestor_type -> LPAREN core_type RPAREN class_longident . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production ancestor_type -> LPAREN core_type RPAREN class_longident

State 1477:
## Known stack suffix:
## class_longident
## LR(1) items:
ancestor_type -> class_longident . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production ancestor_type -> class_longident

State 1478:
## Known stack suffix:
## class_type_fields INHERIT ancestor_type
## LR(1) items:
class_type_fields -> class_type_fields INHERIT ancestor_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_type_fields -> class_type_fields INHERIT ancestor_type

State 1479:
## Known stack suffix:
## class_type_fields virtual_method
## LR(1) items:
class_type_fields -> class_type_fields virtual_method . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_type_fields -> class_type_fields virtual_method

State 1480:
## Known stack suffix:
## class_type_fields method_type
## LR(1) items:
class_type_fields -> class_type_fields method_type . [ VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_type_fields -> class_type_fields method_type

State 1481:
## Known stack suffix:
## CLASS class_type_list
## LR(1) items:
class_type_list -> class_type_list . AND class_type [ END AND ]
signature_item -> CLASS class_type_list . END [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On END shift to state 1482
-- On AND shift to state 1483
## Reductions:

State 1482:
## Known stack suffix:
## CLASS class_type_list END
## LR(1) items:
signature_item -> CLASS class_type_list END . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> CLASS class_type_list END

State 1483:
## Known stack suffix:
## class_type_list AND
## LR(1) items:
class_type_list -> class_type_list AND . class_type [ END AND ]
## Transitions:
-- On VIRTUAL shift to state 1432
-- On virtual_flag shift to state 1433
-- On class_type shift to state 1484
## Reductions:
-- On QUOTE LPAREN LIDENT CLOSED
--   reduce production virtual_flag ->

State 1484:
## Known stack suffix:
## class_type_list AND class_type
## LR(1) items:
class_type_list -> class_type_list AND class_type . [ END AND ]
## Transitions:
## Reductions:
-- On END AND
--   reduce production class_type_list -> class_type_list AND class_type

State 1485:
## Known stack suffix:
## class_type
## LR(1) items:
class_type_list -> class_type . [ END AND ]
## Transitions:
## Reductions:
-- On END AND
--   reduce production class_type_list -> class_type

State 1486:
## Known stack suffix:
## signature signature_item
## LR(1) items:
signature -> signature signature_item . [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature -> signature signature_item . SEMISEMI [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On SEMISEMI shift to state 1487
## Reductions:
-- On error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature -> signature signature_item

State 1487:
## Known stack suffix:
## signature signature_item SEMISEMI
## LR(1) items:
signature -> signature signature_item SEMISEMI . [ error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature -> signature signature_item SEMISEMI

State 1488:
## Known stack suffix:
## LPAREN module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
module_type -> LPAREN module_type . RPAREN [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
module_type -> LPAREN module_type . error [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
-- On error shift to state 1489
-- On WITH shift to state 1387
-- On RPAREN shift to state 1490
## Reductions:

State 1489:
## Known stack suffix:
## LPAREN module_type error
## LR(1) items:
module_type -> LPAREN module_type error . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> LPAREN module_type error

State 1490:
## Known stack suffix:
## LPAREN module_type RPAREN
## LR(1) items:
module_type -> LPAREN module_type RPAREN . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> LPAREN module_type RPAREN

State 1491:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type . RPAREN module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1492
## Reductions:

State 1492:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN . module_declaration [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1339
-- On COLON shift to state 1493
-- On module_declaration shift to state 1495
## Reductions:

State 1493:
## Known stack suffix:
## COLON
## LR(1) items:
module_declaration -> COLON . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1494
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1494:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_declaration -> COLON module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1387
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_declaration -> COLON module_type

State 1495:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_declaration
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration

State 1496:
## Known stack suffix:
## MODULE UIDENT module_declaration
## LR(1) items:
signature_item -> MODULE UIDENT module_declaration . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> MODULE UIDENT module_declaration

State 1497:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
signature_item -> MODULE TYPE . ident [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE . ident EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 137
-- On LIDENT shift to state 138
-- On ident shift to state 1498
## Reductions:

State 1498:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
signature_item -> MODULE TYPE ident . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE ident . EQUAL module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On EQUAL shift to state 1499
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> MODULE TYPE ident

State 1499:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
signature_item -> MODULE TYPE ident EQUAL . module_type [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1500
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1500:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
signature_item -> MODULE TYPE ident EQUAL module_type . [ error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1387
## Reductions:
-- On error VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION END CLASS
--   reduce production signature_item -> MODULE TYPE ident EQUAL module_type

State 1501:
## Known stack suffix:
## SIG signature END
## LR(1) items:
module_type -> SIG signature END . [ WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS ]
## Transitions:
## Reductions:
-- On WITH VAL TYPE SHARP SEMISEMI RPAREN OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EQUAL EOF CLASS
--   reduce production module_type -> SIG signature END

State 1502:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type . RPAREN module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1503
## Reductions:

State 1503:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN . module_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1259
-- On EQUAL shift to state 1504
-- On COLON shift to state 1681
-- On module_binding shift to state 1685
## Reductions:

State 1504:
## Known stack suffix:
## EQUAL
## LR(1) items:
module_binding -> EQUAL . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRUCT shift to state 1505
-- On LPAREN shift to state 1659
-- On FUNCTOR shift to state 1667
-- On module_expr shift to state 1680
-- On mod_longident shift to state 1679
## Reductions:

State 1505:
## Known stack suffix:
## STRUCT
## LR(1) items:
module_expr -> STRUCT . structure END [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> STRUCT . structure error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TYPE shift to state 1506
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On SEMISEMI shift to state 1508
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On OPEN shift to state 1509
-- On NEW shift to state 277
-- On MODULE shift to state 1511
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 1520
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On structure_tail shift to state 1610
-- On structure_item shift to state 1600
-- On structure shift to state 1656
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1614
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1506:
## Known stack suffix:
## TYPE
## LR(1) items:
structure_item -> TYPE . type_declarations [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1271
-- On type_parameter shift to state 1249
-- On type_declarations shift to state 1507
-- On type_declaration shift to state 1334
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1507:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
structure_item -> TYPE type_declarations . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
type_declarations -> type_declarations . AND type_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS AND ]
## Transitions:
-- On AND shift to state 1332
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> TYPE type_declarations

State 1508:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
structure_tail -> SEMISEMI . [ error END ]
structure_tail -> SEMISEMI . seq_expr structure_tail [ error END ]
structure_tail -> SEMISEMI . structure_item structure_tail [ error END ]
structure_tail -> SEMISEMI . LET LOC loc_bindings structure_tail [ error END ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TYPE shift to state 1506
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On OPEN shift to state 1509
-- On NEW shift to state 277
-- On MODULE shift to state 1511
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 1648
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On structure_item shift to state 1652
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1654
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On error END
--   reduce production structure_tail -> SEMISEMI

State 1509:
## Known stack suffix:
## OPEN
## LR(1) items:
structure_item -> OPEN . mod_longident [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On mod_longident shift to state 1510
## Reductions:

State 1510:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END DOT CLASS ]
structure_item -> OPEN mod_longident . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On DOT shift to state 84
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> OPEN mod_longident

State 1511:
## Known stack suffix:
## MODULE
## LR(1) items:
structure_item -> MODULE . UIDENT module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_item -> MODULE . TYPE ident EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1512
-- On TYPE shift to state 1644
## Reductions:

State 1512:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
structure_item -> MODULE UIDENT . module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1513
-- On EQUAL shift to state 1518
-- On COLON shift to state 1638
-- On module_binding shift to state 1643
## Reductions:

State 1513:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_binding -> LPAREN . UIDENT COLON module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1514
## Reductions:

State 1514:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_binding -> LPAREN UIDENT . COLON module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1515
## Reductions:

State 1515:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_binding -> LPAREN UIDENT COLON . module_type RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1516
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1516:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type . RPAREN module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1517
## Reductions:

State 1517:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN . module_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1513
-- On EQUAL shift to state 1518
-- On COLON shift to state 1638
-- On module_binding shift to state 1642
## Reductions:

State 1518:
## Known stack suffix:
## EQUAL
## LR(1) items:
module_binding -> EQUAL . module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On STRUCT shift to state 1519
-- On LPAREN shift to state 1616
-- On FUNCTOR shift to state 1617
-- On module_expr shift to state 1637
-- On mod_longident shift to state 1629
## Reductions:

State 1519:
## Known stack suffix:
## STRUCT
## LR(1) items:
module_expr -> STRUCT . structure END [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> STRUCT . structure error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TYPE shift to state 1506
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On SEMISEMI shift to state 1508
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On OPEN shift to state 1509
-- On NEW shift to state 277
-- On MODULE shift to state 1511
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 1520
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On structure_tail shift to state 1610
-- On structure_item shift to state 1600
-- On structure shift to state 1611
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1614
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1520:
## Known stack suffix:
## LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . JOINDEF def_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_item -> LET . rec_flag let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_tail -> LET . LOC loc_bindings structure_tail [ error END ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1521
-- On JOINDEF shift to state 1606
-- On rec_flag shift to state 1608
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1521:
## Known stack suffix:
## LET LOC
## LR(1) items:
expr0 -> LET LOC . loc_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> LET LOC . loc_bindings structure_tail [ error END ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 1522
-- On loc_binding shift to state 690
## Reductions:

State 1522:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
expr0 -> LET LOC loc_bindings . IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> LET LOC loc_bindings . structure_tail [ error END ]
## Transitions:
-- On error shift to state 334
-- On TYPE shift to state 1506
-- On SEMISEMI shift to state 1508
-- On OPEN shift to state 1509
-- On MODULE shift to state 1511
-- On LET shift to state 1523
-- On IN shift to state 335
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On structure_tail shift to state 1599
-- On structure_item shift to state 1600
## Reductions:
-- On error END
--   reduce production structure_tail ->
** Conflict on error

State 1523:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . JOINDEF def_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_item -> LET . rec_flag let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_tail -> LET . LOC loc_bindings structure_tail [ error END ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1524
-- On JOINDEF shift to state 1602
-- On rec_flag shift to state 1604
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1524:
## Known stack suffix:
## LET LOC
## LR(1) items:
structure_tail -> LET LOC . loc_bindings structure_tail [ error END ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 1525
-- On loc_binding shift to state 690
## Reductions:

State 1525:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
structure_tail -> LET LOC loc_bindings . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1506
-- On SEMISEMI shift to state 1508
-- On OPEN shift to state 1509
-- On MODULE shift to state 1511
-- On LET shift to state 1523
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On structure_tail shift to state 1599
-- On structure_item shift to state 1600
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1526:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
structure_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 1527
## Reductions:

State 1527:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
structure_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On COLON shift to state 1528
## Reductions:

State 1528:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1529
## Reductions:

State 1529:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
structure_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On EQUAL shift to state 1530
-- On AS shift to state 180
## Reductions:

State 1530:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On STRING shift to state 1422
-- On primitive_declaration shift to state 1531
## Reductions:

State 1531:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1532:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
structure_item -> EXCEPTION . UIDENT constructor_arguments [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1533
## Reductions:

State 1533:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
structure_item -> EXCEPTION UIDENT . constructor_arguments [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On OF shift to state 1427
-- On constructor_arguments shift to state 1534
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production constructor_arguments ->

State 1534:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
structure_item -> EXCEPTION UIDENT constructor_arguments . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> EXCEPTION UIDENT constructor_arguments

State 1535:
## Known stack suffix:
## CLASS
## LR(1) items:
structure_item -> CLASS . class_list END [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_item -> CLASS . class_list error [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1432
-- On virtual_flag shift to state 1536
-- On class_list shift to state 1593
-- On class_def shift to state 1598
## Reductions:
-- On QUOTE LPAREN LIDENT CLOSED
--   reduce production virtual_flag ->

State 1536:
## Known stack suffix:
## virtual_flag
## LR(1) items:
class_def -> virtual_flag . closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On CLOSED shift to state 1434
-- On closed_flag shift to state 1537
## Reductions:
-- On QUOTE LPAREN LIDENT
--   reduce production closed_flag ->

State 1537:
## Known stack suffix:
## virtual_flag closed_flag
## LR(1) items:
class_def -> virtual_flag closed_flag . class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1436
-- On type_parameter shift to state 1249
-- On class_type_parameters shift to state 1538
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1538:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters . LIDENT simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On LIDENT shift to state 1539
## Reductions:

State 1539:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT . simple_pattern_list self self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On simple_pattern_list shift to state 1540
-- On simple_pattern shift to state 1592
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 1540:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list . self self_type EQUAL constraints class_fields [ error END AND ]
simple_pattern_list -> simple_pattern_list . simple_pattern [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On AS shift to state 1541
-- On val_ident shift to state 265
-- On simple_pattern shift to state 1543
-- On signed_constant shift to state 267
-- On self shift to state 1544
-- On mod_longident shift to state 306
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:
-- On EQUAL COLON
--   reduce production self ->

State 1541:
## Known stack suffix:
## AS
## LR(1) items:
self -> AS . LIDENT [ EQUAL COLON ]
## Transitions:
-- On LIDENT shift to state 1542
## Reductions:

State 1542:
## Known stack suffix:
## AS LIDENT
## LR(1) items:
self -> AS LIDENT . [ EQUAL COLON ]
## Transitions:
## Reductions:
-- On EQUAL COLON
--   reduce production self -> AS LIDENT

State 1543:
## Known stack suffix:
## simple_pattern_list simple_pattern
## LR(1) items:
simple_pattern_list -> simple_pattern_list simple_pattern . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS ]
## Transitions:
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS
--   reduce production simple_pattern_list -> simple_pattern_list simple_pattern

State 1544:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self . self_type EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On COLON shift to state 1444
-- On self_type shift to state 1545
## Reductions:
-- On EQUAL
--   reduce production self_type ->

State 1545:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type . EQUAL constraints class_fields [ error END AND ]
## Transitions:
-- On EQUAL shift to state 1546
## Reductions:

State 1546:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL . constraints class_fields [ error END AND ]
## Transitions:
-- On constraints shift to state 1547
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END CONSTRAINT AND
--   reduce production constraints ->

State 1547:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints . class_fields [ error END AND ]
constraints -> constraints . CONSTRAINT constrain [ error VIRTUAL VAL METHOD INHERIT END CONSTRAINT AND ]
## Transitions:
-- On CONSTRAINT shift to state 1326
-- On class_fields shift to state 1548
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_fields ->

State 1548:
## Known stack suffix:
## virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields
## LR(1) items:
class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields . [ error END AND ]
class_fields -> class_fields . INHERIT ancestor [ error VIRTUAL VAL METHOD INHERIT END AND ]
class_fields -> class_fields . VAL value [ error VIRTUAL VAL METHOD INHERIT END AND ]
class_fields -> class_fields . virtual_method [ error VIRTUAL VAL METHOD INHERIT END AND ]
class_fields -> class_fields . method_def [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On VIRTUAL shift to state 1549
-- On VAL shift to state 1554
-- On METHOD shift to state 1561
-- On INHERIT shift to state 1572
-- On virtual_method shift to state 1590
-- On method_def shift to state 1591
## Reductions:
-- On error END AND
--   reduce production class_def -> virtual_flag closed_flag class_type_parameters LIDENT simple_pattern_list self self_type EQUAL constraints class_fields

State 1549:
## Known stack suffix:
## VIRTUAL
## LR(1) items:
virtual_method -> VIRTUAL . protected_flag label COLON core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1451
-- On protected_flag shift to state 1550
## Reductions:
-- On LIDENT
--   reduce production protected_flag ->

State 1550:
## Known stack suffix:
## VIRTUAL protected_flag
## LR(1) items:
virtual_method -> VIRTUAL protected_flag . label COLON core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 1551
## Reductions:

State 1551:
## Known stack suffix:
## VIRTUAL protected_flag label
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label . COLON core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On COLON shift to state 1552
## Reductions:

State 1552:
## Known stack suffix:
## VIRTUAL protected_flag label COLON
## LR(1) items:
virtual_method -> VIRTUAL protected_flag label COLON . core_type [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 128
-- On UIDENT shift to state 129
-- On SHARP shift to state 130
-- On QUOTE shift to state 136
-- On LPAREN shift to state 140
-- On LIDENT shift to state 205
-- On LESSLESS shift to state 212
-- On LESS shift to state 215
-- On type_longident shift to state 219
-- On simple_core_type shift to state 220
-- On mod_ext_longident shift to state 207
-- On core_type_tuple shift to state 226
-- On core_type shift to state 1553
## Reductions:

State 1553:
## Known stack suffix:
## VIRTUAL protected_flag label COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ error VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
core_type -> core_type . AS type_parameter [ error VIRTUAL VAL MINUSGREATER METHOD INHERIT END AS AND ]
virtual_method -> VIRTUAL protected_flag label COLON core_type . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MINUSGREATER shift to state 232
-- On AS shift to state 234
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production virtual_method -> VIRTUAL protected_flag label COLON core_type

State 1554:
## Known stack suffix:
## class_fields VAL
## LR(1) items:
class_fields -> class_fields VAL . value [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PRIVATE shift to state 1457
-- On value shift to state 1555
-- On private_flag shift to state 1556
## Reductions:
-- On MUTABLE LIDENT
--   reduce production private_flag ->

State 1555:
## Known stack suffix:
## class_fields VAL value
## LR(1) items:
class_fields -> class_fields VAL value . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_fields -> class_fields VAL value

State 1556:
## Known stack suffix:
## private_flag
## LR(1) items:
value -> private_flag . mutable_flag label EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
value -> private_flag . mutable_flag label [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On MUTABLE shift to state 1191
-- On mutable_flag shift to state 1557
## Reductions:
-- On LIDENT
--   reduce production mutable_flag ->

State 1557:
## Known stack suffix:
## private_flag mutable_flag
## LR(1) items:
value -> private_flag mutable_flag . label EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
value -> private_flag mutable_flag . label [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 414
-- On label shift to state 1558
## Reductions:

State 1558:
## Known stack suffix:
## private_flag mutable_flag label
## LR(1) items:
value -> private_flag mutable_flag label . EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
value -> private_flag mutable_flag label . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On EQUAL shift to state 1559
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production value -> private_flag mutable_flag label

State 1559:
## Known stack suffix:
## private_flag mutable_flag label EQUAL
## LR(1) items:
value -> private_flag mutable_flag label EQUAL . seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1560
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1560:
## Known stack suffix:
## private_flag mutable_flag label EQUAL seq_expr
## LR(1) items:
value -> private_flag mutable_flag label EQUAL seq_expr . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production value -> private_flag mutable_flag label EQUAL seq_expr

State 1561:
## Known stack suffix:
## METHOD
## LR(1) items:
method_def -> METHOD . protected_flag label meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On PROTECTED shift to state 1451
-- On protected_flag shift to state 1562
## Reductions:
-- On LIDENT
--   reduce production protected_flag ->

State 1562:
## Known stack suffix:
## METHOD protected_flag
## LR(1) items:
method_def -> METHOD protected_flag . label meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 152
-- On label shift to state 1563
## Reductions:

State 1563:
## Known stack suffix:
## METHOD protected_flag label
## LR(1) items:
method_def -> METHOD protected_flag label . meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EQUAL shift to state 1564
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On type_constraint shift to state 1566
-- On simple_pattern shift to state 1569
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On meth_binding shift to state 1571
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 1564:
## Known stack suffix:
## EQUAL
## LR(1) items:
meth_binding -> EQUAL . seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1565
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1565:
## Known stack suffix:
## EQUAL seq_expr
## LR(1) items:
meth_binding -> EQUAL seq_expr . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production meth_binding -> EQUAL seq_expr

State 1566:
## Known stack suffix:
## type_constraint
## LR(1) items:
meth_binding -> type_constraint . EQUAL seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On EQUAL shift to state 1567
## Reductions:

State 1567:
## Known stack suffix:
## type_constraint EQUAL
## LR(1) items:
meth_binding -> type_constraint EQUAL . seq_expr [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On WHILE shift to state 5
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRY shift to state 25
-- On TRUE shift to state 26
-- On SUBTRACTIVE shift to state 27
-- On STRING shift to state 28
-- On SPAWN shift to state 29
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On PARSER shift to state 281
-- On NEW shift to state 277
-- On MATCH shift to state 288
-- On LPAREN shift to state 279
-- On LIDENT shift to state 330
-- On LET shift to state 331
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 346
-- On LAZY shift to state 355
-- On INT shift to state 69
-- On IF shift to state 361
-- On FUNCTION shift to state 363
-- On FUN shift to state 383
-- On FOR shift to state 386
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On ASSERT shift to state 409
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 418
-- On seq_expr shift to state 1568
-- On mod_longident shift to state 425
-- On label shift to state 428
-- On expr_comma_list shift to state 430
-- On expr0 shift to state 432
-- On expr shift to state 474
-- On constr_longident shift to state 439
-- On constant shift to state 442
## Reductions:

State 1568:
## Known stack suffix:
## type_constraint EQUAL seq_expr
## LR(1) items:
meth_binding -> type_constraint EQUAL seq_expr . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production meth_binding -> type_constraint EQUAL seq_expr

State 1569:
## Known stack suffix:
## simple_pattern
## LR(1) items:
meth_binding -> simple_pattern . meth_binding [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EQUAL shift to state 1564
-- On COLONGREATER shift to state 646
-- On COLON shift to state 649
-- On CHAR shift to state 262
-- On val_ident shift to state 265
-- On type_constraint shift to state 1566
-- On simple_pattern shift to state 1569
-- On signed_constant shift to state 267
-- On mod_longident shift to state 306
-- On meth_binding shift to state 1570
-- On constr_longident shift to state 308
-- On constant shift to state 309
## Reductions:

State 1570:
## Known stack suffix:
## simple_pattern meth_binding
## LR(1) items:
meth_binding -> simple_pattern meth_binding . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production meth_binding -> simple_pattern meth_binding

State 1571:
## Known stack suffix:
## METHOD protected_flag label meth_binding
## LR(1) items:
method_def -> METHOD protected_flag label meth_binding . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production method_def -> METHOD protected_flag label meth_binding

State 1572:
## Known stack suffix:
## class_fields INHERIT
## LR(1) items:
class_fields -> class_fields INHERIT . ancestor [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LPAREN shift to state 1573
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 1586
-- On ancestor shift to state 1589
## Reductions:

State 1573:
## Known stack suffix:
## LPAREN
## LR(1) items:
ancestor -> LPAREN . core_type_comma_list RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
ancestor -> LPAREN . core_type RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type_comma_list shift to state 1574
-- On core_type shift to state 1581
## Reductions:

State 1574:
## Known stack suffix:
## LPAREN core_type_comma_list
## LR(1) items:
ancestor -> LPAREN core_type_comma_list . RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
core_type_comma_list -> core_type_comma_list . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1575
-- On COMMA shift to state 195
## Reductions:

State 1575:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN . class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 1576
## Reductions:

State 1576:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN class_longident . simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr_list shift to state 1577
-- On simple_expr shift to state 492
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 1577:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident simple_expr_list
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN class_longident simple_expr_list . self [ error VIRTUAL VAL METHOD INHERIT END AND ]
simple_expr_list -> simple_expr_list . simple_expr [ error VIRTUAL VARTYPE VAL UIDENT TRUE STRING RELOCINFO PREFIXOP NEW METHOD LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT FLOAT FALSE END CHAR BEGIN AS AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On AS shift to state 1578
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 491
-- On self shift to state 1580
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production self ->

State 1578:
## Known stack suffix:
## AS
## LR(1) items:
self -> AS . LIDENT [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On LIDENT shift to state 1579
## Reductions:

State 1579:
## Known stack suffix:
## AS LIDENT
## LR(1) items:
self -> AS LIDENT . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production self -> AS LIDENT

State 1580:
## Known stack suffix:
## LPAREN core_type_comma_list RPAREN class_longident simple_expr_list self
## LR(1) items:
ancestor -> LPAREN core_type_comma_list RPAREN class_longident simple_expr_list self . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production ancestor -> LPAREN core_type_comma_list RPAREN class_longident simple_expr_list self

State 1581:
## Known stack suffix:
## LPAREN core_type
## LR(1) items:
ancestor -> LPAREN core_type . RPAREN class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
core_type -> core_type . MINUSGREATER core_type [ RPAREN MINUSGREATER COMMA AS ]
core_type -> core_type . AS type_parameter [ RPAREN MINUSGREATER COMMA AS ]
core_type_comma_list -> core_type . COMMA core_type [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 1582
-- On MINUSGREATER shift to state 178
-- On COMMA shift to state 199
-- On AS shift to state 180
## Reductions:

State 1582:
## Known stack suffix:
## LPAREN core_type RPAREN
## LR(1) items:
ancestor -> LPAREN core_type RPAREN . class_longident simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On UIDENT shift to state 3
-- On LIDENT shift to state 16
-- On mod_longident shift to state 17
-- On class_longident shift to state 1583
## Reductions:

State 1583:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident
## LR(1) items:
ancestor -> LPAREN core_type RPAREN class_longident . simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr_list shift to state 1584
-- On simple_expr shift to state 492
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 1584:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident simple_expr_list
## LR(1) items:
ancestor -> LPAREN core_type RPAREN class_longident simple_expr_list . self [ error VIRTUAL VAL METHOD INHERIT END AND ]
simple_expr_list -> simple_expr_list . simple_expr [ error VIRTUAL VARTYPE VAL UIDENT TRUE STRING RELOCINFO PREFIXOP NEW METHOD LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT FLOAT FALSE END CHAR BEGIN AS AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On AS shift to state 1578
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 491
-- On self shift to state 1585
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production self ->

State 1585:
## Known stack suffix:
## LPAREN core_type RPAREN class_longident simple_expr_list self
## LR(1) items:
ancestor -> LPAREN core_type RPAREN class_longident simple_expr_list self . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production ancestor -> LPAREN core_type RPAREN class_longident simple_expr_list self

State 1586:
## Known stack suffix:
## class_longident
## LR(1) items:
ancestor -> class_longident . simple_expr_list self [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr_list shift to state 1587
-- On simple_expr shift to state 492
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:

State 1587:
## Known stack suffix:
## class_longident simple_expr_list
## LR(1) items:
ancestor -> class_longident simple_expr_list . self [ error VIRTUAL VAL METHOD INHERIT END AND ]
simple_expr_list -> simple_expr_list . simple_expr [ error VIRTUAL VARTYPE VAL UIDENT TRUE STRING RELOCINFO PREFIXOP NEW METHOD LPAREN LIDENT LBRACKETLESS LBRACKETBAR LBRACKET LBRACELESS LBRACE INT INHERIT FLOAT FALSE END CHAR BEGIN AS AND ]
## Transitions:
-- On VARTYPE shift to state 23
-- On UIDENT shift to state 24
-- On TRUE shift to state 26
-- On STRING shift to state 28
-- On RELOCINFO shift to state 275
-- On PREFIXOP shift to state 276
-- On NEW shift to state 277
-- On LPAREN shift to state 279
-- On LIDENT shift to state 54
-- On LBRACKETLESS shift to state 337
-- On LBRACKETBAR shift to state 338
-- On LBRACKET shift to state 339
-- On LBRACELESS shift to state 340
-- On LBRACE shift to state 356
-- On INT shift to state 69
-- On FLOAT shift to state 70
-- On FALSE shift to state 71
-- On CHAR shift to state 407
-- On BEGIN shift to state 408
-- On AS shift to state 1578
-- On val_longident shift to state 410
-- On val_ident shift to state 411
-- On simple_expr shift to state 491
-- On self shift to state 1588
-- On mod_longident shift to state 425
-- On constr_longident shift to state 441
-- On constant shift to state 442
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production self ->

State 1588:
## Known stack suffix:
## class_longident simple_expr_list self
## LR(1) items:
ancestor -> class_longident simple_expr_list self . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production ancestor -> class_longident simple_expr_list self

State 1589:
## Known stack suffix:
## class_fields INHERIT ancestor
## LR(1) items:
class_fields -> class_fields INHERIT ancestor . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_fields -> class_fields INHERIT ancestor

State 1590:
## Known stack suffix:
## class_fields virtual_method
## LR(1) items:
class_fields -> class_fields virtual_method . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_fields -> class_fields virtual_method

State 1591:
## Known stack suffix:
## class_fields method_def
## LR(1) items:
class_fields -> class_fields method_def . [ error VIRTUAL VAL METHOD INHERIT END AND ]
## Transitions:
## Reductions:
-- On error VIRTUAL VAL METHOD INHERIT END AND
--   reduce production class_fields -> class_fields method_def

State 1592:
## Known stack suffix:
## simple_pattern
## LR(1) items:
simple_pattern_list -> simple_pattern . [ UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS ]
## Transitions:
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE EQUAL COLON CHAR AS
--   reduce production simple_pattern_list -> simple_pattern

State 1593:
## Known stack suffix:
## CLASS class_list
## LR(1) items:
class_list -> class_list . AND class_def [ error END AND ]
structure_item -> CLASS class_list . END [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_item -> CLASS class_list . error [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 1594
-- On END shift to state 1595
-- On AND shift to state 1596
## Reductions:

State 1594:
## Known stack suffix:
## CLASS class_list error
## LR(1) items:
structure_item -> CLASS class_list error . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> CLASS class_list error

State 1595:
## Known stack suffix:
## CLASS class_list END
## LR(1) items:
structure_item -> CLASS class_list END . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> CLASS class_list END

State 1596:
## Known stack suffix:
## class_list AND
## LR(1) items:
class_list -> class_list AND . class_def [ error END AND ]
## Transitions:
-- On VIRTUAL shift to state 1432
-- On virtual_flag shift to state 1536
-- On class_def shift to state 1597
## Reductions:
-- On QUOTE LPAREN LIDENT CLOSED
--   reduce production virtual_flag ->

State 1597:
## Known stack suffix:
## class_list AND class_def
## LR(1) items:
class_list -> class_list AND class_def . [ error END AND ]
## Transitions:
## Reductions:
-- On error END AND
--   reduce production class_list -> class_list AND class_def

State 1598:
## Known stack suffix:
## class_def
## LR(1) items:
class_list -> class_def . [ error END AND ]
## Transitions:
## Reductions:
-- On error END AND
--   reduce production class_list -> class_def

State 1599:
## Known stack suffix:
## LET LOC loc_bindings structure_tail
## LR(1) items:
structure_tail -> LET LOC loc_bindings structure_tail . [ error END ]
## Transitions:
## Reductions:
-- On error END
--   reduce production structure_tail -> LET LOC loc_bindings structure_tail

State 1600:
## Known stack suffix:
## structure_item
## LR(1) items:
structure_tail -> structure_item . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1506
-- On SEMISEMI shift to state 1508
-- On OPEN shift to state 1509
-- On MODULE shift to state 1511
-- On LET shift to state 1523
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On structure_tail shift to state 1601
-- On structure_item shift to state 1600
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1601:
## Known stack suffix:
## structure_item structure_tail
## LR(1) items:
structure_tail -> structure_item structure_tail . [ error END ]
## Transitions:
## Reductions:
-- On error END
--   reduce production structure_tail -> structure_item structure_tail

State 1602:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
structure_item -> LET JOINDEF . def_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 310
-- On simple_def_binding shift to state 966
-- On join_pattern shift to state 968
-- On def_pattern shift to state 974
-- On def_bindings shift to state 1603
-- On def_binding shift to state 982
## Reductions:

State 1603:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> LET JOINDEF def_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 980
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> LET JOINDEF def_bindings

State 1604:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
structure_item -> LET rec_flag . let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 984
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 993
-- On mod_longident shift to state 306
-- On let_bindings shift to state 1605
-- On let_binding shift to state 1005
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1605:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On AND shift to state 1003
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> LET rec_flag let_bindings

State 1606:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
expr0 -> LET JOINDEF . def_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET JOINDEF . def_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 310
-- On simple_def_binding shift to state 966
-- On join_pattern shift to state 968
-- On def_pattern shift to state 974
-- On def_bindings shift to state 1607
-- On def_binding shift to state 982
## Reductions:

State 1607:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END CLASS AND ]
expr0 -> LET JOINDEF def_bindings . IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET JOINDEF def_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 976
-- On IN shift to state 977
-- On AND shift to state 980
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> LET JOINDEF def_bindings
** Conflict on error

State 1608:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr0 -> LET rec_flag . let_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET rec_flag . let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 984
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 993
-- On mod_longident shift to state 306
-- On let_bindings shift to state 1609
-- On let_binding shift to state 1005
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1609:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr0 -> LET rec_flag let_bindings . IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error TYPE SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION END CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On error shift to state 999
-- On IN shift to state 1000
-- On AND shift to state 1003
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> LET rec_flag let_bindings
** Conflict on error

State 1610:
## Known stack suffix:
## structure_tail
## LR(1) items:
structure -> structure_tail . [ error END ]
## Transitions:
## Reductions:
-- On error END
--   reduce production structure -> structure_tail

State 1611:
## Known stack suffix:
## STRUCT structure
## LR(1) items:
module_expr -> STRUCT structure . END [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> STRUCT structure . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On error shift to state 1612
-- On END shift to state 1613
## Reductions:

State 1612:
## Known stack suffix:
## STRUCT structure error
## LR(1) items:
module_expr -> STRUCT structure error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> STRUCT structure error

State 1613:
## Known stack suffix:
## STRUCT structure END
## LR(1) items:
module_expr -> STRUCT structure END . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> STRUCT structure END

State 1614:
## Known stack suffix:
## seq_expr
## LR(1) items:
structure -> seq_expr . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1506
-- On SEMISEMI shift to state 1508
-- On OPEN shift to state 1509
-- On MODULE shift to state 1511
-- On LET shift to state 1523
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On structure_tail shift to state 1615
-- On structure_item shift to state 1600
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1615:
## Known stack suffix:
## seq_expr structure_tail
## LR(1) items:
structure -> seq_expr structure_tail . [ error END ]
## Transitions:
## Reductions:
-- On error END
--   reduce production structure -> seq_expr structure_tail

State 1616:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_expr -> LPAREN . module_expr COLON module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN . module_expr COLON module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN . module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN . module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On STRUCT shift to state 1519
-- On LPAREN shift to state 1616
-- On FUNCTOR shift to state 1617
-- On module_expr shift to state 1630
-- On mod_longident shift to state 1629
## Reductions:

State 1617:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_expr -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On LPAREN shift to state 1618
## Reductions:

State 1618:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 1619
## Reductions:

State 1619:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On COLON shift to state 1620
## Reductions:

State 1620:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1621
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1621:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1622
## Reductions:

State 1622:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1623
## Reductions:

State 1623:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_expr [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On STRUCT shift to state 1519
-- On LPAREN shift to state 1616
-- On FUNCTOR shift to state 1617
-- On module_expr shift to state 1624
-- On mod_longident shift to state 1629
## Reductions:

State 1624:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On LPAREN shift to state 1625
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
** Conflict on LPAREN

State 1625:
## Known stack suffix:
## module_expr LPAREN
## LR(1) items:
module_expr -> module_expr LPAREN . module_expr RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> module_expr LPAREN . module_expr error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On STRUCT shift to state 1519
-- On LPAREN shift to state 1616
-- On FUNCTOR shift to state 1617
-- On module_expr shift to state 1626
-- On mod_longident shift to state 1629
## Reductions:

State 1626:
## Known stack suffix:
## module_expr LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On error shift to state 1627
-- On RPAREN shift to state 1628
-- On LPAREN shift to state 1625
## Reductions:

State 1627:
## Known stack suffix:
## module_expr LPAREN module_expr error
## LR(1) items:
module_expr -> module_expr LPAREN module_expr error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> module_expr LPAREN module_expr error

State 1628:
## Known stack suffix:
## module_expr LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> module_expr LPAREN module_expr RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> module_expr LPAREN module_expr RPAREN

State 1629:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END DOT COLON CLASS ]
module_expr -> mod_longident . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On DOT shift to state 84
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> mod_longident

State 1630:
## Known stack suffix:
## LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN COLON ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN COLON ]
module_expr -> LPAREN module_expr . COLON module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN module_expr . COLON module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN module_expr . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN module_expr . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On error shift to state 1631
-- On RPAREN shift to state 1632
-- On LPAREN shift to state 1625
-- On COLON shift to state 1633
## Reductions:

State 1631:
## Known stack suffix:
## LPAREN module_expr error
## LR(1) items:
module_expr -> LPAREN module_expr error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> LPAREN module_expr error

State 1632:
## Known stack suffix:
## LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> LPAREN module_expr RPAREN

State 1633:
## Known stack suffix:
## LPAREN module_expr COLON
## LR(1) items:
module_expr -> LPAREN module_expr COLON . module_type RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN module_expr COLON . module_type error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1634
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1634:
## Known stack suffix:
## LPAREN module_expr COLON module_type
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type . RPAREN [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_expr -> LPAREN module_expr COLON module_type . error [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
## Transitions:
-- On error shift to state 1635
-- On WITH shift to state 1387
-- On RPAREN shift to state 1636
## Reductions:

State 1635:
## Known stack suffix:
## LPAREN module_expr COLON module_type error
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type error . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> LPAREN module_expr COLON module_type error

State 1636:
## Known stack suffix:
## LPAREN module_expr COLON module_type RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type RPAREN . [ error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI RPAREN OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END COLON CLASS
--   reduce production module_expr -> LPAREN module_expr COLON module_type RPAREN

State 1637:
## Known stack suffix:
## EQUAL module_expr
## LR(1) items:
module_binding -> EQUAL module_expr . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1625
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production module_binding -> EQUAL module_expr

State 1638:
## Known stack suffix:
## COLON
## LR(1) items:
module_binding -> COLON . module_type EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1639
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1639:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_binding -> COLON module_type . EQUAL module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 1359
-- On EQUAL shift to state 1640
## Reductions:

State 1640:
## Known stack suffix:
## COLON module_type EQUAL
## LR(1) items:
module_binding -> COLON module_type EQUAL . module_expr [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On STRUCT shift to state 1519
-- On LPAREN shift to state 1616
-- On FUNCTOR shift to state 1617
-- On module_expr shift to state 1641
-- On mod_longident shift to state 1629
## Reductions:

State 1641:
## Known stack suffix:
## COLON module_type EQUAL module_expr
## LR(1) items:
module_binding -> COLON module_type EQUAL module_expr . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error TYPE SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On LPAREN shift to state 1625
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production module_binding -> COLON module_type EQUAL module_expr

State 1642:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_binding
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding

State 1643:
## Known stack suffix:
## MODULE UIDENT module_binding
## LR(1) items:
structure_item -> MODULE UIDENT module_binding . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> MODULE UIDENT module_binding

State 1644:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
structure_item -> MODULE TYPE . ident EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 145
-- On LIDENT shift to state 146
-- On ident shift to state 1645
## Reductions:

State 1645:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
structure_item -> MODULE TYPE ident . EQUAL module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On EQUAL shift to state 1646
## Reductions:

State 1646:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
structure_item -> MODULE TYPE ident EQUAL . module_type [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1647
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1647:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ error WITH TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_item -> MODULE TYPE ident EQUAL module_type . [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
## Transitions:
-- On WITH shift to state 1387
## Reductions:
-- On error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS
--   reduce production structure_item -> MODULE TYPE ident EQUAL module_type

State 1648:
## Known stack suffix:
## SEMISEMI LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . JOINDEF def_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_item -> LET . rec_flag let_bindings [ error TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION END CLASS ]
structure_tail -> SEMISEMI LET . LOC loc_bindings structure_tail [ error END ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1649
-- On JOINDEF shift to state 1606
-- On rec_flag shift to state 1608
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1649:
## Known stack suffix:
## SEMISEMI LET LOC
## LR(1) items:
expr0 -> LET LOC . loc_bindings IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> SEMISEMI LET LOC . loc_bindings structure_tail [ error END ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 1650
-- On loc_binding shift to state 690
## Reductions:

State 1650:
## Known stack suffix:
## SEMISEMI LET LOC loc_bindings
## LR(1) items:
expr0 -> LET LOC loc_bindings . IN error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . error [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . IN seq_expr [ error TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL END COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> SEMISEMI LET LOC loc_bindings . structure_tail [ error END ]
## Transitions:
-- On error shift to state 334
-- On TYPE shift to state 1506
-- On SEMISEMI shift to state 1508
-- On OPEN shift to state 1509
-- On MODULE shift to state 1511
-- On LET shift to state 1523
-- On IN shift to state 335
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On structure_tail shift to state 1651
-- On structure_item shift to state 1600
## Reductions:
-- On error END
--   reduce production structure_tail ->
** Conflict on error

State 1651:
## Known stack suffix:
## SEMISEMI LET LOC loc_bindings structure_tail
## LR(1) items:
structure_tail -> SEMISEMI LET LOC loc_bindings structure_tail . [ error END ]
## Transitions:
## Reductions:
-- On error END
--   reduce production structure_tail -> SEMISEMI LET LOC loc_bindings structure_tail

State 1652:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
structure_tail -> SEMISEMI structure_item . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1506
-- On SEMISEMI shift to state 1508
-- On OPEN shift to state 1509
-- On MODULE shift to state 1511
-- On LET shift to state 1523
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On structure_tail shift to state 1653
-- On structure_item shift to state 1600
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1653:
## Known stack suffix:
## SEMISEMI structure_item structure_tail
## LR(1) items:
structure_tail -> SEMISEMI structure_item structure_tail . [ error END ]
## Transitions:
## Reductions:
-- On error END
--   reduce production structure_tail -> SEMISEMI structure_item structure_tail

State 1654:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
structure_tail -> SEMISEMI seq_expr . structure_tail [ error END ]
## Transitions:
-- On TYPE shift to state 1506
-- On SEMISEMI shift to state 1508
-- On OPEN shift to state 1509
-- On MODULE shift to state 1511
-- On LET shift to state 1523
-- On EXTERNAL shift to state 1526
-- On EXCEPTION shift to state 1532
-- On CLASS shift to state 1535
-- On structure_tail shift to state 1655
-- On structure_item shift to state 1600
## Reductions:
-- On error END
--   reduce production structure_tail ->

State 1655:
## Known stack suffix:
## SEMISEMI seq_expr structure_tail
## LR(1) items:
structure_tail -> SEMISEMI seq_expr structure_tail . [ error END ]
## Transitions:
## Reductions:
-- On error END
--   reduce production structure_tail -> SEMISEMI seq_expr structure_tail

State 1656:
## Known stack suffix:
## STRUCT structure
## LR(1) items:
module_expr -> STRUCT structure . END [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> STRUCT structure . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On error shift to state 1657
-- On END shift to state 1658
## Reductions:

State 1657:
## Known stack suffix:
## STRUCT structure error
## LR(1) items:
module_expr -> STRUCT structure error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> STRUCT structure error

State 1658:
## Known stack suffix:
## STRUCT structure END
## LR(1) items:
module_expr -> STRUCT structure END . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> STRUCT structure END

State 1659:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_expr -> LPAREN . module_expr COLON module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN . module_expr COLON module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN . module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN . module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On STRUCT shift to state 1519
-- On LPAREN shift to state 1616
-- On FUNCTOR shift to state 1617
-- On module_expr shift to state 1660
-- On mod_longident shift to state 1629
## Reductions:

State 1660:
## Known stack suffix:
## LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN COLON ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN COLON ]
module_expr -> LPAREN module_expr . COLON module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN module_expr . COLON module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN module_expr . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN module_expr . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On error shift to state 1661
-- On RPAREN shift to state 1662
-- On LPAREN shift to state 1625
-- On COLON shift to state 1663
## Reductions:

State 1661:
## Known stack suffix:
## LPAREN module_expr error
## LR(1) items:
module_expr -> LPAREN module_expr error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> LPAREN module_expr error

State 1662:
## Known stack suffix:
## LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> LPAREN module_expr RPAREN

State 1663:
## Known stack suffix:
## LPAREN module_expr COLON
## LR(1) items:
module_expr -> LPAREN module_expr COLON . module_type RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN module_expr COLON . module_type error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1343
-- On SIG shift to state 1344
-- On LPAREN shift to state 1348
-- On LIDENT shift to state 138
-- On FUNCTOR shift to state 1349
-- On mty_longident shift to state 1385
-- On module_type shift to state 1664
-- On mod_ext_longident shift to state 1408
-- On ident shift to state 1412
## Reductions:

State 1664:
## Known stack suffix:
## LPAREN module_expr COLON module_type
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> LPAREN module_expr COLON module_type . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ error WITH RPAREN ]
## Transitions:
-- On error shift to state 1665
-- On WITH shift to state 1387
-- On RPAREN shift to state 1666
## Reductions:

State 1665:
## Known stack suffix:
## LPAREN module_expr COLON module_type error
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> LPAREN module_expr COLON module_type error

State 1666:
## Known stack suffix:
## LPAREN module_expr COLON module_type RPAREN
## LR(1) items:
module_expr -> LPAREN module_expr COLON module_type RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> LPAREN module_expr COLON module_type RPAREN

State 1667:
## Known stack suffix:
## FUNCTOR
## LR(1) items:
module_expr -> FUNCTOR . LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1668
## Reductions:

State 1668:
## Known stack suffix:
## FUNCTOR LPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN . UIDENT COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1669
## Reductions:

State 1669:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT . COLON module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1670
## Reductions:

State 1670:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON . module_type RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1671
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1671:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type . RPAREN MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1672
## Reductions:

State 1672:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN . MINUSGREATER module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 1673
## Reductions:

State 1673:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRUCT shift to state 1505
-- On LPAREN shift to state 1659
-- On FUNCTOR shift to state 1667
-- On module_expr shift to state 1674
-- On mod_longident shift to state 1679
## Reductions:

State 1674:
## Known stack suffix:
## FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
## LR(1) items:
module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1675
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
** Conflict on LPAREN

State 1675:
## Known stack suffix:
## module_expr LPAREN
## LR(1) items:
module_expr -> module_expr LPAREN . module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr LPAREN . module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 24
-- On STRUCT shift to state 1519
-- On LPAREN shift to state 1616
-- On FUNCTOR shift to state 1617
-- On module_expr shift to state 1676
-- On mod_longident shift to state 1629
## Reductions:

State 1676:
## Known stack suffix:
## module_expr LPAREN module_expr
## LR(1) items:
module_expr -> module_expr . LPAREN module_expr RPAREN [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ error RPAREN LPAREN ]
module_expr -> module_expr LPAREN module_expr . error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On error shift to state 1677
-- On RPAREN shift to state 1678
-- On LPAREN shift to state 1625
## Reductions:

State 1677:
## Known stack suffix:
## module_expr LPAREN module_expr error
## LR(1) items:
module_expr -> module_expr LPAREN module_expr error . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> module_expr LPAREN module_expr error

State 1678:
## Known stack suffix:
## module_expr LPAREN module_expr RPAREN
## LR(1) items:
module_expr -> module_expr LPAREN module_expr RPAREN . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> module_expr LPAREN module_expr RPAREN

State 1679:
## Known stack suffix:
## mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF DOT CLASS ]
module_expr -> mod_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On DOT shift to state 307
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_expr -> mod_longident

State 1680:
## Known stack suffix:
## EQUAL module_expr
## LR(1) items:
module_binding -> EQUAL module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1675
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_binding -> EQUAL module_expr

State 1681:
## Known stack suffix:
## COLON
## LR(1) items:
module_binding -> COLON . module_type EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1682
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1682:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_binding -> COLON module_type . EQUAL module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH EQUAL ]
## Transitions:
-- On WITH shift to state 1359
-- On EQUAL shift to state 1683
## Reductions:

State 1683:
## Known stack suffix:
## COLON module_type EQUAL
## LR(1) items:
module_binding -> COLON module_type EQUAL . module_expr [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRUCT shift to state 1505
-- On LPAREN shift to state 1659
-- On FUNCTOR shift to state 1667
-- On module_expr shift to state 1684
-- On mod_longident shift to state 1679
## Reductions:

State 1684:
## Known stack suffix:
## COLON module_type EQUAL module_expr
## LR(1) items:
module_binding -> COLON module_type EQUAL module_expr . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr RPAREN [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
module_expr -> module_expr . LPAREN module_expr error [ TYPE SHARP SEMISEMI OPEN MODULE LPAREN LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1675
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_binding -> COLON module_type EQUAL module_expr

State 1685:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_binding
## LR(1) items:
module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_binding -> LPAREN UIDENT COLON module_type RPAREN module_binding

State 1686:
## Known stack suffix:
## MODULE UIDENT module_binding
## LR(1) items:
structure_item -> MODULE UIDENT module_binding . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> MODULE UIDENT module_binding

State 1687:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
structure_item -> MODULE TYPE . ident EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 145
-- On LIDENT shift to state 146
-- On ident shift to state 1688
## Reductions:

State 1688:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
structure_item -> MODULE TYPE ident . EQUAL module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On EQUAL shift to state 1689
## Reductions:

State 1689:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
structure_item -> MODULE TYPE ident EQUAL . module_type [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1690
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1690:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> MODULE TYPE ident EQUAL module_type . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 1359
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> MODULE TYPE ident EQUAL module_type

State 1691:
## Known stack suffix:
## SEMISEMI LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . JOINDEF def_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> LET . rec_flag let_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_tail -> SEMISEMI LET . LOC loc_bindings structure_tail [ EOF ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1692
-- On JOINDEF shift to state 1722
-- On rec_flag shift to state 1724
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1692:
## Known stack suffix:
## SEMISEMI LET LOC
## LR(1) items:
expr0 -> LET LOC . loc_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> SEMISEMI LET LOC . loc_bindings structure_tail [ EOF ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 1693
-- On loc_binding shift to state 690
## Reductions:

State 1693:
## Known stack suffix:
## SEMISEMI LET LOC loc_bindings
## LR(1) items:
expr0 -> LET LOC loc_bindings . IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> SEMISEMI LET LOC loc_bindings . structure_tail [ EOF ]
## Transitions:
-- On error shift to state 1041
-- On TYPE shift to state 1174
-- On SEMISEMI shift to state 1254
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1694
-- On IN shift to state 1042
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On structure_tail shift to state 1721
-- On structure_item shift to state 1715
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1694:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . JOINDEF def_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> LET . rec_flag let_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_tail -> LET . LOC loc_bindings structure_tail [ EOF ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1695
-- On JOINDEF shift to state 1717
-- On rec_flag shift to state 1719
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1695:
## Known stack suffix:
## LET LOC
## LR(1) items:
structure_tail -> LET LOC . loc_bindings structure_tail [ EOF ]
## Transitions:
-- On LIDENT shift to state 657
-- On loc_bindings shift to state 1696
-- On loc_binding shift to state 821
## Reductions:

State 1696:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
structure_tail -> LET LOC loc_bindings . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1174
-- On SEMISEMI shift to state 1254
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1694
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On structure_tail shift to state 1714
-- On structure_item shift to state 1715
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1697:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
structure_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 1698
## Reductions:

State 1698:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
structure_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1699
## Reductions:

State 1699:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1700
## Reductions:

State 1700:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
structure_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On EQUAL shift to state 1701
-- On AS shift to state 180
## Reductions:

State 1701:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STRING shift to state 1702
-- On primitive_declaration shift to state 1704
## Reductions:

State 1702:
## Known stack suffix:
## STRING
## LR(1) items:
primitive_declaration -> STRING . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
primitive_declaration -> STRING . primitive_declaration [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STRING shift to state 1702
-- On primitive_declaration shift to state 1703
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production primitive_declaration -> STRING

State 1703:
## Known stack suffix:
## STRING primitive_declaration
## LR(1) items:
primitive_declaration -> STRING primitive_declaration . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production primitive_declaration -> STRING primitive_declaration

State 1704:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1705:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
structure_item -> EXCEPTION . UIDENT constructor_arguments [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1706
## Reductions:

State 1706:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
structure_item -> EXCEPTION UIDENT . constructor_arguments [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On OF shift to state 1707
-- On constructor_arguments shift to state 1709
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production constructor_arguments ->

State 1707:
## Known stack suffix:
## OF
## LR(1) items:
constructor_arguments -> OF . core_type_list [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 1219
-- On mod_ext_longident shift to state 166
-- On core_type_list shift to state 1708
## Reductions:

State 1708:
## Known stack suffix:
## OF core_type_list
## LR(1) items:
constructor_arguments -> OF core_type_list . [ VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
core_type_list -> core_type_list . STAR simple_core_type [ VAL TYPE STAR SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STAR shift to state 1221
## Reductions:
-- On VAL TYPE SHARP SEMISEMI OPEN MODULE LET INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production constructor_arguments -> OF core_type_list

State 1709:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
structure_item -> EXCEPTION UIDENT constructor_arguments . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> EXCEPTION UIDENT constructor_arguments

State 1710:
## Known stack suffix:
## CLASS
## LR(1) items:
structure_item -> CLASS . class_list END [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> CLASS . class_list error [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1432
-- On virtual_flag shift to state 1536
-- On class_list shift to state 1711
-- On class_def shift to state 1598
## Reductions:
-- On QUOTE LPAREN LIDENT CLOSED
--   reduce production virtual_flag ->

State 1711:
## Known stack suffix:
## CLASS class_list
## LR(1) items:
class_list -> class_list . AND class_def [ error END AND ]
structure_item -> CLASS class_list . END [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> CLASS class_list . error [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On error shift to state 1712
-- On END shift to state 1713
-- On AND shift to state 1596
## Reductions:

State 1712:
## Known stack suffix:
## CLASS class_list error
## LR(1) items:
structure_item -> CLASS class_list error . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> CLASS class_list error

State 1713:
## Known stack suffix:
## CLASS class_list END
## LR(1) items:
structure_item -> CLASS class_list END . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> CLASS class_list END

State 1714:
## Known stack suffix:
## LET LOC loc_bindings structure_tail
## LR(1) items:
structure_tail -> LET LOC loc_bindings structure_tail . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production structure_tail -> LET LOC loc_bindings structure_tail

State 1715:
## Known stack suffix:
## structure_item
## LR(1) items:
structure_tail -> structure_item . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1174
-- On SEMISEMI shift to state 1254
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1694
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On structure_tail shift to state 1716
-- On structure_item shift to state 1715
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1716:
## Known stack suffix:
## structure_item structure_tail
## LR(1) items:
structure_tail -> structure_item structure_tail . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production structure_tail -> structure_item structure_tail

State 1717:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
structure_item -> LET JOINDEF . def_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 664
-- On simple_def_binding shift to state 825
-- On join_pattern shift to state 325
-- On def_pattern shift to state 826
-- On def_bindings shift to state 1718
-- On def_binding shift to state 832
## Reductions:

State 1718:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> LET JOINDEF def_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 830
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> LET JOINDEF def_bindings

State 1719:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
structure_item -> LET rec_flag . let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 834
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 843
-- On mod_longident shift to state 306
-- On let_bindings shift to state 1720
-- On let_binding shift to state 853
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1720:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
let_bindings -> let_bindings . AND let_binding [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On AND shift to state 851
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> LET rec_flag let_bindings

State 1721:
## Known stack suffix:
## SEMISEMI LET LOC loc_bindings structure_tail
## LR(1) items:
structure_tail -> SEMISEMI LET LOC loc_bindings structure_tail . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production structure_tail -> SEMISEMI LET LOC loc_bindings structure_tail

State 1722:
## Known stack suffix:
## LET JOINDEF
## LR(1) items:
expr0 -> LET JOINDEF . def_bindings IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF . def_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET JOINDEF . def_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 304
-- On LIDENT shift to state 310
-- On simple_def_binding shift to state 966
-- On join_pattern shift to state 968
-- On def_pattern shift to state 974
-- On def_bindings shift to state 1723
-- On def_binding shift to state 982
## Reductions:

State 1723:
## Known stack suffix:
## LET JOINDEF def_bindings
## LR(1) items:
def_bindings -> def_bindings . AND def_binding [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
expr0 -> LET JOINDEF def_bindings . IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET JOINDEF def_bindings . IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET JOINDEF def_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On error shift to state 1047
-- On IN shift to state 1048
-- On AND shift to state 980
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> LET JOINDEF def_bindings

State 1724:
## Known stack suffix:
## LET rec_flag
## LR(1) items:
expr0 -> LET rec_flag . let_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag . let_bindings error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET rec_flag . let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 40
-- On UIDENT shift to state 3
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 41
-- On STRING shift to state 8
-- On LPAREN shift to state 44
-- On LIDENT shift to state 247
-- On LBRACKET shift to state 248
-- On LBRACE shift to state 254
-- On INT shift to state 259
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On CHAR shift to state 262
-- On val_ident shift to state 984
-- On simple_pattern shift to state 365
-- On signed_constant shift to state 267
-- On pattern_comma_list shift to state 366
-- On pattern shift to state 993
-- On mod_longident shift to state 306
-- On let_bindings shift to state 1725
-- On let_binding shift to state 1005
-- On constr_longident shift to state 371
-- On constant shift to state 309
## Reductions:

State 1725:
## Known stack suffix:
## LET rec_flag let_bindings
## LR(1) items:
expr0 -> LET rec_flag let_bindings . IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET rec_flag let_bindings . error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
let_bindings -> let_bindings . AND let_binding [ error TYPE SHARP SEMISEMI OPEN MODULE LET IN EXTERNAL EXCEPTION EOF CLASS AND ]
structure_item -> LET rec_flag let_bindings . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On error shift to state 1053
-- On IN shift to state 1054
-- On AND shift to state 1003
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production structure_item -> LET rec_flag let_bindings

State 1726:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
structure_tail -> SEMISEMI structure_item . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1174
-- On SEMISEMI shift to state 1254
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1694
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On structure_tail shift to state 1727
-- On structure_item shift to state 1715
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1727:
## Known stack suffix:
## SEMISEMI structure_item structure_tail
## LR(1) items:
structure_tail -> SEMISEMI structure_item structure_tail . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production structure_tail -> SEMISEMI structure_item structure_tail

State 1728:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
structure_tail -> SEMISEMI seq_expr . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1174
-- On SEMISEMI shift to state 1254
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1694
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On structure_tail shift to state 1729
-- On structure_item shift to state 1715
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1729:
## Known stack suffix:
## SEMISEMI seq_expr structure_tail
## LR(1) items:
structure_tail -> SEMISEMI seq_expr structure_tail . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production structure_tail -> SEMISEMI seq_expr structure_tail

State 1730:
## Known stack suffix:
## LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . JOINDEF def_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> LET . rec_flag let_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_tail -> LET . LOC loc_bindings structure_tail [ EOF ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1731
-- On JOINDEF shift to state 1722
-- On rec_flag shift to state 1724
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1731:
## Known stack suffix:
## LET LOC
## LR(1) items:
expr0 -> LET LOC . loc_bindings IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> LET LOC . loc_bindings structure_tail [ EOF ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 1732
-- On loc_binding shift to state 690
## Reductions:

State 1732:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
expr0 -> LET LOC loc_bindings . IN error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . error [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . IN seq_expr [ TYPE SUBTRACTIVE STAR SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_tail -> LET LOC loc_bindings . structure_tail [ EOF ]
## Transitions:
-- On error shift to state 1041
-- On TYPE shift to state 1174
-- On SEMISEMI shift to state 1254
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1694
-- On IN shift to state 1042
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On structure_tail shift to state 1714
-- On structure_item shift to state 1715
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1733:
## Known stack suffix:
## structure_tail
## LR(1) items:
structure -> structure_tail . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production structure -> structure_tail

State 1734:
## Known stack suffix:
## structure
## LR(1) items:
implementation -> structure . EOF [ # ]
## Transitions:
-- On EOF shift to state 1735
## Reductions:

State 1735:
## Known stack suffix:
## structure EOF
## LR(1) items:
implementation -> structure EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production implementation -> structure EOF

State 1736:
## Known stack suffix:
## seq_expr
## LR(1) items:
structure -> seq_expr . structure_tail [ EOF ]
## Transitions:
-- On TYPE shift to state 1174
-- On SEMISEMI shift to state 1254
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1694
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On structure_tail shift to state 1737
-- On structure_item shift to state 1715
## Reductions:
-- On EOF
--   reduce production structure_tail ->

State 1737:
## Known stack suffix:
## seq_expr structure_tail
## LR(1) items:
structure -> seq_expr structure_tail . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production structure -> seq_expr structure_tail

State 1738:
## Known stack suffix:
## implementation
## LR(1) items:
implementation' -> implementation . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept implementation

State 1739:
## Known stack suffix:
##
## LR(1) items:
interface' -> . interface [ # ]
## Transitions:
-- On signature shift to state 1740
-- On interface shift to state 1781
## Reductions:
-- On VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature ->

State 1740:
## Known stack suffix:
## signature
## LR(1) items:
interface -> signature . EOF [ # ]
signature -> signature . signature_item [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature -> signature . signature_item SEMISEMI [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VAL shift to state 1741
-- On TYPE shift to state 1745
-- On OPEN shift to state 1747
-- On MODULE shift to state 1749
-- On INCLUDE shift to state 1764
-- On EXTERNAL shift to state 1766
-- On EXCEPTION shift to state 1772
-- On EOF shift to state 1775
-- On CLASS shift to state 1776
-- On signature_item shift to state 1779
## Reductions:

State 1741:
## Known stack suffix:
## VAL
## LR(1) items:
signature_item -> VAL . val_ident COLON core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 1742
## Reductions:

State 1742:
## Known stack suffix:
## VAL val_ident
## LR(1) items:
signature_item -> VAL val_ident . COLON core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1743
## Reductions:

State 1743:
## Known stack suffix:
## VAL val_ident COLON
## LR(1) items:
signature_item -> VAL val_ident COLON . core_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1744
## Reductions:

State 1744:
## Known stack suffix:
## VAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION EOF CLASS AS ]
core_type -> core_type . AS type_parameter [ VAL TYPE SEMISEMI OPEN MODULE MINUSGREATER INCLUDE EXTERNAL EXCEPTION EOF CLASS AS ]
signature_item -> VAL val_ident COLON core_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On AS shift to state 180
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> VAL val_ident COLON core_type

State 1745:
## Known stack suffix:
## TYPE
## LR(1) items:
signature_item -> TYPE . type_declarations [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On QUOTE shift to state 181
-- On LPAREN shift to state 1175
-- On type_parameters shift to state 1181
-- On type_parameter shift to state 1249
-- On type_declarations shift to state 1746
-- On type_declaration shift to state 1253
## Reductions:
-- On LIDENT
--   reduce production type_parameters ->

State 1746:
## Known stack suffix:
## TYPE type_declarations
## LR(1) items:
signature_item -> TYPE type_declarations . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
type_declarations -> type_declarations . AND type_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS AND ]
## Transitions:
-- On AND shift to state 1251
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> TYPE type_declarations

State 1747:
## Known stack suffix:
## OPEN
## LR(1) items:
signature_item -> OPEN . mod_longident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 3
-- On mod_longident shift to state 1748
## Reductions:

State 1748:
## Known stack suffix:
## OPEN mod_longident
## LR(1) items:
mod_longident -> mod_longident . DOT UIDENT [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF DOT CLASS ]
signature_item -> OPEN mod_longident . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On DOT shift to state 307
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> OPEN mod_longident

State 1749:
## Known stack suffix:
## MODULE
## LR(1) items:
signature_item -> MODULE . UIDENT module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE . TYPE ident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE . TYPE ident EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1750
-- On TYPE shift to state 1760
## Reductions:

State 1750:
## Known stack suffix:
## MODULE UIDENT
## LR(1) items:
signature_item -> MODULE UIDENT . module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1751
-- On COLON shift to state 1756
-- On module_declaration shift to state 1759
## Reductions:

State 1751:
## Known stack suffix:
## LPAREN
## LR(1) items:
module_declaration -> LPAREN . UIDENT COLON module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1752
## Reductions:

State 1752:
## Known stack suffix:
## LPAREN UIDENT
## LR(1) items:
module_declaration -> LPAREN UIDENT . COLON module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1753
## Reductions:

State 1753:
## Known stack suffix:
## LPAREN UIDENT COLON
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON . module_type RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1754
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1754:
## Known stack suffix:
## LPAREN UIDENT COLON module_type
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type . RPAREN module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH RPAREN ]
## Transitions:
-- On WITH shift to state 1359
-- On RPAREN shift to state 1755
## Reductions:

State 1755:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN . module_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 1751
-- On COLON shift to state 1756
-- On module_declaration shift to state 1758
## Reductions:

State 1756:
## Known stack suffix:
## COLON
## LR(1) items:
module_declaration -> COLON . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1757
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1757:
## Known stack suffix:
## COLON module_type
## LR(1) items:
module_declaration -> COLON module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 1359
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_declaration -> COLON module_type

State 1758:
## Known stack suffix:
## LPAREN UIDENT COLON module_type RPAREN module_declaration
## LR(1) items:
module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production module_declaration -> LPAREN UIDENT COLON module_type RPAREN module_declaration

State 1759:
## Known stack suffix:
## MODULE UIDENT module_declaration
## LR(1) items:
signature_item -> MODULE UIDENT module_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> MODULE UIDENT module_declaration

State 1760:
## Known stack suffix:
## MODULE TYPE
## LR(1) items:
signature_item -> MODULE TYPE . ident [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE . ident EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 145
-- On LIDENT shift to state 146
-- On ident shift to state 1761
## Reductions:

State 1761:
## Known stack suffix:
## MODULE TYPE ident
## LR(1) items:
signature_item -> MODULE TYPE ident . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE ident . EQUAL module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On EQUAL shift to state 1762
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> MODULE TYPE ident

State 1762:
## Known stack suffix:
## MODULE TYPE ident EQUAL
## LR(1) items:
signature_item -> MODULE TYPE ident EQUAL . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1763
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1763:
## Known stack suffix:
## MODULE TYPE ident EQUAL module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> MODULE TYPE ident EQUAL module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 1359
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> MODULE TYPE ident EQUAL module_type

State 1764:
## Known stack suffix:
## INCLUDE
## LR(1) items:
signature_item -> INCLUDE . module_type [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1262
-- On SIG shift to state 1263
-- On LPAREN shift to state 1342
-- On LIDENT shift to state 146
-- On FUNCTOR shift to state 1353
-- On mty_longident shift to state 1357
-- On module_type shift to state 1765
-- On mod_ext_longident shift to state 1377
-- On ident shift to state 1381
## Reductions:

State 1765:
## Known stack suffix:
## INCLUDE module_type
## LR(1) items:
module_type -> module_type . WITH with_constraints [ WITH VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature_item -> INCLUDE module_type . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On WITH shift to state 1359
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> INCLUDE module_type

State 1766:
## Known stack suffix:
## EXTERNAL
## LR(1) items:
signature_item -> EXTERNAL . val_ident COLON core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On val_ident shift to state 1767
## Reductions:

State 1767:
## Known stack suffix:
## EXTERNAL val_ident
## LR(1) items:
signature_item -> EXTERNAL val_ident . COLON core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On COLON shift to state 1768
## Reductions:

State 1768:
## Known stack suffix:
## EXTERNAL val_ident COLON
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON . core_type EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UNDERSCORE shift to state 141
-- On UIDENT shift to state 129
-- On SHARP shift to state 142
-- On QUOTE shift to state 144
-- On LPAREN shift to state 148
-- On LIDENT shift to state 149
-- On LESSLESS shift to state 150
-- On LESS shift to state 151
-- On type_longident shift to state 159
-- On simple_core_type shift to state 160
-- On mod_ext_longident shift to state 166
-- On core_type_tuple shift to state 174
-- On core_type shift to state 1769
## Reductions:

State 1769:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type
## LR(1) items:
core_type -> core_type . MINUSGREATER core_type [ MINUSGREATER EQUAL AS ]
core_type -> core_type . AS type_parameter [ MINUSGREATER EQUAL AS ]
signature_item -> EXTERNAL val_ident COLON core_type . EQUAL primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On MINUSGREATER shift to state 178
-- On EQUAL shift to state 1770
-- On AS shift to state 180
## Reductions:

State 1770:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL . primitive_declaration [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On STRING shift to state 1702
-- On primitive_declaration shift to state 1771
## Reductions:

State 1771:
## Known stack suffix:
## EXTERNAL val_ident COLON core_type EQUAL primitive_declaration
## LR(1) items:
signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> EXTERNAL val_ident COLON core_type EQUAL primitive_declaration

State 1772:
## Known stack suffix:
## EXCEPTION
## LR(1) items:
signature_item -> EXCEPTION . UIDENT constructor_arguments [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 1773
## Reductions:

State 1773:
## Known stack suffix:
## EXCEPTION UIDENT
## LR(1) items:
signature_item -> EXCEPTION UIDENT . constructor_arguments [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On OF shift to state 1707
-- On constructor_arguments shift to state 1774
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production constructor_arguments ->

State 1774:
## Known stack suffix:
## EXCEPTION UIDENT constructor_arguments
## LR(1) items:
signature_item -> EXCEPTION UIDENT constructor_arguments . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> EXCEPTION UIDENT constructor_arguments

State 1775:
## Known stack suffix:
## signature EOF
## LR(1) items:
interface -> signature EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production interface -> signature EOF

State 1776:
## Known stack suffix:
## CLASS
## LR(1) items:
signature_item -> CLASS . class_type_list END [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On VIRTUAL shift to state 1432
-- On virtual_flag shift to state 1433
-- On class_type_list shift to state 1777
-- On class_type shift to state 1485
## Reductions:
-- On QUOTE LPAREN LIDENT CLOSED
--   reduce production virtual_flag ->

State 1777:
## Known stack suffix:
## CLASS class_type_list
## LR(1) items:
class_type_list -> class_type_list . AND class_type [ END AND ]
signature_item -> CLASS class_type_list . END [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On END shift to state 1778
-- On AND shift to state 1483
## Reductions:

State 1778:
## Known stack suffix:
## CLASS class_type_list END
## LR(1) items:
signature_item -> CLASS class_type_list END . [ VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAL TYPE SEMISEMI OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature_item -> CLASS class_type_list END

State 1779:
## Known stack suffix:
## signature signature_item
## LR(1) items:
signature -> signature signature_item . [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
signature -> signature signature_item . SEMISEMI [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On SEMISEMI shift to state 1780
## Reductions:
-- On VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature -> signature signature_item

State 1780:
## Known stack suffix:
## signature signature_item SEMISEMI
## LR(1) items:
signature -> signature signature_item SEMISEMI . [ VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On VAL TYPE OPEN MODULE INCLUDE EXTERNAL EXCEPTION EOF CLASS
--   reduce production signature -> signature signature_item SEMISEMI

State 1781:
## Known stack suffix:
## interface
## LR(1) items:
interface' -> interface . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept interface

State 1782:
## Known stack suffix:
##
## LR(1) items:
toplevel_phrase' -> . toplevel_phrase [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 1174
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On SHARP shift to state 1783
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On OPEN shift to state 1255
-- On NEW shift to state 15
-- On MODULE shift to state 1257
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 1788
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1791
-- On CLASS shift to state 1710
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On toplevel_phrase shift to state 1792
-- On toplevel_directive shift to state 1793
-- On top_structure shift to state 1795
-- On structure_item shift to state 1797
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1802
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1783:
## Known stack suffix:
## SHARP
## LR(1) items:
toplevel_directive -> SHARP . ident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident STRING [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident INT [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP . ident val_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 145
-- On LIDENT shift to state 146
-- On ident shift to state 1784
## Reductions:

State 1784:
## Known stack suffix:
## SHARP ident
## LR(1) items:
toplevel_directive -> SHARP ident . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . STRING [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . INT [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
toplevel_directive -> SHARP ident . val_longident [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On UIDENT shift to state 3
-- On STRING shift to state 1785
-- On LPAREN shift to state 387
-- On LIDENT shift to state 247
-- On INT shift to state 1786
-- On val_longident shift to state 1787
-- On val_ident shift to state 509
-- On mod_longident shift to state 748
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production toplevel_directive -> SHARP ident

State 1785:
## Known stack suffix:
## SHARP ident STRING
## LR(1) items:
toplevel_directive -> SHARP ident STRING . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production toplevel_directive -> SHARP ident STRING

State 1786:
## Known stack suffix:
## SHARP ident INT
## LR(1) items:
toplevel_directive -> SHARP ident INT . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production toplevel_directive -> SHARP ident INT

State 1787:
## Known stack suffix:
## SHARP ident val_longident
## LR(1) items:
toplevel_directive -> SHARP ident val_longident . [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
## Reductions:
-- On TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS
--   reduce production toplevel_directive -> SHARP ident val_longident

State 1788:
## Known stack suffix:
## LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . JOINDEF def_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION CLASS ]
structure_item -> LET . rec_flag let_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION CLASS ]
top_structure -> LET . LOC loc_bindings [ SEMISEMI ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1789
-- On JOINDEF shift to state 1722
-- On rec_flag shift to state 1724
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1789:
## Known stack suffix:
## LET LOC
## LR(1) items:
expr0 -> LET LOC . loc_bindings IN error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC . loc_bindings IN seq_expr [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
top_structure -> LET LOC . loc_bindings [ SEMISEMI ]
## Transitions:
-- On LIDENT shift to state 294
-- On loc_bindings shift to state 1790
-- On loc_binding shift to state 690
## Reductions:

State 1790:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
expr0 -> LET LOC loc_bindings . IN error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . error [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET LOC loc_bindings . IN seq_expr [ SUBTRACTIVE STAR SEMISEMI SEMI LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EQUAL COMMA COLONEQUAL COLONCOLON BARBAR AMPERSAND AMPERAMPER ]
top_structure -> LET LOC loc_bindings . [ SEMISEMI ]
## Transitions:
-- On error shift to state 1041
-- On IN shift to state 1042
## Reductions:
-- On SEMISEMI
--   reduce production top_structure -> LET LOC loc_bindings

State 1791:
## Known stack suffix:
## EOF
## LR(1) items:
toplevel_phrase -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel_phrase -> EOF

State 1792:
## Known stack suffix:
## toplevel_phrase
## LR(1) items:
toplevel_phrase' -> toplevel_phrase . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept toplevel_phrase

State 1793:
## Known stack suffix:
## toplevel_directive
## LR(1) items:
toplevel_phrase -> toplevel_directive . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1794
## Reductions:

State 1794:
## Known stack suffix:
## toplevel_directive SEMISEMI
## LR(1) items:
toplevel_phrase -> toplevel_directive SEMISEMI . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel_phrase -> toplevel_directive SEMISEMI

State 1795:
## Known stack suffix:
## top_structure
## LR(1) items:
toplevel_phrase -> top_structure . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1796
## Reductions:

State 1796:
## Known stack suffix:
## top_structure SEMISEMI
## LR(1) items:
toplevel_phrase -> top_structure SEMISEMI . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel_phrase -> top_structure SEMISEMI

State 1797:
## Known stack suffix:
## structure_item
## LR(1) items:
top_structure -> structure_item . [ SEMISEMI ]
top_structure -> structure_item . top_structure [ SEMISEMI ]
## Transitions:
-- On TYPE shift to state 1174
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1798
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On CLASS shift to state 1710
-- On top_structure shift to state 1801
-- On structure_item shift to state 1797
## Reductions:
-- On SEMISEMI
--   reduce production top_structure -> structure_item

State 1798:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . JOINDEF def_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION CLASS ]
structure_item -> LET . rec_flag let_bindings [ TYPE SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION CLASS ]
top_structure -> LET . LOC loc_bindings [ SEMISEMI ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 1799
-- On JOINDEF shift to state 1717
-- On rec_flag shift to state 1719
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1799:
## Known stack suffix:
## LET LOC
## LR(1) items:
top_structure -> LET LOC . loc_bindings [ SEMISEMI ]
## Transitions:
-- On LIDENT shift to state 657
-- On loc_bindings shift to state 1800
-- On loc_binding shift to state 821
## Reductions:

State 1800:
## Known stack suffix:
## LET LOC loc_bindings
## LR(1) items:
top_structure -> LET LOC loc_bindings . [ SEMISEMI ]
## Transitions:
## Reductions:
-- On SEMISEMI
--   reduce production top_structure -> LET LOC loc_bindings

State 1801:
## Known stack suffix:
## structure_item top_structure
## LR(1) items:
top_structure -> structure_item top_structure . [ SEMISEMI ]
## Transitions:
## Reductions:
-- On SEMISEMI
--   reduce production top_structure -> structure_item top_structure

State 1802:
## Known stack suffix:
## seq_expr
## LR(1) items:
toplevel_phrase -> seq_expr . SEMISEMI [ # ]
## Transitions:
-- On SEMISEMI shift to state 1803
## Reductions:

State 1803:
## Known stack suffix:
## seq_expr SEMISEMI
## LR(1) items:
toplevel_phrase -> seq_expr SEMISEMI . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel_phrase -> seq_expr SEMISEMI

State 1804:
## Known stack suffix:
##
## LR(1) items:
use_file' -> . use_file [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 1174
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On SHARP shift to state 1783
-- On SEMISEMI shift to state 1805
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On OPEN shift to state 1255
-- On NEW shift to state 15
-- On MODULE shift to state 1257
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 1806
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1810
-- On CLASS shift to state 1710
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On use_file_tail shift to state 1820
-- On use_file shift to state 1821
-- On toplevel_directive shift to state 1812
-- On structure_item shift to state 1814
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1822
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1805:
## Known stack suffix:
## SEMISEMI
## LR(1) items:
use_file_tail -> SEMISEMI . EOF [ # ]
use_file_tail -> SEMISEMI . seq_expr use_file_tail [ # ]
use_file_tail -> SEMISEMI . structure_item use_file_tail [ # ]
use_file_tail -> SEMISEMI . toplevel_directive use_file_tail [ # ]
## Transitions:
-- On WHILE shift to state 1
-- On VARTYPE shift to state 2
-- On UIDENT shift to state 3
-- On TYPE shift to state 1174
-- On TRY shift to state 4
-- On TRUE shift to state 6
-- On SUBTRACTIVE shift to state 7
-- On STRING shift to state 8
-- On SPAWN shift to state 9
-- On SHARP shift to state 1783
-- On RELOCINFO shift to state 13
-- On PREFIXOP shift to state 14
-- On PARSER shift to state 39
-- On OPEN shift to state 1255
-- On NEW shift to state 15
-- On MODULE shift to state 1257
-- On MATCH shift to state 289
-- On LPAREN shift to state 22
-- On LIDENT shift to state 290
-- On LET shift to state 1806
-- On LBRACKETLESS shift to state 328
-- On LBRACKETBAR shift to state 354
-- On LBRACKET shift to state 362
-- On LBRACELESS shift to state 375
-- On LBRACE shift to state 390
-- On LAZY shift to state 399
-- On INT shift to state 259
-- On IF shift to state 528
-- On FUNCTION shift to state 529
-- On FUN shift to state 533
-- On FOR shift to state 536
-- On FLOAT shift to state 260
-- On FALSE shift to state 261
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1807
-- On CLASS shift to state 1710
-- On CHAR shift to state 503
-- On BEGIN shift to state 504
-- On ASSERT shift to state 539
-- On val_longident shift to state 508
-- On val_ident shift to state 509
-- On toplevel_directive shift to state 1808
-- On structure_item shift to state 1816
-- On simple_expr shift to state 541
-- On seq_expr shift to state 1818
-- On mod_longident shift to state 523
-- On label shift to state 547
-- On expr_comma_list shift to state 549
-- On expr0 shift to state 551
-- On expr shift to state 611
-- On constr_longident shift to state 558
-- On constant shift to state 527
## Reductions:

State 1806:
## Known stack suffix:
## LET
## LR(1) items:
expr0 -> LET . JOINDEF def_bindings IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . JOINDEF def_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . LOC loc_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN seq_expr [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings IN error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
expr0 -> LET . rec_flag let_bindings error [ TYPE SUBTRACTIVE STAR SHARP SEMISEMI SEMI OPEN MODULE LET LESSGREATER LESS INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 GREATER EXTERNAL EXCEPTION EQUAL EOF COMMA COLONEQUAL COLONCOLON CLASS BARBAR AMPERSAND AMPERAMPER ]
structure_item -> LET . JOINDEF def_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> LET . rec_flag let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On REC shift to state 292
-- On LOC shift to state 293
-- On JOINDEF shift to state 1722
-- On rec_flag shift to state 1724
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1807:
## Known stack suffix:
## SEMISEMI EOF
## LR(1) items:
use_file_tail -> SEMISEMI EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file_tail -> SEMISEMI EOF

State 1808:
## Known stack suffix:
## SEMISEMI toplevel_directive
## LR(1) items:
use_file_tail -> SEMISEMI toplevel_directive . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1174
-- On SHARP shift to state 1783
-- On SEMISEMI shift to state 1805
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1809
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1810
-- On CLASS shift to state 1710
-- On use_file_tail shift to state 1811
-- On toplevel_directive shift to state 1812
-- On structure_item shift to state 1814
## Reductions:

State 1809:
## Known stack suffix:
## LET
## LR(1) items:
structure_item -> LET . JOINDEF def_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
structure_item -> LET . rec_flag let_bindings [ TYPE SHARP SEMISEMI OPEN MODULE LET EXTERNAL EXCEPTION EOF CLASS ]
## Transitions:
-- On REC shift to state 292
-- On JOINDEF shift to state 1717
-- On rec_flag shift to state 1719
## Reductions:
-- On UNDERSCORE UIDENT TRUE SUBTRACTIVE STRING LPAREN LIDENT LBRACKET LBRACE INT FLOAT FALSE CHAR
--   reduce production rec_flag ->

State 1810:
## Known stack suffix:
## EOF
## LR(1) items:
use_file_tail -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file_tail -> EOF

State 1811:
## Known stack suffix:
## SEMISEMI toplevel_directive use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI toplevel_directive use_file_tail . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file_tail -> SEMISEMI toplevel_directive use_file_tail

State 1812:
## Known stack suffix:
## toplevel_directive
## LR(1) items:
use_file_tail -> toplevel_directive . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1174
-- On SHARP shift to state 1783
-- On SEMISEMI shift to state 1805
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1809
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1810
-- On CLASS shift to state 1710
-- On use_file_tail shift to state 1813
-- On toplevel_directive shift to state 1812
-- On structure_item shift to state 1814
## Reductions:

State 1813:
## Known stack suffix:
## toplevel_directive use_file_tail
## LR(1) items:
use_file_tail -> toplevel_directive use_file_tail . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file_tail -> toplevel_directive use_file_tail

State 1814:
## Known stack suffix:
## structure_item
## LR(1) items:
use_file_tail -> structure_item . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1174
-- On SHARP shift to state 1783
-- On SEMISEMI shift to state 1805
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1809
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1810
-- On CLASS shift to state 1710
-- On use_file_tail shift to state 1815
-- On toplevel_directive shift to state 1812
-- On structure_item shift to state 1814
## Reductions:

State 1815:
## Known stack suffix:
## structure_item use_file_tail
## LR(1) items:
use_file_tail -> structure_item use_file_tail . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file_tail -> structure_item use_file_tail

State 1816:
## Known stack suffix:
## SEMISEMI structure_item
## LR(1) items:
use_file_tail -> SEMISEMI structure_item . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1174
-- On SHARP shift to state 1783
-- On SEMISEMI shift to state 1805
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1809
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1810
-- On CLASS shift to state 1710
-- On use_file_tail shift to state 1817
-- On toplevel_directive shift to state 1812
-- On structure_item shift to state 1814
## Reductions:

State 1817:
## Known stack suffix:
## SEMISEMI structure_item use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI structure_item use_file_tail . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file_tail -> SEMISEMI structure_item use_file_tail

State 1818:
## Known stack suffix:
## SEMISEMI seq_expr
## LR(1) items:
use_file_tail -> SEMISEMI seq_expr . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1174
-- On SHARP shift to state 1783
-- On SEMISEMI shift to state 1805
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1809
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1810
-- On CLASS shift to state 1710
-- On use_file_tail shift to state 1819
-- On toplevel_directive shift to state 1812
-- On structure_item shift to state 1814
## Reductions:

State 1819:
## Known stack suffix:
## SEMISEMI seq_expr use_file_tail
## LR(1) items:
use_file_tail -> SEMISEMI seq_expr use_file_tail . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file_tail -> SEMISEMI seq_expr use_file_tail

State 1820:
## Known stack suffix:
## use_file_tail
## LR(1) items:
use_file -> use_file_tail . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file -> use_file_tail

State 1821:
## Known stack suffix:
## use_file
## LR(1) items:
use_file' -> use_file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept use_file

State 1822:
## Known stack suffix:
## seq_expr
## LR(1) items:
use_file -> seq_expr . use_file_tail [ # ]
## Transitions:
-- On TYPE shift to state 1174
-- On SHARP shift to state 1783
-- On SEMISEMI shift to state 1805
-- On OPEN shift to state 1255
-- On MODULE shift to state 1257
-- On LET shift to state 1809
-- On EXTERNAL shift to state 1697
-- On EXCEPTION shift to state 1705
-- On EOF shift to state 1810
-- On CLASS shift to state 1710
-- On use_file_tail shift to state 1823
-- On toplevel_directive shift to state 1812
-- On structure_item shift to state 1814
## Reductions:

State 1823:
## Known stack suffix:
## seq_expr use_file_tail
## LR(1) items:
use_file -> seq_expr use_file_tail . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production use_file -> seq_expr use_file_tail

