State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On VOLATILE shift to state 1
-- On TRANSIENT shift to state 2
-- On SYNCHRONIZED shift to state 3
-- On STRICTFP shift to state 4
-- On STATIC shift to state 5
-- On PUBLIC shift to state 6
-- On PROTECTED shift to state 7
-- On PRIVATE shift to state 8
-- On NATIVE shift to state 9
-- On FINAL shift to state 10
-- On ENUM shift to state 11
-- On ANNOTATION shift to state 12
-- On ABSTRACT shift to state 13
-- On modifier_list_star shift to state 14
-- On modifier shift to state 443
-- On file shift to state 450
## Reductions:
-- On INTERFACE reduce production modifier_list_star ->
-- On CLASS reduce production modifier_list_star ->

State 1:
## Known stack suffix:
## VOLATILE
## LR(1) items:
modifier -> VOLATILE . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> VOLATILE

State 2:
## Known stack suffix:
## TRANSIENT
## LR(1) items:
modifier -> TRANSIENT . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> TRANSIENT

State 3:
## Known stack suffix:
## SYNCHRONIZED
## LR(1) items:
modifier -> SYNCHRONIZED . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> SYNCHRONIZED

State 4:
## Known stack suffix:
## STRICTFP
## LR(1) items:
modifier -> STRICTFP . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> STRICTFP

State 5:
## Known stack suffix:
## STATIC
## LR(1) items:
modifier -> STATIC . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> STATIC

State 6:
## Known stack suffix:
## PUBLIC
## LR(1) items:
modifier -> PUBLIC . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> PUBLIC

State 7:
## Known stack suffix:
## PROTECTED
## LR(1) items:
modifier -> PROTECTED . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> PROTECTED

State 8:
## Known stack suffix:
## PRIVATE
## LR(1) items:
modifier -> PRIVATE . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> PRIVATE

State 9:
## Known stack suffix:
## NATIVE
## LR(1) items:
modifier -> NATIVE . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> NATIVE

State 10:
## Known stack suffix:
## FINAL
## LR(1) items:
modifier -> FINAL . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> FINAL

State 11:
## Known stack suffix:
## ENUM
## LR(1) items:
modifier -> ENUM . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> ENUM

State 12:
## Known stack suffix:
## ANNOTATION
## LR(1) items:
modifier -> ANNOTATION . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> ANNOTATION

State 13:
## Known stack suffix:
## ABSTRACT
## LR(1) items:
modifier -> ABSTRACT . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier -> ABSTRACT

State 14:
## Known stack suffix:
## modifier_list_star
## LR(1) items:
file -> modifier_list_star . file_type class_name extends_clause implements_clause file_body [ # ]
## Transitions:
-- On INTERFACE shift to state 15
-- On CLASS shift to state 16
-- On file_type shift to state 17
## Reductions:

State 15:
## Known stack suffix:
## INTERFACE
## LR(1) items:
file_type -> INTERFACE . [ TRUE QUOTED_NAME IDENTIFIER FULL_IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production file_type -> INTERFACE

State 16:
## Known stack suffix:
## CLASS
## LR(1) items:
file_type -> CLASS . [ TRUE QUOTED_NAME IDENTIFIER FULL_IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production file_type -> CLASS

State 17:
## Known stack suffix:
## modifier_list_star file_type
## LR(1) items:
file -> modifier_list_star file_type . class_name extends_clause implements_clause file_body [ # ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name shift to state 28
## Reductions:

State 18:
## Known stack suffix:
## TRUE
## LR(1) items:
identifier -> TRUE . [ XOR WITHOUT WITH WHERE WAND VDASH USHR TRUE TO SHR SHL SEMICOLON R_PAREN R_BRACKET R_BRACE RULE REWRITERULE REQUIRES QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR OLD NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO L_PAREN L_BRACKET L_BRACE LEADSTO INSTANCEOF INCONSISTENCY IMPORT IMPLICATION IMPLEMENTS IMP IF IDENTIFIER GOTO FROM FRAME FALSE EXTENDS EQUIV EQUALS EOF ENSURES EMP DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AS AND ABSRULE ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> TRUE

State 19:
## Known stack suffix:
## QUOTED_NAME
## LR(1) items:
quoted_name -> QUOTED_NAME . [ XOR USHR TRUE SHR SHL SEMICOLON R_PAREN R_BRACKET REQUIRES QUOTED_NAME PLUS OR OLD MULT MOD MINUS L_PAREN L_BRACKET L_BRACE INSTANCEOF IMPLEMENTS IDENTIFIER GOTO FROM FALSE EXTENDS EQUALS ENSURES EMP DOT DIV COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quoted_name -> QUOTED_NAME

State 20:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
identifier -> IDENTIFIER . [ XOR WITHOUT WITH WHERE WAND VDASH USHR TRUE TO SHR SHL SEMICOLON R_PAREN R_BRACKET R_BRACE RULE REWRITERULE REQUIRES QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR OLD NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO L_PAREN L_BRACKET L_BRACE LEADSTO INSTANCEOF INCONSISTENCY IMPORT IMPLICATION IMPLEMENTS IMP IF IDENTIFIER GOTO FROM FRAME FALSE EXTENDS EQUIV EQUALS EOF ENSURES EMP DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AS AND ABSRULE ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> IDENTIFIER

State 21:
## Known stack suffix:
## FULL_IDENTIFIER
## LR(1) items:
full_identifier -> FULL_IDENTIFIER . [ TRUE SOURCE_POS_TAG_CLOSE SEMICOLON R_PAREN REQUIRES QUOTED_NAME OLD L_PAREN L_BRACKET L_BRACE IMPLEMENTS IDENTIFIER FROM FALSE EXTENDS ENSURES EMP COMMA COLON AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production full_identifier -> FULL_IDENTIFIER

State 22:
## Known stack suffix:
## FALSE
## LR(1) items:
identifier -> FALSE . [ XOR WITHOUT WITH WHERE WAND VDASH USHR TRUE TO SHR SHL SEMICOLON R_PAREN R_BRACKET R_BRACE RULE REWRITERULE REQUIRES QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR OLD NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO L_PAREN L_BRACKET L_BRACE LEADSTO INSTANCEOF INCONSISTENCY IMPORT IMPLICATION IMPLEMENTS IMP IF IDENTIFIER GOTO FROM FRAME FALSE EXTENDS EQUIV EQUALS EOF ENSURES EMP DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AS AND ABSRULE ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> FALSE

State 23:
## Known stack suffix:
## EMP
## LR(1) items:
identifier -> EMP . [ XOR WITHOUT WITH WHERE WAND VDASH USHR TRUE TO SHR SHL SEMICOLON R_PAREN R_BRACKET R_BRACE RULE REWRITERULE REQUIRES QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR OLD NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO L_PAREN L_BRACKET L_BRACE LEADSTO INSTANCEOF INCONSISTENCY IMPORT IMPLICATION IMPLEMENTS IMP IF IDENTIFIER GOTO FROM FRAME FALSE EXTENDS EQUIV EQUALS EOF ENSURES EMP DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AS AND ABSRULE ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> EMP

State 24:
## Known stack suffix:
## AS
## LR(1) items:
identifier -> AS . [ XOR WITHOUT WITH WHERE WAND VDASH USHR TRUE TO SHR SHL SEMICOLON R_PAREN R_BRACKET R_BRACE RULE REWRITERULE REQUIRES QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR OLD NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO L_PAREN L_BRACKET L_BRACE LEADSTO INSTANCEOF INCONSISTENCY IMPORT IMPLICATION IMPLEMENTS IMP IF IDENTIFIER GOTO FROM FRAME FALSE EXTENDS EQUIV EQUALS EOF ENSURES EMP DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AS AND ABSRULE ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier -> AS

State 25:
## Known stack suffix:
## quoted_name
## LR(1) items:
class_name -> quoted_name . [ SEMICOLON R_PAREN REQUIRES OLD L_BRACE IMPLEMENTS FROM EXTENDS ENSURES COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_name -> quoted_name

State 26:
## Known stack suffix:
## identifier
## LR(1) items:
class_name -> identifier . [ SEMICOLON R_PAREN REQUIRES OLD L_BRACE IMPLEMENTS FROM EXTENDS ENSURES COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_name -> identifier

State 27:
## Known stack suffix:
## full_identifier
## LR(1) items:
class_name -> full_identifier . [ SEMICOLON R_PAREN REQUIRES OLD L_BRACE IMPLEMENTS FROM EXTENDS ENSURES COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_name -> full_identifier

State 28:
## Known stack suffix:
## modifier_list_star file_type class_name
## LR(1) items:
file -> modifier_list_star file_type class_name . extends_clause implements_clause file_body [ # ]
## Transitions:
-- On EXTENDS shift to state 29
-- On extends_clause shift to state 34
## Reductions:
-- On L_BRACE reduce production extends_clause ->
-- On IMPLEMENTS reduce production extends_clause ->

State 29:
## Known stack suffix:
## EXTENDS
## LR(1) items:
extends_clause -> EXTENDS . class_name_list [ L_BRACE IMPLEMENTS ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name_list shift to state 30
-- On class_name shift to state 31
## Reductions:

State 30:
## Known stack suffix:
## EXTENDS class_name_list
## LR(1) items:
extends_clause -> EXTENDS class_name_list . [ L_BRACE IMPLEMENTS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production extends_clause -> EXTENDS class_name_list

State 31:
## Known stack suffix:
## class_name
## LR(1) items:
class_name_list -> class_name . [ SEMICOLON REQUIRES OLD L_BRACE IMPLEMENTS ENSURES ]
class_name_list -> class_name . COMMA class_name_list [ SEMICOLON REQUIRES OLD L_BRACE IMPLEMENTS ENSURES ]
## Transitions:
-- On COMMA shift to state 32
## Reductions:
-- On SEMICOLON reduce production class_name_list -> class_name
-- On REQUIRES reduce production class_name_list -> class_name
-- On OLD reduce production class_name_list -> class_name
-- On L_BRACE reduce production class_name_list -> class_name
-- On IMPLEMENTS reduce production class_name_list -> class_name
-- On ENSURES reduce production class_name_list -> class_name

State 32:
## Known stack suffix:
## class_name COMMA
## LR(1) items:
class_name_list -> class_name COMMA . class_name_list [ SEMICOLON REQUIRES OLD L_BRACE IMPLEMENTS ENSURES ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name_list shift to state 33
-- On class_name shift to state 31
## Reductions:

State 33:
## Known stack suffix:
## class_name COMMA class_name_list
## LR(1) items:
class_name_list -> class_name COMMA class_name_list . [ SEMICOLON REQUIRES OLD L_BRACE IMPLEMENTS ENSURES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production class_name_list -> class_name COMMA class_name_list

State 34:
## Known stack suffix:
## modifier_list_star file_type class_name extends_clause
## LR(1) items:
file -> modifier_list_star file_type class_name extends_clause . implements_clause file_body [ # ]
## Transitions:
-- On IMPLEMENTS shift to state 35
-- On implements_clause shift to state 37
## Reductions:
-- On L_BRACE reduce production implements_clause ->

State 35:
## Known stack suffix:
## IMPLEMENTS
## LR(1) items:
implements_clause -> IMPLEMENTS . class_name_list [ L_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name_list shift to state 36
-- On class_name shift to state 31
## Reductions:

State 36:
## Known stack suffix:
## IMPLEMENTS class_name_list
## LR(1) items:
implements_clause -> IMPLEMENTS class_name_list . [ L_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production implements_clause -> IMPLEMENTS class_name_list

State 37:
## Known stack suffix:
## modifier_list_star file_type class_name extends_clause implements_clause
## LR(1) items:
file -> modifier_list_star file_type class_name extends_clause implements_clause . file_body [ # ]
## Transitions:
-- On L_BRACE shift to state 38
-- On file_body shift to state 449
## Reductions:

State 38:
## Known stack suffix:
## L_BRACE
## LR(1) items:
file_body -> L_BRACE . member_list_star R_BRACE [ # ]
## Transitions:
-- On VOLATILE shift to state 1
-- On TRANSIENT shift to state 2
-- On SYNCHRONIZED shift to state 3
-- On STRICTFP shift to state 4
-- On STATIC shift to state 5
-- On PUBLIC shift to state 6
-- On PROTECTED shift to state 7
-- On PRIVATE shift to state 8
-- On NATIVE shift to state 9
-- On FINAL shift to state 10
-- On ENUM shift to state 11
-- On ANNOTATION shift to state 12
-- On ABSTRACT shift to state 13
-- On modifier_list_star shift to state 39
-- On modifier shift to state 443
-- On member_list_star shift to state 445
-- On member shift to state 447
## Reductions:
-- On VOID reduce production modifier_list_star ->
-- On TRUE reduce production modifier_list_star ->
-- On SHORT reduce production modifier_list_star ->
-- On R_BRACE reduce production member_list_star ->
-- On QUOTED_NAME reduce production modifier_list_star ->
-- On NULL reduce production modifier_list_star ->
-- On LONG reduce production modifier_list_star ->
-- On INT reduce production modifier_list_star ->
-- On IDENTIFIER reduce production modifier_list_star ->
-- On FULL_IDENTIFIER reduce production modifier_list_star ->
-- On FLOAT reduce production modifier_list_star ->
-- On FALSE reduce production modifier_list_star ->
-- On EMP reduce production modifier_list_star ->
-- On DOUBLE reduce production modifier_list_star ->
-- On CHAR reduce production modifier_list_star ->
-- On BYTE reduce production modifier_list_star ->
-- On BOOLEAN reduce production modifier_list_star ->
-- On AS reduce production modifier_list_star ->

State 39:
## Known stack suffix:
## modifier_list_star
## LR(1) items:
member -> modifier_list_star . jtype name SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
member -> modifier_list_star . jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On VOID shift to state 40
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 55
-- On jtype shift to state 56
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 40:
## Known stack suffix:
## VOID
## LR(1) items:
jtype -> VOID . [ TRUE SEMICOLON QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jtype -> VOID

State 41:
## Known stack suffix:
## SHORT
## LR(1) items:
base_type_no_name -> SHORT . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> SHORT

State 42:
## Known stack suffix:
## NULL
## LR(1) items:
base_type_no_name -> NULL . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> NULL

State 43:
## Known stack suffix:
## LONG
## LR(1) items:
base_type_no_name -> LONG . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> LONG

State 44:
## Known stack suffix:
## INT
## LR(1) items:
base_type_no_name -> INT . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> INT

State 45:
## Known stack suffix:
## FLOAT
## LR(1) items:
base_type_no_name -> FLOAT . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> FLOAT

State 46:
## Known stack suffix:
## DOUBLE
## LR(1) items:
base_type_no_name -> DOUBLE . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> DOUBLE

State 47:
## Known stack suffix:
## CHAR
## LR(1) items:
base_type_no_name -> CHAR . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> CHAR

State 48:
## Known stack suffix:
## BYTE
## LR(1) items:
base_type_no_name -> BYTE . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> BYTE

State 49:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
base_type_no_name -> BOOLEAN . [ TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type_no_name -> BOOLEAN

State 50:
## Known stack suffix:
## quoted_name
## LR(1) items:
nonvoid_type -> quoted_name . array_brackets_list_star [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
-- On L_BRACKET shift to state 51
-- On array_brackets_list_star shift to state 54
## Reductions:
-- On TRUE reduce production array_brackets_list_star ->
-- On SEMICOLON reduce production array_brackets_list_star ->
-- On R_PAREN reduce production array_brackets_list_star ->
-- On QUOTED_NAME reduce production array_brackets_list_star ->
-- On IDENTIFIER reduce production array_brackets_list_star ->
-- On FALSE reduce production array_brackets_list_star ->
-- On EMP reduce production array_brackets_list_star ->
-- On COMMA reduce production array_brackets_list_star ->
-- On AS reduce production array_brackets_list_star ->

State 51:
## Known stack suffix:
## L_BRACKET
## LR(1) items:
array_brackets_list_star -> L_BRACKET . R_BRACKET array_brackets_list_star [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
-- On R_BRACKET shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## L_BRACKET R_BRACKET
## LR(1) items:
array_brackets_list_star -> L_BRACKET R_BRACKET . array_brackets_list_star [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
-- On L_BRACKET shift to state 51
-- On array_brackets_list_star shift to state 53
## Reductions:
-- On TRUE reduce production array_brackets_list_star ->
-- On SEMICOLON reduce production array_brackets_list_star ->
-- On R_PAREN reduce production array_brackets_list_star ->
-- On QUOTED_NAME reduce production array_brackets_list_star ->
-- On IDENTIFIER reduce production array_brackets_list_star ->
-- On FALSE reduce production array_brackets_list_star ->
-- On EMP reduce production array_brackets_list_star ->
-- On COMMA reduce production array_brackets_list_star ->
-- On AS reduce production array_brackets_list_star ->

State 53:
## Known stack suffix:
## L_BRACKET R_BRACKET array_brackets_list_star
## LR(1) items:
array_brackets_list_star -> L_BRACKET R_BRACKET array_brackets_list_star . [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_brackets_list_star -> L_BRACKET R_BRACKET array_brackets_list_star

State 54:
## Known stack suffix:
## quoted_name array_brackets_list_star
## LR(1) items:
nonvoid_type -> quoted_name array_brackets_list_star . [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonvoid_type -> quoted_name array_brackets_list_star

State 55:
## Known stack suffix:
## nonvoid_type
## LR(1) items:
jtype -> nonvoid_type . [ TRUE SEMICOLON QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jtype -> nonvoid_type

State 56:
## Known stack suffix:
## modifier_list_star jtype
## LR(1) items:
member -> modifier_list_star jtype . name SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
member -> modifier_list_star jtype . name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 57
-- On name shift to state 58
-- On identifier shift to state 89
## Reductions:

State 57:
## Known stack suffix:
## quoted_name
## LR(1) items:
name -> quoted_name . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS L_PAREN INSTANCEOF GOTO DOT DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> quoted_name

State 58:
## Known stack suffix:
## modifier_list_star jtype name
## LR(1) items:
member -> modifier_list_star jtype name . SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
member -> modifier_list_star jtype name . L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 59
-- On L_PAREN shift to state 60
## Reductions:

State 59:
## Known stack suffix:
## modifier_list_star jtype name SEMICOLON
## LR(1) items:
member -> modifier_list_star jtype name SEMICOLON . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member -> modifier_list_star jtype name SEMICOLON

State 60:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN . parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On parameter_list_question_mark shift to state 61
-- On parameter_list shift to state 122
-- On parameter shift to state 123
-- On nonvoid_type shift to state 126
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:
-- On R_PAREN reduce production parameter_list_question_mark ->

State 61:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_list_question_mark
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark . R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On R_PAREN shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN . throws_clause requires_clause old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On THROWS shift to state 63
-- On throws_clause shift to state 65
## Reductions:
-- On SEMICOLON reduce production throws_clause ->
-- On REQUIRES reduce production throws_clause ->
-- On OLD reduce production throws_clause ->
-- On L_BRACE reduce production throws_clause ->
-- On ENSURES reduce production throws_clause ->

State 63:
## Known stack suffix:
## THROWS
## LR(1) items:
throws_clause -> THROWS . class_name_list [ SEMICOLON REQUIRES OLD L_BRACE ENSURES ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name_list shift to state 64
-- On class_name shift to state 31
## Reductions:

State 64:
## Known stack suffix:
## THROWS class_name_list
## LR(1) items:
throws_clause -> THROWS class_name_list . [ SEMICOLON REQUIRES OLD L_BRACE ENSURES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production throws_clause -> THROWS class_name_list

State 65:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause . requires_clause old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On REQUIRES shift to state 66
-- On requires_clause shift to state 433
## Reductions:
-- On SEMICOLON reduce production requires_clause ->
-- On OLD reduce production requires_clause ->
-- On L_BRACE reduce production requires_clause ->
-- On ENSURES reduce production requires_clause ->

State 66:
## Known stack suffix:
## REQUIRES
## LR(1) items:
requires_clause -> REQUIRES . method_body [ SEMICOLON OLD L_BRACE ENSURES ]
## Transitions:
-- On SEMICOLON shift to state 67
-- On L_BRACE shift to state 68
-- On method_body shift to state 432
## Reductions:

State 67:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
method_body -> SEMICOLON . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE OLD NULL NATIVE L_BRACE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM ENSURES EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_body -> SEMICOLON

State 68:
## Known stack suffix:
## L_BRACE
## LR(1) items:
method_body -> L_BRACE . declaration_or_statement_list_star catch_clause_list_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE OLD NULL NATIVE L_BRACE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM ENSURES EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On VIRTUALINVOKE shift to state 69
-- On UNKNOWN shift to state 70
-- On TRUE shift to state 18
-- On THROW shift to state 71
-- On TABLESWITCH shift to state 91
-- On STATICINVOKE shift to state 112
-- On SPECIALINVOKE shift to state 141
-- On SHORT shift to state 41
-- On RETURN shift to state 142
-- On RET shift to state 146
-- On QUOTED_NAME shift to state 19
-- On NULL_TYPE shift to state 149
-- On NULL shift to state 42
-- On NOP shift to state 150
-- On L_BRACE shift to state 152
-- On LOOKUPSWITCH shift to state 269
-- On LONG shift to state 43
-- On INTERFACEINVOKE shift to state 277
-- On INT shift to state 44
-- On IF shift to state 278
-- On IDENTIFIER shift to state 20
-- On GOTO shift to state 107
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EXITMONITOR shift to state 311
-- On ENTERMONITOR shift to state 314
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CMPLT shift to state 171
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BREAKPOINT shift to state 317
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On variable shift to state 319
-- On statement shift to state 372
-- On reference shift to state 393
-- On quoted_name shift to state 394
-- On nonvoid_type shift to state 395
-- On nonstatic_invoke shift to state 349
-- On name shift to state 78
-- On local_name shift to state 396
-- On label_name shift to state 402
-- On jimple_type shift to state 404
-- On invoke_expr shift to state 410
-- On identifier shift to state 412
-- On goto_stmt shift to state 414
-- On full_identifier shift to state 129
-- On field_signature shift to state 366
-- On field_ref shift to state 367
-- On declaration_or_statement_list_star shift to state 415
-- On declaration_or_statement shift to state 429
-- On declaration shift to state 431
-- On base_type_no_name shift to state 131
-- On array_ref shift to state 371
## Reductions:
-- On R_BRACE reduce production declaration_or_statement_list_star ->
-- On CATCH reduce production declaration_or_statement_list_star ->

State 69:
## Known stack suffix:
## VIRTUALINVOKE
## LR(1) items:
nonstatic_invoke -> VIRTUALINVOKE . [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonstatic_invoke -> VIRTUALINVOKE

State 70:
## Known stack suffix:
## UNKNOWN
## LR(1) items:
jimple_type -> UNKNOWN . [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jimple_type -> UNKNOWN

State 71:
## Known stack suffix:
## THROW
## LR(1) items:
statement -> THROW . immediate SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 87
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 72:
## Known stack suffix:
## STRING_CONSTANT
## LR(1) items:
string_constant -> STRING_CONSTANT . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_constant -> STRING_CONSTANT

State 73:
## Known stack suffix:
## NULL
## LR(1) items:
constant -> NULL . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> NULL

State 74:
## Known stack suffix:
## MINUS
## LR(1) items:
minus_question_mark -> MINUS . [ INTEGER_CONSTANT_LONG INTEGER_CONSTANT FLOAT_CONSTANT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production minus_question_mark -> MINUS

State 75:
## Known stack suffix:
## CLASS
## LR(1) items:
constant -> CLASS . string_constant [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On STRING_CONSTANT shift to state 72
-- On string_constant shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## CLASS string_constant
## LR(1) items:
constant -> CLASS string_constant . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CLASS string_constant

State 77:
## Known stack suffix:
## string_constant
## LR(1) items:
constant -> string_constant . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> string_constant

State 78:
## Known stack suffix:
## name
## LR(1) items:
local_name -> name . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO EQUALS DOT DIV COMMA COLON_EQUALS CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_name -> name

State 79:
## Known stack suffix:
## minus_question_mark
## LR(1) items:
constant -> minus_question_mark . integer_constant [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
constant -> minus_question_mark . integer_constant_long [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
constant -> minus_question_mark . float_constant [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On INTEGER_CONSTANT_LONG shift to state 80
-- On INTEGER_CONSTANT shift to state 81
-- On FLOAT_CONSTANT shift to state 82
-- On integer_constant_long shift to state 83
-- On integer_constant shift to state 84
-- On float_constant shift to state 85
## Reductions:

State 80:
## Known stack suffix:
## INTEGER_CONSTANT_LONG
## LR(1) items:
integer_constant_long -> INTEGER_CONSTANT_LONG . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production integer_constant_long -> INTEGER_CONSTANT_LONG

State 81:
## Known stack suffix:
## INTEGER_CONSTANT
## LR(1) items:
integer_constant -> INTEGER_CONSTANT . [ XOR USHR TRUE SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF IDENTIFIER GOTO FALSE EMP DIV COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AS AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production integer_constant -> INTEGER_CONSTANT

State 82:
## Known stack suffix:
## FLOAT_CONSTANT
## LR(1) items:
float_constant -> FLOAT_CONSTANT . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production float_constant -> FLOAT_CONSTANT

State 83:
## Known stack suffix:
## minus_question_mark integer_constant_long
## LR(1) items:
constant -> minus_question_mark integer_constant_long . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> minus_question_mark integer_constant_long

State 84:
## Known stack suffix:
## minus_question_mark integer_constant
## LR(1) items:
constant -> minus_question_mark integer_constant . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> minus_question_mark integer_constant

State 85:
## Known stack suffix:
## minus_question_mark float_constant
## LR(1) items:
constant -> minus_question_mark float_constant . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> minus_question_mark float_constant

State 86:
## Known stack suffix:
## local_name
## LR(1) items:
immediate -> local_name . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production immediate -> local_name

State 87:
## Known stack suffix:
## THROW immediate
## LR(1) items:
statement -> THROW immediate . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## THROW immediate SEMICOLON
## LR(1) items:
statement -> THROW immediate SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> THROW immediate SEMICOLON

State 89:
## Known stack suffix:
## identifier
## LR(1) items:
name -> identifier . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS L_PAREN GOTO DOT DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production name -> identifier

State 90:
## Known stack suffix:
## constant
## LR(1) items:
immediate -> constant . [ XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production immediate -> constant

State 91:
## Known stack suffix:
## TABLESWITCH
## LR(1) items:
statement -> TABLESWITCH . L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On L_PAREN shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## TABLESWITCH L_PAREN
## LR(1) items:
statement -> TABLESWITCH L_PAREN . immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 93
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 93:
## Known stack suffix:
## TABLESWITCH L_PAREN immediate
## LR(1) items:
statement -> TABLESWITCH L_PAREN immediate . R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On R_PAREN shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## TABLESWITCH L_PAREN immediate R_PAREN
## LR(1) items:
statement -> TABLESWITCH L_PAREN immediate R_PAREN . L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On L_BRACE shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## TABLESWITCH L_PAREN immediate R_PAREN L_BRACE
## LR(1) items:
statement -> TABLESWITCH L_PAREN immediate R_PAREN L_BRACE . case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On DEFAULT shift to state 96
-- On CASE shift to state 97
-- On case_stmt_list_plus shift to state 100
-- On case_stmt shift to state 103
-- On case_label shift to state 105
## Reductions:

State 96:
## Known stack suffix:
## DEFAULT
## LR(1) items:
case_label -> DEFAULT . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_label -> DEFAULT

State 97:
## Known stack suffix:
## CASE
## LR(1) items:
case_label -> CASE . minus_question_mark integer_constant [ COLON ]
## Transitions:
-- On MINUS shift to state 74
-- On minus_question_mark shift to state 98
## Reductions:
-- On INTEGER_CONSTANT reduce production minus_question_mark ->

State 98:
## Known stack suffix:
## CASE minus_question_mark
## LR(1) items:
case_label -> CASE minus_question_mark . integer_constant [ COLON ]
## Transitions:
-- On INTEGER_CONSTANT shift to state 81
-- On integer_constant shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## CASE minus_question_mark integer_constant
## LR(1) items:
case_label -> CASE minus_question_mark integer_constant . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_label -> CASE minus_question_mark integer_constant

State 100:
## Known stack suffix:
## TABLESWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus
## LR(1) items:
statement -> TABLESWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus . R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On R_BRACE shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## TABLESWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE
## LR(1) items:
statement -> TABLESWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## TABLESWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON
## LR(1) items:
statement -> TABLESWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> TABLESWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON

State 103:
## Known stack suffix:
## case_stmt
## LR(1) items:
case_stmt_list_plus -> case_stmt . [ R_BRACE ]
case_stmt_list_plus -> case_stmt . case_stmt_list_plus [ R_BRACE ]
## Transitions:
-- On DEFAULT shift to state 96
-- On CASE shift to state 97
-- On case_stmt_list_plus shift to state 104
-- On case_stmt shift to state 103
-- On case_label shift to state 105
## Reductions:
-- On R_BRACE reduce production case_stmt_list_plus -> case_stmt

State 104:
## Known stack suffix:
## case_stmt case_stmt_list_plus
## LR(1) items:
case_stmt_list_plus -> case_stmt case_stmt_list_plus . [ R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_stmt_list_plus -> case_stmt case_stmt_list_plus

State 105:
## Known stack suffix:
## case_label
## LR(1) items:
case_stmt -> case_label . COLON goto_stmt [ R_BRACE DEFAULT CASE ]
## Transitions:
-- On COLON shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## case_label COLON
## LR(1) items:
case_stmt -> case_label COLON . goto_stmt [ R_BRACE DEFAULT CASE ]
## Transitions:
-- On GOTO shift to state 107
-- On goto_stmt shift to state 111
## Reductions:

State 107:
## Known stack suffix:
## GOTO
## LR(1) items:
goto_stmt -> GOTO . label_name SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE DEFAULT CMPLT CHAR CATCH CASE BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On label_name shift to state 108
-- On identifier shift to state 110
## Reductions:

State 108:
## Known stack suffix:
## GOTO label_name
## LR(1) items:
goto_stmt -> GOTO label_name . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE DEFAULT CMPLT CHAR CATCH CASE BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## GOTO label_name SEMICOLON
## LR(1) items:
goto_stmt -> GOTO label_name SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE DEFAULT CMPLT CHAR CATCH CASE BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production goto_stmt -> GOTO label_name SEMICOLON

State 110:
## Known stack suffix:
## identifier
## LR(1) items:
label_name -> identifier . [ WITH TO SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_name -> identifier

State 111:
## Known stack suffix:
## case_label COLON goto_stmt
## LR(1) items:
case_stmt -> case_label COLON goto_stmt . [ R_BRACE DEFAULT CASE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production case_stmt -> case_label COLON goto_stmt

State 112:
## Known stack suffix:
## STATICINVOKE
## LR(1) items:
invoke_expr -> STATICINVOKE . method_signature L_PAREN arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On CMPLT shift to state 113
-- On method_signature shift to state 133
## Reductions:

State 113:
## Known stack suffix:
## CMPLT
## LR(1) items:
method_signature -> CMPLT . class_name COLON jtype name L_PAREN parameter_list_question_mark R_PAREN CMPGT [ L_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## CMPLT class_name
## LR(1) items:
method_signature -> CMPLT class_name . COLON jtype name L_PAREN parameter_list_question_mark R_PAREN CMPGT [ L_PAREN ]
## Transitions:
-- On COLON shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## CMPLT class_name COLON
## LR(1) items:
method_signature -> CMPLT class_name COLON . jtype name L_PAREN parameter_list_question_mark R_PAREN CMPGT [ L_PAREN ]
## Transitions:
-- On VOID shift to state 40
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 55
-- On jtype shift to state 116
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 116:
## Known stack suffix:
## CMPLT class_name COLON jtype
## LR(1) items:
method_signature -> CMPLT class_name COLON jtype . name L_PAREN parameter_list_question_mark R_PAREN CMPGT [ L_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 57
-- On name shift to state 117
-- On identifier shift to state 89
## Reductions:

State 117:
## Known stack suffix:
## CMPLT class_name COLON jtype name
## LR(1) items:
method_signature -> CMPLT class_name COLON jtype name . L_PAREN parameter_list_question_mark R_PAREN CMPGT [ L_PAREN ]
## Transitions:
-- On L_PAREN shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## CMPLT class_name COLON jtype name L_PAREN
## LR(1) items:
method_signature -> CMPLT class_name COLON jtype name L_PAREN . parameter_list_question_mark R_PAREN CMPGT [ L_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On parameter_list_question_mark shift to state 119
-- On parameter_list shift to state 122
-- On parameter shift to state 123
-- On nonvoid_type shift to state 126
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:
-- On R_PAREN reduce production parameter_list_question_mark ->

State 119:
## Known stack suffix:
## CMPLT class_name COLON jtype name L_PAREN parameter_list_question_mark
## LR(1) items:
method_signature -> CMPLT class_name COLON jtype name L_PAREN parameter_list_question_mark . R_PAREN CMPGT [ L_PAREN ]
## Transitions:
-- On R_PAREN shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## CMPLT class_name COLON jtype name L_PAREN parameter_list_question_mark R_PAREN
## LR(1) items:
method_signature -> CMPLT class_name COLON jtype name L_PAREN parameter_list_question_mark R_PAREN . CMPGT [ L_PAREN ]
## Transitions:
-- On CMPGT shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## CMPLT class_name COLON jtype name L_PAREN parameter_list_question_mark R_PAREN CMPGT
## LR(1) items:
method_signature -> CMPLT class_name COLON jtype name L_PAREN parameter_list_question_mark R_PAREN CMPGT . [ L_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_signature -> CMPLT class_name COLON jtype name L_PAREN parameter_list_question_mark R_PAREN CMPGT

State 122:
## Known stack suffix:
## parameter_list
## LR(1) items:
parameter_list_question_mark -> parameter_list . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_list_question_mark -> parameter_list

State 123:
## Known stack suffix:
## parameter
## LR(1) items:
parameter_list -> parameter . [ R_PAREN ]
parameter_list -> parameter . COMMA parameter_list [ R_PAREN ]
## Transitions:
-- On COMMA shift to state 124
## Reductions:
-- On R_PAREN reduce production parameter_list -> parameter

State 124:
## Known stack suffix:
## parameter COMMA
## LR(1) items:
parameter_list -> parameter COMMA . parameter_list [ R_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On parameter_list shift to state 125
-- On parameter shift to state 123
-- On nonvoid_type shift to state 126
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 125:
## Known stack suffix:
## parameter COMMA parameter_list
## LR(1) items:
parameter_list -> parameter COMMA parameter_list . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_list -> parameter COMMA parameter_list

State 126:
## Known stack suffix:
## nonvoid_type
## LR(1) items:
parameter -> nonvoid_type . [ R_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter -> nonvoid_type

State 127:
## Known stack suffix:
## identifier
## LR(1) items:
nonvoid_type -> identifier . array_brackets_list_star [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
-- On L_BRACKET shift to state 51
-- On array_brackets_list_star shift to state 128
## Reductions:
-- On TRUE reduce production array_brackets_list_star ->
-- On SEMICOLON reduce production array_brackets_list_star ->
-- On R_PAREN reduce production array_brackets_list_star ->
-- On QUOTED_NAME reduce production array_brackets_list_star ->
-- On IDENTIFIER reduce production array_brackets_list_star ->
-- On FALSE reduce production array_brackets_list_star ->
-- On EMP reduce production array_brackets_list_star ->
-- On COMMA reduce production array_brackets_list_star ->
-- On AS reduce production array_brackets_list_star ->

State 128:
## Known stack suffix:
## identifier array_brackets_list_star
## LR(1) items:
nonvoid_type -> identifier array_brackets_list_star . [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonvoid_type -> identifier array_brackets_list_star

State 129:
## Known stack suffix:
## full_identifier
## LR(1) items:
nonvoid_type -> full_identifier . array_brackets_list_star [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
-- On L_BRACKET shift to state 51
-- On array_brackets_list_star shift to state 130
## Reductions:
-- On TRUE reduce production array_brackets_list_star ->
-- On SEMICOLON reduce production array_brackets_list_star ->
-- On R_PAREN reduce production array_brackets_list_star ->
-- On QUOTED_NAME reduce production array_brackets_list_star ->
-- On IDENTIFIER reduce production array_brackets_list_star ->
-- On FALSE reduce production array_brackets_list_star ->
-- On EMP reduce production array_brackets_list_star ->
-- On COMMA reduce production array_brackets_list_star ->
-- On AS reduce production array_brackets_list_star ->

State 130:
## Known stack suffix:
## full_identifier array_brackets_list_star
## LR(1) items:
nonvoid_type -> full_identifier array_brackets_list_star . [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonvoid_type -> full_identifier array_brackets_list_star

State 131:
## Known stack suffix:
## base_type_no_name
## LR(1) items:
nonvoid_type -> base_type_no_name . array_brackets_list_star [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
-- On L_BRACKET shift to state 51
-- On array_brackets_list_star shift to state 132
## Reductions:
-- On TRUE reduce production array_brackets_list_star ->
-- On SEMICOLON reduce production array_brackets_list_star ->
-- On R_PAREN reduce production array_brackets_list_star ->
-- On QUOTED_NAME reduce production array_brackets_list_star ->
-- On IDENTIFIER reduce production array_brackets_list_star ->
-- On FALSE reduce production array_brackets_list_star ->
-- On EMP reduce production array_brackets_list_star ->
-- On COMMA reduce production array_brackets_list_star ->
-- On AS reduce production array_brackets_list_star ->

State 132:
## Known stack suffix:
## base_type_no_name array_brackets_list_star
## LR(1) items:
nonvoid_type -> base_type_no_name array_brackets_list_star . [ TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonvoid_type -> base_type_no_name array_brackets_list_star

State 133:
## Known stack suffix:
## STATICINVOKE method_signature
## LR(1) items:
invoke_expr -> STATICINVOKE method_signature . L_PAREN arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On L_PAREN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## STATICINVOKE method_signature L_PAREN
## LR(1) items:
invoke_expr -> STATICINVOKE method_signature L_PAREN . arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 135
-- On identifier shift to state 89
-- On constant shift to state 90
-- On arg_list_question_mark shift to state 138
-- On arg_list shift to state 140
## Reductions:
-- On R_PAREN reduce production arg_list_question_mark ->
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 135:
## Known stack suffix:
## immediate
## LR(1) items:
arg_list -> immediate . [ R_PAREN ]
arg_list -> immediate . COMMA arg_list [ R_PAREN ]
## Transitions:
-- On COMMA shift to state 136
## Reductions:
-- On R_PAREN reduce production arg_list -> immediate

State 136:
## Known stack suffix:
## immediate COMMA
## LR(1) items:
arg_list -> immediate COMMA . arg_list [ R_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 135
-- On identifier shift to state 89
-- On constant shift to state 90
-- On arg_list shift to state 137
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 137:
## Known stack suffix:
## immediate COMMA arg_list
## LR(1) items:
arg_list -> immediate COMMA arg_list . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_list -> immediate COMMA arg_list

State 138:
## Known stack suffix:
## STATICINVOKE method_signature L_PAREN arg_list_question_mark
## LR(1) items:
invoke_expr -> STATICINVOKE method_signature L_PAREN arg_list_question_mark . R_PAREN [ SEMICOLON ]
## Transitions:
-- On R_PAREN shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## STATICINVOKE method_signature L_PAREN arg_list_question_mark R_PAREN
## LR(1) items:
invoke_expr -> STATICINVOKE method_signature L_PAREN arg_list_question_mark R_PAREN . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production invoke_expr -> STATICINVOKE method_signature L_PAREN arg_list_question_mark R_PAREN

State 140:
## Known stack suffix:
## arg_list
## LR(1) items:
arg_list_question_mark -> arg_list . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arg_list_question_mark -> arg_list

State 141:
## Known stack suffix:
## SPECIALINVOKE
## LR(1) items:
nonstatic_invoke -> SPECIALINVOKE . [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonstatic_invoke -> SPECIALINVOKE

State 142:
## Known stack suffix:
## RETURN
## LR(1) items:
statement -> RETURN . immediate_question_mark SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate_question_mark shift to state 143
-- On immediate shift to state 145
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On SEMICOLON reduce production immediate_question_mark ->
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 143:
## Known stack suffix:
## RETURN immediate_question_mark
## LR(1) items:
statement -> RETURN immediate_question_mark . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## RETURN immediate_question_mark SEMICOLON
## LR(1) items:
statement -> RETURN immediate_question_mark SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> RETURN immediate_question_mark SEMICOLON

State 145:
## Known stack suffix:
## immediate
## LR(1) items:
immediate_question_mark -> immediate . [ SEMICOLON R_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production immediate_question_mark -> immediate

State 146:
## Known stack suffix:
## RET
## LR(1) items:
statement -> RET . immediate_question_mark SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate_question_mark shift to state 147
-- On immediate shift to state 145
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On SEMICOLON reduce production immediate_question_mark ->
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 147:
## Known stack suffix:
## RET immediate_question_mark
## LR(1) items:
statement -> RET immediate_question_mark . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## RET immediate_question_mark SEMICOLON
## LR(1) items:
statement -> RET immediate_question_mark SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> RET immediate_question_mark SEMICOLON

State 149:
## Known stack suffix:
## NULL_TYPE
## LR(1) items:
jimple_type -> NULL_TYPE . [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jimple_type -> NULL_TYPE

State 150:
## Known stack suffix:
## NOP
## LR(1) items:
statement -> NOP . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## NOP SEMICOLON
## LR(1) items:
statement -> NOP SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> NOP SEMICOLON

State 152:
## Known stack suffix:
## L_BRACE
## LR(1) items:
statement -> L_BRACE . lvariable_list R_BRACE COLON spec SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On QUESTIONMARK shift to state 153
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_list_ne shift to state 156
-- On lvariable_list shift to state 157
-- On lvariable shift to state 265
-- On identifier shift to state 268
-- On at_identifier shift to state 200
## Reductions:
-- On R_BRACE reduce production lvariable_list ->

State 153:
## Known stack suffix:
## QUESTIONMARK
## LR(1) items:
lvariable -> QUESTIONMARK . identifier [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## QUESTIONMARK identifier
## LR(1) items:
lvariable -> QUESTIONMARK identifier . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable -> QUESTIONMARK identifier

State 155:
## Known stack suffix:
## AT_IDENTIFIER
## LR(1) items:
at_identifier -> AT_IDENTIFIER . [ XOR WITHOUT WHERE WAND VOID VDASH USHR TRUE SHR SHORT SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR NULL NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO LONG LEADSTO INT INCONSISTENCY IMPORT IMPLICATION IMP IF IDENTIFIER FULL_IDENTIFIER FRAME FLOAT FALSE EQUIV EQUALS EOF EMP DOUBLE DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP CHAR BYTE BOOLEAN BIMP AS AND ABSRULE ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production at_identifier -> AT_IDENTIFIER

State 156:
## Known stack suffix:
## lvariable_list_ne
## LR(1) items:
lvariable_list -> lvariable_list_ne . [ R_BRACE NOTINCONTEXT NOTIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable_list -> lvariable_list_ne

State 157:
## Known stack suffix:
## L_BRACE lvariable_list
## LR(1) items:
statement -> L_BRACE lvariable_list . R_BRACE COLON spec SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On R_BRACE shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## L_BRACE lvariable_list R_BRACE
## LR(1) items:
statement -> L_BRACE lvariable_list R_BRACE . COLON spec SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On COLON shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## L_BRACE lvariable_list R_BRACE COLON
## LR(1) items:
statement -> L_BRACE lvariable_list R_BRACE COLON . spec SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On L_BRACE shift to state 160
-- On spec shift to state 263
## Reductions:

State 160:
## Known stack suffix:
## L_BRACE
## LR(1) items:
spec -> L_BRACE . formula R_BRACE L_BRACE formula R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 251
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_BRACE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 161:
## Known stack suffix:
## STRING_CONSTANT
## LR(1) items:
jargument -> STRING_CONSTANT . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> STRING_CONSTANT

State 162:
## Known stack suffix:
## RETURN
## LR(1) items:
jargument -> RETURN . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> RETURN

State 163:
## Known stack suffix:
## MINUS
## LR(1) items:
jargument -> MINUS . INTEGER_CONSTANT [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
-- On INTEGER_CONSTANT shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## MINUS INTEGER_CONSTANT
## LR(1) items:
jargument -> MINUS INTEGER_CONSTANT . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> MINUS INTEGER_CONSTANT

State 165:
## Known stack suffix:
## L_PAREN
## LR(1) items:
formula -> L_PAREN . formula R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
jargument -> L_PAREN . jargument binop_val_no_multor jargument R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 220
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 242
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 166:
## Known stack suffix:
## L_BRACE
## LR(1) items:
jargument -> L_BRACE . fldlist R_BRACE [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 167
-- On fldlist shift to state 204
## Reductions:
-- On R_BRACE reduce production fldlist ->

State 167:
## Known stack suffix:
## identifier
## LR(1) items:
fldlist -> identifier . EQUALS jargument [ R_PAREN R_BRACE ]
fldlist -> identifier . EQUALS jargument SEMICOLON fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On EQUALS shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## identifier EQUALS
## LR(1) items:
fldlist -> identifier EQUALS . jargument [ R_PAREN R_BRACE ]
fldlist -> identifier EQUALS . jargument SEMICOLON fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 201
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 169:
## Known stack suffix:
## L_PAREN
## LR(1) items:
jargument -> L_PAREN . jargument binop_val_no_multor jargument R_PAREN [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DOT DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 178
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 170:
## Known stack suffix:
## INTEGER_CONSTANT
## LR(1) items:
jargument -> INTEGER_CONSTANT . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> INTEGER_CONSTANT

State 171:
## Known stack suffix:
## CMPLT
## LR(1) items:
field_signature -> CMPLT . class_name COLON jtype name CMPGT [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO INCONSISTENCY IMPORT IMPLICATION IMP IF FRAME EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## CMPLT class_name
## LR(1) items:
field_signature -> CMPLT class_name . COLON jtype name CMPGT [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO INCONSISTENCY IMPORT IMPLICATION IMP IF FRAME EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ABS ABDUCTION ]
## Transitions:
-- On COLON shift to state 173
## Reductions:

State 173:
## Known stack suffix:
## CMPLT class_name COLON
## LR(1) items:
field_signature -> CMPLT class_name COLON . jtype name CMPGT [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO INCONSISTENCY IMPORT IMPLICATION IMP IF FRAME EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ABS ABDUCTION ]
## Transitions:
-- On VOID shift to state 40
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 55
-- On jtype shift to state 174
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 174:
## Known stack suffix:
## CMPLT class_name COLON jtype
## LR(1) items:
field_signature -> CMPLT class_name COLON jtype . name CMPGT [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO INCONSISTENCY IMPORT IMPLICATION IMP IF FRAME EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 57
-- On name shift to state 175
-- On identifier shift to state 89
## Reductions:

State 175:
## Known stack suffix:
## CMPLT class_name COLON jtype name
## LR(1) items:
field_signature -> CMPLT class_name COLON jtype name . CMPGT [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO INCONSISTENCY IMPORT IMPLICATION IMP IF FRAME EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ABS ABDUCTION ]
## Transitions:
-- On CMPGT shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## CMPLT class_name COLON jtype name CMPGT
## LR(1) items:
field_signature -> CMPLT class_name COLON jtype name CMPGT . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO INCONSISTENCY IMPORT IMPLICATION IMP IF FRAME EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_signature -> CMPLT class_name COLON jtype name CMPGT

State 177:
## Known stack suffix:
## lvariable
## LR(1) items:
jargument -> lvariable . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DOT DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> lvariable

State 178:
## Known stack suffix:
## L_PAREN jargument
## LR(1) items:
jargument -> L_PAREN jargument . binop_val_no_multor jargument R_PAREN [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DOT DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
## Transitions:
-- On XOR shift to state 179
-- On USHR shift to state 180
-- On SHR shift to state 181
-- On SHL shift to state 182
-- On PLUS shift to state 183
-- On MOD shift to state 184
-- On MINUS shift to state 185
-- On DIV shift to state 186
-- On AND shift to state 187
-- On binop_val_no_multor shift to state 188
## Reductions:

State 179:
## Known stack suffix:
## XOR
## LR(1) items:
binop_val_no_multor -> XOR . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> XOR

State 180:
## Known stack suffix:
## USHR
## LR(1) items:
binop_val_no_multor -> USHR . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> USHR

State 181:
## Known stack suffix:
## SHR
## LR(1) items:
binop_val_no_multor -> SHR . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> SHR

State 182:
## Known stack suffix:
## SHL
## LR(1) items:
binop_val_no_multor -> SHL . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> SHL

State 183:
## Known stack suffix:
## PLUS
## LR(1) items:
binop_val_no_multor -> PLUS . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> PLUS

State 184:
## Known stack suffix:
## MOD
## LR(1) items:
binop_val_no_multor -> MOD . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> MOD

State 185:
## Known stack suffix:
## MINUS
## LR(1) items:
binop_val_no_multor -> MINUS . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> MINUS

State 186:
## Known stack suffix:
## DIV
## LR(1) items:
binop_val_no_multor -> DIV . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> DIV

State 187:
## Known stack suffix:
## AND
## LR(1) items:
binop_val_no_multor -> AND . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_val_no_multor -> AND

State 188:
## Known stack suffix:
## L_PAREN jargument binop_val_no_multor
## LR(1) items:
jargument -> L_PAREN jargument binop_val_no_multor . jargument R_PAREN [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 189
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 189:
## Known stack suffix:
## L_PAREN jargument binop_val_no_multor jargument
## LR(1) items:
jargument -> L_PAREN jargument binop_val_no_multor jargument . R_PAREN [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
-- On R_PAREN shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## L_PAREN jargument binop_val_no_multor jargument R_PAREN
## LR(1) items:
jargument -> L_PAREN jargument binop_val_no_multor jargument R_PAREN . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> L_PAREN jargument binop_val_no_multor jargument R_PAREN

State 191:
## Known stack suffix:
## identifier
## LR(1) items:
jargument -> identifier . L_PAREN jargument_list R_PAREN [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
lvariable -> identifier . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
## Transitions:
-- On L_PAREN shift to state 192
## Reductions:
-- On XOR reduce production lvariable -> identifier
-- On WITHOUT reduce production lvariable -> identifier
-- On WHERE reduce production lvariable -> identifier
-- On WAND reduce production lvariable -> identifier
-- On VDASH reduce production lvariable -> identifier
-- On USHR reduce production lvariable -> identifier
-- On SHR reduce production lvariable -> identifier
-- On SHL reduce production lvariable -> identifier
-- On SEMICOLON reduce production lvariable -> identifier
-- On R_PAREN reduce production lvariable -> identifier
-- On R_BRACE reduce production lvariable -> identifier
-- On RULE reduce production lvariable -> identifier
-- On REWRITERULE reduce production lvariable -> identifier
-- On PUREGUARD reduce production lvariable -> identifier
-- On PLUS reduce production lvariable -> identifier
-- On ORTEXT reduce production lvariable -> identifier
-- On OROR reduce production lvariable -> identifier
-- On OR reduce production lvariable -> identifier
-- On MULT reduce production lvariable -> identifier
-- On MOD reduce production lvariable -> identifier
-- On MINUS reduce production lvariable -> identifier
-- On MAPSTO reduce production lvariable -> identifier
-- On LEADSTO reduce production lvariable -> identifier
-- On IMPORT reduce production lvariable -> identifier
-- On IMP reduce production lvariable -> identifier
-- On IF reduce production lvariable -> identifier
-- On EQUIV reduce production lvariable -> identifier
-- On EOF reduce production lvariable -> identifier
-- On DIV reduce production lvariable -> identifier
-- On DASHV reduce production lvariable -> identifier
-- On CONSTRUCTOR reduce production lvariable -> identifier
-- On COMMA reduce production lvariable -> identifier
-- On BIMP reduce production lvariable -> identifier
-- On AND reduce production lvariable -> identifier
-- On ABSRULE reduce production lvariable -> identifier

State 192:
## Known stack suffix:
## identifier L_PAREN
## LR(1) items:
jargument -> identifier L_PAREN . jargument_list R_PAREN [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 194
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 193:
## Known stack suffix:
## jargument_list_ne
## LR(1) items:
jargument_list -> jargument_list_ne . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_list -> jargument_list_ne

State 194:
## Known stack suffix:
## identifier L_PAREN jargument_list
## LR(1) items:
jargument -> identifier L_PAREN jargument_list . R_PAREN [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
## Transitions:
-- On R_PAREN shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
jargument -> identifier L_PAREN jargument_list R_PAREN . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EOF DIV DASHV CONSTRUCTOR COMMA BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> identifier L_PAREN jargument_list R_PAREN

State 196:
## Known stack suffix:
## jargument
## LR(1) items:
jargument_list_ne -> jargument . [ R_PAREN ]
jargument_list_ne -> jargument . COMMA jargument_list_ne [ R_PAREN ]
## Transitions:
-- On COMMA shift to state 197
## Reductions:
-- On R_PAREN reduce production jargument_list_ne -> jargument

State 197:
## Known stack suffix:
## jargument COMMA
## LR(1) items:
jargument_list_ne -> jargument COMMA . jargument_list_ne [ R_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 198
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 198:
## Known stack suffix:
## jargument COMMA jargument_list_ne
## LR(1) items:
jargument_list_ne -> jargument COMMA jargument_list_ne . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_list_ne -> jargument COMMA jargument_list_ne

State 199:
## Known stack suffix:
## field_signature
## LR(1) items:
jargument -> field_signature . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> field_signature

State 200:
## Known stack suffix:
## at_identifier
## LR(1) items:
lvariable -> at_identifier . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable -> at_identifier

State 201:
## Known stack suffix:
## identifier EQUALS jargument
## LR(1) items:
fldlist -> identifier EQUALS jargument . [ R_PAREN R_BRACE ]
fldlist -> identifier EQUALS jargument . SEMICOLON fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On SEMICOLON shift to state 202
## Reductions:
-- On R_PAREN reduce production fldlist -> identifier EQUALS jargument
-- On R_BRACE reduce production fldlist -> identifier EQUALS jargument

State 202:
## Known stack suffix:
## identifier EQUALS jargument SEMICOLON
## LR(1) items:
fldlist -> identifier EQUALS jargument SEMICOLON . fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 167
-- On fldlist shift to state 203
## Reductions:
-- On R_PAREN reduce production fldlist ->
-- On R_BRACE reduce production fldlist ->

State 203:
## Known stack suffix:
## identifier EQUALS jargument SEMICOLON fldlist
## LR(1) items:
fldlist -> identifier EQUALS jargument SEMICOLON fldlist . [ R_PAREN R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fldlist -> identifier EQUALS jargument SEMICOLON fldlist

State 204:
## Known stack suffix:
## L_BRACE fldlist
## LR(1) items:
jargument -> L_BRACE fldlist . R_BRACE [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
-- On R_BRACE shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## L_BRACE fldlist R_BRACE
## LR(1) items:
jargument -> L_BRACE fldlist R_BRACE . [ XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument -> L_BRACE fldlist R_BRACE

State 206:
## Known stack suffix:
## FALSE
## LR(1) items:
formula -> FALSE . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
identifier -> FALSE . [ XOR USHR SHR SHL PLUS NOTINCONTEXT NOTIN MOD MINUS L_PAREN EQUALS DOT DIV COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Reductions:
-- On XOR reduce production identifier -> FALSE
-- On WITHOUT reduce production formula -> FALSE
-- On WHERE reduce production formula -> FALSE
-- On WAND reduce production formula -> FALSE
-- On VDASH reduce production formula -> FALSE
-- On USHR reduce production identifier -> FALSE
-- On SHR reduce production identifier -> FALSE
-- On SHL reduce production identifier -> FALSE
-- On SEMICOLON reduce production formula -> FALSE
-- On R_PAREN reduce production formula -> FALSE
-- On R_BRACE reduce production formula -> FALSE
-- On RULE reduce production formula -> FALSE
-- On REWRITERULE reduce production formula -> FALSE
-- On PUREGUARD reduce production formula -> FALSE
-- On PLUS reduce production identifier -> FALSE
-- On ORTEXT reduce production formula -> FALSE
-- On OROR reduce production formula -> FALSE
-- On OR reduce production formula -> FALSE
-- On NOTINCONTEXT reduce production identifier -> FALSE
-- On NOTIN reduce production identifier -> FALSE
-- On MULT reduce production formula -> FALSE
-- On MOD reduce production identifier -> FALSE
-- On MINUS reduce production identifier -> FALSE
-- On L_PAREN reduce production identifier -> FALSE
-- On LEADSTO reduce production formula -> FALSE
-- On IMPORT reduce production formula -> FALSE
-- On IMP reduce production formula -> FALSE
-- On IF reduce production formula -> FALSE
-- On EQUIV reduce production formula -> FALSE
-- On EQUALS reduce production identifier -> FALSE
-- On EOF reduce production formula -> FALSE
-- On DOT reduce production identifier -> FALSE
-- On DIV reduce production identifier -> FALSE
-- On DASHV reduce production formula -> FALSE
-- On CONSTRUCTOR reduce production formula -> FALSE
-- On COMMA reduce production identifier -> FALSE
-- On COLON reduce production identifier -> FALSE
-- On CMPNE reduce production identifier -> FALSE
-- On CMPLT reduce production identifier -> FALSE
-- On CMPLE reduce production identifier -> FALSE
-- On CMPL reduce production identifier -> FALSE
-- On CMPGT reduce production identifier -> FALSE
-- On CMPGE reduce production identifier -> FALSE
-- On CMPG reduce production identifier -> FALSE
-- On CMPEQ reduce production identifier -> FALSE
-- On CMP reduce production identifier -> FALSE
-- On BIMP reduce production formula -> FALSE
-- On AND reduce production identifier -> FALSE
-- On ABSRULE reduce production formula -> FALSE

State 207:
## Known stack suffix:
## EMP
## LR(1) items:
formula -> EMP . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
identifier -> EMP . [ XOR USHR SHR SHL PLUS NOTINCONTEXT NOTIN MOD MINUS L_PAREN EQUALS DOT DIV COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Reductions:
-- On XOR reduce production identifier -> EMP
-- On WITHOUT reduce production formula -> EMP
-- On WHERE reduce production formula -> EMP
-- On WAND reduce production formula -> EMP
-- On VDASH reduce production formula -> EMP
-- On USHR reduce production identifier -> EMP
-- On SHR reduce production identifier -> EMP
-- On SHL reduce production identifier -> EMP
-- On SEMICOLON reduce production formula -> EMP
-- On R_PAREN reduce production formula -> EMP
-- On R_BRACE reduce production formula -> EMP
-- On RULE reduce production formula -> EMP
-- On REWRITERULE reduce production formula -> EMP
-- On PUREGUARD reduce production formula -> EMP
-- On PLUS reduce production identifier -> EMP
-- On ORTEXT reduce production formula -> EMP
-- On OROR reduce production formula -> EMP
-- On OR reduce production formula -> EMP
-- On NOTINCONTEXT reduce production identifier -> EMP
-- On NOTIN reduce production identifier -> EMP
-- On MULT reduce production formula -> EMP
-- On MOD reduce production identifier -> EMP
-- On MINUS reduce production identifier -> EMP
-- On L_PAREN reduce production identifier -> EMP
-- On LEADSTO reduce production formula -> EMP
-- On IMPORT reduce production formula -> EMP
-- On IMP reduce production formula -> EMP
-- On IF reduce production formula -> EMP
-- On EQUIV reduce production formula -> EMP
-- On EQUALS reduce production identifier -> EMP
-- On EOF reduce production formula -> EMP
-- On DOT reduce production identifier -> EMP
-- On DIV reduce production identifier -> EMP
-- On DASHV reduce production formula -> EMP
-- On CONSTRUCTOR reduce production formula -> EMP
-- On COMMA reduce production identifier -> EMP
-- On COLON reduce production identifier -> EMP
-- On CMPNE reduce production identifier -> EMP
-- On CMPLT reduce production identifier -> EMP
-- On CMPLE reduce production identifier -> EMP
-- On CMPL reduce production identifier -> EMP
-- On CMPGT reduce production identifier -> EMP
-- On CMPGE reduce production identifier -> EMP
-- On CMPG reduce production identifier -> EMP
-- On CMPEQ reduce production identifier -> EMP
-- On CMP reduce production identifier -> EMP
-- On BIMP reduce production formula -> EMP
-- On AND reduce production identifier -> EMP
-- On ABSRULE reduce production formula -> EMP

State 208:
## Known stack suffix:
## BANG
## LR(1) items:
formula -> BANG . identifier L_PAREN jargument_list R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 209
## Reductions:

State 209:
## Known stack suffix:
## BANG identifier
## LR(1) items:
formula -> BANG identifier . L_PAREN jargument_list R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On L_PAREN shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## BANG identifier L_PAREN
## LR(1) items:
formula -> BANG identifier L_PAREN . jargument_list R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 211
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 211:
## Known stack suffix:
## BANG identifier L_PAREN jargument_list
## LR(1) items:
formula -> BANG identifier L_PAREN jargument_list . R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On R_PAREN shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## BANG identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
formula -> BANG identifier L_PAREN jargument_list R_PAREN . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> BANG identifier L_PAREN jargument_list R_PAREN

State 213:
## Known stack suffix:
## lvariable
## LR(1) items:
formula -> lvariable . DOT jargument MAPSTO jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> lvariable . COLON identifier [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
jargument -> lvariable . [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On DOT shift to state 214
-- On COLON shift to state 218
## Reductions:
-- On XOR reduce production jargument -> lvariable
-- On USHR reduce production jargument -> lvariable
-- On SHR reduce production jargument -> lvariable
-- On SHL reduce production jargument -> lvariable
-- On PLUS reduce production jargument -> lvariable
-- On MOD reduce production jargument -> lvariable
-- On MINUS reduce production jargument -> lvariable
-- On EQUALS reduce production jargument -> lvariable
-- On DIV reduce production jargument -> lvariable
-- On CMPNE reduce production jargument -> lvariable
-- On CMPLT reduce production jargument -> lvariable
-- On CMPLE reduce production jargument -> lvariable
-- On CMPL reduce production jargument -> lvariable
-- On CMPGT reduce production jargument -> lvariable
-- On CMPGE reduce production jargument -> lvariable
-- On CMPG reduce production jargument -> lvariable
-- On CMPEQ reduce production jargument -> lvariable
-- On CMP reduce production jargument -> lvariable
-- On AND reduce production jargument -> lvariable

State 214:
## Known stack suffix:
## lvariable DOT
## LR(1) items:
formula -> lvariable DOT . jargument MAPSTO jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 215
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 215:
## Known stack suffix:
## lvariable DOT jargument
## LR(1) items:
formula -> lvariable DOT jargument . MAPSTO jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On MAPSTO shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## lvariable DOT jargument MAPSTO
## LR(1) items:
formula -> lvariable DOT jargument MAPSTO . jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 217
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 217:
## Known stack suffix:
## lvariable DOT jargument MAPSTO jargument
## LR(1) items:
formula -> lvariable DOT jargument MAPSTO jargument . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> lvariable DOT jargument MAPSTO jargument

State 218:
## Known stack suffix:
## lvariable COLON
## LR(1) items:
formula -> lvariable COLON . identifier [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## lvariable COLON identifier
## LR(1) items:
formula -> lvariable COLON identifier . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> lvariable COLON identifier

State 220:
## Known stack suffix:
## L_PAREN jargument
## LR(1) items:
formula -> jargument . binop_cmp jargument [ R_PAREN OROR OR MULT ]
formula -> jargument . EQUALS jargument [ R_PAREN OROR OR MULT ]
jargument -> L_PAREN jargument . binop_val_no_multor jargument R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On XOR shift to state 179
-- On USHR shift to state 180
-- On SHR shift to state 181
-- On SHL shift to state 182
-- On PLUS shift to state 183
-- On MOD shift to state 184
-- On MINUS shift to state 185
-- On EQUALS shift to state 221
-- On DIV shift to state 186
-- On CMPNE shift to state 223
-- On CMPLT shift to state 224
-- On CMPLE shift to state 225
-- On CMPL shift to state 226
-- On CMPGT shift to state 227
-- On CMPGE shift to state 228
-- On CMPG shift to state 229
-- On CMPEQ shift to state 230
-- On CMP shift to state 231
-- On AND shift to state 187
-- On binop_val_no_multor shift to state 188
-- On binop_cmp shift to state 232
## Reductions:

State 221:
## Known stack suffix:
## jargument EQUALS
## LR(1) items:
formula -> jargument EQUALS . jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 222
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 222:
## Known stack suffix:
## jargument EQUALS jargument
## LR(1) items:
formula -> jargument EQUALS jargument . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> jargument EQUALS jargument

State 223:
## Known stack suffix:
## CMPNE
## LR(1) items:
binop_cmp -> CMPNE . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPNE

State 224:
## Known stack suffix:
## CMPLT
## LR(1) items:
binop_cmp -> CMPLT . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPLT

State 225:
## Known stack suffix:
## CMPLE
## LR(1) items:
binop_cmp -> CMPLE . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPLE

State 226:
## Known stack suffix:
## CMPL
## LR(1) items:
binop_cmp -> CMPL . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPL

State 227:
## Known stack suffix:
## CMPGT
## LR(1) items:
binop_cmp -> CMPGT . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPGT

State 228:
## Known stack suffix:
## CMPGE
## LR(1) items:
binop_cmp -> CMPGE . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPGE

State 229:
## Known stack suffix:
## CMPG
## LR(1) items:
binop_cmp -> CMPG . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPG

State 230:
## Known stack suffix:
## CMPEQ
## LR(1) items:
binop_cmp -> CMPEQ . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMPEQ

State 231:
## Known stack suffix:
## CMP
## LR(1) items:
binop_cmp -> CMP . [ TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_cmp -> CMP

State 232:
## Known stack suffix:
## jargument binop_cmp
## LR(1) items:
formula -> jargument binop_cmp . jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 233
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 233:
## Known stack suffix:
## jargument binop_cmp jargument
## LR(1) items:
formula -> jargument binop_cmp jargument . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> jargument binop_cmp jargument

State 234:
## Known stack suffix:
## identifier
## LR(1) items:
formula -> identifier . L_PAREN jargument_list R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
jargument -> identifier . L_PAREN jargument_list R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
lvariable -> identifier . [ XOR USHR SHR SHL PLUS NOTINCONTEXT NOTIN MOD MINUS EQUALS DOT DIV COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On L_PAREN shift to state 235
## Reductions:
-- On XOR reduce production lvariable -> identifier
-- On USHR reduce production lvariable -> identifier
-- On SHR reduce production lvariable -> identifier
-- On SHL reduce production lvariable -> identifier
-- On PLUS reduce production lvariable -> identifier
-- On NOTINCONTEXT reduce production lvariable -> identifier
-- On NOTIN reduce production lvariable -> identifier
-- On MOD reduce production lvariable -> identifier
-- On MINUS reduce production lvariable -> identifier
-- On EQUALS reduce production lvariable -> identifier
-- On DOT reduce production lvariable -> identifier
-- On DIV reduce production lvariable -> identifier
-- On COMMA reduce production lvariable -> identifier
-- On COLON reduce production lvariable -> identifier
-- On CMPNE reduce production lvariable -> identifier
-- On CMPLT reduce production lvariable -> identifier
-- On CMPLE reduce production lvariable -> identifier
-- On CMPL reduce production lvariable -> identifier
-- On CMPGT reduce production lvariable -> identifier
-- On CMPGE reduce production lvariable -> identifier
-- On CMPG reduce production lvariable -> identifier
-- On CMPEQ reduce production lvariable -> identifier
-- On CMP reduce production lvariable -> identifier
-- On AND reduce production lvariable -> identifier

State 235:
## Known stack suffix:
## identifier L_PAREN
## LR(1) items:
formula -> identifier L_PAREN . jargument_list R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
jargument -> identifier L_PAREN . jargument_list R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 236
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 236:
## Known stack suffix:
## identifier L_PAREN jargument_list
## LR(1) items:
formula -> identifier L_PAREN jargument_list . R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
jargument -> identifier L_PAREN jargument_list . R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On R_PAREN shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
formula -> identifier L_PAREN jargument_list R_PAREN . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
jargument -> identifier L_PAREN jargument_list R_PAREN . [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Reductions:
-- On XOR reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On WITHOUT reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On WHERE reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On WAND reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On VDASH reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On USHR reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On SHR reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On SHL reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On SEMICOLON reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On R_PAREN reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On R_BRACE reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On RULE reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On REWRITERULE reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On PUREGUARD reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On PLUS reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On ORTEXT reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On OROR reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On OR reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On MULT reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On MOD reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On MINUS reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On LEADSTO reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On IMPORT reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On IMP reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On IF reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On EQUIV reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On EQUALS reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On EOF reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On DIV reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On DASHV reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On CONSTRUCTOR reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On CMPNE reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMPLT reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMPLE reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMPL reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMPGT reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMPGE reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMPG reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMPEQ reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On CMP reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On BIMP reduce production formula -> identifier L_PAREN jargument_list R_PAREN
-- On AND reduce production jargument -> identifier L_PAREN jargument_list R_PAREN
-- On ABSRULE reduce production formula -> identifier L_PAREN jargument_list R_PAREN

State 238:
## Known stack suffix:
## full_identifier
## LR(1) items:
formula -> full_identifier . L_PAREN jargument_list R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On L_PAREN shift to state 239
## Reductions:

State 239:
## Known stack suffix:
## full_identifier L_PAREN
## LR(1) items:
formula -> full_identifier L_PAREN . jargument_list R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 240
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 240:
## Known stack suffix:
## full_identifier L_PAREN jargument_list
## LR(1) items:
formula -> full_identifier L_PAREN jargument_list . R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On R_PAREN shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## full_identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
formula -> full_identifier L_PAREN jargument_list R_PAREN . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> full_identifier L_PAREN jargument_list R_PAREN

State 242:
## Known stack suffix:
## L_PAREN formula
## LR(1) items:
formula -> formula . MULT formula [ R_PAREN OROR OR MULT ]
formula -> formula . OR formula [ R_PAREN OROR OR MULT ]
formula -> formula . OROR formula [ R_PAREN OROR OR MULT ]
formula -> L_PAREN formula . R_PAREN [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On R_PAREN shift to state 243
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 243:
## Known stack suffix:
## L_PAREN formula R_PAREN
## LR(1) items:
formula -> L_PAREN formula R_PAREN . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> L_PAREN formula R_PAREN

State 244:
## Known stack suffix:
## formula OROR
## LR(1) items:
formula -> formula OROR . formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 246
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On WHERE reduce production formula ->
-- On WAND reduce production formula ->
-- On VDASH reduce production formula ->
-- On SEMICOLON reduce production formula ->
-- On R_PAREN reduce production formula ->
-- On R_BRACE reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On PUREGUARD reduce production formula ->
-- On ORTEXT reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On LEADSTO reduce production formula ->
-- On IMPORT reduce production formula ->
-- On IMP reduce production formula ->
-- On IF reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On DASHV reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On BIMP reduce production formula ->
-- On ABSRULE reduce production formula ->

State 245:
## Known stack suffix:
## jargument
## LR(1) items:
formula -> jargument . binop_cmp jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> jargument . EQUALS jargument [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On EQUALS shift to state 221
-- On CMPNE shift to state 223
-- On CMPLT shift to state 224
-- On CMPLE shift to state 225
-- On CMPL shift to state 226
-- On CMPGT shift to state 227
-- On CMPGE shift to state 228
-- On CMPG shift to state 229
-- On CMPEQ shift to state 230
-- On CMP shift to state 231
-- On binop_cmp shift to state 232
## Reductions:

State 246:
## Known stack suffix:
## formula OROR formula
## LR(1) items:
formula -> formula . MULT formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OR formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OROR formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula OROR formula . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On MULT shift to state 247
## Reductions:
-- On WITHOUT reduce production formula -> formula OROR formula
-- On WHERE reduce production formula -> formula OROR formula
-- On WAND reduce production formula -> formula OROR formula
-- On VDASH reduce production formula -> formula OROR formula
-- On SEMICOLON reduce production formula -> formula OROR formula
-- On R_PAREN reduce production formula -> formula OROR formula
-- On R_BRACE reduce production formula -> formula OROR formula
-- On RULE reduce production formula -> formula OROR formula
-- On REWRITERULE reduce production formula -> formula OROR formula
-- On PUREGUARD reduce production formula -> formula OROR formula
-- On ORTEXT reduce production formula -> formula OROR formula
-- On OROR reduce production formula -> formula OROR formula
-- On OR reduce production formula -> formula OROR formula
-- On LEADSTO reduce production formula -> formula OROR formula
-- On IMPORT reduce production formula -> formula OROR formula
-- On IMP reduce production formula -> formula OROR formula
-- On IF reduce production formula -> formula OROR formula
-- On EQUIV reduce production formula -> formula OROR formula
-- On EOF reduce production formula -> formula OROR formula
-- On DASHV reduce production formula -> formula OROR formula
-- On CONSTRUCTOR reduce production formula -> formula OROR formula
-- On BIMP reduce production formula -> formula OROR formula
-- On ABSRULE reduce production formula -> formula OROR formula

State 247:
## Known stack suffix:
## formula MULT
## LR(1) items:
formula -> formula MULT . formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 248
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On WHERE reduce production formula ->
-- On WAND reduce production formula ->
-- On VDASH reduce production formula ->
-- On SEMICOLON reduce production formula ->
-- On R_PAREN reduce production formula ->
-- On R_BRACE reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On PUREGUARD reduce production formula ->
-- On ORTEXT reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On LEADSTO reduce production formula ->
-- On IMPORT reduce production formula ->
-- On IMP reduce production formula ->
-- On IF reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On DASHV reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On BIMP reduce production formula ->
-- On ABSRULE reduce production formula ->

State 248:
## Known stack suffix:
## formula MULT formula
## LR(1) items:
formula -> formula . MULT formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula MULT formula . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OR formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OROR formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula -> formula MULT formula

State 249:
## Known stack suffix:
## formula OR
## LR(1) items:
formula -> formula OR . formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 250
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On WHERE reduce production formula ->
-- On WAND reduce production formula ->
-- On VDASH reduce production formula ->
-- On SEMICOLON reduce production formula ->
-- On R_PAREN reduce production formula ->
-- On R_BRACE reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On PUREGUARD reduce production formula ->
-- On ORTEXT reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On LEADSTO reduce production formula ->
-- On IMPORT reduce production formula ->
-- On IMP reduce production formula ->
-- On IF reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On DASHV reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On BIMP reduce production formula ->
-- On ABSRULE reduce production formula ->

State 250:
## Known stack suffix:
## formula OR formula
## LR(1) items:
formula -> formula . MULT formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OR formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula OR formula . [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OROR formula [ WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On OROR shift to state 244
-- On MULT shift to state 247
## Reductions:
-- On WITHOUT reduce production formula -> formula OR formula
-- On WHERE reduce production formula -> formula OR formula
-- On WAND reduce production formula -> formula OR formula
-- On VDASH reduce production formula -> formula OR formula
-- On SEMICOLON reduce production formula -> formula OR formula
-- On R_PAREN reduce production formula -> formula OR formula
-- On R_BRACE reduce production formula -> formula OR formula
-- On RULE reduce production formula -> formula OR formula
-- On REWRITERULE reduce production formula -> formula OR formula
-- On PUREGUARD reduce production formula -> formula OR formula
-- On ORTEXT reduce production formula -> formula OR formula
-- On OR reduce production formula -> formula OR formula
-- On LEADSTO reduce production formula -> formula OR formula
-- On IMPORT reduce production formula -> formula OR formula
-- On IMP reduce production formula -> formula OR formula
-- On IF reduce production formula -> formula OR formula
-- On EQUIV reduce production formula -> formula OR formula
-- On EOF reduce production formula -> formula OR formula
-- On DASHV reduce production formula -> formula OR formula
-- On CONSTRUCTOR reduce production formula -> formula OR formula
-- On BIMP reduce production formula -> formula OR formula
-- On ABSRULE reduce production formula -> formula OR formula

State 251:
## Known stack suffix:
## L_BRACE formula
## LR(1) items:
formula -> formula . MULT formula [ R_BRACE OROR OR MULT ]
formula -> formula . OR formula [ R_BRACE OROR OR MULT ]
formula -> formula . OROR formula [ R_BRACE OROR OR MULT ]
spec -> L_BRACE formula . R_BRACE L_BRACE formula R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On R_BRACE shift to state 252
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 252:
## Known stack suffix:
## L_BRACE formula R_BRACE
## LR(1) items:
spec -> L_BRACE formula R_BRACE . L_BRACE formula R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE
## LR(1) items:
spec -> L_BRACE formula R_BRACE L_BRACE . formula R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 254
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_BRACE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 254:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE formula
## LR(1) items:
formula -> formula . MULT formula [ R_BRACE OROR OR MULT ]
formula -> formula . OR formula [ R_BRACE OROR OR MULT ]
formula -> formula . OROR formula [ R_BRACE OROR OR MULT ]
spec -> L_BRACE formula R_BRACE L_BRACE formula . R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On R_BRACE shift to state 255
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 255:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE formula R_BRACE
## LR(1) items:
spec -> L_BRACE formula R_BRACE L_BRACE formula R_BRACE . exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 256
-- On exp_posts shift to state 262
## Reductions:
-- On VOLATILE reduce production exp_posts ->
-- On VOID reduce production exp_posts ->
-- On TRUE reduce production exp_posts ->
-- On TRANSIENT reduce production exp_posts ->
-- On SYNCHRONIZED reduce production exp_posts ->
-- On STRICTFP reduce production exp_posts ->
-- On STATIC reduce production exp_posts ->
-- On SOURCE_POS_TAG reduce production exp_posts ->
-- On SHORT reduce production exp_posts ->
-- On SEMICOLON reduce production exp_posts ->
-- On R_BRACE reduce production exp_posts ->
-- On QUOTED_NAME reduce production exp_posts ->
-- On QUESTIONMARK reduce production exp_posts ->
-- On PUBLIC reduce production exp_posts ->
-- On PROTECTED reduce production exp_posts ->
-- On PRIVATE reduce production exp_posts ->
-- On NULL reduce production exp_posts ->
-- On NATIVE reduce production exp_posts ->
-- On L_PAREN reduce production exp_posts ->
-- On LONG reduce production exp_posts ->
-- On INT reduce production exp_posts ->
-- On IDENTIFIER reduce production exp_posts ->
-- On FULL_IDENTIFIER reduce production exp_posts ->
-- On FLOAT reduce production exp_posts ->
-- On FINAL reduce production exp_posts ->
-- On FALSE reduce production exp_posts ->
-- On ENUM reduce production exp_posts ->
-- On EMP reduce production exp_posts ->
-- On DOUBLE reduce production exp_posts ->
-- On CHAR reduce production exp_posts ->
-- On BYTE reduce production exp_posts ->
-- On BOOLEAN reduce production exp_posts ->
-- On AS reduce production exp_posts ->
-- On ANNOTATION reduce production exp_posts ->
-- On ANDALSO reduce production exp_posts ->
-- On ABSTRACT reduce production exp_posts ->

State 256:
## Known stack suffix:
## L_BRACE
## LR(1) items:
exp_posts -> L_BRACE . identifier COLON formula R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## L_BRACE identifier
## LR(1) items:
exp_posts -> L_BRACE identifier . COLON formula R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On COLON shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## L_BRACE identifier COLON
## LR(1) items:
exp_posts -> L_BRACE identifier COLON . formula R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 259
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_BRACE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 259:
## Known stack suffix:
## L_BRACE identifier COLON formula
## LR(1) items:
exp_posts -> L_BRACE identifier COLON formula . R_BRACE exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
formula -> formula . MULT formula [ R_BRACE OROR OR MULT ]
formula -> formula . OR formula [ R_BRACE OROR OR MULT ]
formula -> formula . OROR formula [ R_BRACE OROR OR MULT ]
## Transitions:
-- On R_BRACE shift to state 260
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 260:
## Known stack suffix:
## L_BRACE identifier COLON formula R_BRACE
## LR(1) items:
exp_posts -> L_BRACE identifier COLON formula R_BRACE . exp_posts [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 256
-- On exp_posts shift to state 261
## Reductions:
-- On VOLATILE reduce production exp_posts ->
-- On VOID reduce production exp_posts ->
-- On TRUE reduce production exp_posts ->
-- On TRANSIENT reduce production exp_posts ->
-- On SYNCHRONIZED reduce production exp_posts ->
-- On STRICTFP reduce production exp_posts ->
-- On STATIC reduce production exp_posts ->
-- On SOURCE_POS_TAG reduce production exp_posts ->
-- On SHORT reduce production exp_posts ->
-- On SEMICOLON reduce production exp_posts ->
-- On R_BRACE reduce production exp_posts ->
-- On QUOTED_NAME reduce production exp_posts ->
-- On QUESTIONMARK reduce production exp_posts ->
-- On PUBLIC reduce production exp_posts ->
-- On PROTECTED reduce production exp_posts ->
-- On PRIVATE reduce production exp_posts ->
-- On NULL reduce production exp_posts ->
-- On NATIVE reduce production exp_posts ->
-- On L_PAREN reduce production exp_posts ->
-- On LONG reduce production exp_posts ->
-- On INT reduce production exp_posts ->
-- On IDENTIFIER reduce production exp_posts ->
-- On FULL_IDENTIFIER reduce production exp_posts ->
-- On FLOAT reduce production exp_posts ->
-- On FINAL reduce production exp_posts ->
-- On FALSE reduce production exp_posts ->
-- On ENUM reduce production exp_posts ->
-- On EMP reduce production exp_posts ->
-- On DOUBLE reduce production exp_posts ->
-- On CHAR reduce production exp_posts ->
-- On BYTE reduce production exp_posts ->
-- On BOOLEAN reduce production exp_posts ->
-- On AS reduce production exp_posts ->
-- On ANNOTATION reduce production exp_posts ->
-- On ANDALSO reduce production exp_posts ->
-- On ABSTRACT reduce production exp_posts ->

State 261:
## Known stack suffix:
## L_BRACE identifier COLON formula R_BRACE exp_posts
## LR(1) items:
exp_posts -> L_BRACE identifier COLON formula R_BRACE exp_posts . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp_posts -> L_BRACE identifier COLON formula R_BRACE exp_posts

State 262:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE formula R_BRACE exp_posts
## LR(1) items:
spec -> L_BRACE formula R_BRACE L_BRACE formula R_BRACE exp_posts . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spec -> L_BRACE formula R_BRACE L_BRACE formula R_BRACE exp_posts

State 263:
## Known stack suffix:
## L_BRACE lvariable_list R_BRACE COLON spec
## LR(1) items:
statement -> L_BRACE lvariable_list R_BRACE COLON spec . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## L_BRACE lvariable_list R_BRACE COLON spec SEMICOLON
## LR(1) items:
statement -> L_BRACE lvariable_list R_BRACE COLON spec SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> L_BRACE lvariable_list R_BRACE COLON spec SEMICOLON

State 265:
## Known stack suffix:
## lvariable
## LR(1) items:
lvariable_list_ne -> lvariable . [ R_PAREN R_BRACE NOTINCONTEXT NOTIN ]
lvariable_list_ne -> lvariable . COMMA lvariable_list_ne [ R_PAREN R_BRACE NOTINCONTEXT NOTIN ]
## Transitions:
-- On COMMA shift to state 266
## Reductions:
-- On R_PAREN reduce production lvariable_list_ne -> lvariable
-- On R_BRACE reduce production lvariable_list_ne -> lvariable
-- On NOTINCONTEXT reduce production lvariable_list_ne -> lvariable
-- On NOTIN reduce production lvariable_list_ne -> lvariable

State 266:
## Known stack suffix:
## lvariable COMMA
## LR(1) items:
lvariable_list_ne -> lvariable COMMA . lvariable_list_ne [ R_PAREN R_BRACE NOTINCONTEXT NOTIN ]
## Transitions:
-- On TRUE shift to state 18
-- On QUESTIONMARK shift to state 153
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_list_ne shift to state 267
-- On lvariable shift to state 265
-- On identifier shift to state 268
-- On at_identifier shift to state 200
## Reductions:

State 267:
## Known stack suffix:
## lvariable COMMA lvariable_list_ne
## LR(1) items:
lvariable_list_ne -> lvariable COMMA lvariable_list_ne . [ R_PAREN R_BRACE NOTINCONTEXT NOTIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable_list_ne -> lvariable COMMA lvariable_list_ne

State 268:
## Known stack suffix:
## identifier
## LR(1) items:
lvariable -> identifier . [ SEMICOLON R_PAREN R_BRACE NOTINCONTEXT NOTIN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable -> identifier

State 269:
## Known stack suffix:
## LOOKUPSWITCH
## LR(1) items:
statement -> LOOKUPSWITCH . L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On L_PAREN shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## LOOKUPSWITCH L_PAREN
## LR(1) items:
statement -> LOOKUPSWITCH L_PAREN . immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 271
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 271:
## Known stack suffix:
## LOOKUPSWITCH L_PAREN immediate
## LR(1) items:
statement -> LOOKUPSWITCH L_PAREN immediate . R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On R_PAREN shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## LOOKUPSWITCH L_PAREN immediate R_PAREN
## LR(1) items:
statement -> LOOKUPSWITCH L_PAREN immediate R_PAREN . L_BRACE case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On L_BRACE shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE
## LR(1) items:
statement -> LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE . case_stmt_list_plus R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On DEFAULT shift to state 96
-- On CASE shift to state 97
-- On case_stmt_list_plus shift to state 274
-- On case_stmt shift to state 103
-- On case_label shift to state 105
## Reductions:

State 274:
## Known stack suffix:
## LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus
## LR(1) items:
statement -> LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus . R_BRACE SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On R_BRACE shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE
## LR(1) items:
statement -> LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON
## LR(1) items:
statement -> LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> LOOKUPSWITCH L_PAREN immediate R_PAREN L_BRACE case_stmt_list_plus R_BRACE SEMICOLON

State 277:
## Known stack suffix:
## INTERFACEINVOKE
## LR(1) items:
nonstatic_invoke -> INTERFACEINVOKE . [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production nonstatic_invoke -> INTERFACEINVOKE

State 278:
## Known stack suffix:
## IF
## LR(1) items:
statement -> IF . bool_expr goto_stmt [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On NEG shift to state 279
-- On MINUS shift to state 74
-- On LENGTHOF shift to state 280
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On unop_expr shift to state 281
-- On unop shift to state 282
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 284
-- On identifier shift to state 89
-- On constant shift to state 90
-- On bool_expr shift to state 308
-- On binop_expr shift to state 310
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 279:
## Known stack suffix:
## NEG
## LR(1) items:
unop -> NEG . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unop -> NEG

State 280:
## Known stack suffix:
## LENGTHOF
## LR(1) items:
unop -> LENGTHOF . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unop -> LENGTHOF

State 281:
## Known stack suffix:
## unop_expr
## LR(1) items:
bool_expr -> unop_expr . [ GOTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr -> unop_expr

State 282:
## Known stack suffix:
## unop
## LR(1) items:
unop_expr -> unop . immediate [ SEMICOLON GOTO ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 283
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 283:
## Known stack suffix:
## unop immediate
## LR(1) items:
unop_expr -> unop immediate . [ SEMICOLON GOTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unop_expr -> unop immediate

State 284:
## Known stack suffix:
## immediate
## LR(1) items:
binop_expr -> immediate . binop immediate [ GOTO ]
## Transitions:
-- On XOR shift to state 285
-- On USHR shift to state 286
-- On SHR shift to state 287
-- On SHL shift to state 288
-- On PLUS shift to state 289
-- On OR shift to state 290
-- On MULT shift to state 291
-- On MOD shift to state 292
-- On MINUS shift to state 293
-- On DIV shift to state 294
-- On CMPNE shift to state 295
-- On CMPLT shift to state 296
-- On CMPLE shift to state 297
-- On CMPL shift to state 298
-- On CMPGT shift to state 299
-- On CMPGE shift to state 300
-- On CMPG shift to state 301
-- On CMPEQ shift to state 302
-- On CMP shift to state 303
-- On AND shift to state 304
-- On binop_no_mult shift to state 305
-- On binop shift to state 306
## Reductions:

State 285:
## Known stack suffix:
## XOR
## LR(1) items:
binop_no_mult -> XOR . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> XOR

State 286:
## Known stack suffix:
## USHR
## LR(1) items:
binop_no_mult -> USHR . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> USHR

State 287:
## Known stack suffix:
## SHR
## LR(1) items:
binop_no_mult -> SHR . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> SHR

State 288:
## Known stack suffix:
## SHL
## LR(1) items:
binop_no_mult -> SHL . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> SHL

State 289:
## Known stack suffix:
## PLUS
## LR(1) items:
binop_no_mult -> PLUS . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> PLUS

State 290:
## Known stack suffix:
## OR
## LR(1) items:
binop_no_mult -> OR . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> OR

State 291:
## Known stack suffix:
## MULT
## LR(1) items:
binop -> MULT . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> MULT

State 292:
## Known stack suffix:
## MOD
## LR(1) items:
binop_no_mult -> MOD . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> MOD

State 293:
## Known stack suffix:
## MINUS
## LR(1) items:
binop_no_mult -> MINUS . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> MINUS

State 294:
## Known stack suffix:
## DIV
## LR(1) items:
binop_no_mult -> DIV . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> DIV

State 295:
## Known stack suffix:
## CMPNE
## LR(1) items:
binop_no_mult -> CMPNE . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPNE

State 296:
## Known stack suffix:
## CMPLT
## LR(1) items:
binop_no_mult -> CMPLT . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPLT

State 297:
## Known stack suffix:
## CMPLE
## LR(1) items:
binop_no_mult -> CMPLE . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPLE

State 298:
## Known stack suffix:
## CMPL
## LR(1) items:
binop_no_mult -> CMPL . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPL

State 299:
## Known stack suffix:
## CMPGT
## LR(1) items:
binop_no_mult -> CMPGT . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPGT

State 300:
## Known stack suffix:
## CMPGE
## LR(1) items:
binop_no_mult -> CMPGE . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPGE

State 301:
## Known stack suffix:
## CMPG
## LR(1) items:
binop_no_mult -> CMPG . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPG

State 302:
## Known stack suffix:
## CMPEQ
## LR(1) items:
binop_no_mult -> CMPEQ . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMPEQ

State 303:
## Known stack suffix:
## CMP
## LR(1) items:
binop_no_mult -> CMP . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> CMP

State 304:
## Known stack suffix:
## AND
## LR(1) items:
binop_no_mult -> AND . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_no_mult -> AND

State 305:
## Known stack suffix:
## binop_no_mult
## LR(1) items:
binop -> binop_no_mult . [ TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop -> binop_no_mult

State 306:
## Known stack suffix:
## immediate binop
## LR(1) items:
binop_expr -> immediate binop . immediate [ SEMICOLON GOTO ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 307
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 307:
## Known stack suffix:
## immediate binop immediate
## LR(1) items:
binop_expr -> immediate binop immediate . [ SEMICOLON GOTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production binop_expr -> immediate binop immediate

State 308:
## Known stack suffix:
## IF bool_expr
## LR(1) items:
statement -> IF bool_expr . goto_stmt [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On GOTO shift to state 107
-- On goto_stmt shift to state 309
## Reductions:

State 309:
## Known stack suffix:
## IF bool_expr goto_stmt
## LR(1) items:
statement -> IF bool_expr goto_stmt . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> IF bool_expr goto_stmt

State 310:
## Known stack suffix:
## binop_expr
## LR(1) items:
bool_expr -> binop_expr . [ GOTO ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bool_expr -> binop_expr

State 311:
## Known stack suffix:
## EXITMONITOR
## LR(1) items:
statement -> EXITMONITOR . immediate SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 312
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 312:
## Known stack suffix:
## EXITMONITOR immediate
## LR(1) items:
statement -> EXITMONITOR immediate . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## EXITMONITOR immediate SEMICOLON
## LR(1) items:
statement -> EXITMONITOR immediate SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> EXITMONITOR immediate SEMICOLON

State 314:
## Known stack suffix:
## ENTERMONITOR
## LR(1) items:
statement -> ENTERMONITOR . immediate SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 315
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 315:
## Known stack suffix:
## ENTERMONITOR immediate
## LR(1) items:
statement -> ENTERMONITOR immediate . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 316
## Reductions:

State 316:
## Known stack suffix:
## ENTERMONITOR immediate SEMICOLON
## LR(1) items:
statement -> ENTERMONITOR immediate SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> ENTERMONITOR immediate SEMICOLON

State 317:
## Known stack suffix:
## BREAKPOINT
## LR(1) items:
statement -> BREAKPOINT . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## BREAKPOINT SEMICOLON
## LR(1) items:
statement -> BREAKPOINT SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> BREAKPOINT SEMICOLON

State 319:
## Known stack suffix:
## variable
## LR(1) items:
statement -> variable . EQUALS expression SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On EQUALS shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## variable EQUALS
## LR(1) items:
statement -> variable EQUALS . expression SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On VIRTUALINVOKE shift to state 69
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On STATICINVOKE shift to state 112
-- On SPECIALINVOKE shift to state 141
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On NEWMULTIARRAY shift to state 321
-- On NEWARRAY shift to state 333
-- On NEW shift to state 341
-- On NEG shift to state 279
-- On MINUS shift to state 74
-- On L_PAREN shift to state 343
-- On LENGTHOF shift to state 280
-- On INTERFACEINVOKE shift to state 277
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On unop_expr shift to state 347
-- On unop shift to state 282
-- On string_constant shift to state 77
-- On reference shift to state 348
-- On quoted_name shift to state 57
-- On nonstatic_invoke shift to state 349
-- On new_expr shift to state 356
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 357
-- On invoke_expr shift to state 360
-- On immediate shift to state 361
-- On identifier shift to state 364
-- On field_signature shift to state 366
-- On field_ref shift to state 367
-- On expression shift to state 368
-- On constant shift to state 90
-- On binop_expr shift to state 370
-- On array_ref shift to state 371
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 321:
## Known stack suffix:
## NEWMULTIARRAY
## LR(1) items:
new_expr -> NEWMULTIARRAY . L_PAREN base_type R_PAREN array_descriptor_list_plus [ SEMICOLON ]
## Transitions:
-- On L_PAREN shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## NEWMULTIARRAY L_PAREN
## LR(1) items:
new_expr -> NEWMULTIARRAY L_PAREN . base_type R_PAREN array_descriptor_list_plus [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name shift to state 323
-- On base_type_no_name shift to state 324
-- On base_type shift to state 325
## Reductions:

State 323:
## Known stack suffix:
## class_name
## LR(1) items:
base_type -> class_name . [ SEMICOLON R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> class_name

State 324:
## Known stack suffix:
## base_type_no_name
## LR(1) items:
base_type -> base_type_no_name . [ SEMICOLON R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production base_type -> base_type_no_name

State 325:
## Known stack suffix:
## NEWMULTIARRAY L_PAREN base_type
## LR(1) items:
new_expr -> NEWMULTIARRAY L_PAREN base_type . R_PAREN array_descriptor_list_plus [ SEMICOLON ]
## Transitions:
-- On R_PAREN shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## NEWMULTIARRAY L_PAREN base_type R_PAREN
## LR(1) items:
new_expr -> NEWMULTIARRAY L_PAREN base_type R_PAREN . array_descriptor_list_plus [ SEMICOLON ]
## Transitions:
-- On L_BRACKET shift to state 327
-- On array_descriptor_list_plus shift to state 330
-- On array_descriptor shift to state 331
## Reductions:

State 327:
## Known stack suffix:
## L_BRACKET
## LR(1) items:
array_descriptor -> L_BRACKET . immediate_question_mark R_BRACKET [ SEMICOLON L_BRACKET ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate_question_mark shift to state 328
-- On immediate shift to state 145
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On R_BRACKET reduce production immediate_question_mark ->
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 328:
## Known stack suffix:
## L_BRACKET immediate_question_mark
## LR(1) items:
array_descriptor -> L_BRACKET immediate_question_mark . R_BRACKET [ SEMICOLON L_BRACKET ]
## Transitions:
-- On R_BRACKET shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## L_BRACKET immediate_question_mark R_BRACKET
## LR(1) items:
array_descriptor -> L_BRACKET immediate_question_mark R_BRACKET . [ SEMICOLON L_BRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_descriptor -> L_BRACKET immediate_question_mark R_BRACKET

State 330:
## Known stack suffix:
## NEWMULTIARRAY L_PAREN base_type R_PAREN array_descriptor_list_plus
## LR(1) items:
new_expr -> NEWMULTIARRAY L_PAREN base_type R_PAREN array_descriptor_list_plus . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expr -> NEWMULTIARRAY L_PAREN base_type R_PAREN array_descriptor_list_plus

State 331:
## Known stack suffix:
## array_descriptor
## LR(1) items:
array_descriptor_list_plus -> array_descriptor . [ SEMICOLON ]
array_descriptor_list_plus -> array_descriptor . array_descriptor_list_plus [ SEMICOLON ]
## Transitions:
-- On L_BRACKET shift to state 327
-- On array_descriptor_list_plus shift to state 332
-- On array_descriptor shift to state 331
## Reductions:
-- On SEMICOLON reduce production array_descriptor_list_plus -> array_descriptor

State 332:
## Known stack suffix:
## array_descriptor array_descriptor_list_plus
## LR(1) items:
array_descriptor_list_plus -> array_descriptor array_descriptor_list_plus . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_descriptor_list_plus -> array_descriptor array_descriptor_list_plus

State 333:
## Known stack suffix:
## NEWARRAY
## LR(1) items:
new_expr -> NEWARRAY . L_PAREN nonvoid_type R_PAREN fixed_array_descriptor [ SEMICOLON ]
## Transitions:
-- On L_PAREN shift to state 334
## Reductions:

State 334:
## Known stack suffix:
## NEWARRAY L_PAREN
## LR(1) items:
new_expr -> NEWARRAY L_PAREN . nonvoid_type R_PAREN fixed_array_descriptor [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 335
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 335:
## Known stack suffix:
## NEWARRAY L_PAREN nonvoid_type
## LR(1) items:
new_expr -> NEWARRAY L_PAREN nonvoid_type . R_PAREN fixed_array_descriptor [ SEMICOLON ]
## Transitions:
-- On R_PAREN shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## NEWARRAY L_PAREN nonvoid_type R_PAREN
## LR(1) items:
new_expr -> NEWARRAY L_PAREN nonvoid_type R_PAREN . fixed_array_descriptor [ SEMICOLON ]
## Transitions:
-- On L_BRACKET shift to state 337
-- On fixed_array_descriptor shift to state 340
## Reductions:

State 337:
## Known stack suffix:
## L_BRACKET
## LR(1) items:
fixed_array_descriptor -> L_BRACKET . immediate R_BRACKET [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 338
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 338:
## Known stack suffix:
## L_BRACKET immediate
## LR(1) items:
fixed_array_descriptor -> L_BRACKET immediate . R_BRACKET [ SEMICOLON EQUALS ]
## Transitions:
-- On R_BRACKET shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## L_BRACKET immediate R_BRACKET
## LR(1) items:
fixed_array_descriptor -> L_BRACKET immediate R_BRACKET . [ SEMICOLON EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fixed_array_descriptor -> L_BRACKET immediate R_BRACKET

State 340:
## Known stack suffix:
## NEWARRAY L_PAREN nonvoid_type R_PAREN fixed_array_descriptor
## LR(1) items:
new_expr -> NEWARRAY L_PAREN nonvoid_type R_PAREN fixed_array_descriptor . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expr -> NEWARRAY L_PAREN nonvoid_type R_PAREN fixed_array_descriptor

State 341:
## Known stack suffix:
## NEW
## LR(1) items:
new_expr -> NEW . base_type [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name shift to state 323
-- On base_type_no_name shift to state 324
-- On base_type shift to state 342
## Reductions:

State 342:
## Known stack suffix:
## NEW base_type
## LR(1) items:
new_expr -> NEW base_type . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production new_expr -> NEW base_type

State 343:
## Known stack suffix:
## L_PAREN
## LR(1) items:
expression -> L_PAREN . nonvoid_type R_PAREN immediate [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 344
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 344:
## Known stack suffix:
## L_PAREN nonvoid_type
## LR(1) items:
expression -> L_PAREN nonvoid_type . R_PAREN immediate [ SEMICOLON ]
## Transitions:
-- On R_PAREN shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## L_PAREN nonvoid_type R_PAREN
## LR(1) items:
expression -> L_PAREN nonvoid_type R_PAREN . immediate [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 346
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 346:
## Known stack suffix:
## L_PAREN nonvoid_type R_PAREN immediate
## LR(1) items:
expression -> L_PAREN nonvoid_type R_PAREN immediate . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> L_PAREN nonvoid_type R_PAREN immediate

State 347:
## Known stack suffix:
## unop_expr
## LR(1) items:
expression -> unop_expr . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> unop_expr

State 348:
## Known stack suffix:
## reference
## LR(1) items:
expression -> reference . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> reference

State 349:
## Known stack suffix:
## nonstatic_invoke
## LR(1) items:
invoke_expr -> nonstatic_invoke . local_name DOT method_signature L_PAREN arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On local_name shift to state 350
-- On identifier shift to state 89
## Reductions:

State 350:
## Known stack suffix:
## nonstatic_invoke local_name
## LR(1) items:
invoke_expr -> nonstatic_invoke local_name . DOT method_signature L_PAREN arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On DOT shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## nonstatic_invoke local_name DOT
## LR(1) items:
invoke_expr -> nonstatic_invoke local_name DOT . method_signature L_PAREN arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On CMPLT shift to state 113
-- On method_signature shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## nonstatic_invoke local_name DOT method_signature
## LR(1) items:
invoke_expr -> nonstatic_invoke local_name DOT method_signature . L_PAREN arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On L_PAREN shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## nonstatic_invoke local_name DOT method_signature L_PAREN
## LR(1) items:
invoke_expr -> nonstatic_invoke local_name DOT method_signature L_PAREN . arg_list_question_mark R_PAREN [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 135
-- On identifier shift to state 89
-- On constant shift to state 90
-- On arg_list_question_mark shift to state 354
-- On arg_list shift to state 140
## Reductions:
-- On R_PAREN reduce production arg_list_question_mark ->
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 354:
## Known stack suffix:
## nonstatic_invoke local_name DOT method_signature L_PAREN arg_list_question_mark
## LR(1) items:
invoke_expr -> nonstatic_invoke local_name DOT method_signature L_PAREN arg_list_question_mark . R_PAREN [ SEMICOLON ]
## Transitions:
-- On R_PAREN shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## nonstatic_invoke local_name DOT method_signature L_PAREN arg_list_question_mark R_PAREN
## LR(1) items:
invoke_expr -> nonstatic_invoke local_name DOT method_signature L_PAREN arg_list_question_mark R_PAREN . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production invoke_expr -> nonstatic_invoke local_name DOT method_signature L_PAREN arg_list_question_mark R_PAREN

State 356:
## Known stack suffix:
## new_expr
## LR(1) items:
expression -> new_expr . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> new_expr

State 357:
## Known stack suffix:
## local_name
## LR(1) items:
field_ref -> local_name . DOT field_signature [ SEMICOLON ]
immediate -> local_name . [ XOR USHR SHR SHL SEMICOLON PLUS OR MULT MOD MINUS INSTANCEOF DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On DOT shift to state 358
## Reductions:
-- On XOR reduce production immediate -> local_name
-- On USHR reduce production immediate -> local_name
-- On SHR reduce production immediate -> local_name
-- On SHL reduce production immediate -> local_name
-- On SEMICOLON reduce production immediate -> local_name
-- On PLUS reduce production immediate -> local_name
-- On OR reduce production immediate -> local_name
-- On MULT reduce production immediate -> local_name
-- On MOD reduce production immediate -> local_name
-- On MINUS reduce production immediate -> local_name
-- On INSTANCEOF reduce production immediate -> local_name
-- On DIV reduce production immediate -> local_name
-- On CMPNE reduce production immediate -> local_name
-- On CMPLT reduce production immediate -> local_name
-- On CMPLE reduce production immediate -> local_name
-- On CMPL reduce production immediate -> local_name
-- On CMPGT reduce production immediate -> local_name
-- On CMPGE reduce production immediate -> local_name
-- On CMPG reduce production immediate -> local_name
-- On CMPEQ reduce production immediate -> local_name
-- On CMP reduce production immediate -> local_name
-- On AND reduce production immediate -> local_name

State 358:
## Known stack suffix:
## local_name DOT
## LR(1) items:
field_ref -> local_name DOT . field_signature [ SEMICOLON EQUALS ]
## Transitions:
-- On CMPLT shift to state 171
-- On field_signature shift to state 359
## Reductions:

State 359:
## Known stack suffix:
## local_name DOT field_signature
## LR(1) items:
field_ref -> local_name DOT field_signature . [ SEMICOLON EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_ref -> local_name DOT field_signature

State 360:
## Known stack suffix:
## invoke_expr
## LR(1) items:
expression -> invoke_expr . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> invoke_expr

State 361:
## Known stack suffix:
## immediate
## LR(1) items:
binop_expr -> immediate . binop immediate [ SEMICOLON ]
expression -> immediate . INSTANCEOF nonvoid_type [ SEMICOLON ]
expression -> immediate . [ SEMICOLON ]
## Transitions:
-- On XOR shift to state 285
-- On USHR shift to state 286
-- On SHR shift to state 287
-- On SHL shift to state 288
-- On PLUS shift to state 289
-- On OR shift to state 290
-- On MULT shift to state 291
-- On MOD shift to state 292
-- On MINUS shift to state 293
-- On INSTANCEOF shift to state 362
-- On DIV shift to state 294
-- On CMPNE shift to state 295
-- On CMPLT shift to state 296
-- On CMPLE shift to state 297
-- On CMPL shift to state 298
-- On CMPGT shift to state 299
-- On CMPGE shift to state 300
-- On CMPG shift to state 301
-- On CMPEQ shift to state 302
-- On CMP shift to state 303
-- On AND shift to state 304
-- On binop_no_mult shift to state 305
-- On binop shift to state 306
## Reductions:
-- On SEMICOLON reduce production expression -> immediate

State 362:
## Known stack suffix:
## immediate INSTANCEOF
## LR(1) items:
expression -> immediate INSTANCEOF . nonvoid_type [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 363
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 363:
## Known stack suffix:
## immediate INSTANCEOF nonvoid_type
## LR(1) items:
expression -> immediate INSTANCEOF nonvoid_type . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> immediate INSTANCEOF nonvoid_type

State 364:
## Known stack suffix:
## identifier
## LR(1) items:
array_ref -> identifier . fixed_array_descriptor [ SEMICOLON ]
name -> identifier . [ XOR USHR SHR SHL SEMICOLON PLUS OR MULT MOD MINUS INSTANCEOF DOT DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On L_BRACKET shift to state 337
-- On fixed_array_descriptor shift to state 365
## Reductions:
-- On XOR reduce production name -> identifier
-- On USHR reduce production name -> identifier
-- On SHR reduce production name -> identifier
-- On SHL reduce production name -> identifier
-- On SEMICOLON reduce production name -> identifier
-- On PLUS reduce production name -> identifier
-- On OR reduce production name -> identifier
-- On MULT reduce production name -> identifier
-- On MOD reduce production name -> identifier
-- On MINUS reduce production name -> identifier
-- On INSTANCEOF reduce production name -> identifier
-- On DOT reduce production name -> identifier
-- On DIV reduce production name -> identifier
-- On CMPNE reduce production name -> identifier
-- On CMPLT reduce production name -> identifier
-- On CMPLE reduce production name -> identifier
-- On CMPL reduce production name -> identifier
-- On CMPGT reduce production name -> identifier
-- On CMPGE reduce production name -> identifier
-- On CMPG reduce production name -> identifier
-- On CMPEQ reduce production name -> identifier
-- On CMP reduce production name -> identifier
-- On AND reduce production name -> identifier

State 365:
## Known stack suffix:
## identifier fixed_array_descriptor
## LR(1) items:
array_ref -> identifier fixed_array_descriptor . [ SEMICOLON EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production array_ref -> identifier fixed_array_descriptor

State 366:
## Known stack suffix:
## field_signature
## LR(1) items:
field_ref -> field_signature . [ SEMICOLON EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production field_ref -> field_signature

State 367:
## Known stack suffix:
## field_ref
## LR(1) items:
reference -> field_ref . [ SEMICOLON EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reference -> field_ref

State 368:
## Known stack suffix:
## variable EQUALS expression
## LR(1) items:
statement -> variable EQUALS expression . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## variable EQUALS expression SEMICOLON
## LR(1) items:
statement -> variable EQUALS expression SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> variable EQUALS expression SEMICOLON

State 370:
## Known stack suffix:
## binop_expr
## LR(1) items:
expression -> binop_expr . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> binop_expr

State 371:
## Known stack suffix:
## array_ref
## LR(1) items:
reference -> array_ref . [ SEMICOLON EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production reference -> array_ref

State 372:
## Known stack suffix:
## statement
## LR(1) items:
declaration_or_statement -> statement . source_pos_tag_option [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SOURCE_POS_TAG shift to state 373
-- On source_pos_tag_option shift to state 391
-- On source_pos_tag shift to state 392
## Reductions:
-- On VIRTUALINVOKE reduce production source_pos_tag_option ->
-- On UNKNOWN reduce production source_pos_tag_option ->
-- On TRUE reduce production source_pos_tag_option ->
-- On THROW reduce production source_pos_tag_option ->
-- On TABLESWITCH reduce production source_pos_tag_option ->
-- On STATICINVOKE reduce production source_pos_tag_option ->
-- On SPECIALINVOKE reduce production source_pos_tag_option ->
-- On SHORT reduce production source_pos_tag_option ->
-- On R_BRACE reduce production source_pos_tag_option ->
-- On RETURN reduce production source_pos_tag_option ->
-- On RET reduce production source_pos_tag_option ->
-- On QUOTED_NAME reduce production source_pos_tag_option ->
-- On NULL_TYPE reduce production source_pos_tag_option ->
-- On NULL reduce production source_pos_tag_option ->
-- On NOP reduce production source_pos_tag_option ->
-- On L_BRACE reduce production source_pos_tag_option ->
-- On LOOKUPSWITCH reduce production source_pos_tag_option ->
-- On LONG reduce production source_pos_tag_option ->
-- On INTERFACEINVOKE reduce production source_pos_tag_option ->
-- On INT reduce production source_pos_tag_option ->
-- On IF reduce production source_pos_tag_option ->
-- On IDENTIFIER reduce production source_pos_tag_option ->
-- On GOTO reduce production source_pos_tag_option ->
-- On FULL_IDENTIFIER reduce production source_pos_tag_option ->
-- On FLOAT reduce production source_pos_tag_option ->
-- On FALSE reduce production source_pos_tag_option ->
-- On EXITMONITOR reduce production source_pos_tag_option ->
-- On ENTERMONITOR reduce production source_pos_tag_option ->
-- On EMP reduce production source_pos_tag_option ->
-- On DOUBLE reduce production source_pos_tag_option ->
-- On CMPLT reduce production source_pos_tag_option ->
-- On CHAR reduce production source_pos_tag_option ->
-- On CATCH reduce production source_pos_tag_option ->
-- On BYTE reduce production source_pos_tag_option ->
-- On BREAKPOINT reduce production source_pos_tag_option ->
-- On BOOLEAN reduce production source_pos_tag_option ->
-- On AS reduce production source_pos_tag_option ->

State 373:
## Known stack suffix:
## SOURCE_POS_TAG
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG . COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COLON shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## SOURCE_POS_TAG COLON
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON . identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier . COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COLON shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON . integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On INTEGER_CONSTANT shift to state 81
-- On integer_constant shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant . identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 378
## Reductions:

State 378:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier . COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COLON shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON . integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On INTEGER_CONSTANT shift to state 81
-- On integer_constant shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant . identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier . COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COLON shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON . integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On INTEGER_CONSTANT shift to state 81
-- On integer_constant shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant . identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 384
## Reductions:

State 384:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier . COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COLON shift to state 385
## Reductions:

State 385:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON . integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On INTEGER_CONSTANT shift to state 81
-- On integer_constant shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant . identifier COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier . COLON full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COLON shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON . full_identifier SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On FULL_IDENTIFIER shift to state 21
-- On full_identifier shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier . SOURCE_POS_TAG_CLOSE [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On SOURCE_POS_TAG_CLOSE shift to state 390
## Reductions:

State 390:
## Known stack suffix:
## SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE
## LR(1) items:
source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE . [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_pos_tag -> SOURCE_POS_TAG COLON identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON integer_constant identifier COLON full_identifier SOURCE_POS_TAG_CLOSE

State 391:
## Known stack suffix:
## statement source_pos_tag_option
## LR(1) items:
declaration_or_statement -> statement source_pos_tag_option . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_or_statement -> statement source_pos_tag_option

State 392:
## Known stack suffix:
## source_pos_tag
## LR(1) items:
source_pos_tag_option -> source_pos_tag . [ VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production source_pos_tag_option -> source_pos_tag

State 393:
## Known stack suffix:
## reference
## LR(1) items:
variable -> reference . [ EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production variable -> reference

State 394:
## Known stack suffix:
## quoted_name
## LR(1) items:
name -> quoted_name . [ EQUALS DOT COLON_EQUALS ]
nonvoid_type -> quoted_name . array_brackets_list_star [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On L_BRACKET shift to state 51
-- On array_brackets_list_star shift to state 54
## Reductions:
-- On TRUE reduce production array_brackets_list_star ->
-- On QUOTED_NAME reduce production array_brackets_list_star ->
-- On IDENTIFIER reduce production array_brackets_list_star ->
-- On FALSE reduce production array_brackets_list_star ->
-- On EQUALS reduce production name -> quoted_name
-- On EMP reduce production array_brackets_list_star ->
-- On DOT reduce production name -> quoted_name
-- On COLON_EQUALS reduce production name -> quoted_name
-- On AS reduce production array_brackets_list_star ->

State 395:
## Known stack suffix:
## nonvoid_type
## LR(1) items:
jimple_type -> nonvoid_type . [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jimple_type -> nonvoid_type

State 396:
## Known stack suffix:
## local_name
## LR(1) items:
field_ref -> local_name . DOT field_signature [ EQUALS ]
statement -> local_name . COLON_EQUALS at_identifier SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
statement -> local_name . COLON_EQUALS at_identifier jtype SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
variable -> local_name . [ EQUALS ]
## Transitions:
-- On DOT shift to state 358
-- On COLON_EQUALS shift to state 397
## Reductions:
-- On EQUALS reduce production variable -> local_name

State 397:
## Known stack suffix:
## local_name COLON_EQUALS
## LR(1) items:
statement -> local_name COLON_EQUALS . at_identifier SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
statement -> local_name COLON_EQUALS . at_identifier jtype SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On AT_IDENTIFIER shift to state 155
-- On at_identifier shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## local_name COLON_EQUALS at_identifier
## LR(1) items:
statement -> local_name COLON_EQUALS at_identifier . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
statement -> local_name COLON_EQUALS at_identifier . jtype SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On VOID shift to state 40
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On SEMICOLON shift to state 399
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 55
-- On jtype shift to state 400
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 399:
## Known stack suffix:
## local_name COLON_EQUALS at_identifier SEMICOLON
## LR(1) items:
statement -> local_name COLON_EQUALS at_identifier SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> local_name COLON_EQUALS at_identifier SEMICOLON

State 400:
## Known stack suffix:
## local_name COLON_EQUALS at_identifier jtype
## LR(1) items:
statement -> local_name COLON_EQUALS at_identifier jtype . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 401
## Reductions:

State 401:
## Known stack suffix:
## local_name COLON_EQUALS at_identifier jtype SEMICOLON
## LR(1) items:
statement -> local_name COLON_EQUALS at_identifier jtype SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> local_name COLON_EQUALS at_identifier jtype SEMICOLON

State 402:
## Known stack suffix:
## label_name
## LR(1) items:
statement -> label_name . COLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On COLON shift to state 403
## Reductions:

State 403:
## Known stack suffix:
## label_name COLON
## LR(1) items:
statement -> label_name COLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> label_name COLON

State 404:
## Known stack suffix:
## jimple_type
## LR(1) items:
declaration -> jimple_type . local_name_list SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On local_name_list shift to state 405
-- On local_name shift to state 407
-- On identifier shift to state 89
## Reductions:

State 405:
## Known stack suffix:
## jimple_type local_name_list
## LR(1) items:
declaration -> jimple_type local_name_list . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 406
## Reductions:

State 406:
## Known stack suffix:
## jimple_type local_name_list SEMICOLON
## LR(1) items:
declaration -> jimple_type local_name_list SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration -> jimple_type local_name_list SEMICOLON

State 407:
## Known stack suffix:
## local_name
## LR(1) items:
local_name_list -> local_name . [ SEMICOLON ]
local_name_list -> local_name . COMMA local_name_list [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 408
## Reductions:
-- On SEMICOLON reduce production local_name_list -> local_name

State 408:
## Known stack suffix:
## local_name COMMA
## LR(1) items:
local_name_list -> local_name COMMA . local_name_list [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On local_name_list shift to state 409
-- On local_name shift to state 407
-- On identifier shift to state 89
## Reductions:

State 409:
## Known stack suffix:
## local_name COMMA local_name_list
## LR(1) items:
local_name_list -> local_name COMMA local_name_list . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production local_name_list -> local_name COMMA local_name_list

State 410:
## Known stack suffix:
## invoke_expr
## LR(1) items:
statement -> invoke_expr . SEMICOLON [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
-- On SEMICOLON shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## invoke_expr SEMICOLON
## LR(1) items:
statement -> invoke_expr SEMICOLON . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> invoke_expr SEMICOLON

State 412:
## Known stack suffix:
## identifier
## LR(1) items:
array_ref -> identifier . fixed_array_descriptor [ EQUALS ]
label_name -> identifier . [ COLON ]
name -> identifier . [ EQUALS DOT COLON_EQUALS ]
nonvoid_type -> identifier . array_brackets_list_star [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On L_BRACKET shift to state 413
-- On fixed_array_descriptor shift to state 365
-- On array_brackets_list_star shift to state 128
## Reductions:
-- On TRUE reduce production array_brackets_list_star ->
-- On QUOTED_NAME reduce production array_brackets_list_star ->
-- On IDENTIFIER reduce production array_brackets_list_star ->
-- On FALSE reduce production array_brackets_list_star ->
-- On EQUALS reduce production name -> identifier
-- On EMP reduce production array_brackets_list_star ->
-- On DOT reduce production name -> identifier
-- On COLON_EQUALS reduce production name -> identifier
-- On COLON reduce production label_name -> identifier
-- On AS reduce production array_brackets_list_star ->

State 413:
## Known stack suffix:
## L_BRACKET
## LR(1) items:
array_brackets_list_star -> L_BRACKET . R_BRACKET array_brackets_list_star [ TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS ]
fixed_array_descriptor -> L_BRACKET . immediate R_BRACKET [ EQUALS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 72
-- On R_BRACKET shift to state 52
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 73
-- On MINUS shift to state 74
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CLASS shift to state 75
-- On AS shift to state 24
-- On string_constant shift to state 77
-- On quoted_name shift to state 57
-- On name shift to state 78
-- On minus_question_mark shift to state 79
-- On local_name shift to state 86
-- On immediate shift to state 338
-- On identifier shift to state 89
-- On constant shift to state 90
## Reductions:
-- On INTEGER_CONSTANT_LONG reduce production minus_question_mark ->
-- On INTEGER_CONSTANT reduce production minus_question_mark ->
-- On FLOAT_CONSTANT reduce production minus_question_mark ->

State 414:
## Known stack suffix:
## goto_stmt
## LR(1) items:
statement -> goto_stmt . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> goto_stmt

State 415:
## Known stack suffix:
## L_BRACE declaration_or_statement_list_star
## LR(1) items:
method_body -> L_BRACE declaration_or_statement_list_star . catch_clause_list_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE OLD NULL NATIVE L_BRACE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM ENSURES EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On CATCH shift to state 416
-- On catch_clause_list_star shift to state 425
-- On catch_clause shift to state 427
## Reductions:
-- On R_BRACE reduce production catch_clause_list_star ->

State 416:
## Known stack suffix:
## CATCH
## LR(1) items:
catch_clause -> CATCH . class_name FROM label_name TO label_name WITH label_name SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## CATCH class_name
## LR(1) items:
catch_clause -> CATCH class_name . FROM label_name TO label_name WITH label_name SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On FROM shift to state 418
## Reductions:

State 418:
## Known stack suffix:
## CATCH class_name FROM
## LR(1) items:
catch_clause -> CATCH class_name FROM . label_name TO label_name WITH label_name SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On label_name shift to state 419
-- On identifier shift to state 110
## Reductions:

State 419:
## Known stack suffix:
## CATCH class_name FROM label_name
## LR(1) items:
catch_clause -> CATCH class_name FROM label_name . TO label_name WITH label_name SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On TO shift to state 420
## Reductions:

State 420:
## Known stack suffix:
## CATCH class_name FROM label_name TO
## LR(1) items:
catch_clause -> CATCH class_name FROM label_name TO . label_name WITH label_name SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On label_name shift to state 421
-- On identifier shift to state 110
## Reductions:

State 421:
## Known stack suffix:
## CATCH class_name FROM label_name TO label_name
## LR(1) items:
catch_clause -> CATCH class_name FROM label_name TO label_name . WITH label_name SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On WITH shift to state 422
## Reductions:

State 422:
## Known stack suffix:
## CATCH class_name FROM label_name TO label_name WITH
## LR(1) items:
catch_clause -> CATCH class_name FROM label_name TO label_name WITH . label_name SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On label_name shift to state 423
-- On identifier shift to state 110
## Reductions:

State 423:
## Known stack suffix:
## CATCH class_name FROM label_name TO label_name WITH label_name
## LR(1) items:
catch_clause -> CATCH class_name FROM label_name TO label_name WITH label_name . SEMICOLON [ R_BRACE CATCH ]
## Transitions:
-- On SEMICOLON shift to state 424
## Reductions:

State 424:
## Known stack suffix:
## CATCH class_name FROM label_name TO label_name WITH label_name SEMICOLON
## LR(1) items:
catch_clause -> CATCH class_name FROM label_name TO label_name WITH label_name SEMICOLON . [ R_BRACE CATCH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch_clause -> CATCH class_name FROM label_name TO label_name WITH label_name SEMICOLON

State 425:
## Known stack suffix:
## L_BRACE declaration_or_statement_list_star catch_clause_list_star
## LR(1) items:
method_body -> L_BRACE declaration_or_statement_list_star catch_clause_list_star . R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE OLD NULL NATIVE L_BRACE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM ENSURES EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On R_BRACE shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## L_BRACE declaration_or_statement_list_star catch_clause_list_star R_BRACE
## LR(1) items:
method_body -> L_BRACE declaration_or_statement_list_star catch_clause_list_star R_BRACE . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE OLD NULL NATIVE L_BRACE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM ENSURES EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_body -> L_BRACE declaration_or_statement_list_star catch_clause_list_star R_BRACE

State 427:
## Known stack suffix:
## catch_clause
## LR(1) items:
catch_clause_list_star -> catch_clause . catch_clause_list_star [ R_BRACE ]
## Transitions:
-- On CATCH shift to state 416
-- On catch_clause_list_star shift to state 428
-- On catch_clause shift to state 427
## Reductions:
-- On R_BRACE reduce production catch_clause_list_star ->

State 428:
## Known stack suffix:
## catch_clause catch_clause_list_star
## LR(1) items:
catch_clause_list_star -> catch_clause catch_clause_list_star . [ R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production catch_clause_list_star -> catch_clause catch_clause_list_star

State 429:
## Known stack suffix:
## declaration_or_statement
## LR(1) items:
declaration_or_statement_list_star -> declaration_or_statement . declaration_or_statement_list_star [ R_BRACE CATCH ]
## Transitions:
-- On VIRTUALINVOKE shift to state 69
-- On UNKNOWN shift to state 70
-- On TRUE shift to state 18
-- On THROW shift to state 71
-- On TABLESWITCH shift to state 91
-- On STATICINVOKE shift to state 112
-- On SPECIALINVOKE shift to state 141
-- On SHORT shift to state 41
-- On RETURN shift to state 142
-- On RET shift to state 146
-- On QUOTED_NAME shift to state 19
-- On NULL_TYPE shift to state 149
-- On NULL shift to state 42
-- On NOP shift to state 150
-- On L_BRACE shift to state 152
-- On LOOKUPSWITCH shift to state 269
-- On LONG shift to state 43
-- On INTERFACEINVOKE shift to state 277
-- On INT shift to state 44
-- On IF shift to state 278
-- On IDENTIFIER shift to state 20
-- On GOTO shift to state 107
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EXITMONITOR shift to state 311
-- On ENTERMONITOR shift to state 314
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CMPLT shift to state 171
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BREAKPOINT shift to state 317
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On variable shift to state 319
-- On statement shift to state 372
-- On reference shift to state 393
-- On quoted_name shift to state 394
-- On nonvoid_type shift to state 395
-- On nonstatic_invoke shift to state 349
-- On name shift to state 78
-- On local_name shift to state 396
-- On label_name shift to state 402
-- On jimple_type shift to state 404
-- On invoke_expr shift to state 410
-- On identifier shift to state 412
-- On goto_stmt shift to state 414
-- On full_identifier shift to state 129
-- On field_signature shift to state 366
-- On field_ref shift to state 367
-- On declaration_or_statement_list_star shift to state 430
-- On declaration_or_statement shift to state 429
-- On declaration shift to state 431
-- On base_type_no_name shift to state 131
-- On array_ref shift to state 371
## Reductions:
-- On R_BRACE reduce production declaration_or_statement_list_star ->
-- On CATCH reduce production declaration_or_statement_list_star ->

State 430:
## Known stack suffix:
## declaration_or_statement declaration_or_statement_list_star
## LR(1) items:
declaration_or_statement_list_star -> declaration_or_statement declaration_or_statement_list_star . [ R_BRACE CATCH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_or_statement_list_star -> declaration_or_statement declaration_or_statement_list_star

State 431:
## Known stack suffix:
## declaration
## LR(1) items:
declaration_or_statement -> declaration . [ VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_or_statement -> declaration

State 432:
## Known stack suffix:
## REQUIRES method_body
## LR(1) items:
requires_clause -> REQUIRES method_body . [ SEMICOLON OLD L_BRACE ENSURES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production requires_clause -> REQUIRES method_body

State 433:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause . old_clauses ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On OLD shift to state 434
-- On old_clauses shift to state 436
-- On old_clause shift to state 441
## Reductions:
-- On SEMICOLON reduce production old_clauses ->
-- On L_BRACE reduce production old_clauses ->
-- On ENSURES reduce production old_clauses ->

State 434:
## Known stack suffix:
## OLD
## LR(1) items:
old_clause -> OLD . method_body [ SEMICOLON OLD L_BRACE ENSURES ]
## Transitions:
-- On SEMICOLON shift to state 67
-- On L_BRACE shift to state 68
-- On method_body shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## OLD method_body
## LR(1) items:
old_clause -> OLD method_body . [ SEMICOLON OLD L_BRACE ENSURES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_clause -> OLD method_body

State 436:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses . ensures_clause method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On ENSURES shift to state 437
-- On ensures_clause shift to state 439
## Reductions:
-- On SEMICOLON reduce production ensures_clause ->
-- On L_BRACE reduce production ensures_clause ->

State 437:
## Known stack suffix:
## ENSURES
## LR(1) items:
ensures_clause -> ENSURES . method_body [ SEMICOLON L_BRACE ]
## Transitions:
-- On SEMICOLON shift to state 67
-- On L_BRACE shift to state 68
-- On method_body shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## ENSURES method_body
## LR(1) items:
ensures_clause -> ENSURES method_body . [ SEMICOLON L_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ensures_clause -> ENSURES method_body

State 439:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause . method_body [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On SEMICOLON shift to state 67
-- On L_BRACE shift to state 68
-- On method_body shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body
## LR(1) items:
member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member -> modifier_list_star jtype name L_PAREN parameter_list_question_mark R_PAREN throws_clause requires_clause old_clauses ensures_clause method_body

State 441:
## Known stack suffix:
## old_clause
## LR(1) items:
old_clauses -> old_clause . old_clauses [ SEMICOLON L_BRACE ENSURES ]
## Transitions:
-- On OLD shift to state 434
-- On old_clauses shift to state 442
-- On old_clause shift to state 441
## Reductions:
-- On SEMICOLON reduce production old_clauses ->
-- On L_BRACE reduce production old_clauses ->
-- On ENSURES reduce production old_clauses ->

State 442:
## Known stack suffix:
## old_clause old_clauses
## LR(1) items:
old_clauses -> old_clause old_clauses . [ SEMICOLON L_BRACE ENSURES ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production old_clauses -> old_clause old_clauses

State 443:
## Known stack suffix:
## modifier
## LR(1) items:
modifier_list_star -> modifier . modifier_list_star [ VOID TRUE SHORT QUOTED_NAME NULL LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ]
## Transitions:
-- On VOLATILE shift to state 1
-- On TRANSIENT shift to state 2
-- On SYNCHRONIZED shift to state 3
-- On STRICTFP shift to state 4
-- On STATIC shift to state 5
-- On PUBLIC shift to state 6
-- On PROTECTED shift to state 7
-- On PRIVATE shift to state 8
-- On NATIVE shift to state 9
-- On FINAL shift to state 10
-- On ENUM shift to state 11
-- On ANNOTATION shift to state 12
-- On ABSTRACT shift to state 13
-- On modifier_list_star shift to state 444
-- On modifier shift to state 443
## Reductions:
-- On VOID reduce production modifier_list_star ->
-- On TRUE reduce production modifier_list_star ->
-- On SHORT reduce production modifier_list_star ->
-- On QUOTED_NAME reduce production modifier_list_star ->
-- On NULL reduce production modifier_list_star ->
-- On LONG reduce production modifier_list_star ->
-- On INTERFACE reduce production modifier_list_star ->
-- On INT reduce production modifier_list_star ->
-- On IDENTIFIER reduce production modifier_list_star ->
-- On FULL_IDENTIFIER reduce production modifier_list_star ->
-- On FLOAT reduce production modifier_list_star ->
-- On FALSE reduce production modifier_list_star ->
-- On EMP reduce production modifier_list_star ->
-- On DOUBLE reduce production modifier_list_star ->
-- On CLASS reduce production modifier_list_star ->
-- On CHAR reduce production modifier_list_star ->
-- On BYTE reduce production modifier_list_star ->
-- On BOOLEAN reduce production modifier_list_star ->
-- On AS reduce production modifier_list_star ->

State 444:
## Known stack suffix:
## modifier modifier_list_star
## LR(1) items:
modifier_list_star -> modifier modifier_list_star . [ VOID TRUE SHORT QUOTED_NAME NULL LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production modifier_list_star -> modifier modifier_list_star

State 445:
## Known stack suffix:
## L_BRACE member_list_star
## LR(1) items:
file_body -> L_BRACE member_list_star . R_BRACE [ # ]
## Transitions:
-- On R_BRACE shift to state 446
## Reductions:

State 446:
## Known stack suffix:
## L_BRACE member_list_star R_BRACE
## LR(1) items:
file_body -> L_BRACE member_list_star R_BRACE . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file_body -> L_BRACE member_list_star R_BRACE

State 447:
## Known stack suffix:
## member
## LR(1) items:
member_list_star -> member . member_list_star [ R_BRACE ]
## Transitions:
-- On VOLATILE shift to state 1
-- On TRANSIENT shift to state 2
-- On SYNCHRONIZED shift to state 3
-- On STRICTFP shift to state 4
-- On STATIC shift to state 5
-- On PUBLIC shift to state 6
-- On PROTECTED shift to state 7
-- On PRIVATE shift to state 8
-- On NATIVE shift to state 9
-- On FINAL shift to state 10
-- On ENUM shift to state 11
-- On ANNOTATION shift to state 12
-- On ABSTRACT shift to state 13
-- On modifier_list_star shift to state 39
-- On modifier shift to state 443
-- On member_list_star shift to state 448
-- On member shift to state 447
## Reductions:
-- On VOID reduce production modifier_list_star ->
-- On TRUE reduce production modifier_list_star ->
-- On SHORT reduce production modifier_list_star ->
-- On R_BRACE reduce production member_list_star ->
-- On QUOTED_NAME reduce production modifier_list_star ->
-- On NULL reduce production modifier_list_star ->
-- On LONG reduce production modifier_list_star ->
-- On INT reduce production modifier_list_star ->
-- On IDENTIFIER reduce production modifier_list_star ->
-- On FULL_IDENTIFIER reduce production modifier_list_star ->
-- On FLOAT reduce production modifier_list_star ->
-- On FALSE reduce production modifier_list_star ->
-- On EMP reduce production modifier_list_star ->
-- On DOUBLE reduce production modifier_list_star ->
-- On CHAR reduce production modifier_list_star ->
-- On BYTE reduce production modifier_list_star ->
-- On BOOLEAN reduce production modifier_list_star ->
-- On AS reduce production modifier_list_star ->

State 448:
## Known stack suffix:
## member member_list_star
## LR(1) items:
member_list_star -> member member_list_star . [ R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production member_list_star -> member member_list_star

State 449:
## Known stack suffix:
## modifier_list_star file_type class_name extends_clause implements_clause file_body
## LR(1) items:
file -> modifier_list_star file_type class_name extends_clause implements_clause file_body . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production file -> modifier_list_star file_type class_name extends_clause implements_clause file_body

State 450:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept file

State 451:
## Known stack suffix:
##
## LR(1) items:
question_file' -> . question_file [ # ]
## Transitions:
-- On INCONSISTENCY shift to state 452
-- On IMPLICATION shift to state 521
-- On FRAME shift to state 526
-- On EOF shift to state 531
-- On ABS shift to state 532
-- On ABDUCTION shift to state 535
-- On question_file shift to state 540
-- On question shift to state 541
## Reductions:

State 452:
## Known stack suffix:
## INCONSISTENCY
## LR(1) items:
question -> INCONSISTENCY . COLON formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On COLON shift to state 453
## Reductions:

State 453:
## Known stack suffix:
## INCONSISTENCY COLON
## LR(1) items:
question -> INCONSISTENCY COLON . formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 520
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 454:
## Known stack suffix:
## STRING_CONSTANT
## LR(1) items:
jargument_npv -> STRING_CONSTANT . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> STRING_CONSTANT

State 455:
## Known stack suffix:
## RETURN
## LR(1) items:
jargument_npv -> RETURN . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> RETURN

State 456:
## Known stack suffix:
## MINUS
## LR(1) items:
jargument_npv -> MINUS . INTEGER_CONSTANT [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
-- On INTEGER_CONSTANT shift to state 457
## Reductions:

State 457:
## Known stack suffix:
## MINUS INTEGER_CONSTANT
## LR(1) items:
jargument_npv -> MINUS INTEGER_CONSTANT . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> MINUS INTEGER_CONSTANT

State 458:
## Known stack suffix:
## L_PAREN
## LR(1) items:
formula_npv -> L_PAREN . formula_npv R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
jargument_npv -> L_PAREN . jargument_npv binop_val_no_multor jargument_npv R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 498
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 511
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On R_PAREN reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 459:
## Known stack suffix:
## L_BRACE
## LR(1) items:
jargument_npv -> L_BRACE . fldlist_npv R_BRACE [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 460
-- On fldlist_npv shift to state 482
## Reductions:
-- On R_BRACE reduce production fldlist_npv ->

State 460:
## Known stack suffix:
## identifier
## LR(1) items:
fldlist_npv -> identifier . EQUALS jargument_npv [ R_BRACE ]
fldlist_npv -> identifier . EQUALS jargument_npv SEMICOLON fldlist_npv [ R_BRACE ]
## Transitions:
-- On EQUALS shift to state 461
## Reductions:

State 461:
## Known stack suffix:
## identifier EQUALS
## LR(1) items:
fldlist_npv -> identifier EQUALS . jargument_npv [ R_BRACE ]
fldlist_npv -> identifier EQUALS . jargument_npv SEMICOLON fldlist_npv [ R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv shift to state 479
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 462:
## Known stack suffix:
## L_PAREN
## LR(1) items:
jargument_npv -> L_PAREN . jargument_npv binop_val_no_multor jargument_npv R_PAREN [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv shift to state 465
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 463:
## Known stack suffix:
## INTEGER_CONSTANT
## LR(1) items:
jargument_npv -> INTEGER_CONSTANT . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> INTEGER_CONSTANT

State 464:
## Known stack suffix:
## lvariable_npv
## LR(1) items:
jargument_npv -> lvariable_npv . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> lvariable_npv

State 465:
## Known stack suffix:
## L_PAREN jargument_npv
## LR(1) items:
jargument_npv -> L_PAREN jargument_npv . binop_val_no_multor jargument_npv R_PAREN [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
## Transitions:
-- On XOR shift to state 179
-- On USHR shift to state 180
-- On SHR shift to state 181
-- On SHL shift to state 182
-- On PLUS shift to state 183
-- On MOD shift to state 184
-- On MINUS shift to state 185
-- On DIV shift to state 186
-- On AND shift to state 187
-- On binop_val_no_multor shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## L_PAREN jargument_npv binop_val_no_multor
## LR(1) items:
jargument_npv -> L_PAREN jargument_npv binop_val_no_multor . jargument_npv R_PAREN [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv shift to state 467
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 467:
## Known stack suffix:
## L_PAREN jargument_npv binop_val_no_multor jargument_npv
## LR(1) items:
jargument_npv -> L_PAREN jargument_npv binop_val_no_multor jargument_npv . R_PAREN [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
-- On R_PAREN shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## L_PAREN jargument_npv binop_val_no_multor jargument_npv R_PAREN
## LR(1) items:
jargument_npv -> L_PAREN jargument_npv binop_val_no_multor jargument_npv R_PAREN . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> L_PAREN jargument_npv binop_val_no_multor jargument_npv R_PAREN

State 469:
## Known stack suffix:
## identifier
## LR(1) items:
jargument_npv -> identifier . L_PAREN jargument_npv_list R_PAREN [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
lvariable_npv -> identifier . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
## Transitions:
-- On L_PAREN shift to state 470
## Reductions:
-- On XOR reduce production lvariable_npv -> identifier
-- On VDASH reduce production lvariable_npv -> identifier
-- On USHR reduce production lvariable_npv -> identifier
-- On SHR reduce production lvariable_npv -> identifier
-- On SHL reduce production lvariable_npv -> identifier
-- On SEMICOLON reduce production lvariable_npv -> identifier
-- On R_PAREN reduce production lvariable_npv -> identifier
-- On R_BRACE reduce production lvariable_npv -> identifier
-- On QUESTIONMARK reduce production lvariable_npv -> identifier
-- On PLUS reduce production lvariable_npv -> identifier
-- On OROR reduce production lvariable_npv -> identifier
-- On OR reduce production lvariable_npv -> identifier
-- On MULT reduce production lvariable_npv -> identifier
-- On MOD reduce production lvariable_npv -> identifier
-- On MINUS reduce production lvariable_npv -> identifier
-- On MAPSTO reduce production lvariable_npv -> identifier
-- On INCONSISTENCY reduce production lvariable_npv -> identifier
-- On IMPLICATION reduce production lvariable_npv -> identifier
-- On FRAME reduce production lvariable_npv -> identifier
-- On EOF reduce production lvariable_npv -> identifier
-- On DIV reduce production lvariable_npv -> identifier
-- On COMMA reduce production lvariable_npv -> identifier
-- On AND reduce production lvariable_npv -> identifier
-- On ABS reduce production lvariable_npv -> identifier
-- On ABDUCTION reduce production lvariable_npv -> identifier

State 470:
## Known stack suffix:
## identifier L_PAREN
## LR(1) items:
jargument_npv -> identifier L_PAREN . jargument_npv_list R_PAREN [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv_list_ne shift to state 471
-- On jargument_npv_list shift to state 472
-- On jargument_npv shift to state 474
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On R_PAREN reduce production jargument_npv_list ->

State 471:
## Known stack suffix:
## jargument_npv_list_ne
## LR(1) items:
jargument_npv_list -> jargument_npv_list_ne . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv_list -> jargument_npv_list_ne

State 472:
## Known stack suffix:
## identifier L_PAREN jargument_npv_list
## LR(1) items:
jargument_npv -> identifier L_PAREN jargument_npv_list . R_PAREN [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
## Transitions:
-- On R_PAREN shift to state 473
## Reductions:

State 473:
## Known stack suffix:
## identifier L_PAREN jargument_npv_list R_PAREN
## LR(1) items:
jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EOF DIV COMMA AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN

State 474:
## Known stack suffix:
## jargument_npv
## LR(1) items:
jargument_npv_list_ne -> jargument_npv . [ R_PAREN ]
jargument_npv_list_ne -> jargument_npv . COMMA jargument_npv_list_ne [ R_PAREN ]
## Transitions:
-- On COMMA shift to state 475
## Reductions:
-- On R_PAREN reduce production jargument_npv_list_ne -> jargument_npv

State 475:
## Known stack suffix:
## jargument_npv COMMA
## LR(1) items:
jargument_npv_list_ne -> jargument_npv COMMA . jargument_npv_list_ne [ R_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv_list_ne shift to state 476
-- On jargument_npv shift to state 474
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 476:
## Known stack suffix:
## jargument_npv COMMA jargument_npv_list_ne
## LR(1) items:
jargument_npv_list_ne -> jargument_npv COMMA jargument_npv_list_ne . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv_list_ne -> jargument_npv COMMA jargument_npv_list_ne

State 477:
## Known stack suffix:
## field_signature
## LR(1) items:
jargument_npv -> field_signature . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> field_signature

State 478:
## Known stack suffix:
## at_identifier
## LR(1) items:
lvariable_npv -> at_identifier . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DOT DIV COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable_npv -> at_identifier

State 479:
## Known stack suffix:
## identifier EQUALS jargument_npv
## LR(1) items:
fldlist_npv -> identifier EQUALS jargument_npv . [ R_BRACE ]
fldlist_npv -> identifier EQUALS jargument_npv . SEMICOLON fldlist_npv [ R_BRACE ]
## Transitions:
-- On SEMICOLON shift to state 480
## Reductions:
-- On R_BRACE reduce production fldlist_npv -> identifier EQUALS jargument_npv

State 480:
## Known stack suffix:
## identifier EQUALS jargument_npv SEMICOLON
## LR(1) items:
fldlist_npv -> identifier EQUALS jargument_npv SEMICOLON . fldlist_npv [ R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 460
-- On fldlist_npv shift to state 481
## Reductions:
-- On R_BRACE reduce production fldlist_npv ->

State 481:
## Known stack suffix:
## identifier EQUALS jargument_npv SEMICOLON fldlist_npv
## LR(1) items:
fldlist_npv -> identifier EQUALS jargument_npv SEMICOLON fldlist_npv . [ R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fldlist_npv -> identifier EQUALS jargument_npv SEMICOLON fldlist_npv

State 482:
## Known stack suffix:
## L_BRACE fldlist_npv
## LR(1) items:
jargument_npv -> L_BRACE fldlist_npv . R_BRACE [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
-- On R_BRACE shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## L_BRACE fldlist_npv R_BRACE
## LR(1) items:
jargument_npv -> L_BRACE fldlist_npv R_BRACE . [ XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jargument_npv -> L_BRACE fldlist_npv R_BRACE

State 484:
## Known stack suffix:
## FALSE
## LR(1) items:
formula_npv -> FALSE . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
identifier -> FALSE . [ XOR USHR SHR SHL PLUS MOD MINUS L_PAREN EQUALS DOT DIV COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Reductions:
-- On XOR reduce production identifier -> FALSE
-- On VDASH reduce production formula_npv -> FALSE
-- On USHR reduce production identifier -> FALSE
-- On SHR reduce production identifier -> FALSE
-- On SHL reduce production identifier -> FALSE
-- On R_PAREN reduce production formula_npv -> FALSE
-- On QUESTIONMARK reduce production formula_npv -> FALSE
-- On PLUS reduce production identifier -> FALSE
-- On OROR reduce production formula_npv -> FALSE
-- On OR reduce production formula_npv -> FALSE
-- On MULT reduce production formula_npv -> FALSE
-- On MOD reduce production identifier -> FALSE
-- On MINUS reduce production identifier -> FALSE
-- On L_PAREN reduce production identifier -> FALSE
-- On INCONSISTENCY reduce production formula_npv -> FALSE
-- On IMPLICATION reduce production formula_npv -> FALSE
-- On FRAME reduce production formula_npv -> FALSE
-- On EQUALS reduce production identifier -> FALSE
-- On EOF reduce production formula_npv -> FALSE
-- On DOT reduce production identifier -> FALSE
-- On DIV reduce production identifier -> FALSE
-- On COLON reduce production identifier -> FALSE
-- On CMPNE reduce production identifier -> FALSE
-- On CMPLT reduce production identifier -> FALSE
-- On CMPLE reduce production identifier -> FALSE
-- On CMPL reduce production identifier -> FALSE
-- On CMPGT reduce production identifier -> FALSE
-- On CMPGE reduce production identifier -> FALSE
-- On CMPG reduce production identifier -> FALSE
-- On CMPEQ reduce production identifier -> FALSE
-- On CMP reduce production identifier -> FALSE
-- On AND reduce production identifier -> FALSE
-- On ABS reduce production formula_npv -> FALSE
-- On ABDUCTION reduce production formula_npv -> FALSE

State 485:
## Known stack suffix:
## EMP
## LR(1) items:
formula_npv -> EMP . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
identifier -> EMP . [ XOR USHR SHR SHL PLUS MOD MINUS L_PAREN EQUALS DOT DIV COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Reductions:
-- On XOR reduce production identifier -> EMP
-- On VDASH reduce production formula_npv -> EMP
-- On USHR reduce production identifier -> EMP
-- On SHR reduce production identifier -> EMP
-- On SHL reduce production identifier -> EMP
-- On R_PAREN reduce production formula_npv -> EMP
-- On QUESTIONMARK reduce production formula_npv -> EMP
-- On PLUS reduce production identifier -> EMP
-- On OROR reduce production formula_npv -> EMP
-- On OR reduce production formula_npv -> EMP
-- On MULT reduce production formula_npv -> EMP
-- On MOD reduce production identifier -> EMP
-- On MINUS reduce production identifier -> EMP
-- On L_PAREN reduce production identifier -> EMP
-- On INCONSISTENCY reduce production formula_npv -> EMP
-- On IMPLICATION reduce production formula_npv -> EMP
-- On FRAME reduce production formula_npv -> EMP
-- On EQUALS reduce production identifier -> EMP
-- On EOF reduce production formula_npv -> EMP
-- On DOT reduce production identifier -> EMP
-- On DIV reduce production identifier -> EMP
-- On COLON reduce production identifier -> EMP
-- On CMPNE reduce production identifier -> EMP
-- On CMPLT reduce production identifier -> EMP
-- On CMPLE reduce production identifier -> EMP
-- On CMPL reduce production identifier -> EMP
-- On CMPGT reduce production identifier -> EMP
-- On CMPGE reduce production identifier -> EMP
-- On CMPG reduce production identifier -> EMP
-- On CMPEQ reduce production identifier -> EMP
-- On CMP reduce production identifier -> EMP
-- On AND reduce production identifier -> EMP
-- On ABS reduce production formula_npv -> EMP
-- On ABDUCTION reduce production formula_npv -> EMP

State 486:
## Known stack suffix:
## BANG
## LR(1) items:
formula_npv -> BANG . identifier L_PAREN jargument_npv_list R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## BANG identifier
## LR(1) items:
formula_npv -> BANG identifier . L_PAREN jargument_npv_list R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On L_PAREN shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## BANG identifier L_PAREN
## LR(1) items:
formula_npv -> BANG identifier L_PAREN . jargument_npv_list R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv_list_ne shift to state 471
-- On jargument_npv_list shift to state 489
-- On jargument_npv shift to state 474
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On R_PAREN reduce production jargument_npv_list ->

State 489:
## Known stack suffix:
## BANG identifier L_PAREN jargument_npv_list
## LR(1) items:
formula_npv -> BANG identifier L_PAREN jargument_npv_list . R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On R_PAREN shift to state 490
## Reductions:

State 490:
## Known stack suffix:
## BANG identifier L_PAREN jargument_npv_list R_PAREN
## LR(1) items:
formula_npv -> BANG identifier L_PAREN jargument_npv_list R_PAREN . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> BANG identifier L_PAREN jargument_npv_list R_PAREN

State 491:
## Known stack suffix:
## lvariable_npv
## LR(1) items:
formula_npv -> lvariable_npv . DOT jargument_npv MAPSTO jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> lvariable_npv . COLON identifier [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
jargument_npv -> lvariable_npv . [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On DOT shift to state 492
-- On COLON shift to state 496
## Reductions:
-- On XOR reduce production jargument_npv -> lvariable_npv
-- On USHR reduce production jargument_npv -> lvariable_npv
-- On SHR reduce production jargument_npv -> lvariable_npv
-- On SHL reduce production jargument_npv -> lvariable_npv
-- On PLUS reduce production jargument_npv -> lvariable_npv
-- On MOD reduce production jargument_npv -> lvariable_npv
-- On MINUS reduce production jargument_npv -> lvariable_npv
-- On EQUALS reduce production jargument_npv -> lvariable_npv
-- On DIV reduce production jargument_npv -> lvariable_npv
-- On CMPNE reduce production jargument_npv -> lvariable_npv
-- On CMPLT reduce production jargument_npv -> lvariable_npv
-- On CMPLE reduce production jargument_npv -> lvariable_npv
-- On CMPL reduce production jargument_npv -> lvariable_npv
-- On CMPGT reduce production jargument_npv -> lvariable_npv
-- On CMPGE reduce production jargument_npv -> lvariable_npv
-- On CMPG reduce production jargument_npv -> lvariable_npv
-- On CMPEQ reduce production jargument_npv -> lvariable_npv
-- On CMP reduce production jargument_npv -> lvariable_npv
-- On AND reduce production jargument_npv -> lvariable_npv

State 492:
## Known stack suffix:
## lvariable_npv DOT
## LR(1) items:
formula_npv -> lvariable_npv DOT . jargument_npv MAPSTO jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv shift to state 493
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 493:
## Known stack suffix:
## lvariable_npv DOT jargument_npv
## LR(1) items:
formula_npv -> lvariable_npv DOT jargument_npv . MAPSTO jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On MAPSTO shift to state 494
## Reductions:

State 494:
## Known stack suffix:
## lvariable_npv DOT jargument_npv MAPSTO
## LR(1) items:
formula_npv -> lvariable_npv DOT jargument_npv MAPSTO . jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv shift to state 495
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 495:
## Known stack suffix:
## lvariable_npv DOT jargument_npv MAPSTO jargument_npv
## LR(1) items:
formula_npv -> lvariable_npv DOT jargument_npv MAPSTO jargument_npv . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> lvariable_npv DOT jargument_npv MAPSTO jargument_npv

State 496:
## Known stack suffix:
## lvariable_npv COLON
## LR(1) items:
formula_npv -> lvariable_npv COLON . identifier [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## lvariable_npv COLON identifier
## LR(1) items:
formula_npv -> lvariable_npv COLON identifier . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> lvariable_npv COLON identifier

State 498:
## Known stack suffix:
## L_PAREN jargument_npv
## LR(1) items:
formula_npv -> jargument_npv . binop_cmp jargument_npv [ R_PAREN OROR OR MULT ]
formula_npv -> jargument_npv . EQUALS jargument_npv [ R_PAREN OROR OR MULT ]
jargument_npv -> L_PAREN jargument_npv . binop_val_no_multor jargument_npv R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On XOR shift to state 179
-- On USHR shift to state 180
-- On SHR shift to state 181
-- On SHL shift to state 182
-- On PLUS shift to state 183
-- On MOD shift to state 184
-- On MINUS shift to state 185
-- On EQUALS shift to state 499
-- On DIV shift to state 186
-- On CMPNE shift to state 223
-- On CMPLT shift to state 224
-- On CMPLE shift to state 225
-- On CMPL shift to state 226
-- On CMPGT shift to state 227
-- On CMPGE shift to state 228
-- On CMPG shift to state 229
-- On CMPEQ shift to state 230
-- On CMP shift to state 231
-- On AND shift to state 187
-- On binop_val_no_multor shift to state 466
-- On binop_cmp shift to state 501
## Reductions:

State 499:
## Known stack suffix:
## jargument_npv EQUALS
## LR(1) items:
formula_npv -> jargument_npv EQUALS . jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv shift to state 500
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 500:
## Known stack suffix:
## jargument_npv EQUALS jargument_npv
## LR(1) items:
formula_npv -> jargument_npv EQUALS jargument_npv . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> jargument_npv EQUALS jargument_npv

State 501:
## Known stack suffix:
## jargument_npv binop_cmp
## LR(1) items:
formula_npv -> jargument_npv binop_cmp . jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv shift to state 502
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:

State 502:
## Known stack suffix:
## jargument_npv binop_cmp jargument_npv
## LR(1) items:
formula_npv -> jargument_npv binop_cmp jargument_npv . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> jargument_npv binop_cmp jargument_npv

State 503:
## Known stack suffix:
## identifier
## LR(1) items:
formula_npv -> identifier . L_PAREN jargument_npv_list R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
jargument_npv -> identifier . L_PAREN jargument_npv_list R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
lvariable_npv -> identifier . [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DOT DIV COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On L_PAREN shift to state 504
## Reductions:
-- On XOR reduce production lvariable_npv -> identifier
-- On USHR reduce production lvariable_npv -> identifier
-- On SHR reduce production lvariable_npv -> identifier
-- On SHL reduce production lvariable_npv -> identifier
-- On PLUS reduce production lvariable_npv -> identifier
-- On MOD reduce production lvariable_npv -> identifier
-- On MINUS reduce production lvariable_npv -> identifier
-- On EQUALS reduce production lvariable_npv -> identifier
-- On DOT reduce production lvariable_npv -> identifier
-- On DIV reduce production lvariable_npv -> identifier
-- On COLON reduce production lvariable_npv -> identifier
-- On CMPNE reduce production lvariable_npv -> identifier
-- On CMPLT reduce production lvariable_npv -> identifier
-- On CMPLE reduce production lvariable_npv -> identifier
-- On CMPL reduce production lvariable_npv -> identifier
-- On CMPGT reduce production lvariable_npv -> identifier
-- On CMPGE reduce production lvariable_npv -> identifier
-- On CMPG reduce production lvariable_npv -> identifier
-- On CMPEQ reduce production lvariable_npv -> identifier
-- On CMP reduce production lvariable_npv -> identifier
-- On AND reduce production lvariable_npv -> identifier

State 504:
## Known stack suffix:
## identifier L_PAREN
## LR(1) items:
formula_npv -> identifier L_PAREN . jargument_npv_list R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
jargument_npv -> identifier L_PAREN . jargument_npv_list R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv_list_ne shift to state 471
-- On jargument_npv_list shift to state 505
-- On jargument_npv shift to state 474
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On R_PAREN reduce production jargument_npv_list ->

State 505:
## Known stack suffix:
## identifier L_PAREN jargument_npv_list
## LR(1) items:
formula_npv -> identifier L_PAREN jargument_npv_list . R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
jargument_npv -> identifier L_PAREN jargument_npv_list . R_PAREN [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
-- On R_PAREN shift to state 506
## Reductions:

State 506:
## Known stack suffix:
## identifier L_PAREN jargument_npv_list R_PAREN
## LR(1) items:
formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN . [ XOR USHR SHR SHL PLUS MOD MINUS EQUALS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ]
## Transitions:
## Reductions:
-- On XOR reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On VDASH reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On USHR reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On SHR reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On SHL reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On R_PAREN reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On QUESTIONMARK reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On PLUS reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On OROR reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On OR reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On MULT reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On MOD reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On MINUS reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On INCONSISTENCY reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On IMPLICATION reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On FRAME reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On EQUALS reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On EOF reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On DIV reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPNE reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPLT reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPLE reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPL reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPGT reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPGE reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPG reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMPEQ reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On CMP reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On AND reduce production jargument_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On ABS reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN
-- On ABDUCTION reduce production formula_npv -> identifier L_PAREN jargument_npv_list R_PAREN

State 507:
## Known stack suffix:
## full_identifier
## LR(1) items:
formula_npv -> full_identifier . L_PAREN jargument_npv_list R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On L_PAREN shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## full_identifier L_PAREN
## LR(1) items:
formula_npv -> full_identifier L_PAREN . jargument_npv_list R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv_list_ne shift to state 471
-- On jargument_npv_list shift to state 509
-- On jargument_npv shift to state 474
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On R_PAREN reduce production jargument_npv_list ->

State 509:
## Known stack suffix:
## full_identifier L_PAREN jargument_npv_list
## LR(1) items:
formula_npv -> full_identifier L_PAREN jargument_npv_list . R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On R_PAREN shift to state 510
## Reductions:

State 510:
## Known stack suffix:
## full_identifier L_PAREN jargument_npv_list R_PAREN
## LR(1) items:
formula_npv -> full_identifier L_PAREN jargument_npv_list R_PAREN . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> full_identifier L_PAREN jargument_npv_list R_PAREN

State 511:
## Known stack suffix:
## L_PAREN formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ R_PAREN OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ R_PAREN OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ R_PAREN OROR OR MULT ]
formula_npv -> L_PAREN formula_npv . R_PAREN [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On R_PAREN shift to state 512
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 512:
## Known stack suffix:
## L_PAREN formula_npv R_PAREN
## LR(1) items:
formula_npv -> L_PAREN formula_npv R_PAREN . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> L_PAREN formula_npv R_PAREN

State 513:
## Known stack suffix:
## formula_npv OROR
## LR(1) items:
formula_npv -> formula_npv OROR . formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 515
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On R_PAREN reduce production formula_npv ->
-- On QUESTIONMARK reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 514:
## Known stack suffix:
## jargument_npv
## LR(1) items:
formula_npv -> jargument_npv . binop_cmp jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> jargument_npv . EQUALS jargument_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On EQUALS shift to state 499
-- On CMPNE shift to state 223
-- On CMPLT shift to state 224
-- On CMPLE shift to state 225
-- On CMPL shift to state 226
-- On CMPGT shift to state 227
-- On CMPGE shift to state 228
-- On CMPG shift to state 229
-- On CMPEQ shift to state 230
-- On CMP shift to state 231
-- On binop_cmp shift to state 501
## Reductions:

State 515:
## Known stack suffix:
## formula_npv OROR formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv OROR formula_npv . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On MULT shift to state 516
## Reductions:
-- On VDASH reduce production formula_npv -> formula_npv OROR formula_npv
-- On R_PAREN reduce production formula_npv -> formula_npv OROR formula_npv
-- On QUESTIONMARK reduce production formula_npv -> formula_npv OROR formula_npv
-- On OROR reduce production formula_npv -> formula_npv OROR formula_npv
-- On OR reduce production formula_npv -> formula_npv OROR formula_npv
-- On INCONSISTENCY reduce production formula_npv -> formula_npv OROR formula_npv
-- On IMPLICATION reduce production formula_npv -> formula_npv OROR formula_npv
-- On FRAME reduce production formula_npv -> formula_npv OROR formula_npv
-- On EOF reduce production formula_npv -> formula_npv OROR formula_npv
-- On ABS reduce production formula_npv -> formula_npv OROR formula_npv
-- On ABDUCTION reduce production formula_npv -> formula_npv OROR formula_npv

State 516:
## Known stack suffix:
## formula_npv MULT
## LR(1) items:
formula_npv -> formula_npv MULT . formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 517
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On R_PAREN reduce production formula_npv ->
-- On QUESTIONMARK reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 517:
## Known stack suffix:
## formula_npv MULT formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv MULT formula_npv . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production formula_npv -> formula_npv MULT formula_npv

State 518:
## Known stack suffix:
## formula_npv OR
## LR(1) items:
formula_npv -> formula_npv OR . formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 519
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On R_PAREN reduce production formula_npv ->
-- On QUESTIONMARK reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 519:
## Known stack suffix:
## formula_npv OR formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv OR formula_npv . [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On OROR shift to state 513
-- On MULT shift to state 516
## Reductions:
-- On VDASH reduce production formula_npv -> formula_npv OR formula_npv
-- On R_PAREN reduce production formula_npv -> formula_npv OR formula_npv
-- On QUESTIONMARK reduce production formula_npv -> formula_npv OR formula_npv
-- On OR reduce production formula_npv -> formula_npv OR formula_npv
-- On INCONSISTENCY reduce production formula_npv -> formula_npv OR formula_npv
-- On IMPLICATION reduce production formula_npv -> formula_npv OR formula_npv
-- On FRAME reduce production formula_npv -> formula_npv OR formula_npv
-- On EOF reduce production formula_npv -> formula_npv OR formula_npv
-- On ABS reduce production formula_npv -> formula_npv OR formula_npv
-- On ABDUCTION reduce production formula_npv -> formula_npv OR formula_npv

State 520:
## Known stack suffix:
## INCONSISTENCY COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
question -> INCONSISTENCY COLON formula_npv . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:
-- On INCONSISTENCY reduce production question -> INCONSISTENCY COLON formula_npv
-- On IMPLICATION reduce production question -> INCONSISTENCY COLON formula_npv
-- On FRAME reduce production question -> INCONSISTENCY COLON formula_npv
-- On EOF reduce production question -> INCONSISTENCY COLON formula_npv
-- On ABS reduce production question -> INCONSISTENCY COLON formula_npv
-- On ABDUCTION reduce production question -> INCONSISTENCY COLON formula_npv

State 521:
## Known stack suffix:
## IMPLICATION
## LR(1) items:
question -> IMPLICATION . COLON formula_npv VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On COLON shift to state 522
## Reductions:

State 522:
## Known stack suffix:
## IMPLICATION COLON
## LR(1) items:
question -> IMPLICATION COLON . formula_npv VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 523
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 523:
## Known stack suffix:
## IMPLICATION COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH OROR OR MULT ]
question -> IMPLICATION COLON formula_npv . VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On VDASH shift to state 524
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 524:
## Known stack suffix:
## IMPLICATION COLON formula_npv VDASH
## LR(1) items:
question -> IMPLICATION COLON formula_npv VDASH . formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 525
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 525:
## Known stack suffix:
## IMPLICATION COLON formula_npv VDASH formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
question -> IMPLICATION COLON formula_npv VDASH formula_npv . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:
-- On INCONSISTENCY reduce production question -> IMPLICATION COLON formula_npv VDASH formula_npv
-- On IMPLICATION reduce production question -> IMPLICATION COLON formula_npv VDASH formula_npv
-- On FRAME reduce production question -> IMPLICATION COLON formula_npv VDASH formula_npv
-- On EOF reduce production question -> IMPLICATION COLON formula_npv VDASH formula_npv
-- On ABS reduce production question -> IMPLICATION COLON formula_npv VDASH formula_npv
-- On ABDUCTION reduce production question -> IMPLICATION COLON formula_npv VDASH formula_npv

State 526:
## Known stack suffix:
## FRAME
## LR(1) items:
question -> FRAME . COLON formula_npv VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On COLON shift to state 527
## Reductions:

State 527:
## Known stack suffix:
## FRAME COLON
## LR(1) items:
question -> FRAME COLON . formula_npv VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 528
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 528:
## Known stack suffix:
## FRAME COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH OROR OR MULT ]
question -> FRAME COLON formula_npv . VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On VDASH shift to state 529
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 529:
## Known stack suffix:
## FRAME COLON formula_npv VDASH
## LR(1) items:
question -> FRAME COLON formula_npv VDASH . formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 530
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 530:
## Known stack suffix:
## FRAME COLON formula_npv VDASH formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
question -> FRAME COLON formula_npv VDASH formula_npv . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:
-- On INCONSISTENCY reduce production question -> FRAME COLON formula_npv VDASH formula_npv
-- On IMPLICATION reduce production question -> FRAME COLON formula_npv VDASH formula_npv
-- On FRAME reduce production question -> FRAME COLON formula_npv VDASH formula_npv
-- On EOF reduce production question -> FRAME COLON formula_npv VDASH formula_npv
-- On ABS reduce production question -> FRAME COLON formula_npv VDASH formula_npv
-- On ABDUCTION reduce production question -> FRAME COLON formula_npv VDASH formula_npv

State 531:
## Known stack suffix:
## EOF
## LR(1) items:
question_file -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production question_file -> EOF

State 532:
## Known stack suffix:
## ABS
## LR(1) items:
question -> ABS . COLON formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On COLON shift to state 533
## Reductions:

State 533:
## Known stack suffix:
## ABS COLON
## LR(1) items:
question -> ABS COLON . formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 534
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 534:
## Known stack suffix:
## ABS COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
question -> ABS COLON formula_npv . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:
-- On INCONSISTENCY reduce production question -> ABS COLON formula_npv
-- On IMPLICATION reduce production question -> ABS COLON formula_npv
-- On FRAME reduce production question -> ABS COLON formula_npv
-- On EOF reduce production question -> ABS COLON formula_npv
-- On ABS reduce production question -> ABS COLON formula_npv
-- On ABDUCTION reduce production question -> ABS COLON formula_npv

State 535:
## Known stack suffix:
## ABDUCTION
## LR(1) items:
question -> ABDUCTION . COLON formula_npv VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On COLON shift to state 536
## Reductions:

State 536:
## Known stack suffix:
## ABDUCTION COLON
## LR(1) items:
question -> ABDUCTION COLON . formula_npv VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 537
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 537:
## Known stack suffix:
## ABDUCTION COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH OROR OR MULT ]
question -> ABDUCTION COLON formula_npv . VDASH formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On VDASH shift to state 538
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 538:
## Known stack suffix:
## ABDUCTION COLON formula_npv VDASH
## LR(1) items:
question -> ABDUCTION COLON formula_npv VDASH . formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 539
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->
-- On ABDUCTION reduce production formula_npv ->

State 539:
## Known stack suffix:
## ABDUCTION COLON formula_npv VDASH formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
formula_npv -> formula_npv . OROR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
question -> ABDUCTION COLON formula_npv VDASH formula_npv . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION ]
## Transitions:
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:
-- On INCONSISTENCY reduce production question -> ABDUCTION COLON formula_npv VDASH formula_npv
-- On IMPLICATION reduce production question -> ABDUCTION COLON formula_npv VDASH formula_npv
-- On FRAME reduce production question -> ABDUCTION COLON formula_npv VDASH formula_npv
-- On EOF reduce production question -> ABDUCTION COLON formula_npv VDASH formula_npv
-- On ABS reduce production question -> ABDUCTION COLON formula_npv VDASH formula_npv
-- On ABDUCTION reduce production question -> ABDUCTION COLON formula_npv VDASH formula_npv

State 540:
## Known stack suffix:
## question_file
## LR(1) items:
question_file' -> question_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept question_file

State 541:
## Known stack suffix:
## question
## LR(1) items:
question_file -> question . question_file [ # ]
## Transitions:
-- On INCONSISTENCY shift to state 452
-- On IMPLICATION shift to state 521
-- On FRAME shift to state 526
-- On EOF shift to state 531
-- On ABS shift to state 532
-- On ABDUCTION shift to state 535
-- On question_file shift to state 542
-- On question shift to state 541
## Reductions:

State 542:
## Known stack suffix:
## question question_file
## LR(1) items:
question_file -> question question_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production question_file -> question question_file

State 543:
## Known stack suffix:
##
## LR(1) items:
rule_file' -> . rule_file [ # ]
## Transitions:
-- On RULE shift to state 544
-- On REWRITERULE shift to state 605
-- On IMPORT shift to state 632
-- On EQUIV shift to state 635
-- On EOF shift to state 653
-- On CONSTRUCTOR shift to state 654
-- On ABSRULE shift to state 656
-- On rule_file shift to state 663
-- On rule shift to state 664
-- On equiv_rule shift to state 666
## Reductions:

State 544:
## Known stack suffix:
## RULE
## LR(1) items:
rule -> RULE . identifier_op COLON sequent without where IF sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier_op shift to state 545
-- On identifier shift to state 604
## Reductions:
-- On COLON reduce production identifier_op ->

State 545:
## Known stack suffix:
## RULE identifier_op
## LR(1) items:
rule -> RULE identifier_op . COLON sequent without where IF sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On COLON shift to state 546
## Reductions:

State 546:
## Known stack suffix:
## RULE identifier_op COLON
## LR(1) items:
rule -> RULE identifier_op COLON . sequent without where IF sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On spatial_list_ne shift to state 547
-- On spatial_list shift to state 548
-- On spatial_at shift to state 559
-- On sequent shift to state 575
-- On lvariable shift to state 177
-- On jargument shift to state 562
-- On identifier shift to state 567
-- On full_identifier shift to state 571
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On OROR reduce production spatial_list ->
-- On OR reduce production spatial_list ->

State 547:
## Known stack suffix:
## spatial_list_ne
## LR(1) items:
spatial_list -> spatial_list_ne . [ OROR OR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spatial_list -> spatial_list_ne

State 548:
## Known stack suffix:
## spatial_list
## LR(1) items:
sequent -> spatial_list . OR formula VDASH formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list . OR formula VDASH formula DASHV formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list . OROR formula VDASH formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On OROR shift to state 549
-- On OR shift to state 553
## Reductions:

State 549:
## Known stack suffix:
## spatial_list OROR
## LR(1) items:
sequent -> spatial_list OROR . formula VDASH formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 550
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On VDASH reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 550:
## Known stack suffix:
## spatial_list OROR formula
## LR(1) items:
formula -> formula . MULT formula [ VDASH OROR OR MULT ]
formula -> formula . OR formula [ VDASH OROR OR MULT ]
formula -> formula . OROR formula [ VDASH OROR OR MULT ]
sequent -> spatial_list OROR formula . VDASH formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On VDASH shift to state 551
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 551:
## Known stack suffix:
## spatial_list OROR formula VDASH
## LR(1) items:
sequent -> spatial_list OROR formula VDASH . formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 552
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On WHERE reduce production formula ->
-- On SEMICOLON reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On ORTEXT reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On IF reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 552:
## Known stack suffix:
## spatial_list OROR formula VDASH formula
## LR(1) items:
formula -> formula . MULT formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list OROR formula VDASH formula . [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:
-- On WITHOUT reduce production sequent -> spatial_list OROR formula VDASH formula
-- On WHERE reduce production sequent -> spatial_list OROR formula VDASH formula
-- On SEMICOLON reduce production sequent -> spatial_list OROR formula VDASH formula
-- On RULE reduce production sequent -> spatial_list OROR formula VDASH formula
-- On REWRITERULE reduce production sequent -> spatial_list OROR formula VDASH formula
-- On ORTEXT reduce production sequent -> spatial_list OROR formula VDASH formula
-- On IMPORT reduce production sequent -> spatial_list OROR formula VDASH formula
-- On IF reduce production sequent -> spatial_list OROR formula VDASH formula
-- On EQUIV reduce production sequent -> spatial_list OROR formula VDASH formula
-- On EOF reduce production sequent -> spatial_list OROR formula VDASH formula
-- On CONSTRUCTOR reduce production sequent -> spatial_list OROR formula VDASH formula
-- On ABSRULE reduce production sequent -> spatial_list OROR formula VDASH formula

State 553:
## Known stack suffix:
## spatial_list OR
## LR(1) items:
sequent -> spatial_list OR . formula VDASH formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list OR . formula VDASH formula DASHV formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 554
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On VDASH reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 554:
## Known stack suffix:
## spatial_list OR formula
## LR(1) items:
formula -> formula . MULT formula [ VDASH OROR OR MULT ]
formula -> formula . OR formula [ VDASH OROR OR MULT ]
formula -> formula . OROR formula [ VDASH OROR OR MULT ]
sequent -> spatial_list OR formula . VDASH formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list OR formula . VDASH formula DASHV formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On VDASH shift to state 555
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 555:
## Known stack suffix:
## spatial_list OR formula VDASH
## LR(1) items:
sequent -> spatial_list OR formula VDASH . formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list OR formula VDASH . formula DASHV formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 556
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On WHERE reduce production formula ->
-- On SEMICOLON reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On ORTEXT reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On IF reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On DASHV reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 556:
## Known stack suffix:
## spatial_list OR formula VDASH formula
## LR(1) items:
formula -> formula . MULT formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF DASHV CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF DASHV CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF DASHV CONSTRUCTOR ABSRULE ]
sequent -> spatial_list OR formula VDASH formula . [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list OR formula VDASH formula . DASHV formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On DASHV shift to state 557
## Reductions:
-- On WITHOUT reduce production sequent -> spatial_list OR formula VDASH formula
-- On WHERE reduce production sequent -> spatial_list OR formula VDASH formula
-- On SEMICOLON reduce production sequent -> spatial_list OR formula VDASH formula
-- On RULE reduce production sequent -> spatial_list OR formula VDASH formula
-- On REWRITERULE reduce production sequent -> spatial_list OR formula VDASH formula
-- On ORTEXT reduce production sequent -> spatial_list OR formula VDASH formula
-- On IMPORT reduce production sequent -> spatial_list OR formula VDASH formula
-- On IF reduce production sequent -> spatial_list OR formula VDASH formula
-- On EQUIV reduce production sequent -> spatial_list OR formula VDASH formula
-- On EOF reduce production sequent -> spatial_list OR formula VDASH formula
-- On CONSTRUCTOR reduce production sequent -> spatial_list OR formula VDASH formula
-- On ABSRULE reduce production sequent -> spatial_list OR formula VDASH formula

State 557:
## Known stack suffix:
## spatial_list OR formula VDASH formula DASHV
## LR(1) items:
sequent -> spatial_list OR formula VDASH formula DASHV . formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 558
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On WHERE reduce production formula ->
-- On SEMICOLON reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On ORTEXT reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On IF reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 558:
## Known stack suffix:
## spatial_list OR formula VDASH formula DASHV formula
## LR(1) items:
formula -> formula . MULT formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT OROR OR MULT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent -> spatial_list OR formula VDASH formula DASHV formula . [ WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:
-- On WITHOUT reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On WHERE reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On SEMICOLON reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On RULE reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On REWRITERULE reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On ORTEXT reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On IMPORT reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On IF reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On EQUIV reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On EOF reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On CONSTRUCTOR reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula
-- On ABSRULE reduce production sequent -> spatial_list OR formula VDASH formula DASHV formula

State 559:
## Known stack suffix:
## spatial_at
## LR(1) items:
spatial_list_ne -> spatial_at . MULT spatial_list_ne [ OROR OR ]
spatial_list_ne -> spatial_at . [ OROR OR ]
## Transitions:
-- On MULT shift to state 560
## Reductions:
-- On OROR reduce production spatial_list_ne -> spatial_at
-- On OR reduce production spatial_list_ne -> spatial_at

State 560:
## Known stack suffix:
## spatial_at MULT
## LR(1) items:
spatial_list_ne -> spatial_at MULT . spatial_list_ne [ OROR OR ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On spatial_list_ne shift to state 561
-- On spatial_at shift to state 559
-- On lvariable shift to state 177
-- On jargument shift to state 562
-- On identifier shift to state 567
-- On full_identifier shift to state 571
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 561:
## Known stack suffix:
## spatial_at MULT spatial_list_ne
## LR(1) items:
spatial_list_ne -> spatial_at MULT spatial_list_ne . [ OROR OR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spatial_list_ne -> spatial_at MULT spatial_list_ne

State 562:
## Known stack suffix:
## jargument
## LR(1) items:
spatial_at -> jargument . DOT field_signature MAPSTO jargument [ OROR OR MULT ]
## Transitions:
-- On DOT shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## jargument DOT
## LR(1) items:
spatial_at -> jargument DOT . field_signature MAPSTO jargument [ OROR OR MULT ]
## Transitions:
-- On CMPLT shift to state 171
-- On field_signature shift to state 564
## Reductions:

State 564:
## Known stack suffix:
## jargument DOT field_signature
## LR(1) items:
spatial_at -> jargument DOT field_signature . MAPSTO jargument [ OROR OR MULT ]
## Transitions:
-- On MAPSTO shift to state 565
## Reductions:

State 565:
## Known stack suffix:
## jargument DOT field_signature MAPSTO
## LR(1) items:
spatial_at -> jargument DOT field_signature MAPSTO . jargument [ OROR OR MULT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 566
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 566:
## Known stack suffix:
## jargument DOT field_signature MAPSTO jargument
## LR(1) items:
spatial_at -> jargument DOT field_signature MAPSTO jargument . [ OROR OR MULT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spatial_at -> jargument DOT field_signature MAPSTO jargument

State 567:
## Known stack suffix:
## identifier
## LR(1) items:
jargument -> identifier . L_PAREN jargument_list R_PAREN [ DOT ]
lvariable -> identifier . [ DOT ]
spatial_at -> identifier . L_PAREN jargument_list R_PAREN [ OROR OR MULT ]
## Transitions:
-- On L_PAREN shift to state 568
## Reductions:
-- On DOT reduce production lvariable -> identifier

State 568:
## Known stack suffix:
## identifier L_PAREN
## LR(1) items:
jargument -> identifier L_PAREN . jargument_list R_PAREN [ DOT ]
spatial_at -> identifier L_PAREN . jargument_list R_PAREN [ OROR OR MULT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 569
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 569:
## Known stack suffix:
## identifier L_PAREN jargument_list
## LR(1) items:
jargument -> identifier L_PAREN jargument_list . R_PAREN [ DOT ]
spatial_at -> identifier L_PAREN jargument_list . R_PAREN [ OROR OR MULT ]
## Transitions:
-- On R_PAREN shift to state 570
## Reductions:

State 570:
## Known stack suffix:
## identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
jargument -> identifier L_PAREN jargument_list R_PAREN . [ DOT ]
spatial_at -> identifier L_PAREN jargument_list R_PAREN . [ OROR OR MULT ]
## Transitions:
## Reductions:
-- On OROR reduce production spatial_at -> identifier L_PAREN jargument_list R_PAREN
-- On OR reduce production spatial_at -> identifier L_PAREN jargument_list R_PAREN
-- On MULT reduce production spatial_at -> identifier L_PAREN jargument_list R_PAREN
-- On DOT reduce production jargument -> identifier L_PAREN jargument_list R_PAREN

State 571:
## Known stack suffix:
## full_identifier
## LR(1) items:
spatial_at -> full_identifier . L_PAREN jargument_list R_PAREN [ OROR OR MULT ]
## Transitions:
-- On L_PAREN shift to state 572
## Reductions:

State 572:
## Known stack suffix:
## full_identifier L_PAREN
## LR(1) items:
spatial_at -> full_identifier L_PAREN . jargument_list R_PAREN [ OROR OR MULT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 573
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 573:
## Known stack suffix:
## full_identifier L_PAREN jargument_list
## LR(1) items:
spatial_at -> full_identifier L_PAREN jargument_list . R_PAREN [ OROR OR MULT ]
## Transitions:
-- On R_PAREN shift to state 574
## Reductions:

State 574:
## Known stack suffix:
## full_identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
spatial_at -> full_identifier L_PAREN jargument_list R_PAREN . [ OROR OR MULT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production spatial_at -> full_identifier L_PAREN jargument_list R_PAREN

State 575:
## Known stack suffix:
## RULE identifier_op COLON sequent
## LR(1) items:
rule -> RULE identifier_op COLON sequent . without where IF sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WITHOUT shift to state 576
-- On without shift to state 580
## Reductions:
-- On WHERE reduce production without ->
-- On IF reduce production without ->

State 576:
## Known stack suffix:
## WITHOUT
## LR(1) items:
without -> WITHOUT . formula [ WHERE IF ]
without -> WITHOUT . formula VDASH formula [ WHERE IF ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 577
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WHERE reduce production formula ->
-- On VDASH reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IF reduce production formula ->

State 577:
## Known stack suffix:
## WITHOUT formula
## LR(1) items:
formula -> formula . MULT formula [ WHERE VDASH OROR OR MULT IF ]
formula -> formula . OR formula [ WHERE VDASH OROR OR MULT IF ]
formula -> formula . OROR formula [ WHERE VDASH OROR OR MULT IF ]
without -> WITHOUT formula . [ WHERE IF ]
without -> WITHOUT formula . VDASH formula [ WHERE IF ]
## Transitions:
-- On VDASH shift to state 578
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:
-- On WHERE reduce production without -> WITHOUT formula
-- On IF reduce production without -> WITHOUT formula

State 578:
## Known stack suffix:
## WITHOUT formula VDASH
## LR(1) items:
without -> WITHOUT formula VDASH . formula [ WHERE IF ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 579
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WHERE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IF reduce production formula ->

State 579:
## Known stack suffix:
## WITHOUT formula VDASH formula
## LR(1) items:
formula -> formula . MULT formula [ WHERE OROR OR MULT IF ]
formula -> formula . OR formula [ WHERE OROR OR MULT IF ]
formula -> formula . OROR formula [ WHERE OROR OR MULT IF ]
without -> WITHOUT formula VDASH formula . [ WHERE IF ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:
-- On WHERE reduce production without -> WITHOUT formula VDASH formula
-- On IF reduce production without -> WITHOUT formula VDASH formula

State 580:
## Known stack suffix:
## RULE identifier_op COLON sequent without
## LR(1) items:
rule -> RULE identifier_op COLON sequent without . where IF sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WHERE shift to state 581
-- On where shift to state 594
## Reductions:
-- On IF reduce production where ->

State 581:
## Known stack suffix:
## WHERE
## LR(1) items:
where -> WHERE . clause_list [ RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On varterm shift to state 582
-- On lvariable_list_ne shift to state 156
-- On lvariable_list shift to state 586
-- On lvariable shift to state 587
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 588
-- On field_signature shift to state 199
-- On clause_list shift to state 590
-- On clause shift to state 591
-- On at_identifier shift to state 200
## Reductions:
-- On PUREGUARD reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On NOTINCONTEXT reduce production lvariable_list ->
-- On NOTIN reduce production lvariable_list ->
-- On MULT reduce production formula ->

State 582:
## Known stack suffix:
## varterm
## LR(1) items:
clause -> varterm . NOTINCONTEXT [ SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
clause -> varterm . NOTIN jargument [ SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On NOTINCONTEXT shift to state 583
-- On NOTIN shift to state 584
## Reductions:

State 583:
## Known stack suffix:
## varterm NOTINCONTEXT
## LR(1) items:
clause -> varterm NOTINCONTEXT . [ SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> varterm NOTINCONTEXT

State 584:
## Known stack suffix:
## varterm NOTIN
## LR(1) items:
clause -> varterm NOTIN . jargument [ SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 585
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 585:
## Known stack suffix:
## varterm NOTIN jargument
## LR(1) items:
clause -> varterm NOTIN jargument . [ SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> varterm NOTIN jargument

State 586:
## Known stack suffix:
## lvariable_list
## LR(1) items:
varterm -> lvariable_list . [ NOTINCONTEXT NOTIN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production varterm -> lvariable_list

State 587:
## Known stack suffix:
## lvariable
## LR(1) items:
formula -> lvariable . DOT jargument MAPSTO jargument [ PUREGUARD OROR OR MULT ]
formula -> lvariable . COLON identifier [ PUREGUARD OROR OR MULT ]
jargument -> lvariable . [ EQUALS CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP ]
lvariable_list_ne -> lvariable . [ NOTINCONTEXT NOTIN ]
lvariable_list_ne -> lvariable . COMMA lvariable_list_ne [ NOTINCONTEXT NOTIN ]
## Transitions:
-- On DOT shift to state 214
-- On COMMA shift to state 266
-- On COLON shift to state 218
## Reductions:
-- On NOTINCONTEXT reduce production lvariable_list_ne -> lvariable
-- On NOTIN reduce production lvariable_list_ne -> lvariable
-- On EQUALS reduce production jargument -> lvariable
-- On CMPNE reduce production jargument -> lvariable
-- On CMPLT reduce production jargument -> lvariable
-- On CMPLE reduce production jargument -> lvariable
-- On CMPL reduce production jargument -> lvariable
-- On CMPGT reduce production jargument -> lvariable
-- On CMPGE reduce production jargument -> lvariable
-- On CMPG reduce production jargument -> lvariable
-- On CMPEQ reduce production jargument -> lvariable
-- On CMP reduce production jargument -> lvariable

State 588:
## Known stack suffix:
## formula
## LR(1) items:
clause -> formula . PUREGUARD [ SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . MULT formula [ PUREGUARD OROR OR MULT ]
formula -> formula . OR formula [ PUREGUARD OROR OR MULT ]
formula -> formula . OROR formula [ PUREGUARD OROR OR MULT ]
## Transitions:
-- On PUREGUARD shift to state 589
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 589:
## Known stack suffix:
## formula PUREGUARD
## LR(1) items:
clause -> formula PUREGUARD . [ SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> formula PUREGUARD

State 590:
## Known stack suffix:
## WHERE clause_list
## LR(1) items:
where -> WHERE clause_list . [ RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production where -> WHERE clause_list

State 591:
## Known stack suffix:
## clause
## LR(1) items:
clause_list -> clause . [ RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
clause_list -> clause . SEMICOLON clause_list [ RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On SEMICOLON shift to state 592
## Reductions:
-- On RULE reduce production clause_list -> clause
-- On REWRITERULE reduce production clause_list -> clause
-- On IMPORT reduce production clause_list -> clause
-- On IF reduce production clause_list -> clause
-- On EQUIV reduce production clause_list -> clause
-- On EOF reduce production clause_list -> clause
-- On CONSTRUCTOR reduce production clause_list -> clause
-- On ABSRULE reduce production clause_list -> clause

State 592:
## Known stack suffix:
## clause SEMICOLON
## LR(1) items:
clause_list -> clause SEMICOLON . clause_list [ RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On varterm shift to state 582
-- On lvariable_list_ne shift to state 156
-- On lvariable_list shift to state 586
-- On lvariable shift to state 587
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 588
-- On field_signature shift to state 199
-- On clause_list shift to state 593
-- On clause shift to state 591
-- On at_identifier shift to state 200
## Reductions:
-- On PUREGUARD reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On NOTINCONTEXT reduce production lvariable_list ->
-- On NOTIN reduce production lvariable_list ->
-- On MULT reduce production formula ->

State 593:
## Known stack suffix:
## clause SEMICOLON clause_list
## LR(1) items:
clause_list -> clause SEMICOLON clause_list . [ RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause_list -> clause SEMICOLON clause_list

State 594:
## Known stack suffix:
## RULE identifier_op COLON sequent without where
## LR(1) items:
rule -> RULE identifier_op COLON sequent without where . IF sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On IF shift to state 595
## Reductions:

State 595:
## Known stack suffix:
## RULE identifier_op COLON sequent without where IF
## LR(1) items:
rule -> RULE identifier_op COLON sequent without where IF . sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 596
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On spatial_list_ne shift to state 547
-- On spatial_list shift to state 548
-- On spatial_at shift to state 559
-- On sequent_list_or_list shift to state 597
-- On sequent_list shift to state 598
-- On sequent shift to state 601
-- On lvariable shift to state 177
-- On jargument shift to state 562
-- On identifier shift to state 567
-- On full_identifier shift to state 571
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On RULE reduce production sequent_list ->
-- On REWRITERULE reduce production sequent_list ->
-- On ORTEXT reduce production sequent_list ->
-- On OROR reduce production spatial_list ->
-- On OR reduce production spatial_list ->
-- On IMPORT reduce production sequent_list ->
-- On EQUIV reduce production sequent_list ->
-- On EOF reduce production sequent_list ->
-- On CONSTRUCTOR reduce production sequent_list ->
-- On ABSRULE reduce production sequent_list ->

State 596:
## Known stack suffix:
## TRUE
## LR(1) items:
identifier -> TRUE . [ L_PAREN DOT ]
sequent_list -> TRUE . [ RULE REWRITERULE ORTEXT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Reductions:
-- On RULE reduce production sequent_list -> TRUE
-- On REWRITERULE reduce production sequent_list -> TRUE
-- On ORTEXT reduce production sequent_list -> TRUE
-- On L_PAREN reduce production identifier -> TRUE
-- On IMPORT reduce production sequent_list -> TRUE
-- On EQUIV reduce production sequent_list -> TRUE
-- On EOF reduce production sequent_list -> TRUE
-- On DOT reduce production identifier -> TRUE
-- On CONSTRUCTOR reduce production sequent_list -> TRUE
-- On ABSRULE reduce production sequent_list -> TRUE

State 597:
## Known stack suffix:
## RULE identifier_op COLON sequent without where IF sequent_list_or_list
## LR(1) items:
rule -> RULE identifier_op COLON sequent without where IF sequent_list_or_list . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> RULE identifier_op COLON sequent without where IF sequent_list_or_list

State 598:
## Known stack suffix:
## sequent_list
## LR(1) items:
sequent_list_or_list -> sequent_list . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent_list_or_list -> sequent_list . ORTEXT sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On ORTEXT shift to state 599
## Reductions:
-- On RULE reduce production sequent_list_or_list -> sequent_list
-- On REWRITERULE reduce production sequent_list_or_list -> sequent_list
-- On IMPORT reduce production sequent_list_or_list -> sequent_list
-- On EQUIV reduce production sequent_list_or_list -> sequent_list
-- On EOF reduce production sequent_list_or_list -> sequent_list
-- On CONSTRUCTOR reduce production sequent_list_or_list -> sequent_list
-- On ABSRULE reduce production sequent_list_or_list -> sequent_list

State 599:
## Known stack suffix:
## sequent_list ORTEXT
## LR(1) items:
sequent_list_or_list -> sequent_list ORTEXT . sequent_list_or_list [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 596
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On spatial_list_ne shift to state 547
-- On spatial_list shift to state 548
-- On spatial_at shift to state 559
-- On sequent_list_or_list shift to state 600
-- On sequent_list shift to state 598
-- On sequent shift to state 601
-- On lvariable shift to state 177
-- On jargument shift to state 562
-- On identifier shift to state 567
-- On full_identifier shift to state 571
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On RULE reduce production sequent_list ->
-- On REWRITERULE reduce production sequent_list ->
-- On ORTEXT reduce production sequent_list ->
-- On OROR reduce production spatial_list ->
-- On OR reduce production spatial_list ->
-- On IMPORT reduce production sequent_list ->
-- On EQUIV reduce production sequent_list ->
-- On EOF reduce production sequent_list ->
-- On CONSTRUCTOR reduce production sequent_list ->
-- On ABSRULE reduce production sequent_list ->

State 600:
## Known stack suffix:
## sequent_list ORTEXT sequent_list_or_list
## LR(1) items:
sequent_list_or_list -> sequent_list ORTEXT sequent_list_or_list . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequent_list_or_list -> sequent_list ORTEXT sequent_list_or_list

State 601:
## Known stack suffix:
## sequent
## LR(1) items:
sequent_list -> sequent . [ RULE REWRITERULE ORTEXT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
sequent_list -> sequent . SEMICOLON sequent_list [ RULE REWRITERULE ORTEXT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On SEMICOLON shift to state 602
## Reductions:
-- On RULE reduce production sequent_list -> sequent
-- On REWRITERULE reduce production sequent_list -> sequent
-- On ORTEXT reduce production sequent_list -> sequent
-- On IMPORT reduce production sequent_list -> sequent
-- On EQUIV reduce production sequent_list -> sequent
-- On EOF reduce production sequent_list -> sequent
-- On CONSTRUCTOR reduce production sequent_list -> sequent
-- On ABSRULE reduce production sequent_list -> sequent

State 602:
## Known stack suffix:
## sequent SEMICOLON
## LR(1) items:
sequent_list -> sequent SEMICOLON . sequent_list [ RULE REWRITERULE ORTEXT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 596
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On spatial_list_ne shift to state 547
-- On spatial_list shift to state 548
-- On spatial_at shift to state 559
-- On sequent_list shift to state 603
-- On sequent shift to state 601
-- On lvariable shift to state 177
-- On jargument shift to state 562
-- On identifier shift to state 567
-- On full_identifier shift to state 571
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On RULE reduce production sequent_list ->
-- On REWRITERULE reduce production sequent_list ->
-- On ORTEXT reduce production sequent_list ->
-- On OROR reduce production spatial_list ->
-- On OR reduce production spatial_list ->
-- On IMPORT reduce production sequent_list ->
-- On EQUIV reduce production sequent_list ->
-- On EOF reduce production sequent_list ->
-- On CONSTRUCTOR reduce production sequent_list ->
-- On ABSRULE reduce production sequent_list ->

State 603:
## Known stack suffix:
## sequent SEMICOLON sequent_list
## LR(1) items:
sequent_list -> sequent SEMICOLON sequent_list . [ RULE REWRITERULE ORTEXT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production sequent_list -> sequent SEMICOLON sequent_list

State 604:
## Known stack suffix:
## identifier
## LR(1) items:
identifier_op -> identifier . [ MULT COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_op -> identifier

State 605:
## Known stack suffix:
## REWRITERULE
## LR(1) items:
rule -> REWRITERULE . identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
rule -> REWRITERULE . identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier_op shift to state 606
-- On identifier shift to state 604
## Reductions:
-- On MULT reduce production identifier_op ->
-- On COLON reduce production identifier_op ->

State 606:
## Known stack suffix:
## REWRITERULE identifier_op
## LR(1) items:
rule -> REWRITERULE identifier_op . COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
rule -> REWRITERULE identifier_op . MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On MULT shift to state 607
-- On COLON shift to state 622
## Reductions:

State 607:
## Known stack suffix:
## REWRITERULE identifier_op MULT
## LR(1) items:
rule -> REWRITERULE identifier_op MULT . COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On COLON shift to state 608
## Reductions:

State 608:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON . identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 609
## Reductions:

State 609:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier . L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On L_PAREN shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN . jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 611
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 611:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list . R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On R_PAREN shift to state 612
## Reductions:

State 612:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN . EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On EQUALS shift to state 613
## Reductions:

State 613:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS . jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 614
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 614:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument . ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On IF shift to state 615
-- On ifclause shift to state 617
## Reductions:
-- On WITHOUT reduce production ifclause ->
-- On WHERE reduce production ifclause ->
-- On RULE reduce production ifclause ->
-- On REWRITERULE reduce production ifclause ->
-- On IMPORT reduce production ifclause ->
-- On EQUIV reduce production ifclause ->
-- On EOF reduce production ifclause ->
-- On CONSTRUCTOR reduce production ifclause ->
-- On ABSRULE reduce production ifclause ->

State 615:
## Known stack suffix:
## IF
## LR(1) items:
ifclause -> IF . formula [ WITHOUT WHERE RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 616
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On WHERE reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 616:
## Known stack suffix:
## IF formula
## LR(1) items:
formula -> formula . MULT formula [ WITHOUT WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WITHOUT WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WITHOUT WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
ifclause -> IF formula . [ WITHOUT WHERE RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:
-- On WITHOUT reduce production ifclause -> IF formula
-- On WHERE reduce production ifclause -> IF formula
-- On RULE reduce production ifclause -> IF formula
-- On REWRITERULE reduce production ifclause -> IF formula
-- On IMPORT reduce production ifclause -> IF formula
-- On EQUIV reduce production ifclause -> IF formula
-- On EOF reduce production ifclause -> IF formula
-- On CONSTRUCTOR reduce production ifclause -> IF formula
-- On ABSRULE reduce production ifclause -> IF formula

State 617:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause . without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WITHOUT shift to state 618
-- On without_simp shift to state 620
## Reductions:
-- On WHERE reduce production without_simp ->
-- On RULE reduce production without_simp ->
-- On REWRITERULE reduce production without_simp ->
-- On IMPORT reduce production without_simp ->
-- On EQUIV reduce production without_simp ->
-- On EOF reduce production without_simp ->
-- On CONSTRUCTOR reduce production without_simp ->
-- On ABSRULE reduce production without_simp ->

State 618:
## Known stack suffix:
## WITHOUT
## LR(1) items:
without_simp -> WITHOUT . formula [ WHERE RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 619
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WHERE reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 619:
## Known stack suffix:
## WITHOUT formula
## LR(1) items:
formula -> formula . MULT formula [ WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
without_simp -> WITHOUT formula . [ WHERE RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:
-- On WHERE reduce production without_simp -> WITHOUT formula
-- On RULE reduce production without_simp -> WITHOUT formula
-- On REWRITERULE reduce production without_simp -> WITHOUT formula
-- On IMPORT reduce production without_simp -> WITHOUT formula
-- On EQUIV reduce production without_simp -> WITHOUT formula
-- On EOF reduce production without_simp -> WITHOUT formula
-- On CONSTRUCTOR reduce production without_simp -> WITHOUT formula
-- On ABSRULE reduce production without_simp -> WITHOUT formula

State 620:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp . where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WHERE shift to state 581
-- On where shift to state 621
## Reductions:
-- On RULE reduce production where ->
-- On REWRITERULE reduce production where ->
-- On IMPORT reduce production where ->
-- On EQUIV reduce production where ->
-- On EOF reduce production where ->
-- On CONSTRUCTOR reduce production where ->
-- On ABSRULE reduce production where ->

State 621:
## Known stack suffix:
## REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where
## LR(1) items:
rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> REWRITERULE identifier_op MULT COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where

State 622:
## Known stack suffix:
## REWRITERULE identifier_op COLON
## LR(1) items:
rule -> REWRITERULE identifier_op COLON . identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier . L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On L_PAREN shift to state 624
## Reductions:

State 624:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN . jargument_list R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument_list_ne shift to state 193
-- On jargument_list shift to state 625
-- On jargument shift to state 196
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_PAREN reduce production jargument_list ->

State 625:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN jargument_list
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list . R_PAREN EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On R_PAREN shift to state 626
## Reductions:

State 626:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN . EQUALS jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On EQUALS shift to state 627
## Reductions:

State 627:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS . jargument ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 169
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 177
-- On jargument shift to state 628
-- On identifier shift to state 191
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:

State 628:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument . ifclause without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On IF shift to state 615
-- On ifclause shift to state 629
## Reductions:
-- On WITHOUT reduce production ifclause ->
-- On WHERE reduce production ifclause ->
-- On RULE reduce production ifclause ->
-- On REWRITERULE reduce production ifclause ->
-- On IMPORT reduce production ifclause ->
-- On EQUIV reduce production ifclause ->
-- On EOF reduce production ifclause ->
-- On CONSTRUCTOR reduce production ifclause ->
-- On ABSRULE reduce production ifclause ->

State 629:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause . without_simp where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WITHOUT shift to state 618
-- On without_simp shift to state 630
## Reductions:
-- On WHERE reduce production without_simp ->
-- On RULE reduce production without_simp ->
-- On REWRITERULE reduce production without_simp ->
-- On IMPORT reduce production without_simp ->
-- On EQUIV reduce production without_simp ->
-- On EOF reduce production without_simp ->
-- On CONSTRUCTOR reduce production without_simp ->
-- On ABSRULE reduce production without_simp ->

State 630:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp . where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WHERE shift to state 581
-- On where shift to state 631
## Reductions:
-- On RULE reduce production where ->
-- On REWRITERULE reduce production where ->
-- On IMPORT reduce production where ->
-- On EQUIV reduce production where ->
-- On EOF reduce production where ->
-- On CONSTRUCTOR reduce production where ->
-- On ABSRULE reduce production where ->

State 631:
## Known stack suffix:
## REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where
## LR(1) items:
rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> REWRITERULE identifier_op COLON identifier L_PAREN jargument_list R_PAREN EQUALS jargument ifclause without_simp where

State 632:
## Known stack suffix:
## IMPORT
## LR(1) items:
rule -> IMPORT . STRING_CONSTANT SEMICOLON [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On STRING_CONSTANT shift to state 633
## Reductions:

State 633:
## Known stack suffix:
## IMPORT STRING_CONSTANT
## LR(1) items:
rule -> IMPORT STRING_CONSTANT . SEMICOLON [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On SEMICOLON shift to state 634
## Reductions:

State 634:
## Known stack suffix:
## IMPORT STRING_CONSTANT SEMICOLON
## LR(1) items:
rule -> IMPORT STRING_CONSTANT SEMICOLON . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> IMPORT STRING_CONSTANT SEMICOLON

State 635:
## Known stack suffix:
## EQUIV
## LR(1) items:
equiv_rule -> EQUIV . identifier_op COLON formula WAND formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV . identifier_op COLON formula IMP formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV . identifier_op COLON formula IMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV . identifier_op COLON formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier_op shift to state 636
-- On identifier shift to state 604
## Reductions:
-- On COLON reduce production identifier_op ->

State 636:
## Known stack suffix:
## EQUIV identifier_op
## LR(1) items:
equiv_rule -> EQUIV identifier_op . COLON formula WAND formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op . COLON formula IMP formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op . COLON formula IMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op . COLON formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On COLON shift to state 637
## Reductions:

State 637:
## Known stack suffix:
## EQUIV identifier_op COLON
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON . formula WAND formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON . formula IMP formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON . formula IMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON . formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 638
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WAND reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMP reduce production formula ->
-- On BIMP reduce production formula ->

State 638:
## Known stack suffix:
## EQUIV identifier_op COLON formula
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula . WAND formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON formula . IMP formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON formula . IMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON formula . BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . MULT formula [ WAND OROR OR MULT IMP BIMP ]
formula -> formula . OR formula [ WAND OROR OR MULT IMP BIMP ]
formula -> formula . OROR formula [ WAND OROR OR MULT IMP BIMP ]
## Transitions:
-- On WAND shift to state 639
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On IMP shift to state 644
-- On BIMP shift to state 650
## Reductions:

State 639:
## Known stack suffix:
## EQUIV identifier_op COLON formula WAND
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula WAND . formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 640
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On BIMP reduce production formula ->

State 640:
## Known stack suffix:
## EQUIV identifier_op COLON formula WAND formula
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula WAND formula . BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . MULT formula [ OROR OR MULT BIMP ]
formula -> formula . OR formula [ OROR OR MULT BIMP ]
formula -> formula . OROR formula [ OROR OR MULT BIMP ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On BIMP shift to state 641
## Reductions:

State 641:
## Known stack suffix:
## EQUIV identifier_op COLON formula WAND formula BIMP
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula WAND formula BIMP . formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 642
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 642:
## Known stack suffix:
## EQUIV identifier_op COLON formula WAND formula BIMP formula
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula WAND formula BIMP formula . without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . MULT formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WITHOUT shift to state 618
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On without_simp shift to state 643
## Reductions:
-- On RULE reduce production without_simp ->
-- On REWRITERULE reduce production without_simp ->
-- On IMPORT reduce production without_simp ->
-- On EQUIV reduce production without_simp ->
-- On EOF reduce production without_simp ->
-- On CONSTRUCTOR reduce production without_simp ->
-- On ABSRULE reduce production without_simp ->

State 643:
## Known stack suffix:
## EQUIV identifier_op COLON formula WAND formula BIMP formula without_simp
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula WAND formula BIMP formula without_simp . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equiv_rule -> EQUIV identifier_op COLON formula WAND formula BIMP formula without_simp

State 644:
## Known stack suffix:
## EQUIV identifier_op COLON formula IMP
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula IMP . formula BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON formula IMP . formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 645
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On BIMP reduce production formula ->
-- On ABSRULE reduce production formula ->

State 645:
## Known stack suffix:
## EQUIV identifier_op COLON formula IMP formula
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula IMP formula . BIMP formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
equiv_rule -> EQUIV identifier_op COLON formula IMP formula . without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . MULT formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR BIMP ABSRULE ]
formula -> formula . OROR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR BIMP ABSRULE ]
## Transitions:
-- On WITHOUT shift to state 618
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On BIMP shift to state 646
-- On without_simp shift to state 649
## Reductions:
-- On RULE reduce production without_simp ->
-- On REWRITERULE reduce production without_simp ->
-- On IMPORT reduce production without_simp ->
-- On EQUIV reduce production without_simp ->
-- On EOF reduce production without_simp ->
-- On CONSTRUCTOR reduce production without_simp ->
-- On ABSRULE reduce production without_simp ->

State 646:
## Known stack suffix:
## EQUIV identifier_op COLON formula IMP formula BIMP
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula IMP formula BIMP . formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 647
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 647:
## Known stack suffix:
## EQUIV identifier_op COLON formula IMP formula BIMP formula
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula IMP formula BIMP formula . without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . MULT formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WITHOUT shift to state 618
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On without_simp shift to state 648
## Reductions:
-- On RULE reduce production without_simp ->
-- On REWRITERULE reduce production without_simp ->
-- On IMPORT reduce production without_simp ->
-- On EQUIV reduce production without_simp ->
-- On EOF reduce production without_simp ->
-- On CONSTRUCTOR reduce production without_simp ->
-- On ABSRULE reduce production without_simp ->

State 648:
## Known stack suffix:
## EQUIV identifier_op COLON formula IMP formula BIMP formula without_simp
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula IMP formula BIMP formula without_simp . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equiv_rule -> EQUIV identifier_op COLON formula IMP formula BIMP formula without_simp

State 649:
## Known stack suffix:
## EQUIV identifier_op COLON formula IMP formula without_simp
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula IMP formula without_simp . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equiv_rule -> EQUIV identifier_op COLON formula IMP formula without_simp

State 650:
## Known stack suffix:
## EQUIV identifier_op COLON formula BIMP
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula BIMP . formula without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 651
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WITHOUT reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 651:
## Known stack suffix:
## EQUIV identifier_op COLON formula BIMP formula
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula BIMP formula . without_simp [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . MULT formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WITHOUT RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WITHOUT shift to state 618
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On without_simp shift to state 652
## Reductions:
-- On RULE reduce production without_simp ->
-- On REWRITERULE reduce production without_simp ->
-- On IMPORT reduce production without_simp ->
-- On EQUIV reduce production without_simp ->
-- On EOF reduce production without_simp ->
-- On CONSTRUCTOR reduce production without_simp ->
-- On ABSRULE reduce production without_simp ->

State 652:
## Known stack suffix:
## EQUIV identifier_op COLON formula BIMP formula without_simp
## LR(1) items:
equiv_rule -> EQUIV identifier_op COLON formula BIMP formula without_simp . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equiv_rule -> EQUIV identifier_op COLON formula BIMP formula without_simp

State 653:
## Known stack suffix:
## EOF
## LR(1) items:
rule_file -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production rule_file -> EOF

State 654:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
rule -> CONSTRUCTOR . identifier [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 655
## Reductions:

State 655:
## Known stack suffix:
## CONSTRUCTOR identifier
## LR(1) items:
rule -> CONSTRUCTOR identifier . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> CONSTRUCTOR identifier

State 656:
## Known stack suffix:
## ABSRULE
## LR(1) items:
rule -> ABSRULE . identifier_op COLON formula LEADSTO formula where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier_op shift to state 657
-- On identifier shift to state 604
## Reductions:
-- On COLON reduce production identifier_op ->

State 657:
## Known stack suffix:
## ABSRULE identifier_op
## LR(1) items:
rule -> ABSRULE identifier_op . COLON formula LEADSTO formula where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On COLON shift to state 658
## Reductions:

State 658:
## Known stack suffix:
## ABSRULE identifier_op COLON
## LR(1) items:
rule -> ABSRULE identifier_op COLON . formula LEADSTO formula where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 659
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On LEADSTO reduce production formula ->

State 659:
## Known stack suffix:
## ABSRULE identifier_op COLON formula
## LR(1) items:
formula -> formula . MULT formula [ OROR OR MULT LEADSTO ]
formula -> formula . OR formula [ OROR OR MULT LEADSTO ]
formula -> formula . OROR formula [ OROR OR MULT LEADSTO ]
rule -> ABSRULE identifier_op COLON formula . LEADSTO formula where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On LEADSTO shift to state 660
## Reductions:

State 660:
## Known stack suffix:
## ABSRULE identifier_op COLON formula LEADSTO
## LR(1) items:
rule -> ABSRULE identifier_op COLON formula LEADSTO . formula where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 661
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On WHERE reduce production formula ->
-- On RULE reduce production formula ->
-- On REWRITERULE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMPORT reduce production formula ->
-- On EQUIV reduce production formula ->
-- On EOF reduce production formula ->
-- On CONSTRUCTOR reduce production formula ->
-- On ABSRULE reduce production formula ->

State 661:
## Known stack suffix:
## ABSRULE identifier_op COLON formula LEADSTO formula
## LR(1) items:
formula -> formula . MULT formula [ WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OR formula [ WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
formula -> formula . OROR formula [ WHERE RULE REWRITERULE OROR OR MULT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
rule -> ABSRULE identifier_op COLON formula LEADSTO formula . where [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
-- On WHERE shift to state 581
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On where shift to state 662
## Reductions:
-- On RULE reduce production where ->
-- On REWRITERULE reduce production where ->
-- On IMPORT reduce production where ->
-- On EQUIV reduce production where ->
-- On EOF reduce production where ->
-- On CONSTRUCTOR reduce production where ->
-- On ABSRULE reduce production where ->

State 662:
## Known stack suffix:
## ABSRULE identifier_op COLON formula LEADSTO formula where
## LR(1) items:
rule -> ABSRULE identifier_op COLON formula LEADSTO formula where . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> ABSRULE identifier_op COLON formula LEADSTO formula where

State 663:
## Known stack suffix:
## rule_file
## LR(1) items:
rule_file' -> rule_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept rule_file

State 664:
## Known stack suffix:
## rule
## LR(1) items:
rule_file -> rule . rule_file [ # ]
## Transitions:
-- On RULE shift to state 544
-- On REWRITERULE shift to state 605
-- On IMPORT shift to state 632
-- On EQUIV shift to state 635
-- On EOF shift to state 653
-- On CONSTRUCTOR shift to state 654
-- On ABSRULE shift to state 656
-- On rule_file shift to state 665
-- On rule shift to state 664
-- On equiv_rule shift to state 666
## Reductions:

State 665:
## Known stack suffix:
## rule rule_file
## LR(1) items:
rule_file -> rule rule_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production rule_file -> rule rule_file

State 666:
## Known stack suffix:
## equiv_rule
## LR(1) items:
rule -> equiv_rule . [ RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> equiv_rule

State 667:
## Known stack suffix:
##
## LR(1) items:
spec' -> . spec [ # ]
## Transitions:
-- On L_BRACE shift to state 668
-- On spec shift to state 681
## Reductions:

State 668:
## Known stack suffix:
## L_BRACE
## LR(1) items:
spec -> L_BRACE . formula R_BRACE L_BRACE formula R_BRACE exp_posts [ # ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 669
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_BRACE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 669:
## Known stack suffix:
## L_BRACE formula
## LR(1) items:
formula -> formula . MULT formula [ R_BRACE OROR OR MULT ]
formula -> formula . OR formula [ R_BRACE OROR OR MULT ]
formula -> formula . OROR formula [ R_BRACE OROR OR MULT ]
spec -> L_BRACE formula . R_BRACE L_BRACE formula R_BRACE exp_posts [ # ]
## Transitions:
-- On R_BRACE shift to state 670
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 670:
## Known stack suffix:
## L_BRACE formula R_BRACE
## LR(1) items:
spec -> L_BRACE formula R_BRACE . L_BRACE formula R_BRACE exp_posts [ # ]
## Transitions:
-- On L_BRACE shift to state 671
## Reductions:

State 671:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE
## LR(1) items:
spec -> L_BRACE formula R_BRACE L_BRACE . formula R_BRACE exp_posts [ # ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 672
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_BRACE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 672:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE formula
## LR(1) items:
formula -> formula . MULT formula [ R_BRACE OROR OR MULT ]
formula -> formula . OR formula [ R_BRACE OROR OR MULT ]
formula -> formula . OROR formula [ R_BRACE OROR OR MULT ]
spec -> L_BRACE formula R_BRACE L_BRACE formula . R_BRACE exp_posts [ # ]
## Transitions:
-- On R_BRACE shift to state 673
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 673:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE formula R_BRACE
## LR(1) items:
spec -> L_BRACE formula R_BRACE L_BRACE formula R_BRACE . exp_posts [ # ]
## Transitions:
-- On L_BRACE shift to state 674
-- On exp_posts shift to state 680
## Reductions:

State 674:
## Known stack suffix:
## L_BRACE
## LR(1) items:
exp_posts -> L_BRACE . identifier COLON formula R_BRACE exp_posts [ # ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 675
## Reductions:

State 675:
## Known stack suffix:
## L_BRACE identifier
## LR(1) items:
exp_posts -> L_BRACE identifier . COLON formula R_BRACE exp_posts [ # ]
## Transitions:
-- On COLON shift to state 676
## Reductions:

State 676:
## Known stack suffix:
## L_BRACE identifier COLON
## LR(1) items:
exp_posts -> L_BRACE identifier COLON . formula R_BRACE exp_posts [ # ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 677
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On R_BRACE reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 677:
## Known stack suffix:
## L_BRACE identifier COLON formula
## LR(1) items:
exp_posts -> L_BRACE identifier COLON formula . R_BRACE exp_posts [ # ]
formula -> formula . MULT formula [ R_BRACE OROR OR MULT ]
formula -> formula . OR formula [ R_BRACE OROR OR MULT ]
formula -> formula . OROR formula [ R_BRACE OROR OR MULT ]
## Transitions:
-- On R_BRACE shift to state 678
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 678:
## Known stack suffix:
## L_BRACE identifier COLON formula R_BRACE
## LR(1) items:
exp_posts -> L_BRACE identifier COLON formula R_BRACE . exp_posts [ # ]
## Transitions:
-- On L_BRACE shift to state 674
-- On exp_posts shift to state 679
## Reductions:

State 679:
## Known stack suffix:
## L_BRACE identifier COLON formula R_BRACE exp_posts
## LR(1) items:
exp_posts -> L_BRACE identifier COLON formula R_BRACE exp_posts . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production exp_posts -> L_BRACE identifier COLON formula R_BRACE exp_posts

State 680:
## Known stack suffix:
## L_BRACE formula R_BRACE L_BRACE formula R_BRACE exp_posts
## LR(1) items:
spec -> L_BRACE formula R_BRACE L_BRACE formula R_BRACE exp_posts . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production spec -> L_BRACE formula R_BRACE L_BRACE formula R_BRACE exp_posts

State 681:
## Known stack suffix:
## spec
## LR(1) items:
spec' -> spec . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept spec

State 682:
## Known stack suffix:
##
## LR(1) items:
spec_file' -> . spec_file [ # ]
## Transitions:
-- On INTERFACE shift to state 15
-- On IMPORT shift to state 683
-- On EOF shift to state 686
-- On CLASS shift to state 16
-- On spec_file shift to state 793
-- On file_type shift to state 688
-- On classspec shift to state 791
## Reductions:

State 683:
## Known stack suffix:
## IMPORT
## LR(1) items:
spec_file -> IMPORT . STRING_CONSTANT SEMICOLON spec_file [ # ]
## Transitions:
-- On STRING_CONSTANT shift to state 684
## Reductions:

State 684:
## Known stack suffix:
## IMPORT STRING_CONSTANT
## LR(1) items:
spec_file -> IMPORT STRING_CONSTANT . SEMICOLON spec_file [ # ]
## Transitions:
-- On SEMICOLON shift to state 685
## Reductions:

State 685:
## Known stack suffix:
## IMPORT STRING_CONSTANT SEMICOLON
## LR(1) items:
spec_file -> IMPORT STRING_CONSTANT SEMICOLON . spec_file [ # ]
## Transitions:
-- On INTERFACE shift to state 15
-- On IMPORT shift to state 683
-- On EOF shift to state 686
-- On CLASS shift to state 16
-- On spec_file shift to state 687
-- On file_type shift to state 688
-- On classspec shift to state 791
## Reductions:

State 686:
## Known stack suffix:
## EOF
## LR(1) items:
spec_file -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production spec_file -> EOF

State 687:
## Known stack suffix:
## IMPORT STRING_CONSTANT SEMICOLON spec_file
## LR(1) items:
spec_file -> IMPORT STRING_CONSTANT SEMICOLON spec_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production spec_file -> IMPORT STRING_CONSTANT SEMICOLON spec_file

State 688:
## Known stack suffix:
## file_type
## LR(1) items:
classspec -> file_type . class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 25
-- On identifier shift to state 26
-- On full_identifier shift to state 27
-- On class_name shift to state 689
## Reductions:

State 689:
## Known stack suffix:
## file_type class_name
## LR(1) items:
classspec -> file_type class_name . extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On EXTENDS shift to state 29
-- On extends_clause shift to state 690
## Reductions:
-- On L_BRACE reduce production extends_clause ->
-- On IMPLEMENTS reduce production extends_clause ->

State 690:
## Known stack suffix:
## file_type class_name extends_clause
## LR(1) items:
classspec -> file_type class_name extends_clause . implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On IMPLEMENTS shift to state 35
-- On implements_clause shift to state 691
## Reductions:
-- On L_BRACE reduce production implements_clause ->

State 691:
## Known stack suffix:
## file_type class_name extends_clause implements_clause
## LR(1) items:
classspec -> file_type class_name extends_clause implements_clause . L_BRACE apf_defines exports_clause axioms_clause methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On L_BRACE shift to state 692
## Reductions:

State 692:
## Known stack suffix:
## file_type class_name extends_clause implements_clause L_BRACE
## LR(1) items:
classspec -> file_type class_name extends_clause implements_clause L_BRACE . apf_defines exports_clause axioms_clause methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On EXPORT shift to state 693
-- On DEFINE shift to state 714
-- On apf_defines shift to state 723
-- On apf_define shift to state 789
## Reductions:
-- On VOLATILE reduce production apf_defines ->
-- On VOID reduce production apf_defines ->
-- On TRUE reduce production apf_defines ->
-- On TRANSIENT reduce production apf_defines ->
-- On SYNCHRONIZED reduce production apf_defines ->
-- On STRICTFP reduce production apf_defines ->
-- On STATIC reduce production apf_defines ->
-- On SHORT reduce production apf_defines ->
-- On R_BRACE reduce production apf_defines ->
-- On QUOTED_NAME reduce production apf_defines ->
-- On PUBLIC reduce production apf_defines ->
-- On PROTECTED reduce production apf_defines ->
-- On PRIVATE reduce production apf_defines ->
-- On NULL reduce production apf_defines ->
-- On NATIVE reduce production apf_defines ->
-- On LONG reduce production apf_defines ->
-- On INT reduce production apf_defines ->
-- On IDENTIFIER reduce production apf_defines ->
-- On FULL_IDENTIFIER reduce production apf_defines ->
-- On FLOAT reduce production apf_defines ->
-- On FINAL reduce production apf_defines ->
-- On FALSE reduce production apf_defines ->
-- On EXPORTS reduce production apf_defines ->
-- On ENUM reduce production apf_defines ->
-- On EMP reduce production apf_defines ->
-- On DOUBLE reduce production apf_defines ->
-- On CHAR reduce production apf_defines ->
-- On BYTE reduce production apf_defines ->
-- On BOOLEAN reduce production apf_defines ->
-- On AXIOMS reduce production apf_defines ->
-- On AS reduce production apf_defines ->
-- On ANNOTATION reduce production apf_defines ->
-- On ABSTRACT reduce production apf_defines ->

State 693:
## Known stack suffix:
## EXPORT
## LR(1) items:
apf_define -> EXPORT . identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## EXPORT identifier
## LR(1) items:
apf_define -> EXPORT identifier . L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_PAREN shift to state 695
## Reductions:

State 695:
## Known stack suffix:
## EXPORT identifier L_PAREN
## LR(1) items:
apf_define -> EXPORT identifier L_PAREN . lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On QUESTIONMARK shift to state 153
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 696
-- On identifier shift to state 268
-- On at_identifier shift to state 200
## Reductions:

State 696:
## Known stack suffix:
## EXPORT identifier L_PAREN lvariable
## LR(1) items:
apf_define -> EXPORT identifier L_PAREN lvariable . paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COMMA shift to state 697
-- On paramlist_question_mark shift to state 707
## Reductions:
-- On R_PAREN reduce production paramlist_question_mark ->

State 697:
## Known stack suffix:
## COMMA
## LR(1) items:
paramlist_question_mark -> COMMA . L_BRACE paramlist R_BRACE [ R_PAREN ]
paramlist_question_mark -> COMMA . paramlist [ R_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On L_BRACE shift to state 698
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On paramlist shift to state 706
-- On identifier shift to state 701
## Reductions:
-- On R_PAREN reduce production paramlist ->

State 698:
## Known stack suffix:
## COMMA L_BRACE
## LR(1) items:
paramlist_question_mark -> COMMA L_BRACE . paramlist R_BRACE [ R_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On paramlist shift to state 699
-- On identifier shift to state 701
## Reductions:
-- On R_BRACE reduce production paramlist ->

State 699:
## Known stack suffix:
## COMMA L_BRACE paramlist
## LR(1) items:
paramlist_question_mark -> COMMA L_BRACE paramlist . R_BRACE [ R_PAREN ]
## Transitions:
-- On R_BRACE shift to state 700
## Reductions:

State 700:
## Known stack suffix:
## COMMA L_BRACE paramlist R_BRACE
## LR(1) items:
paramlist_question_mark -> COMMA L_BRACE paramlist R_BRACE . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paramlist_question_mark -> COMMA L_BRACE paramlist R_BRACE

State 701:
## Known stack suffix:
## identifier
## LR(1) items:
paramlist -> identifier . EQUALS lvariable [ R_PAREN R_BRACE ]
paramlist -> identifier . EQUALS lvariable SEMICOLON fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On EQUALS shift to state 702
## Reductions:

State 702:
## Known stack suffix:
## identifier EQUALS
## LR(1) items:
paramlist -> identifier EQUALS . lvariable [ R_PAREN R_BRACE ]
paramlist -> identifier EQUALS . lvariable SEMICOLON fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On QUESTIONMARK shift to state 153
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 703
-- On identifier shift to state 268
-- On at_identifier shift to state 200
## Reductions:

State 703:
## Known stack suffix:
## identifier EQUALS lvariable
## LR(1) items:
paramlist -> identifier EQUALS lvariable . [ R_PAREN R_BRACE ]
paramlist -> identifier EQUALS lvariable . SEMICOLON fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On SEMICOLON shift to state 704
## Reductions:
-- On R_PAREN reduce production paramlist -> identifier EQUALS lvariable
-- On R_BRACE reduce production paramlist -> identifier EQUALS lvariable

State 704:
## Known stack suffix:
## identifier EQUALS lvariable SEMICOLON
## LR(1) items:
paramlist -> identifier EQUALS lvariable SEMICOLON . fldlist [ R_PAREN R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 167
-- On fldlist shift to state 705
## Reductions:
-- On R_PAREN reduce production fldlist ->
-- On R_BRACE reduce production fldlist ->

State 705:
## Known stack suffix:
## identifier EQUALS lvariable SEMICOLON fldlist
## LR(1) items:
paramlist -> identifier EQUALS lvariable SEMICOLON fldlist . [ R_PAREN R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paramlist -> identifier EQUALS lvariable SEMICOLON fldlist

State 706:
## Known stack suffix:
## COMMA paramlist
## LR(1) items:
paramlist_question_mark -> COMMA paramlist . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production paramlist_question_mark -> COMMA paramlist

State 707:
## Known stack suffix:
## EXPORT identifier L_PAREN lvariable paramlist_question_mark
## LR(1) items:
apf_define -> EXPORT identifier L_PAREN lvariable paramlist_question_mark . R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On R_PAREN shift to state 708
## Reductions:

State 708:
## Known stack suffix:
## EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN
## LR(1) items:
apf_define -> EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN . eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 709
-- On AS shift to state 710
-- On eq_as shift to state 711
## Reductions:

State 709:
## Known stack suffix:
## EQUALS
## LR(1) items:
eq_as -> EQUALS . [ TRUE STRING_CONSTANT SEMICOLON RETURN QUESTIONMARK OROR OR MULT MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT BANG AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production eq_as -> EQUALS

State 710:
## Known stack suffix:
## AS
## LR(1) items:
eq_as -> AS . [ TRUE STRING_CONSTANT SEMICOLON RETURN QUESTIONMARK OROR OR MULT MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT BANG AT_IDENTIFIER AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production eq_as -> AS

State 711:
## Known stack suffix:
## EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as
## LR(1) items:
apf_define -> EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as . formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 712
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On SEMICOLON reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 712:
## Known stack suffix:
## EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula
## LR(1) items:
apf_define -> EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula . SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
formula -> formula . MULT formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OR formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OROR formula [ SEMICOLON OROR OR MULT ]
## Transitions:
-- On SEMICOLON shift to state 713
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 713:
## Known stack suffix:
## EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON
## LR(1) items:
apf_define -> EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apf_define -> EXPORT identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON

State 714:
## Known stack suffix:
## DEFINE
## LR(1) items:
apf_define -> DEFINE . identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 715
## Reductions:

State 715:
## Known stack suffix:
## DEFINE identifier
## LR(1) items:
apf_define -> DEFINE identifier . L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_PAREN shift to state 716
## Reductions:

State 716:
## Known stack suffix:
## DEFINE identifier L_PAREN
## LR(1) items:
apf_define -> DEFINE identifier L_PAREN . lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On QUESTIONMARK shift to state 153
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 717
-- On identifier shift to state 268
-- On at_identifier shift to state 200
## Reductions:

State 717:
## Known stack suffix:
## DEFINE identifier L_PAREN lvariable
## LR(1) items:
apf_define -> DEFINE identifier L_PAREN lvariable . paramlist_question_mark R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COMMA shift to state 697
-- On paramlist_question_mark shift to state 718
## Reductions:
-- On R_PAREN reduce production paramlist_question_mark ->

State 718:
## Known stack suffix:
## DEFINE identifier L_PAREN lvariable paramlist_question_mark
## LR(1) items:
apf_define -> DEFINE identifier L_PAREN lvariable paramlist_question_mark . R_PAREN eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On R_PAREN shift to state 719
## Reductions:

State 719:
## Known stack suffix:
## DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN
## LR(1) items:
apf_define -> DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN . eq_as formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On EQUALS shift to state 709
-- On AS shift to state 710
-- On eq_as shift to state 720
## Reductions:

State 720:
## Known stack suffix:
## DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as
## LR(1) items:
apf_define -> DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as . formula SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 721
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On SEMICOLON reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 721:
## Known stack suffix:
## DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula
## LR(1) items:
apf_define -> DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula . SEMICOLON [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
formula -> formula . MULT formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OR formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OROR formula [ SEMICOLON OROR OR MULT ]
## Transitions:
-- On SEMICOLON shift to state 722
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 722:
## Known stack suffix:
## DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON
## LR(1) items:
apf_define -> DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apf_define -> DEFINE identifier L_PAREN lvariable paramlist_question_mark R_PAREN eq_as formula SEMICOLON

State 723:
## Known stack suffix:
## file_type class_name extends_clause implements_clause L_BRACE apf_defines
## LR(1) items:
classspec -> file_type class_name extends_clause implements_clause L_BRACE apf_defines . exports_clause axioms_clause methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On EXPORTS shift to state 724
-- On exports_clause shift to state 752
## Reductions:
-- On VOLATILE reduce production exports_clause ->
-- On VOID reduce production exports_clause ->
-- On TRUE reduce production exports_clause ->
-- On TRANSIENT reduce production exports_clause ->
-- On SYNCHRONIZED reduce production exports_clause ->
-- On STRICTFP reduce production exports_clause ->
-- On STATIC reduce production exports_clause ->
-- On SHORT reduce production exports_clause ->
-- On R_BRACE reduce production exports_clause ->
-- On QUOTED_NAME reduce production exports_clause ->
-- On PUBLIC reduce production exports_clause ->
-- On PROTECTED reduce production exports_clause ->
-- On PRIVATE reduce production exports_clause ->
-- On NULL reduce production exports_clause ->
-- On NATIVE reduce production exports_clause ->
-- On LONG reduce production exports_clause ->
-- On INT reduce production exports_clause ->
-- On IDENTIFIER reduce production exports_clause ->
-- On FULL_IDENTIFIER reduce production exports_clause ->
-- On FLOAT reduce production exports_clause ->
-- On FINAL reduce production exports_clause ->
-- On FALSE reduce production exports_clause ->
-- On ENUM reduce production exports_clause ->
-- On EMP reduce production exports_clause ->
-- On DOUBLE reduce production exports_clause ->
-- On CHAR reduce production exports_clause ->
-- On BYTE reduce production exports_clause ->
-- On BOOLEAN reduce production exports_clause ->
-- On AXIOMS reduce production exports_clause ->
-- On AS reduce production exports_clause ->
-- On ANNOTATION reduce production exports_clause ->
-- On ABSTRACT reduce production exports_clause ->

State 724:
## Known stack suffix:
## EXPORTS
## LR(1) items:
exports_clause -> EXPORTS . L_BRACE named_implication_star R_BRACE WHERE L_BRACE exportLocal_predicate_def_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 725
## Reductions:

State 725:
## Known stack suffix:
## EXPORTS L_BRACE
## LR(1) items:
exports_clause -> EXPORTS L_BRACE . named_implication_star R_BRACE WHERE L_BRACE exportLocal_predicate_def_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On named_implication_star shift to state 726
-- On named_implication shift to state 741
-- On identifier shift to state 743
## Reductions:
-- On R_BRACE reduce production named_implication_star ->

State 726:
## Known stack suffix:
## EXPORTS L_BRACE named_implication_star
## LR(1) items:
exports_clause -> EXPORTS L_BRACE named_implication_star . R_BRACE WHERE L_BRACE exportLocal_predicate_def_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On R_BRACE shift to state 727
## Reductions:

State 727:
## Known stack suffix:
## EXPORTS L_BRACE named_implication_star R_BRACE
## LR(1) items:
exports_clause -> EXPORTS L_BRACE named_implication_star R_BRACE . WHERE L_BRACE exportLocal_predicate_def_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On WHERE shift to state 728
## Reductions:

State 728:
## Known stack suffix:
## EXPORTS L_BRACE named_implication_star R_BRACE WHERE
## LR(1) items:
exports_clause -> EXPORTS L_BRACE named_implication_star R_BRACE WHERE . L_BRACE exportLocal_predicate_def_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 729
## Reductions:

State 729:
## Known stack suffix:
## EXPORTS L_BRACE named_implication_star R_BRACE WHERE L_BRACE
## LR(1) items:
exports_clause -> EXPORTS L_BRACE named_implication_star R_BRACE WHERE L_BRACE . exportLocal_predicate_def_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 730
-- On exportLocal_predicate_def_star shift to state 737
-- On exportLocal_predicate_def shift to state 739
## Reductions:
-- On R_BRACE reduce production exportLocal_predicate_def_star ->

State 730:
## Known stack suffix:
## identifier
## LR(1) items:
exportLocal_predicate_def -> identifier . L_PAREN lvariable_list_ne R_PAREN eq_as formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On L_PAREN shift to state 731
## Reductions:

State 731:
## Known stack suffix:
## identifier L_PAREN
## LR(1) items:
exportLocal_predicate_def -> identifier L_PAREN . lvariable_list_ne R_PAREN eq_as formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On TRUE shift to state 18
-- On QUESTIONMARK shift to state 153
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_list_ne shift to state 732
-- On lvariable shift to state 265
-- On identifier shift to state 268
-- On at_identifier shift to state 200
## Reductions:

State 732:
## Known stack suffix:
## identifier L_PAREN lvariable_list_ne
## LR(1) items:
exportLocal_predicate_def -> identifier L_PAREN lvariable_list_ne . R_PAREN eq_as formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On R_PAREN shift to state 733
## Reductions:

State 733:
## Known stack suffix:
## identifier L_PAREN lvariable_list_ne R_PAREN
## LR(1) items:
exportLocal_predicate_def -> identifier L_PAREN lvariable_list_ne R_PAREN . eq_as formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On EQUALS shift to state 709
-- On AS shift to state 710
-- On eq_as shift to state 734
## Reductions:

State 734:
## Known stack suffix:
## identifier L_PAREN lvariable_list_ne R_PAREN eq_as
## LR(1) items:
exportLocal_predicate_def -> identifier L_PAREN lvariable_list_ne R_PAREN eq_as . formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 735
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On SEMICOLON reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 735:
## Known stack suffix:
## identifier L_PAREN lvariable_list_ne R_PAREN eq_as formula
## LR(1) items:
exportLocal_predicate_def -> identifier L_PAREN lvariable_list_ne R_PAREN eq_as formula . SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
formula -> formula . MULT formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OR formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OROR formula [ SEMICOLON OROR OR MULT ]
## Transitions:
-- On SEMICOLON shift to state 736
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 736:
## Known stack suffix:
## identifier L_PAREN lvariable_list_ne R_PAREN eq_as formula SEMICOLON
## LR(1) items:
exportLocal_predicate_def -> identifier L_PAREN lvariable_list_ne R_PAREN eq_as formula SEMICOLON . [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exportLocal_predicate_def -> identifier L_PAREN lvariable_list_ne R_PAREN eq_as formula SEMICOLON

State 737:
## Known stack suffix:
## EXPORTS L_BRACE named_implication_star R_BRACE WHERE L_BRACE exportLocal_predicate_def_star
## LR(1) items:
exports_clause -> EXPORTS L_BRACE named_implication_star R_BRACE WHERE L_BRACE exportLocal_predicate_def_star . R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On R_BRACE shift to state 738
## Reductions:

State 738:
## Known stack suffix:
## EXPORTS L_BRACE named_implication_star R_BRACE WHERE L_BRACE exportLocal_predicate_def_star R_BRACE
## LR(1) items:
exports_clause -> EXPORTS L_BRACE named_implication_star R_BRACE WHERE L_BRACE exportLocal_predicate_def_star R_BRACE . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exports_clause -> EXPORTS L_BRACE named_implication_star R_BRACE WHERE L_BRACE exportLocal_predicate_def_star R_BRACE

State 739:
## Known stack suffix:
## exportLocal_predicate_def
## LR(1) items:
exportLocal_predicate_def_star -> exportLocal_predicate_def . exportLocal_predicate_def_star [ R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 730
-- On exportLocal_predicate_def_star shift to state 740
-- On exportLocal_predicate_def shift to state 739
## Reductions:
-- On R_BRACE reduce production exportLocal_predicate_def_star ->

State 740:
## Known stack suffix:
## exportLocal_predicate_def exportLocal_predicate_def_star
## LR(1) items:
exportLocal_predicate_def_star -> exportLocal_predicate_def exportLocal_predicate_def_star . [ R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exportLocal_predicate_def_star -> exportLocal_predicate_def exportLocal_predicate_def_star

State 741:
## Known stack suffix:
## named_implication
## LR(1) items:
named_implication_star -> named_implication . named_implication_star [ R_BRACE ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On named_implication_star shift to state 742
-- On named_implication shift to state 741
-- On identifier shift to state 743
## Reductions:
-- On R_BRACE reduce production named_implication_star ->

State 742:
## Known stack suffix:
## named_implication named_implication_star
## LR(1) items:
named_implication_star -> named_implication named_implication_star . [ R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_implication_star -> named_implication named_implication_star

State 743:
## Known stack suffix:
## identifier
## LR(1) items:
named_implication -> identifier . COLON formula IMP formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
named_implication -> identifier . COLON formula BIMP formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On COLON shift to state 744
## Reductions:

State 744:
## Known stack suffix:
## identifier COLON
## LR(1) items:
named_implication -> identifier COLON . formula IMP formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
named_implication -> identifier COLON . formula BIMP formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 745
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->
-- On IMP reduce production formula ->
-- On BIMP reduce production formula ->

State 745:
## Known stack suffix:
## identifier COLON formula
## LR(1) items:
formula -> formula . MULT formula [ OROR OR MULT IMP BIMP ]
formula -> formula . OR formula [ OROR OR MULT IMP BIMP ]
formula -> formula . OROR formula [ OROR OR MULT IMP BIMP ]
named_implication -> identifier COLON formula . IMP formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
named_implication -> identifier COLON formula . BIMP formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
-- On IMP shift to state 746
-- On BIMP shift to state 749
## Reductions:

State 746:
## Known stack suffix:
## identifier COLON formula IMP
## LR(1) items:
named_implication -> identifier COLON formula IMP . formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 747
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On SEMICOLON reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 747:
## Known stack suffix:
## identifier COLON formula IMP formula
## LR(1) items:
formula -> formula . MULT formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OR formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OROR formula [ SEMICOLON OROR OR MULT ]
named_implication -> identifier COLON formula IMP formula . SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On SEMICOLON shift to state 748
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 748:
## Known stack suffix:
## identifier COLON formula IMP formula SEMICOLON
## LR(1) items:
named_implication -> identifier COLON formula IMP formula SEMICOLON . [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_implication -> identifier COLON formula IMP formula SEMICOLON

State 749:
## Known stack suffix:
## identifier COLON formula BIMP
## LR(1) items:
named_implication -> identifier COLON formula BIMP . formula SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 161
-- On RETURN shift to state 162
-- On QUESTIONMARK shift to state 153
-- On MINUS shift to state 163
-- On L_PAREN shift to state 165
-- On L_BRACE shift to state 166
-- On INTEGER_CONSTANT shift to state 170
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 206
-- On EMP shift to state 207
-- On CMPLT shift to state 171
-- On BANG shift to state 208
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable shift to state 213
-- On jargument shift to state 245
-- On identifier shift to state 234
-- On full_identifier shift to state 238
-- On formula shift to state 750
-- On field_signature shift to state 199
-- On at_identifier shift to state 200
## Reductions:
-- On SEMICOLON reduce production formula ->
-- On OROR reduce production formula ->
-- On OR reduce production formula ->
-- On MULT reduce production formula ->

State 750:
## Known stack suffix:
## identifier COLON formula BIMP formula
## LR(1) items:
formula -> formula . MULT formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OR formula [ SEMICOLON OROR OR MULT ]
formula -> formula . OROR formula [ SEMICOLON OROR OR MULT ]
named_implication -> identifier COLON formula BIMP formula . SEMICOLON [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
-- On SEMICOLON shift to state 751
-- On OROR shift to state 244
-- On OR shift to state 249
-- On MULT shift to state 247
## Reductions:

State 751:
## Known stack suffix:
## identifier COLON formula BIMP formula SEMICOLON
## LR(1) items:
named_implication -> identifier COLON formula BIMP formula SEMICOLON . [ TRUE R_BRACE IDENTIFIER FALSE EMP AS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production named_implication -> identifier COLON formula BIMP formula SEMICOLON

State 752:
## Known stack suffix:
## file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause
## LR(1) items:
classspec -> file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause . axioms_clause methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On AXIOMS shift to state 753
-- On axioms_clause shift to state 757
## Reductions:
-- On VOLATILE reduce production axioms_clause ->
-- On VOID reduce production axioms_clause ->
-- On TRUE reduce production axioms_clause ->
-- On TRANSIENT reduce production axioms_clause ->
-- On SYNCHRONIZED reduce production axioms_clause ->
-- On STRICTFP reduce production axioms_clause ->
-- On STATIC reduce production axioms_clause ->
-- On SHORT reduce production axioms_clause ->
-- On R_BRACE reduce production axioms_clause ->
-- On QUOTED_NAME reduce production axioms_clause ->
-- On PUBLIC reduce production axioms_clause ->
-- On PROTECTED reduce production axioms_clause ->
-- On PRIVATE reduce production axioms_clause ->
-- On NULL reduce production axioms_clause ->
-- On NATIVE reduce production axioms_clause ->
-- On LONG reduce production axioms_clause ->
-- On INT reduce production axioms_clause ->
-- On IDENTIFIER reduce production axioms_clause ->
-- On FULL_IDENTIFIER reduce production axioms_clause ->
-- On FLOAT reduce production axioms_clause ->
-- On FINAL reduce production axioms_clause ->
-- On FALSE reduce production axioms_clause ->
-- On ENUM reduce production axioms_clause ->
-- On EMP reduce production axioms_clause ->
-- On DOUBLE reduce production axioms_clause ->
-- On CHAR reduce production axioms_clause ->
-- On BYTE reduce production axioms_clause ->
-- On BOOLEAN reduce production axioms_clause ->
-- On AS reduce production axioms_clause ->
-- On ANNOTATION reduce production axioms_clause ->
-- On ABSTRACT reduce production axioms_clause ->

State 753:
## Known stack suffix:
## AXIOMS
## LR(1) items:
axioms_clause -> AXIOMS . L_BRACE named_implication_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 754
## Reductions:

State 754:
## Known stack suffix:
## AXIOMS L_BRACE
## LR(1) items:
axioms_clause -> AXIOMS L_BRACE . named_implication_star R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On named_implication_star shift to state 755
-- On named_implication shift to state 741
-- On identifier shift to state 743
## Reductions:
-- On R_BRACE reduce production named_implication_star ->

State 755:
## Known stack suffix:
## AXIOMS L_BRACE named_implication_star
## LR(1) items:
axioms_clause -> AXIOMS L_BRACE named_implication_star . R_BRACE [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On R_BRACE shift to state 756
## Reductions:

State 756:
## Known stack suffix:
## AXIOMS L_BRACE named_implication_star R_BRACE
## LR(1) items:
axioms_clause -> AXIOMS L_BRACE named_implication_star R_BRACE . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production axioms_clause -> AXIOMS L_BRACE named_implication_star R_BRACE

State 757:
## Known stack suffix:
## file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause
## LR(1) items:
classspec -> file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause . methods_specs R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On VOLATILE shift to state 1
-- On TRANSIENT shift to state 2
-- On SYNCHRONIZED shift to state 3
-- On STRICTFP shift to state 4
-- On STATIC shift to state 5
-- On PUBLIC shift to state 6
-- On PROTECTED shift to state 7
-- On PRIVATE shift to state 8
-- On NATIVE shift to state 9
-- On FINAL shift to state 10
-- On ENUM shift to state 11
-- On ANNOTATION shift to state 12
-- On ABSTRACT shift to state 13
-- On modifier_list_star shift to state 758
-- On modifier shift to state 443
-- On methods_specs shift to state 770
-- On method_spec shift to state 772
-- On method_signature_short shift to state 774
## Reductions:
-- On VOID reduce production modifier_list_star ->
-- On TRUE reduce production modifier_list_star ->
-- On SHORT reduce production modifier_list_star ->
-- On R_BRACE reduce production methods_specs ->
-- On QUOTED_NAME reduce production modifier_list_star ->
-- On NULL reduce production modifier_list_star ->
-- On LONG reduce production modifier_list_star ->
-- On INT reduce production modifier_list_star ->
-- On IDENTIFIER reduce production modifier_list_star ->
-- On FULL_IDENTIFIER reduce production modifier_list_star ->
-- On FLOAT reduce production modifier_list_star ->
-- On FALSE reduce production modifier_list_star ->
-- On EMP reduce production modifier_list_star ->
-- On DOUBLE reduce production modifier_list_star ->
-- On CHAR reduce production modifier_list_star ->
-- On BYTE reduce production modifier_list_star ->
-- On BOOLEAN reduce production modifier_list_star ->
-- On AS reduce production modifier_list_star ->

State 758:
## Known stack suffix:
## modifier_list_star
## LR(1) items:
method_signature_short -> modifier_list_star . jtype name L_PAREN parameter_args_opt_list_question_mark R_PAREN [ STATIC COLON ]
## Transitions:
-- On VOID shift to state 40
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On nonvoid_type shift to state 55
-- On jtype shift to state 759
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 759:
## Known stack suffix:
## modifier_list_star jtype
## LR(1) items:
method_signature_short -> modifier_list_star jtype . name L_PAREN parameter_args_opt_list_question_mark R_PAREN [ STATIC COLON ]
## Transitions:
-- On TRUE shift to state 18
-- On QUOTED_NAME shift to state 19
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On quoted_name shift to state 57
-- On name shift to state 760
-- On identifier shift to state 89
## Reductions:

State 760:
## Known stack suffix:
## modifier_list_star jtype name
## LR(1) items:
method_signature_short -> modifier_list_star jtype name . L_PAREN parameter_args_opt_list_question_mark R_PAREN [ STATIC COLON ]
## Transitions:
-- On L_PAREN shift to state 761
## Reductions:

State 761:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN
## LR(1) items:
method_signature_short -> modifier_list_star jtype name L_PAREN . parameter_args_opt_list_question_mark R_PAREN [ STATIC COLON ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On parameter_list_args_opt shift to state 762
-- On parameter_args_opt_list_question_mark shift to state 763
-- On parameter_args_opt shift to state 765
-- On nonvoid_type shift to state 768
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:
-- On R_PAREN reduce production parameter_args_opt_list_question_mark ->

State 762:
## Known stack suffix:
## parameter_list_args_opt
## LR(1) items:
parameter_args_opt_list_question_mark -> parameter_list_args_opt . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_args_opt_list_question_mark -> parameter_list_args_opt

State 763:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_args_opt_list_question_mark
## LR(1) items:
method_signature_short -> modifier_list_star jtype name L_PAREN parameter_args_opt_list_question_mark . R_PAREN [ STATIC COLON ]
## Transitions:
-- On R_PAREN shift to state 764
## Reductions:

State 764:
## Known stack suffix:
## modifier_list_star jtype name L_PAREN parameter_args_opt_list_question_mark R_PAREN
## LR(1) items:
method_signature_short -> modifier_list_star jtype name L_PAREN parameter_args_opt_list_question_mark R_PAREN . [ STATIC COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_signature_short -> modifier_list_star jtype name L_PAREN parameter_args_opt_list_question_mark R_PAREN

State 765:
## Known stack suffix:
## parameter_args_opt
## LR(1) items:
parameter_list_args_opt -> parameter_args_opt . [ R_PAREN ]
parameter_list_args_opt -> parameter_args_opt . COMMA parameter_list_args_opt [ R_PAREN ]
## Transitions:
-- On COMMA shift to state 766
## Reductions:
-- On R_PAREN reduce production parameter_list_args_opt -> parameter_args_opt

State 766:
## Known stack suffix:
## parameter_args_opt COMMA
## LR(1) items:
parameter_list_args_opt -> parameter_args_opt COMMA . parameter_list_args_opt [ R_PAREN ]
## Transitions:
-- On TRUE shift to state 18
-- On SHORT shift to state 41
-- On QUOTED_NAME shift to state 19
-- On NULL shift to state 42
-- On LONG shift to state 43
-- On INT shift to state 44
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FLOAT shift to state 45
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On DOUBLE shift to state 46
-- On CHAR shift to state 47
-- On BYTE shift to state 48
-- On BOOLEAN shift to state 49
-- On AS shift to state 24
-- On quoted_name shift to state 50
-- On parameter_list_args_opt shift to state 767
-- On parameter_args_opt shift to state 765
-- On nonvoid_type shift to state 768
-- On identifier shift to state 127
-- On full_identifier shift to state 129
-- On base_type_no_name shift to state 131
## Reductions:

State 767:
## Known stack suffix:
## parameter_args_opt COMMA parameter_list_args_opt
## LR(1) items:
parameter_list_args_opt -> parameter_args_opt COMMA parameter_list_args_opt . [ R_PAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_list_args_opt -> parameter_args_opt COMMA parameter_list_args_opt

State 768:
## Known stack suffix:
## nonvoid_type
## LR(1) items:
parameter_args_opt -> nonvoid_type . [ R_PAREN COMMA ]
parameter_args_opt -> nonvoid_type . identifier [ R_PAREN COMMA ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 769
## Reductions:
-- On R_PAREN reduce production parameter_args_opt -> nonvoid_type
-- On COMMA reduce production parameter_args_opt -> nonvoid_type

State 769:
## Known stack suffix:
## nonvoid_type identifier
## LR(1) items:
parameter_args_opt -> nonvoid_type identifier . [ R_PAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_args_opt -> nonvoid_type identifier

State 770:
## Known stack suffix:
## file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs
## LR(1) items:
classspec -> file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs . R_BRACE [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
-- On R_BRACE shift to state 771
## Reductions:

State 771:
## Known stack suffix:
## file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs R_BRACE
## LR(1) items:
classspec -> file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs R_BRACE . [ INTERFACE IMPORT EOF CLASS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production classspec -> file_type class_name extends_clause implements_clause L_BRACE apf_defines exports_clause axioms_clause methods_specs R_BRACE

State 772:
## Known stack suffix:
## method_spec
## LR(1) items:
methods_specs -> method_spec . methods_specs [ R_BRACE ]
## Transitions:
-- On VOLATILE shift to state 1
-- On TRANSIENT shift to state 2
-- On SYNCHRONIZED shift to state 3
-- On STRICTFP shift to state 4
-- On STATIC shift to state 5
-- On PUBLIC shift to state 6
-- On PROTECTED shift to state 7
-- On PRIVATE shift to state 8
-- On NATIVE shift to state 9
-- On FINAL shift to state 10
-- On ENUM shift to state 11
-- On ANNOTATION shift to state 12
-- On ABSTRACT shift to state 13
-- On modifier_list_star shift to state 758
-- On modifier shift to state 443
-- On methods_specs shift to state 773
-- On method_spec shift to state 772
-- On method_signature_short shift to state 774
## Reductions:
-- On VOID reduce production modifier_list_star ->
-- On TRUE reduce production modifier_list_star ->
-- On SHORT reduce production modifier_list_star ->
-- On R_BRACE reduce production methods_specs ->
-- On QUOTED_NAME reduce production modifier_list_star ->
-- On NULL reduce production modifier_list_star ->
-- On LONG reduce production modifier_list_star ->
-- On INT reduce production modifier_list_star ->
-- On IDENTIFIER reduce production modifier_list_star ->
-- On FULL_IDENTIFIER reduce production modifier_list_star ->
-- On FLOAT reduce production modifier_list_star ->
-- On FALSE reduce production modifier_list_star ->
-- On EMP reduce production modifier_list_star ->
-- On DOUBLE reduce production modifier_list_star ->
-- On CHAR reduce production modifier_list_star ->
-- On BYTE reduce production modifier_list_star ->
-- On BOOLEAN reduce production modifier_list_star ->
-- On AS reduce production modifier_list_star ->

State 773:
## Known stack suffix:
## method_spec methods_specs
## LR(1) items:
methods_specs -> method_spec methods_specs . [ R_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production methods_specs -> method_spec methods_specs

State 774:
## Known stack suffix:
## method_signature_short
## LR(1) items:
method_spec -> method_signature_short . COLON specs SEMICOLON source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short . STATIC COLON specs SEMICOLON source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short . COLON specs source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short . STATIC COLON specs source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On STATIC shift to state 775
-- On COLON shift to state 784
## Reductions:

State 775:
## Known stack suffix:
## method_signature_short STATIC
## LR(1) items:
method_spec -> method_signature_short STATIC . COLON specs SEMICOLON source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short STATIC . COLON specs source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On COLON shift to state 776
## Reductions:

State 776:
## Known stack suffix:
## method_signature_short STATIC COLON
## LR(1) items:
method_spec -> method_signature_short STATIC COLON . specs SEMICOLON source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short STATIC COLON . specs source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 160
-- On specs shift to state 777
-- On spec shift to state 781
## Reductions:

State 777:
## Known stack suffix:
## method_signature_short STATIC COLON specs
## LR(1) items:
method_spec -> method_signature_short STATIC COLON specs . SEMICOLON source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short STATIC COLON specs . source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On SOURCE_POS_TAG shift to state 373
-- On SEMICOLON shift to state 778
-- On source_pos_tag_option shift to state 780
-- On source_pos_tag shift to state 392
## Reductions:
-- On VOLATILE reduce production source_pos_tag_option ->
-- On VOID reduce production source_pos_tag_option ->
-- On TRUE reduce production source_pos_tag_option ->
-- On TRANSIENT reduce production source_pos_tag_option ->
-- On SYNCHRONIZED reduce production source_pos_tag_option ->
-- On STRICTFP reduce production source_pos_tag_option ->
-- On STATIC reduce production source_pos_tag_option ->
-- On SHORT reduce production source_pos_tag_option ->
-- On R_BRACE reduce production source_pos_tag_option ->
-- On QUOTED_NAME reduce production source_pos_tag_option ->
-- On PUBLIC reduce production source_pos_tag_option ->
-- On PROTECTED reduce production source_pos_tag_option ->
-- On PRIVATE reduce production source_pos_tag_option ->
-- On NULL reduce production source_pos_tag_option ->
-- On NATIVE reduce production source_pos_tag_option ->
-- On LONG reduce production source_pos_tag_option ->
-- On INT reduce production source_pos_tag_option ->
-- On IDENTIFIER reduce production source_pos_tag_option ->
-- On FULL_IDENTIFIER reduce production source_pos_tag_option ->
-- On FLOAT reduce production source_pos_tag_option ->
-- On FINAL reduce production source_pos_tag_option ->
-- On FALSE reduce production source_pos_tag_option ->
-- On ENUM reduce production source_pos_tag_option ->
-- On EMP reduce production source_pos_tag_option ->
-- On DOUBLE reduce production source_pos_tag_option ->
-- On CHAR reduce production source_pos_tag_option ->
-- On BYTE reduce production source_pos_tag_option ->
-- On BOOLEAN reduce production source_pos_tag_option ->
-- On AS reduce production source_pos_tag_option ->
-- On ANNOTATION reduce production source_pos_tag_option ->
-- On ABSTRACT reduce production source_pos_tag_option ->

State 778:
## Known stack suffix:
## method_signature_short STATIC COLON specs SEMICOLON
## LR(1) items:
method_spec -> method_signature_short STATIC COLON specs SEMICOLON . source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On SOURCE_POS_TAG shift to state 373
-- On source_pos_tag_option shift to state 779
-- On source_pos_tag shift to state 392
## Reductions:
-- On VOLATILE reduce production source_pos_tag_option ->
-- On VOID reduce production source_pos_tag_option ->
-- On TRUE reduce production source_pos_tag_option ->
-- On TRANSIENT reduce production source_pos_tag_option ->
-- On SYNCHRONIZED reduce production source_pos_tag_option ->
-- On STRICTFP reduce production source_pos_tag_option ->
-- On STATIC reduce production source_pos_tag_option ->
-- On SHORT reduce production source_pos_tag_option ->
-- On R_BRACE reduce production source_pos_tag_option ->
-- On QUOTED_NAME reduce production source_pos_tag_option ->
-- On PUBLIC reduce production source_pos_tag_option ->
-- On PROTECTED reduce production source_pos_tag_option ->
-- On PRIVATE reduce production source_pos_tag_option ->
-- On NULL reduce production source_pos_tag_option ->
-- On NATIVE reduce production source_pos_tag_option ->
-- On LONG reduce production source_pos_tag_option ->
-- On INT reduce production source_pos_tag_option ->
-- On IDENTIFIER reduce production source_pos_tag_option ->
-- On FULL_IDENTIFIER reduce production source_pos_tag_option ->
-- On FLOAT reduce production source_pos_tag_option ->
-- On FINAL reduce production source_pos_tag_option ->
-- On FALSE reduce production source_pos_tag_option ->
-- On ENUM reduce production source_pos_tag_option ->
-- On EMP reduce production source_pos_tag_option ->
-- On DOUBLE reduce production source_pos_tag_option ->
-- On CHAR reduce production source_pos_tag_option ->
-- On BYTE reduce production source_pos_tag_option ->
-- On BOOLEAN reduce production source_pos_tag_option ->
-- On AS reduce production source_pos_tag_option ->
-- On ANNOTATION reduce production source_pos_tag_option ->
-- On ABSTRACT reduce production source_pos_tag_option ->

State 779:
## Known stack suffix:
## method_signature_short STATIC COLON specs SEMICOLON source_pos_tag_option
## LR(1) items:
method_spec -> method_signature_short STATIC COLON specs SEMICOLON source_pos_tag_option . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_spec -> method_signature_short STATIC COLON specs SEMICOLON source_pos_tag_option

State 780:
## Known stack suffix:
## method_signature_short STATIC COLON specs source_pos_tag_option
## LR(1) items:
method_spec -> method_signature_short STATIC COLON specs source_pos_tag_option . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_spec -> method_signature_short STATIC COLON specs source_pos_tag_option

State 781:
## Known stack suffix:
## spec
## LR(1) items:
specs -> spec . ANDALSO specs [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
specs -> spec . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On ANDALSO shift to state 782
## Reductions:
-- On VOLATILE reduce production specs -> spec
-- On VOID reduce production specs -> spec
-- On TRUE reduce production specs -> spec
-- On TRANSIENT reduce production specs -> spec
-- On SYNCHRONIZED reduce production specs -> spec
-- On STRICTFP reduce production specs -> spec
-- On STATIC reduce production specs -> spec
-- On SOURCE_POS_TAG reduce production specs -> spec
-- On SHORT reduce production specs -> spec
-- On SEMICOLON reduce production specs -> spec
-- On R_BRACE reduce production specs -> spec
-- On QUOTED_NAME reduce production specs -> spec
-- On PUBLIC reduce production specs -> spec
-- On PROTECTED reduce production specs -> spec
-- On PRIVATE reduce production specs -> spec
-- On NULL reduce production specs -> spec
-- On NATIVE reduce production specs -> spec
-- On LONG reduce production specs -> spec
-- On INT reduce production specs -> spec
-- On IDENTIFIER reduce production specs -> spec
-- On FULL_IDENTIFIER reduce production specs -> spec
-- On FLOAT reduce production specs -> spec
-- On FINAL reduce production specs -> spec
-- On FALSE reduce production specs -> spec
-- On ENUM reduce production specs -> spec
-- On EMP reduce production specs -> spec
-- On DOUBLE reduce production specs -> spec
-- On CHAR reduce production specs -> spec
-- On BYTE reduce production specs -> spec
-- On BOOLEAN reduce production specs -> spec
-- On AS reduce production specs -> spec
-- On ANNOTATION reduce production specs -> spec
-- On ABSTRACT reduce production specs -> spec

State 782:
## Known stack suffix:
## spec ANDALSO
## LR(1) items:
specs -> spec ANDALSO . specs [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 160
-- On specs shift to state 783
-- On spec shift to state 781
## Reductions:

State 783:
## Known stack suffix:
## spec ANDALSO specs
## LR(1) items:
specs -> spec ANDALSO specs . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production specs -> spec ANDALSO specs

State 784:
## Known stack suffix:
## method_signature_short COLON
## LR(1) items:
method_spec -> method_signature_short COLON . specs SEMICOLON source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short COLON . specs source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On L_BRACE shift to state 160
-- On specs shift to state 785
-- On spec shift to state 781
## Reductions:

State 785:
## Known stack suffix:
## method_signature_short COLON specs
## LR(1) items:
method_spec -> method_signature_short COLON specs . SEMICOLON source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
method_spec -> method_signature_short COLON specs . source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On SOURCE_POS_TAG shift to state 373
-- On SEMICOLON shift to state 786
-- On source_pos_tag_option shift to state 788
-- On source_pos_tag shift to state 392
## Reductions:
-- On VOLATILE reduce production source_pos_tag_option ->
-- On VOID reduce production source_pos_tag_option ->
-- On TRUE reduce production source_pos_tag_option ->
-- On TRANSIENT reduce production source_pos_tag_option ->
-- On SYNCHRONIZED reduce production source_pos_tag_option ->
-- On STRICTFP reduce production source_pos_tag_option ->
-- On STATIC reduce production source_pos_tag_option ->
-- On SHORT reduce production source_pos_tag_option ->
-- On R_BRACE reduce production source_pos_tag_option ->
-- On QUOTED_NAME reduce production source_pos_tag_option ->
-- On PUBLIC reduce production source_pos_tag_option ->
-- On PROTECTED reduce production source_pos_tag_option ->
-- On PRIVATE reduce production source_pos_tag_option ->
-- On NULL reduce production source_pos_tag_option ->
-- On NATIVE reduce production source_pos_tag_option ->
-- On LONG reduce production source_pos_tag_option ->
-- On INT reduce production source_pos_tag_option ->
-- On IDENTIFIER reduce production source_pos_tag_option ->
-- On FULL_IDENTIFIER reduce production source_pos_tag_option ->
-- On FLOAT reduce production source_pos_tag_option ->
-- On FINAL reduce production source_pos_tag_option ->
-- On FALSE reduce production source_pos_tag_option ->
-- On ENUM reduce production source_pos_tag_option ->
-- On EMP reduce production source_pos_tag_option ->
-- On DOUBLE reduce production source_pos_tag_option ->
-- On CHAR reduce production source_pos_tag_option ->
-- On BYTE reduce production source_pos_tag_option ->
-- On BOOLEAN reduce production source_pos_tag_option ->
-- On AS reduce production source_pos_tag_option ->
-- On ANNOTATION reduce production source_pos_tag_option ->
-- On ABSTRACT reduce production source_pos_tag_option ->

State 786:
## Known stack suffix:
## method_signature_short COLON specs SEMICOLON
## LR(1) items:
method_spec -> method_signature_short COLON specs SEMICOLON . source_pos_tag_option [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
-- On SOURCE_POS_TAG shift to state 373
-- On source_pos_tag_option shift to state 787
-- On source_pos_tag shift to state 392
## Reductions:
-- On VOLATILE reduce production source_pos_tag_option ->
-- On VOID reduce production source_pos_tag_option ->
-- On TRUE reduce production source_pos_tag_option ->
-- On TRANSIENT reduce production source_pos_tag_option ->
-- On SYNCHRONIZED reduce production source_pos_tag_option ->
-- On STRICTFP reduce production source_pos_tag_option ->
-- On STATIC reduce production source_pos_tag_option ->
-- On SHORT reduce production source_pos_tag_option ->
-- On R_BRACE reduce production source_pos_tag_option ->
-- On QUOTED_NAME reduce production source_pos_tag_option ->
-- On PUBLIC reduce production source_pos_tag_option ->
-- On PROTECTED reduce production source_pos_tag_option ->
-- On PRIVATE reduce production source_pos_tag_option ->
-- On NULL reduce production source_pos_tag_option ->
-- On NATIVE reduce production source_pos_tag_option ->
-- On LONG reduce production source_pos_tag_option ->
-- On INT reduce production source_pos_tag_option ->
-- On IDENTIFIER reduce production source_pos_tag_option ->
-- On FULL_IDENTIFIER reduce production source_pos_tag_option ->
-- On FLOAT reduce production source_pos_tag_option ->
-- On FINAL reduce production source_pos_tag_option ->
-- On FALSE reduce production source_pos_tag_option ->
-- On ENUM reduce production source_pos_tag_option ->
-- On EMP reduce production source_pos_tag_option ->
-- On DOUBLE reduce production source_pos_tag_option ->
-- On CHAR reduce production source_pos_tag_option ->
-- On BYTE reduce production source_pos_tag_option ->
-- On BOOLEAN reduce production source_pos_tag_option ->
-- On AS reduce production source_pos_tag_option ->
-- On ANNOTATION reduce production source_pos_tag_option ->
-- On ABSTRACT reduce production source_pos_tag_option ->

State 787:
## Known stack suffix:
## method_signature_short COLON specs SEMICOLON source_pos_tag_option
## LR(1) items:
method_spec -> method_signature_short COLON specs SEMICOLON source_pos_tag_option . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_spec -> method_signature_short COLON specs SEMICOLON source_pos_tag_option

State 788:
## Known stack suffix:
## method_signature_short COLON specs source_pos_tag_option
## LR(1) items:
method_spec -> method_signature_short COLON specs source_pos_tag_option . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production method_spec -> method_signature_short COLON specs source_pos_tag_option

State 789:
## Known stack suffix:
## apf_define
## LR(1) items:
apf_defines -> apf_define . apf_defines [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
-- On EXPORT shift to state 693
-- On DEFINE shift to state 714
-- On apf_defines shift to state 790
-- On apf_define shift to state 789
## Reductions:
-- On VOLATILE reduce production apf_defines ->
-- On VOID reduce production apf_defines ->
-- On TRUE reduce production apf_defines ->
-- On TRANSIENT reduce production apf_defines ->
-- On SYNCHRONIZED reduce production apf_defines ->
-- On STRICTFP reduce production apf_defines ->
-- On STATIC reduce production apf_defines ->
-- On SHORT reduce production apf_defines ->
-- On R_BRACE reduce production apf_defines ->
-- On QUOTED_NAME reduce production apf_defines ->
-- On PUBLIC reduce production apf_defines ->
-- On PROTECTED reduce production apf_defines ->
-- On PRIVATE reduce production apf_defines ->
-- On NULL reduce production apf_defines ->
-- On NATIVE reduce production apf_defines ->
-- On LONG reduce production apf_defines ->
-- On INT reduce production apf_defines ->
-- On IDENTIFIER reduce production apf_defines ->
-- On FULL_IDENTIFIER reduce production apf_defines ->
-- On FLOAT reduce production apf_defines ->
-- On FINAL reduce production apf_defines ->
-- On FALSE reduce production apf_defines ->
-- On EXPORTS reduce production apf_defines ->
-- On ENUM reduce production apf_defines ->
-- On EMP reduce production apf_defines ->
-- On DOUBLE reduce production apf_defines ->
-- On CHAR reduce production apf_defines ->
-- On BYTE reduce production apf_defines ->
-- On BOOLEAN reduce production apf_defines ->
-- On AXIOMS reduce production apf_defines ->
-- On AS reduce production apf_defines ->
-- On ANNOTATION reduce production apf_defines ->
-- On ABSTRACT reduce production apf_defines ->

State 790:
## Known stack suffix:
## apf_define apf_defines
## LR(1) items:
apf_defines -> apf_define apf_defines . [ VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production apf_defines -> apf_define apf_defines

State 791:
## Known stack suffix:
## classspec
## LR(1) items:
spec_file -> classspec . spec_file [ # ]
## Transitions:
-- On INTERFACE shift to state 15
-- On IMPORT shift to state 683
-- On EOF shift to state 686
-- On CLASS shift to state 16
-- On spec_file shift to state 792
-- On file_type shift to state 688
-- On classspec shift to state 791
## Reductions:

State 792:
## Known stack suffix:
## classspec spec_file
## LR(1) items:
spec_file -> classspec spec_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production spec_file -> classspec spec_file

State 793:
## Known stack suffix:
## spec_file
## LR(1) items:
spec_file' -> spec_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept spec_file

State 794:
## Known stack suffix:
##
## LR(1) items:
symb_question_file' -> . symb_question_file [ # ]
## Transitions:
-- On SPECIFICATION shift to state 795
-- On EOF shift to state 826
-- On symb_question_file shift to state 827
-- On symb_question shift to state 828
## Reductions:

State 795:
## Known stack suffix:
## SPECIFICATION
## LR(1) items:
symb_question -> SPECIFICATION . identifier COLON spec QUESTIONMARK core_stmt_list [ SPECIFICATION EOF ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 796
## Reductions:

State 796:
## Known stack suffix:
## SPECIFICATION identifier
## LR(1) items:
symb_question -> SPECIFICATION identifier . COLON spec QUESTIONMARK core_stmt_list [ SPECIFICATION EOF ]
## Transitions:
-- On COLON shift to state 797
## Reductions:

State 797:
## Known stack suffix:
## SPECIFICATION identifier COLON
## LR(1) items:
symb_question -> SPECIFICATION identifier COLON . spec QUESTIONMARK core_stmt_list [ SPECIFICATION EOF ]
## Transitions:
-- On L_BRACE shift to state 160
-- On spec shift to state 798
## Reductions:

State 798:
## Known stack suffix:
## SPECIFICATION identifier COLON spec
## LR(1) items:
symb_question -> SPECIFICATION identifier COLON spec . QUESTIONMARK core_stmt_list [ SPECIFICATION EOF ]
## Transitions:
-- On QUESTIONMARK shift to state 799
## Reductions:

State 799:
## Known stack suffix:
## SPECIFICATION identifier COLON spec QUESTIONMARK
## LR(1) items:
symb_question -> SPECIFICATION identifier COLON spec QUESTIONMARK . core_stmt_list [ SPECIFICATION EOF ]
## Transitions:
-- On NOP shift to state 800
-- On LABEL shift to state 801
-- On GOTO shift to state 803
-- On END shift to state 808
-- On ASSIGN shift to state 809
-- On core_stmt_list shift to state 822
-- On core_stmt shift to state 823
## Reductions:
-- On SPECIFICATION reduce production core_stmt_list ->
-- On EOF reduce production core_stmt_list ->

State 800:
## Known stack suffix:
## NOP
## LR(1) items:
core_stmt -> NOP . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_stmt -> NOP

State 801:
## Known stack suffix:
## LABEL
## LR(1) items:
core_stmt -> LABEL . IDENTIFIER [ SEMICOLON ]
## Transitions:
-- On IDENTIFIER shift to state 802
## Reductions:

State 802:
## Known stack suffix:
## LABEL IDENTIFIER
## LR(1) items:
core_stmt -> LABEL IDENTIFIER . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_stmt -> LABEL IDENTIFIER

State 803:
## Known stack suffix:
## GOTO
## LR(1) items:
core_stmt -> GOTO . label_list [ SEMICOLON ]
## Transitions:
-- On IDENTIFIER shift to state 804
-- On label_list shift to state 807
## Reductions:

State 804:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
label_list -> IDENTIFIER . [ SEMICOLON ]
label_list -> IDENTIFIER . COMMA label_list [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 805
## Reductions:
-- On SEMICOLON reduce production label_list -> IDENTIFIER

State 805:
## Known stack suffix:
## IDENTIFIER COMMA
## LR(1) items:
label_list -> IDENTIFIER COMMA . label_list [ SEMICOLON ]
## Transitions:
-- On IDENTIFIER shift to state 804
-- On label_list shift to state 806
## Reductions:

State 806:
## Known stack suffix:
## IDENTIFIER COMMA label_list
## LR(1) items:
label_list -> IDENTIFIER COMMA label_list . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production label_list -> IDENTIFIER COMMA label_list

State 807:
## Known stack suffix:
## GOTO label_list
## LR(1) items:
core_stmt -> GOTO label_list . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_stmt -> GOTO label_list

State 808:
## Known stack suffix:
## END
## LR(1) items:
core_stmt -> END . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_stmt -> END

State 809:
## Known stack suffix:
## ASSIGN
## LR(1) items:
core_stmt -> ASSIGN . core_assn_args spec L_PAREN jargument_npv_list R_PAREN [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On COLON_EQUALS shift to state 810
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv_list_ne shift to state 811
-- On lvariable_npv shift to state 813
-- On identifier shift to state 816
-- On core_assn_args shift to state 817
-- On at_identifier shift to state 478
## Reductions:
-- On L_BRACE reduce production core_assn_args ->

State 810:
## Known stack suffix:
## COLON_EQUALS
## LR(1) items:
core_assn_args -> COLON_EQUALS . [ L_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_assn_args -> COLON_EQUALS

State 811:
## Known stack suffix:
## lvariable_npv_list_ne
## LR(1) items:
core_assn_args -> lvariable_npv_list_ne . COLON_EQUALS [ L_BRACE ]
## Transitions:
-- On COLON_EQUALS shift to state 812
## Reductions:

State 812:
## Known stack suffix:
## lvariable_npv_list_ne COLON_EQUALS
## LR(1) items:
core_assn_args -> lvariable_npv_list_ne COLON_EQUALS . [ L_BRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_assn_args -> lvariable_npv_list_ne COLON_EQUALS

State 813:
## Known stack suffix:
## lvariable_npv
## LR(1) items:
lvariable_npv_list_ne -> lvariable_npv . [ COLON_EQUALS ]
lvariable_npv_list_ne -> lvariable_npv . COMMA lvariable_npv_list_ne [ COLON_EQUALS ]
## Transitions:
-- On COMMA shift to state 814
## Reductions:
-- On COLON_EQUALS reduce production lvariable_npv_list_ne -> lvariable_npv

State 814:
## Known stack suffix:
## lvariable_npv COMMA
## LR(1) items:
lvariable_npv_list_ne -> lvariable_npv COMMA . lvariable_npv_list_ne [ COLON_EQUALS ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv_list_ne shift to state 815
-- On lvariable_npv shift to state 813
-- On identifier shift to state 816
-- On at_identifier shift to state 478
## Reductions:

State 815:
## Known stack suffix:
## lvariable_npv COMMA lvariable_npv_list_ne
## LR(1) items:
lvariable_npv_list_ne -> lvariable_npv COMMA lvariable_npv_list_ne . [ COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable_npv_list_ne -> lvariable_npv COMMA lvariable_npv_list_ne

State 816:
## Known stack suffix:
## identifier
## LR(1) items:
lvariable_npv -> identifier . [ COMMA COLON_EQUALS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lvariable_npv -> identifier

State 817:
## Known stack suffix:
## ASSIGN core_assn_args
## LR(1) items:
core_stmt -> ASSIGN core_assn_args . spec L_PAREN jargument_npv_list R_PAREN [ SEMICOLON ]
## Transitions:
-- On L_BRACE shift to state 160
-- On spec shift to state 818
## Reductions:

State 818:
## Known stack suffix:
## ASSIGN core_assn_args spec
## LR(1) items:
core_stmt -> ASSIGN core_assn_args spec . L_PAREN jargument_npv_list R_PAREN [ SEMICOLON ]
## Transitions:
-- On L_PAREN shift to state 819
## Reductions:

State 819:
## Known stack suffix:
## ASSIGN core_assn_args spec L_PAREN
## LR(1) items:
core_stmt -> ASSIGN core_assn_args spec L_PAREN . jargument_npv_list R_PAREN [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 462
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On CMPLT shift to state 171
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 464
-- On jargument_npv_list_ne shift to state 471
-- On jargument_npv_list shift to state 820
-- On jargument_npv shift to state 474
-- On identifier shift to state 469
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On R_PAREN reduce production jargument_npv_list ->

State 820:
## Known stack suffix:
## ASSIGN core_assn_args spec L_PAREN jargument_npv_list
## LR(1) items:
core_stmt -> ASSIGN core_assn_args spec L_PAREN jargument_npv_list . R_PAREN [ SEMICOLON ]
## Transitions:
-- On R_PAREN shift to state 821
## Reductions:

State 821:
## Known stack suffix:
## ASSIGN core_assn_args spec L_PAREN jargument_npv_list R_PAREN
## LR(1) items:
core_stmt -> ASSIGN core_assn_args spec L_PAREN jargument_npv_list R_PAREN . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_stmt -> ASSIGN core_assn_args spec L_PAREN jargument_npv_list R_PAREN

State 822:
## Known stack suffix:
## SPECIFICATION identifier COLON spec QUESTIONMARK core_stmt_list
## LR(1) items:
symb_question -> SPECIFICATION identifier COLON spec QUESTIONMARK core_stmt_list . [ SPECIFICATION EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symb_question -> SPECIFICATION identifier COLON spec QUESTIONMARK core_stmt_list

State 823:
## Known stack suffix:
## core_stmt
## LR(1) items:
core_stmt_list -> core_stmt . SEMICOLON core_stmt_list [ SPECTEST SPECIFICATION EOF ]
## Transitions:
-- On SEMICOLON shift to state 824
## Reductions:

State 824:
## Known stack suffix:
## core_stmt SEMICOLON
## LR(1) items:
core_stmt_list -> core_stmt SEMICOLON . core_stmt_list [ SPECTEST SPECIFICATION EOF ]
## Transitions:
-- On NOP shift to state 800
-- On LABEL shift to state 801
-- On GOTO shift to state 803
-- On END shift to state 808
-- On ASSIGN shift to state 809
-- On core_stmt_list shift to state 825
-- On core_stmt shift to state 823
## Reductions:
-- On SPECTEST reduce production core_stmt_list ->
-- On SPECIFICATION reduce production core_stmt_list ->
-- On EOF reduce production core_stmt_list ->

State 825:
## Known stack suffix:
## core_stmt SEMICOLON core_stmt_list
## LR(1) items:
core_stmt_list -> core_stmt SEMICOLON core_stmt_list . [ SPECTEST SPECIFICATION EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production core_stmt_list -> core_stmt SEMICOLON core_stmt_list

State 826:
## Known stack suffix:
## EOF
## LR(1) items:
symb_question_file -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production symb_question_file -> EOF

State 827:
## Known stack suffix:
## symb_question_file
## LR(1) items:
symb_question_file' -> symb_question_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept symb_question_file

State 828:
## Known stack suffix:
## symb_question
## LR(1) items:
symb_question_file -> symb_question . symb_question_file [ # ]
## Transitions:
-- On SPECIFICATION shift to state 795
-- On EOF shift to state 826
-- On symb_question_file shift to state 829
-- On symb_question shift to state 828
## Reductions:

State 829:
## Known stack suffix:
## symb_question symb_question_file
## LR(1) items:
symb_question_file -> symb_question symb_question_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production symb_question_file -> symb_question symb_question_file

State 830:
## Known stack suffix:
##
## LR(1) items:
symb_test_file' -> . symb_test_file [ # ]
## Transitions:
-- On SPECTEST shift to state 831
-- On EOF shift to state 840
-- On symb_test_file shift to state 841
-- On symb_test shift to state 842
## Reductions:

State 831:
## Known stack suffix:
## SPECTEST
## LR(1) items:
symb_test -> SPECTEST . identifier COLON spec QUESTIONMARK boolean core_stmt_list [ SPECTEST EOF ]
## Transitions:
-- On TRUE shift to state 18
-- On IDENTIFIER shift to state 20
-- On FALSE shift to state 22
-- On EMP shift to state 23
-- On AS shift to state 24
-- On identifier shift to state 832
## Reductions:

State 832:
## Known stack suffix:
## SPECTEST identifier
## LR(1) items:
symb_test -> SPECTEST identifier . COLON spec QUESTIONMARK boolean core_stmt_list [ SPECTEST EOF ]
## Transitions:
-- On COLON shift to state 833
## Reductions:

State 833:
## Known stack suffix:
## SPECTEST identifier COLON
## LR(1) items:
symb_test -> SPECTEST identifier COLON . spec QUESTIONMARK boolean core_stmt_list [ SPECTEST EOF ]
## Transitions:
-- On L_BRACE shift to state 160
-- On spec shift to state 834
## Reductions:

State 834:
## Known stack suffix:
## SPECTEST identifier COLON spec
## LR(1) items:
symb_test -> SPECTEST identifier COLON spec . QUESTIONMARK boolean core_stmt_list [ SPECTEST EOF ]
## Transitions:
-- On QUESTIONMARK shift to state 835
## Reductions:

State 835:
## Known stack suffix:
## SPECTEST identifier COLON spec QUESTIONMARK
## LR(1) items:
symb_test -> SPECTEST identifier COLON spec QUESTIONMARK . boolean core_stmt_list [ SPECTEST EOF ]
## Transitions:
-- On TRUE shift to state 836
-- On FALSE shift to state 837
-- On boolean shift to state 838
## Reductions:

State 836:
## Known stack suffix:
## TRUE
## LR(1) items:
boolean -> TRUE . [ SPECTEST NOP LABEL INCONSISTENCY IMPLICATION GOTO FRAME EOF END ASSIGN ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean -> TRUE

State 837:
## Known stack suffix:
## FALSE
## LR(1) items:
boolean -> FALSE . [ SPECTEST NOP LABEL INCONSISTENCY IMPLICATION GOTO FRAME EOF END ASSIGN ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production boolean -> FALSE

State 838:
## Known stack suffix:
## SPECTEST identifier COLON spec QUESTIONMARK boolean
## LR(1) items:
symb_test -> SPECTEST identifier COLON spec QUESTIONMARK boolean . core_stmt_list [ SPECTEST EOF ]
## Transitions:
-- On NOP shift to state 800
-- On LABEL shift to state 801
-- On GOTO shift to state 803
-- On END shift to state 808
-- On ASSIGN shift to state 809
-- On core_stmt_list shift to state 839
-- On core_stmt shift to state 823
## Reductions:
-- On SPECTEST reduce production core_stmt_list ->
-- On EOF reduce production core_stmt_list ->

State 839:
## Known stack suffix:
## SPECTEST identifier COLON spec QUESTIONMARK boolean core_stmt_list
## LR(1) items:
symb_test -> SPECTEST identifier COLON spec QUESTIONMARK boolean core_stmt_list . [ SPECTEST EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production symb_test -> SPECTEST identifier COLON spec QUESTIONMARK boolean core_stmt_list

State 840:
## Known stack suffix:
## EOF
## LR(1) items:
symb_test_file -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production symb_test_file -> EOF

State 841:
## Known stack suffix:
## symb_test_file
## LR(1) items:
symb_test_file' -> symb_test_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept symb_test_file

State 842:
## Known stack suffix:
## symb_test
## LR(1) items:
symb_test_file -> symb_test . symb_test_file [ # ]
## Transitions:
-- On SPECTEST shift to state 831
-- On EOF shift to state 840
-- On symb_test_file shift to state 843
-- On symb_test shift to state 842
## Reductions:

State 843:
## Known stack suffix:
## symb_test symb_test_file
## LR(1) items:
symb_test_file -> symb_test symb_test_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production symb_test_file -> symb_test symb_test_file

State 844:
## Known stack suffix:
##
## LR(1) items:
test_file' -> . test_file [ # ]
## Transitions:
-- On INCONSISTENCY shift to state 845
-- On IMPLICATION shift to state 850
-- On FRAME shift to state 857
-- On EOF shift to state 864
-- On ABS shift to state 865
-- On test_file shift to state 870
-- On test shift to state 871
## Reductions:

State 845:
## Known stack suffix:
## INCONSISTENCY
## LR(1) items:
test -> INCONSISTENCY . COLON formula_npv QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On COLON shift to state 846
## Reductions:

State 846:
## Known stack suffix:
## INCONSISTENCY COLON
## LR(1) items:
test -> INCONSISTENCY COLON . formula_npv QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 847
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On QUESTIONMARK reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 847:
## Known stack suffix:
## INCONSISTENCY COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ QUESTIONMARK OROR OR MULT ]
test -> INCONSISTENCY COLON formula_npv . QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On QUESTIONMARK shift to state 848
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 848:
## Known stack suffix:
## INCONSISTENCY COLON formula_npv QUESTIONMARK
## LR(1) items:
test -> INCONSISTENCY COLON formula_npv QUESTIONMARK . boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 836
-- On FALSE shift to state 837
-- On boolean shift to state 849
## Reductions:

State 849:
## Known stack suffix:
## INCONSISTENCY COLON formula_npv QUESTIONMARK boolean
## LR(1) items:
test -> INCONSISTENCY COLON formula_npv QUESTIONMARK boolean . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production test -> INCONSISTENCY COLON formula_npv QUESTIONMARK boolean

State 850:
## Known stack suffix:
## IMPLICATION
## LR(1) items:
test -> IMPLICATION . COLON formula_npv VDASH formula_npv QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On COLON shift to state 851
## Reductions:

State 851:
## Known stack suffix:
## IMPLICATION COLON
## LR(1) items:
test -> IMPLICATION COLON . formula_npv VDASH formula_npv QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 852
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 852:
## Known stack suffix:
## IMPLICATION COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH OROR OR MULT ]
test -> IMPLICATION COLON formula_npv . VDASH formula_npv QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On VDASH shift to state 853
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 853:
## Known stack suffix:
## IMPLICATION COLON formula_npv VDASH
## LR(1) items:
test -> IMPLICATION COLON formula_npv VDASH . formula_npv QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 854
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On QUESTIONMARK reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 854:
## Known stack suffix:
## IMPLICATION COLON formula_npv VDASH formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ QUESTIONMARK OROR OR MULT ]
test -> IMPLICATION COLON formula_npv VDASH formula_npv . QUESTIONMARK boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On QUESTIONMARK shift to state 855
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 855:
## Known stack suffix:
## IMPLICATION COLON formula_npv VDASH formula_npv QUESTIONMARK
## LR(1) items:
test -> IMPLICATION COLON formula_npv VDASH formula_npv QUESTIONMARK . boolean [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 836
-- On FALSE shift to state 837
-- On boolean shift to state 856
## Reductions:

State 856:
## Known stack suffix:
## IMPLICATION COLON formula_npv VDASH formula_npv QUESTIONMARK boolean
## LR(1) items:
test -> IMPLICATION COLON formula_npv VDASH formula_npv QUESTIONMARK boolean . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production test -> IMPLICATION COLON formula_npv VDASH formula_npv QUESTIONMARK boolean

State 857:
## Known stack suffix:
## FRAME
## LR(1) items:
test -> FRAME . COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On COLON shift to state 858
## Reductions:

State 858:
## Known stack suffix:
## FRAME COLON
## LR(1) items:
test -> FRAME COLON . formula_npv VDASH formula_npv QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 859
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On VDASH reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 859:
## Known stack suffix:
## FRAME COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ VDASH OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ VDASH OROR OR MULT ]
test -> FRAME COLON formula_npv . VDASH formula_npv QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On VDASH shift to state 860
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 860:
## Known stack suffix:
## FRAME COLON formula_npv VDASH
## LR(1) items:
test -> FRAME COLON formula_npv VDASH . formula_npv QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 861
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On QUESTIONMARK reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 861:
## Known stack suffix:
## FRAME COLON formula_npv VDASH formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ QUESTIONMARK OROR OR MULT ]
test -> FRAME COLON formula_npv VDASH formula_npv . QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On QUESTIONMARK shift to state 862
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 862:
## Known stack suffix:
## FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK
## LR(1) items:
test -> FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK . formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 863
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->

State 863:
## Known stack suffix:
## FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ]
formula_npv -> formula_npv . OR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ]
formula_npv -> formula_npv . OROR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ]
test -> FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:
-- On INCONSISTENCY reduce production test -> FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv
-- On IMPLICATION reduce production test -> FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv
-- On FRAME reduce production test -> FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv
-- On EOF reduce production test -> FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv
-- On ABS reduce production test -> FRAME COLON formula_npv VDASH formula_npv QUESTIONMARK formula_npv

State 864:
## Known stack suffix:
## EOF
## LR(1) items:
test_file -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production test_file -> EOF

State 865:
## Known stack suffix:
## ABS
## LR(1) items:
test -> ABS . COLON formula_npv QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On COLON shift to state 866
## Reductions:

State 866:
## Known stack suffix:
## ABS COLON
## LR(1) items:
test -> ABS COLON . formula_npv QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 867
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On QUESTIONMARK reduce production formula_npv ->
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->

State 867:
## Known stack suffix:
## ABS COLON formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OR formula_npv [ QUESTIONMARK OROR OR MULT ]
formula_npv -> formula_npv . OROR formula_npv [ QUESTIONMARK OROR OR MULT ]
test -> ABS COLON formula_npv . QUESTIONMARK formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On QUESTIONMARK shift to state 868
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:

State 868:
## Known stack suffix:
## ABS COLON formula_npv QUESTIONMARK
## LR(1) items:
test -> ABS COLON formula_npv QUESTIONMARK . formula_npv [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On TRUE shift to state 18
-- On STRING_CONSTANT shift to state 454
-- On RETURN shift to state 455
-- On MINUS shift to state 456
-- On L_PAREN shift to state 458
-- On L_BRACE shift to state 459
-- On INTEGER_CONSTANT shift to state 463
-- On IDENTIFIER shift to state 20
-- On FULL_IDENTIFIER shift to state 21
-- On FALSE shift to state 484
-- On EMP shift to state 485
-- On CMPLT shift to state 171
-- On BANG shift to state 486
-- On AT_IDENTIFIER shift to state 155
-- On AS shift to state 24
-- On lvariable_npv shift to state 491
-- On jargument_npv shift to state 514
-- On identifier shift to state 503
-- On full_identifier shift to state 507
-- On formula_npv shift to state 869
-- On field_signature shift to state 477
-- On at_identifier shift to state 478
## Reductions:
-- On OROR reduce production formula_npv ->
-- On OR reduce production formula_npv ->
-- On MULT reduce production formula_npv ->
-- On INCONSISTENCY reduce production formula_npv ->
-- On IMPLICATION reduce production formula_npv ->
-- On FRAME reduce production formula_npv ->
-- On EOF reduce production formula_npv ->
-- On ABS reduce production formula_npv ->

State 869:
## Known stack suffix:
## ABS COLON formula_npv QUESTIONMARK formula_npv
## LR(1) items:
formula_npv -> formula_npv . MULT formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ]
formula_npv -> formula_npv . OR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ]
formula_npv -> formula_npv . OROR formula_npv [ OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ]
test -> ABS COLON formula_npv QUESTIONMARK formula_npv . [ INCONSISTENCY IMPLICATION FRAME EOF ABS ]
## Transitions:
-- On OROR shift to state 513
-- On OR shift to state 518
-- On MULT shift to state 516
## Reductions:
-- On INCONSISTENCY reduce production test -> ABS COLON formula_npv QUESTIONMARK formula_npv
-- On IMPLICATION reduce production test -> ABS COLON formula_npv QUESTIONMARK formula_npv
-- On FRAME reduce production test -> ABS COLON formula_npv QUESTIONMARK formula_npv
-- On EOF reduce production test -> ABS COLON formula_npv QUESTIONMARK formula_npv
-- On ABS reduce production test -> ABS COLON formula_npv QUESTIONMARK formula_npv

State 870:
## Known stack suffix:
## test_file
## LR(1) items:
test_file' -> test_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept test_file

State 871:
## Known stack suffix:
## test
## LR(1) items:
test_file -> test . test_file [ # ]
## Transitions:
-- On INCONSISTENCY shift to state 845
-- On IMPLICATION shift to state 850
-- On FRAME shift to state 857
-- On EOF shift to state 864
-- On ABS shift to state 865
-- On test_file shift to state 872
-- On test shift to state 871
## Reductions:

State 872:
## Known stack suffix:
## test test_file
## LR(1) items:
test_file -> test test_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production test_file -> test test_file

