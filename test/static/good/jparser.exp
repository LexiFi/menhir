File "jparser.mly", line 136, characters 7-10:
Warning: the token CLS is unused.
File "jparser.mly", line 111, characters 16-26:
Warning: the token CORE_LABEL is unused.
File "jparser.mly", line 157, characters 7-14:
Warning: the token EMPRULE is unused.
File "jparser.mly", line 174, characters 7-14:
Warning: the token GARBAGE is unused.
File "jparser.mly", line 186, characters 7-16:
Warning: the token INVARIANT is unused.
File "jparser.mly", line 214, characters 7-11:
Warning: the token PRED is unused.
File "jparser.mly", line 219, characters 7-15:
Warning: the token PURERULE is unused.
File "jparser.mly", line 221, characters 7-12:
Warning: the token QUOTE is unused.
File "jparser.mly", line 249, characters 7-17:
Warning: the token UNDERSCORE is unused.
File "jparser.mly", line 404, characters 0-13:
Warning: symbol exp_posts_npv is unreachable from any of the start symbol(s).
File "jparser.mly", line 841, characters 0-18:
Warning: symbol lvariable_npv_list is unreachable from any of the start symbol(s).
File "jparser.mly", line 388, characters 0-8:
Warning: symbol spec_npv is unreachable from any of the start symbol(s).
File "jparser.mly", line 390, characters 0-9:
Warning: symbol specs_npv is unreachable from any of the start symbol(s).
Grammar has 144 nonterminal symbols, among which 8 start symbols.
Grammar has 153 terminal symbols.
Grammar has 407 productions.
nullable(without_simp) = true
nullable(without) = true
nullable(where) = true
nullable(varterm) = true
nullable(variable) = false
nullable(unop_expr) = false
nullable(unop) = false
nullable(throws_clause) = true
nullable(test_file) = false
nullable(test) = false
nullable(symb_test_file) = false
nullable(symb_test) = false
nullable(symb_question_file) = false
nullable(symb_question) = false
nullable(string_constant) = false
nullable(statement) = false
nullable(specs) = false
nullable(spec_file) = false
nullable(spec) = false
nullable(spatial_list_ne) = false
nullable(spatial_list) = true
nullable(spatial_at) = false
nullable(source_pos_tag_option) = true
nullable(source_pos_tag) = false
nullable(sequent_list_or_list) = true
nullable(sequent_list) = true
nullable(sequent) = false
nullable(rule_file) = false
nullable(rule) = false
nullable(requires_clause) = true
nullable(reference) = false
nullable(quoted_name) = false
nullable(question_file) = false
nullable(question) = false
nullable(paramlist_question_mark) = true
nullable(paramlist) = true
nullable(parameter_list_question_mark) = true
nullable(parameter_list_args_opt) = false
nullable(parameter_list) = false
nullable(parameter_args_opt_list_question_mark) = true
nullable(parameter_args_opt) = false
nullable(parameter) = false
nullable(old_clauses) = true
nullable(old_clause) = false
nullable(nonvoid_type) = false
nullable(nonstatic_invoke) = false
nullable(new_expr) = false
nullable(named_implication_star) = true
nullable(named_implication) = false
nullable(name) = false
nullable(modifier_list_star) = true
nullable(modifier) = false
nullable(minus_question_mark) = true
nullable(methods_specs) = true
nullable(method_spec) = false
nullable(method_signature_short) = false
nullable(method_signature) = false
nullable(method_body) = false
nullable(member_list_star) = true
nullable(member) = false
nullable(lvariable_npv_list_ne) = false
nullable(lvariable_npv) = false
nullable(lvariable_list_ne) = false
nullable(lvariable_list) = true
nullable(lvariable) = false
nullable(local_name_list) = false
nullable(local_name) = false
nullable(label_name) = false
nullable(label_list) = false
nullable(jtype) = false
nullable(jimple_type) = false
nullable(jargument_npv_list_ne) = false
nullable(jargument_npv_list) = true
nullable(jargument_npv) = false
nullable(jargument_list_ne) = false
nullable(jargument_list) = true
nullable(jargument) = false
nullable(invoke_expr) = false
nullable(integer_constant_long) = false
nullable(integer_constant) = false
nullable(implements_clause) = true
nullable(immediate_question_mark) = true
nullable(immediate) = false
nullable(ifclause) = true
nullable(identifier_op) = true
nullable(identifier) = false
nullable(goto_stmt) = false
nullable(full_identifier) = false
nullable(formula_npv) = true
nullable(formula) = true
nullable(float_constant) = false
nullable(fldlist_npv) = true
nullable(fldlist) = true
nullable(fixed_array_descriptor) = false
nullable(file_type) = false
nullable(file_body) = false
nullable(file) = false
nullable(field_signature) = false
nullable(field_ref) = false
nullable(extends_clause) = true
nullable(expression) = false
nullable(exports_clause) = true
nullable(exportLocal_predicate_def_star) = true
nullable(exportLocal_predicate_def) = false
nullable(exp_posts) = true
nullable(equiv_rule) = false
nullable(eq_as) = false
nullable(ensures_clause) = true
nullable(declaration_or_statement_list_star) = true
nullable(declaration_or_statement) = false
nullable(declaration) = false
nullable(core_stmt_list) = true
nullable(core_stmt) = false
nullable(core_assn_args) = true
nullable(constant) = false
nullable(clause_list) = false
nullable(clause) = false
nullable(classspec) = false
nullable(class_name_list) = false
nullable(class_name) = false
nullable(catch_clause_list_star) = true
nullable(catch_clause) = false
nullable(case_stmt_list_plus) = false
nullable(case_stmt) = false
nullable(case_label) = false
nullable(boolean) = false
nullable(bool_expr) = false
nullable(binop_val_no_multor) = false
nullable(binop_no_mult) = false
nullable(binop_expr) = false
nullable(binop_cmp) = false
nullable(binop) = false
nullable(base_type_no_name) = false
nullable(base_type) = false
nullable(axioms_clause) = true
nullable(at_identifier) = false
nullable(array_ref) = false
nullable(array_descriptor_list_plus) = false
nullable(array_descriptor) = false
nullable(array_brackets_list_star) = true
nullable(arg_list_question_mark) = true
nullable(arg_list) = false
nullable(apf_defines) = true
nullable(apf_define) = false
first(without_simp) = WITHOUT
first(without) = WITHOUT
first(where) = WHERE
first(varterm) = TRUE QUESTIONMARK IDENTIFIER FALSE EMP AT_IDENTIFIER AS
first(variable) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP CMPLT AS
first(unop_expr) = NEG LENGTHOF
first(unop) = NEG LENGTHOF
first(throws_clause) = THROWS
first(test_file) = INCONSISTENCY IMPLICATION FRAME EOF ABS
first(test) = INCONSISTENCY IMPLICATION FRAME ABS
first(symb_test_file) = SPECTEST EOF
first(symb_test) = SPECTEST
first(symb_question_file) = SPECIFICATION EOF
first(symb_question) = SPECIFICATION
first(string_constant) = STRING_CONSTANT
first(statement) = VIRTUALINVOKE TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE RETURN RET QUOTED_NAME NOP L_BRACE LOOKUPSWITCH INTERFACEINVOKE IF IDENTIFIER GOTO FALSE EXITMONITOR ENTERMONITOR EMP CMPLT BREAKPOINT AS
first(specs) = L_BRACE
first(spec_file) = INTERFACE IMPORT EOF CLASS
first(spec) = L_BRACE
first(spatial_list_ne) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(spatial_list) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(spatial_at) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(source_pos_tag_option) = SOURCE_POS_TAG
first(source_pos_tag) = SOURCE_POS_TAG
first(sequent_list_or_list) = TRUE STRING_CONSTANT RETURN QUESTIONMARK ORTEXT OROR OR MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(sequent_list) = TRUE STRING_CONSTANT RETURN QUESTIONMARK OROR OR MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(sequent) = TRUE STRING_CONSTANT RETURN QUESTIONMARK OROR OR MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(rule_file) = RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE
first(rule) = RULE REWRITERULE IMPORT EQUIV CONSTRUCTOR ABSRULE
first(requires_clause) = REQUIRES
first(reference) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP CMPLT AS
first(quoted_name) = QUOTED_NAME
first(question_file) = INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION
first(question) = INCONSISTENCY IMPLICATION FRAME ABS ABDUCTION
first(paramlist_question_mark) = COMMA
first(paramlist) = TRUE IDENTIFIER FALSE EMP AS
first(parameter_list_question_mark) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(parameter_list_args_opt) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(parameter_list) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(parameter_args_opt_list_question_mark) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(parameter_args_opt) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(parameter) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(old_clauses) = OLD
first(old_clause) = OLD
first(nonvoid_type) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(nonstatic_invoke) = VIRTUALINVOKE SPECIALINVOKE INTERFACEINVOKE
first(new_expr) = NEWMULTIARRAY NEWARRAY NEW
first(named_implication_star) = TRUE IDENTIFIER FALSE EMP AS
first(named_implication) = TRUE IDENTIFIER FALSE EMP AS
first(name) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS
first(modifier_list_star) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL ENUM ANNOTATION ABSTRACT
first(modifier) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE FINAL ENUM ANNOTATION ABSTRACT
first(minus_question_mark) = MINUS
first(methods_specs) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
first(method_spec) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
first(method_signature_short) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
first(method_signature) = CMPLT
first(method_body) = SEMICOLON L_BRACE
first(member_list_star) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
first(member) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
first(lvariable_npv_list_ne) = TRUE IDENTIFIER FALSE EMP AT_IDENTIFIER AS
first(lvariable_npv) = TRUE IDENTIFIER FALSE EMP AT_IDENTIFIER AS
first(lvariable_list_ne) = TRUE QUESTIONMARK IDENTIFIER FALSE EMP AT_IDENTIFIER AS
first(lvariable_list) = TRUE QUESTIONMARK IDENTIFIER FALSE EMP AT_IDENTIFIER AS
first(lvariable) = TRUE QUESTIONMARK IDENTIFIER FALSE EMP AT_IDENTIFIER AS
first(local_name_list) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS
first(local_name) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS
first(label_name) = TRUE IDENTIFIER FALSE EMP AS
first(label_list) = IDENTIFIER
first(jtype) = VOID TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(jimple_type) = UNKNOWN TRUE SHORT QUOTED_NAME NULL_TYPE NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(jargument_npv_list_ne) = TRUE STRING_CONSTANT RETURN MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(jargument_npv_list) = TRUE STRING_CONSTANT RETURN MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(jargument_npv) = TRUE STRING_CONSTANT RETURN MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(jargument_list_ne) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(jargument_list) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(jargument) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
first(invoke_expr) = VIRTUALINVOKE STATICINVOKE SPECIALINVOKE INTERFACEINVOKE
first(integer_constant_long) = INTEGER_CONSTANT_LONG
first(integer_constant) = INTEGER_CONSTANT
first(implements_clause) = IMPLEMENTS
first(immediate_question_mark) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
first(immediate) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
first(ifclause) = IF
first(identifier_op) = TRUE IDENTIFIER FALSE EMP AS
first(identifier) = TRUE IDENTIFIER FALSE EMP AS
first(goto_stmt) = GOTO
first(full_identifier) = FULL_IDENTIFIER
first(formula_npv) = TRUE STRING_CONSTANT RETURN OROR OR MULT MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT BANG AT_IDENTIFIER AS
first(formula) = TRUE STRING_CONSTANT RETURN QUESTIONMARK OROR OR MULT MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT BANG AT_IDENTIFIER AS
first(float_constant) = FLOAT_CONSTANT
first(fldlist_npv) = TRUE IDENTIFIER FALSE EMP AS
first(fldlist) = TRUE IDENTIFIER FALSE EMP AS
first(fixed_array_descriptor) = L_BRACKET
first(file_type) = INTERFACE CLASS
first(file_body) = L_BRACE
first(file) = VOLATILE TRANSIENT SYNCHRONIZED STRICTFP STATIC PUBLIC PROTECTED PRIVATE NATIVE INTERFACE FINAL ENUM CLASS ANNOTATION ABSTRACT
first(field_signature) = CMPLT
first(field_ref) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP CMPLT AS
first(extends_clause) = EXTENDS
first(expression) = VIRTUALINVOKE TRUE STRING_CONSTANT STATICINVOKE SPECIALINVOKE QUOTED_NAME NULL NEWMULTIARRAY NEWARRAY NEW NEG MINUS L_PAREN LENGTHOF INTERFACEINVOKE INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CMPLT CLASS AS
first(exports_clause) = EXPORTS
first(exportLocal_predicate_def_star) = TRUE IDENTIFIER FALSE EMP AS
first(exportLocal_predicate_def) = TRUE IDENTIFIER FALSE EMP AS
first(exp_posts) = L_BRACE
first(equiv_rule) = EQUIV
first(eq_as) = EQUALS AS
first(ensures_clause) = ENSURES
first(declaration_or_statement_list_star) = VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR BYTE BREAKPOINT BOOLEAN AS
first(declaration_or_statement) = VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR BYTE BREAKPOINT BOOLEAN AS
first(declaration) = UNKNOWN TRUE SHORT QUOTED_NAME NULL_TYPE NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(core_stmt_list) = NOP LABEL GOTO END ASSIGN
first(core_stmt) = NOP LABEL GOTO END ASSIGN
first(core_assn_args) = TRUE IDENTIFIER FALSE EMP COLON_EQUALS AT_IDENTIFIER AS
first(constant) = STRING_CONSTANT NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT FLOAT_CONSTANT CLASS
first(clause_list) = TRUE STRING_CONSTANT RETURN QUESTIONMARK PUREGUARD OROR OR NOTINCONTEXT NOTIN MULT MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT BANG AT_IDENTIFIER AS
first(clause) = TRUE STRING_CONSTANT RETURN QUESTIONMARK PUREGUARD OROR OR NOTINCONTEXT NOTIN MULT MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT BANG AT_IDENTIFIER AS
first(classspec) = INTERFACE CLASS
first(class_name_list) = TRUE QUOTED_NAME IDENTIFIER FULL_IDENTIFIER FALSE EMP AS
first(class_name) = TRUE QUOTED_NAME IDENTIFIER FULL_IDENTIFIER FALSE EMP AS
first(catch_clause_list_star) = CATCH
first(catch_clause) = CATCH
first(case_stmt_list_plus) = DEFAULT CASE
first(case_stmt) = DEFAULT CASE
first(case_label) = DEFAULT CASE
first(boolean) = TRUE FALSE
first(bool_expr) = TRUE STRING_CONSTANT QUOTED_NAME NULL NEG MINUS LENGTHOF INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
first(binop_val_no_multor) = XOR USHR SHR SHL PLUS MOD MINUS DIV AND
first(binop_no_mult) = XOR USHR SHR SHL PLUS OR MOD MINUS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
first(binop_expr) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
first(binop_cmp) = CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP
first(binop) = XOR USHR SHR SHL PLUS OR MULT MOD MINUS DIV CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
first(base_type_no_name) = SHORT NULL LONG INT FLOAT DOUBLE CHAR BYTE BOOLEAN
first(base_type) = TRUE SHORT QUOTED_NAME NULL LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CHAR BYTE BOOLEAN AS
first(axioms_clause) = AXIOMS
first(at_identifier) = AT_IDENTIFIER
first(array_ref) = TRUE IDENTIFIER FALSE EMP AS
first(array_descriptor_list_plus) = L_BRACKET
first(array_descriptor) = L_BRACKET
first(array_brackets_list_star) = L_BRACKET
first(arg_list_question_mark) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
first(arg_list) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
first(apf_defines) = EXPORT DEFINE
first(apf_define) = EXPORT DEFINE
minimal(without_simp) = (* 0 *) 
minimal(without) = (* 0 *) 
minimal(where) = (* 0 *) 
minimal(varterm) = (* 0 *) 
minimal(variable) = (* 1 *) QUOTED_NAME
minimal(unop_expr) = (* 2 *) LENGTHOF QUOTED_NAME
minimal(unop) = (* 1 *) LENGTHOF
minimal(throws_clause) = (* 0 *) 
minimal(test_file) = (* 1 *) EOF
minimal(test) = (* 3 *) ABS COLON QUESTIONMARK
minimal(symb_test_file) = (* 1 *) EOF
minimal(symb_test) = (* 9 *) SPECTEST AS COLON L_BRACE R_BRACE L_BRACE R_BRACE QUESTIONMARK TRUE
minimal(symb_question_file) = (* 1 *) EOF
minimal(symb_question) = (* 8 *) SPECIFICATION AS COLON L_BRACE R_BRACE L_BRACE R_BRACE QUESTIONMARK
minimal(string_constant) = (* 1 *) STRING_CONSTANT
minimal(statement) = (* 2 *) AS COLON
minimal(specs) = (* 4 *) L_BRACE R_BRACE L_BRACE R_BRACE
minimal(spec_file) = (* 1 *) EOF
minimal(spec) = (* 4 *) L_BRACE R_BRACE L_BRACE R_BRACE
minimal(spatial_list_ne) = (* 3 *) AS L_PAREN R_PAREN
minimal(spatial_list) = (* 0 *) 
minimal(spatial_at) = (* 3 *) AS L_PAREN R_PAREN
minimal(source_pos_tag_option) = (* 0 *) 
minimal(source_pos_tag) = (* 18 *) SOURCE_POS_TAG COLON AS COLON INTEGER_CONSTANT AS COLON INTEGER_CONSTANT AS COLON INTEGER_CONSTANT AS COLON INTEGER_CONSTANT AS COLON FULL_IDENTIFIER SOURCE_POS_TAG_CLOSE
minimal(sequent_list_or_list) = (* 0 *) 
minimal(sequent_list) = (* 0 *) 
minimal(sequent) = (* 2 *) OR VDASH
minimal(rule_file) = (* 1 *) EOF
minimal(rule) = (* 2 *) CONSTRUCTOR AS
minimal(requires_clause) = (* 0 *) 
minimal(reference) = (* 4 *) AS L_BRACKET QUOTED_NAME R_BRACKET
minimal(quoted_name) = (* 1 *) QUOTED_NAME
minimal(question_file) = (* 1 *) EOF
minimal(question) = (* 2 *) INCONSISTENCY COLON
minimal(paramlist_question_mark) = (* 0 *) 
minimal(paramlist) = (* 0 *) 
minimal(parameter_list_question_mark) = (* 0 *) 
minimal(parameter_list_args_opt) = (* 1 *) BOOLEAN
minimal(parameter_list) = (* 1 *) BOOLEAN
minimal(parameter_args_opt_list_question_mark) = (* 0 *) 
minimal(parameter_args_opt) = (* 1 *) BOOLEAN
minimal(parameter) = (* 1 *) BOOLEAN
minimal(old_clauses) = (* 0 *) 
minimal(old_clause) = (* 2 *) OLD SEMICOLON
minimal(nonvoid_type) = (* 1 *) BOOLEAN
minimal(nonstatic_invoke) = (* 1 *) SPECIALINVOKE
minimal(new_expr) = (* 2 *) NEW BOOLEAN
minimal(named_implication_star) = (* 0 *) 
minimal(named_implication) = (* 4 *) AS COLON IMP SEMICOLON
minimal(name) = (* 1 *) QUOTED_NAME
minimal(modifier_list_star) = (* 0 *) 
minimal(modifier) = (* 1 *) ABSTRACT
minimal(minus_question_mark) = (* 0 *) 
minimal(methods_specs) = (* 0 *) 
minimal(method_spec) = (* 9 *) VOID QUOTED_NAME L_PAREN R_PAREN COLON L_BRACE R_BRACE L_BRACE R_BRACE
minimal(method_signature_short) = (* 4 *) VOID QUOTED_NAME L_PAREN R_PAREN
minimal(method_signature) = (* 8 *) CMPLT QUOTED_NAME COLON VOID QUOTED_NAME L_PAREN R_PAREN CMPGT
minimal(method_body) = (* 1 *) SEMICOLON
minimal(member_list_star) = (* 0 *) 
minimal(member) = (* 3 *) VOID QUOTED_NAME SEMICOLON
minimal(lvariable_npv_list_ne) = (* 1 *) AT_IDENTIFIER
minimal(lvariable_npv) = (* 1 *) AT_IDENTIFIER
minimal(lvariable_list_ne) = (* 1 *) AT_IDENTIFIER
minimal(lvariable_list) = (* 0 *) 
minimal(lvariable) = (* 1 *) AT_IDENTIFIER
minimal(local_name_list) = (* 1 *) QUOTED_NAME
minimal(local_name) = (* 1 *) QUOTED_NAME
minimal(label_name) = (* 1 *) AS
minimal(label_list) = (* 1 *) IDENTIFIER
minimal(jtype) = (* 1 *) VOID
minimal(jimple_type) = (* 1 *) UNKNOWN
minimal(jargument_npv_list_ne) = (* 1 *) RETURN
minimal(jargument_npv_list) = (* 0 *) 
minimal(jargument_npv) = (* 1 *) RETURN
minimal(jargument_list_ne) = (* 1 *) RETURN
minimal(jargument_list) = (* 0 *) 
minimal(jargument) = (* 1 *) RETURN
minimal(invoke_expr) = (* 11 *) STATICINVOKE CMPLT QUOTED_NAME COLON VOID QUOTED_NAME L_PAREN R_PAREN CMPGT L_PAREN R_PAREN
minimal(integer_constant_long) = (* 1 *) INTEGER_CONSTANT_LONG
minimal(integer_constant) = (* 1 *) INTEGER_CONSTANT
minimal(implements_clause) = (* 0 *) 
minimal(immediate_question_mark) = (* 0 *) 
minimal(immediate) = (* 1 *) QUOTED_NAME
minimal(ifclause) = (* 0 *) 
minimal(identifier_op) = (* 0 *) 
minimal(identifier) = (* 1 *) AS
minimal(goto_stmt) = (* 3 *) GOTO AS SEMICOLON
minimal(full_identifier) = (* 1 *) FULL_IDENTIFIER
minimal(formula_npv) = (* 0 *) 
minimal(formula) = (* 0 *) 
minimal(float_constant) = (* 1 *) FLOAT_CONSTANT
minimal(fldlist_npv) = (* 0 *) 
minimal(fldlist) = (* 0 *) 
minimal(fixed_array_descriptor) = (* 3 *) L_BRACKET QUOTED_NAME R_BRACKET
minimal(file_type) = (* 1 *) CLASS
minimal(file_body) = (* 2 *) L_BRACE R_BRACE
minimal(file) = (* 4 *) CLASS QUOTED_NAME L_BRACE R_BRACE
minimal(field_signature) = (* 6 *) CMPLT QUOTED_NAME COLON VOID QUOTED_NAME CMPGT
minimal(field_ref) = (* 6 *) CMPLT QUOTED_NAME COLON VOID QUOTED_NAME CMPGT
minimal(extends_clause) = (* 0 *) 
minimal(expression) = (* 1 *) QUOTED_NAME
minimal(exports_clause) = (* 0 *) 
minimal(exportLocal_predicate_def_star) = (* 0 *) 
minimal(exportLocal_predicate_def) = (* 6 *) AS L_PAREN AT_IDENTIFIER R_PAREN EQUALS SEMICOLON
minimal(exp_posts) = (* 0 *) 
minimal(equiv_rule) = (* 3 *) EQUIV COLON IMP
minimal(eq_as) = (* 1 *) EQUALS
minimal(ensures_clause) = (* 0 *) 
minimal(declaration_or_statement_list_star) = (* 0 *) 
minimal(declaration_or_statement) = (* 2 *) AS COLON
minimal(declaration) = (* 3 *) UNKNOWN QUOTED_NAME SEMICOLON
minimal(core_stmt_list) = (* 0 *) 
minimal(core_stmt) = (* 1 *) END
minimal(core_assn_args) = (* 0 *) 
minimal(constant) = (* 1 *) INTEGER_CONSTANT
minimal(clause_list) = (* 1 *) NOTINCONTEXT
minimal(clause) = (* 1 *) NOTINCONTEXT
minimal(classspec) = (* 4 *) CLASS QUOTED_NAME L_BRACE R_BRACE
minimal(class_name_list) = (* 1 *) QUOTED_NAME
minimal(class_name) = (* 1 *) QUOTED_NAME
minimal(catch_clause_list_star) = (* 0 *) 
minimal(catch_clause) = (* 9 *) CATCH QUOTED_NAME FROM AS TO AS WITH AS SEMICOLON
minimal(case_stmt_list_plus) = (* 5 *) DEFAULT COLON GOTO AS SEMICOLON
minimal(case_stmt) = (* 5 *) DEFAULT COLON GOTO AS SEMICOLON
minimal(case_label) = (* 1 *) DEFAULT
minimal(boolean) = (* 1 *) TRUE
minimal(bool_expr) = (* 2 *) LENGTHOF QUOTED_NAME
minimal(binop_val_no_multor) = (* 1 *) AND
minimal(binop_no_mult) = (* 1 *) AND
minimal(binop_expr) = (* 3 *) QUOTED_NAME AND QUOTED_NAME
minimal(binop_cmp) = (* 1 *) CMP
minimal(binop) = (* 1 *) AND
minimal(base_type_no_name) = (* 1 *) BOOLEAN
minimal(base_type) = (* 1 *) BOOLEAN
minimal(axioms_clause) = (* 0 *) 
minimal(at_identifier) = (* 1 *) AT_IDENTIFIER
minimal(array_ref) = (* 4 *) AS L_BRACKET QUOTED_NAME R_BRACKET
minimal(array_descriptor_list_plus) = (* 2 *) L_BRACKET R_BRACKET
minimal(array_descriptor) = (* 2 *) L_BRACKET R_BRACKET
minimal(array_brackets_list_star) = (* 0 *) 
minimal(arg_list_question_mark) = (* 0 *) 
minimal(arg_list) = (* 1 *) QUOTED_NAME
minimal(apf_defines) = (* 0 *) 
minimal(apf_define) = (* 7 *) EXPORT AS L_PAREN AT_IDENTIFIER R_PAREN EQUALS SEMICOLON
follow(without_simp) = WHERE RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE
follow(without) = WHERE IF
follow(where) = RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE
follow(varterm) = NOTINCONTEXT NOTIN
follow(variable) = EQUALS
follow(unop_expr) = SEMICOLON GOTO
follow(unop) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
follow(throws_clause) = SEMICOLON REQUIRES OLD L_BRACE ENSURES
follow(test_file) = #
follow(test) = INCONSISTENCY IMPLICATION FRAME EOF ABS
follow(symb_test_file) = #
follow(symb_test) = SPECTEST EOF
follow(symb_question_file) = #
follow(symb_question) = SPECIFICATION EOF
follow(string_constant) = XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
follow(statement) = VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS
follow(specs) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
follow(spec_file) = #
follow(spec) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT #
follow(spatial_list_ne) = OROR OR
follow(spatial_list) = OROR OR
follow(spatial_at) = OROR OR MULT
follow(source_pos_tag_option) = VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT
follow(source_pos_tag) = VOLATILE VOID VIRTUALINVOKE UNKNOWN TRUE TRANSIENT THROW TABLESWITCH SYNCHRONIZED STRICTFP STATICINVOKE STATIC SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL_TYPE NULL NOP NATIVE L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FINAL FALSE EXITMONITOR ENUM ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS ANNOTATION ABSTRACT
follow(sequent_list_or_list) = RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE
follow(sequent_list) = RULE REWRITERULE ORTEXT IMPORT EQUIV EOF CONSTRUCTOR ABSRULE
follow(sequent) = WITHOUT WHERE SEMICOLON RULE REWRITERULE ORTEXT IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE
follow(rule_file) = #
follow(rule) = RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE
follow(requires_clause) = SEMICOLON OLD L_BRACE ENSURES
follow(reference) = SEMICOLON EQUALS
follow(quoted_name) = XOR USHR TRUE SHR SHL SEMICOLON R_PAREN R_BRACKET REQUIRES QUOTED_NAME PLUS OR OLD MULT MOD MINUS L_PAREN L_BRACKET L_BRACE INSTANCEOF IMPLEMENTS IDENTIFIER GOTO FROM FALSE EXTENDS EQUALS ENSURES EMP DOT DIV COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AS AND
follow(question_file) = #
follow(question) = INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION
follow(paramlist_question_mark) = R_PAREN
follow(paramlist) = R_PAREN R_BRACE
follow(parameter_list_question_mark) = R_PAREN
follow(parameter_list_args_opt) = R_PAREN
follow(parameter_list) = R_PAREN
follow(parameter_args_opt_list_question_mark) = R_PAREN
follow(parameter_args_opt) = R_PAREN COMMA
follow(parameter) = R_PAREN COMMA
follow(old_clauses) = SEMICOLON L_BRACE ENSURES
follow(old_clause) = SEMICOLON OLD L_BRACE ENSURES
follow(nonvoid_type) = TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS
follow(nonstatic_invoke) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS
follow(new_expr) = SEMICOLON
follow(named_implication_star) = R_BRACE
follow(named_implication) = TRUE R_BRACE IDENTIFIER FALSE EMP AS
follow(name) = XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS L_PAREN INSTANCEOF GOTO EQUALS DOT DIV COMMA COLON_EQUALS CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
follow(modifier_list_star) = VOID TRUE SHORT QUOTED_NAME NULL LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FALSE EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS
follow(modifier) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INTERFACE INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CLASS CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
follow(minus_question_mark) = INTEGER_CONSTANT_LONG INTEGER_CONSTANT FLOAT_CONSTANT
follow(methods_specs) = R_BRACE
follow(method_spec) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
follow(method_signature_short) = STATIC COLON
follow(method_signature) = L_PAREN
follow(method_body) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT SEMICOLON R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE OLD NULL NATIVE L_BRACE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM ENSURES EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
follow(member_list_star) = R_BRACE
follow(member) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
follow(lvariable_npv_list_ne) = COLON_EQUALS
follow(lvariable_npv) = XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DOT DIV COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION
follow(lvariable_list_ne) = R_PAREN R_BRACE NOTINCONTEXT NOTIN
follow(lvariable_list) = R_BRACE NOTINCONTEXT NOTIN
follow(lvariable) = XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE
follow(local_name_list) = SEMICOLON
follow(local_name) = XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO EQUALS DOT DIV COMMA COLON_EQUALS CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
follow(label_name) = WITH TO SEMICOLON COLON
follow(label_list) = SEMICOLON
follow(jtype) = TRUE SEMICOLON QUOTED_NAME IDENTIFIER FALSE EMP AS
follow(jimple_type) = TRUE QUOTED_NAME IDENTIFIER FALSE EMP AS
follow(jargument_npv_list_ne) = R_PAREN
follow(jargument_npv_list) = R_PAREN
follow(jargument_npv) = XOR VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE QUESTIONMARK PLUS OROR OR MULT MOD MINUS MAPSTO INCONSISTENCY IMPLICATION FRAME EQUALS EOF DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND ABS ABDUCTION
follow(jargument_list_ne) = R_PAREN
follow(jargument_list) = R_PAREN
follow(jargument) = XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO IMPORT IMP IF EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE
follow(invoke_expr) = SEMICOLON
follow(integer_constant_long) = XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
follow(integer_constant) = XOR USHR TRUE SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF IDENTIFIER GOTO FALSE EMP DIV COMMA COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AS AND
follow(implements_clause) = L_BRACE
follow(immediate_question_mark) = SEMICOLON R_BRACKET
follow(immediate) = XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
follow(ifclause) = WITHOUT WHERE RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE
follow(identifier_op) = MULT COLON
follow(identifier) = XOR WITHOUT WITH WHERE WAND VDASH USHR TRUE TO SHR SHL SEMICOLON R_PAREN R_BRACKET R_BRACE RULE REWRITERULE REQUIRES QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR OLD NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO L_PAREN L_BRACKET L_BRACE LEADSTO INSTANCEOF INCONSISTENCY IMPORT IMPLICATION IMPLEMENTS IMP IF IDENTIFIER GOTO FROM FRAME FALSE EXTENDS EQUIV EQUALS EOF ENSURES EMP DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AS AND ABSRULE ABS ABDUCTION
follow(goto_stmt) = VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SOURCE_POS_TAG SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE DEFAULT CMPLT CHAR CATCH CASE BYTE BREAKPOINT BOOLEAN AS
follow(full_identifier) = TRUE SOURCE_POS_TAG_CLOSE SEMICOLON R_PAREN REQUIRES QUOTED_NAME OLD L_PAREN L_BRACKET L_BRACE IMPLEMENTS IDENTIFIER FROM FALSE EXTENDS ENSURES EMP COMMA COLON AS
follow(formula_npv) = VDASH R_PAREN QUESTIONMARK OROR OR MULT INCONSISTENCY IMPLICATION FRAME EOF ABS ABDUCTION
follow(formula) = WITHOUT WHERE WAND VDASH SEMICOLON R_PAREN R_BRACE RULE REWRITERULE PUREGUARD ORTEXT OROR OR MULT LEADSTO IMPORT IMP IF EQUIV EOF DASHV CONSTRUCTOR BIMP ABSRULE
follow(float_constant) = XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
follow(fldlist_npv) = R_BRACE
follow(fldlist) = R_PAREN R_BRACE
follow(fixed_array_descriptor) = SEMICOLON EQUALS
follow(file_type) = TRUE QUOTED_NAME IDENTIFIER FULL_IDENTIFIER FALSE EMP AS
follow(file_body) = #
follow(file) = #
follow(field_signature) = XOR WITHOUT WHERE WAND VDASH USHR SHR SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR MULT MOD MINUS MAPSTO LEADSTO INCONSISTENCY IMPORT IMPLICATION IMP IF FRAME EQUIV EQUALS EOF DOT DIV DASHV CONSTRUCTOR COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP BIMP AND ABSRULE ABS ABDUCTION
follow(field_ref) = SEMICOLON EQUALS
follow(extends_clause) = L_BRACE IMPLEMENTS
follow(expression) = SEMICOLON
follow(exports_clause) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT
follow(exportLocal_predicate_def_star) = R_BRACE
follow(exportLocal_predicate_def) = TRUE R_BRACE IDENTIFIER FALSE EMP AS
follow(exp_posts) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SOURCE_POS_TAG SHORT SEMICOLON R_BRACE QUOTED_NAME QUESTIONMARK PUBLIC PROTECTED PRIVATE NULL NATIVE L_PAREN LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ANDALSO ABSTRACT #
follow(equiv_rule) = RULE REWRITERULE IMPORT EQUIV EOF CONSTRUCTOR ABSRULE
follow(eq_as) = TRUE STRING_CONSTANT SEMICOLON RETURN QUESTIONMARK OROR OR MULT MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FULL_IDENTIFIER FALSE EMP CMPLT BANG AT_IDENTIFIER AS
follow(ensures_clause) = SEMICOLON L_BRACE
follow(declaration_or_statement_list_star) = R_BRACE CATCH
follow(declaration_or_statement) = VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS
follow(declaration) = VIRTUALINVOKE UNKNOWN TRUE THROW TABLESWITCH STATICINVOKE SPECIALINVOKE SHORT R_BRACE RETURN RET QUOTED_NAME NULL_TYPE NULL NOP L_BRACE LOOKUPSWITCH LONG INTERFACEINVOKE INT IF IDENTIFIER GOTO FULL_IDENTIFIER FLOAT FALSE EXITMONITOR ENTERMONITOR EMP DOUBLE CMPLT CHAR CATCH BYTE BREAKPOINT BOOLEAN AS
follow(core_stmt_list) = SPECTEST SPECIFICATION EOF
follow(core_stmt) = SEMICOLON
follow(core_assn_args) = L_BRACE
follow(constant) = XOR USHR SHR SHL SEMICOLON R_PAREN R_BRACKET PLUS OR MULT MOD MINUS INSTANCEOF GOTO DIV COMMA CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP AND
follow(clause_list) = RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE
follow(clause) = SEMICOLON RULE REWRITERULE IMPORT IF EQUIV EOF CONSTRUCTOR ABSRULE
follow(classspec) = INTERFACE IMPORT EOF CLASS
follow(class_name_list) = SEMICOLON REQUIRES OLD L_BRACE IMPLEMENTS ENSURES
follow(class_name) = SEMICOLON R_PAREN REQUIRES OLD L_BRACE IMPLEMENTS FROM EXTENDS ENSURES COMMA COLON
follow(catch_clause_list_star) = R_BRACE
follow(catch_clause) = R_BRACE CATCH
follow(case_stmt_list_plus) = R_BRACE
follow(case_stmt) = R_BRACE DEFAULT CASE
follow(case_label) = COLON
follow(boolean) = SPECTEST NOP LABEL INCONSISTENCY IMPLICATION GOTO FRAME EOF END ASSIGN ABS
follow(bool_expr) = GOTO
follow(binop_val_no_multor) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
follow(binop_no_mult) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
follow(binop_expr) = SEMICOLON GOTO
follow(binop_cmp) = TRUE STRING_CONSTANT RETURN QUESTIONMARK MINUS L_PAREN L_BRACE INTEGER_CONSTANT IDENTIFIER FALSE EMP CMPLT AT_IDENTIFIER AS
follow(binop) = TRUE STRING_CONSTANT QUOTED_NAME NULL MINUS INTEGER_CONSTANT_LONG INTEGER_CONSTANT IDENTIFIER FLOAT_CONSTANT FALSE EMP CLASS AS
follow(base_type_no_name) = TRUE SEMICOLON R_PAREN QUOTED_NAME L_BRACKET IDENTIFIER FALSE EMP COMMA AS
follow(base_type) = SEMICOLON R_PAREN
follow(axioms_clause) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE ENUM EMP DOUBLE CHAR BYTE BOOLEAN AS ANNOTATION ABSTRACT
follow(at_identifier) = XOR WITHOUT WHERE WAND VOID VDASH USHR TRUE SHR SHORT SHL SEMICOLON R_PAREN R_BRACE RULE REWRITERULE QUOTED_NAME QUESTIONMARK PUREGUARD PLUS ORTEXT OROR OR NULL NOTINCONTEXT NOTIN MULT MOD MINUS MAPSTO LONG LEADSTO INT INCONSISTENCY IMPORT IMPLICATION IMP IF IDENTIFIER FULL_IDENTIFIER FRAME FLOAT FALSE EQUIV EQUALS EOF EMP DOUBLE DOT DIV DASHV CONSTRUCTOR COMMA COLON_EQUALS COLON CMPNE CMPLT CMPLE CMPL CMPGT CMPGE CMPG CMPEQ CMP CHAR BYTE BOOLEAN BIMP AS AND ABSRULE ABS ABDUCTION
follow(array_ref) = SEMICOLON EQUALS
follow(array_descriptor_list_plus) = SEMICOLON
follow(array_descriptor) = SEMICOLON L_BRACKET
follow(array_brackets_list_star) = TRUE SEMICOLON R_PAREN QUOTED_NAME IDENTIFIER FALSE EMP COMMA AS
follow(arg_list_question_mark) = R_PAREN
follow(arg_list) = R_PAREN
follow(apf_defines) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS ENUM EMP DOUBLE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT
follow(apf_define) = VOLATILE VOID TRUE TRANSIENT SYNCHRONIZED STRICTFP STATIC SHORT R_BRACE QUOTED_NAME PUBLIC PROTECTED PRIVATE NULL NATIVE LONG INT IDENTIFIER FULL_IDENTIFIER FLOAT FINAL FALSE EXPORTS EXPORT ENUM EMP DOUBLE DEFINE CHAR BYTE BOOLEAN AXIOMS AS ANNOTATION ABSTRACT
Built an LR(0) automaton with 860 states.
The grammar is not SLR(1) -- 20 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 873 states.
18 shift/reduce conflicts were silently solved.
File "jparser.mly", line 272, characters 0-5:
Warning: the precedence level assigned to AND is never useful.
File "jparser.mly", line 265, characters 0-5:
Warning: the precedence level assigned to AT_IDENTIFIER is never useful.
File "jparser.mly", line 275, characters 0-5:
Warning: the precedence level assigned to CMP is never useful.
File "jparser.mly", line 278, characters 0-5:
Warning: the precedence level assigned to CMPEQ is never useful.
File "jparser.mly", line 276, characters 0-5:
Warning: the precedence level assigned to CMPG is never useful.
File "jparser.mly", line 281, characters 0-5:
Warning: the precedence level assigned to CMPGE is never useful.
File "jparser.mly", line 280, characters 0-5:
Warning: the precedence level assigned to CMPGT is never useful.
File "jparser.mly", line 277, characters 0-5:
Warning: the precedence level assigned to CMPL is never useful.
File "jparser.mly", line 283, characters 0-5:
Warning: the precedence level assigned to CMPLE is never useful.
File "jparser.mly", line 282, characters 0-5:
Warning: the precedence level assigned to CMPLT is never useful.
File "jparser.mly", line 279, characters 0-5:
Warning: the precedence level assigned to CMPNE is never useful.
File "jparser.mly", line 292, characters 0-5:
Warning: the precedence level assigned to DEFINE is never useful.
File "jparser.mly", line 289, characters 0-5:
Warning: the precedence level assigned to DIV is never useful.
File "jparser.mly", line 293, characters 0-5:
Warning: the precedence level assigned to EXPORT is never useful.
File "jparser.mly", line 267, characters 0-5:
Warning: the precedence level assigned to FULL_IDENTIFIER is never useful.
File "jparser.mly", line 264, characters 0-5:
Warning: the precedence level assigned to IDENTIFIER is never useful.
File "jparser.mly", line 288, characters 0-5:
Warning: the precedence level assigned to MINUS is never useful.
File "jparser.mly", line 274, characters 0-5:
Warning: the precedence level assigned to MOD is never useful.
File "jparser.mly", line 287, characters 0-5:
Warning: the precedence level assigned to PLUS is never useful.
File "jparser.mly", line 266, characters 0-5:
Warning: the precedence level assigned to QUOTED_NAME is never useful.
File "jparser.mly", line 284, characters 0-5:
Warning: the precedence level assigned to SHL is never useful.
File "jparser.mly", line 285, characters 0-5:
Warning: the precedence level assigned to SHR is never useful.
File "jparser.mly", line 286, characters 0-5:
Warning: the precedence level assigned to USHR is never useful.
File "jparser.mly", line 273, characters 0-5:
Warning: the precedence level assigned to XOR is never useful.
Warning: 2 end-of-stream conflicts were arbitrarily resolved.
326 out of 873 states have a default reduction.
333 out of 873 states are represented.
0 out of 307 symbols keep track of their start position.
0 out of 307 symbols keep track of their end position.
240 out of 415 productions exploit shiftreduce optimization.
0 out of 873 states can peek at an error.
2318 functions before inlining, 362 functions after inlining.
